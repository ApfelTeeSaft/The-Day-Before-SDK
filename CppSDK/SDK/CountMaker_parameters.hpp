#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CountMaker

#include "Basic.hpp"


namespace SDK::Params
{

// Function CountMaker.CountMaker_C.CountCheck
// 0x0018 (0x0018 - 0x0000)
struct CountMaker_C_CountCheck final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Const;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CountMaker_C_CountCheck) == 0x000008, "Wrong alignment on CountMaker_C_CountCheck");
static_assert(sizeof(CountMaker_C_CountCheck) == 0x000018, "Wrong size on CountMaker_C_CountCheck");
static_assert(offsetof(CountMaker_C_CountCheck, Count) == 0x000000, "Member 'CountMaker_C_CountCheck::Count' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountCheck, __WorldContext) == 0x000008, "Member 'CountMaker_C_CountCheck::__WorldContext' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountCheck, Result) == 0x000010, "Member 'CountMaker_C_CountCheck::Result' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountCheck, Const) == 0x000014, "Member 'CountMaker_C_CountCheck::Const' has a wrong offset!");

// Function CountMaker.CountMaker_C.CountIn
// 0x0020 (0x0020 - 0x0000)
struct CountMaker_C_CountIn final
{
public:
	int32                                         InInt;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OutInt;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConstInt;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CountMaker_C_CountIn) == 0x000008, "Wrong alignment on CountMaker_C_CountIn");
static_assert(sizeof(CountMaker_C_CountIn) == 0x000020, "Wrong size on CountMaker_C_CountIn");
static_assert(offsetof(CountMaker_C_CountIn, InInt) == 0x000000, "Member 'CountMaker_C_CountIn::InInt' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountIn, __WorldContext) == 0x000008, "Member 'CountMaker_C_CountIn::__WorldContext' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountIn, OutInt) == 0x000010, "Member 'CountMaker_C_CountIn::OutInt' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountIn, ConstInt) == 0x000014, "Member 'CountMaker_C_CountIn::ConstInt' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountIn, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'CountMaker_C_CountIn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function CountMaker.CountMaker_C.CountOut
// 0x0020 (0x0020 - 0x0000)
struct CountMaker_C_CountOut final
{
public:
	int32                                         InInt;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         OutInt;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ConstInt;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CountMaker_C_CountOut) == 0x000008, "Wrong alignment on CountMaker_C_CountOut");
static_assert(sizeof(CountMaker_C_CountOut) == 0x000020, "Wrong size on CountMaker_C_CountOut");
static_assert(offsetof(CountMaker_C_CountOut, InInt) == 0x000000, "Member 'CountMaker_C_CountOut::InInt' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountOut, __WorldContext) == 0x000008, "Member 'CountMaker_C_CountOut::__WorldContext' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountOut, OutInt) == 0x000010, "Member 'CountMaker_C_CountOut::OutInt' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountOut, ConstInt) == 0x000014, "Member 'CountMaker_C_CountOut::ConstInt' has a wrong offset!");
static_assert(offsetof(CountMaker_C_CountOut, CallFunc_Subtract_IntInt_ReturnValue) == 0x000018, "Member 'CountMaker_C_CountOut::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

}

