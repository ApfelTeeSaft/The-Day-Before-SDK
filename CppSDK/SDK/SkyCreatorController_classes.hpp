#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkyCreatorController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FMODStudio_structs.hpp"
#include "SkyCreatorDayTimeStruct_structs.hpp"
#include "SkyCreatorPlugin_structs.hpp"
#include "SkyCreatorDayTimeStructObjectRef_structs.hpp"
#include "DayCycleState_structs.hpp"
#include "SkyCreatorLightStateEnum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SkyCreatorController.SkyCreatorController_C
// 0x1530 (0x17C0 - 0x0290)
class ASkyCreatorController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASkyCreator*                            SkyCreator;                                        // 0x02A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LumenTest;                                         // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeOfDay;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartTime;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DayDurationInSeconds;                              // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyCreatorDayTimeStruct               DefaultPresets;                                    // 0x02C8(0x0130)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ASkyCreator*                            SkyCreatorHub;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSkyCreatorWeatherSettings             CurrentWeatherPreset;                              // 0x0400(0x04E8)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSkyCreatorWeatherSettings             NextWeatherPreset;                                 // 0x08E8(0x04E8)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	EDayCycleState                                DayCycleState;                                     // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD1[0x3];                                      // 0x0DD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeatherIndex;                                      // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyCreatorDayTimeStruct               LumenPresets;                                      // 0x0DD8(0x0130)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSkyCreatorDayTimeStruct               RTXPresets;                                        // 0x0F08(0x0130)(Edit, BlueprintVisible, HasGetValueTypeHash)
	double                                        InterpolateDurationTimeMin;                        // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpolateDurationTimeMax;                        // 0x1040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeatherInterpolateDuration;                        // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpolateAlpha;                                  // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OnDayCycleChange;                                  // 0x1058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105C[0x4];                                     // 0x105C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WeatherTimeInSeconds;                              // 0x1060(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WeatherTimer;                                      // 0x1068(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LerpWeatherTimer;                                  // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpWeatherTime;                                   // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeCycleLeft;                                     // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeWeather;                                     // 0x1088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1089[0x7];                                     // 0x1089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ConsturctAlpha;                                    // 0x1090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DayDurationInSecondsDefault;                       // 0x1098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnCycleChange;                                     // 0x10A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USkyCreatorWeatherPreset*               MainWeatherPreset;                                 // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USkyCreatorWeatherPreset*               LumenWeatherPreset;                                // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESkyCreatorLightStateEnum                     SettingsState;                                     // 0x10C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C1[0x7];                                     // 0x10C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             LightChange;                                       // 0x10C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FFMODEventInstance                     Ambient;                                           // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ASurvPC_C*                              Local_Surv_PC;                                     // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Day_Duration_in_Seconds;                           // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyCreatorDayTimeStruct               UltimatePresets;                                   // 0x10F0(0x0130)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSkyCreatorWeatherSettings             HubPreset;                                         // 0x1220(0x04E8)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSkyCreatorDayTimeStructObjectRef      CurrentState;                                      // 0x1708(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         LoadingData;                                       // 0x1770(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1774[0x4];                                     // 0x1774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkyCreatorWeatherPreset*>       LoadingDataArray;                                  // 0x1778(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        LightAngleMorning;                                 // 0x1788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightAngleDay;                                     // 0x1790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightAngleEvening;                                 // 0x1798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightAngleNight;                                   // 0x17A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InsideHouse;                                       // 0x17A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17A9[0x7];                                     // 0x17A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyCreatorWeatherPreset*               HousePreset;                                       // 0x17B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x17B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateDayCycleState(bool Construct);
	void CalculateInterpolationAlpha();
	void ExecuteUbergraph_SkyCreatorController(int32 EntryPoint);
	EDayCycleState GetDayCycleState();
	struct FSkyCreatorWeatherSettings GetWeatherPreset(bool Prev);
	void HiddenCalc();
	void InitSkyCreator();
	void IsHub(bool* Param_IsHub);
	void LerpSettings(bool Construct);
	void LightChange__DelegateSignature(ESkyCreatorLightStateEnum Setting_State);
	void LoadSkyCreatorState();
	double NormalizeTime(double Time);
	void OnCycleChange__DelegateSignature(EDayCycleState Param_DayCycleState);
	void OnDayStateChange(bool Construct);
	void OnSettingsStateChange(ESkyCreatorLightStateEnum Param_SettingsState);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetNextCycle();
	void UserConstructionScript();
	void WeatherTimerCheck();
	void WeatherTimerStop();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SkyCreatorController_C">();
	}
	static class ASkyCreatorController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkyCreatorController_C>();
	}
};
static_assert(alignof(ASkyCreatorController_C) == 0x000008, "Wrong alignment on ASkyCreatorController_C");
static_assert(sizeof(ASkyCreatorController_C) == 0x0017C0, "Wrong size on ASkyCreatorController_C");
static_assert(offsetof(ASkyCreatorController_C, UberGraphFrame) == 0x000290, "Member 'ASkyCreatorController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, DefaultSceneRoot) == 0x000298, "Member 'ASkyCreatorController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, SkyCreator) == 0x0002A0, "Member 'ASkyCreatorController_C::SkyCreator' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LumenTest) == 0x0002A8, "Member 'ASkyCreatorController_C::LumenTest' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, TimeOfDay) == 0x0002B0, "Member 'ASkyCreatorController_C::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, StartTime) == 0x0002B8, "Member 'ASkyCreatorController_C::StartTime' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, DayDurationInSeconds) == 0x0002C0, "Member 'ASkyCreatorController_C::DayDurationInSeconds' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, DefaultPresets) == 0x0002C8, "Member 'ASkyCreatorController_C::DefaultPresets' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, SkyCreatorHub) == 0x0003F8, "Member 'ASkyCreatorController_C::SkyCreatorHub' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, CurrentWeatherPreset) == 0x000400, "Member 'ASkyCreatorController_C::CurrentWeatherPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, NextWeatherPreset) == 0x0008E8, "Member 'ASkyCreatorController_C::NextWeatherPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, DayCycleState) == 0x000DD0, "Member 'ASkyCreatorController_C::DayCycleState' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, WeatherIndex) == 0x000DD4, "Member 'ASkyCreatorController_C::WeatherIndex' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LumenPresets) == 0x000DD8, "Member 'ASkyCreatorController_C::LumenPresets' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, RTXPresets) == 0x000F08, "Member 'ASkyCreatorController_C::RTXPresets' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, InterpolateDurationTimeMin) == 0x001038, "Member 'ASkyCreatorController_C::InterpolateDurationTimeMin' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, InterpolateDurationTimeMax) == 0x001040, "Member 'ASkyCreatorController_C::InterpolateDurationTimeMax' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, WeatherInterpolateDuration) == 0x001048, "Member 'ASkyCreatorController_C::WeatherInterpolateDuration' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, InterpolateAlpha) == 0x001050, "Member 'ASkyCreatorController_C::InterpolateAlpha' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, OnDayCycleChange) == 0x001058, "Member 'ASkyCreatorController_C::OnDayCycleChange' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, WeatherTimeInSeconds) == 0x001060, "Member 'ASkyCreatorController_C::WeatherTimeInSeconds' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, WeatherTimer) == 0x001068, "Member 'ASkyCreatorController_C::WeatherTimer' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LerpWeatherTimer) == 0x001070, "Member 'ASkyCreatorController_C::LerpWeatherTimer' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LerpWeatherTime) == 0x001078, "Member 'ASkyCreatorController_C::LerpWeatherTime' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, TimeCycleLeft) == 0x001080, "Member 'ASkyCreatorController_C::TimeCycleLeft' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, ChangeWeather) == 0x001088, "Member 'ASkyCreatorController_C::ChangeWeather' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, ConsturctAlpha) == 0x001090, "Member 'ASkyCreatorController_C::ConsturctAlpha' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, DayDurationInSecondsDefault) == 0x001098, "Member 'ASkyCreatorController_C::DayDurationInSecondsDefault' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, OnCycleChange) == 0x0010A0, "Member 'ASkyCreatorController_C::OnCycleChange' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, MainWeatherPreset) == 0x0010B0, "Member 'ASkyCreatorController_C::MainWeatherPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LumenWeatherPreset) == 0x0010B8, "Member 'ASkyCreatorController_C::LumenWeatherPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, SettingsState) == 0x0010C0, "Member 'ASkyCreatorController_C::SettingsState' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LightChange) == 0x0010C8, "Member 'ASkyCreatorController_C::LightChange' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, Ambient) == 0x0010D8, "Member 'ASkyCreatorController_C::Ambient' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, Local_Surv_PC) == 0x0010E0, "Member 'ASkyCreatorController_C::Local_Surv_PC' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, Day_Duration_in_Seconds) == 0x0010E8, "Member 'ASkyCreatorController_C::Day_Duration_in_Seconds' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, UltimatePresets) == 0x0010F0, "Member 'ASkyCreatorController_C::UltimatePresets' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, HubPreset) == 0x001220, "Member 'ASkyCreatorController_C::HubPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, CurrentState) == 0x001708, "Member 'ASkyCreatorController_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LoadingData) == 0x001770, "Member 'ASkyCreatorController_C::LoadingData' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LoadingDataArray) == 0x001778, "Member 'ASkyCreatorController_C::LoadingDataArray' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LightAngleMorning) == 0x001788, "Member 'ASkyCreatorController_C::LightAngleMorning' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LightAngleDay) == 0x001790, "Member 'ASkyCreatorController_C::LightAngleDay' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LightAngleEvening) == 0x001798, "Member 'ASkyCreatorController_C::LightAngleEvening' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, LightAngleNight) == 0x0017A0, "Member 'ASkyCreatorController_C::LightAngleNight' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, InsideHouse) == 0x0017A8, "Member 'ASkyCreatorController_C::InsideHouse' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, HousePreset) == 0x0017B0, "Member 'ASkyCreatorController_C::HousePreset' has a wrong offset!");
static_assert(offsetof(ASkyCreatorController_C, Alpha) == 0x0017B8, "Member 'ASkyCreatorController_C::Alpha' has a wrong offset!");

}

