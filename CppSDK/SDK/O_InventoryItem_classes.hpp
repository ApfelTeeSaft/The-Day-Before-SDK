#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: O_InventoryItem

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass O_InventoryItem.O_InventoryItem_C
// 0x0018 (0x0040 - 0x0028)
class UO_InventoryItem_C final : public UObject
{
public:
	int32                                         PosX;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PosY;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInventoryComponent_C*                  OwningInventory;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetCount(int32* Count);
	void GetDurability();
	void GetSize(int32* X, int32* Y);
	void IsInSlot(int32 X, int32 Y, bool* InSlot);
	void ItemAddedToInventory(class UInventoryComponent_C* Inventory, int32 X, int32 Y);
	void SetCount(int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"O_InventoryItem_C">();
	}
	static class UO_InventoryItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UO_InventoryItem_C>();
	}
};
static_assert(alignof(UO_InventoryItem_C) == 0x000008, "Wrong alignment on UO_InventoryItem_C");
static_assert(sizeof(UO_InventoryItem_C) == 0x000040, "Wrong size on UO_InventoryItem_C");
static_assert(offsetof(UO_InventoryItem_C, PosX) == 0x000028, "Member 'UO_InventoryItem_C::PosX' has a wrong offset!");
static_assert(offsetof(UO_InventoryItem_C, PosY) == 0x00002C, "Member 'UO_InventoryItem_C::PosY' has a wrong offset!");
static_assert(offsetof(UO_InventoryItem_C, OwningInventory) == 0x000030, "Member 'UO_InventoryItem_C::OwningInventory' has a wrong offset!");
static_assert(offsetof(UO_InventoryItem_C, Equipped) == 0x000038, "Member 'UO_InventoryItem_C::Equipped' has a wrong offset!");

}

