#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIMovementComponent

#include "Basic.hpp"

#include "AIMovementComponent_classes.hpp"
#include "AIMovementComponent_parameters.hpp"


namespace SDK
{

// Function AIMovementComponent.AIMovementComponent_C.ActivateComponent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    TickEnabled                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::ActivateComponent(bool TickEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "ActivateComponent");

	Params::AIMovementComponent_C_ActivateComponent Parms{};

	Parms.TickEnabled = TickEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.AddCarAvoidingPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  InPoints                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  OutPoints                                              (Parm, OutParm)

void UAIMovementComponent_C::AddCarAvoidingPoint(TArray<struct FVector>& InPoints, TArray<struct FVector>* OutPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "AddCarAvoidingPoint");

	Params::AIMovementComponent_C_AddCarAvoidingPoint Parms{};

	Parms.InPoints = std::move(InPoints);

	UObject::ProcessEvent(Func, &Parms);

	InPoints = std::move(Parms.InPoints);

	if (OutPoints != nullptr)
		*OutPoints = std::move(Parms.OutPoints);
}


// Function AIMovementComponent.AIMovementComponent_C.AddRandomPointNearTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  InPoints                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  OutPoints                                              (Parm, OutParm)

void UAIMovementComponent_C::AddRandomPointNearTarget(TArray<struct FVector>& InPoints, TArray<struct FVector>* OutPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "AddRandomPointNearTarget");

	Params::AIMovementComponent_C_AddRandomPointNearTarget Parms{};

	Parms.InPoints = std::move(InPoints);

	UObject::ProcessEvent(Func, &Parms);

	InPoints = std::move(Parms.InPoints);

	if (OutPoints != nullptr)
		*OutPoints = std::move(Parms.OutPoints);
}


// Function AIMovementComponent.AIMovementComponent_C.AnalyzePath
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::AnalyzePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "AnalyzePath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.BlockZombie
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::BlockZombie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "BlockZombie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.BlockZombieByWaterTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::BlockZombieByWaterTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "BlockZombieByWaterTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.Calculate Desired Direction
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          DesiredDirection                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Calculate_Desired_Direction(struct FVector* DesiredDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Calculate Desired Direction");

	Params::AIMovementComponent_C_Calculate_Desired_Direction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DesiredDirection != nullptr)
		*DesiredDirection = std::move(Parms.DesiredDirection);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateCurrentPathPointLocation
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateCurrentPathPointLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateCurrentPathPointLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateDirectionInterpolationSpeed
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  InterpolationSpeed                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CalculateDirectionInterpolationSpeed(double* InterpolationSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateDirectionInterpolationSpeed");

	Params::AIMovementComponent_C_CalculateDirectionInterpolationSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InterpolationSpeed != nullptr)
		*InterpolationSpeed = Parms.InterpolationSpeed;
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateDistanceToCurrentPoint
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateDistanceToCurrentPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateDistanceToCurrentPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateDistanceToTarget
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateDistanceToTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateDistanceToTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateNextPathPointLocation
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateNextPathPointLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateNextPathPointLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateOwnerDirection
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          OwnerDirection                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CalculateOwnerDirection(struct FVector* OwnerDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateOwnerDirection");

	Params::AIMovementComponent_C_CalculateOwnerDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OwnerDirection != nullptr)
		*OwnerDirection = std::move(Parms.OwnerDirection);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateOwnerLocation
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateOwnerLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateOwnerLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateResultVelocity
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CalculateResultVelocity(struct FVector* Velocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateResultVelocity");

	Params::AIMovementComponent_C_CalculateResultVelocity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateTargetLocation
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateTargetLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateTargetLocationDifference
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CalculateTargetLocationDifference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateTargetLocationDifference");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateVelocity
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CalculateVelocity(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateVelocity");

	Params::AIMovementComponent_C_CalculateVelocity Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateVelocityDirection
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CalculateVelocityDirection(double DeltaSeconds, struct FVector* Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateVelocityDirection");

	Params::AIMovementComponent_C_CalculateVelocityDirection Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);
}


// Function AIMovementComponent.AIMovementComponent_C.CalculateVelocityValue
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_VelocityValue                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CalculateVelocityValue(double DeltaSeconds, double* Param_VelocityValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CalculateVelocityValue");

	Params::AIMovementComponent_C_CalculateVelocityValue Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_VelocityValue != nullptr)
		*Param_VelocityValue = Parms.Param_VelocityValue;
}


// Function AIMovementComponent.AIMovementComponent_C.CheckAnimationRotationStop
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Stop                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CheckAnimationRotationStop(bool* Stop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CheckAnimationRotationStop");

	Params::AIMovementComponent_C_CheckAnimationRotationStop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stop != nullptr)
		*Stop = Parms.Stop;
}


// Function AIMovementComponent.AIMovementComponent_C.CheckHittedActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ActorHitted                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Hit_location                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::CheckHittedActor(class UObject* ActorHitted, const struct FVector& Hit_location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CheckHittedActor");

	Params::AIMovementComponent_C_CheckHittedActor Parms{};

	Parms.ActorHitted = ActorHitted;
	Parms.Hit_location = std::move(Hit_location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.CheckStartAngleIsTooBig
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CheckStartAngleIsTooBig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CheckStartAngleIsTooBig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CheckZombieInFront
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CheckZombieInFront()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CheckZombieInFront");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.CPPMovementTypeRepNotify
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::CPPMovementTypeRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "CPPMovementTypeRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DeactivateComponent
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DeactivateComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DeactivateComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DebugShowPath
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DebugShowPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DebugShowPath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DebugShowPathTrack
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DebugShowPathTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DebugShowPathTrack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DecreasingMovement
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DecreasingMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DecreasingMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DecreasingMovementSetup
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DecreasingMovementSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DecreasingMovementSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DefaultMovement
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DefaultMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DefaultMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DefaultMovementSetup
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DefaultMovementSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DefaultMovementSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DelayedUnsetAnimationMovement
// (BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DelayedUnsetAnimationMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DelayedUnsetAnimationMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.DetermineRotationCurve
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// Survival::EMovementType                 Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_AnimationAngle                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::DetermineRotationCurve(Survival::EMovementType Param_MovementType, double Param_AnimationAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DetermineRotationCurve");

	Params::AIMovementComponent_C_DetermineRotationCurve Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.Param_AnimationAngle = Param_AnimationAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.DrawAIDebugLine
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DrawDistance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DrawThickness                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::DrawAIDebugLine(const struct FVector& Direction, const struct FLinearColor& LineColor, double DrawDistance, double DrawThickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DrawAIDebugLine");

	Params::AIMovementComponent_C_DrawAIDebugLine Parms{};

	Parms.Direction = std::move(Direction);
	Parms.LineColor = std::move(LineColor);
	Parms.DrawDistance = DrawDistance;
	Parms.DrawThickness = DrawThickness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.DrawPathPoints
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::DrawPathPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "DrawPathPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.ExecuteUbergraph_AIMovementComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::ExecuteUbergraph_AIMovementComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "ExecuteUbergraph_AIMovementComponent");

	Params::AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.ExtractRotationFromAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_RotationCurveName                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_AnimationAngle                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Survival::EMovementType                 Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::ExtractRotationFromAnimation(class FName Param_RotationCurveName, double Param_AnimationAngle, Survival::EMovementType Param_MovementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "ExtractRotationFromAnimation");

	Params::AIMovementComponent_C_ExtractRotationFromAnimation Parms{};

	Parms.Param_RotationCurveName = Param_RotationCurveName;
	Parms.Param_AnimationAngle = Param_AnimationAngle;
	Parms.Param_MovementType = Param_MovementType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.FinishedAcceleration
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Finished                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::FinishedAcceleration(bool* Finished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "FinishedAcceleration");

	Params::AIMovementComponent_C_FinishedAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Finished != nullptr)
		*Finished = Parms.Finished;
}


// Function AIMovementComponent.AIMovementComponent_C.Get Last Point Is Target Actor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_LastPointIsTargetActor                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Get_Last_Point_Is_Target_Actor(bool* Param_LastPointIsTargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Get Last Point Is Target Actor");

	Params::AIMovementComponent_C_Get_Last_Point_Is_Target_Actor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_LastPointIsTargetActor != nullptr)
		*Param_LastPointIsTargetActor = Parms.Param_LastPointIsTargetActor;
}


// Function AIMovementComponent.AIMovementComponent_C.Get Should Skip Calculations
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::Get_Should_Skip_Calculations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Get Should Skip Calculations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.GetAngleBetweenDirections
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::GetAngleBetweenDirections(double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetAngleBetweenDirections");

	Params::AIMovementComponent_C_GetAngleBetweenDirections Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function AIMovementComponent.AIMovementComponent_C.GetAnimationAngle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UAIMovementComponent_C::GetAnimationAngle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetAnimationAngle");

	Params::AIMovementComponent_C_GetAnimationAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.GetCurrentPathPointLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Param_CurrentPathPointLocation                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::GetCurrentPathPointLocation(struct FVector* Param_CurrentPathPointLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetCurrentPathPointLocation");

	Params::AIMovementComponent_C_GetCurrentPathPointLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CurrentPathPointLocation != nullptr)
		*Param_CurrentPathPointLocation = std::move(Parms.Param_CurrentPathPointLocation);
}


// Function AIMovementComponent.AIMovementComponent_C.GetDesiredVector
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          DesiredVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::GetDesiredVector(struct FVector* DesiredVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetDesiredVector");

	Params::AIMovementComponent_C_GetDesiredVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DesiredVector != nullptr)
		*DesiredVector = std::move(Parms.DesiredVector);
}


// Function AIMovementComponent.AIMovementComponent_C.GetDistanceToNextPoint
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UAIMovementComponent_C::GetDistanceToNextPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetDistanceToNextPoint");

	Params::AIMovementComponent_C_GetDistanceToNextPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.GetDistanceToStop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UAIMovementComponent_C::GetDistanceToStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetDistanceToStop");

	Params::AIMovementComponent_C_GetDistanceToStop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.GetIsMovingCorrectly
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bMovingCorrectly                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::GetIsMovingCorrectly(bool* bMovingCorrectly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetIsMovingCorrectly");

	Params::AIMovementComponent_C_GetIsMovingCorrectly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bMovingCorrectly != nullptr)
		*bMovingCorrectly = Parms.bMovingCorrectly;
}


// Function AIMovementComponent.AIMovementComponent_C.GetIsStopping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UAIMovementComponent_C::GetIsStopping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetIsStopping");

	Params::AIMovementComponent_C_GetIsStopping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.GetMovementType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_AIMovementType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_AIMovementType UAIMovementComponent_C::GetMovementType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetMovementType");

	Params::AIMovementComponent_C_GetMovementType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.GetVelocityFromAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UAIMovementComponent_C::GetVelocityFromAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetVelocityFromAnimation");

	Params::AIMovementComponent_C_GetVelocityFromAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.GetVelocityValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UAIMovementComponent_C::GetVelocityValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "GetVelocityValue");

	Params::AIMovementComponent_C_GetVelocityValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.IncreasingMovement
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::IncreasingMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "IncreasingMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.IncreasingMovementSetup
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::IncreasingMovementSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "IncreasingMovementSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.InitializePath
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_TargetIsActor                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_TargetActor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocationIn                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_PathfindingContext                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSubclassOf<class UNavigationQueryFilter>Param_FilterClass                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UAIMovementComponent_C::InitializePath(bool Param_TargetIsActor, class AActor* Param_TargetActor, const struct FVector& TargetLocationIn, class AActor* Param_PathfindingContext, TSubclassOf<class UNavigationQueryFilter> Param_FilterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "InitializePath");

	Params::AIMovementComponent_C_InitializePath Parms{};

	Parms.Param_TargetIsActor = Param_TargetIsActor;
	Parms.Param_TargetActor = Param_TargetActor;
	Parms.TargetLocationIn = std::move(TargetLocationIn);
	Parms.Param_PathfindingContext = Param_PathfindingContext;
	Parms.Param_FilterClass = Param_FilterClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.Is Current Point Not Last
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsNotLast                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Is_Current_Point_Not_Last(bool* IsNotLast)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Is Current Point Not Last");

	Params::AIMovementComponent_C_Is_Current_Point_Not_Last Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsNotLast != nullptr)
		*IsNotLast = Parms.IsNotLast;
}


// Function AIMovementComponent.AIMovementComponent_C.IsCloseToTarget
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsClose                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::IsCloseToTarget(bool* IsClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "IsCloseToTarget");

	Params::AIMovementComponent_C_IsCloseToTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsClose != nullptr)
		*IsClose = Parms.IsClose;
}


// Function AIMovementComponent.AIMovementComponent_C.IsIndexInRange
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InRange                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::IsIndexInRange(int32 Param_Index, bool* InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "IsIndexInRange");

	Params::AIMovementComponent_C_IsIndexInRange Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (InRange != nullptr)
		*InRange = Parms.InRange;
}


// Function AIMovementComponent.AIMovementComponent_C.LastPointIsTarget
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsTarget                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::LastPointIsTarget(bool* IsTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "LastPointIsTarget");

	Params::AIMovementComponent_C_LastPointIsTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsTarget != nullptr)
		*IsTarget = Parms.IsTarget;
}


// Function AIMovementComponent.AIMovementComponent_C.MovementTypeRepNotify
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::MovementTypeRepNotify()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "MovementTypeRepNotify");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.MulticastRotationCurveNameRepNotify
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// Survival::EMovementType                 Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_AnimationAngle                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::MulticastRotationCurveNameRepNotify(Survival::EMovementType Param_MovementType, double Param_AnimationAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "MulticastRotationCurveNameRepNotify");

	Params::AIMovementComponent_C_MulticastRotationCurveNameRepNotify Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.Param_AnimationAngle = Param_AnimationAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.On Reach Last Point
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::On_Reach_Last_Point()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "On Reach Last Point");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.On Set Target Actor
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_TargetActor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::On_Set_Target_Actor(class AActor* Param_TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "On Set Target Actor");

	Params::AIMovementComponent_C_On_Set_Target_Actor Parms{};

	Parms.Param_TargetActor = Param_TargetActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.OnReachPathPoint
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::OnReachPathPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "OnReachPathPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.OnReachTarget__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::OnReachTarget__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "OnReachTarget__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.OnRep_MovementType
// (BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::OnRep_MovementType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "OnRep_MovementType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.OnRep_PathMovementState
// (BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::OnRep_PathMovementState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "OnRep_PathMovementState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.OnRep_PathPoints
// (BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::OnRep_PathPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "OnRep_PathPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.OnRep_RotationCurveName
// (BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::OnRep_RotationCurveName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "OnRep_RotationCurveName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.PathMovementHandle
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::PathMovementHandle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "PathMovementHandle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.ReachLastPoint
// (BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::ReachLastPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "ReachLastPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "ReceiveTick");

	Params::AIMovementComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.RefreshMovemenetType
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::RefreshMovemenetType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "RefreshMovemenetType");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.ResetAllVariables
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::ResetAllVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "ResetAllVariables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.Rotation Curve Name Rep Notify
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// Survival::EMovementType                 Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_AnimationAngle                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Rotation_Curve_Name_Rep_Notify(Survival::EMovementType Param_MovementType, double Param_AnimationAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Rotation Curve Name Rep Notify");

	Params::AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.Param_AnimationAngle = Param_AnimationAngle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.RotationExtraction
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::RotationExtraction(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "RotationExtraction");

	Params::AIMovementComponent_C_RotationExtraction Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.RotationExtractionSubtick
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::RotationExtractionSubtick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "RotationExtractionSubtick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.RotationSubtick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         TargetRotation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::RotationSubtick(const struct FRotator& TargetRotation, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "RotationSubtick");

	Params::AIMovementComponent_C_RotationSubtick Parms{};

	Parms.TargetRotation = std::move(TargetRotation);
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.RotationTickExecutor
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::RotationTickExecutor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "RotationTickExecutor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.Set Owner Rotation
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Set_Owner_Rotation(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Set Owner Rotation");

	Params::AIMovementComponent_C_Set_Owner_Rotation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetEndSpeedbyAngle
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetEndSpeedbyAngle(double Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetEndSpeedbyAngle");

	Params::AIMovementComponent_C_SetEndSpeedbyAngle Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetMovementSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<E_AIMovementType, struct FF_MovementSettings>NewMovementSettings                                    (BlueprintVisible, BlueprintReadOnly, Parm)

void UAIMovementComponent_C::SetMovementSettings(const TMap<E_AIMovementType, struct FF_MovementSettings>& NewMovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetMovementSettings");

	Params::AIMovementComponent_C_SetMovementSettings Parms{};

	Parms.NewMovementSettings = std::move(NewMovementSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetMovementSettingsCPP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<Survival::EMovementType, struct FF_MovementSettings>NewMovementSettingsCPP                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void UAIMovementComponent_C::SetMovementSettingsCPP(const TMap<Survival::EMovementType, struct FF_MovementSettings>& NewMovementSettingsCPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetMovementSettingsCPP");

	Params::AIMovementComponent_C_SetMovementSettingsCPP Parms{};

	Parms.NewMovementSettingsCPP = std::move(NewMovementSettingsCPP);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetMovementType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// Survival::EMovementType                 NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetMovementType(E_AIMovementType Param_MovementType, Survival::EMovementType NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetMovementType");

	Params::AIMovementComponent_C_SetMovementType Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetOwnerRotationClient
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::SetOwnerRotationClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetOwnerRotationClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.SetOwnerVelocity
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::SetOwnerVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetOwnerVelocity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.SetOwnerVelocityClient
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::SetOwnerVelocityClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetOwnerVelocityClient");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.SetPathPoints
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  InPoints                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UAIMovementComponent_C::SetPathPoints(TArray<struct FVector>& InPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetPathPoints");

	Params::AIMovementComponent_C_SetPathPoints Parms{};

	Parms.InPoints = std::move(InPoints);

	UObject::ProcessEvent(Func, &Parms);

	InPoints = std::move(Parms.InPoints);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateAcceleration
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateAcceleration(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateAcceleration");

	Params::AIMovementComponent_C_SetStateAcceleration Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateAfterDecreaseAdjustment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateAfterDecreaseAdjustment(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateAfterDecreaseAdjustment");

	Params::AIMovementComponent_C_SetStateAfterDecreaseAdjustment Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateChangePointDist
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateChangePointDist(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateChangePointDist");

	Params::AIMovementComponent_C_SetStateChangePointDist Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateCloseDirInterpSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateCloseDirInterpSpeed(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateCloseDirInterpSpeed");

	Params::AIMovementComponent_C_SetStateCloseDirInterpSpeed Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateCloseToTargetDist
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateCloseToTargetDist(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateCloseToTargetDist");

	Params::AIMovementComponent_C_SetStateCloseToTargetDist Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateDeceleration
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateDeceleration(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateDeceleration");

	Params::AIMovementComponent_C_SetStateDeceleration Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateDecreaseStateDist
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateDecreaseStateDist(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateDecreaseStateDist");

	Params::AIMovementComponent_C_SetStateDecreaseStateDist Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateHighestAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateHighestAngle(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateHighestAngle");

	Params::AIMovementComponent_C_SetStateHighestAngle Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateIncreaseStateDist
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateIncreaseStateDist(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateIncreaseStateDist");

	Params::AIMovementComponent_C_SetStateIncreaseStateDist Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateLowestAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateLowestAngle(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateLowestAngle");

	Params::AIMovementComponent_C_SetStateLowestAngle Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateMaxDirInterpSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateMaxDirInterpSpeed(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateMaxDirInterpSpeed");

	Params::AIMovementComponent_C_SetStateMaxDirInterpSpeed Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateMaxSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateMaxSpeed(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateMaxSpeed");

	Params::AIMovementComponent_C_SetStateMaxSpeed Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateMinDirInterpSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateMinDirInterpSpeed(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateMinDirInterpSpeed");

	Params::AIMovementComponent_C_SetStateMinDirInterpSpeed Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateMinSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateMinSpeed(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateMinSpeed");

	Params::AIMovementComponent_C_SetStateMinSpeed Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateSpeedInterpSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateSpeedInterpSpeed(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateSpeedInterpSpeed");

	Params::AIMovementComponent_C_SetStateSpeedInterpSpeed Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.SetStateTwistCheckDistance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_AIMovementType                        Param_MovementType                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::SetStateTwistCheckDistance(E_AIMovementType Param_MovementType, double NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "SetStateTwistCheckDistance");

	Params::AIMovementComponent_C_SetStateTwistCheckDistance Parms{};

	Parms.Param_MovementType = Param_MovementType;
	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.StartMovement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StartFromAnimation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::StartMovement(bool StartFromAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "StartMovement");

	Params::AIMovementComponent_C_StartMovement Parms{};

	Parms.StartFromAnimation = StartFromAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AIMovementComponent.AIMovementComponent_C.StopAnimationMovement
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::StopAnimationMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "StopAnimationMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.StopCalculations
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UAIMovementComponent_C::StopCalculations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "StopCalculations");

	Params::AIMovementComponent_C_StopCalculations Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.StopExtractionRotationFromAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::StopExtractionRotationFromAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "StopExtractionRotationFromAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.StopMovementImmediately 
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::StopMovementImmediately_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "StopMovementImmediately ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.StopPathOnTooBigAngle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  PathPointsArr                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FVector>                  Param_PathPoints                                       (Parm, OutParm)

void UAIMovementComponent_C::StopPathOnTooBigAngle(TArray<struct FVector>& PathPointsArr, TArray<struct FVector>* Param_PathPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "StopPathOnTooBigAngle");

	Params::AIMovementComponent_C_StopPathOnTooBigAngle Parms{};

	Parms.PathPointsArr = std::move(PathPointsArr);

	UObject::ProcessEvent(Func, &Parms);

	PathPointsArr = std::move(Parms.PathPointsArr);

	if (Param_PathPoints != nullptr)
		*Param_PathPoints = std::move(Parms.Param_PathPoints);
}


// Function AIMovementComponent.AIMovementComponent_C.Time To Change To Decreasing State
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Change                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Time_To_Change_To_Decreasing_State(bool* Change)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Time To Change To Decreasing State");

	Params::AIMovementComponent_C_Time_To_Change_To_Decreasing_State Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Change != nullptr)
		*Change = Parms.Change;
}


// Function AIMovementComponent.AIMovementComponent_C.Time to Change to Increasing State
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Change                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::Time_to_Change_to_Increasing_State(bool* Change)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "Time to Change to Increasing State");

	Params::AIMovementComponent_C_Time_to_Change_to_Increasing_State Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Change != nullptr)
		*Change = Parms.Change;
}


// Function AIMovementComponent.AIMovementComponent_C.TimeToChangePointIndex
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Change                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAIMovementComponent_C::TimeToChangePointIndex(bool* Change)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "TimeToChangePointIndex");

	Params::AIMovementComponent_C_TimeToChangePointIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Change != nullptr)
		*Change = Parms.Change;
}


// Function AIMovementComponent.AIMovementComponent_C.TwistDetected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UAIMovementComponent_C::TwistDetected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "TwistDetected");

	Params::AIMovementComponent_C_TwistDetected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AIMovementComponent.AIMovementComponent_C.UnblockZombie
// (Public, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::UnblockZombie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "UnblockZombie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.UnblockZombieFromWaterTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::UnblockZombieFromWaterTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "UnblockZombieFromWaterTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AIMovementComponent.AIMovementComponent_C.UpdatePath
// (Protected, BlueprintCallable, BlueprintEvent)

void UAIMovementComponent_C::UpdatePath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AIMovementComponent_C", "UpdatePath");

	UObject::ProcessEvent(Func, nullptr);
}

}

