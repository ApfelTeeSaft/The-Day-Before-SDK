#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Window.BP_Window_C.BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Window_C_BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Window.BP_Window_C.ExecuteUbergraph_BP_Window
// 0x0280 (0x0280 - 0x0000)
struct BP_Window_C_ExecuteUbergraph_BP_Window final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Damage;                               // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x0120(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_HitComponent;                         // 0x0158(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_BoneName;                             // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ShotFromDirection;                    // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitInfo;                              // 0x0190(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_WindowDamaged_Damage_ImplicitCast;        // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_ExecuteUbergraph_BP_Window) == 0x000008, "Wrong alignment on BP_Window_C_ExecuteUbergraph_BP_Window");
static_assert(sizeof(BP_Window_C_ExecuteUbergraph_BP_Window) == 0x000280, "Wrong size on BP_Window_C_ExecuteUbergraph_BP_Window");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, EntryPoint) == 0x000000, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_AsSurvival_Player) == 0x000110, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_Damage) == 0x00011C, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_DamageType) == 0x000120, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_HitLocation) == 0x000128, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_HitNormal) == 0x000140, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_HitComponent) == 0x000158, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_BoneName) == 0x000160, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_BoneName' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_ShotFromDirection) == 0x000168, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_ShotFromDirection' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_InstigatedBy) == 0x000180, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_DamageCauser) == 0x000188, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, K2Node_Event_HitInfo) == 0x000190, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::K2Node_Event_HitInfo' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ExecuteUbergraph_BP_Window, CallFunc_WindowDamaged_Damage_ImplicitCast) == 0x000278, "Member 'BP_Window_C_ExecuteUbergraph_BP_Window::CallFunc_WindowDamaged_Damage_ImplicitCast' has a wrong offset!");

// Function BP_Window.BP_Window_C.OnRep_IsBroken?
// 0x0020 (0x0020 - 0x0000)
struct BP_Window_C_OnRep_IsBroken_ final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_OnRep_IsBroken_) == 0x000008, "Wrong alignment on BP_Window_C_OnRep_IsBroken_");
static_assert(sizeof(BP_Window_C_OnRep_IsBroken_) == 0x000020, "Wrong size on BP_Window_C_OnRep_IsBroken_");
static_assert(offsetof(BP_Window_C_OnRep_IsBroken_, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_Window_C_OnRep_IsBroken_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_OnRep_IsBroken_, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_Window_C_OnRep_IsBroken_::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Window_C_OnRep_IsBroken_, CallFunc_SetStaticMesh_ReturnValue) == 0x000018, "Member 'BP_Window_C_OnRep_IsBroken_::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.PlayFX
// 0x0090 (0x0090 - 0x0000)
struct BP_Window_C_PlayFX final
{
public:
	struct FVector                                PlayerForward;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromY_ReturnValue;                 // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvPC_C*                              K2Node_DynamicCast_AsSurv_PC;                      // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent; // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_PlayFX) == 0x000008, "Wrong alignment on BP_Window_C_PlayFX");
static_assert(sizeof(BP_Window_C_PlayFX) == 0x000090, "Wrong size on BP_Window_C_PlayFX");
static_assert(offsetof(BP_Window_C_PlayFX, PlayerForward) == 0x000000, "Member 'BP_Window_C_PlayFX::PlayerForward' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'BP_Window_C_PlayFX::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000020, "Member 'BP_Window_C_PlayFX::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_MakeRotFromY_ReturnValue) == 0x000038, "Member 'BP_Window_C_PlayFX::CallFunc_MakeRotFromY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_GetPlayerController_ReturnValue) == 0x000050, "Member 'BP_Window_C_PlayFX::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, K2Node_DynamicCast_AsSurv_PC) == 0x000058, "Member 'BP_Window_C_PlayFX::K2Node_DynamicCast_AsSurv_PC' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BP_Window_C_PlayFX::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_SetStaticMesh_ReturnValue) == 0x000061, "Member 'BP_Window_C_PlayFX::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000068, "Member 'BP_Window_C_PlayFX::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000080, "Member 'BP_Window_C_PlayFX::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_PlayFX, CallFunc_PlayEventWithOcclusion_FMODAudioComponent) == 0x000088, "Member 'BP_Window_C_PlayFX::CallFunc_PlayEventWithOcclusion_FMODAudioComponent' has a wrong offset!");

// Function BP_Window.BP_Window_C.ReceivePointDamage
// 0x0160 (0x0160 - 0x0000)
struct BP_Window_C_ReceivePointDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShotFromDirection;                                 // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0078(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Window_C_ReceivePointDamage) == 0x000008, "Wrong alignment on BP_Window_C_ReceivePointDamage");
static_assert(sizeof(BP_Window_C_ReceivePointDamage) == 0x000160, "Wrong size on BP_Window_C_ReceivePointDamage");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, Damage) == 0x000000, "Member 'BP_Window_C_ReceivePointDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, DamageType) == 0x000008, "Member 'BP_Window_C_ReceivePointDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, HitLocation) == 0x000010, "Member 'BP_Window_C_ReceivePointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, HitNormal) == 0x000028, "Member 'BP_Window_C_ReceivePointDamage::HitNormal' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, HitComponent) == 0x000040, "Member 'BP_Window_C_ReceivePointDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, BoneName) == 0x000048, "Member 'BP_Window_C_ReceivePointDamage::BoneName' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, ShotFromDirection) == 0x000050, "Member 'BP_Window_C_ReceivePointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, InstigatedBy) == 0x000068, "Member 'BP_Window_C_ReceivePointDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, DamageCauser) == 0x000070, "Member 'BP_Window_C_ReceivePointDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_Window_C_ReceivePointDamage, HitInfo) == 0x000078, "Member 'BP_Window_C_ReceivePointDamage::HitInfo' has a wrong offset!");

// Function BP_Window.BP_Window_C.WindowDamaged
// 0x0018 (0x0018 - 0x0000)
struct BP_Window_C_WindowDamaged final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_WindowDamaged) == 0x000008, "Wrong alignment on BP_Window_C_WindowDamaged");
static_assert(sizeof(BP_Window_C_WindowDamaged) == 0x000018, "Wrong size on BP_Window_C_WindowDamaged");
static_assert(offsetof(BP_Window_C_WindowDamaged, Damage) == 0x000000, "Member 'BP_Window_C_WindowDamaged::Damage' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowDamaged, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_Window_C_WindowDamaged::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowDamaged, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_Window_C_WindowDamaged::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_Window.BP_Window_C.WindowOverlapped
// 0x0158 (0x0158 - 0x0000)
struct BP_Window_C_WindowOverlapped final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             SweepResult;                                       // 0x0008(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyPointDamage_ReturnValue;             // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Window_C_WindowOverlapped) == 0x000008, "Wrong alignment on BP_Window_C_WindowOverlapped");
static_assert(sizeof(BP_Window_C_WindowOverlapped) == 0x000158, "Wrong size on BP_Window_C_WindowOverlapped");
static_assert(offsetof(BP_Window_C_WindowOverlapped, Player) == 0x000000, "Member 'BP_Window_C_WindowOverlapped::Player' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowOverlapped, SweepResult) == 0x000008, "Member 'BP_Window_C_WindowOverlapped::SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowOverlapped, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000F0, "Member 'BP_Window_C_WindowOverlapped::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowOverlapped, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000108, "Member 'BP_Window_C_WindowOverlapped::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowOverlapped, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000120, "Member 'BP_Window_C_WindowOverlapped::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowOverlapped, CallFunc_ApplyPointDamage_ReturnValue) == 0x000138, "Member 'BP_Window_C_WindowOverlapped::CallFunc_ApplyPointDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Window_C_WindowOverlapped, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000140, "Member 'BP_Window_C_WindowOverlapped::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

}

