#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVS_Vehicle

#include "Basic.hpp"

#include "ShifterPositions_structs.hpp"
#include "VehicleSystemPlugin_structs.hpp"
#include "VehicleSystemPlugin_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SpeedUnit_structs.hpp"
#include "SpeedUnits_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AVS_Vehicle.AVS_Vehicle_C
// 0x02E8 (0x0848 - 0x0560)
class AAVS_Vehicle_C final : public AVehicleSystemBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0560(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UVehicle_Wheel_C*>               Wheels;                                            // 0x0568(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          ConstructCalled;                                   // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_57A[0x6];                                      // 0x057A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_EngineAudio_C*                 EngineAudio;                                       // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RPM;                                               // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DRPM;                                              // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartWithPhysics;                                  // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          StabilityControl;                                  // 0x0599(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59A[0x6];                                      // 0x059A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StabilityControlForce;                             // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DynamicAirDrag;                                    // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BaseLinearDrag;                                    // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      PhysicsMaterial;                                   // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         NumDrivingWheels;                                  // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EngineRunning;                                     // 0x05C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowPassiveMode;                                  // 0x05C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          StartWithEngineRunning;                            // 0x05C6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ZeroThrottleWhileShifting;                         // 0x05C7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESpeedUnits                                   SpeedUnits;                                        // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeedUnit                             SpeedUnit;                                         // 0x05D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        IgnitionTime;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShifterPositions                             Shifter;                                           // 0x0608(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          AutomaticShifterPositon;                           // 0x0609(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutomaticTransmission;                             // 0x060A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_60B[0x5];                                      // 0x060B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GearSwitchTime;                                    // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         InputHost;                                         // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ThrottleInput;                                     // 0x0620(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Throttle;                                          // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrakeInput;                                        // 0x0630(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Brake;                                             // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Steering;                                          // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBrakeApplied;                                    // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HandbrakeApplied;                                  // 0x0649(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ServerEngineRunning;                               // 0x064A(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64B[0x5];                                      // 0x064B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           IgnitionTimer;                                     // 0x0650(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Acceleration;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AirSpeed;                                          // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetSpeed;                                       // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Torque;                                            // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Slip;                                              // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           Gear;                                              // 0x0680(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         CurrentGear;                                       // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A4[0x4];                                      // 0x06A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_LightController_C*>     LightControllers;                                  // 0x06A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UVehicle_ExhaustController_C*>   Exhausts;                                          // 0x06B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           ActiveLightGroups;                                 // 0x06C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PreviousGear;                                      // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShifting;                                        // 0x06DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DD[0x3];                                      // 0x06DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ThrottleCurve;                                     // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            GearCurve;                                         // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringInput;                                     // 0x06F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         GearInput;                                         // 0x06F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VisualizeCenterOfMass;                             // 0x06FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverrideCenterOfMass;                              // 0x06FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6FE[0x2];                                      // 0x06FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeCenterOfMass;                              // 0x0700(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultCOM;                                        // 0x0718(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AccelerationConfig;                                // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_731[0x7];                                      // 0x0731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetAcceleration;                                // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicMaxTorque;                                  // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CenterOfMassOffset;                                // 0x0748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IdleRPM;                                           // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IdleMaxRPM;                                        // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SyncAsTrailer;                                     // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_771[0x7];                                      // 0x0771(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TrailerSyncTimer;                                  // 0x0778(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LocalTrailerRotation;                              // 0x0780(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               HostTrailerRotation;                               // 0x0798(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UVehicle_Hitch_C*                       NetworkTowHitch;                                   // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       NetworkTrailerHitch;                               // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        VehicleMaxAngularVelocity;                         // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelReprojection;                                 // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReprojectionSmoothAlpha;                           // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TickDelta;                                         // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CinematicPlayback;                                 // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelReprojectionCamber;                           // 0x07E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E2[0x6];                                      // 0x07E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CamberCompressed;                                  // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CamberDecompressed;                                // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ContactModificationDirty;                          // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_809[0x7];                                      // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TPS_Timer;                                         // 0x0810(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LocalSteeringInput;                                // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SuspensionDebug;                                   // 0x0820(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          DisplayDebugMenu;                                  // 0x0821(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_822[0x6];                                      // 0x0822(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleSetup_HUD_C*                    DebugMenu;                                         // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            DebugMeshes;                                       // 0x0830(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UStaticMeshComponent*                   DebugCOM;                                          // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Two5_TPS();
	void AddWheel(class UVehicle_Wheel_C* NewWheel);
	void AnyWheelContact(bool* WheelContact);
	void ApplyCOM();
	void AutomaticShifterPosition();
	void AVS_PrintDebugMessage(const class FString& Message, bool Error_);
	void AVS_Tick(float DeltaTime);
	void CalculateSteering();
	void ChangeGear();
	void Cleanup();
	void ConstructComponents();
	void ConstructWheels();
	void CopyInputsFromHost();
	void CreateBoneConstraint(bool bManualAttachment, const struct FTransform& RelativeTransform, class UVehicleConstraint** VehicleConstraint);
	void CreateHitchConstraints(bool bManualAttachment, const struct FTransform& RelativeTransform, class UVehicleConstraint** VehicleConstraint, class UPhysicsHandleComponent** PhysicsHandle);
	void CreateNewConstraint(bool bManualAttachment, const struct FTransform& RelativeTransform, class UVehicleConstraint** VehicleConstraint);
	void CreateNewWheelController(bool bManualAttachment, const struct FTransform& RelativeTransform, class UStaticMeshComponent** Mesh);
	void CreateSuspensionPreview(class UVehicle_Wheel_C* Wheel);
	void CreateWheelMesh(class UVehicle_Wheel_C* WheelComponent, class UPrimitiveComponent** NewMesh);
	void DebugDraw();
	void DebugPassiveText();
	void DestroyOwnedComponent(class UActorComponent* Target);
	void DestroyWheelMesh(class UVehicle_Wheel_C* WheelComponent);
	void DetachAllWheels();
	bool DeterminePassiveState();
	void DoStabilityControl();
	void EngineSimluation();
	void ExecuteUbergraph_AVS_Vehicle(int32 EntryPoint);
	void GearChanged(int32 Param_PreviousGear, int32 Param_CurrentGear);
	void GetAcceleration(double* Param_Acceleration);
	void GetAirSpeed(double* Param_AirSpeed);
	void GetAllWheels(TArray<class UVehicle_Wheel_C*>* Param_Wheels);
	void GetBrake(double* Param_Brake);
	void GetBrakeApplied(bool* Param_IsBrakeApplied);
	void GetCurrentGear(int32* Param_Gear, struct FVehicleGear* Param_CurrentGear);
	void GetCurrentSteering(double* CurrentSteering);
	void GetCurrentSteeringInput(double* Param_SteeringInput);
	void GetEngineRunning(bool* Param_EngineRunning);
	void GetExactCenterOfMass(struct FVector* ExactCOM, bool* IsValid);
	void GetHandbrakeApplied(bool* IsHandbrakeApplied);
	void GetHostTrailerRotation(struct FRotator* Param_HostTrailerRotation);
	void GetInitializationState(bool* Param_Initialized);
	void GetLightsActive(class FName LightGroup, bool* Active);
	void GetRPM(double* Param_RPM);
	void GetSelectedGear(int32* GearNumber, struct FVehicleGear* SelectedGear);
	void GetShifterPosition(EShifterPositions* ShifterPos);
	void GetSlip(double* Param_Slip);
	void GetSpeedUnitData(struct FSpeedUnit* Param_SpeedUnit);
	void GetTargetSpeed(double* Param_TargetSpeed);
	void GetThrottle(double* Param_Throttle);
	void GetTorque(double* Param_Torque);
	void GetVehicleMesh(class UMeshComponent** Mesh);
	void InitAudio();
	void InitCOM();
	void InitExhausts();
	void InitLights();
	void InitSpeedUnit();
	void InitVehicleMesh(bool* HasValidMesh);
	void InitWheelReprojectionExperiment();
	void InitWheels();
	void IsCinematic(bool* Param_IsCinematic);
	void IsOwningClient(bool* OwningClient);
	void MoveShifterPosition(bool MoveUp, EShifterPositions* NewPos);
	void OnRep_BrakeInput();
	void OnRep_EngineRunning();
	void OnRep_HandbrakeApplied();
	void OnRep_ServerEngineRunning();
	void OnRep_Shifter();
	void OnRep_SteeringInput();
	void OnRep_ThrottleInput();
	void OwnerChanged();
	void PassiveStateChanged(bool NewPassiveState);
	void PassiveTickBP(float DeltaTime);
	void PostConstructInit();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceivePossessed(class AController* NewController);
	void ReceiveUnpossessed(class AController* OldController);
	void RefreshContactModification(bool Instant);
	void Reinit_TPS();
	void RemoveWheel(class UVehicle_Wheel_C* Wheel);
	void ReprojectWheels();
	void ResetAllWheels();
	void RPC_Server_Brake(double Param_Brake);
	void RPC_Server_EngineRunning(bool Param_EngineRunning);
	void RPC_Server_Handbrake(bool Handbrake);
	void RPC_Server_Shifter(EShifterPositions ShifterPosition);
	void RPC_Server_Steering(double Axis);
	void RPC_Server_Throttle(double Param_Throttle);
	void RPC_Server_TrailerRotation(const struct FRotator& ServerTrailerRotation);
	void RunContactMod();
	void SendTrailerRotationRPC();
	void SetBrakeInput(double Param_Brake);
	void SetCenterOfMassOffset(const struct FVector& RelativeCOM);
	void SetEngineRunning(bool Param_EngineRunning);
	void SetExactCenterOfMass(const struct FVector& NewCenterOfMass);
	void SetGearArray(TArray<struct FVehicleGear>& Param_Gears);
	void SetGearItem(int32 Param_Index, const struct FVehicleGear& NewGearSettings);
	void SetHandbrakeInput(bool Handbrake);
	void SetInputHost(class AAVS_Vehicle_C* Param_InputHost);
	void SetLightsActive(class FName LightGroup, bool Active);
	void SetLocalEngineRunning(bool Param_EngineRunning);
	void SetManualGear(int32 GearNum);
	void SetMeshMaterial(class UStaticMeshComponent* Mesh, class UMaterialInterface* Material);
	void SetPhysics(bool Simulate_);
	void SetShifterPosition(EShifterPositions Shifter_Position);
	void SetSteeringInput(double Param_Steering);
	void SetThrottleAndBrakeInput(double Param_Throttle);
	void SetThrottleInput(double Param_Throttle);
	void SetTrailerSyncMode(class UVehicle_Hitch_C* TowHitch, class UVehicle_Hitch_C* TrailerHitch);
	void SetupSkeletalMeshes();
	void SetupWheelContactModification(bool* RegisterSuccess);
	void ShowDebugMenu(bool Display);
	void StartEngine();
	void StartupEngine();
	void SuspensionPreview();
	void SyncTrailer();
	void TeleportVehicle(const struct FVector& Location, const struct FRotator& Rotation, bool KeepRelativeVelocity);
	void TeleportWheels();
	void TickCosmetics();
	void TickInputs();
	void TickWheels();
	void ToggleLightsActive(class FName LightGroup, bool* Active);
	void UnhitchAll();
	void UpdateBrakes();
	void UpdateForces();
	void UpdateInputs();
	void UpdateLightDecorations(class UVehicle_LightController_C* LightController);
	void UpdateLights();
	void UpdateLinearDamping();
	void UpdateWheelLocks();
	void UpdateWheelTorque(class UVehicle_Wheel_C* Wheel);
	void UserConstructionScript();
	void ValidateTransmission();
	void WakeIfThrottled();
	void WakePhysics();
	void WakeWheelsForMovement();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AVS_Vehicle_C">();
	}
	static class AAVS_Vehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAVS_Vehicle_C>();
	}
};
static_assert(alignof(AAVS_Vehicle_C) == 0x000008, "Wrong alignment on AAVS_Vehicle_C");
static_assert(sizeof(AAVS_Vehicle_C) == 0x000848, "Wrong size on AAVS_Vehicle_C");
static_assert(offsetof(AAVS_Vehicle_C, UberGraphFrame) == 0x000560, "Member 'AAVS_Vehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Wheels) == 0x000568, "Member 'AAVS_Vehicle_C::Wheels' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ConstructCalled) == 0x000578, "Member 'AAVS_Vehicle_C::ConstructCalled' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Initialized) == 0x000579, "Member 'AAVS_Vehicle_C::Initialized' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, EngineAudio) == 0x000580, "Member 'AAVS_Vehicle_C::EngineAudio' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, RPM) == 0x000588, "Member 'AAVS_Vehicle_C::RPM' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DRPM) == 0x000590, "Member 'AAVS_Vehicle_C::DRPM' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, StartWithPhysics) == 0x000598, "Member 'AAVS_Vehicle_C::StartWithPhysics' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, StabilityControl) == 0x000599, "Member 'AAVS_Vehicle_C::StabilityControl' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, StabilityControlForce) == 0x0005A0, "Member 'AAVS_Vehicle_C::StabilityControlForce' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DynamicAirDrag) == 0x0005A8, "Member 'AAVS_Vehicle_C::DynamicAirDrag' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, BaseLinearDrag) == 0x0005B0, "Member 'AAVS_Vehicle_C::BaseLinearDrag' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, PhysicsMaterial) == 0x0005B8, "Member 'AAVS_Vehicle_C::PhysicsMaterial' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, NumDrivingWheels) == 0x0005C0, "Member 'AAVS_Vehicle_C::NumDrivingWheels' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, EngineRunning) == 0x0005C4, "Member 'AAVS_Vehicle_C::EngineRunning' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, AllowPassiveMode) == 0x0005C5, "Member 'AAVS_Vehicle_C::AllowPassiveMode' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, StartWithEngineRunning) == 0x0005C6, "Member 'AAVS_Vehicle_C::StartWithEngineRunning' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ZeroThrottleWhileShifting) == 0x0005C7, "Member 'AAVS_Vehicle_C::ZeroThrottleWhileShifting' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, SpeedUnits) == 0x0005C8, "Member 'AAVS_Vehicle_C::SpeedUnits' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, SpeedUnit) == 0x0005D0, "Member 'AAVS_Vehicle_C::SpeedUnit' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, IgnitionTime) == 0x000600, "Member 'AAVS_Vehicle_C::IgnitionTime' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Shifter) == 0x000608, "Member 'AAVS_Vehicle_C::Shifter' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, AutomaticShifterPositon) == 0x000609, "Member 'AAVS_Vehicle_C::AutomaticShifterPositon' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, AutomaticTransmission) == 0x00060A, "Member 'AAVS_Vehicle_C::AutomaticTransmission' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, GearSwitchTime) == 0x000610, "Member 'AAVS_Vehicle_C::GearSwitchTime' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, InputHost) == 0x000618, "Member 'AAVS_Vehicle_C::InputHost' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ThrottleInput) == 0x000620, "Member 'AAVS_Vehicle_C::ThrottleInput' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Throttle) == 0x000628, "Member 'AAVS_Vehicle_C::Throttle' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, BrakeInput) == 0x000630, "Member 'AAVS_Vehicle_C::BrakeInput' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Brake) == 0x000638, "Member 'AAVS_Vehicle_C::Brake' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Steering) == 0x000640, "Member 'AAVS_Vehicle_C::Steering' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, IsBrakeApplied) == 0x000648, "Member 'AAVS_Vehicle_C::IsBrakeApplied' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, HandbrakeApplied) == 0x000649, "Member 'AAVS_Vehicle_C::HandbrakeApplied' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ServerEngineRunning) == 0x00064A, "Member 'AAVS_Vehicle_C::ServerEngineRunning' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, IgnitionTimer) == 0x000650, "Member 'AAVS_Vehicle_C::IgnitionTimer' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Acceleration) == 0x000658, "Member 'AAVS_Vehicle_C::Acceleration' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, AirSpeed) == 0x000660, "Member 'AAVS_Vehicle_C::AirSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, TargetSpeed) == 0x000668, "Member 'AAVS_Vehicle_C::TargetSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Torque) == 0x000670, "Member 'AAVS_Vehicle_C::Torque' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Slip) == 0x000678, "Member 'AAVS_Vehicle_C::Slip' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Gear) == 0x000680, "Member 'AAVS_Vehicle_C::Gear' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, CurrentGear) == 0x0006A0, "Member 'AAVS_Vehicle_C::CurrentGear' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, LightControllers) == 0x0006A8, "Member 'AAVS_Vehicle_C::LightControllers' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, Exhausts) == 0x0006B8, "Member 'AAVS_Vehicle_C::Exhausts' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ActiveLightGroups) == 0x0006C8, "Member 'AAVS_Vehicle_C::ActiveLightGroups' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, PreviousGear) == 0x0006D8, "Member 'AAVS_Vehicle_C::PreviousGear' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, IsShifting) == 0x0006DC, "Member 'AAVS_Vehicle_C::IsShifting' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ThrottleCurve) == 0x0006E0, "Member 'AAVS_Vehicle_C::ThrottleCurve' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, GearCurve) == 0x0006E8, "Member 'AAVS_Vehicle_C::GearCurve' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, SteeringInput) == 0x0006F0, "Member 'AAVS_Vehicle_C::SteeringInput' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, GearInput) == 0x0006F8, "Member 'AAVS_Vehicle_C::GearInput' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, VisualizeCenterOfMass) == 0x0006FC, "Member 'AAVS_Vehicle_C::VisualizeCenterOfMass' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, OverrideCenterOfMass) == 0x0006FD, "Member 'AAVS_Vehicle_C::OverrideCenterOfMass' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, RelativeCenterOfMass) == 0x000700, "Member 'AAVS_Vehicle_C::RelativeCenterOfMass' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DefaultCOM) == 0x000718, "Member 'AAVS_Vehicle_C::DefaultCOM' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, AccelerationConfig) == 0x000730, "Member 'AAVS_Vehicle_C::AccelerationConfig' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, TargetAcceleration) == 0x000738, "Member 'AAVS_Vehicle_C::TargetAcceleration' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DynamicMaxTorque) == 0x000740, "Member 'AAVS_Vehicle_C::DynamicMaxTorque' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, CenterOfMassOffset) == 0x000748, "Member 'AAVS_Vehicle_C::CenterOfMassOffset' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, IdleRPM) == 0x000760, "Member 'AAVS_Vehicle_C::IdleRPM' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, IdleMaxRPM) == 0x000768, "Member 'AAVS_Vehicle_C::IdleMaxRPM' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, SyncAsTrailer) == 0x000770, "Member 'AAVS_Vehicle_C::SyncAsTrailer' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, TrailerSyncTimer) == 0x000778, "Member 'AAVS_Vehicle_C::TrailerSyncTimer' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, LocalTrailerRotation) == 0x000780, "Member 'AAVS_Vehicle_C::LocalTrailerRotation' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, HostTrailerRotation) == 0x000798, "Member 'AAVS_Vehicle_C::HostTrailerRotation' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, NetworkTowHitch) == 0x0007B0, "Member 'AAVS_Vehicle_C::NetworkTowHitch' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, NetworkTrailerHitch) == 0x0007B8, "Member 'AAVS_Vehicle_C::NetworkTrailerHitch' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, VehicleMaxAngularVelocity) == 0x0007C0, "Member 'AAVS_Vehicle_C::VehicleMaxAngularVelocity' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, WheelReprojection) == 0x0007C8, "Member 'AAVS_Vehicle_C::WheelReprojection' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ReprojectionSmoothAlpha) == 0x0007D0, "Member 'AAVS_Vehicle_C::ReprojectionSmoothAlpha' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, TickDelta) == 0x0007D8, "Member 'AAVS_Vehicle_C::TickDelta' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, CinematicPlayback) == 0x0007E0, "Member 'AAVS_Vehicle_C::CinematicPlayback' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, WheelReprojectionCamber) == 0x0007E1, "Member 'AAVS_Vehicle_C::WheelReprojectionCamber' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, CamberCompressed) == 0x0007E8, "Member 'AAVS_Vehicle_C::CamberCompressed' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, CamberDecompressed) == 0x0007F8, "Member 'AAVS_Vehicle_C::CamberDecompressed' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, ContactModificationDirty) == 0x000808, "Member 'AAVS_Vehicle_C::ContactModificationDirty' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, TPS_Timer) == 0x000810, "Member 'AAVS_Vehicle_C::TPS_Timer' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, LocalSteeringInput) == 0x000818, "Member 'AAVS_Vehicle_C::LocalSteeringInput' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, SuspensionDebug) == 0x000820, "Member 'AAVS_Vehicle_C::SuspensionDebug' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DisplayDebugMenu) == 0x000821, "Member 'AAVS_Vehicle_C::DisplayDebugMenu' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DebugMenu) == 0x000828, "Member 'AAVS_Vehicle_C::DebugMenu' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DebugMeshes) == 0x000830, "Member 'AAVS_Vehicle_C::DebugMeshes' has a wrong offset!");
static_assert(offsetof(AAVS_Vehicle_C, DebugCOM) == 0x000840, "Member 'AAVS_Vehicle_C::DebugCOM' has a wrong offset!");

}

