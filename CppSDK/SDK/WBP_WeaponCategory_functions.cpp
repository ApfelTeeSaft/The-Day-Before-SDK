#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WeaponCategory

#include "Basic.hpp"

#include "WBP_WeaponCategory_classes.hpp"
#include "WBP_WeaponCategory_parameters.hpp"


namespace SDK
{

// Function WBP_WeaponCategory.WBP_WeaponCategory_C.ActiveModeChange
// (BlueprintCallable, BlueprintEvent)

void UWBP_WeaponCategory_C::ActiveModeChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "ActiveModeChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_WeaponCategory_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.CreateListWeapons
// (BlueprintCallable, BlueprintEvent)

void UWBP_WeaponCategory_C::CreateListWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "CreateListWeapons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.ExecuteUbergraph_WBP_WeaponCategory
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_WeaponCategory_C::ExecuteUbergraph_WBP_WeaponCategory(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "ExecuteUbergraph_WBP_WeaponCategory");

	Params::WBP_WeaponCategory_C_ExecuteUbergraph_WBP_WeaponCategory Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.FillListWithEmptySlots
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_WeaponCategory_C::FillListWithEmptySlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "FillListWithEmptySlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.SelectCategory
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_WeaponCategory_C::SelectCategory(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "SelectCategory");

	Params::WBP_WeaponCategory_C_SelectCategory Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.SetEntryPadding
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Entry                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_WeaponCategory_C::SetEntryPadding(class UUserWidget* Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "SetEntryPadding");

	Params::WBP_WeaponCategory_C_SetEntryPadding Parms{};

	Parms.Entry = Entry;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_WeaponCategory.WBP_WeaponCategory_C.ValidateWeaponRows
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_WeaponCategory_C::ValidateWeaponRows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_WeaponCategory_C", "ValidateWeaponRows");

	UObject::ProcessEvent(Func, nullptr);
}

}

