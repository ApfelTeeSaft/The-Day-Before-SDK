#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Weather_Override_Volume

#include "Basic.hpp"

#include "UDS_WeatherTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UDS_Weather_Override_Mode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Weather_Override_Volume.Weather_Override_Volume_C
// 0x01E8 (0x0478 - 0x0290)
class AWeather_Override_Volume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URandom_Weather_Variation_C*            Random_Weather_Variation;                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    billboard;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EUDS_Weather_Override_Mode                    Mode;                                              // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Transition_Width;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Priority;                                          // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_WeatherTypes                             Weather_Type;                                      // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Intensity;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Coverage;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Intensity;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Override_Material_Effects;                         // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Material_Snow;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Material_Wetness;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scaled_Transition_Width;                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Weather_C*               UDW;                                               // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Summer_;               // 0x0310(0x0050)(Edit, BlueprintVisible)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Autumn_;               // 0x0360(0x0050)(Edit, BlueprintVisible)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Winter_;               // 0x03B0(0x0050)(Edit, BlueprintVisible)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Spring_;               // 0x0400(0x0050)(Edit, BlueprintVisible)
	double                                        Total_Sphere_Bounds;                               // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Spline_Bounds_Center;                              // 0x0458(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Weather_Label_in_Editor;                      // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void Calculate_Spline_Bounds();
	void ExecuteUbergraph_Weather_Override_Volume(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Weather_Override_Volume_C">();
	}
	static class AWeather_Override_Volume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeather_Override_Volume_C>();
	}
};
static_assert(alignof(AWeather_Override_Volume_C) == 0x000008, "Wrong alignment on AWeather_Override_Volume_C");
static_assert(sizeof(AWeather_Override_Volume_C) == 0x000478, "Wrong size on AWeather_Override_Volume_C");
static_assert(offsetof(AWeather_Override_Volume_C, UberGraphFrame) == 0x000290, "Member 'AWeather_Override_Volume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Random_Weather_Variation) == 0x000298, "Member 'AWeather_Override_Volume_C::Random_Weather_Variation' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, billboard) == 0x0002A0, "Member 'AWeather_Override_Volume_C::billboard' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Spline) == 0x0002A8, "Member 'AWeather_Override_Volume_C::Spline' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Mode) == 0x0002B0, "Member 'AWeather_Override_Volume_C::Mode' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Transition_Width) == 0x0002B8, "Member 'AWeather_Override_Volume_C::Transition_Width' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Priority) == 0x0002C0, "Member 'AWeather_Override_Volume_C::Priority' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Weather_Type) == 0x0002C4, "Member 'AWeather_Override_Volume_C::Weather_Type' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Weather_Intensity) == 0x0002C8, "Member 'AWeather_Override_Volume_C::Weather_Intensity' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Cloud_Coverage) == 0x0002D0, "Member 'AWeather_Override_Volume_C::Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Wind_Intensity) == 0x0002D8, "Member 'AWeather_Override_Volume_C::Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, _Snow) == 0x0002E0, "Member 'AWeather_Override_Volume_C::_Snow' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Override_Material_Effects) == 0x0002E8, "Member 'AWeather_Override_Volume_C::Override_Material_Effects' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Material_Snow) == 0x0002F0, "Member 'AWeather_Override_Volume_C::Material_Snow' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Material_Wetness) == 0x0002F8, "Member 'AWeather_Override_Volume_C::Material_Wetness' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Scaled_Transition_Width) == 0x000300, "Member 'AWeather_Override_Volume_C::Scaled_Transition_Width' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, UDW) == 0x000308, "Member 'AWeather_Override_Volume_C::UDW' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Weather_Type_Probabilities__Summer_) == 0x000310, "Member 'AWeather_Override_Volume_C::Weather_Type_Probabilities__Summer_' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Weather_Type_Probabilities__Autumn_) == 0x000360, "Member 'AWeather_Override_Volume_C::Weather_Type_Probabilities__Autumn_' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Weather_Type_Probabilities__Winter_) == 0x0003B0, "Member 'AWeather_Override_Volume_C::Weather_Type_Probabilities__Winter_' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Weather_Type_Probabilities__Spring_) == 0x000400, "Member 'AWeather_Override_Volume_C::Weather_Type_Probabilities__Spring_' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Total_Sphere_Bounds) == 0x000450, "Member 'AWeather_Override_Volume_C::Total_Sphere_Bounds' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Spline_Bounds_Center) == 0x000458, "Member 'AWeather_Override_Volume_C::Spline_Bounds_Center' has a wrong offset!");
static_assert(offsetof(AWeather_Override_Volume_C, Show_Weather_Label_in_Editor) == 0x000470, "Member 'AWeather_Override_Volume_C::Show_Weather_Label_in_Editor' has a wrong offset!");

}

