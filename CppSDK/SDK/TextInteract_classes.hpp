#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TextInteract

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TextInteract.TextInteract_C
// 0x0038 (0x02C8 - 0x0290)
class ATextInteract_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 Text;                                              // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 InteractText;                                      // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	void CallClientInteract(const class FString& Param_Text);
	void CallClientInteractWithWindow(const class FString& Param_Text);
	void DestroyInteractable();
	void ExecuteUbergraph_TextInteract(int32 EntryPoint);
	void GetActorType(E_ActorType* ActorType);
	void IsLocked_(bool* Result);
	void OnBeginInteract(class APawn* Player);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetInteractText(const class FString& Param_InteractText);
	void SetText(const class FString& Param_Text);
	void SetTutorial3DWidgetVisibility(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TextInteract_C">();
	}
	static class ATextInteract_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATextInteract_C>();
	}
};
static_assert(alignof(ATextInteract_C) == 0x000008, "Wrong alignment on ATextInteract_C");
static_assert(sizeof(ATextInteract_C) == 0x0002C8, "Wrong size on ATextInteract_C");
static_assert(offsetof(ATextInteract_C, UberGraphFrame) == 0x000290, "Member 'ATextInteract_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATextInteract_C, Box) == 0x000298, "Member 'ATextInteract_C::Box' has a wrong offset!");
static_assert(offsetof(ATextInteract_C, DefaultSceneRoot) == 0x0002A0, "Member 'ATextInteract_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ATextInteract_C, Text) == 0x0002A8, "Member 'ATextInteract_C::Text' has a wrong offset!");
static_assert(offsetof(ATextInteract_C, InteractText) == 0x0002B8, "Member 'ATextInteract_C::InteractText' has a wrong offset!");

}

