#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestManager

#include "Basic.hpp"

#include "QuestManager_classes.hpp"
#include "QuestManager_parameters.hpp"


namespace SDK
{

// Function QuestManager.QuestManager_C.AddSideQuest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USideQuests_C*                    SideQuest                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::AddSideQuest(const class FString& ID, class USideQuests_C* SideQuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "AddSideQuest");

	Params::QuestManager_C_AddSideQuest Parms{};

	Parms.ID = std::move(ID);
	Parms.SideQuest = SideQuest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.AksForHighlightableActorsWithTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<TScriptInterface<class II_Highlightable_C>>Result                                                 (Parm, OutParm)

void AQuestManager_C::AksForHighlightableActorsWithTag(const class FString& Tag, TArray<TScriptInterface<class II_Highlightable_C>>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "AksForHighlightableActorsWithTag");

	Params::QuestManager_C_AksForHighlightableActorsWithTag Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function QuestManager.QuestManager_C.AskForHighlightableActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TScriptInterface<class II_Highlightable_C>>FoundActors                                            (Parm, OutParm)

void AQuestManager_C::AskForHighlightableActors(TArray<TScriptInterface<class II_Highlightable_C>>* FoundActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "AskForHighlightableActors");

	Params::QuestManager_C_AskForHighlightableActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FoundActors != nullptr)
		*FoundActors = std::move(Parms.FoundActors);
}


// Function QuestManager.QuestManager_C.ChangeQuestHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Hint                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AQuestManager_C::ChangeQuestHint(const class FString& Hint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "ChangeQuestHint");

	Params::QuestManager_C_ChangeQuestHint Parms{};

	Parms.Hint = std::move(Hint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.ChangeQuestHintClientSide
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Hint                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AQuestManager_C::ChangeQuestHintClientSide(const class FString& Hint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "ChangeQuestHintClientSide");

	Params::QuestManager_C_ChangeQuestHintClientSide Parms{};

	Parms.Hint = std::move(Hint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.CheckForStartSideQuest
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Trigger                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsSideQuestTrigger                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USideQuests_C*                    SideQuest                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::CheckForStartSideQuest(const class FString& Trigger, bool* IsSideQuestTrigger, class USideQuests_C** SideQuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "CheckForStartSideQuest");

	Params::QuestManager_C_CheckForStartSideQuest Parms{};

	Parms.Trigger = std::move(Trigger);

	UObject::ProcessEvent(Func, &Parms);

	if (IsSideQuestTrigger != nullptr)
		*IsSideQuestTrigger = Parms.IsSideQuestTrigger;

	if (SideQuest != nullptr)
		*SideQuest = Parms.SideQuest;
}


// Function QuestManager.QuestManager_C.CreateQuestByQuestData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FQuestData                       QuestData                                              (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UQuestV2_C*                       Quest                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::CreateQuestByQuestData(const struct FQuestData& QuestData, class UQuestV2_C** Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "CreateQuestByQuestData");

	Params::QuestManager_C_CreateQuestByQuestData Parms{};

	Parms.QuestData = std::move(QuestData);

	UObject::ProcessEvent(Func, &Parms);

	if (Quest != nullptr)
		*Quest = Parms.Quest;
}


// Function QuestManager.QuestManager_C.CreateQuestByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EQuestType                              QuestType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UQuestV2_C*                       Result                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::CreateQuestByType(EQuestType QuestType, class UQuestV2_C** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "CreateQuestByType");

	Params::QuestManager_C_CreateQuestByType Parms{};

	Parms.QuestType = QuestType;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function QuestManager.QuestManager_C.CreateTimeoutTrigger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Trigger                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::CreateTimeoutTrigger(const class FString& Trigger, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "CreateTimeoutTrigger");

	Params::QuestManager_C_CreateTimeoutTrigger Parms{};

	Parms.Trigger = std::move(Trigger);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.ExecuteUbergraph_QuestManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::ExecuteUbergraph_QuestManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "ExecuteUbergraph_QuestManager");

	Params::QuestManager_C_ExecuteUbergraph_QuestManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.InitializeQuests
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::InitializeQuests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "InitializeQuests");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.InitManager
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::InitManager(class ASurvivalPlayer_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "InitManager");

	Params::QuestManager_C_InitManager Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.IsCanSwitchToNextQuest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestV2_C*                       CompletedQuest                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NextIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::IsCanSwitchToNextQuest(class UQuestV2_C* CompletedQuest, bool* Result, int32* NextIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "IsCanSwitchToNextQuest");

	Params::QuestManager_C_IsCanSwitchToNextQuest Parms{};

	Parms.CompletedQuest = CompletedQuest;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (NextIndex != nullptr)
		*NextIndex = Parms.NextIndex;
}


// Function QuestManager.QuestManager_C.OnCompleteCurrentQuest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   QuestID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::OnCompleteCurrentQuest(int32 QuestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnCompleteCurrentQuest");

	Params::QuestManager_C_OnCompleteCurrentQuest Parms{};

	Parms.QuestID = QuestID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.OnFillCarFuel
// (Public, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::OnFillCarFuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnFillCarFuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.OnImproveCar
// (Public, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::OnImproveCar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnImproveCar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.OnInventoryUpdated
// (Public, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::OnInventoryUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnInventoryUpdated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.OnKillNPC
// (Public, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::OnKillNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnKillNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.OnPlaceBonfire
// (Public, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::OnPlaceBonfire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnPlaceBonfire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.OnPlayerDead
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::OnPlayerDead(class ASurvivalPlayer_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnPlayerDead");

	Params::QuestManager_C_OnPlayerDead Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.OnQuestCompleted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestV2_C*                       CompletedQuest                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::OnQuestCompleted(class UQuestV2_C* CompletedQuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnQuestCompleted");

	Params::QuestManager_C_OnQuestCompleted Parms{};

	Parms.CompletedQuest = CompletedQuest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.OnQuestEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           QuestEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AQuestManager_C::OnQuestEvent(const class FString& QuestEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnQuestEvent");

	Params::QuestManager_C_OnQuestEvent Parms{};

	Parms.QuestEvent = std::move(QuestEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.OnQuestEventServerSide
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Trigger                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AQuestManager_C::OnQuestEventServerSide(const class FString& Trigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "OnQuestEventServerSide");

	Params::QuestManager_C_OnQuestEventServerSide Parms{};

	Parms.Trigger = std::move(Trigger);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AQuestManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.SetMarkers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>                  Markers                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AQuestManager_C::SetMarkers(const TArray<struct FVector>& Markers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "SetMarkers");

	Params::QuestManager_C_SetMarkers Parms{};

	Parms.Markers = std::move(Markers);

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.SetPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::SetPlayer(class ASurvivalPlayer_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "SetPlayer");

	Params::QuestManager_C_SetPlayer Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.SwitchCurrentQuest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestV2_C*                       Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::SwitchCurrentQuest(class UQuestV2_C* Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "SwitchCurrentQuest");

	Params::QuestManager_C_SwitchCurrentQuest Parms{};

	Parms.Quest = Quest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.SwitchQuestClientSide
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   QuestID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::SwitchQuestClientSide(int32 QuestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "SwitchQuestClientSide");

	Params::QuestManager_C_SwitchQuestClientSide Parms{};

	Parms.QuestID = QuestID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function QuestManager.QuestManager_C.SwitchToMainQuest
// (Public, BlueprintCallable, BlueprintEvent)

void AQuestManager_C::SwitchToMainQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "SwitchToMainQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function QuestManager.QuestManager_C.SwitchToSideQuest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class USideQuests_C*                    SideQuest                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AQuestManager_C::SwitchToSideQuest(const class FString& ID, class USideQuests_C* SideQuest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestManager_C", "SwitchToSideQuest");

	Params::QuestManager_C_SwitchToSideQuest Parms{};

	Parms.ID = std::move(ID);
	Parms.SideQuest = SideQuest;

	UObject::ProcessEvent(Func, &Parms);
}

}

