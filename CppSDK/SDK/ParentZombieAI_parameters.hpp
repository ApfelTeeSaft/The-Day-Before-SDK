#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ParentZombieAI

#include "Basic.hpp"

#include "ClimbAsset_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ComponentAndTransform_structs.hpp"
#include "ClimBType_structs.hpp"
#include "E_SmoothSynsPrefab_structs.hpp"


namespace SDK::Params
{

// Function ParentZombieAI.ParentZombieAI_C.CalcAccelDecel
// 0x0018 (0x0018 - 0x0000)
struct ParentZombieAI_C_CalcAccelDecel final
{
public:
	bool                                          Default_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxAcceleration;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BrakingDecelerationWalking;                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_CalcAccelDecel) == 0x000008, "Wrong alignment on ParentZombieAI_C_CalcAccelDecel");
static_assert(sizeof(ParentZombieAI_C_CalcAccelDecel) == 0x000018, "Wrong size on ParentZombieAI_C_CalcAccelDecel");
static_assert(offsetof(ParentZombieAI_C_CalcAccelDecel, Default_) == 0x000000, "Member 'ParentZombieAI_C_CalcAccelDecel::Default_' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_CalcAccelDecel, MaxAcceleration) == 0x000008, "Member 'ParentZombieAI_C_CalcAccelDecel::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_CalcAccelDecel, BrakingDecelerationWalking) == 0x000010, "Member 'ParentZombieAI_C_CalcAccelDecel::BrakingDecelerationWalking' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.ChanceToKnock
// 0x0038 (0x0038 - 0x0000)
struct ParentZombieAI_C_ChanceToKnock final
{
public:
	double                                        HitAngle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weight;                                            // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              Selection;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomInteger;                                     // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_ChanceToKnock) == 0x000008, "Wrong alignment on ParentZombieAI_C_ChanceToKnock");
static_assert(sizeof(ParentZombieAI_C_ChanceToKnock) == 0x000038, "Wrong size on ParentZombieAI_C_ChanceToKnock");
static_assert(offsetof(ParentZombieAI_C_ChanceToKnock, HitAngle) == 0x000000, "Member 'ParentZombieAI_C_ChanceToKnock::HitAngle' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToKnock, HitLocation) == 0x000008, "Member 'ParentZombieAI_C_ChanceToKnock::HitLocation' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToKnock, BoneName) == 0x000020, "Member 'ParentZombieAI_C_ChanceToKnock::BoneName' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToKnock, Weight) == 0x000028, "Member 'ParentZombieAI_C_ChanceToKnock::Weight' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToKnock, Selection) == 0x000030, "Member 'ParentZombieAI_C_ChanceToKnock::Selection' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToKnock, RandomInteger) == 0x000034, "Member 'ParentZombieAI_C_ChanceToKnock::RandomInteger' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.ChanceToStun
// 0x0020 (0x0020 - 0x0000)
struct ParentZombieAI_C_ChanceToStun final
{
public:
	double                                        HitAngle;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weight;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomInteger;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_ChanceToStun) == 0x000008, "Wrong alignment on ParentZombieAI_C_ChanceToStun");
static_assert(sizeof(ParentZombieAI_C_ChanceToStun) == 0x000020, "Wrong size on ParentZombieAI_C_ChanceToStun");
static_assert(offsetof(ParentZombieAI_C_ChanceToStun, HitAngle) == 0x000000, "Member 'ParentZombieAI_C_ChanceToStun::HitAngle' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToStun, Weight) == 0x000008, "Member 'ParentZombieAI_C_ChanceToStun::Weight' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToStun, BoneName) == 0x000010, "Member 'ParentZombieAI_C_ChanceToStun::BoneName' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ChanceToStun, RandomInteger) == 0x000018, "Member 'ParentZombieAI_C_ChanceToStun::RandomInteger' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.ClimbCheck_New
// 0x00D0 (0x00D0 - 0x0000)
struct ParentZombieAI_C_ClimbCheck_New final
{
public:
	EClimbType                                    ClimbType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MantleHeight;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TargetTransform;                                   // 0x0010(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ObstacleWidth;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DownTraceLocation;                                 // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTrace_Normal;                               // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTrace_ImpactPoint;                          // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_ClimbCheck_New) == 0x000010, "Wrong alignment on ParentZombieAI_C_ClimbCheck_New");
static_assert(sizeof(ParentZombieAI_C_ClimbCheck_New) == 0x0000D0, "Wrong size on ParentZombieAI_C_ClimbCheck_New");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, ClimbType) == 0x000000, "Member 'ParentZombieAI_C_ClimbCheck_New::ClimbType' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, MantleHeight) == 0x000008, "Member 'ParentZombieAI_C_ClimbCheck_New::MantleHeight' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, TargetTransform) == 0x000010, "Member 'ParentZombieAI_C_ClimbCheck_New::TargetTransform' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, ObstacleWidth) == 0x000070, "Member 'ParentZombieAI_C_ClimbCheck_New::ObstacleWidth' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, HitComponent) == 0x000078, "Member 'ParentZombieAI_C_ClimbCheck_New::HitComponent' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, DownTraceLocation) == 0x000080, "Member 'ParentZombieAI_C_ClimbCheck_New::DownTraceLocation' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, InitialTrace_Normal) == 0x000098, "Member 'ParentZombieAI_C_ClimbCheck_New::InitialTrace_Normal' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbCheck_New, InitialTrace_ImpactPoint) == 0x0000B0, "Member 'ParentZombieAI_C_ClimbCheck_New::InitialTrace_ImpactPoint' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.ClimbStart_New
// 0x0250 (0x0250 - 0x0000)
struct ParentZombieAI_C_ClimbStart_New final
{
public:
	double                                        Height;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentAndTransform                 ClimbLedgeWS;                                      // 0x0010(0x00C0)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EClimbType                                    Type;                                              // 0x00D0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In;                                                // 0x00D1(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Width;                                             // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Move;                                              // 0x00E0(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Param_ClimbStartTransform;                         // 0x00F0(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FClimbAsset                            ClimbAsset;                                        // 0x0150(0x00F8)(Edit, BlueprintVisible, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_ClimbStart_New) == 0x000010, "Wrong alignment on ParentZombieAI_C_ClimbStart_New");
static_assert(sizeof(ParentZombieAI_C_ClimbStart_New) == 0x000250, "Wrong size on ParentZombieAI_C_ClimbStart_New");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, Height) == 0x000000, "Member 'ParentZombieAI_C_ClimbStart_New::Height' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, ClimbLedgeWS) == 0x000010, "Member 'ParentZombieAI_C_ClimbStart_New::ClimbLedgeWS' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, Type) == 0x0000D0, "Member 'ParentZombieAI_C_ClimbStart_New::Type' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, In) == 0x0000D1, "Member 'ParentZombieAI_C_ClimbStart_New::In' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, Width) == 0x0000D8, "Member 'ParentZombieAI_C_ClimbStart_New::Width' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, Move) == 0x0000E0, "Member 'ParentZombieAI_C_ClimbStart_New::Move' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, Param_ClimbStartTransform) == 0x0000F0, "Member 'ParentZombieAI_C_ClimbStart_New::Param_ClimbStartTransform' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbStart_New, ClimbAsset) == 0x000150, "Member 'ParentZombieAI_C_ClimbStart_New::ClimbAsset' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.ClimbUpdate_New
// 0x00E0 (0x00E0 - 0x0000)
struct ParentZombieAI_C_ClimbUpdate_New final
{
public:
	struct FTransform                             LerpedTarget;                                      // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZCorrectionAlpha;                                  // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYCorrectionAlpha;                                 // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PositionAlpha;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetToBone;                                      // 0x0080(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_ClimbUpdate_New) == 0x000010, "Wrong alignment on ParentZombieAI_C_ClimbUpdate_New");
static_assert(sizeof(ParentZombieAI_C_ClimbUpdate_New) == 0x0000E0, "Wrong size on ParentZombieAI_C_ClimbUpdate_New");
static_assert(offsetof(ParentZombieAI_C_ClimbUpdate_New, LerpedTarget) == 0x000000, "Member 'ParentZombieAI_C_ClimbUpdate_New::LerpedTarget' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbUpdate_New, ZCorrectionAlpha) == 0x000060, "Member 'ParentZombieAI_C_ClimbUpdate_New::ZCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbUpdate_New, XYCorrectionAlpha) == 0x000068, "Member 'ParentZombieAI_C_ClimbUpdate_New::XYCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbUpdate_New, PositionAlpha) == 0x000070, "Member 'ParentZombieAI_C_ClimbUpdate_New::PositionAlpha' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ClimbUpdate_New, OffsetToBone) == 0x000080, "Member 'ParentZombieAI_C_ClimbUpdate_New::OffsetToBone' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.ExecuteUbergraph_ParentZombieAI
// 0x0018 (0x0018 - 0x0000)
struct ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHouseBox_C*                            K2Node_Event_HouseBox;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHouseBox_C*                            K2Node_Event_HouseBox_1;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI) == 0x000008, "Wrong alignment on ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI");
static_assert(sizeof(ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI) == 0x000018, "Wrong size on ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI");
static_assert(offsetof(ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI, EntryPoint) == 0x000000, "Member 'ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI::EntryPoint' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI, K2Node_Event_HouseBox) == 0x000008, "Member 'ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI::K2Node_Event_HouseBox' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI, K2Node_Event_HouseBox_1) == 0x000010, "Member 'ParentZombieAI_C_ExecuteUbergraph_ParentZombieAI::K2Node_Event_HouseBox_1' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.GetCapsuleBaseLocation
// 0x0008 (0x0008 - 0x0000)
struct ParentZombieAI_C_GetCapsuleBaseLocation final
{
public:
	double                                        ZOffset;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_GetCapsuleBaseLocation) == 0x000008, "Wrong alignment on ParentZombieAI_C_GetCapsuleBaseLocation");
static_assert(sizeof(ParentZombieAI_C_GetCapsuleBaseLocation) == 0x000008, "Wrong size on ParentZombieAI_C_GetCapsuleBaseLocation");
static_assert(offsetof(ParentZombieAI_C_GetCapsuleBaseLocation, ZOffset) == 0x000000, "Member 'ParentZombieAI_C_GetCapsuleBaseLocation::ZOffset' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.GetClimbAsset
// 0x0002 (0x0002 - 0x0000)
struct ParentZombieAI_C_GetClimbAsset final
{
public:
	EClimbType                                    ClimbType;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          In;                                                // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_GetClimbAsset) == 0x000001, "Wrong alignment on ParentZombieAI_C_GetClimbAsset");
static_assert(sizeof(ParentZombieAI_C_GetClimbAsset) == 0x000002, "Wrong size on ParentZombieAI_C_GetClimbAsset");
static_assert(offsetof(ParentZombieAI_C_GetClimbAsset, ClimbType) == 0x000000, "Member 'ParentZombieAI_C_GetClimbAsset::ClimbType' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_GetClimbAsset, In) == 0x000001, "Member 'ParentZombieAI_C_GetClimbAsset::In' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.HeadStunFunc
// 0x0020 (0x0020 - 0x0000)
struct ParentZombieAI_C_HeadStunFunc final
{
public:
	EBPE_Weapon_Type                              Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HitAngle;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomInteger;                                     // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_HeadStunFunc) == 0x000008, "Wrong alignment on ParentZombieAI_C_HeadStunFunc");
static_assert(sizeof(ParentZombieAI_C_HeadStunFunc) == 0x000020, "Wrong size on ParentZombieAI_C_HeadStunFunc");
static_assert(offsetof(ParentZombieAI_C_HeadStunFunc, Selection) == 0x000000, "Member 'ParentZombieAI_C_HeadStunFunc::Selection' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_HeadStunFunc, HitAngle) == 0x000008, "Member 'ParentZombieAI_C_HeadStunFunc::HitAngle' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_HeadStunFunc, BoneName) == 0x000010, "Member 'ParentZombieAI_C_HeadStunFunc::BoneName' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_HeadStunFunc, RandomInteger) == 0x000018, "Member 'ParentZombieAI_C_HeadStunFunc::RandomInteger' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.Hide Bone
// 0x0008 (0x0008 - 0x0000)
struct ParentZombieAI_C_Hide_Bone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_Hide_Bone) == 0x000004, "Wrong alignment on ParentZombieAI_C_Hide_Bone");
static_assert(sizeof(ParentZombieAI_C_Hide_Bone) == 0x000008, "Wrong size on ParentZombieAI_C_Hide_Bone");
static_assert(offsetof(ParentZombieAI_C_Hide_Bone, BoneName) == 0x000000, "Member 'ParentZombieAI_C_Hide_Bone::BoneName' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.HouseBoxEntered
// 0x0008 (0x0008 - 0x0000)
struct ParentZombieAI_C_HouseBoxEntered final
{
public:
	class AHouseBox_C*                            HouseBox;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_HouseBoxEntered) == 0x000008, "Wrong alignment on ParentZombieAI_C_HouseBoxEntered");
static_assert(sizeof(ParentZombieAI_C_HouseBoxEntered) == 0x000008, "Wrong size on ParentZombieAI_C_HouseBoxEntered");
static_assert(offsetof(ParentZombieAI_C_HouseBoxEntered, HouseBox) == 0x000000, "Member 'ParentZombieAI_C_HouseBoxEntered::HouseBox' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.HouseBoxLeaved
// 0x0008 (0x0008 - 0x0000)
struct ParentZombieAI_C_HouseBoxLeaved final
{
public:
	class AHouseBox_C*                            HouseBox;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_HouseBoxLeaved) == 0x000008, "Wrong alignment on ParentZombieAI_C_HouseBoxLeaved");
static_assert(sizeof(ParentZombieAI_C_HouseBoxLeaved) == 0x000008, "Wrong size on ParentZombieAI_C_HouseBoxLeaved");
static_assert(offsetof(ParentZombieAI_C_HouseBoxLeaved, HouseBox) == 0x000000, "Member 'ParentZombieAI_C_HouseBoxLeaved::HouseBox' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.IsPlayingAttackMontage?
// 0x0001 (0x0001 - 0x0000)
struct ParentZombieAI_C_IsPlayingAttackMontage_ final
{
public:
	bool                                          IsPlaying_;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_IsPlayingAttackMontage_) == 0x000001, "Wrong alignment on ParentZombieAI_C_IsPlayingAttackMontage_");
static_assert(sizeof(ParentZombieAI_C_IsPlayingAttackMontage_) == 0x000001, "Wrong size on ParentZombieAI_C_IsPlayingAttackMontage_");
static_assert(offsetof(ParentZombieAI_C_IsPlayingAttackMontage_, IsPlaying_) == 0x000000, "Member 'ParentZombieAI_C_IsPlayingAttackMontage_::IsPlaying_' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.KnockWithChanceFunc
// 0x0038 (0x0038 - 0x0000)
struct ParentZombieAI_C_KnockWithChanceFunc final
{
public:
	EBPE_Weapon_Type                              Selection;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HitAngle;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomInteger;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_KnockWithChanceFunc) == 0x000008, "Wrong alignment on ParentZombieAI_C_KnockWithChanceFunc");
static_assert(sizeof(ParentZombieAI_C_KnockWithChanceFunc) == 0x000038, "Wrong size on ParentZombieAI_C_KnockWithChanceFunc");
static_assert(offsetof(ParentZombieAI_C_KnockWithChanceFunc, Selection) == 0x000000, "Member 'ParentZombieAI_C_KnockWithChanceFunc::Selection' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_KnockWithChanceFunc, HitAngle) == 0x000008, "Member 'ParentZombieAI_C_KnockWithChanceFunc::HitAngle' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_KnockWithChanceFunc, HitLocation) == 0x000010, "Member 'ParentZombieAI_C_KnockWithChanceFunc::HitLocation' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_KnockWithChanceFunc, BoneName) == 0x000028, "Member 'ParentZombieAI_C_KnockWithChanceFunc::BoneName' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_KnockWithChanceFunc, RandomInteger) == 0x000030, "Member 'ParentZombieAI_C_KnockWithChanceFunc::RandomInteger' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.SetSmoothSyncSettings
// 0x0001 (0x0001 - 0x0000)
struct ParentZombieAI_C_SetSmoothSyncSettings final
{
public:
	E_SmoothSynsPrefab                            SmoothSyncPrefab;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_SetSmoothSyncSettings) == 0x000001, "Wrong alignment on ParentZombieAI_C_SetSmoothSyncSettings");
static_assert(sizeof(ParentZombieAI_C_SetSmoothSyncSettings) == 0x000001, "Wrong size on ParentZombieAI_C_SetSmoothSyncSettings");
static_assert(offsetof(ParentZombieAI_C_SetSmoothSyncSettings, SmoothSyncPrefab) == 0x000000, "Member 'ParentZombieAI_C_SetSmoothSyncSettings::SmoothSyncPrefab' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.AIInteract
// 0x0010 (0x0010 - 0x0000)
struct ParentZombieAI_C_AIInteract final
{
public:
	class ABP_Door_C*                             Door;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_AIInteract) == 0x000008, "Wrong alignment on ParentZombieAI_C_AIInteract");
static_assert(sizeof(ParentZombieAI_C_AIInteract) == 0x000010, "Wrong size on ParentZombieAI_C_AIInteract");
static_assert(offsetof(ParentZombieAI_C_AIInteract, Door) == 0x000000, "Member 'ParentZombieAI_C_AIInteract::Door' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_AIInteract, Arrow) == 0x000008, "Member 'ParentZombieAI_C_AIInteract::Arrow' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.IsBandit?
// 0x0001 (0x0001 - 0x0000)
struct ParentZombieAI_C_IsBandit_ final
{
public:
	bool                                          Param_IsBandit_;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_IsBandit_) == 0x000001, "Wrong alignment on ParentZombieAI_C_IsBandit_");
static_assert(sizeof(ParentZombieAI_C_IsBandit_) == 0x000001, "Wrong size on ParentZombieAI_C_IsBandit_");
static_assert(offsetof(ParentZombieAI_C_IsBandit_, Param_IsBandit_) == 0x000000, "Member 'ParentZombieAI_C_IsBandit_::Param_IsBandit_' has a wrong offset!");

// Function ParentZombieAI.ParentZombieAI_C.IsZombie?
// 0x0010 (0x0010 - 0x0000)
struct ParentZombieAI_C_IsZombie_ final
{
public:
	bool                                          Param_IsZombie_;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Zombie;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ParentZombieAI_C_IsZombie_) == 0x000008, "Wrong alignment on ParentZombieAI_C_IsZombie_");
static_assert(sizeof(ParentZombieAI_C_IsZombie_) == 0x000010, "Wrong size on ParentZombieAI_C_IsZombie_");
static_assert(offsetof(ParentZombieAI_C_IsZombie_, Param_IsZombie_) == 0x000000, "Member 'ParentZombieAI_C_IsZombie_::Param_IsZombie_' has a wrong offset!");
static_assert(offsetof(ParentZombieAI_C_IsZombie_, Zombie) == 0x000008, "Member 'ParentZombieAI_C_IsZombie_::Zombie' has a wrong offset!");

}

