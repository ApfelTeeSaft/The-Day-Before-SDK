#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: O_InventoryItem

#include "Basic.hpp"


namespace SDK::Params
{

// Function O_InventoryItem.O_InventoryItem_C.GetCount
// 0x0004 (0x0004 - 0x0000)
struct O_InventoryItem_C_GetCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(O_InventoryItem_C_GetCount) == 0x000004, "Wrong alignment on O_InventoryItem_C_GetCount");
static_assert(sizeof(O_InventoryItem_C_GetCount) == 0x000004, "Wrong size on O_InventoryItem_C_GetCount");
static_assert(offsetof(O_InventoryItem_C_GetCount, Count) == 0x000000, "Member 'O_InventoryItem_C_GetCount::Count' has a wrong offset!");

// Function O_InventoryItem.O_InventoryItem_C.GetSize
// 0x0008 (0x0008 - 0x0000)
struct O_InventoryItem_C_GetSize final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(O_InventoryItem_C_GetSize) == 0x000004, "Wrong alignment on O_InventoryItem_C_GetSize");
static_assert(sizeof(O_InventoryItem_C_GetSize) == 0x000008, "Wrong size on O_InventoryItem_C_GetSize");
static_assert(offsetof(O_InventoryItem_C_GetSize, X) == 0x000000, "Member 'O_InventoryItem_C_GetSize::X' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_GetSize, Y) == 0x000004, "Member 'O_InventoryItem_C_GetSize::Y' has a wrong offset!");

// Function O_InventoryItem.O_InventoryItem_C.IsInSlot
// 0x0034 (0x0034 - 0x0000)
struct O_InventoryItem_C_IsInSlot final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InSlot;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         L_Y;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_X;                                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSize_X;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSize_Y;                                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_2;        // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_3;        // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(O_InventoryItem_C_IsInSlot) == 0x000004, "Wrong alignment on O_InventoryItem_C_IsInSlot");
static_assert(sizeof(O_InventoryItem_C_IsInSlot) == 0x000034, "Wrong size on O_InventoryItem_C_IsInSlot");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, X) == 0x000000, "Member 'O_InventoryItem_C_IsInSlot::X' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, Y) == 0x000004, "Member 'O_InventoryItem_C_IsInSlot::Y' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, InSlot) == 0x000008, "Member 'O_InventoryItem_C_IsInSlot::InSlot' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, L_Y) == 0x00000C, "Member 'O_InventoryItem_C_IsInSlot::L_Y' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, L_X) == 0x000010, "Member 'O_InventoryItem_C_IsInSlot::L_X' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_Less_IntInt_ReturnValue_1) == 0x000015, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_BooleanAND_ReturnValue) == 0x000016, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_GetSize_X) == 0x000018, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_GetSize_X' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_GetSize_Y) == 0x00001C, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_GetSize_Y' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_Less_IntInt_ReturnValue_2) == 0x000025, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x00002C, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_Less_IntInt_ReturnValue_3) == 0x00002D, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_BooleanAND_ReturnValue_1) == 0x00002E, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_GreaterEqual_IntInt_ReturnValue_2) == 0x00002F, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_GreaterEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_BooleanAND_ReturnValue_2) == 0x000030, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_BooleanAND_ReturnValue_3) == 0x000031, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_GreaterEqual_IntInt_ReturnValue_3) == 0x000032, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_GreaterEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_IsInSlot, CallFunc_BooleanOR_ReturnValue) == 0x000033, "Member 'O_InventoryItem_C_IsInSlot::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function O_InventoryItem.O_InventoryItem_C.ItemAddedToInventory
// 0x0010 (0x0010 - 0x0000)
struct O_InventoryItem_C_ItemAddedToInventory final
{
public:
	class UInventoryComponent_C*                  Inventory;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(O_InventoryItem_C_ItemAddedToInventory) == 0x000008, "Wrong alignment on O_InventoryItem_C_ItemAddedToInventory");
static_assert(sizeof(O_InventoryItem_C_ItemAddedToInventory) == 0x000010, "Wrong size on O_InventoryItem_C_ItemAddedToInventory");
static_assert(offsetof(O_InventoryItem_C_ItemAddedToInventory, Inventory) == 0x000000, "Member 'O_InventoryItem_C_ItemAddedToInventory::Inventory' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_ItemAddedToInventory, X) == 0x000008, "Member 'O_InventoryItem_C_ItemAddedToInventory::X' has a wrong offset!");
static_assert(offsetof(O_InventoryItem_C_ItemAddedToInventory, Y) == 0x00000C, "Member 'O_InventoryItem_C_ItemAddedToInventory::Y' has a wrong offset!");

// Function O_InventoryItem.O_InventoryItem_C.SetCount
// 0x0004 (0x0004 - 0x0000)
struct O_InventoryItem_C_SetCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(O_InventoryItem_C_SetCount) == 0x000004, "Wrong alignment on O_InventoryItem_C_SetCount");
static_assert(sizeof(O_InventoryItem_C_SetCount) == 0x000004, "Wrong size on O_InventoryItem_C_SetCount");
static_assert(offsetof(O_InventoryItem_C_SetCount, Count) == 0x000000, "Member 'O_InventoryItem_C_SetCount::Count' has a wrong offset!");

}

