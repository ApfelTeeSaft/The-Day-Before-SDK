#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelStreamer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_PlayersArray_structs.hpp"
#include "Survival_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass LevelStreamer.LevelStreamer_C
// 0x00F0 (0x03B0 - 0x02C0)
class ALevelStreamer_C final : public ALevelLoadDetector
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FS_PlayersArray>     LoadedLevels;                                      // 0x02D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnLevelLoaded_0;                                   // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLevelUnloaded_0;                                 // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUserDefinedCaptureProtocol*            NewVar_0;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UStreamingLevelEventHandler_C*>  EventHandlers;                                     // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   StarterMap;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           InitLevelQueue;                                    // 0x0360(0x0010)(Edit, BlueprintVisible)
	TArray<class APlayerPlaceholder_C*>           PlaceholderPlayers;                                // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         QueueIndex;                                        // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LevelsPending;                                     // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnAllLevelsLoaded;                                 // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Loaded;                                            // 0x0398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RessurrectCD;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           DataLayersArray;                                   // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CheckForLoadingLevels();
	void ExecuteUbergraph_LevelStreamer(int32 EntryPoint);
	void InitLoading(class FName LevelName);
	void IsLevelLoaded(bool* Result);
	void LevelLoaded(const class FName& LevelName, class AActor* Player);
	void LevelUnloaded(class FName LevelName, class AActor* Player);
	void LoadFromPlaceholder(class APlayerPlaceholder_C* PlaceholderPlayer, class FName LevelName);
	void LoadLevel_private(class FName Param_Name);
	void LoadLevelsFromQueue();
	void OnAAA(class FName Param_Name);
	void OnAllLevelsLoaded__DelegateSignature();
	void OnBBB(class FName Param_Name);
	void OnClientLoaded();
	void OnLevelLoaded_0__DelegateSignature(class FName LevelName);
	void OnLevelUnloaded_0__DelegateSignature(class FName LevelName);
	void ReceiveBeginPlay();
	void RunLoading();
	void UnloadLevel_private(class FName LevelName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LevelStreamer_C">();
	}
	static class ALevelStreamer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelStreamer_C>();
	}
};
static_assert(alignof(ALevelStreamer_C) == 0x000008, "Wrong alignment on ALevelStreamer_C");
static_assert(sizeof(ALevelStreamer_C) == 0x0003B0, "Wrong size on ALevelStreamer_C");
static_assert(offsetof(ALevelStreamer_C, UberGraphFrame) == 0x0002C0, "Member 'ALevelStreamer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, DefaultSceneRoot) == 0x0002C8, "Member 'ALevelStreamer_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, LoadedLevels) == 0x0002D0, "Member 'ALevelStreamer_C::LoadedLevels' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, OnLevelLoaded_0) == 0x000320, "Member 'ALevelStreamer_C::OnLevelLoaded_0' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, OnLevelUnloaded_0) == 0x000330, "Member 'ALevelStreamer_C::OnLevelUnloaded_0' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, NewVar_0) == 0x000340, "Member 'ALevelStreamer_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, EventHandlers) == 0x000348, "Member 'ALevelStreamer_C::EventHandlers' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, StarterMap) == 0x000358, "Member 'ALevelStreamer_C::StarterMap' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, InitLevelQueue) == 0x000360, "Member 'ALevelStreamer_C::InitLevelQueue' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, PlaceholderPlayers) == 0x000370, "Member 'ALevelStreamer_C::PlaceholderPlayers' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, QueueIndex) == 0x000380, "Member 'ALevelStreamer_C::QueueIndex' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, LevelsPending) == 0x000384, "Member 'ALevelStreamer_C::LevelsPending' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, OnAllLevelsLoaded) == 0x000388, "Member 'ALevelStreamer_C::OnAllLevelsLoaded' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, Loaded) == 0x000398, "Member 'ALevelStreamer_C::Loaded' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, RessurrectCD) == 0x00039C, "Member 'ALevelStreamer_C::RessurrectCD' has a wrong offset!");
static_assert(offsetof(ALevelStreamer_C, DataLayersArray) == 0x0003A0, "Member 'ALevelStreamer_C::DataLayersArray' has a wrong offset!");

}

