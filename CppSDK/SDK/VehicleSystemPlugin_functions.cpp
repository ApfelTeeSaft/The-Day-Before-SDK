#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "VehicleSystemPlugin_classes.hpp"
#include "VehicleSystemPlugin_parameters.hpp"


namespace SDK
{

// Function VehicleSystemPlugin.VehicleConstraint.SetLinearSoftConstraint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    SoftConstraint                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Stiffness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Damping                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleConstraint::SetLinearSoftConstraint(bool SoftConstraint, float Stiffness, float Damping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleConstraint", "SetLinearSoftConstraint");

	Params::VehicleConstraint_SetLinearSoftConstraint Parms{};

	Parms.SoftConstraint = SoftConstraint;
	Parms.Stiffness = Stiffness;
	Parms.Damping = Damping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.AVS_Tick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleSystemBase::AVS_Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "AVS_Tick");

	Params::VehicleSystemBase_AVS_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleSystemPlugin.VehicleSystemBase.BlueprintDebugMessage
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleSystemBase::BlueprintDebugMessage(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "BlueprintDebugMessage");

	Params::VehicleSystemBase_BlueprintDebugMessage Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleSystemPlugin.VehicleSystemBase.Client_ReceiveNetState
// (Net, Native, Event, NetMulticast, Protected, NetValidate)
// Parameters:
// struct FNetState                        State                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AVehicleSystemBase::Client_ReceiveNetState(const struct FNetState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "Client_ReceiveNetState");

	Params::VehicleSystemBase_Client_ReceiveNetState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.DeterminePassiveState
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVehicleSystemBase::DeterminePassiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "DeterminePassiveState");

	Params::VehicleSystemBase_DeterminePassiveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemBase.GetMaxSteeringFromCurve
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AVehicleSystemBase::GetMaxSteeringFromCurve(float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "GetMaxSteeringFromCurve");

	Params::VehicleSystemBase_GetMaxSteeringFromCurve Parms{};

	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemBase.Multicast_ChangedOwner
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)

void AVehicleSystemBase::Multicast_ChangedOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "Multicast_ChangedOwner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.NetStateSend
// (Final, Native, Protected)

void AVehicleSystemBase::NetStateSend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "NetStateSend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.OnRep_RestState
// (Final, Native, Protected)

void AVehicleSystemBase::OnRep_RestState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "OnRep_RestState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.OwnerChanged
// (Event, Protected, BlueprintEvent)

void AVehicleSystemBase::OwnerChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "OwnerChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleSystemPlugin.VehicleSystemBase.PassiveStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    NewPassiveState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleSystemBase::PassiveStateChanged(bool NewPassiveState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "PassiveStateChanged");

	Params::VehicleSystemBase_PassiveStateChanged Parms{};

	Parms.NewPassiveState = NewPassiveState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleSystemPlugin.VehicleSystemBase.PassiveTickBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleSystemBase::PassiveTickBP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "PassiveTickBP");

	Params::VehicleSystemBase_PassiveTickBP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function VehicleSystemPlugin.VehicleSystemBase.PhysicsThreadInputs
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// struct FAVS_Inputs                      NewInputs                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AVehicleSystemBase::PhysicsThreadInputs(const struct FAVS_Inputs& NewInputs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "PhysicsThreadInputs");

	Params::VehicleSystemBase_PhysicsThreadInputs Parms{};

	Parms.NewInputs = std::move(NewInputs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.Server_ReceiveNetState
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FNetState                        State                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AVehicleSystemBase::Server_ReceiveNetState(const struct FNetState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "Server_ReceiveNetState");

	Params::VehicleSystemBase_Server_ReceiveNetState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.Server_ReceiveRestState
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FNetState                        State                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void AVehicleSystemBase::Server_ReceiveRestState(const struct FNetState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "Server_ReceiveRestState");

	Params::VehicleSystemBase_Server_ReceiveRestState Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.SetArrayDisabledCollisions
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class UPrimitiveComponent*>      Meshes                                                 (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AVehicleSystemBase::SetArrayDisabledCollisions(const TArray<class UPrimitiveComponent*>& Meshes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "SetArrayDisabledCollisions");

	Params::VehicleSystemBase_SetArrayDisabledCollisions Parms{};

	Parms.Meshes = std::move(Meshes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemBase.SetShouldSyncWithServer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ShouldSync                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVehicleSystemBase::SetShouldSyncWithServer(bool ShouldSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "SetShouldSyncWithServer");

	Params::VehicleSystemBase_SetShouldSyncWithServer Parms{};

	Parms.ShouldSync = ShouldSync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.TeleportWheels
// (Event, Protected, BlueprintEvent)

void AVehicleSystemBase::TeleportWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "TeleportWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function VehicleSystemPlugin.VehicleSystemBase.UpdateInternalWheelArray
// (Final, Native, Protected, BlueprintCallable)

void AVehicleSystemBase::UpdateInternalWheelArray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "UpdateInternalWheelArray");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemBase.WakeWheelsForMovement
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void AVehicleSystemBase::WakeWheelsForMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleSystemBase", "WakeWheelsForMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddForce
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAccelChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_ChaosAddForce(class UPrimitiveComponent* Target, const struct FVector& Force, bool bAccelChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosAddForce");

	Params::VehicleSystemFunctions_AVS_ChaosAddForce Parms{};

	Parms.Target = Target;
	Parms.Force = std::move(Force);
	Parms.bAccelChange = bAccelChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddForceAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_ChaosAddForceAtLocation(class UPrimitiveComponent* Target, const struct FVector& Location, const struct FVector& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosAddForceAtLocation");

	Params::VehicleSystemFunctions_AVS_ChaosAddForceAtLocation Parms{};

	Parms.Target = Target;
	Parms.Location = std::move(Location);
	Parms.Force = std::move(Force);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddTorque
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Torque                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAccelChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_ChaosAddTorque(class UPrimitiveComponent* Target, const struct FVector& Torque, bool bAccelChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosAddTorque");

	Params::VehicleSystemFunctions_AVS_ChaosAddTorque Parms{};

	Parms.Target = Target;
	Parms.Torque = std::move(Torque);
	Parms.bAccelChange = bAccelChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddWheelTorque
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Torque                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAccelChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_ChaosAddWheelTorque(class UPrimitiveComponent* Target, float Torque, bool bAccelChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosAddWheelTorque");

	Params::VehicleSystemFunctions_AVS_ChaosAddWheelTorque Parms{};

	Parms.Target = Target;
	Parms.Torque = Torque;
	Parms.bAccelChange = bAccelChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosBrakes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BrakePower                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChaosDelta                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_ChaosBrakes(class UPrimitiveComponent* Target, float BrakePower, float ChaosDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosBrakes");

	Params::VehicleSystemFunctions_AVS_ChaosBrakes Parms{};

	Parms.Target = Target;
	Parms.BrakePower = BrakePower;
	Parms.ChaosDelta = ChaosDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosGetVelocityAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVehicleSystemFunctions::AVS_ChaosGetVelocityAtLocation(class UPrimitiveComponent* Component, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosGetVelocityAtLocation");

	Params::VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation Parms{};

	Parms.Component = Component;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosSetWheelAngularVelocity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngVel                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_ChaosSetWheelAngularVelocity(class UPrimitiveComponent* Target, float AngVel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_ChaosSetWheelAngularVelocity");

	Params::VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity Parms{};

	Parms.Target = Target;
	Parms.AngVel = AngVel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_GetChaosTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UVehicleSystemFunctions::AVS_GetChaosTransform(class UPrimitiveComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_GetChaosTransform");

	Params::VehicleSystemFunctions_AVS_GetChaosTransform Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_SetWheelAngularVelocity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngVel                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::AVS_SetWheelAngularVelocity(class UPrimitiveComponent* Target, float AngVel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "AVS_SetWheelAngularVelocity");

	Params::VehicleSystemFunctions_AVS_SetWheelAngularVelocity Parms{};

	Parms.Target = Target;
	Parms.AngVel = AngVel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshCenterOfMass
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVehicleSystemFunctions::GetMeshCenterOfMass(class UPrimitiveComponent* Target, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "GetMeshCenterOfMass");

	Params::VehicleSystemFunctions_GetMeshCenterOfMass Parms{};

	Parms.Target = Target;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshDiameter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleSystemFunctions::GetMeshDiameter(class UPrimitiveComponent* Target, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "GetMeshDiameter");

	Params::VehicleSystemFunctions_GetMeshDiameter Parms{};

	Parms.Target = Target;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshRadius
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleSystemFunctions::GetMeshRadius(class UPrimitiveComponent* Target, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "GetMeshRadius");

	Params::VehicleSystemFunctions_GetMeshRadius Parms{};

	Parms.Target = Target;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.GetPluginVersion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVehicleSystemFunctions::GetPluginVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "GetPluginVersion");

	Params::VehicleSystemFunctions_GetPluginVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.GetUnrealEngineVersion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Major                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Patch                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::GetUnrealEngineVersion(int32* Major, int32* Minor, int32* Patch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "GetUnrealEngineVersion");

	Params::VehicleSystemFunctions_GetUnrealEngineVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Major != nullptr)
		*Major = Parms.Major;

	if (Minor != nullptr)
		*Minor = Parms.Minor;

	if (Patch != nullptr)
		*Patch = Parms.Patch;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.GetWheelInertia
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MassKg                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RadiusCm                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleSystemFunctions::GetWheelInertia(class UPrimitiveComponent* Target, float MassKg, float RadiusCm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "GetWheelInertia");

	Params::VehicleSystemFunctions_GetWheelInertia Parms{};

	Parms.Target = Target;
	Parms.MassKg = MassKg;
	Parms.RadiusCm = RadiusCm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.LinearSpeedToRads
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  Cm_per_sec                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UVehicleSystemFunctions::LinearSpeedToRads(double Cm_per_sec, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "LinearSpeedToRads");

	Params::VehicleSystemFunctions_LinearSpeedToRads Parms{};

	Parms.Cm_per_sec = Cm_per_sec;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.PrintToScreenWithTag
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     TextColor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::PrintToScreenWithTag(const class FString& InString, const struct FLinearColor& TextColor, float Duration, int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "PrintToScreenWithTag");

	Params::VehicleSystemFunctions_PrintToScreenWithTag Parms{};

	Parms.InString = std::move(InString);
	Parms.TextColor = std::move(TextColor);
	Parms.Duration = Duration;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInEditor_World
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleSystemFunctions::RunningInEditor_World(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "RunningInEditor_World");

	Params::VehicleSystemFunctions_RunningInEditor_World Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInGame_World
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleSystemFunctions::RunningInGame_World(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "RunningInGame_World");

	Params::VehicleSystemFunctions_RunningInGame_World Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInPIE_World
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleSystemFunctions::RunningInPIE_World(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "RunningInPIE_World");

	Params::VehicleSystemFunctions_RunningInPIE_World Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.SetAngularDamping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDamping                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::SetAngularDamping(class UPrimitiveComponent* Target, float InDamping, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "SetAngularDamping");

	Params::VehicleSystemFunctions_SetAngularDamping Parms{};

	Parms.Target = Target;
	Parms.InDamping = InDamping;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleSystemFunctions.SetLinearDamping
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDamping                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleSystemFunctions::SetLinearDamping(class UPrimitiveComponent* Target, float InDamping, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VehicleSystemFunctions", "SetLinearDamping");

	Params::VehicleSystemFunctions_SetLinearDamping Parms{};

	Parms.Target = Target;
	Parms.InDamping = InDamping;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetHasContact
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleWheelBase::GetHasContact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetHasContact");

	Params::VehicleWheelBase_GetHasContact Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetSteeringAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleWheelBase::GetSteeringAngle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetSteeringAngle");

	Params::VehicleWheelBase_GetSteeringAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetSteeringInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleWheelBase::GetSteeringInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetSteeringInput");

	Params::VehicleWheelBase_GetSteeringInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetWheelAngVelInRadians
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVehicleWheelBase::GetWheelAngVelInRadians()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetWheelAngVelInRadians");

	Params::VehicleWheelBase_GetWheelAngVelInRadians Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetWheelMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EWheelMode                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWheelMode UVehicleWheelBase::GetWheelMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetWheelMode");

	Params::VehicleWheelBase_GetWheelMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetWheelVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    Local                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UVehicleWheelBase::GetWheelVelocity(bool Local)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetWheelVelocity");

	Params::VehicleWheelBase_GetWheelVelocity Parms{};

	Parms.Local = Local;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.ResetWheelCollisions
// (Final, Native, Public, BlueprintCallable)

void UVehicleWheelBase::ResetWheelCollisions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "ResetWheelCollisions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.SetIsSimulatingSuspension
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewSimulate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleWheelBase::SetIsSimulatingSuspension(bool NewSimulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "SetIsSimulatingSuspension");

	Params::VehicleWheelBase_SetIsSimulatingSuspension Parms{};

	Parms.NewSimulate = NewSimulate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.SetRaycastWheelMass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewMass                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleWheelBase::SetRaycastWheelMass(float NewMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "SetRaycastWheelMass");

	Params::VehicleWheelBase_SetRaycastWheelMass Parms{};

	Parms.NewMass = NewMass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.SetSteeringInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Steering                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InvertSteering                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleWheelBase::SetSteeringInput(float Steering, bool InvertSteering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "SetSteeringInput");

	Params::VehicleWheelBase_SetSteeringInput Parms{};

	Parms.Steering = Steering;
	Parms.InvertSteering = InvertSteering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.SetWheelMeshComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              NewComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleWheelBase::SetWheelMeshComponent(class UPrimitiveComponent* NewComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "SetWheelMeshComponent");

	Params::VehicleWheelBase_SetWheelMeshComponent Parms{};

	Parms.NewComponent = NewComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.SetWheelMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWheelMode                              NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVehicleWheelBase::SetWheelMode(EWheelMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "SetWheelMode");

	Params::VehicleWheelBase_SetWheelMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.UpdateLocalTransformCache
// (Final, Native, Protected, BlueprintCallable)

void UVehicleWheelBase::UpdateLocalTransformCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "UpdateLocalTransformCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.UpdateWheelRadius
// (Final, Native, Protected, BlueprintCallable)

void UVehicleWheelBase::UpdateWheelRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "UpdateWheelRadius");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetIsAttached
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleWheelBase::GetIsAttached() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetIsAttached");

	Params::VehicleWheelBase_GetIsAttached Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VehicleSystemPlugin.VehicleWheelBase.GetIsSimulatingSuspension
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVehicleWheelBase::GetIsSimulatingSuspension() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VehicleWheelBase", "GetIsSimulatingSuspension");

	Params::VehicleWheelBase_GetIsSimulatingSuspension Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

