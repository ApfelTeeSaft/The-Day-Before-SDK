#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GeneralInterface

#include "Basic.hpp"

#include "FItemInfo_structs.hpp"


namespace SDK::Params
{

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.CallLootAnim
// 0x0010 (0x0010 - 0x0000)
struct BPI_GeneralInterface_C_CallLootAnim final
{
public:
	double                                        LootingHeight;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LootPointOpened;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_CallLootAnim) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_CallLootAnim");
static_assert(sizeof(BPI_GeneralInterface_C_CallLootAnim) == 0x000010, "Wrong size on BPI_GeneralInterface_C_CallLootAnim");
static_assert(offsetof(BPI_GeneralInterface_C_CallLootAnim, LootingHeight) == 0x000000, "Member 'BPI_GeneralInterface_C_CallLootAnim::LootingHeight' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_CallLootAnim, LootPointOpened) == 0x000008, "Member 'BPI_GeneralInterface_C_CallLootAnim::LootPointOpened' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.Craft
// 0x0008 (0x0008 - 0x0000)
struct BPI_GeneralInterface_C_Craft final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_Craft) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_Craft");
static_assert(sizeof(BPI_GeneralInterface_C_Craft) == 0x000008, "Wrong size on BPI_GeneralInterface_C_Craft");
static_assert(offsetof(BPI_GeneralInterface_C_Craft, Player) == 0x000000, "Member 'BPI_GeneralInterface_C_Craft::Player' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.GI_TileLoaded
// 0x0008 (0x0008 - 0x0000)
struct BPI_GeneralInterface_C_GI_TileLoaded final
{
public:
	class FName                                   TileName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_GI_TileLoaded) == 0x000004, "Wrong alignment on BPI_GeneralInterface_C_GI_TileLoaded");
static_assert(sizeof(BPI_GeneralInterface_C_GI_TileLoaded) == 0x000008, "Wrong size on BPI_GeneralInterface_C_GI_TileLoaded");
static_assert(offsetof(BPI_GeneralInterface_C_GI_TileLoaded, TileName) == 0x000000, "Member 'BPI_GeneralInterface_C_GI_TileLoaded::TileName' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.GI_TileUnloaded
// 0x0008 (0x0008 - 0x0000)
struct BPI_GeneralInterface_C_GI_TileUnloaded final
{
public:
	class FName                                   TileName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_GI_TileUnloaded) == 0x000004, "Wrong alignment on BPI_GeneralInterface_C_GI_TileUnloaded");
static_assert(sizeof(BPI_GeneralInterface_C_GI_TileUnloaded) == 0x000008, "Wrong size on BPI_GeneralInterface_C_GI_TileUnloaded");
static_assert(offsetof(BPI_GeneralInterface_C_GI_TileUnloaded, TileName) == 0x000000, "Member 'BPI_GeneralInterface_C_GI_TileUnloaded::TileName' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.HeatUpBonfire
// 0x0008 (0x0008 - 0x0000)
struct BPI_GeneralInterface_C_HeatUpBonfire final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_HeatUpBonfire) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_HeatUpBonfire");
static_assert(sizeof(BPI_GeneralInterface_C_HeatUpBonfire) == 0x000008, "Wrong size on BPI_GeneralInterface_C_HeatUpBonfire");
static_assert(offsetof(BPI_GeneralInterface_C_HeatUpBonfire, Player) == 0x000000, "Member 'BPI_GeneralInterface_C_HeatUpBonfire::Player' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.Interact
// 0x0001 (0x0001 - 0x0000)
struct BPI_GeneralInterface_C_Interact final
{
public:
	bool                                          NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_Interact) == 0x000001, "Wrong alignment on BPI_GeneralInterface_C_Interact");
static_assert(sizeof(BPI_GeneralInterface_C_Interact) == 0x000001, "Wrong size on BPI_GeneralInterface_C_Interact");
static_assert(offsetof(BPI_GeneralInterface_C_Interact, NewParam) == 0x000000, "Member 'BPI_GeneralInterface_C_Interact::NewParam' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.IsInWater
// 0x0001 (0x0001 - 0x0000)
struct BPI_GeneralInterface_C_IsInWater final
{
public:
	bool                                          InWater;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_IsInWater) == 0x000001, "Wrong alignment on BPI_GeneralInterface_C_IsInWater");
static_assert(sizeof(BPI_GeneralInterface_C_IsInWater) == 0x000001, "Wrong size on BPI_GeneralInterface_C_IsInWater");
static_assert(offsetof(BPI_GeneralInterface_C_IsInWater, InWater) == 0x000000, "Member 'BPI_GeneralInterface_C_IsInWater::InWater' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct BPI_GeneralInterface_C_IsPlayer final
{
public:
	bool                                          Param_IsPlayer;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_IsPlayer) == 0x000001, "Wrong alignment on BPI_GeneralInterface_C_IsPlayer");
static_assert(sizeof(BPI_GeneralInterface_C_IsPlayer) == 0x000001, "Wrong size on BPI_GeneralInterface_C_IsPlayer");
static_assert(offsetof(BPI_GeneralInterface_C_IsPlayer, Param_IsPlayer) == 0x000000, "Member 'BPI_GeneralInterface_C_IsPlayer::Param_IsPlayer' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.OpenDoorRPC
// 0x0010 (0x0010 - 0x0000)
struct BPI_GeneralInterface_C_OpenDoorRPC final
{
public:
	class ABP_Door_C*                             Door;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpen;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_OpenDoorRPC) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_OpenDoorRPC");
static_assert(sizeof(BPI_GeneralInterface_C_OpenDoorRPC) == 0x000010, "Wrong size on BPI_GeneralInterface_C_OpenDoorRPC");
static_assert(offsetof(BPI_GeneralInterface_C_OpenDoorRPC, Door) == 0x000000, "Member 'BPI_GeneralInterface_C_OpenDoorRPC::Door' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_OpenDoorRPC, IsOpen) == 0x000008, "Member 'BPI_GeneralInterface_C_OpenDoorRPC::IsOpen' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.OpenLootRPC
// 0x0008 (0x0008 - 0x0000)
struct BPI_GeneralInterface_C_OpenLootRPC final
{
public:
	class ALootPoint_C*                           LootPoint;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_OpenLootRPC) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_OpenLootRPC");
static_assert(sizeof(BPI_GeneralInterface_C_OpenLootRPC) == 0x000008, "Wrong size on BPI_GeneralInterface_C_OpenLootRPC");
static_assert(offsetof(BPI_GeneralInterface_C_OpenLootRPC, LootPoint) == 0x000000, "Member 'BPI_GeneralInterface_C_OpenLootRPC::LootPoint' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerAddItem
// 0x0230 (0x0230 - 0x0000)
struct BPI_GeneralInterface_C_PlayerAddItem final
{
public:
	struct FFItemInfo                             ItemInfo;                                          // 0x0000(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class UWBP_AttachmentCell_C*                  ActiveCell;                                        // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0228(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_PlayerAddItem) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_PlayerAddItem");
static_assert(sizeof(BPI_GeneralInterface_C_PlayerAddItem) == 0x000230, "Wrong size on BPI_GeneralInterface_C_PlayerAddItem");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerAddItem, ItemInfo) == 0x000000, "Member 'BPI_GeneralInterface_C_PlayerAddItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerAddItem, ActiveCell) == 0x000220, "Member 'BPI_GeneralInterface_C_PlayerAddItem::ActiveCell' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerAddItem, Added) == 0x000228, "Member 'BPI_GeneralInterface_C_PlayerAddItem::Added' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerCanisterAction
// 0x0010 (0x0010 - 0x0000)
struct BPI_GeneralInterface_C_PlayerCanisterAction final
{
public:
	bool                                          Attach;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Canister_C*                         Canister;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_PlayerCanisterAction) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_PlayerCanisterAction");
static_assert(sizeof(BPI_GeneralInterface_C_PlayerCanisterAction) == 0x000010, "Wrong size on BPI_GeneralInterface_C_PlayerCanisterAction");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerCanisterAction, Attach) == 0x000000, "Member 'BPI_GeneralInterface_C_PlayerCanisterAction::Attach' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerCanisterAction, Canister) == 0x000008, "Member 'BPI_GeneralInterface_C_PlayerCanisterAction::Canister' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerGetMesh
// 0x0008 (0x0008 - 0x0000)
struct BPI_GeneralInterface_C_PlayerGetMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_PlayerGetMesh) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_PlayerGetMesh");
static_assert(sizeof(BPI_GeneralInterface_C_PlayerGetMesh) == 0x000008, "Wrong size on BPI_GeneralInterface_C_PlayerGetMesh");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerGetMesh, Mesh) == 0x000000, "Member 'BPI_GeneralInterface_C_PlayerGetMesh::Mesh' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerItemCountByName
// 0x0018 (0x0018 - 0x0000)
struct BPI_GeneralInterface_C_PlayerItemCountByName final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_PlayerItemCountByName) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_PlayerItemCountByName");
static_assert(sizeof(BPI_GeneralInterface_C_PlayerItemCountByName) == 0x000018, "Wrong size on BPI_GeneralInterface_C_PlayerItemCountByName");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerItemCountByName, ItemName) == 0x000000, "Member 'BPI_GeneralInterface_C_PlayerItemCountByName::ItemName' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_PlayerItemCountByName, Count) == 0x000010, "Member 'BPI_GeneralInterface_C_PlayerItemCountByName::Count' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.SetEnableSmoothSync
// 0x0002 (0x0002 - 0x0000)
struct BPI_GeneralInterface_C_SetEnableSmoothSync final
{
public:
	bool                                          NewEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_SetEnableSmoothSync) == 0x000001, "Wrong alignment on BPI_GeneralInterface_C_SetEnableSmoothSync");
static_assert(sizeof(BPI_GeneralInterface_C_SetEnableSmoothSync) == 0x000002, "Wrong size on BPI_GeneralInterface_C_SetEnableSmoothSync");
static_assert(offsetof(BPI_GeneralInterface_C_SetEnableSmoothSync, NewEnable) == 0x000000, "Member 'BPI_GeneralInterface_C_SetEnableSmoothSync::NewEnable' has a wrong offset!");
static_assert(offsetof(BPI_GeneralInterface_C_SetEnableSmoothSync, Success) == 0x000001, "Member 'BPI_GeneralInterface_C_SetEnableSmoothSync::Success' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.SetPlayerCollisionInCar
// 0x0001 (0x0001 - 0x0000)
struct BPI_GeneralInterface_C_SetPlayerCollisionInCar final
{
public:
	bool                                          NewEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_SetPlayerCollisionInCar) == 0x000001, "Wrong alignment on BPI_GeneralInterface_C_SetPlayerCollisionInCar");
static_assert(sizeof(BPI_GeneralInterface_C_SetPlayerCollisionInCar) == 0x000001, "Wrong size on BPI_GeneralInterface_C_SetPlayerCollisionInCar");
static_assert(offsetof(BPI_GeneralInterface_C_SetPlayerCollisionInCar, NewEnable) == 0x000000, "Member 'BPI_GeneralInterface_C_SetPlayerCollisionInCar::NewEnable' has a wrong offset!");

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.ShowSimpleUIText
// 0x0010 (0x0010 - 0x0000)
struct BPI_GeneralInterface_C_ShowSimpleUIText final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GeneralInterface_C_ShowSimpleUIText) == 0x000008, "Wrong alignment on BPI_GeneralInterface_C_ShowSimpleUIText");
static_assert(sizeof(BPI_GeneralInterface_C_ShowSimpleUIText) == 0x000010, "Wrong size on BPI_GeneralInterface_C_ShowSimpleUIText");
static_assert(offsetof(BPI_GeneralInterface_C_ShowSimpleUIText, String) == 0x000000, "Member 'BPI_GeneralInterface_C_ShowSimpleUIText::String' has a wrong offset!");

}

