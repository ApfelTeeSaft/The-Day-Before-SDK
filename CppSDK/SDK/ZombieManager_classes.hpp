#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZombieManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Survival_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ZombieManager.ZombieManager_C
// 0x0098 (0x0328 - 0x0290)
class AZombieManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class AZombie_C*>                      AllZombies;                                        // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 ActiveZombiesIndexes;                              // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         AmountOfZombieOnServer;                            // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountOfSpawnedZombie;                             // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpawningTimer;                                     // 0x02C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AZombie_C*>                      ActiveZombies;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          BlockSpawn;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockAI;                                           // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DeactivateAIKeyName;                               // 0x02E4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckPlayersTimer;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NoPlayers;                                         // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxAmountOfZombiesOnServer;                        // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeactivatedAI;                                     // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SleepingZombiesCount;                              // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InvisibleZombieKills;                              // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AZombie_C*>                      InvisibleZombieBlueprints;                         // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxCityZombiesAmount;                              // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCityZombiesAmount;                          // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateAI();
	void Check_Players();
	void DeactivateAI();
	void ExecuteUbergraph_ZombieManager(int32 EntryPoint);
	void Get_Dead_Zombies_Amount(int32* DeadZombiesAmount);
	void Get_Free_Zombie_Index(bool IsCityZombie, int32* FreeIndex);
	void Get_Sleeping_Zombies_Amount(int32* SleepingZombiesAmount);
	void GetActiveZombies(TArray<class AZombie_C*>* Param_ActiveZombies);
	void GetActiveZombiesAmount(int32* ZombiesAmount);
	void GetAllZombies(TArray<class AZombie_C*>* Param_AllZombies);
	bool GetDeactivatedAI();
	void GetInvisibleZombieBlueprintsCount(int32* NewParam);
	void IsSpawnBlocked(bool* IsBlocked);
	void KillAllActiveZombies(class AController* InstigatedBy);
	void ReceiveBeginPlay();
	void RequestSpawnOfZombie(int32 MeshType, EZombieType Type, EZombieAnimType AnimType, const struct FVector& Location, const struct FRotator& Rotation, const TSet<class UQuest*>& Quests, class ABP_Door_C*& ConnectedDoor, TArray<class ATargetPoint*>& PatrollingPath, bool IsCityZombie, class AZombie_C** SpawnedZombie);
	void ResetZombie(int32 ZombieManagerIndex, class AZombie_C* ZombieRef, bool IsCityZombie);
	void SetMaxZombiesOnServer(int32 Param_MaxAmountOfZombiesOnServer);
	void SpawnerRequest(int32 AmountOfZombie);
	void SpawnZombie();
	void ToggleBlockSpawn();
	void ToggleZombieAI();
	void UpdateInvisibleStat(const class AZombie_C*& KilledZombie);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ZombieManager_C">();
	}
	static class AZombieManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZombieManager_C>();
	}
};
static_assert(alignof(AZombieManager_C) == 0x000008, "Wrong alignment on AZombieManager_C");
static_assert(sizeof(AZombieManager_C) == 0x000328, "Wrong size on AZombieManager_C");
static_assert(offsetof(AZombieManager_C, UberGraphFrame) == 0x000290, "Member 'AZombieManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, DefaultSceneRoot) == 0x000298, "Member 'AZombieManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, AllZombies) == 0x0002A0, "Member 'AZombieManager_C::AllZombies' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, ActiveZombiesIndexes) == 0x0002B0, "Member 'AZombieManager_C::ActiveZombiesIndexes' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, AmountOfZombieOnServer) == 0x0002C0, "Member 'AZombieManager_C::AmountOfZombieOnServer' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, AmountOfSpawnedZombie) == 0x0002C4, "Member 'AZombieManager_C::AmountOfSpawnedZombie' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, SpawningTimer) == 0x0002C8, "Member 'AZombieManager_C::SpawningTimer' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, ActiveZombies) == 0x0002D0, "Member 'AZombieManager_C::ActiveZombies' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, BlockSpawn) == 0x0002E0, "Member 'AZombieManager_C::BlockSpawn' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, BlockAI) == 0x0002E1, "Member 'AZombieManager_C::BlockAI' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, DeactivateAIKeyName) == 0x0002E4, "Member 'AZombieManager_C::DeactivateAIKeyName' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, CheckPlayersTimer) == 0x0002F0, "Member 'AZombieManager_C::CheckPlayersTimer' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, NoPlayers) == 0x0002F8, "Member 'AZombieManager_C::NoPlayers' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, MaxAmountOfZombiesOnServer) == 0x0002FC, "Member 'AZombieManager_C::MaxAmountOfZombiesOnServer' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, DeactivatedAI) == 0x000300, "Member 'AZombieManager_C::DeactivatedAI' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, SleepingZombiesCount) == 0x000304, "Member 'AZombieManager_C::SleepingZombiesCount' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, InvisibleZombieKills) == 0x000308, "Member 'AZombieManager_C::InvisibleZombieKills' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, InvisibleZombieBlueprints) == 0x000310, "Member 'AZombieManager_C::InvisibleZombieBlueprints' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, MaxCityZombiesAmount) == 0x000320, "Member 'AZombieManager_C::MaxCityZombiesAmount' has a wrong offset!");
static_assert(offsetof(AZombieManager_C, CurrentCityZombiesAmount) == 0x000324, "Member 'AZombieManager_C::CurrentCityZombiesAmount' has a wrong offset!");

}

