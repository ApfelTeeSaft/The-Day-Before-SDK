#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Weather

#include "Basic.hpp"

#include "Ultra_Dynamic_Weather_classes.hpp"
#include "Ultra_Dynamic_Weather_parameters.hpp"


namespace SDK
{

// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Apply Weather Override Volumes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Apply_Weather_Override_Volumes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Apply Weather Override Volumes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Apply Weather Preset
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Apply_Weather_Preset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Apply Weather Preset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Audio Update
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Audio_Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Audio Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Change Weather Using Settings
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Weather_Intensity                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Cloudiness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Wind_Intensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param__Snow                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_To_Transition_To_New_Settings                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_to_Hold_New_Settings                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_to_Transition_Back_to_Random_Variation            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reset_Particle_Emitters                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Change_Weather_Using_Settings(double Param_Weather_Intensity, double Cloudiness, double Param_Wind_Intensity, double Param__Snow, double Time_To_Transition_To_New_Settings, double Time_to_Hold_New_Settings, double Time_to_Transition_Back_to_Random_Variation, bool Reset_Particle_Emitters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Change Weather Using Settings");

	Params::Ultra_Dynamic_Weather_C_Change_Weather_Using_Settings Parms{};

	Parms.Param_Weather_Intensity = Param_Weather_Intensity;
	Parms.Cloudiness = Cloudiness;
	Parms.Param_Wind_Intensity = Param_Wind_Intensity;
	Parms.Param__Snow = Param__Snow;
	Parms.Time_To_Transition_To_New_Settings = Time_To_Transition_To_New_Settings;
	Parms.Time_to_Hold_New_Settings = Time_to_Hold_New_Settings;
	Parms.Time_to_Transition_Back_to_Random_Variation = Time_to_Transition_Back_to_Random_Variation;
	Parms.Reset_Particle_Emitters = Reset_Particle_Emitters;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Change Weather Using Type
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_WeatherTypes                       New_Weather_Type                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_To_Transition_To_New_Settings                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_to_Hold_New_Settings                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Time_to_Transition_Back_to_Random_Variation            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reset_Particle_Emitters                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Change_Weather_Using_Type(EUDS_WeatherTypes New_Weather_Type, double Time_To_Transition_To_New_Settings, double Time_to_Hold_New_Settings, double Time_to_Transition_Back_to_Random_Variation, bool Reset_Particle_Emitters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Change Weather Using Type");

	Params::Ultra_Dynamic_Weather_C_Change_Weather_Using_Type Parms{};

	Parms.New_Weather_Type = New_Weather_Type;
	Parms.Time_To_Transition_To_New_Settings = Time_To_Transition_To_New_Settings;
	Parms.Time_to_Hold_New_Settings = Time_to_Hold_New_Settings;
	Parms.Time_to_Transition_Back_to_Random_Variation = Time_to_Transition_Back_to_Random_Variation;
	Parms.Reset_Particle_Emitters = Reset_Particle_Emitters;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check for DLWE Recenter
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_for_DLWE_Recenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check for DLWE Recenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check Point for Puddles or Snow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Ground_Normal                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPhysicalMaterial*                Physical_Material                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Puddle_Depth                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Snow_Depth                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Check_Point_for_Puddles_or_Snow(const struct FVector& Location, const struct FVector& Ground_Normal, class UPhysicalMaterial* Physical_Material, double* Puddle_Depth, double* Param_Snow_Depth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check Point for Puddles or Snow");

	Params::Ultra_Dynamic_Weather_C_Check_Point_for_Puddles_or_Snow Parms{};

	Parms.Location = std::move(Location);
	Parms.Ground_Normal = std::move(Ground_Normal);
	Parms.Physical_Material = Physical_Material;

	UObject::ProcessEvent(Func, &Parms);

	if (Puddle_Depth != nullptr)
		*Puddle_Depth = Parms.Puddle_Depth;

	if (Param_Snow_Depth != nullptr)
		*Param_Snow_Depth = Parms.Param_Snow_Depth;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Check to change DLWE Mode
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Check_to_change_DLWE_Mode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Check to change DLWE Mode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Compress DLWE Snow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Compress_DLWE_Snow(const struct FVector& Location, double Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Compress DLWE Snow");

	Params::Ultra_Dynamic_Weather_C_Compress_DLWE_Snow Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = Size;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ConstructionScript_Function
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Run_By_Counterpart                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ConstructionScript_Function(bool Param_Run_By_Counterpart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ConstructionScript_Function");

	Params::Ultra_Dynamic_Weather_C_ConstructionScript_Function Parms{};

	Parms.Param_Run_By_Counterpart = Param_Run_By_Counterpart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Create Cloud Reference Array
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Create_Cloud_Reference_Array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Create Cloud Reference Array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Current Lightning Period and Status
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Weather_Intensity                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Cloud_Coverage                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Snow_Percentage                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Period                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Current_Lightning_Period_and_Status(double Param_Weather_Intensity, double Param_Cloud_Coverage, double Snow_Percentage, double* Period, bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Current Lightning Period and Status");

	Params::Ultra_Dynamic_Weather_C_Current_Lightning_Period_and_Status Parms{};

	Parms.Param_Weather_Intensity = Param_Weather_Intensity;
	Parms.Param_Cloud_Coverage = Param_Cloud_Coverage;
	Parms.Snow_Percentage = Snow_Percentage;

	UObject::ProcessEvent(Func, &Parms);

	if (Period != nullptr)
		*Period = Parms.Period;

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.End Lightning Flash
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::End_Lightning_Flash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "End Lightning Flash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ExecuteUbergraph_Ultra_Dynamic_Weather
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ExecuteUbergraph_Ultra_Dynamic_Weather(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ExecuteUbergraph_Ultra_Dynamic_Weather");

	Params::Ultra_Dynamic_Weather_C_ExecuteUbergraph_Ultra_Dynamic_Weather Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Fade DLWE Target Over Time
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Fade_DLWE_Target_Over_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Fade DLWE Target Over Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Filter Probability Map
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EUDS_WeatherTypes, double>         Probability_Map                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// EUDS_WeatherTypes                       Current_Random_Type                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<EUDS_WeatherTypes, double>         Filtered_Probability_Map                               (Parm, OutParm)

void AUltra_Dynamic_Weather_C::Filter_Probability_Map(const TMap<EUDS_WeatherTypes, double>& Probability_Map, EUDS_WeatherTypes Current_Random_Type, TMap<EUDS_WeatherTypes, double>* Filtered_Probability_Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Filter Probability Map");

	Params::Ultra_Dynamic_Weather_C_Filter_Probability_Map Parms{};

	Parms.Probability_Map = std::move(Probability_Map);
	Parms.Current_Random_Type = Current_Random_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Filtered_Probability_Map != nullptr)
		*Filtered_Probability_Map = std::move(Parms.Filtered_Probability_Map);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Flash Lightning
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Use_Custom_Lightning_Location                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Param_Custom_Lightning_Location                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Flash_Lightning(double Angle, bool Param_Use_Custom_Lightning_Location, const struct FVector& Param_Custom_Lightning_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Flash Lightning");

	Params::Ultra_Dynamic_Weather_C_Flash_Lightning Parms{};

	Parms.Angle = Angle;
	Parms.Param_Use_Custom_Lightning_Location = Param_Use_Custom_Lightning_Location;
	Parms.Param_Custom_Lightning_Location = std::move(Param_Custom_Lightning_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Flash Lightning Local
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AWeather_Override_Volume_C*       Volume                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Flash_Lightning_Local(class AWeather_Override_Volume_C* Volume, double Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Flash Lightning Local");

	Params::Ultra_Dynamic_Weather_C_Flash_Lightning_Local Parms{};

	Parms.Volume = Volume;
	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Force Tick
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Force_Tick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Force Tick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Current Temperature
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Celsius                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Fahrenheit                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Current_Temperature(double* Celsius, double* Fahrenheit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Current Temperature");

	Params::Ultra_Dynamic_Weather_C_Get_Current_Temperature Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Celsius != nullptr)
		*Celsius = Parms.Celsius;

	if (Fahrenheit != nullptr)
		*Fahrenheit = Parms.Fahrenheit;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Current Weather Type
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_WeatherTypes                       Current_Weather_Type                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Current_Weather_Type(EUDS_WeatherTypes* Current_Weather_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Current Weather Type");

	Params::Ultra_Dynamic_Weather_C_Get_Current_Weather_Type Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Weather_Type != nullptr)
		*Current_Weather_Type = Parms.Current_Weather_Type;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Intended Cloud Direction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Intended_Cloud_Direction                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Intended_Cloud_Direction(double* Param_Intended_Cloud_Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Intended Cloud Direction");

	Params::Ultra_Dynamic_Weather_C_Get_Intended_Cloud_Direction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Intended_Cloud_Direction != nullptr)
		*Param_Intended_Cloud_Direction = Parms.Param_Intended_Cloud_Direction;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Intended Cloud Speed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Intended_Cloud_Speed                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Intended_Cloud_Speed(double* Param_Intended_Cloud_Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Intended Cloud Speed");

	Params::Ultra_Dynamic_Weather_C_Get_Intended_Cloud_Speed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Intended_Cloud_Speed != nullptr)
		*Param_Intended_Cloud_Speed = Parms.Param_Intended_Cloud_Speed;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Updated Control Point Location
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Get_Updated_Control_Point_Location()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Updated Control Point Location");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Get Weather Preset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_WeatherTypes                       Preset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Weather_Intensity                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Cloud_Coverage                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param__Snow                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Wind_Intensity                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Material_Wetness                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Material_Snow                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Get_Weather_Preset(EUDS_WeatherTypes Preset, double* Param_Weather_Intensity, double* Param_Cloud_Coverage, double* Param__Snow, double* Param_Wind_Intensity, double* Param_Material_Wetness, double* Material_Snow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Get Weather Preset");

	Params::Ultra_Dynamic_Weather_C_Get_Weather_Preset Parms{};

	Parms.Preset = Preset;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Weather_Intensity != nullptr)
		*Param_Weather_Intensity = Parms.Param_Weather_Intensity;

	if (Param_Cloud_Coverage != nullptr)
		*Param_Cloud_Coverage = Parms.Param_Cloud_Coverage;

	if (Param__Snow != nullptr)
		*Param__Snow = Parms.Param__Snow;

	if (Param_Wind_Intensity != nullptr)
		*Param_Wind_Intensity = Parms.Param_Wind_Intensity;

	if (Param_Material_Wetness != nullptr)
		*Param_Material_Wetness = Parms.Param_Material_Wetness;

	if (Material_Snow != nullptr)
		*Material_Snow = Parms.Material_Snow;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Initialize Weather
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Initialize_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Initialize Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Limit Weather Intensity
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Limit_Weather_Intensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Limit Weather Intensity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Print Current Status To Screen
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Print_Current_Status_To_Screen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Print Current Status To Screen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "ReceiveTick");

	Params::Ultra_Dynamic_Weather_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Recenter DLWE Render Target
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           Render_Target                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ETextureRenderTargetFormat              Format                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Clear_Color                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               EdgeFade_Material                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTextureRenderTarget2D*           New_Target                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Recenter_DLWE_Render_Target(class UTextureRenderTarget2D* Render_Target, ETextureRenderTargetFormat Format, const struct FLinearColor& Clear_Color, class UMaterialInterface* EdgeFade_Material, class UTextureRenderTarget2D** New_Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Recenter DLWE Render Target");

	Params::Ultra_Dynamic_Weather_C_Recenter_DLWE_Render_Target Parms{};

	Parms.Render_Target = Render_Target;
	Parms.Format = Format;
	Parms.Clear_Color = std::move(Clear_Color);
	Parms.EdgeFade_Material = EdgeFade_Material;

	UObject::ProcessEvent(Func, &Parms);

	if (New_Target != nullptr)
		*New_Target = Parms.New_Target;
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Recycle Render Targets
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Recycle_Render_Targets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Recycle Render Targets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Reset All Emitters
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Reset_All_Emitters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Reset All Emitters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Ripple DLWE Puddle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Strength                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Ripple_DLWE_Puddle(const struct FVector& Location, double Size, double Strength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Ripple DLWE Puddle");

	Params::Ultra_Dynamic_Weather_C_Ripple_DLWE_Puddle Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = Size;
	Parms.Strength = Strength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set Current Season
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUDS_Season                             Param_Season                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Set_Current_Season(EUDS_Season Param_Season)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set Current Season");

	Params::Ultra_Dynamic_Weather_C_Set_Current_Season Parms{};

	Parms.Param_Season = Param_Season;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Set up Post Process Wind Fog
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Set_up_Post_Process_Wind_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Set up Post Process Wind Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C. Update DLWE Targets
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    First_Run                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::_Update_DLWE_Targets(bool First_Run)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", " Update DLWE Targets");

	Params::Ultra_Dynamic_Weather_C__Update_DLWE_Targets Parms{};

	Parms.First_Run = First_Run;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Start Client Weather Change
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Transition_State                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Start_Client_Weather_Change(int32 Param_Transition_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Start Client Weather Change");

	Params::Ultra_Dynamic_Weather_C_Start_Client_Weather_Change Parms{};

	Parms.Param_Transition_State = Param_Transition_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Tick Lightning Flash
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Tick_Lightning_Flash()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Tick Lightning Flash");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Active Variables
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Active_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Active Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Audio Component Activity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  Tested_Component                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UAudioComponent*>          Affected_Components                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// double                                  Current_Sound_Intensity                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Start_Randomization                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_Audio_Component_Activity(class UAudioComponent* Tested_Component, TArray<class UAudioComponent*>& Affected_Components, double Current_Sound_Intensity, double Start_Randomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Audio Component Activity");

	Params::Ultra_Dynamic_Weather_C_Update_Audio_Component_Activity Parms{};

	Parms.Tested_Component = Tested_Component;
	Parms.Affected_Components = std::move(Affected_Components);
	Parms.Current_Sound_Intensity = Current_Sound_Intensity;
	Parms.Start_Randomization = Start_Randomization;

	UObject::ProcessEvent(Func, &Parms);

	Affected_Components = std::move(Parms.Affected_Components);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Cloud Coverage from UDS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Cloud_Coverage                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Weather_C::Update_Cloud_Coverage_from_UDS(double Param_Cloud_Coverage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Cloud Coverage from UDS");

	Params::Ultra_Dynamic_Weather_C_Update_Cloud_Coverage_from_UDS Parms{};

	Parms.Param_Cloud_Coverage = Param_Cloud_Coverage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Current Material Effects
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Current_Material_Effects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Current Material Effects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Current Occlusion Profile
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Current_Occlusion_Profile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Current Occlusion Profile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Parameters
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Puddle Ripples
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Puddle_Ripples()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Puddle Ripples");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update DLWE Snow Compressions
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_DLWE_Snow_Compressions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update DLWE Snow Compressions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Enabled Sound Components
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Enabled_Sound_Components()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Enabled Sound Components");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Material Effect Parameters
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Material_Effect_Parameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Material Effect Parameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update New Settings
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_New_Settings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update New Settings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Post Process Wind Fog
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Post_Process_Wind_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Post Process Wind Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Static Variables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Static_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Static Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Target Occlusion Profile
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Target_Occlusion_Profile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Target Occlusion Profile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.Update Wind Direction
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::Update_Wind_Direction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "Update Wind Direction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Weather_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Weather_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

