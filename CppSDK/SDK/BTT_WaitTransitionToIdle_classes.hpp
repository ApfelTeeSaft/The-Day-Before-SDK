#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_WaitTransitionToIdle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTT_WaitTransitionToIdle.BTT_WaitTransitionToIdle_C
// 0x0028 (0x00D0 - 0x00A8)
class UBTT_WaitTransitionToIdle_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AZombie_C*                              Zombie;                                            // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          TransitionAnimationAsset;                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TransitionTimer;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          SleepingTransitionAnimationAsset;                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTT_WaitTransitionToIdle(int32 EntryPoint);
	void OnEndTransition();
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTT_WaitTransitionToIdle_C">();
	}
	static class UBTT_WaitTransitionToIdle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_WaitTransitionToIdle_C>();
	}
};
static_assert(alignof(UBTT_WaitTransitionToIdle_C) == 0x000008, "Wrong alignment on UBTT_WaitTransitionToIdle_C");
static_assert(sizeof(UBTT_WaitTransitionToIdle_C) == 0x0000D0, "Wrong size on UBTT_WaitTransitionToIdle_C");
static_assert(offsetof(UBTT_WaitTransitionToIdle_C, UberGraphFrame) == 0x0000A8, "Member 'UBTT_WaitTransitionToIdle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTT_WaitTransitionToIdle_C, Zombie) == 0x0000B0, "Member 'UBTT_WaitTransitionToIdle_C::Zombie' has a wrong offset!");
static_assert(offsetof(UBTT_WaitTransitionToIdle_C, TransitionAnimationAsset) == 0x0000B8, "Member 'UBTT_WaitTransitionToIdle_C::TransitionAnimationAsset' has a wrong offset!");
static_assert(offsetof(UBTT_WaitTransitionToIdle_C, TransitionTimer) == 0x0000C0, "Member 'UBTT_WaitTransitionToIdle_C::TransitionTimer' has a wrong offset!");
static_assert(offsetof(UBTT_WaitTransitionToIdle_C, SleepingTransitionAnimationAsset) == 0x0000C8, "Member 'UBTT_WaitTransitionToIdle_C::SleepingTransitionAnimationAsset' has a wrong offset!");

}

