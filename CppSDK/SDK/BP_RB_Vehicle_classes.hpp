#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RB_Vehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Survival_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_RBGear_structs.hpp"
#include "S_VehicleState_structs.hpp"
#include "E_SitsType_structs.hpp"
#include "S_VehicleSit_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "E_InteractType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RB_Vehicle.BP_RB_Vehicle_C
// 0x0520 (0x0850 - 0x0330)
class ABP_RB_Vehicle_C final : public ARBVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0330(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       WheelCol_RB;                                       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       WheelCol_LB;                                       // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       WheelCol_RF;                                       // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       WheelCol_LF;                                       // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    Wind;                                              // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URadialForceComponent*                  DestructibleRadialForce;                           // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UATPCCameraComponent*                   ATPCCamera;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RadialForceOverlap;                                // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BodyPercept;                                       // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_SmoothSyncVehicle_C*               BPC_SmoothSyncVehicle;                             // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WindowCollision;                                   // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   BackLightR;                                        // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   BackLightL;                                        // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PC_LF_Steering;                                    // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PC_RF_Steering;                                    // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube_R;                                            // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube_L;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExhaustHolder;                                     // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_VehicleEngineCriticalBroken;                     // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GasolineSocket;                                    // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AudioHolder;                                       // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HitCollision;                                      // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightR;                                            // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightL;                                            // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PC_RB_Axis;                                        // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PC_LB_Axis;                                        // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PC_RF_Axis;                                        // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PC_LF_Axis;                                        // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    WheelsSlide;                                       // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    EngineLoop;                                        // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    WheelsRotate;                                      // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_VehicleUpgrade_C*                  BPC_VehicleUpgrade;                                // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_CarStatsComponent_C*               BPC_CarStatsComponent;                             // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BoostDisableTimeline_CameraAlpha_F7A5E9974275239EF1DB7380A0A3FBF7; // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostDisableTimeline__Direction_F7A5E9974275239EF1DB7380A0A3FBF7; // 0x0464(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_465[0x3];                                      // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostDisableTimeline;                              // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BoostEnableTimeline_CameraAlpha_65145F46495C7B334CB373856054D676; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostEnableTimeline__Direction_65145F46495C7B334CB373856054D676; // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostEnableTimeline;                               // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        RPM;                                               // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMMax;                                            // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMIdle;                                           // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMSmoothed;                                       // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EngineStarted;                                     // 0x04A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_RBGear>                      Gears;                                             // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int32                                         Gear;                                              // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangingGear;                                    // 0x04BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAccelerating;                                    // 0x04BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanChangeGear;                                     // 0x04BE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF[0x1];                                      // 0x04BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BrakeStrength;                                     // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HandBrakeStrength;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHandbraking;                                     // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DifferentialRatio;                                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USphereComponent*>               WheelCollisions;                                   // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    WheelConstraints;                                  // 0x04F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    SteeringConstraints;                               // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<bool>                                  IsUnbrokenWheels;                                  // 0x0510(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<bool>                                  IsOnGroundWheels;                                  // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                WheelPitches;                                      // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EPhysicalSurface>                      WheelSurfaceTypes;                                 // 0x0540(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                WheelInverseDragCoefficient;                       // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        WheelRadius;                                       // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WheelMassInKg;                                     // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringAngleMax;                                  // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringAngle;                                     // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringStrength;                                  // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SteeringToZeroStrength;                            // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SuspensionLength;                                  // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SuspensionStrength;                                // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SuspensionDamping;                                 // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EngineTorqueCurve;                                 // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UInstancedStaticMeshComponent*          InstacesComponent;                                 // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInAir;                                           // 0x05B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B9[0x7];                                      // 0x05B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AntiRollMultiplier;                                // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrakeAsReverse;                                    // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReverseGear;                                     // 0x05C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTurnEngine;                                     // 0x05CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CB[0x5];                                      // 0x05CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ExhaustCurve;                                      // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BackLightMat;                                      // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FrontLightMat;                                     // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FrontEnabled;                                      // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTurnFrontLight;                                 // 0x05E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BackEnabled;                                       // 0x05EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EB[0x5];                                      // 0x05EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelStreamer_C*                       LevelStreamer;                                     // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSupportAngleMin;                            // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSupportAngleMax;                            // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSupportFactor;                              // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSupportFactorMax;                           // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoostTime;                                         // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoostMultiplier;                                   // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoosting;                                        // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultFOV;                                        // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoostedFOV;                                        // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoostCooldown;                                   // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_641[0x7];                                      // 0x0641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BoostCooldown;                                     // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MagneticForceStrength;                             // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BoostMaxCount;                                     // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        WheelClapParticles;                                // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          AnimInstance;                                      // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                ConstraintForcesCurrent;                           // 0x0670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                ConstraintForcesPrev;                              // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ZacepCapot_R;                                      // 0x0690(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZacepLeftDoor_R;                                   // 0x0691(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZacepRightDoor_R;                                  // 0x0692(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockExit;                                         // 0x0693(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockInput;                                        // 0x0694(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_695[0x3];                                      // 0x0695(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForwardHit;                                        // 0x0698(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BackwardHit;                                       // 0x06B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NoneHit;                                           // 0x06C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AParentZombieAI_C*                      ZacepCapotZombie;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanHit;                                            // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E9[0x3];                                      // 0x06E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackLightMatIndex;                                 // 0x06EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FrontLightMatIndex;                                // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UZombieCarHit_C*                        ZombieHit;                                         // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             LastHitedCharacter;                                // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SwingingTimer;                                     // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SwingingAngle;                                     // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             EnterVehicleEvent;                                 // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ExitVehicleEvent;                                  // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DampingTimeCurrent;                                // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMSmoothFactorAcceleration;                       // 0x0730(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMSmoothFactorDecceleration;                      // 0x0738(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           WheelBoneNames;                                    // 0x0740(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	double                                        DampingRoad;                                       // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingMudRoad;                                    // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSnow;                                       // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingIce;                                        // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSupportRoad;                                // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DampingSupportSnow;                                // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMDrop;                                           // 0x0780(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RPMSmoothFactorMaxRpmDrop;                         // 0x0788(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TorqueMultiplier;                                  // 0x0790(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SitsType                                    SitType;                                           // 0x0798(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanUnroll;                                         // 0x0799(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79A[0x6];                                      // 0x079A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UnrollingTimerHandle;                              // 0x07A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DampingAsphalt;                                    // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VehicleState                        VehicleState;                                      // 0x07B0(0x0038)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	class UParticleSystemComponent*               ExhaustLoopEmitter;                                // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        AccelerationMultiplier;                            // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           DoorBoneNames;                                     // 0x07F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<class FName>                           SitBoneNames;                                      // 0x0808(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FS_VehicleSit>                  Sits;                                              // 0x0818(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class FName>                           SeatAnimSocketNames;                               // 0x0828(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                          IsDriving;                                         // 0x0838(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BackLightIntensityPressed;                         // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BackLightIntensityUnpressed;                       // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AntiRoll();
	void BlockWheel(class UPhysicsConstraintComponent* WheelConstraint, bool Param_IsHandbraking, bool IsBroken);
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Boost();
	void BoostDisableTimeline__FinishedFunc();
	void BoostDisableTimeline__UpdateFunc();
	void BoostEnableTimeline__FinishedFunc();
	void BoostEnableTimeline__UpdateFunc();
	void CalculateRPM();
	void CalculateTransmission();
	void ChangeSit(int32 SitIndex, class ASurvivalPlayer_C* Player);
	void ChangeViewTargetWithDelay(double Delay, class APawn* NewViewTarget);
	void CheckAndSetPlayRadio(bool NewPlay, class APlayerController* PassengerPlayerController);
	void CheckPlayerSit(class ASurvivalPlayer_C* Player, bool* CanEnterVehicle, int32* SitIndex);
	void ClientDiedInCar(class ASurvivalPlayer_C* Player);
	void ClientsSideEnterVehicleAsDriver(class APawn* Player);
	void ClientsSideEnterVehicleAsPassenger(class APawn* Player, int32 SitIndex);
	void CloseCarUpgradeMenu();
	void DamageToPassengers(double PureDamage);
	void DampingSupport();
	void DampingVehicle();
	void DampingWheels();
	void DecreaseDurability(double Value);
	void DecreaseRPM(double* NewRPM);
	void DecreaseRPMAfterHit();
	void DestroyInteractable();
	void Destruction(const struct FHitResult& Hit, bool* NeedDamage);
	void DetectAirAndSurface();
	void DetectPuncturedObject(int32 WheelIndex, class AActor* OtherActor);
	void DetectRoadSurface(bool* IsRoad);
	void DisableTickDelay();
	void EngineStartFX();
	void EngineStopFX();
	void EngineTurnOff(bool IsCrash);
	void EngineTurnOn();
	void EnterVehicle(class ASurvivalPlayer_C* Player, int32 SitIndex);
	void EventPlayAudioStartEngine();
	void ExecuteUbergraph_BP_RB_Vehicle(int32 EntryPoint);
	void ExitAsDriver(class ASurvivalPlayer_C* Player);
	void ExitAsPassenger(class ASurvivalPlayer_C* Player);
	void ExitVehicle(class ASurvivalPlayer_C* Player);
	void FuelOrDurabilityEnded(bool IsCrash);
	void FuelOrDurabilityEndEvent();
	void GetAccelerating(bool* Param_IsAccelerating);
	void GetActorType(E_ActorType* ActorType);
	void GetCarStatsComponent(class UBPC_CarStatsComponent_C** CarStats);
	void GetDampingBySurface(EPhysicalSurface SurfaceType, double* Damping);
	void GetDriver(class APawn** Driver);
	void GetEngineStarted(bool* Param_EngineStarted);
	void GetExitPoint(int32 SitIndex, struct FVector* Location, bool* CorrectLocation);
	void GetPassengers(class APawn** PassengerFL, class APawn** PassengerBL, class APawn** PassengerBR);
	void GetRiseRPM(double* Param_RPM);
	void GetSteering(double* Angle);
	void GetSupportBySurface(EPhysicalSurface SurfaceType, double* Support);
	void GetTorque(double* Force);
	void GetVehicleBody(class USkeletalMeshComponent** Body);
	void GetWheelPitches(TArray<double>* Pitches);
	void GetWheels(bool* IsValid, class USphereComponent** LF, class USphereComponent** RF, class USphereComponent** LB, class USphereComponent** RB);
	void HandlePlayerEvents(class ASurvivalPlayer_C* Player);
	bool HasDriver();
	void Hit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void HitCamShake(class AActor* OtherActor, class UPrimitiveComponent* OtherComp);
	void HitCollisionTransform();
	void HitDeform(const struct FVector& Location);
	void HitWorld(class AActor* OtherActor);
	void IncreaseDurability();
	void IncreaseFuel(class ABP_Canister_C* Canister);
	void IncreaseRPM(double Input, double* NewRPM);
	void InitLight();
	void InitValues();
	void InitWheels();
	void InpActEvt_Handbrake_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_Handbrake_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_LeftShift_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_OpenInventory_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_TurnEngine_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_TurnLights_K2Node_InputActionEvent_3(const struct FKey& Key);
	void Interact_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpAxisEvt_Brake_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_2(float AxisValue);
	void IsEmpty(bool* Param_IsEmpty);
	void IsIdleRPM(bool* IdleReached);
	void IsLocked_(bool* Result);
	void IsVehicle(bool* Param_IsVehicle);
	void MagneticForce(class USphereComponent* Wheel);
	void MultiCallDecreaseDurability(double Damage);
	void MultiCallEngineStartFail();
	void MulticallEnterVehicleAsDriver(class APawn* Player);
	void MulticallEnterVehicleAsPassenger(class APawn* Player, int32 SitIndex);
	void MultiCallExitVehicle(class APawn* Player);
	void MultiCallSerWheelBroken(bool NewBroken, int32 WheelIndex);
	void MultiCallTurnFrontLight();
	void MultiClientDied(class ASurvivalPlayer_C* Player);
	void Noise();
	void NotifyQuestEvent(const class FString& QuestEvent);
	void NotifyVehicleEngineTurnOn();
	void OnBeginInteract(class APawn* Player);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLevelLoaded(class FName LevelName, class AActor* Player);
	void OnLevelUnloaded(class FName LevelName, class AActor* Player);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnRep_EngineStarted();
	void OnRep_IsDriving();
	void OnRep_VehicleState();
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void OnTabsClose();
	void OpenCarUpgradeMenu();
	void OverlapOtherActor(class AActor* Other, const struct FHitResult& SweepResult, bool* NeedDamage);
	void OverlapRadialForce(class AActor* OtherActor);
	void PhysicsTick(float SubstepDeltaTime);
	void PlayAudioByTag(TArray<class FName>& Param_Tags, const struct FVector& Location);
	void PlayAudioEnterVehicle();
	void PlayAudioExitVehicle();
	void PlayAudioHandbrake();
	void PlayAudioStartEngine();
	void PlayAudioStopEngine(bool IsCrash);
	void PlayerHealthEnded(class ASurvivalPlayer_C* Player);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RepairDeformation();
	void Reverse(bool IsReverse);
	void Run_Lockpicking();
	void ServerCallDecreaseDurability(double Damage);
	void ServerCallExitVehicle(class APawn* Player);
	void ServerCallSendVehicleState(const struct FS_VehicleState& Param_VehicleState);
	void ServerCallSetVehicleSit(int32 Param_Index, bool Item_Is_Busy, class APawn* Item_Sitter);
	void ServerCallSetWheelBroken(bool NewBroken, int32 WheelIndex);
	void ServerCallTurnFrontLight();
	void ServerCallTurnOff();
	void ServerCallTurnOn();
	void ServerSideEnterVehicleAsDriver(class APawn* Player);
	void ServerSideEnterVehicleAsPassenger(class APawn* Player);
	void Set3DWidgetVisibility(bool Visible);
	void SetBackLightIntencity(bool IsBrake);
	void SetBrakeInput(double AxisValue);
	void SetEnablePhysics(bool NewEnabled);
	void SetEnablePhysicsComponents(bool bSimulate);
	void SetHandbrakeInput(bool IsHandbrake);
	void SetSteeringInput(double AxisValue);
	void SetThrottleInput(double AxisValue);
	void SetTick(bool bEnabled);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void SetWheelBroken(bool NewBroken, int32 WheelIndex);
	void ShowWidgets(bool CanEnterVehicle, class ASurvivalPlayer_C* Player);
	void StartUnrolling();
	void SteeringWheel(double Input, double* Angle);
	void SteeringWheelToZero(double* Angle);
	void StoreConstraintForces();
	void SwingingBody();
	void Throttle(double Input);
	void TurnBackLight(bool Enable);
	void TurnFrontLight(bool Enable);
	void UnhandleClientEvent(class ASurvivalPlayer_C* Player);
	void Unroll();
	void Unrolling();
	void Update_Audio_Engine_Wheel_Speed();
	void UpdateAudioEngine();
	void UpdateAudioSuspension();
	void UpdateExhaust();
	void UpdateExhaustCriticalState();
	void UpdatePhysics();
	void UpdateWheelPitches();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RB_Vehicle_C">();
	}
	static class ABP_RB_Vehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RB_Vehicle_C>();
	}
};
static_assert(alignof(ABP_RB_Vehicle_C) == 0x000008, "Wrong alignment on ABP_RB_Vehicle_C");
static_assert(sizeof(ABP_RB_Vehicle_C) == 0x000850, "Wrong size on ABP_RB_Vehicle_C");
static_assert(offsetof(ABP_RB_Vehicle_C, UberGraphFrame) == 0x000330, "Member 'ABP_RB_Vehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelCol_RB) == 0x000338, "Member 'ABP_RB_Vehicle_C::WheelCol_RB' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelCol_LB) == 0x000340, "Member 'ABP_RB_Vehicle_C::WheelCol_LB' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelCol_RF) == 0x000348, "Member 'ABP_RB_Vehicle_C::WheelCol_RF' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelCol_LF) == 0x000350, "Member 'ABP_RB_Vehicle_C::WheelCol_LF' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Wind) == 0x000358, "Member 'ABP_RB_Vehicle_C::Wind' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DestructibleRadialForce) == 0x000360, "Member 'ABP_RB_Vehicle_C::DestructibleRadialForce' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Camera) == 0x000368, "Member 'ABP_RB_Vehicle_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ATPCCamera) == 0x000370, "Member 'ABP_RB_Vehicle_C::ATPCCamera' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RadialForceOverlap) == 0x000378, "Member 'ABP_RB_Vehicle_C::RadialForceOverlap' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BodyPercept) == 0x000380, "Member 'ABP_RB_Vehicle_C::BodyPercept' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BPC_SmoothSyncVehicle) == 0x000388, "Member 'ABP_RB_Vehicle_C::BPC_SmoothSyncVehicle' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WindowCollision) == 0x000390, "Member 'ABP_RB_Vehicle_C::WindowCollision' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackLightR) == 0x000398, "Member 'ABP_RB_Vehicle_C::BackLightR' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackLightL) == 0x0003A0, "Member 'ABP_RB_Vehicle_C::BackLightL' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, PC_LF_Steering) == 0x0003A8, "Member 'ABP_RB_Vehicle_C::PC_LF_Steering' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, PC_RF_Steering) == 0x0003B0, "Member 'ABP_RB_Vehicle_C::PC_RF_Steering' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Cube_R) == 0x0003B8, "Member 'ABP_RB_Vehicle_C::Cube_R' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Cube_L) == 0x0003C0, "Member 'ABP_RB_Vehicle_C::Cube_L' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ExhaustHolder) == 0x0003C8, "Member 'ABP_RB_Vehicle_C::ExhaustHolder' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, P_VehicleEngineCriticalBroken) == 0x0003D0, "Member 'ABP_RB_Vehicle_C::P_VehicleEngineCriticalBroken' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, GasolineSocket) == 0x0003D8, "Member 'ABP_RB_Vehicle_C::GasolineSocket' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, AudioHolder) == 0x0003E0, "Member 'ABP_RB_Vehicle_C::AudioHolder' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, HitCollision) == 0x0003E8, "Member 'ABP_RB_Vehicle_C::HitCollision' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, LightR) == 0x0003F0, "Member 'ABP_RB_Vehicle_C::LightR' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, LightL) == 0x0003F8, "Member 'ABP_RB_Vehicle_C::LightL' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Arrow) == 0x000400, "Member 'ABP_RB_Vehicle_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, PC_RB_Axis) == 0x000408, "Member 'ABP_RB_Vehicle_C::PC_RB_Axis' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, PC_LB_Axis) == 0x000410, "Member 'ABP_RB_Vehicle_C::PC_LB_Axis' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, PC_RF_Axis) == 0x000418, "Member 'ABP_RB_Vehicle_C::PC_RF_Axis' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, PC_LF_Axis) == 0x000420, "Member 'ABP_RB_Vehicle_C::PC_LF_Axis' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelsSlide) == 0x000428, "Member 'ABP_RB_Vehicle_C::WheelsSlide' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, NavModifier) == 0x000430, "Member 'ABP_RB_Vehicle_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, AIPerceptionStimuliSource) == 0x000438, "Member 'ABP_RB_Vehicle_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, EngineLoop) == 0x000440, "Member 'ABP_RB_Vehicle_C::EngineLoop' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelsRotate) == 0x000448, "Member 'ABP_RB_Vehicle_C::WheelsRotate' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BPC_VehicleUpgrade) == 0x000450, "Member 'ABP_RB_Vehicle_C::BPC_VehicleUpgrade' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BPC_CarStatsComponent) == 0x000458, "Member 'ABP_RB_Vehicle_C::BPC_CarStatsComponent' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostDisableTimeline_CameraAlpha_F7A5E9974275239EF1DB7380A0A3FBF7) == 0x000460, "Member 'ABP_RB_Vehicle_C::BoostDisableTimeline_CameraAlpha_F7A5E9974275239EF1DB7380A0A3FBF7' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostDisableTimeline__Direction_F7A5E9974275239EF1DB7380A0A3FBF7) == 0x000464, "Member 'ABP_RB_Vehicle_C::BoostDisableTimeline__Direction_F7A5E9974275239EF1DB7380A0A3FBF7' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostDisableTimeline) == 0x000468, "Member 'ABP_RB_Vehicle_C::BoostDisableTimeline' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostEnableTimeline_CameraAlpha_65145F46495C7B334CB373856054D676) == 0x000470, "Member 'ABP_RB_Vehicle_C::BoostEnableTimeline_CameraAlpha_65145F46495C7B334CB373856054D676' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostEnableTimeline__Direction_65145F46495C7B334CB373856054D676) == 0x000474, "Member 'ABP_RB_Vehicle_C::BoostEnableTimeline__Direction_65145F46495C7B334CB373856054D676' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostEnableTimeline) == 0x000478, "Member 'ABP_RB_Vehicle_C::BoostEnableTimeline' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPM) == 0x000480, "Member 'ABP_RB_Vehicle_C::RPM' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMMax) == 0x000488, "Member 'ABP_RB_Vehicle_C::RPMMax' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMIdle) == 0x000490, "Member 'ABP_RB_Vehicle_C::RPMIdle' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMSmoothed) == 0x000498, "Member 'ABP_RB_Vehicle_C::RPMSmoothed' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, EngineStarted) == 0x0004A0, "Member 'ABP_RB_Vehicle_C::EngineStarted' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Gears) == 0x0004A8, "Member 'ABP_RB_Vehicle_C::Gears' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Gear) == 0x0004B8, "Member 'ABP_RB_Vehicle_C::Gear' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsChangingGear) == 0x0004BC, "Member 'ABP_RB_Vehicle_C::IsChangingGear' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsAccelerating) == 0x0004BD, "Member 'ABP_RB_Vehicle_C::IsAccelerating' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, CanChangeGear) == 0x0004BE, "Member 'ABP_RB_Vehicle_C::CanChangeGear' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BrakeStrength) == 0x0004C0, "Member 'ABP_RB_Vehicle_C::BrakeStrength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, HandBrakeStrength) == 0x0004C8, "Member 'ABP_RB_Vehicle_C::HandBrakeStrength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsHandbraking) == 0x0004D0, "Member 'ABP_RB_Vehicle_C::IsHandbraking' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DifferentialRatio) == 0x0004D8, "Member 'ABP_RB_Vehicle_C::DifferentialRatio' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelCollisions) == 0x0004E0, "Member 'ABP_RB_Vehicle_C::WheelCollisions' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelConstraints) == 0x0004F0, "Member 'ABP_RB_Vehicle_C::WheelConstraints' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SteeringConstraints) == 0x000500, "Member 'ABP_RB_Vehicle_C::SteeringConstraints' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsUnbrokenWheels) == 0x000510, "Member 'ABP_RB_Vehicle_C::IsUnbrokenWheels' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsOnGroundWheels) == 0x000520, "Member 'ABP_RB_Vehicle_C::IsOnGroundWheels' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelPitches) == 0x000530, "Member 'ABP_RB_Vehicle_C::WheelPitches' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelSurfaceTypes) == 0x000540, "Member 'ABP_RB_Vehicle_C::WheelSurfaceTypes' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelInverseDragCoefficient) == 0x000550, "Member 'ABP_RB_Vehicle_C::WheelInverseDragCoefficient' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelRadius) == 0x000560, "Member 'ABP_RB_Vehicle_C::WheelRadius' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelMassInKg) == 0x000568, "Member 'ABP_RB_Vehicle_C::WheelMassInKg' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SteeringAngleMax) == 0x000570, "Member 'ABP_RB_Vehicle_C::SteeringAngleMax' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SteeringAngle) == 0x000578, "Member 'ABP_RB_Vehicle_C::SteeringAngle' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SteeringStrength) == 0x000580, "Member 'ABP_RB_Vehicle_C::SteeringStrength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SteeringToZeroStrength) == 0x000588, "Member 'ABP_RB_Vehicle_C::SteeringToZeroStrength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SuspensionLength) == 0x000590, "Member 'ABP_RB_Vehicle_C::SuspensionLength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SuspensionStrength) == 0x000598, "Member 'ABP_RB_Vehicle_C::SuspensionStrength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SuspensionDamping) == 0x0005A0, "Member 'ABP_RB_Vehicle_C::SuspensionDamping' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, EngineTorqueCurve) == 0x0005A8, "Member 'ABP_RB_Vehicle_C::EngineTorqueCurve' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, InstacesComponent) == 0x0005B0, "Member 'ABP_RB_Vehicle_C::InstacesComponent' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsInAir) == 0x0005B8, "Member 'ABP_RB_Vehicle_C::IsInAir' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, AntiRollMultiplier) == 0x0005C0, "Member 'ABP_RB_Vehicle_C::AntiRollMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BrakeAsReverse) == 0x0005C8, "Member 'ABP_RB_Vehicle_C::BrakeAsReverse' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsReverseGear) == 0x0005C9, "Member 'ABP_RB_Vehicle_C::IsReverseGear' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, CanTurnEngine) == 0x0005CA, "Member 'ABP_RB_Vehicle_C::CanTurnEngine' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ExhaustCurve) == 0x0005D0, "Member 'ABP_RB_Vehicle_C::ExhaustCurve' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackLightMat) == 0x0005D8, "Member 'ABP_RB_Vehicle_C::BackLightMat' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, FrontLightMat) == 0x0005E0, "Member 'ABP_RB_Vehicle_C::FrontLightMat' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, FrontEnabled) == 0x0005E8, "Member 'ABP_RB_Vehicle_C::FrontEnabled' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, CanTurnFrontLight) == 0x0005E9, "Member 'ABP_RB_Vehicle_C::CanTurnFrontLight' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackEnabled) == 0x0005EA, "Member 'ABP_RB_Vehicle_C::BackEnabled' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, LevelStreamer) == 0x0005F0, "Member 'ABP_RB_Vehicle_C::LevelStreamer' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSupportAngleMin) == 0x0005F8, "Member 'ABP_RB_Vehicle_C::DampingSupportAngleMin' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSupportAngleMax) == 0x000600, "Member 'ABP_RB_Vehicle_C::DampingSupportAngleMax' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSupportFactor) == 0x000608, "Member 'ABP_RB_Vehicle_C::DampingSupportFactor' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSupportFactorMax) == 0x000610, "Member 'ABP_RB_Vehicle_C::DampingSupportFactorMax' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostTime) == 0x000618, "Member 'ABP_RB_Vehicle_C::BoostTime' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostMultiplier) == 0x000620, "Member 'ABP_RB_Vehicle_C::BoostMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsBoosting) == 0x000628, "Member 'ABP_RB_Vehicle_C::IsBoosting' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DefaultFOV) == 0x000630, "Member 'ABP_RB_Vehicle_C::DefaultFOV' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostedFOV) == 0x000638, "Member 'ABP_RB_Vehicle_C::BoostedFOV' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsBoostCooldown) == 0x000640, "Member 'ABP_RB_Vehicle_C::IsBoostCooldown' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostCooldown) == 0x000648, "Member 'ABP_RB_Vehicle_C::BoostCooldown' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, MagneticForceStrength) == 0x000650, "Member 'ABP_RB_Vehicle_C::MagneticForceStrength' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BoostMaxCount) == 0x000658, "Member 'ABP_RB_Vehicle_C::BoostMaxCount' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelClapParticles) == 0x000660, "Member 'ABP_RB_Vehicle_C::WheelClapParticles' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, AnimInstance) == 0x000668, "Member 'ABP_RB_Vehicle_C::AnimInstance' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ConstraintForcesCurrent) == 0x000670, "Member 'ABP_RB_Vehicle_C::ConstraintForcesCurrent' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ConstraintForcesPrev) == 0x000680, "Member 'ABP_RB_Vehicle_C::ConstraintForcesPrev' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ZacepCapot_R) == 0x000690, "Member 'ABP_RB_Vehicle_C::ZacepCapot_R' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ZacepLeftDoor_R) == 0x000691, "Member 'ABP_RB_Vehicle_C::ZacepLeftDoor_R' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ZacepRightDoor_R) == 0x000692, "Member 'ABP_RB_Vehicle_C::ZacepRightDoor_R' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BlockExit) == 0x000693, "Member 'ABP_RB_Vehicle_C::BlockExit' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BlockInput) == 0x000694, "Member 'ABP_RB_Vehicle_C::BlockInput' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ForwardHit) == 0x000698, "Member 'ABP_RB_Vehicle_C::ForwardHit' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackwardHit) == 0x0006B0, "Member 'ABP_RB_Vehicle_C::BackwardHit' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, NoneHit) == 0x0006C8, "Member 'ABP_RB_Vehicle_C::NoneHit' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ZacepCapotZombie) == 0x0006E0, "Member 'ABP_RB_Vehicle_C::ZacepCapotZombie' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, CanHit) == 0x0006E8, "Member 'ABP_RB_Vehicle_C::CanHit' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackLightMatIndex) == 0x0006EC, "Member 'ABP_RB_Vehicle_C::BackLightMatIndex' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, FrontLightMatIndex) == 0x0006F0, "Member 'ABP_RB_Vehicle_C::FrontLightMatIndex' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ZombieHit) == 0x0006F8, "Member 'ABP_RB_Vehicle_C::ZombieHit' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, LastHitedCharacter) == 0x000700, "Member 'ABP_RB_Vehicle_C::LastHitedCharacter' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SwingingTimer) == 0x000708, "Member 'ABP_RB_Vehicle_C::SwingingTimer' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SwingingAngle) == 0x000710, "Member 'ABP_RB_Vehicle_C::SwingingAngle' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, EnterVehicleEvent) == 0x000718, "Member 'ABP_RB_Vehicle_C::EnterVehicleEvent' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ExitVehicleEvent) == 0x000720, "Member 'ABP_RB_Vehicle_C::ExitVehicleEvent' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingTimeCurrent) == 0x000728, "Member 'ABP_RB_Vehicle_C::DampingTimeCurrent' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMSmoothFactorAcceleration) == 0x000730, "Member 'ABP_RB_Vehicle_C::RPMSmoothFactorAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMSmoothFactorDecceleration) == 0x000738, "Member 'ABP_RB_Vehicle_C::RPMSmoothFactorDecceleration' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, WheelBoneNames) == 0x000740, "Member 'ABP_RB_Vehicle_C::WheelBoneNames' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingRoad) == 0x000750, "Member 'ABP_RB_Vehicle_C::DampingRoad' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingMudRoad) == 0x000758, "Member 'ABP_RB_Vehicle_C::DampingMudRoad' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSnow) == 0x000760, "Member 'ABP_RB_Vehicle_C::DampingSnow' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingIce) == 0x000768, "Member 'ABP_RB_Vehicle_C::DampingIce' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSupportRoad) == 0x000770, "Member 'ABP_RB_Vehicle_C::DampingSupportRoad' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingSupportSnow) == 0x000778, "Member 'ABP_RB_Vehicle_C::DampingSupportSnow' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMDrop) == 0x000780, "Member 'ABP_RB_Vehicle_C::RPMDrop' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, RPMSmoothFactorMaxRpmDrop) == 0x000788, "Member 'ABP_RB_Vehicle_C::RPMSmoothFactorMaxRpmDrop' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, TorqueMultiplier) == 0x000790, "Member 'ABP_RB_Vehicle_C::TorqueMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SitType) == 0x000798, "Member 'ABP_RB_Vehicle_C::SitType' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, CanUnroll) == 0x000799, "Member 'ABP_RB_Vehicle_C::CanUnroll' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, UnrollingTimerHandle) == 0x0007A0, "Member 'ABP_RB_Vehicle_C::UnrollingTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DampingAsphalt) == 0x0007A8, "Member 'ABP_RB_Vehicle_C::DampingAsphalt' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, VehicleState) == 0x0007B0, "Member 'ABP_RB_Vehicle_C::VehicleState' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, ExhaustLoopEmitter) == 0x0007E8, "Member 'ABP_RB_Vehicle_C::ExhaustLoopEmitter' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, AccelerationMultiplier) == 0x0007F0, "Member 'ABP_RB_Vehicle_C::AccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, DoorBoneNames) == 0x0007F8, "Member 'ABP_RB_Vehicle_C::DoorBoneNames' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SitBoneNames) == 0x000808, "Member 'ABP_RB_Vehicle_C::SitBoneNames' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, Sits) == 0x000818, "Member 'ABP_RB_Vehicle_C::Sits' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, SeatAnimSocketNames) == 0x000828, "Member 'ABP_RB_Vehicle_C::SeatAnimSocketNames' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, IsDriving) == 0x000838, "Member 'ABP_RB_Vehicle_C::IsDriving' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackLightIntensityPressed) == 0x000840, "Member 'ABP_RB_Vehicle_C::BackLightIntensityPressed' has a wrong offset!");
static_assert(offsetof(ABP_RB_Vehicle_C, BackLightIntensityUnpressed) == 0x000848, "Member 'ABP_RB_Vehicle_C::BackLightIntensityUnpressed' has a wrong offset!");

}

