#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ZombieSpawner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DayCycleState_structs.hpp"
#include "AreaPropertiesUpdated_structs.hpp"
#include "Survival_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ZombieSpawner.BP_ZombieSpawner_C
// 0x01A0 (0x0430 - 0x0290)
class ABP_ZombieSpawner_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          BoxTriggerZone;                                    // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DetectCollision;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    billboard;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Cooldown;                                          // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZombieSpawnChance;                                 // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowMainWorkingArea;                               // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnCount;                                        // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZombieCounter;                                     // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CooldownTimer;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TickingCooldown;                                   // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TriggeredActor;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          OnCooldown;                                        // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AfterAlarm;                                        // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DayMeshTypes;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SpawnWitch;                                        // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnSWAT;                                         // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombieManager_C*                       ZombieManager;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ATDB_GameMode_C*                        TDBGameMode;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGS_TDB_C*                              GameStateRef;                                      // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ZombieSpawnerHandler_C*             SpawnerHandler;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASkyCreatorController_C*                SkyCreatorController;                              // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 NightMeshTypes;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RandomizeSpawnBetweenAreas;                        // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATargetPoint*                           AntiCampSpawnPoint;                                // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<struct FAreaPropertiesUpdated>         NewSpawnAreas;                                     // 0x0358(0x0010)(Edit, BlueprintVisible)
	TSet<class UQuest*>                           LinkedQuests;                                      // 0x0368(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UPrimitiveComponent*>            CheckAreas;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<int32>                                 CheckAreasPlayerCount;                             // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                AntiCampSpawnLocation;                             // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayersNearCount;                                  // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AntiCampSpawnTime;                                 // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AntiCampSpawnTimer;                                // 0x03F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawningAntiCampZombies;                           // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PlayersNear;                                       // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 SoldierMeshTypes;                                  // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsCitySpawner;                                    // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddArea(struct FAreaPropertiesUpdated& AreaProperties);
	void AddPlayerCheckArea(struct FAreaPropertiesUpdated& Area, struct FTransform& ConnectedAreaRelativeTransform);
	bool All_Areas_Occupied();
	bool AnotherZombieInSpawnPoint(const struct FVector& SpawnLocation);
	bool AreaIsEmptyFromPlayers(int32 AreaIndex);
	void BndEvt__BP_ZombieSpawner_BoxTriggerZone_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_ZombieSpawner_BoxTriggerZone_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CheckShouldSpawnAntiCamp();
	EZombieAnimType ConfigureAnimType(struct FAreaPropertiesUpdated& Area);
	struct FRotator ConfigureRotation(struct FAreaPropertiesUpdated& Area);
	void ConfigureZombieAndMeshType(struct FAreaPropertiesUpdated& Area, EZombieType* ZombieType, int32* MeshType);
	void CREATEDELEGATE_PROXYFUNCTION_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CREATEDELEGATE_PROXYFUNCTION_1(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void DecreaseCooldown();
	void DecreaseGroupCounter();
	EZombieAnimType DetermineZombieAnimType(EZombieAnimType InputType);
	void ExecuteUbergraph_BP_ZombieSpawner(int32 EntryPoint);
	void GenerateDayMeshType(int32* MeshType);
	void GenerateNightMeshType(int32* MeshType);
	void GenerateSoldierMeshType(int32* MeshType);
	void Get_Amount_Of_Zombies(int32* AmountOfZombies);
	int32 Get_Random_Area_Index();
	void GetIsSurvSpawnedFromCar(class AActor* Survival, bool* IsFromCar);
	void GetSpawnLocationInArea(struct FAreaPropertiesUpdated& SpawnArea, struct FVector* SpawnLocation);
	double GetSpawnMultiplier();
	void GetTraceStartAndEndPoint(struct FAreaPropertiesUpdated& SpawnArea, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool Is_Night_Time();
	void IsSpawnerReady(bool* Ready);
	void OnCheckAreaBeginOverlap(class UPrimitiveComponent*& OverlappedComponent, class AActor*& OtherActor, class UPrimitiveComponent*& OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCheckAreaEndOverlap(class UPrimitiveComponent*& OverlappedComponent, class AActor*& OtherActor, class UPrimitiveComponent*& OtherComp, int32 OtherBodyIndex);
	void OnTriggerSpawn(class AActor* Actor, bool Param_AfterAlarm);
	void PrintLogs();
	void ReceiveBeginPlay();
	void ResetSpawner();
	void RotateVectorAroundPoint(const struct FVector& PivotVector, const struct FVector& VectorToRotate, const struct FRotator& Rotation, struct FVector* RotatedVector);
	void SetLinkedQuests(TArray<class UQuest*>& Param_LinkedQuests);
	void SetSpawnerHandler(class ABP_ZombieSpawnerHandler_C* InSpawnerHandler);
	void Spawn_Zombie(const struct FVector& Location, struct FAreaPropertiesUpdated& Area);
	void Spawn_Zombie_in_Area(struct FAreaPropertiesUpdated& Area);
	void Spawn_Zombies(class AActor* Actor, bool Param_AfterAlarm);
	void SpawnAntiCampZombies();
	EZombieType SpawnNightZombie(bool InDarkRoomArea);
	void StartCooldown();
	void UserConstructionScript();
	void ValidateSpawnResult();
	bool ValidNightConditions(bool InDarkRoom);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ZombieSpawner_C">();
	}
	static class ABP_ZombieSpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ZombieSpawner_C>();
	}
};
static_assert(alignof(ABP_ZombieSpawner_C) == 0x000008, "Wrong alignment on ABP_ZombieSpawner_C");
static_assert(sizeof(ABP_ZombieSpawner_C) == 0x000430, "Wrong size on ABP_ZombieSpawner_C");
static_assert(offsetof(ABP_ZombieSpawner_C, UberGraphFrame) == 0x000290, "Member 'ABP_ZombieSpawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, BoxTriggerZone) == 0x000298, "Member 'ABP_ZombieSpawner_C::BoxTriggerZone' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, DetectCollision) == 0x0002A0, "Member 'ABP_ZombieSpawner_C::DetectCollision' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, billboard) == 0x0002A8, "Member 'ABP_ZombieSpawner_C::billboard' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, TextRender) == 0x0002B0, "Member 'ABP_ZombieSpawner_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_ZombieSpawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, Cooldown) == 0x0002C0, "Member 'ABP_ZombieSpawner_C::Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, ZombieSpawnChance) == 0x0002C4, "Member 'ABP_ZombieSpawner_C::ZombieSpawnChance' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, ShowMainWorkingArea) == 0x0002C8, "Member 'ABP_ZombieSpawner_C::ShowMainWorkingArea' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SpawnCount) == 0x0002CC, "Member 'ABP_ZombieSpawner_C::SpawnCount' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, ZombieCounter) == 0x0002D0, "Member 'ABP_ZombieSpawner_C::ZombieCounter' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, CooldownTimer) == 0x0002D8, "Member 'ABP_ZombieSpawner_C::CooldownTimer' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, TickingCooldown) == 0x0002E0, "Member 'ABP_ZombieSpawner_C::TickingCooldown' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, TriggeredActor) == 0x0002E8, "Member 'ABP_ZombieSpawner_C::TriggeredActor' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, OnCooldown) == 0x0002F0, "Member 'ABP_ZombieSpawner_C::OnCooldown' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, AfterAlarm) == 0x0002F1, "Member 'ABP_ZombieSpawner_C::AfterAlarm' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, DayMeshTypes) == 0x0002F8, "Member 'ABP_ZombieSpawner_C::DayMeshTypes' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SpawnWitch) == 0x000308, "Member 'ABP_ZombieSpawner_C::SpawnWitch' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SpawnSWAT) == 0x000309, "Member 'ABP_ZombieSpawner_C::SpawnSWAT' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, ZombieManager) == 0x000310, "Member 'ABP_ZombieSpawner_C::ZombieManager' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, TDBGameMode) == 0x000318, "Member 'ABP_ZombieSpawner_C::TDBGameMode' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, GameStateRef) == 0x000320, "Member 'ABP_ZombieSpawner_C::GameStateRef' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SpawnerHandler) == 0x000328, "Member 'ABP_ZombieSpawner_C::SpawnerHandler' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SkyCreatorController) == 0x000330, "Member 'ABP_ZombieSpawner_C::SkyCreatorController' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, NightMeshTypes) == 0x000338, "Member 'ABP_ZombieSpawner_C::NightMeshTypes' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, RandomizeSpawnBetweenAreas) == 0x000348, "Member 'ABP_ZombieSpawner_C::RandomizeSpawnBetweenAreas' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, AntiCampSpawnPoint) == 0x000350, "Member 'ABP_ZombieSpawner_C::AntiCampSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, NewSpawnAreas) == 0x000358, "Member 'ABP_ZombieSpawner_C::NewSpawnAreas' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, LinkedQuests) == 0x000368, "Member 'ABP_ZombieSpawner_C::LinkedQuests' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, CheckAreas) == 0x0003B8, "Member 'ABP_ZombieSpawner_C::CheckAreas' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, CheckAreasPlayerCount) == 0x0003C8, "Member 'ABP_ZombieSpawner_C::CheckAreasPlayerCount' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, AntiCampSpawnLocation) == 0x0003D8, "Member 'ABP_ZombieSpawner_C::AntiCampSpawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, PlayersNearCount) == 0x0003F0, "Member 'ABP_ZombieSpawner_C::PlayersNearCount' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, AntiCampSpawnTime) == 0x0003F4, "Member 'ABP_ZombieSpawner_C::AntiCampSpawnTime' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, AntiCampSpawnTimer) == 0x0003F8, "Member 'ABP_ZombieSpawner_C::AntiCampSpawnTimer' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SpawningAntiCampZombies) == 0x000400, "Member 'ABP_ZombieSpawner_C::SpawningAntiCampZombies' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, PlayersNear) == 0x000408, "Member 'ABP_ZombieSpawner_C::PlayersNear' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, SoldierMeshTypes) == 0x000418, "Member 'ABP_ZombieSpawner_C::SoldierMeshTypes' has a wrong offset!");
static_assert(offsetof(ABP_ZombieSpawner_C, bIsCitySpawner) == 0x000428, "Member 'ABP_ZombieSpawner_C::bIsCitySpawner' has a wrong offset!");

}

