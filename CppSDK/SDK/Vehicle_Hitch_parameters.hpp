#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vehicle_Hitch

#include "Basic.hpp"

#include "HitchNetworkData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Vehicle_Hitch.Vehicle_Hitch_C.ApplyHitchConstraint
// 0x0048 (0x0048 - 0x0000)
struct Vehicle_Hitch_C_ApplyHitchConstraint final
{
public:
	class UVehicle_Hitch_C*                       Param_TowHitch;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       Param_TrailerHitch;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Temp_byte_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Temp_byte_Variable_2;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Temp_byte_Variable_3;                              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Temp_byte_Variable_4;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      K2Node_Select_Default;                             // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      K2Node_Select_Default_1;                           // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      Temp_byte_Variable_5;                              // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAngularConstraintMotion                      K2Node_Select_Default_2;                           // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularSwing1Limit_Swing1LimitAngle_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularSwing2Limit_Swing2LimitAngle_ImplicitCast; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularTwistLimit_TwistLimitAngle_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_ApplyHitchConstraint) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_ApplyHitchConstraint");
static_assert(sizeof(Vehicle_Hitch_C_ApplyHitchConstraint) == 0x000048, "Wrong size on Vehicle_Hitch_C_ApplyHitchConstraint");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Param_TowHitch) == 0x000000, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Param_TowHitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Param_TrailerHitch) == 0x000008, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Param_TrailerHitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_byte_Variable) == 0x000010, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_GetVehicleMesh_Mesh) == 0x000018, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_byte_Variable_1) == 0x000020, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_bool_Variable) == 0x000021, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_byte_Variable_2) == 0x000022, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_byte_Variable_3) == 0x000023, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_bool_Variable_1) == 0x000024, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_byte_Variable_4) == 0x000025, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000026, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000027, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x000028, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, K2Node_Select_Default) == 0x000029, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, K2Node_Select_Default_1) == 0x00002A, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_byte_Variable_5) == 0x00002B, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, Temp_bool_Variable_2) == 0x00002C, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, K2Node_Select_Default_2) == 0x00002D, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_GetVehicleMesh_Mesh_1) == 0x000030, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_SetAngularSwing1Limit_Swing1LimitAngle_ImplicitCast) == 0x000038, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_SetAngularSwing1Limit_Swing1LimitAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_SetAngularSwing2Limit_Swing2LimitAngle_ImplicitCast) == 0x00003C, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_SetAngularSwing2Limit_Swing2LimitAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchConstraint, CallFunc_SetAngularTwistLimit_TwistLimitAngle_ImplicitCast) == 0x000040, "Member 'Vehicle_Hitch_C_ApplyHitchConstraint::CallFunc_SetAngularTwistLimit_TwistLimitAngle_ImplicitCast' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.ApplyHitchFromNetwork
// 0x0048 (0x0048 - 0x0000)
struct Vehicle_Hitch_C_ApplyHitchFromNetwork final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_1;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_2;               // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_StartHitchAnimation_AnimationLength_ImplicitCast; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_ApplyHitchFromNetwork) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_ApplyHitchFromNetwork");
static_assert(sizeof(Vehicle_Hitch_C_ApplyHitchFromNetwork) == 0x000048, "Wrong size on Vehicle_Hitch_C_ApplyHitchFromNetwork");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_GetOwningVehicle_Vehicle) == 0x000008, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_GetOwningVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_GetOwningVehicle_Vehicle_1) == 0x000018, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_GetOwningVehicle_Vehicle_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000021, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_GetOwningVehicle_Vehicle_2) == 0x000028, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_GetOwningVehicle_Vehicle_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_IsValid_ReturnValue_3) == 0x000030, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000038, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ApplyHitchFromNetwork, CallFunc_StartHitchAnimation_AnimationLength_ImplicitCast) == 0x000040, "Member 'Vehicle_Hitch_C_ApplyHitchFromNetwork::CallFunc_StartHitchAnimation_AnimationLength_ImplicitCast' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.CheckCompatibility
// 0x0030 (0x0030 - 0x0000)
struct Vehicle_Hitch_C_CheckCompatibility final
{
public:
	class UVehicle_Hitch_C*                       To;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCompatible;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Compatible;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_CheckCompatibility) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_CheckCompatibility");
static_assert(sizeof(Vehicle_Hitch_C_CheckCompatibility) == 0x000030, "Wrong size on Vehicle_Hitch_C_CheckCompatibility");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, To) == 0x000000, "Member 'Vehicle_Hitch_C_CheckCompatibility::To' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, IsCompatible) == 0x000008, "Member 'Vehicle_Hitch_C_CheckCompatibility::IsCompatible' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, Compatible) == 0x000009, "Member 'Vehicle_Hitch_C_CheckCompatibility::Compatible' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, Temp_bool_True_if_break_was_hit_Variable) == 0x00000B, "Member 'Vehicle_Hitch_C_CheckCompatibility::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'Vehicle_Hitch_C_CheckCompatibility::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'Vehicle_Hitch_C_CheckCompatibility::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_Array_Get_Item) == 0x000020, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_Array_Contains_ReturnValue) == 0x000029, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CheckCompatibility, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'Vehicle_Hitch_C_CheckCompatibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.CreateConstraintFrames
// 0x0260 (0x0260 - 0x0000)
struct Vehicle_Hitch_C_CreateConstraintFrames final
{
public:
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0080(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_2;     // 0x00E0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0140(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_3;     // 0x01A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue_1;      // 0x0200(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_CreateConstraintFrames) == 0x000010, "Wrong alignment on Vehicle_Hitch_C_CreateConstraintFrames");
static_assert(sizeof(Vehicle_Hitch_C_CreateConstraintFrames) == 0x000260, "Wrong size on Vehicle_Hitch_C_CreateConstraintFrames");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_GetVehicleMesh_Mesh) == 0x000000, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_GetVehicleMesh_Mesh_1) == 0x000070, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000080, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_K2_GetComponentToWorld_ReturnValue_2) == 0x0000E0, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_K2_GetComponentToWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000140, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_K2_GetComponentToWorld_ReturnValue_3) == 0x0001A0, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_K2_GetComponentToWorld_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateConstraintFrames, CallFunc_MakeRelativeTransform_ReturnValue_1) == 0x000200, "Member 'Vehicle_Hitch_C_CreateConstraintFrames::CallFunc_MakeRelativeTransform_ReturnValue_1' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.CreateHitchConstraint
// 0x0030 (0x0030 - 0x0000)
struct Vehicle_Hitch_C_CreateHitchConstraint final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         K2Node_DynamicCast_AsAVS_Vehicle;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleConstraint*                     CallFunc_CreateHitchConstraints_VehicleConstraint; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                CallFunc_CreateHitchConstraints_PhysicsHandle;     // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_CreateHitchConstraint) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_CreateHitchConstraint");
static_assert(sizeof(Vehicle_Hitch_C_CreateHitchConstraint) == 0x000030, "Wrong size on Vehicle_Hitch_C_CreateHitchConstraint");
static_assert(offsetof(Vehicle_Hitch_C_CreateHitchConstraint, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'Vehicle_Hitch_C_CreateHitchConstraint::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateHitchConstraint, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'Vehicle_Hitch_C_CreateHitchConstraint::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateHitchConstraint, K2Node_DynamicCast_AsAVS_Vehicle) == 0x000010, "Member 'Vehicle_Hitch_C_CreateHitchConstraint::K2Node_DynamicCast_AsAVS_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateHitchConstraint, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Vehicle_Hitch_C_CreateHitchConstraint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateHitchConstraint, CallFunc_CreateHitchConstraints_VehicleConstraint) == 0x000020, "Member 'Vehicle_Hitch_C_CreateHitchConstraint::CallFunc_CreateHitchConstraints_VehicleConstraint' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_CreateHitchConstraint, CallFunc_CreateHitchConstraints_PhysicsHandle) == 0x000028, "Member 'Vehicle_Hitch_C_CreateHitchConstraint::CallFunc_CreateHitchConstraints_PhysicsHandle' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.ExecuteUbergraph_Vehicle_Hitch
// 0x00F0 (0x00F0 - 0x0000)
struct Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0028(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_AnimationLength;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ConstraintIndex;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 ConstraintIndex)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VEase_ReturnValue;                        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitchNetworkData                      K2Node_CustomEvent_HitchNetworkData;               // 0x00B8(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Hitch_C*                       CallFunc_GetHitchedTo_HitchedTo;                   // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VEase_Alpha_ImplicitCast;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch");
static_assert(sizeof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch) == 0x0000F0, "Wrong size on Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, EntryPoint) == 0x000000, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::EntryPoint' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000028, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_Event_DeltaSeconds) == 0x000030, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_CustomEvent_AnimationLength) == 0x000038, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_CustomEvent_AnimationLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000040, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x000044, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_CustomEvent_ConstraintIndex) == 0x000050, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_CustomEvent_ConstraintIndex' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_IsValid_ReturnValue_1) == 0x000055, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_CreateDelegate_OutputDelegate_2) == 0x000058, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000068, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_VEase_ReturnValue) == 0x000080, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_VEase_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_GetVehicleMesh_Mesh) == 0x000098, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000A0, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_CustomEvent_HitchNetworkData) == 0x0000B8, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_CustomEvent_HitchNetworkData' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, K2Node_Event_EndPlayReason) == 0x0000C8, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_GetHitchedTo_HitchedTo) == 0x0000D0, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_GetHitchedTo_HitchedTo' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_IsValid_ReturnValue_2) == 0x0000D8, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x0000DC, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0000E0, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch, CallFunc_VEase_Alpha_ImplicitCast) == 0x0000E8, "Member 'Vehicle_Hitch_C_ExecuteUbergraph_Vehicle_Hitch::CallFunc_VEase_Alpha_ImplicitCast' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.GetHitchedTo
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Hitch_C_GetHitchedTo final
{
public:
	class UVehicle_Hitch_C*                       HitchedTo;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_GetHitchedTo) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_GetHitchedTo");
static_assert(sizeof(Vehicle_Hitch_C_GetHitchedTo) == 0x000010, "Wrong size on Vehicle_Hitch_C_GetHitchedTo");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTo, HitchedTo) == 0x000000, "Member 'Vehicle_Hitch_C_GetHitchedTo::HitchedTo' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTo, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'Vehicle_Hitch_C_GetHitchedTo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTo, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'Vehicle_Hitch_C_GetHitchedTo::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTo, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'Vehicle_Hitch_C_GetHitchedTo::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.GetHitchedTrailer
// 0x0020 (0x0020 - 0x0000)
struct Vehicle_Hitch_C_GetHitchedTrailer final
{
public:
	class AAVS_Vehicle_C*                         Trailer;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_1;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_GetHitchedTrailer) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_GetHitchedTrailer");
static_assert(sizeof(Vehicle_Hitch_C_GetHitchedTrailer) == 0x000020, "Wrong size on Vehicle_Hitch_C_GetHitchedTrailer");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTrailer, Trailer) == 0x000000, "Member 'Vehicle_Hitch_C_GetHitchedTrailer::Trailer' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTrailer, CallFunc_GetOwningVehicle_Vehicle) == 0x000008, "Member 'Vehicle_Hitch_C_GetHitchedTrailer::CallFunc_GetOwningVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTrailer, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_GetHitchedTrailer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTrailer, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'Vehicle_Hitch_C_GetHitchedTrailer::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedTrailer, CallFunc_GetOwningVehicle_Vehicle_1) == 0x000018, "Member 'Vehicle_Hitch_C_GetHitchedTrailer::CallFunc_GetOwningVehicle_Vehicle_1' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.GetHitchedVehicle
// 0x0020 (0x0020 - 0x0000)
struct Vehicle_Hitch_C_GetHitchedVehicle final
{
public:
	class AAVS_Vehicle_C*                         Vehicle;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_1;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_GetHitchedVehicle) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_GetHitchedVehicle");
static_assert(sizeof(Vehicle_Hitch_C_GetHitchedVehicle) == 0x000020, "Wrong size on Vehicle_Hitch_C_GetHitchedVehicle");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedVehicle, Vehicle) == 0x000000, "Member 'Vehicle_Hitch_C_GetHitchedVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedVehicle, CallFunc_GetOwningVehicle_Vehicle) == 0x000008, "Member 'Vehicle_Hitch_C_GetHitchedVehicle::CallFunc_GetOwningVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedVehicle, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_GetHitchedVehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedVehicle, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'Vehicle_Hitch_C_GetHitchedVehicle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetHitchedVehicle, CallFunc_GetOwningVehicle_Vehicle_1) == 0x000018, "Member 'Vehicle_Hitch_C_GetHitchedVehicle::CallFunc_GetOwningVehicle_Vehicle_1' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.GetIsHitched
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Hitch_C_GetIsHitched final
{
public:
	bool                                          Param_IsHitched;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_GetIsHitched) == 0x000001, "Wrong alignment on Vehicle_Hitch_C_GetIsHitched");
static_assert(sizeof(Vehicle_Hitch_C_GetIsHitched) == 0x000001, "Wrong size on Vehicle_Hitch_C_GetIsHitched");
static_assert(offsetof(Vehicle_Hitch_C_GetIsHitched, Param_IsHitched) == 0x000000, "Member 'Vehicle_Hitch_C_GetIsHitched::Param_IsHitched' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.GetOwningVehicle
// 0x0020 (0x0020 - 0x0000)
struct Vehicle_Hitch_C_GetOwningVehicle final
{
public:
	class AAVS_Vehicle_C*                         Vehicle;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         K2Node_DynamicCast_AsAVS_Vehicle;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_GetOwningVehicle) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_GetOwningVehicle");
static_assert(sizeof(Vehicle_Hitch_C_GetOwningVehicle) == 0x000020, "Wrong size on Vehicle_Hitch_C_GetOwningVehicle");
static_assert(offsetof(Vehicle_Hitch_C_GetOwningVehicle, Vehicle) == 0x000000, "Member 'Vehicle_Hitch_C_GetOwningVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetOwningVehicle, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'Vehicle_Hitch_C_GetOwningVehicle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetOwningVehicle, K2Node_DynamicCast_AsAVS_Vehicle) == 0x000010, "Member 'Vehicle_Hitch_C_GetOwningVehicle::K2Node_DynamicCast_AsAVS_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetOwningVehicle, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Vehicle_Hitch_C_GetOwningVehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.GetVehicleMesh
// 0x0028 (0x0028 - 0x0000)
struct Vehicle_Hitch_C_GetVehicleMesh final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         K2Node_DynamicCast_AsAVS_Vehicle;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_GetVehicleMesh) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_GetVehicleMesh");
static_assert(sizeof(Vehicle_Hitch_C_GetVehicleMesh) == 0x000028, "Wrong size on Vehicle_Hitch_C_GetVehicleMesh");
static_assert(offsetof(Vehicle_Hitch_C_GetVehicleMesh, Mesh) == 0x000000, "Member 'Vehicle_Hitch_C_GetVehicleMesh::Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetVehicleMesh, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'Vehicle_Hitch_C_GetVehicleMesh::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetVehicleMesh, K2Node_DynamicCast_AsAVS_Vehicle) == 0x000010, "Member 'Vehicle_Hitch_C_GetVehicleMesh::K2Node_DynamicCast_AsAVS_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetVehicleMesh, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Vehicle_Hitch_C_GetVehicleMesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_GetVehicleMesh, CallFunc_GetVehicleMesh_Mesh) == 0x000020, "Member 'Vehicle_Hitch_C_GetVehicleMesh::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.Hitch
// 0x0028 (0x0028 - 0x0000)
struct Vehicle_Hitch_C_Hitch final
{
public:
	class UVehicle_Hitch_C*                       To;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Param_AnimationLength;                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitchNetworkData                      K2Node_MakeStruct_HitchNetworkData;                // 0x0010(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCompatibility_isCompatible;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_AnimationLength_5_39BF52A541D405D418EB1EA09A7F8D3E_ImplicitCast; // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_Hitch) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_Hitch");
static_assert(sizeof(Vehicle_Hitch_C_Hitch) == 0x000028, "Wrong size on Vehicle_Hitch_C_Hitch");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, To) == 0x000000, "Member 'Vehicle_Hitch_C_Hitch::To' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, Param_AnimationLength) == 0x000008, "Member 'Vehicle_Hitch_C_Hitch::Param_AnimationLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, K2Node_MakeStruct_HitchNetworkData) == 0x000010, "Member 'Vehicle_Hitch_C_Hitch::K2Node_MakeStruct_HitchNetworkData' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, CallFunc_CheckCompatibility_isCompatible) == 0x000020, "Member 'Vehicle_Hitch_C_Hitch::CallFunc_CheckCompatibility_isCompatible' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000021, "Member 'Vehicle_Hitch_C_Hitch::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000022, "Member 'Vehicle_Hitch_C_Hitch::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, K2Node_SwitchEnum_CmpSuccess) == 0x000023, "Member 'Vehicle_Hitch_C_Hitch::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitch, K2Node_MakeStruct_AnimationLength_5_39BF52A541D405D418EB1EA09A7F8D3E_ImplicitCast) == 0x000024, "Member 'Vehicle_Hitch_C_Hitch::K2Node_MakeStruct_AnimationLength_5_39BF52A541D405D418EB1EA09A7F8D3E_ImplicitCast' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.HitchConstraintBroken
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_Hitch_C_HitchConstraintBroken final
{
public:
	int32                                         ConstraintIndex;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_HitchConstraintBroken) == 0x000004, "Wrong alignment on Vehicle_Hitch_C_HitchConstraintBroken");
static_assert(sizeof(Vehicle_Hitch_C_HitchConstraintBroken) == 0x000004, "Wrong size on Vehicle_Hitch_C_HitchConstraintBroken");
static_assert(offsetof(Vehicle_Hitch_C_HitchConstraintBroken, ConstraintIndex) == 0x000000, "Member 'Vehicle_Hitch_C_HitchConstraintBroken::ConstraintIndex' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.Hitched__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Hitch_C_Hitched__DelegateSignature final
{
public:
	class UVehicle_Hitch_C*                       Param_TowHitch;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       Param_TrailerHitch;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_Hitched__DelegateSignature) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_Hitched__DelegateSignature");
static_assert(sizeof(Vehicle_Hitch_C_Hitched__DelegateSignature) == 0x000010, "Wrong size on Vehicle_Hitch_C_Hitched__DelegateSignature");
static_assert(offsetof(Vehicle_Hitch_C_Hitched__DelegateSignature, Param_TowHitch) == 0x000000, "Member 'Vehicle_Hitch_C_Hitched__DelegateSignature::Param_TowHitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Hitched__DelegateSignature, Param_TrailerHitch) == 0x000008, "Member 'Vehicle_Hitch_C_Hitched__DelegateSignature::Param_TrailerHitch' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.HitchToOverlapped
// 0x00D0 (0x00D0 - 0x0000)
struct Vehicle_Hitch_C_HitchToOverlapped final
{
public:
	double                                        Param_AnimationLength;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UShapeComponent*                        K2Node_DynamicCast_AsShape_Component;              // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_GetOverlappingComponents_OutOverlappingComponents; // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UShapeComponent*                        K2Node_DynamicCast_AsShape_Component_1;            // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetAttachParent_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Hitch_C*                       K2Node_DynamicCast_AsVehicle_Hitch;                // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         K2Node_DynamicCast_AsAVS_Vehicle;                  // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsHitched_isHitched;                   // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_HitchToOverlapped) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_HitchToOverlapped");
static_assert(sizeof(Vehicle_Hitch_C_HitchToOverlapped) == 0x0000D0, "Wrong size on Vehicle_Hitch_C_HitchToOverlapped");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Param_AnimationLength) == 0x000000, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Param_AnimationLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Temp_int_Array_Index_Variable) == 0x000014, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000019, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_SwitchEnum_CmpSuccess) == 0x00001A, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Not_PreBool_ReturnValue_1) == 0x00001B, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'Vehicle_Hitch_C_HitchToOverlapped::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_GetChildrenComponents_Children) == 0x000028, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Array_Get_Item) == 0x000040, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_AsShape_Component) == 0x000050, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_AsShape_Component' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_GetOverlappingComponents_OutOverlappingComponents) == 0x000060, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_GetOverlappingComponents_OutOverlappingComponents' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_AsShape_Component_1) == 0x000080, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_AsShape_Component_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Less_IntInt_ReturnValue_1) == 0x000089, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_GetAttachParent_ReturnValue) == 0x000090, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_GetAttachParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_BooleanAND_ReturnValue_1) == 0x000098, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_AsVehicle_Hitch) == 0x0000A0, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_AsVehicle_Hitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_GetOwner_ReturnValue) == 0x0000B0, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_AsAVS_Vehicle) == 0x0000C0, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_AsAVS_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, K2Node_DynamicCast_bSuccess_3) == 0x0000C8, "Member 'Vehicle_Hitch_C_HitchToOverlapped::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_GetIsHitched_isHitched) == 0x0000C9, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_GetIsHitched_isHitched' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_HitchToOverlapped, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000CA, "Member 'Vehicle_Hitch_C_HitchToOverlapped::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.InitHitch
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Hitch_C_InitHitch final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_InitHitch) == 0x000001, "Wrong alignment on Vehicle_Hitch_C_InitHitch");
static_assert(sizeof(Vehicle_Hitch_C_InitHitch) == 0x000001, "Wrong size on Vehicle_Hitch_C_InitHitch");
static_assert(offsetof(Vehicle_Hitch_C_InitHitch, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'Vehicle_Hitch_C_InitHitch::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Hitch_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on Vehicle_Hitch_C_ReceiveEndPlay");
static_assert(sizeof(Vehicle_Hitch_C_ReceiveEndPlay) == 0x000001, "Wrong size on Vehicle_Hitch_C_ReceiveEndPlay");
static_assert(offsetof(Vehicle_Hitch_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'Vehicle_Hitch_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_Hitch_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_ReceiveTick) == 0x000004, "Wrong alignment on Vehicle_Hitch_C_ReceiveTick");
static_assert(sizeof(Vehicle_Hitch_C_ReceiveTick) == 0x000004, "Wrong size on Vehicle_Hitch_C_ReceiveTick");
static_assert(offsetof(Vehicle_Hitch_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Vehicle_Hitch_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.RPC_Server_HitchData
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Hitch_C_RPC_Server_HitchData final
{
public:
	struct FHitchNetworkData                      Param_HitchNetworkData;                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_RPC_Server_HitchData) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_RPC_Server_HitchData");
static_assert(sizeof(Vehicle_Hitch_C_RPC_Server_HitchData) == 0x000010, "Wrong size on Vehicle_Hitch_C_RPC_Server_HitchData");
static_assert(offsetof(Vehicle_Hitch_C_RPC_Server_HitchData, Param_HitchNetworkData) == 0x000000, "Member 'Vehicle_Hitch_C_RPC_Server_HitchData::Param_HitchNetworkData' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.SetIsHitched
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Hitch_C_SetIsHitched final
{
public:
	bool                                          Param_IsHitched;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_SetIsHitched) == 0x000001, "Wrong alignment on Vehicle_Hitch_C_SetIsHitched");
static_assert(sizeof(Vehicle_Hitch_C_SetIsHitched) == 0x000001, "Wrong size on Vehicle_Hitch_C_SetIsHitched");
static_assert(offsetof(Vehicle_Hitch_C_SetIsHitched, Param_IsHitched) == 0x000000, "Member 'Vehicle_Hitch_C_SetIsHitched::Param_IsHitched' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.SetTowHitch
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Hitch_C_SetTowHitch final
{
public:
	class UVehicle_Hitch_C*                       Param_TowHitch;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_SetTowHitch) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_SetTowHitch");
static_assert(sizeof(Vehicle_Hitch_C_SetTowHitch) == 0x000008, "Wrong size on Vehicle_Hitch_C_SetTowHitch");
static_assert(offsetof(Vehicle_Hitch_C_SetTowHitch, Param_TowHitch) == 0x000000, "Member 'Vehicle_Hitch_C_SetTowHitch::Param_TowHitch' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.StartHitchAnimation
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Hitch_C_StartHitchAnimation final
{
public:
	double                                        Param_AnimationLength;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_StartHitchAnimation) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_StartHitchAnimation");
static_assert(sizeof(Vehicle_Hitch_C_StartHitchAnimation) == 0x000008, "Wrong size on Vehicle_Hitch_C_StartHitchAnimation");
static_assert(offsetof(Vehicle_Hitch_C_StartHitchAnimation, Param_AnimationLength) == 0x000000, "Member 'Vehicle_Hitch_C_StartHitchAnimation::Param_AnimationLength' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.Unhitch
// 0x0018 (0x0018 - 0x0000)
struct Vehicle_Hitch_C_Unhitch final
{
public:
	struct FHitchNetworkData                      K2Node_MakeStruct_HitchNetworkData;                // 0x0000(0x0010)(ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_Unhitch) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_Unhitch");
static_assert(sizeof(Vehicle_Hitch_C_Unhitch) == 0x000018, "Wrong size on Vehicle_Hitch_C_Unhitch");
static_assert(offsetof(Vehicle_Hitch_C_Unhitch, K2Node_MakeStruct_HitchNetworkData) == 0x000000, "Member 'Vehicle_Hitch_C_Unhitch::K2Node_MakeStruct_HitchNetworkData' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Unhitch, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_Unhitch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_Unhitch, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'Vehicle_Hitch_C_Unhitch::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.UpdateIsHitched
// 0x0030 (0x0030 - 0x0000)
struct Vehicle_Hitch_C_UpdateIsHitched final
{
public:
	class UVehicle_Hitch_C*                       Param_TowHitch;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       Param_TrailerHitch;                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         K2Node_DynamicCast_AsAVS_Vehicle;                  // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_UpdateIsHitched) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_UpdateIsHitched");
static_assert(sizeof(Vehicle_Hitch_C_UpdateIsHitched) == 0x000030, "Wrong size on Vehicle_Hitch_C_UpdateIsHitched");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, Param_TowHitch) == 0x000000, "Member 'Vehicle_Hitch_C_UpdateIsHitched::Param_TowHitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, Param_TrailerHitch) == 0x000008, "Member 'Vehicle_Hitch_C_UpdateIsHitched::Param_TrailerHitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, K2Node_DynamicCast_AsAVS_Vehicle) == 0x000020, "Member 'Vehicle_Hitch_C_UpdateIsHitched::K2Node_DynamicCast_AsAVS_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'Vehicle_Hitch_C_UpdateIsHitched::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_BooleanAND_ReturnValue) == 0x00002A, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_IsValid_ReturnValue_1) == 0x00002B, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_IsValid_ReturnValue_2) == 0x00002C, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_IsValid_ReturnValue_3) == 0x00002D, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_BooleanAND_ReturnValue_1) == 0x00002E, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_UpdateIsHitched, CallFunc_BooleanAND_ReturnValue_2) == 0x00002F, "Member 'Vehicle_Hitch_C_UpdateIsHitched::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function Vehicle_Hitch.Vehicle_Hitch_C.WakeIfValid
// 0x0030 (0x0030 - 0x0000)
struct Vehicle_Hitch_C_WakeIfValid final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_1;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Hitch_C_WakeIfValid) == 0x000008, "Wrong alignment on Vehicle_Hitch_C_WakeIfValid");
static_assert(sizeof(Vehicle_Hitch_C_WakeIfValid) == 0x000030, "Wrong size on Vehicle_Hitch_C_WakeIfValid");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_GetOwningVehicle_Vehicle) == 0x000008, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_GetOwningVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_GetOwningVehicle_Vehicle_1) == 0x000010, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_GetOwningVehicle_Vehicle_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_IsValid_ReturnValue_2) == 0x000018, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_IsValid_ReturnValue_3) == 0x000019, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_GetVehicleMesh_Mesh) == 0x000020, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Hitch_C_WakeIfValid, CallFunc_GetVehicleMesh_Mesh_1) == 0x000028, "Member 'Vehicle_Hitch_C_WakeIfValid::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");

}

