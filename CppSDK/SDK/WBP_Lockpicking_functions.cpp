#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Lockpicking

#include "Basic.hpp"

#include "WBP_Lockpicking_classes.hpp"
#include "WBP_Lockpicking_parameters.hpp"


namespace SDK
{

// Function WBP_Lockpicking.WBP_Lockpicking_C.CollapseWidget
// (BlueprintCallable, BlueprintEvent)

void UWBP_Lockpicking_C::CollapseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "CollapseWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Lockpicking_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.ExecuteUbergraph_WBP_Lockpicking
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Lockpicking_C::ExecuteUbergraph_WBP_Lockpicking(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "ExecuteUbergraph_WBP_Lockpicking");

	Params::WBP_Lockpicking_C_ExecuteUbergraph_WBP_Lockpicking Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.GetLockpickNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Num                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Lockpicking_C::GetLockpickNum(int32* Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "GetLockpickNum");

	Params::WBP_Lockpicking_C_GetLockpickNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Num != nullptr)
		*Num = Parms.Num;
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.InitSubWidgets
// (BlueprintCallable, BlueprintEvent)

void UWBP_Lockpicking_C::InitSubWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "InitSubWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.OnExit__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWBP_Lockpicking_C::OnExit__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "OnExit__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_Lockpicking_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_Lockpicking_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "OnKeyDown");

	Params::WBP_Lockpicking_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_Lockpicking_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "OnMouseButtonDown");

	Params::WBP_Lockpicking_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_Lockpicking_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "OnMouseButtonUp");

	Params::WBP_Lockpicking_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UWBP_Lockpicking_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "OnMouseMove");

	Params::WBP_Lockpicking_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.RemoveLockpick
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasLockpick                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Lockpicking_C::RemoveLockpick(bool* HasLockpick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "RemoveLockpick");

	Params::WBP_Lockpicking_C_RemoveLockpick Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasLockpick != nullptr)
		*HasLockpick = Parms.HasLockpick;
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.RunExitEvent
// (BlueprintCallable, BlueprintEvent)

void UWBP_Lockpicking_C::RunExitEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "RunExitEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.ShowSuccessMessage
// (BlueprintCallable, BlueprintEvent)

void UWBP_Lockpicking_C::ShowSuccessMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "ShowSuccessMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Lockpicking_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "Tick");

	Params::WBP_Lockpicking_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Lockpicking.WBP_Lockpicking_C.UpdateLockpickNum
// (BlueprintCallable, BlueprintEvent)

void UWBP_Lockpicking_C::UpdateLockpickNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Lockpicking_C", "UpdateLockpickNum");

	UObject::ProcessEvent(Func, nullptr);
}

}

