#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FirebaseFeatures

#include "Basic.hpp"

#include "FirebaseFeatures_classes.hpp"
#include "FirebaseFeatures_parameters.hpp"


namespace SDK
{

// Function FirebaseFeatures.AuthMiscLibrary.CreateOAuthProvider
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFederatedOAuthProviderData      ProviderData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFederatedAuthProvider           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFederatedAuthProvider UAuthMiscLibrary::CreateOAuthProvider(const struct FFederatedOAuthProviderData& ProviderData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AuthMiscLibrary", "CreateOAuthProvider");

	Params::AuthMiscLibrary_CreateOAuthProvider Parms{};

	Parms.ProviderData = std::move(ProviderData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AuthMiscLibrary.CurrentUser
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UUser*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUser* UAuthMiscLibrary::CurrentUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AuthMiscLibrary", "CurrentUser");

	Params::AuthMiscLibrary_CurrentUser Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AuthMiscLibrary.FromAppleSignCredential
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAppleSignInCredential           Credential                                             (Parm, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UAuthMiscLibrary::FromAppleSignCredential(const struct FAppleSignInCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AuthMiscLibrary", "FromAppleSignCredential");

	Params::AuthMiscLibrary_FromAppleSignCredential Parms{};

	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AuthMiscLibrary.IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAuthMiscLibrary::IsValid(const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AuthMiscLibrary", "IsValid");

	Params::AuthMiscLibrary_IsValid Parms{};

	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AuthMiscLibrary.Provider
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAuthMiscLibrary::Provider(const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AuthMiscLibrary", "Provider");

	Params::AuthMiscLibrary_Provider Parms{};

	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AuthMiscLibrary.SignOut
// (Final, Native, Static, Public, BlueprintCallable)

void UAuthMiscLibrary::SignOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AuthMiscLibrary", "SignOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.ReauthenticateAndRetrieveDataProxy.ReauthenticateAndRetrieveData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UReauthenticateAndRetrieveDataProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UReauthenticateAndRetrieveDataProxy* UReauthenticateAndRetrieveDataProxy::ReauthenticateAndRetrieveData(const class UUser* User, const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReauthenticateAndRetrieveDataProxy", "ReauthenticateAndRetrieveData");

	Params::ReauthenticateAndRetrieveDataProxy_ReauthenticateAndRetrieveData Parms{};

	Parms.User = User;
	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FetchProvidersForEmailProxy.FetchProvidersForEmail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFetchProvidersForEmailProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFetchProvidersForEmailProxy* UFetchProvidersForEmailProxy::FetchProvidersForEmail(const class FString& Email)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FetchProvidersForEmailProxy", "FetchProvidersForEmail");

	Params::FetchProvidersForEmailProxy_FetchProvidersForEmail Parms{};

	Parms.Email = std::move(Email);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SignInWithCustomTokenProxy.SignInWithCustomToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USignInWithCustomTokenProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USignInWithCustomTokenProxy* USignInWithCustomTokenProxy::SignInWithCustomToken(const class FString& Token)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SignInWithCustomTokenProxy", "SignInWithCustomToken");

	Params::SignInWithCustomTokenProxy_SignInWithCustomToken Parms{};

	Parms.Token = std::move(Token);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GetAnalyticsInstanceIdProxy.GetAnalyticsInstanceId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGetAnalyticsInstanceIdProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetAnalyticsInstanceIdProxy* UGetAnalyticsInstanceIdProxy::GetAnalyticsInstanceId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetAnalyticsInstanceIdProxy", "GetAnalyticsInstanceId");

	Params::GetAnalyticsInstanceIdProxy_GetAnalyticsInstanceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.ProviderData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FUserInfoInterface>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FUserInfoInterface> UUser::ProviderData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "ProviderData");

	Params::User_ProviderData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.DisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUser::DisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "DisplayName");

	Params::User_DisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.Email
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUser::Email() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "Email");

	Params::User_Email Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.IsAnonymous
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUser::IsAnonymous() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "IsAnonymous");

	Params::User_IsAnonymous Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.IsEmailVerified
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUser::IsEmailVerified() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "IsEmailVerified");

	Params::User_IsEmailVerified Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.Metadata
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUserMetadata                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FUserMetadata UUser::Metadata() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "Metadata");

	Params::User_Metadata Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.PhoneNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUser::PhoneNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "PhoneNumber");

	Params::User_PhoneNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.PhotoUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUser::PhotoUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "PhotoUrl");

	Params::User_PhotoUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.ProviderId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUser::ProviderId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "ProviderId");

	Params::User_ProviderId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.User.Uid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUser::Uid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("User", "Uid");

	Params::User_Uid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SignInWithCredentialProxy.SignInWithCredential
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USignInWithCredentialProxy*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USignInWithCredentialProxy* USignInWithCredentialProxy::SignInWithCredential(const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SignInWithCredentialProxy", "SignInWithCredential");

	Params::SignInWithCredentialProxy_SignInWithCredential Parms{};

	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SignInWithProviderProxy.SignInWithProvider
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFederatedAuthProvider           AuthProvider                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USignInWithProviderProxy*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USignInWithProviderProxy* USignInWithProviderProxy::SignInWithProvider(const struct FFederatedAuthProvider& AuthProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SignInWithProviderProxy", "SignInWithProvider");

	Params::SignInWithProviderProxy_SignInWithProvider Parms{};

	Parms.AuthProvider = std::move(AuthProvider);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CreateInterstitialAd.CreateInterstitialAd
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           AdUnitId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCreateInterstitialAd*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCreateInterstitialAd* UCreateInterstitialAd::CreateInterstitialAd(const class FString& AdUnitId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CreateInterstitialAd", "CreateInterstitialAd");

	Params::CreateInterstitialAd_CreateInterstitialAd Parms{};

	Parms.AdUnitId = std::move(AdUnitId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageUpdateMetadataProxy.UpdateMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UStorageUpdateMetadataProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStorageUpdateMetadataProxy* UStorageUpdateMetadataProxy::UpdateMetadata(class UFirebaseStorageReference* StorageReference, const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageUpdateMetadataProxy", "UpdateMetadata");

	Params::StorageUpdateMetadataProxy_UpdateMetadata Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SignInAndRetrieveDataWithCredentialProxy.SignInAndRetrieveDataWithCredential
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USignInAndRetrieveDataWithCredentialProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USignInAndRetrieveDataWithCredentialProxy* USignInAndRetrieveDataWithCredentialProxy::SignInAndRetrieveDataWithCredential(const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SignInAndRetrieveDataWithCredentialProxy", "SignInAndRetrieveDataWithCredential");

	Params::SignInAndRetrieveDataWithCredentialProxy_SignInAndRetrieveDataWithCredential Parms{};

	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SignInAnonymouslyProxy.SignInAnonymously
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USignInAnonymouslyProxy*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USignInAnonymouslyProxy* USignInAnonymouslyProxy::SignInAnonymously()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SignInAnonymouslyProxy", "SignInAnonymously");

	Params::SignInAnonymouslyProxy_SignInAnonymously Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UpdatePasswordProxy.UpdatePassword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUpdatePasswordProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUpdatePasswordProxy* UUpdatePasswordProxy::UpdatePassword(const class UUser* User, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpdatePasswordProxy", "UpdatePassword");

	Params::UpdatePasswordProxy_UpdatePassword Parms{};

	Parms.User = User;
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SignInWithEmailAndPasswordProxy.SignInWithEmailAndPassword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USignInWithEmailAndPasswordProxy* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USignInWithEmailAndPasswordProxy* USignInWithEmailAndPasswordProxy::SignInWithEmailAndPassword(const class FString& Email, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SignInWithEmailAndPasswordProxy", "SignInWithEmailAndPassword");

	Params::SignInWithEmailAndPasswordProxy_SignInWithEmailAndPassword Parms{};

	Parms.Email = std::move(Email);
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CrashlyticsLibrary.CrashApplication
// (Final, Native, Static, Public, BlueprintCallable)

void UCrashlyticsLibrary::CrashApplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "CrashApplication");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.DeleteUnsentReports
// (Final, Native, Static, Public, BlueprintCallable)

void UCrashlyticsLibrary::DeleteUnsentReports()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "DeleteUnsentReports");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.DidCrashDuringPreviousExecution
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCrashlyticsLibrary::DidCrashDuringPreviousExecution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "DidCrashDuringPreviousExecution");

	Params::CrashlyticsLibrary_DidCrashDuringPreviousExecution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CrashlyticsLibrary.IsCrashlyticsCollectionEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCrashlyticsLibrary::IsCrashlyticsCollectionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "IsCrashlyticsCollectionEnabled");

	Params::CrashlyticsLibrary_IsCrashlyticsCollectionEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CrashlyticsLibrary.Log
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::Log(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "Log");

	Params::CrashlyticsLibrary_Log Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.RecordError
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Domain                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Code                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::RecordError(const class FString& Domain, const class FString& Message, const int64 Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "RecordError");

	Params::CrashlyticsLibrary_RecordError Parms{};

	Parms.Domain = std::move(Domain);
	Parms.Message = std::move(Message);
	Parms.Code = Code;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SendUnsentReports
// (Final, Native, Static, Public, BlueprintCallable)

void UCrashlyticsLibrary::SendUnsentReports()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SendUnsentReports");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCrashlyticsCollectionEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCrashlyticsCollectionEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCrashlyticsCollectionEnabled");

	Params::CrashlyticsLibrary_SetCrashlyticsCollectionEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCustomBoolValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCustomBoolValue(const class FString& Key, const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCustomBoolValue");

	Params::CrashlyticsLibrary_SetCustomBoolValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCustomFloatValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCustomFloatValue(const class FString& Key, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCustomFloatValue");

	Params::CrashlyticsLibrary_SetCustomFloatValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCustomInt32Value
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCustomInt32Value(const class FString& Key, const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCustomInt32Value");

	Params::CrashlyticsLibrary_SetCustomInt32Value Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCustomInt64Value
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCustomInt64Value(const class FString& Key, const int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCustomInt64Value");

	Params::CrashlyticsLibrary_SetCustomInt64Value Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCustomStringValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCustomStringValue(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCustomStringValue");

	Params::CrashlyticsLibrary_SetCustomStringValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetCustomVectorValue
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetCustomVectorValue(const class FString& Key, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetCustomVectorValue");

	Params::CrashlyticsLibrary_SetCustomVectorValue Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CrashlyticsLibrary.SetUserID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCrashlyticsLibrary::SetUserID(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CrashlyticsLibrary", "SetUserID");

	Params::CrashlyticsLibrary_SetUserID Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.CreateUserWithEmailAndPasswordProxy.CreateUserWithEmailAndPassword
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCreateUserWithEmailAndPasswordProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCreateUserWithEmailAndPasswordProxy* UCreateUserWithEmailAndPasswordProxy::CreateUserWithEmailAndPassword(const class FString& Email, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CreateUserWithEmailAndPasswordProxy", "CreateUserWithEmailAndPassword");

	Params::CreateUserWithEmailAndPasswordProxy_CreateUserWithEmailAndPassword Parms{};

	Parms.Email = std::move(Email);
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UpdatePhoneNumberCredentialProxy.UpdatePhoneNumberCredential
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UUpdatePhoneNumberCredentialProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUpdatePhoneNumberCredentialProxy* UUpdatePhoneNumberCredentialProxy::UpdatePhoneNumberCredential(const class UUser* User, const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpdatePhoneNumberCredentialProxy", "UpdatePhoneNumberCredential");

	Params::UpdatePhoneNumberCredentialProxy_UpdatePhoneNumberCredential Parms{};

	Parms.User = User;
	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SendPasswordResetEmailProxy.SendPasswordResetEmail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USendPasswordResetEmailProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USendPasswordResetEmailProxy* USendPasswordResetEmailProxy::SendPasswordResetEmail(const class FString& Email)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SendPasswordResetEmailProxy", "SendPasswordResetEmail");

	Params::SendPasswordResetEmailProxy_SendPasswordResetEmail Parms{};

	Parms.Email = std::move(Email);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ListenAuthEventsProxy.ListenAuthEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UListenAuthEventsProxy*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UListenAuthEventsProxy* UListenAuthEventsProxy::ListenAuthEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ListenAuthEventsProxy", "ListenAuthEvents");

	Params::ListenAuthEventsProxy_ListenAuthEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SendEmailVerificationProxy.SendEmailVerification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USendEmailVerificationProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USendEmailVerificationProxy* USendEmailVerificationProxy::SendEmailVerification(const class UUser* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SendEmailVerificationProxy", "SendEmailVerification");

	Params::SendEmailVerificationProxy_SendEmailVerification Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AppleSignInGetCred.GetCredential
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Nonce                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAppleSignInGetCred*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppleSignInGetCred* UAppleSignInGetCred::GetCredential(const class FString& Nonce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppleSignInGetCred", "GetCredential");

	Params::AppleSignInGetCred_GetCredential Parms{};

	Parms.Nonce = std::move(Nonce);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GetInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDatabase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabase* UDatabase::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Database", "GetInstance");

	Params::Database_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GetInstanceFromUrl
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabase* UDatabase::GetInstanceFromUrl(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Database", "GetInstanceFromUrl");

	Params::Database_GetInstanceFromUrl Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GetInstanceReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabase::GetInstanceReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Database", "GetInstanceReference");

	Params::Database_GetInstanceReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GetUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDatabase::GetUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "GetUrl");

	Params::Database_GetUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GoOffline
// (Final, Native, Public, BlueprintCallable)

void UDatabase::GoOffline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "GoOffline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.Database.GoOnline
// (Final, Native, Public, BlueprintCallable)

void UDatabase::GoOnline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "GoOnline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.Database.PurgeOutstandingWrites
// (Final, Native, Public, BlueprintCallable)

void UDatabase::PurgeOutstandingWrites()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "PurgeOutstandingWrites");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.Database.SetLogLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EDatabaseLogLevel                       DatabaseLogLevel                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDatabase::SetLogLevel(const EDatabaseLogLevel DatabaseLogLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "SetLogLevel");

	Params::Database_SetLogLevel Parms{};

	Parms.DatabaseLogLevel = DatabaseLogLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.Database.SetPersistenceEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDatabase::SetPersistenceEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "SetPersistenceEnabled");

	Params::Database_SetPersistenceEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.Database.GetReference
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabase::GetReference() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "GetReference");

	Params::Database_GetReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GetReferenceFromPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabase::GetReferenceFromPath(const class FString& Path) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "GetReferenceFromPath");

	Params::Database_GetReferenceFromPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Database.GetReferenceFromUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabase::GetReferenceFromUrl(const class FString& URL) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Database", "GetReferenceFromUrl");

	Params::Database_GetReferenceFromUrl Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.AppleSignInGetNativeCred.GetCredential
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Nonce                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAppleSignInGetNativeCred*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppleSignInGetNativeCred* UAppleSignInGetNativeCred::GetCredential(const class FString& Nonce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppleSignInGetNativeCred", "GetCredential");

	Params::AppleSignInGetNativeCred_GetCredential Parms{};

	Parms.Nonce = std::move(Nonce);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GetTokenProxy.GetToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceRefresh                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGetTokenProxy*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetTokenProxy* UGetTokenProxy::GetToken(const class UUser* User, const bool bForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetTokenProxy", "GetToken");

	Params::GetTokenProxy_GetToken Parms{};

	Parms.User = User;
	Parms.bForceRefresh = bForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.AddSnapshotListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(EFirestoreError Error, TArray<struct FFirestoreDocumentSnapshot>& DocumentSnapshots, TArray<class UFirestoreDocumentChange*>& DocumentChanges)>Listener                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuerySnapshotListenerHandle     ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FQuerySnapshotListenerHandle UFirestoreQuery::AddSnapshotListener(TDelegate<void(EFirestoreError Error, TArray<struct FFirestoreDocumentSnapshot>& DocumentSnapshots, TArray<class UFirestoreDocumentChange*>& DocumentChanges)> Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "AddSnapshotListener");

	Params::FirestoreQuery_AddSnapshotListener Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.EndAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreDocumentSnapshot       Snapshot                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::EndAt(const struct FFirestoreDocumentSnapshot& Snapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "EndAt");

	Params::FirestoreQuery_EndAt Parms{};

	Parms.Snapshot = std::move(Snapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.EndAtValues
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::EndAtValues(const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "EndAtValues");

	Params::FirestoreQuery_EndAtValues Parms{};

	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.EndBefore
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreDocumentSnapshot       Snapshot                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::EndBefore(const struct FFirestoreDocumentSnapshot& Snapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "EndBefore");

	Params::FirestoreQuery_EndBefore Parms{};

	Parms.Snapshot = std::move(Snapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.EndBeforeFieldValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::EndBeforeFieldValue(const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "EndBeforeFieldValue");

	Params::FirestoreQuery_EndBeforeFieldValue Parms{};

	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.Limit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Limit                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::Limit(int32 Param_Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "Limit");

	Params::FirestoreQuery_Limit Parms{};

	Parms.Param_Limit = Param_Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.LimitToLast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Limit                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::LimitToLast(int32 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "LimitToLast");

	Params::FirestoreQuery_LimitToLast Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.OrderBy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreQueryDirection                Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::OrderBy(const class FString& Field, EFirestoreQueryDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "OrderBy");

	Params::FirestoreQuery_OrderBy Parms{};

	Parms.Field = std::move(Field);
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.OrderByFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreQueryDirection                Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::OrderByFieldPath(const struct FFirestoreFieldPath& Field, EFirestoreQueryDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "OrderByFieldPath");

	Params::FirestoreQuery_OrderByFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.StartAfter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreDocumentSnapshot       Snapshot                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::StartAfter(const struct FFirestoreDocumentSnapshot& Snapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "StartAfter");

	Params::FirestoreQuery_StartAfter Parms{};

	Parms.Snapshot = std::move(Snapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.StartAfterFieldValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::StartAfterFieldValue(const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "StartAfterFieldValue");

	Params::FirestoreQuery_StartAfterFieldValue Parms{};

	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.StartAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreDocumentSnapshot       Snapshot                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::StartAt(const struct FFirestoreDocumentSnapshot& Snapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "StartAt");

	Params::FirestoreQuery_StartAt Parms{};

	Parms.Snapshot = std::move(Snapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.StartAtFieldValue
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::StartAtFieldValue(const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "StartAtFieldValue");

	Params::FirestoreQuery_StartAtFieldValue Parms{};

	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereArrayContains
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereArrayContains(const class FString& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereArrayContains");

	Params::FirestoreQuery_WhereArrayContains Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereArrayContainsAny
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereArrayContainsAny(const class FString& Field, const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereArrayContainsAny");

	Params::FirestoreQuery_WhereArrayContainsAny Parms{};

	Parms.Field = std::move(Field);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereArrayContainsAnyFielPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereArrayContainsAnyFielPath(const struct FFirestoreFieldPath& Field, const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereArrayContainsAnyFielPath");

	Params::FirestoreQuery_WhereArrayContainsAnyFielPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereArrayContainsFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereArrayContainsFieldPath(const struct FFirestoreFieldPath& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereArrayContainsFieldPath");

	Params::FirestoreQuery_WhereArrayContainsFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereEqualTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereEqualTo(const class FString& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereEqualTo");

	Params::FirestoreQuery_WhereEqualTo Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereEqualToFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereEqualToFieldPath(const struct FFirestoreFieldPath& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereEqualToFieldPath");

	Params::FirestoreQuery_WhereEqualToFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereGreaterThan
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereGreaterThan(const class FString& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereGreaterThan");

	Params::FirestoreQuery_WhereGreaterThan Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereGreaterThanFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereGreaterThanFieldPath(const struct FFirestoreFieldPath& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereGreaterThanFieldPath");

	Params::FirestoreQuery_WhereGreaterThanFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereGreaterThanOrEqualTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereGreaterThanOrEqualTo(const class FString& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereGreaterThanOrEqualTo");

	Params::FirestoreQuery_WhereGreaterThanOrEqualTo Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereGreaterThanOrEqualToFielPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereGreaterThanOrEqualToFielPath(const struct FFirestoreFieldPath& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereGreaterThanOrEqualToFielPath");

	Params::FirestoreQuery_WhereGreaterThanOrEqualToFielPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereIn
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereIn(const class FString& Field, const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereIn");

	Params::FirestoreQuery_WhereIn Parms{};

	Parms.Field = std::move(Field);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereInFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFirestoreFieldValue>     Values                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereInFieldPath(const struct FFirestoreFieldPath& Field, const TArray<struct FFirestoreFieldValue>& Values)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereInFieldPath");

	Params::FirestoreQuery_WhereInFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Values = std::move(Values);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereLessThan
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereLessThan(const class FString& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereLessThan");

	Params::FirestoreQuery_WhereLessThan Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereLessThanFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereLessThanFieldPath(const struct FFirestoreFieldPath& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereLessThanFieldPath");

	Params::FirestoreQuery_WhereLessThanFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereLessThanOrEqualTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereLessThanOrEqualTo(const class FString& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereLessThanOrEqualTo");

	Params::FirestoreQuery_WhereLessThanOrEqualTo Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.WhereLessThanOrEqualToFieldPath
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestoreQuery::WhereLessThanOrEqualToFieldPath(const struct FFirestoreFieldPath& Field, const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "WhereLessThanOrEqualToFieldPath");

	Params::FirestoreQuery_WhereLessThanOrEqualToFieldPath Parms{};

	Parms.Field = std::move(Field);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreQuery.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreQuery::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreQuery", "IsValid");

	Params::FirestoreQuery_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreCollectionReference.GetDocument
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirestoreDocumentReference*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreDocumentReference* UFirestoreCollectionReference::GetDocument() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreCollectionReference", "GetDocument");

	Params::FirestoreCollectionReference_GetDocument Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreCollectionReference.GetDocumentFromPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           DocumentPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreDocumentReference* UFirestoreCollectionReference::GetDocumentFromPath(const class FString& DocumentPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreCollectionReference", "GetDocumentFromPath");

	Params::FirestoreCollectionReference_GetDocumentFromPath Parms{};

	Parms.DocumentPath = std::move(DocumentPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreCollectionReference.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreCollectionReference::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreCollectionReference", "GetId");

	Params::FirestoreCollectionReference_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreCollectionReference.GetParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirestoreDocumentReference*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreDocumentReference* UFirestoreCollectionReference::GetParent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreCollectionReference", "GetParent");

	Params::FirestoreCollectionReference_GetParent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreCollectionReference.GetPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreCollectionReference::GetPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreCollectionReference", "GetPath");

	Params::FirestoreCollectionReference_GetPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredential
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           VerificationId                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           VerificationCode                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredential(const class FString& VerificationId, const class FString& VerificationCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredential");

	Params::CredentialLibrary_GetCredential Parms{};

	Parms.VerificationId = std::move(VerificationId);
	Parms.VerificationCode = std::move(VerificationCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromEmail
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Password                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromEmail(const class FString& Email, const class FString& Password)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromEmail");

	Params::CredentialLibrary_GetCredentialFromEmail Parms{};

	Parms.Email = std::move(Email);
	Parms.Password = std::move(Password);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromFacebook
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromFacebook(const class FString& AccessToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromFacebook");

	Params::CredentialLibrary_GetCredentialFromFacebook Parms{};

	Parms.AccessToken = std::move(AccessToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromGitHub
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromGitHub(const class FString& Token)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromGitHub");

	Params::CredentialLibrary_GetCredentialFromGitHub Parms{};

	Parms.Token = std::move(Token);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromGoogle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromGoogle(const class FString& Token, const class FString& AccessToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromGoogle");

	Params::CredentialLibrary_GetCredentialFromGoogle Parms{};

	Parms.Token = std::move(Token);
	Parms.AccessToken = std::move(AccessToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromOAuth
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ProviderId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           IdToken                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromOAuth(const class FString& ProviderId, const class FString& IdToken, const class FString& AccessToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromOAuth");

	Params::CredentialLibrary_GetCredentialFromOAuth Parms{};

	Parms.ProviderId = std::move(ProviderId);
	Parms.IdToken = std::move(IdToken);
	Parms.AccessToken = std::move(AccessToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromOAuthWithOnce
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ProviderId                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           IdToken                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Nonce                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AccessToken                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromOAuthWithOnce(const class FString& ProviderId, const class FString& IdToken, const class FString& Nonce, const class FString& AccessToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromOAuthWithOnce");

	Params::CredentialLibrary_GetCredentialFromOAuthWithOnce Parms{};

	Parms.ProviderId = std::move(ProviderId);
	Parms.IdToken = std::move(IdToken);
	Parms.Nonce = std::move(Nonce);
	Parms.AccessToken = std::move(AccessToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromPlayGames
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ServerAuthCode                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromPlayGames(const class FString& ServerAuthCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromPlayGames");

	Params::CredentialLibrary_GetCredentialFromPlayGames Parms{};

	Parms.ServerAuthCode = std::move(ServerAuthCode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.GetCredentialFromTwitter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Token                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Secret                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FCredential UCredentialLibrary::GetCredentialFromTwitter(const class FString& Token, const class FString& Secret)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "GetCredentialFromTwitter");

	Params::CredentialLibrary_GetCredentialFromTwitter Parms{};

	Parms.Token = std::move(Token);
	Parms.Secret = std::move(Secret);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CredentialLibrary.IsAuthenticatedWithGameCenter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCredentialLibrary::IsAuthenticatedWithGameCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CredentialLibrary", "IsAuthenticatedWithGameCenter");

	Params::CredentialLibrary_IsAuthenticatedWithGameCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GetCredentialFromGameCenterProxy.GetCredentialFromGameCenter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGetCredentialFromGameCenterProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetCredentialFromGameCenterProxy* UGetCredentialFromGameCenterProxy::GetCredentialFromGameCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetCredentialFromGameCenterProxy", "GetCredentialFromGameCenter");

	Params::GetCredentialFromGameCenterProxy_GetCredentialFromGameCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VerifyPhoneNumberProxy.VerifyPhoneNumber
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PhoneNumber                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   AutoVerifyTimeoutInMilliseconds                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FForceResendingToken             ForceResendingToken                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UVerifyPhoneNumberProxy*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UVerifyPhoneNumberProxy* UVerifyPhoneNumberProxy::VerifyPhoneNumber(const class FString& PhoneNumber, const int64 AutoVerifyTimeoutInMilliseconds, const struct FForceResendingToken& ForceResendingToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VerifyPhoneNumberProxy", "VerifyPhoneNumber");

	Params::VerifyPhoneNumberProxy_VerifyPhoneNumber Parms{};

	Parms.PhoneNumber = std::move(PhoneNumber);
	Parms.AutoVerifyTimeoutInMilliseconds = AutoVerifyTimeoutInMilliseconds;
	Parms.ForceResendingToken = std::move(ForceResendingToken);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_GetChild
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMutableData                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMutableData UFirebaseDatabaseLibrary::Mutable_GetChild(struct FMutableData& MutableData, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_GetChild");

	Params::FirebaseDatabaseLibrary_Mutable_GetChild Parms{};

	Parms.MutableData = std::move(MutableData);
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MutableData = std::move(Parms.MutableData);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_GetChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FMutableData>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMutableData> UFirebaseDatabaseLibrary::Mutable_GetChildren(struct FMutableData& MutableData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_GetChildren");

	Params::FirebaseDatabaseLibrary_Mutable_GetChildren Parms{};

	Parms.MutableData = std::move(MutableData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MutableData = std::move(Parms.MutableData);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_GetChildrenCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirebaseDatabaseLibrary::Mutable_GetChildrenCount(struct FMutableData& MutableData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_GetChildrenCount");

	Params::FirebaseDatabaseLibrary_Mutable_GetChildrenCount Parms{};

	Parms.MutableData = std::move(MutableData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MutableData = std::move(Parms.MutableData);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_GetKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseDatabaseLibrary::Mutable_GetKey(const struct FMutableData& MutableData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_GetKey");

	Params::FirebaseDatabaseLibrary_Mutable_GetKey Parms{};

	Parms.MutableData = std::move(MutableData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_GetPriority
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UFirebaseDatabaseLibrary::Mutable_GetPriority(struct FMutableData& MutableData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_GetPriority");

	Params::FirebaseDatabaseLibrary_Mutable_GetPriority Parms{};

	Parms.MutableData = std::move(MutableData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MutableData = std::move(Parms.MutableData);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UFirebaseDatabaseLibrary::Mutable_GetValue(const struct FMutableData& MutableData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_GetValue");

	Params::FirebaseDatabaseLibrary_Mutable_GetValue Parms{};

	Parms.MutableData = std::move(MutableData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_HasChild
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMutableData                     MutableData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseDatabaseLibrary::Mutable_HasChild(const struct FMutableData& MutableData, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_HasChild");

	Params::FirebaseDatabaseLibrary_Mutable_HasChild Parms{};

	Parms.MutableData = std::move(MutableData);
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_SetPriority
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMutableData                     MutableData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Priority                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseDatabaseLibrary::Mutable_SetPriority(struct FMutableData& MutableData, const struct FFirebaseVariant& Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_SetPriority");

	Params::FirebaseDatabaseLibrary_Mutable_SetPriority Parms{};

	Parms.MutableData = std::move(MutableData);
	Parms.Priority = std::move(Priority);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MutableData = std::move(Parms.MutableData);
}


// Function FirebaseFeatures.FirebaseDatabaseLibrary.Mutable_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMutableData                     MutableData                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseDatabaseLibrary::Mutable_SetValue(struct FMutableData& MutableData, const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDatabaseLibrary", "Mutable_SetValue");

	Params::FirebaseDatabaseLibrary_Mutable_SetValue Parms{};

	Parms.MutableData = std::move(MutableData);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MutableData = std::move(Parms.MutableData);
}


// Function FirebaseFeatures.DisconnectionCancelProxy.Cancel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDisconnectionHandler*            DisconnectionHandler                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDisconnectionCancelProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisconnectionCancelProxy* UDisconnectionCancelProxy::Cancel(const class UDisconnectionHandler* DisconnectionHandler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DisconnectionCancelProxy", "Cancel");

	Params::DisconnectionCancelProxy_Cancel Parms{};

	Parms.DisconnectionHandler = DisconnectionHandler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DisconnectionRemoveValueProxy.RemoveValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDisconnectionHandler*            DisconnectionHandler                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDisconnectionRemoveValueProxy*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisconnectionRemoveValueProxy* UDisconnectionRemoveValueProxy::RemoveValue(const class UDisconnectionHandler* DisconnectionHandler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DisconnectionRemoveValueProxy", "RemoveValue");

	Params::DisconnectionRemoveValueProxy_RemoveValue Parms{};

	Parms.DisconnectionHandler = DisconnectionHandler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DisconnectionSetValueProxy.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDisconnectionHandler*            DisconnectionHandler                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDisconnectionSetValueProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisconnectionSetValueProxy* UDisconnectionSetValueProxy::SetValue(const class UDisconnectionHandler* DisconnectionHandler, const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DisconnectionSetValueProxy", "SetValue");

	Params::DisconnectionSetValueProxy_SetValue Parms{};

	Parms.DisconnectionHandler = DisconnectionHandler;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DisconnectionSetValueAndPriorityProxy.SetValueAndPriority
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDisconnectionHandler*            DisconnectionHandler                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Priority                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDisconnectionSetValueAndPriorityProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisconnectionSetValueAndPriorityProxy* UDisconnectionSetValueAndPriorityProxy::SetValueAndPriority(const class UDisconnectionHandler* DisconnectionHandler, const struct FFirebaseVariant& Value, const struct FFirebaseVariant& Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DisconnectionSetValueAndPriorityProxy", "SetValueAndPriority");

	Params::DisconnectionSetValueAndPriorityProxy_SetValueAndPriority Parms{};

	Parms.DisconnectionHandler = DisconnectionHandler;
	Parms.Value = std::move(Value);
	Parms.Priority = std::move(Priority);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DisconnectionUpdateChildrenProxy.UpdateChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDisconnectionHandler*            DisconnectionHandler                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDisconnectionUpdateChildrenProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisconnectionUpdateChildrenProxy* UDisconnectionUpdateChildrenProxy::UpdateChildren(const class UDisconnectionHandler* DisconnectionHandler, const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DisconnectionUpdateChildrenProxy", "UpdateChildren");

	Params::DisconnectionUpdateChildrenProxy_UpdateChildren Parms{};

	Parms.DisconnectionHandler = DisconnectionHandler;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQueryGetValue.GetValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDatabaseQuery*                   DatabaseQuery                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQueryGetValue*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQueryGetValue* UDatabaseQueryGetValue::GetValue(const class UDatabaseQuery* DatabaseQuery)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DatabaseQueryGetValue", "GetValue");

	Params::DatabaseQueryGetValue_GetValue Parms{};

	Parms.DatabaseQuery = DatabaseQuery;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.RemoveValueProxy.RemoveValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDatabaseReference*               DatabaseReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URemoveValueProxy*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URemoveValueProxy* URemoveValueProxy::RemoveValue(const class UDatabaseReference* DatabaseReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoveValueProxy", "RemoveValue");

	Params::RemoveValueProxy_RemoveValue Parms{};

	Parms.DatabaseReference = DatabaseReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.RunTransactionProxy.RunTransaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDatabaseReference*               DatabaseReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTriggerLocalEvents                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(struct FMutableData& Data)>TransactionFunction                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class URunTransactionProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URunTransactionProxy* URunTransactionProxy::RunTransaction(const class UDatabaseReference* DatabaseReference, const bool bTriggerLocalEvents, const TDelegate<void(struct FMutableData& Data)>& TransactionFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RunTransactionProxy", "RunTransaction");

	Params::RunTransactionProxy_RunTransaction Parms{};

	Parms.DatabaseReference = DatabaseReference;
	Parms.bTriggerLocalEvents = bTriggerLocalEvents;
	Parms.TransactionFunction = TransactionFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SetPriorityProxy.SetPriority
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDatabaseReference*               DatabaseReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Priority                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USetPriorityProxy*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USetPriorityProxy* USetPriorityProxy::SetPriority(const class UDatabaseReference* DatabaseReference, const struct FFirebaseVariant& Priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetPriorityProxy", "SetPriority");

	Params::SetPriorityProxy_SetPriority Parms{};

	Parms.DatabaseReference = DatabaseReference;
	Parms.Priority = std::move(Priority);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SetValueProxy.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDatabaseReference*               DatabaseReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USetValueProxy*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USetValueProxy* USetValueProxy::SetValue(const class UDatabaseReference* DatabaseReference, const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetValueProxy", "SetValue");

	Params::SetValueProxy_SetValue Parms{};

	Parms.DatabaseReference = DatabaseReference;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SetValueAndPriorityProxy.SetValueAndPriority
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDatabaseReference*               DatabaseReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Priority                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USetValueAndPriorityProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USetValueAndPriorityProxy* USetValueAndPriorityProxy::SetValueAndPriority(const class UDatabaseReference* DatabaseReference, const struct FFirebaseVariant& Priority, const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SetValueAndPriorityProxy", "SetValueAndPriority");

	Params::SetValueAndPriorityProxy_SetValueAndPriority Parms{};

	Parms.DatabaseReference = DatabaseReference;
	Parms.Priority = std::move(Priority);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UpdateChildrenProxy.UpdateChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UDatabaseReference*               DatabaseReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUpdateChildrenProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUpdateChildrenProxy* UUpdateChildrenProxy::UpdateChildren(const class UDatabaseReference* DatabaseReference, const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpdateChildrenProxy", "UpdateChildren");

	Params::UpdateChildrenProxy_UpdateChildren Parms{};

	Parms.DatabaseReference = DatabaseReference;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.ChildrenCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UDataSnapshot::ChildrenCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "ChildrenCount");

	Params::DataSnapshot_ChildrenCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.Exists
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDataSnapshot::Exists() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "Exists");

	Params::DataSnapshot_Exists Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.GetChild
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataSnapshot*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataSnapshot* UDataSnapshot::GetChild(const class FString& Path) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "GetChild");

	Params::DataSnapshot_GetChild Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.GetChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UDataSnapshot*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UDataSnapshot*> UDataSnapshot::GetChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "GetChildren");

	Params::DataSnapshot_GetChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDataSnapshot::GetKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "GetKey");

	Params::DataSnapshot_GetKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.GetPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UDataSnapshot::GetPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "GetPriority");

	Params::DataSnapshot_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.GetReference
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDataSnapshot::GetReference() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "GetReference");

	Params::DataSnapshot_GetReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UDataSnapshot::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "GetValue");

	Params::DataSnapshot_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.HasChild
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDataSnapshot::HasChild(const class FString& Path) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "HasChild");

	Params::DataSnapshot_HasChild Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.HasChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDataSnapshot::HasChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "HasChildren");

	Params::DataSnapshot_HasChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDataSnapshot::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "IsValid");

	Params::DataSnapshot_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DataSnapshot.ToJson
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDataSnapshot::ToJson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DataSnapshot", "ToJson");

	Params::DataSnapshot_ToJson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.ClearListeners
// (Final, Native, Public, BlueprintCallable)

void UDatabaseQuery::ClearListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "ClearListeners");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.DatabaseQuery.EndAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseVariant                 OrderValue                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::EndAt(const struct FFirebaseVariant& OrderValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "EndAt");

	Params::DatabaseQuery_EndAt Parms{};

	Parms.OrderValue = std::move(OrderValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.EndAtKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseVariant                 OrderValue                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChildKey                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::EndAtKey(const struct FFirebaseVariant& OrderValue, const class FString& ChildKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "EndAtKey");

	Params::DatabaseQuery_EndAtKey Parms{};

	Parms.OrderValue = std::move(OrderValue);
	Parms.ChildKey = std::move(ChildKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.EqualTo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseVariant                 OrderValue                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::EqualTo(const struct FFirebaseVariant& OrderValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "EqualTo");

	Params::DatabaseQuery_EqualTo Parms{};

	Parms.OrderValue = std::move(OrderValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.EqualToKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseVariant                 OrderValue                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChildKey                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::EqualToKey(const struct FFirebaseVariant& OrderValue, const class FString& ChildKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "EqualToKey");

	Params::DatabaseQuery_EqualToKey Parms{};

	Parms.OrderValue = std::move(OrderValue);
	Parms.ChildKey = std::move(ChildKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.LimitToFirst
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::LimitToFirst(const int64 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "LimitToFirst");

	Params::DatabaseQuery_LimitToFirst Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.LimitToLast
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   Limit                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::LimitToLast(const int64 Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "LimitToLast");

	Params::DatabaseQuery_LimitToLast Parms{};

	Parms.Limit = Limit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.OrderByChild
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::OrderByChild(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "OrderByChild");

	Params::DatabaseQuery_OrderByChild Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.OrderByKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::OrderByKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "OrderByKey");

	Params::DatabaseQuery_OrderByKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.OrderByPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::OrderByPriority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "OrderByPriority");

	Params::DatabaseQuery_OrderByPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.OrderByValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::OrderByValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "OrderByValue");

	Params::DatabaseQuery_OrderByValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.SetKeepSynchronized
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bKeepSync                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDatabaseQuery::SetKeepSynchronized(const bool bKeepSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "SetKeepSynchronized");

	Params::DatabaseQuery_SetKeepSynchronized Parms{};

	Parms.bKeepSync = bKeepSync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.DatabaseQuery.SetupListeners
// (Final, Native, Public, BlueprintCallable)

void UDatabaseQuery::SetupListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "SetupListeners");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.DatabaseQuery.StartAt
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseVariant                 OrderValue                                             (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::StartAt(const struct FFirebaseVariant& OrderValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "StartAt");

	Params::DatabaseQuery_StartAt Parms{};

	Parms.OrderValue = std::move(OrderValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.StartAtKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FFirebaseVariant                 OrderValue                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ChildKey                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseQuery*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseQuery* UDatabaseQuery::StartAtKey(const struct FFirebaseVariant& OrderValue, const class FString& ChildKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "StartAtKey");

	Params::DatabaseQuery_StartAtKey Parms{};

	Parms.OrderValue = std::move(OrderValue);
	Parms.ChildKey = std::move(ChildKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.GetReference
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabaseQuery::GetReference() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "GetReference");

	Params::DatabaseQuery_GetReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseQuery.IsValid
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDatabaseQuery::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseQuery", "IsValid");

	Params::DatabaseQuery_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GetDisconnectionHandler
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDisconnectionHandler*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisconnectionHandler* UDatabaseReference::GetDisconnectionHandler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GetDisconnectionHandler");

	Params::DatabaseReference_GetDisconnectionHandler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GoOffline
// (Final, Native, Public, BlueprintCallable)

void UDatabaseReference::GoOffline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GoOffline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.DatabaseReference.GoOnline
// (Final, Native, Public, BlueprintCallable)

void UDatabaseReference::GoOnline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GoOnline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.DatabaseReference.Child
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabaseReference::Child(const class FString& Path) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "Child");

	Params::DatabaseReference_Child Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.ChildFromPaths
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   Paths                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabaseReference::ChildFromPaths(const TArray<class FString>& Paths) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "ChildFromPaths");

	Params::DatabaseReference_ChildFromPaths Parms{};

	Parms.Paths = std::move(Paths);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GetDatabase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabase* UDatabaseReference::GetDatabase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GetDatabase");

	Params::DatabaseReference_GetDatabase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GetKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDatabaseReference::GetKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GetKey");

	Params::DatabaseReference_GetKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GetParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabaseReference::GetParent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GetParent");

	Params::DatabaseReference_GetParent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GetRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabaseReference::GetRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GetRoot");

	Params::DatabaseReference_GetRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.GetUrl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UDatabaseReference::GetUrl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "GetUrl");

	Params::DatabaseReference_GetUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.IsRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDatabaseReference::IsRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "IsRoot");

	Params::DatabaseReference_IsRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DatabaseReference.PushChild
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UDatabaseReference*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDatabaseReference* UDatabaseReference::PushChild() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DatabaseReference", "PushChild");

	Params::DatabaseReference_PushChild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentChange.GetDocument
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FFirestoreDocumentSnapshot       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreDocumentSnapshot UFirestoreDocumentChange::GetDocument() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentChange", "GetDocument");

	Params::FirestoreDocumentChange_GetDocument Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentChange.GetNewIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirestoreDocumentChange::GetNewIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentChange", "GetNewIndex");

	Params::FirestoreDocumentChange_GetNewIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentChange.GetOldIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirestoreDocumentChange::GetOldIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentChange", "GetOldIndex");

	Params::FirestoreDocumentChange_GetOldIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentChange.GetType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EDocumentChangeType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EDocumentChangeType UFirestoreDocumentChange::GetType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentChange", "GetType");

	Params::FirestoreDocumentChange_GetType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentReference.AddSnapshotListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(EFirestoreError Error, struct FFirestoreDocumentSnapshot& DocumentSnapshot)>Callback                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirestoreDocumentReference::AddSnapshotListener(TDelegate<void(EFirestoreError Error, struct FFirestoreDocumentSnapshot& DocumentSnapshot)> Callback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "AddSnapshotListener");

	Params::FirestoreDocumentReference_AddSnapshotListener Parms{};

	Parms.Callback = Callback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirestoreDocumentReference.GetCollection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           CollectionPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreCollectionReference*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreCollectionReference* UFirestoreDocumentReference::GetCollection(const class FString& CollectionPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "GetCollection");

	Params::FirestoreDocumentReference_GetCollection Parms{};

	Parms.CollectionPath = std::move(CollectionPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentReference.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreDocumentReference::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "GetId");

	Params::FirestoreDocumentReference_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentReference.GetParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFirestoreCollectionReference*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreCollectionReference* UFirestoreDocumentReference::GetParent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "GetParent");

	Params::FirestoreDocumentReference_GetParent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentReference.GetPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreDocumentReference::GetPath() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "GetPath");

	Params::FirestoreDocumentReference_GetPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentReference.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreDocumentReference::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "IsValid");

	Params::FirestoreDocumentReference_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreDocumentReference.ToString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreDocumentReference::ToString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirestoreDocumentReference", "ToString");

	Params::FirestoreDocumentReference_ToString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseAdMobLibrary.Blueprint_RewardedVideoEvents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const class FString& RewardType, float RewardAmount)>OnReward                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(EAdMobPresentationState PresentationState)>OnPresentationStateChanged                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAdMobLibrary::Blueprint_RewardedVideoEvents(const TDelegate<void(const class FString& RewardType, float RewardAmount)>& OnReward, const TDelegate<void(EAdMobPresentationState PresentationState)>& OnPresentationStateChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAdMobLibrary", "Blueprint_RewardedVideoEvents");

	Params::FirebaseAdMobLibrary_Blueprint_RewardedVideoEvents Parms{};

	Parms.OnReward = OnReward;
	Parms.OnPresentationStateChanged = OnPresentationStateChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.ShowRewardedVideo.ShowRewardedVideo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UShowRewardedVideo*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UShowRewardedVideo* UShowRewardedVideo::ShowRewardedVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShowRewardedVideo", "ShowRewardedVideo");

	Params::ShowRewardedVideo_ShowRewardedVideo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.LoadRewardedVideoAd.LoadRewardedVideoAd
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AdUnitId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAdMobAdRequest                  AdRequest                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULoadRewardedVideoAd*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULoadRewardedVideoAd* ULoadRewardedVideoAd::LoadRewardedVideoAd(const class FString& AdUnitId, const struct FAdMobAdRequest& AdRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LoadRewardedVideoAd", "LoadRewardedVideoAd");

	Params::LoadRewardedVideoAd_LoadRewardedVideoAd Parms{};

	Parms.AdUnitId = std::move(AdUnitId);
	Parms.AdRequest = std::move(AdRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.PauseRewardedVideo.PauseRewardedVideo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPauseRewardedVideo*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPauseRewardedVideo* UPauseRewardedVideo::PauseRewardedVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PauseRewardedVideo", "PauseRewardedVideo");

	Params::PauseRewardedVideo_PauseRewardedVideo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ResumeRewardedVideo.ResumeRewardedVideo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UResumeRewardedVideo*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UResumeRewardedVideo* UResumeRewardedVideo::ResumeRewardedVideo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ResumeRewardedVideo", "ResumeRewardedVideo");

	Params::ResumeRewardedVideo_ResumeRewardedVideo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CreateBannerView.CreateBannerView
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AdUnitId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAdSize                          AdSize                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UCreateBannerView*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCreateBannerView* UCreateBannerView::CreateBannerView(const class FString& AdUnitId, const struct FAdSize& AdSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CreateBannerView", "CreateBannerView");

	Params::CreateBannerView_CreateBannerView Parms{};

	Parms.AdUnitId = std::move(AdUnitId);
	Parms.AdSize = std::move(AdSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.LoadAdBannerView.LoadAd
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAdMobAdRequest                  AdRequest                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULoadAdBannerView*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULoadAdBannerView* ULoadAdBannerView::LoadAd(const class UBannerView* BannerView, const struct FAdMobAdRequest& AdRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LoadAdBannerView", "LoadAd");

	Params::LoadAdBannerView_LoadAd Parms{};

	Parms.BannerView = BannerView;
	Parms.AdRequest = std::move(AdRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.HideAdBannerView.Hide
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UHideAdBannerView*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UHideAdBannerView* UHideAdBannerView::Hide(const class UBannerView* BannerView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HideAdBannerView", "Hide");

	Params::HideAdBannerView_Hide Parms{};

	Parms.BannerView = BannerView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ShowBannerView.Show
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UShowBannerView*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UShowBannerView* UShowBannerView::Show(const class UBannerView* BannerView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShowBannerView", "Show");

	Params::ShowBannerView_Show Parms{};

	Parms.BannerView = BannerView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.PauseBannerView.Pause
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPauseBannerView*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPauseBannerView* UPauseBannerView::Pause(const class UBannerView* BannerView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PauseBannerView", "Pause");

	Params::PauseBannerView_Pause Parms{};

	Parms.BannerView = BannerView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ResumeBannerView.Resume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UResumeBannerView*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UResumeBannerView* UResumeBannerView::Resume(const class UBannerView* BannerView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ResumeBannerView", "Resume");

	Params::ResumeBannerView_Resume Parms{};

	Parms.BannerView = BannerView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.MoveToPositionBannerView.MoveTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAdMobBannerViewPosition                Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoveToPositionBannerView*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoveToPositionBannerView* UMoveToPositionBannerView::MoveTo(const class UBannerView* BannerView, EAdMobBannerViewPosition Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoveToPositionBannerView", "MoveTo");

	Params::MoveToPositionBannerView_MoveTo Parms{};

	Parms.BannerView = BannerView;
	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.MoveToBannerView.MoveTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBannerView*                      BannerView                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoveToBannerView*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMoveToBannerView* UMoveToBannerView::MoveTo(const class UBannerView* BannerView, const int32 X, const int32 Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoveToBannerView", "MoveTo");

	Params::MoveToBannerView_MoveTo Parms{};

	Parms.BannerView = BannerView;
	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.LoadAdInterstitial.LoadAd
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterstitialAd*                  InterstitialAd                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAdMobAdRequest                  AdRequest                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULoadAdInterstitial*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULoadAdInterstitial* ULoadAdInterstitial::LoadAd(const class UInterstitialAd* InterstitialAd, const struct FAdMobAdRequest& AdRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LoadAdInterstitial", "LoadAd");

	Params::LoadAdInterstitial_LoadAd Parms{};

	Parms.InterstitialAd = InterstitialAd;
	Parms.AdRequest = std::move(AdRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ShowInterstitial.Show
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInterstitialAd*                  InterstitialAd                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UShowInterstitial*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UShowInterstitial* UShowInterstitial::Show(const class UInterstitialAd* InterstitialAd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ShowInterstitial", "Show");

	Params::ShowInterstitial_Show Parms{};

	Parms.InterstitialAd = InterstitialAd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.BannerView.GetBoundingBox
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FAdMobBoundingBox                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FAdMobBoundingBox UBannerView::GetBoundingBox() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BannerView", "GetBoundingBox");

	Params::BannerView_GetBoundingBox Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.InterstitialAd.GetPresentationState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAdMobInterstitialAdPresentationState   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAdMobInterstitialAdPresentationState UInterstitialAd::GetPresentationState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterstitialAd", "GetPresentationState");

	Params::InterstitialAd_GetPresentationState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.EndSession
// (Final, Native, Static, Public, BlueprintCallable)

void UFirebaseAnalyticsLibrary::EndSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "EndSession");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEvent(const class FString& EventName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEvent");

	Params::FirebaseAnalyticsLibrary_LogEvent Parms{};

	Parms.EventName = std::move(EventName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventDouble
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ParameterValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventDouble(const class FString& EventName, const class FString& ParameterName, const double ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventDouble");

	Params::FirebaseAnalyticsLibrary_LogEventDouble Parms{};

	Parms.EventName = std::move(EventName);
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ParameterValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventFloat(const class FString& EventName, const class FString& ParameterName, const float ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventFloat");

	Params::FirebaseAnalyticsLibrary_LogEventFloat Parms{};

	Parms.EventName = std::move(EventName);
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventInt32
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ParameterValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventInt32(const class FString& EventName, const class FString& ParameterName, const int32 ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventInt32");

	Params::FirebaseAnalyticsLibrary_LogEventInt32 Parms{};

	Parms.EventName = std::move(EventName);
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventInt64
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ParameterValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventInt64(const class FString& EventName, const class FString& ParameterName, const int64 ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventInt64");

	Params::FirebaseAnalyticsLibrary_LogEventInt64 Parms{};

	Parms.EventName = std::move(EventName);
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = ParameterValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ParameterValue                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventString(const class FString& EventName, const class FString& ParameterName, const class FString& ParameterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventString");

	Params::FirebaseAnalyticsLibrary_LogEventString Parms{};

	Parms.EventName = std::move(EventName);
	Parms.ParameterName = std::move(ParameterName);
	Parms.ParameterValue = std::move(ParameterValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventWithParameter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventWithParameter(const class FString& EventName, const TMap<class FString, class FString>& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventWithParameter");

	Params::FirebaseAnalyticsLibrary_LogEventWithParameter Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.LogEventWithParameters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirebaseVariant>Parameters                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::LogEventWithParameters(const class FString& EventName, const TMap<class FString, struct FFirebaseVariant>& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "LogEventWithParameters");

	Params::FirebaseAnalyticsLibrary_LogEventWithParameters Parms{};

	Parms.EventName = std::move(EventName);
	Parms.Parameters = std::move(Parameters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.ResetAnalyticsData
// (Final, Native, Static, Public, BlueprintCallable)

void UFirebaseAnalyticsLibrary::ResetAnalyticsData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "ResetAnalyticsData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.SetAnalyticsCollectionEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::SetAnalyticsCollectionEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "SetAnalyticsCollectionEnabled");

	Params::FirebaseAnalyticsLibrary_SetAnalyticsCollectionEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.SetCurrentScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ScreenName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ScreenClass                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::SetCurrentScreen(const class FString& ScreenName, const class FString& ScreenClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "SetCurrentScreen");

	Params::FirebaseAnalyticsLibrary_SetCurrentScreen Parms{};

	Parms.ScreenName = std::move(ScreenName);
	Parms.ScreenClass = std::move(ScreenClass);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.SetSessionTimeoutDuration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int64                                   Milliseconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::SetSessionTimeoutDuration(const int64 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "SetSessionTimeoutDuration");

	Params::FirebaseAnalyticsLibrary_SetSessionTimeoutDuration Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.SetUserID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::SetUserID(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "SetUserID");

	Params::FirebaseAnalyticsLibrary_SetUserID Parms{};

	Parms.UserId = std::move(UserId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.SetUserProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Property                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseAnalyticsLibrary::SetUserProperty(const class FString& Param_Name, const class FString& Property)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "SetUserProperty");

	Params::FirebaseAnalyticsLibrary_SetUserProperty Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Property = std::move(Property);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseAnalyticsLibrary.StartSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseAnalyticsLibrary::StartSession()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseAnalyticsLibrary", "StartSession");

	Params::FirebaseAnalyticsLibrary_StartSession Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDynamicLinksBlueprintLibrary.ClearUnhandledDynamicLink
// (Final, Native, Static, Public, BlueprintCallable)

void UFirebaseDynamicLinksBlueprintLibrary::ClearUnhandledDynamicLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDynamicLinksBlueprintLibrary", "ClearUnhandledDynamicLink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseDynamicLinksBlueprintLibrary.GetLastDynamicLinkMatchStrength
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ELinkMatchStrength                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELinkMatchStrength UFirebaseDynamicLinksBlueprintLibrary::GetLastDynamicLinkMatchStrength()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDynamicLinksBlueprintLibrary", "GetLastDynamicLinkMatchStrength");

	Params::FirebaseDynamicLinksBlueprintLibrary_GetLastDynamicLinkMatchStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDynamicLinksBlueprintLibrary.GetLastDynamicLinkURL
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseDynamicLinksBlueprintLibrary::GetLastDynamicLinkURL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDynamicLinksBlueprintLibrary", "GetLastDynamicLinkURL");

	Params::FirebaseDynamicLinksBlueprintLibrary_GetLastDynamicLinkURL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDynamicLinksBlueprintLibrary.DidReceiveUnhandledDynamicLink
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseDynamicLinksBlueprintLibrary::DidReceiveUnhandledDynamicLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseDynamicLinksBlueprintLibrary", "DidReceiveUnhandledDynamicLink");

	Params::FirebaseDynamicLinksBlueprintLibrary_DidReceiveUnhandledDynamicLink Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDynamicLinksBlueprintLibrary.GetLongLink
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDynamicLinkComponents           Components                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGeneratedDynamicLink            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGeneratedDynamicLink UFirebaseDynamicLinksBlueprintLibrary::GetLongLink(const struct FDynamicLinkComponents& Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseDynamicLinksBlueprintLibrary", "GetLongLink");

	Params::FirebaseDynamicLinksBlueprintLibrary_GetLongLink Parms{};

	Parms.Components = std::move(Components);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.BlueprintFirebaseDynamicLinksProxy.ListenOnDynamicLinkReceived
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBlueprintFirebaseDynamicLinksProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBlueprintFirebaseDynamicLinksProxy* UBlueprintFirebaseDynamicLinksProxy::ListenOnDynamicLinkReceived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintFirebaseDynamicLinksProxy", "ListenOnDynamicLinkReceived");

	Params::BlueprintFirebaseDynamicLinksProxy_ListenOnDynamicLinkReceived Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.BlueprintFirebaseDynamicLinksProxy.OnLink
// (Final, Native, Private)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELinkMatchStrength                      MatchStrength                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintFirebaseDynamicLinksProxy::OnLink(const class FString& URL, const ELinkMatchStrength MatchStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlueprintFirebaseDynamicLinksProxy", "OnLink");

	Params::BlueprintFirebaseDynamicLinksProxy_OnLink Parms{};

	Parms.URL = std::move(URL);
	Parms.MatchStrength = MatchStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.DynamicLinksGetShortLinkWithComponents.GetShortLink
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDynamicLinkComponents           Components                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDynamicLinksGetShortLinkWithComponents*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicLinksGetShortLinkWithComponents* UDynamicLinksGetShortLinkWithComponents::GetShortLink(const struct FDynamicLinkComponents& Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicLinksGetShortLinkWithComponents", "GetShortLink");

	Params::DynamicLinksGetShortLinkWithComponents_GetShortLink Parms{};

	Parms.Components = std::move(Components);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DynamicLinksGetShortLinkWithComponentsAndOptions.GetShortLink
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDynamicLinkComponents           Components                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDynamicLinkOptions              Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UDynamicLinksGetShortLinkWithComponentsAndOptions*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicLinksGetShortLinkWithComponentsAndOptions* UDynamicLinksGetShortLinkWithComponentsAndOptions::GetShortLink(const struct FDynamicLinkComponents& Components, const struct FDynamicLinkOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicLinksGetShortLinkWithComponentsAndOptions", "GetShortLink");

	Params::DynamicLinksGetShortLinkWithComponentsAndOptions_GetShortLink Parms{};

	Parms.Components = std::move(Components);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DynamicLinksGetShortLinkWithString.GetShortLink
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           LongDynamicLink                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDynamicLinksGetShortLinkWithString*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicLinksGetShortLinkWithString* UDynamicLinksGetShortLinkWithString::GetShortLink(const class FString& LongDynamicLink)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicLinksGetShortLinkWithString", "GetShortLink");

	Params::DynamicLinksGetShortLinkWithString_GetShortLink Parms{};

	Parms.LongDynamicLink = std::move(LongDynamicLink);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DynamicLinksGetShortLinkWithStringAndOptions.GetShortLink
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           LongDynamicLink                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDynamicLinkOptions              Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UDynamicLinksGetShortLinkWithStringAndOptions*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDynamicLinksGetShortLinkWithStringAndOptions* UDynamicLinksGetShortLinkWithStringAndOptions::GetShortLink(const class FString& LongDynamicLink, const struct FDynamicLinkOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DynamicLinksGetShortLinkWithStringAndOptions", "GetShortLink");

	Params::DynamicLinksGetShortLinkWithStringAndOptions_GetShortLink Parms{};

	Parms.LongDynamicLink = std::move(LongDynamicLink);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseGetInstallationIDProxy.GetInstallationID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseGetInstallationIDProxy*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseGetInstallationIDProxy* UFirebaseGetInstallationIDProxy::GetInstallationID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseGetInstallationIDProxy", "GetInstallationID");

	Params::FirebaseGetInstallationIDProxy_GetInstallationID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseGetInstallationAuthTokenProxy.GetInstallationAuthToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceRefresh                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirebaseGetInstallationAuthTokenProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseGetInstallationAuthTokenProxy* UFirebaseGetInstallationAuthTokenProxy::GetInstallationAuthToken(const bool bForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseGetInstallationAuthTokenProxy", "GetInstallationAuthToken");

	Params::FirebaseGetInstallationAuthTokenProxy_GetInstallationAuthToken Parms{};

	Parms.bForceRefresh = bForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseDeleteInstallationProxy.DeleteInstallation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseDeleteInstallationProxy* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseDeleteInstallationProxy* UFirebaseDeleteInstallationProxy::DeleteInstallation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseDeleteInstallationProxy", "DeleteInstallation");

	Params::FirebaseDeleteInstallationProxy_DeleteInstallation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.Blueprint_GetMetricValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseTrace                   Trace                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MetricName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirebasePerformanceLibrary::Blueprint_GetMetricValue(const struct FFirebaseTrace& Trace, const class FString& MetricName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "Blueprint_GetMetricValue");

	Params::FirebasePerformanceLibrary_Blueprint_GetMetricValue Parms{};

	Parms.Trace = std::move(Trace);
	Parms.MetricName = std::move(MetricName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.Blueprint_GetName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseTrace                   Trace                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebasePerformanceLibrary::Blueprint_GetName(const struct FFirebaseTrace& Trace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "Blueprint_GetName");

	Params::FirebasePerformanceLibrary_Blueprint_GetName Parms{};

	Parms.Trace = std::move(Trace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.Blueprint_IncrementMetric
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseTrace                   Trace                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MetricName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ByValue                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebasePerformanceLibrary::Blueprint_IncrementMetric(struct FFirebaseTrace& Trace, const class FString& MetricName, const int64 ByValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "Blueprint_IncrementMetric");

	Params::FirebasePerformanceLibrary_Blueprint_IncrementMetric Parms{};

	Parms.Trace = std::move(Trace);
	Parms.MetricName = std::move(MetricName);
	Parms.ByValue = ByValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Trace = std::move(Parms.Trace);
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.Blueprint_SetMetricValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseTrace                   Trace                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MetricName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebasePerformanceLibrary::Blueprint_SetMetricValue(struct FFirebaseTrace& Trace, const class FString& MetricName, const int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "Blueprint_SetMetricValue");

	Params::FirebasePerformanceLibrary_Blueprint_SetMetricValue Parms{};

	Parms.Trace = std::move(Trace);
	Parms.MetricName = std::move(MetricName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Trace = std::move(Parms.Trace);
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.Blueprint_Start
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseTrace                   Trace                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebasePerformanceLibrary::Blueprint_Start(struct FFirebaseTrace& Trace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "Blueprint_Start");

	Params::FirebasePerformanceLibrary_Blueprint_Start Parms{};

	Parms.Trace = std::move(Trace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Trace = std::move(Parms.Trace);
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.Blueprint_Stop
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseTrace                   Trace                                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebasePerformanceLibrary::Blueprint_Stop(struct FFirebaseTrace& Trace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "Blueprint_Stop");

	Params::FirebasePerformanceLibrary_Blueprint_Stop Parms{};

	Parms.Trace = std::move(Trace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Trace = std::move(Parms.Trace);
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.CreateAndStartTrace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           TraceName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseTrace                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirebaseTrace UFirebasePerformanceLibrary::CreateAndStartTrace(const class FString& TraceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "CreateAndStartTrace");

	Params::FirebasePerformanceLibrary_CreateAndStartTrace Parms{};

	Parms.TraceName = std::move(TraceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.CreateTrace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           TraceName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseTrace                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirebaseTrace UFirebasePerformanceLibrary::CreateTrace(const class FString& TraceName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "CreateTrace");

	Params::FirebasePerformanceLibrary_CreateTrace Parms{};

	Parms.TraceName = std::move(TraceName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.SetDataCollectionEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebasePerformanceLibrary::SetDataCollectionEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "SetDataCollectionEnabled");

	Params::FirebasePerformanceLibrary_SetDataCollectionEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebasePerformanceLibrary.SetInstrumentationEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebasePerformanceLibrary::SetInstrumentationEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebasePerformanceLibrary", "SetInstrumentationEnabled");

	Params::FirebasePerformanceLibrary_SetInstrumentationEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseSDKLibrary.CreateFirebaseApp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AppName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseAppOptions              Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EFirebaseSDKCreateApp                   Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseSDKLibrary::CreateFirebaseApp(const class FString& AppName, const struct FFirebaseAppOptions& Options, EFirebaseSDKCreateApp* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseSDKLibrary", "CreateFirebaseApp");

	Params::FirebaseSDKLibrary_CreateFirebaseApp Parms{};

	Parms.AppName = std::move(AppName);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function FirebaseFeatures.FirebaseSDKLibrary.SwitchFirebaseApp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           AppName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirebaseSDKCreateApp                   Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseSDKLibrary::SwitchFirebaseApp(const class FString& AppName, EFirebaseSDKCreateApp* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseSDKLibrary", "SwitchFirebaseApp");

	Params::FirebaseSDKLibrary_SwitchFirebaseApp Parms{};

	Parms.AppName = std::move(AppName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function FirebaseFeatures.FirebaseInitializationProxy.WaitForInitialization
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseInitializationProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseInitializationProxy* UFirebaseInitializationProxy::WaitForInitialization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseInitializationProxy", "WaitForInitialization");

	Params::FirebaseInitializationProxy_WaitForInitialization Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FFirebaseVariant>         Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromArray(const TArray<struct FFirebaseVariant>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromArray");

	Params::VariantLibrary_FromArray Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromBool(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromBool");

	Params::VariantLibrary_FromBool Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromFloat(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromFloat");

	Params::VariantLibrary_FromFloat Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromInt32(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromInt32");

	Params::VariantLibrary_FromInt32 Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromInt64(int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromInt64");

	Params::VariantLibrary_FromInt64 Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<struct FFirebaseVariant, struct FFirebaseVariant>Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromMap(const TMap<struct FFirebaseVariant, struct FFirebaseVariant>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromMap");

	Params::VariantLibrary_FromMap Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromNull
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromNull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromNull");

	Params::VariantLibrary_FromNull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromString(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromString");

	Params::VariantLibrary_FromString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.FromStringMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, struct FFirebaseVariant>Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::FromStringMap(const TMap<class FString, struct FFirebaseVariant>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "FromStringMap");

	Params::VariantLibrary_FromStringMap Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.MakeVariantMap
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<struct FFirebaseVariant, struct FFirebaseVariant>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FFirebaseVariant, struct FFirebaseVariant> UVariantLibrary::MakeVariantMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "MakeVariantMap");

	Params::VariantLibrary_MakeVariantMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ServerTimestamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirebaseVariant UVariantLibrary::ServerTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ServerTimestamp");

	Params::VariantLibrary_ServerTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FFirebaseVariant>         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFirebaseVariant> UVariantLibrary::ToArray(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToArray");

	Params::VariantLibrary_ToArray Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToBinary
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UVariantLibrary::ToBinary(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToBinary");

	Params::VariantLibrary_ToBinary Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVariantLibrary::ToBool(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToBool");

	Params::VariantLibrary_ToBool Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVariantLibrary::ToFloat(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToFloat");

	Params::VariantLibrary_ToFloat Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToInt32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVariantLibrary::ToInt32(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToInt32");

	Params::VariantLibrary_ToInt32 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToInt64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UVariantLibrary::ToInt64(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToInt64");

	Params::VariantLibrary_ToInt64 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToJson
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVariantLibrary::ToJson(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToJson");

	Params::VariantLibrary_ToJson Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FFirebaseVariant, struct FFirebaseVariant>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<struct FFirebaseVariant, struct FFirebaseVariant> UVariantLibrary::ToMap(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToMap");

	Params::VariantLibrary_ToMap Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.VariantLibrary.ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseVariant                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UVariantLibrary::ToString(const struct FFirebaseVariant& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VariantLibrary", "ToString");

	Params::VariantLibrary_ToString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Firestore.CollectionGroup
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           CollectionId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreQuery*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreQuery* UFirestore::CollectionGroup(const class FString& CollectionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "CollectionGroup");

	Params::Firestore_CollectionGroup Parms{};

	Parms.CollectionId = std::move(CollectionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Firestore.CreateBatch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FWriteBatch                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWriteBatch UFirestore::CreateBatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "CreateBatch");

	Params::Firestore_CreateBatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Firestore.GetCollection
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           CollectionPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreCollectionReference*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreCollectionReference* UFirestore::GetCollection(const class FString& CollectionPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "GetCollection");

	Params::Firestore_GetCollection Parms{};

	Parms.CollectionPath = std::move(CollectionPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Firestore.GetDocument
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           DocumentPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreDocumentReference* UFirestore::GetDocument(const class FString& DocumentPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "GetDocument");

	Params::Firestore_GetDocument Parms{};

	Parms.DocumentPath = std::move(DocumentPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Firestore.GetSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreSettings               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreSettings UFirestore::GetSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "GetSettings");

	Params::Firestore_GetSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.Firestore.SetPersistenceEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirestore::SetPersistenceEnabled(const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "SetPersistenceEnabled");

	Params::Firestore_SetPersistenceEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.Firestore.SetSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreSettings               Settings                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirestore::SetSettings(const struct FFirestoreSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("Firestore", "SetSettings");

	Params::Firestore_SetSettings Parms{};

	Parms.Settings = std::move(Settings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirestoreLibrary.ArrayRemove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::ArrayRemove(const TArray<struct FFirestoreFieldValue>& Elements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "ArrayRemove");

	Params::FirestoreLibrary_ArrayRemove Parms{};

	Parms.Elements = std::move(Elements);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.ArrayUnion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Elements                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::ArrayUnion(const TArray<struct FFirestoreFieldValue>& Elements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "ArrayUnion");

	Params::FirestoreLibrary_ArrayUnion Parms{};

	Parms.Elements = std::move(Elements);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Delete
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreTransaction            Transaction                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirestoreLibrary::Delete(struct FFirestoreTransaction& Transaction, const class UFirestoreDocumentReference* Document)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Delete");

	Params::FirestoreLibrary_Delete Parms{};

	Parms.Transaction = std::move(Transaction);
	Parms.Document = Document;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Transaction = std::move(Parms.Transaction);
}


// Function FirebaseFeatures.FirestoreLibrary.DocumentId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldPath              ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirestoreFieldPath UFirestoreLibrary::DocumentId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "DocumentId");

	Params::FirestoreLibrary_DocumentId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Exists
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreLibrary::Exists(const struct FFirestoreDocumentSnapshot& DocumentSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Exists");

	Params::FirestoreLibrary_Exists Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_Delete
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_Delete");

	Params::FirestoreLibrary_FieldValue_Delete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FFirestoreFieldValue>     Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromArray(const TArray<struct FFirestoreFieldValue>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromArray");

	Params::FirestoreLibrary_FieldValue_FromArray Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromBinary
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<uint8>                           Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromBinary(const TArray<uint8>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromBinary");

	Params::FirestoreLibrary_FieldValue_FromBinary Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromBool(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromBool");

	Params::FirestoreLibrary_FieldValue_FromBool Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromFloat(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromFloat");

	Params::FirestoreLibrary_FieldValue_FromFloat Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromGeoPoint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreGeoPoint               Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromGeoPoint(const struct FFirestoreGeoPoint& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromGeoPoint");

	Params::FirestoreLibrary_FieldValue_FromGeoPoint Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromInt32(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromInt32");

	Params::FirestoreLibrary_FieldValue_FromInt32 Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromInt64(int64 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromInt64");

	Params::FirestoreLibrary_FieldValue_FromInt64 Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromJSON
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromJSON(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromJSON");

	Params::FirestoreLibrary_FieldValue_FromJSON Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromMap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<class FString, struct FFirestoreFieldValue>Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromMap(const TMap<class FString, struct FFirestoreFieldValue>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromMap");

	Params::FirestoreLibrary_FieldValue_FromMap Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFirestoreDocumentReference*      Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromReference(class UFirestoreDocumentReference* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromReference");

	Params::FirestoreLibrary_FieldValue_FromReference Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromString(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromString");

	Params::FirestoreLibrary_FieldValue_FromString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_FromTimestamp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreTimestamp              Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::FieldValue_FromTimestamp(const struct FFirestoreTimestamp& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_FromTimestamp");

	Params::FirestoreLibrary_FieldValue_FromTimestamp Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToArray
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// TArray<struct FFirestoreFieldValue>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FFirestoreFieldValue> UFirestoreLibrary::FieldValue_ToArray(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToArray");

	Params::FirestoreLibrary_FieldValue_ToArray Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToBinary
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFirestoreLibrary::FieldValue_ToBinary(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToBinary");

	Params::FirestoreLibrary_FieldValue_ToBinary Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreLibrary::FieldValue_ToBool(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToBool");

	Params::FirestoreLibrary_FieldValue_ToBool Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFirestoreLibrary::FieldValue_ToFloat(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToFloat");

	Params::FirestoreLibrary_FieldValue_ToFloat Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToGeoPoint
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// struct FFirestoreGeoPoint               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFirestoreGeoPoint UFirestoreLibrary::FieldValue_ToGeoPoint(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToGeoPoint");

	Params::FirestoreLibrary_FieldValue_ToGeoPoint Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFirestoreLibrary::FieldValue_ToInt32(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToInt32");

	Params::FirestoreLibrary_FieldValue_ToInt32 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirestoreLibrary::FieldValue_ToInt64(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToInt64");

	Params::FirestoreLibrary_FieldValue_ToInt64 Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToJSON
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreLibrary::FieldValue_ToJSON(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToJSON");

	Params::FirestoreLibrary_FieldValue_ToJSON Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToMap
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FFirestoreFieldValue> UFirestoreLibrary::FieldValue_ToMap(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToMap");

	Params::FirestoreLibrary_FieldValue_ToMap Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreDocumentReference* UFirestoreLibrary::FieldValue_ToReference(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToReference");

	Params::FirestoreLibrary_FieldValue_ToReference Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreLibrary::FieldValue_ToString(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToString");

	Params::FirestoreLibrary_FieldValue_ToString Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FieldValue_ToTimestamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             Value                                                  (Parm, NativeAccessSpecifierPublic)
// struct FFirestoreTimestamp              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFirestoreTimestamp UFirestoreLibrary::FieldValue_ToTimestamp(const struct FFirestoreFieldValue& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FieldValue_ToTimestamp");

	Params::FirestoreLibrary_FieldValue_ToTimestamp Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.FirestoreTimestamp_ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreTimestamp              Timestamp                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreLibrary::FirestoreTimestamp_ToString(const struct FFirestoreTimestamp& Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "FirestoreTimestamp_ToString");

	Params::FirestoreLibrary_FirestoreTimestamp_ToString Parms{};

	Parms.Timestamp = std::move(Timestamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Get
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreTransaction            Transaction                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreError                         ErrorCode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ErrorMessage                                           (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreDocumentSnapshot       ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreDocumentSnapshot UFirestoreLibrary::Get(struct FFirestoreTransaction& Transaction, const class UFirestoreDocumentReference* Document, EFirestoreError* ErrorCode, class FString* ErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Get");

	Params::FirestoreLibrary_Get Parms{};

	Parms.Transaction = std::move(Transaction);
	Parms.Document = Document;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Transaction = std::move(Parms.Transaction);

	if (ErrorCode != nullptr)
		*ErrorCode = Parms.ErrorCode;

	if (ErrorMessage != nullptr)
		*ErrorMessage = std::move(Parms.ErrorMessage);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Get_Snapshot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Field                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreServerTimestampBehavior       ServerTimestampBehavior                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::Get_Snapshot(const struct FFirestoreDocumentSnapshot& DocumentSnapshot, const class FString& Field, EFirestoreServerTimestampBehavior ServerTimestampBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Get_Snapshot");

	Params::FirestoreLibrary_Get_Snapshot Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);
	Parms.Field = std::move(Field);
	Parms.ServerTimestampBehavior = ServerTimestampBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.GetData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EFirestoreServerTimestampBehavior       ServerTimestampBehavior                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, struct FFirestoreFieldValue> UFirestoreLibrary::GetData(const struct FFirestoreDocumentSnapshot& DocumentSnapshot, EFirestoreServerTimestampBehavior ServerTimestampBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "GetData");

	Params::FirestoreLibrary_GetData Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);
	Parms.ServerTimestampBehavior = ServerTimestampBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.GetId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreLibrary::GetId(const struct FFirestoreDocumentSnapshot& DocumentSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "GetId");

	Params::FirestoreLibrary_GetId Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.GetMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreSnapshotMetadata       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFirestoreSnapshotMetadata UFirestoreLibrary::GetMetadata(const struct FFirestoreDocumentSnapshot& DocumentSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "GetMetadata");

	Params::FirestoreLibrary_GetMetadata Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.GetReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreDocumentReference* UFirestoreLibrary::GetReference(const struct FFirestoreDocumentSnapshot& DocumentSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "GetReference");

	Params::FirestoreLibrary_GetReference Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.GetType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             FieldValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EFirestoreFieldValueType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFirestoreFieldValueType UFirestoreLibrary::GetType(const struct FFirestoreFieldValue& FieldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "GetType");

	Params::FirestoreLibrary_GetType Parms{};

	Parms.FieldValue = std::move(FieldValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.GetWithFieldPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldPath              Field                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreServerTimestampBehavior       ServerTimestampBehavior                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::GetWithFieldPath(const struct FFirestoreDocumentSnapshot& DocumentSnapshot, const struct FFirestoreFieldPath& Field, EFirestoreServerTimestampBehavior ServerTimestampBehavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "GetWithFieldPath");

	Params::FirestoreLibrary_GetWithFieldPath Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);
	Parms.Field = std::move(Field);
	Parms.ServerTimestampBehavior = ServerTimestampBehavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.HasDocumentPendingChanges
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       Document                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreLibrary::HasDocumentPendingChanges(struct FFirestoreDocumentSnapshot& Document)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "HasDocumentPendingChanges");

	Params::FirestoreLibrary_HasDocumentPendingChanges Parms{};

	Parms.Document = std::move(Document);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Document = std::move(Parms.Document);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.HasPendingChanges
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreSnapshotMetadata       Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreLibrary::HasPendingChanges(struct FFirestoreSnapshotMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "HasPendingChanges");

	Params::FirestoreLibrary_HasPendingChanges Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.IsDocumentFromCache
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       Document                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreLibrary::IsDocumentFromCache(struct FFirestoreDocumentSnapshot& Document)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "IsDocumentFromCache");

	Params::FirestoreLibrary_IsDocumentFromCache Parms{};

	Parms.Document = std::move(Document);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Document = std::move(Parms.Document);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.IsFromCache
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreSnapshotMetadata       Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirestoreLibrary::IsFromCache(struct FFirestoreSnapshotMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "IsFromCache");

	Params::FirestoreLibrary_IsFromCache Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.MakeFirestoreFieldPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   FieldNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreFieldPath              ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FFirestoreFieldPath UFirestoreLibrary::MakeFirestoreFieldPath(const TArray<class FString>& FieldNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "MakeFirestoreFieldPath");

	Params::FirestoreLibrary_MakeFirestoreFieldPath Parms{};

	Parms.FieldNames = std::move(FieldNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Merge
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreSetOptions             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreSetOptions UFirestoreLibrary::Merge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Merge");

	Params::FirestoreLibrary_Merge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.MergeFieldPaths
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FFirestoreFieldPath>      Fields                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreSetOptions             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreSetOptions UFirestoreLibrary::MergeFieldPaths(const TArray<struct FFirestoreFieldPath>& Fields)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "MergeFieldPaths");

	Params::FirestoreLibrary_MergeFieldPaths Parms{};

	Parms.Fields = std::move(Fields);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.MergeFields
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   Fields                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreSetOptions             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreSetOptions UFirestoreLibrary::MergeFields(const TArray<class FString>& Fields)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "MergeFields");

	Params::FirestoreLibrary_MergeFields Parms{};

	Parms.Fields = std::move(Fields);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Now
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreTimestamp              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFirestoreTimestamp UFirestoreLibrary::Now()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Now");

	Params::FirestoreLibrary_Now Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Null
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::Null()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Null");

	Params::FirestoreLibrary_Null Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Remove
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FQuerySnapshotListenerHandle     ListenerHandle                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirestoreLibrary::Remove(struct FQuerySnapshotListenerHandle& ListenerHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Remove");

	Params::FirestoreLibrary_Remove Parms{};

	Parms.ListenerHandle = std::move(ListenerHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ListenerHandle = std::move(Parms.ListenerHandle);
}


// Function FirebaseFeatures.FirestoreLibrary.ServerTimestamp
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldValue             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirestoreFieldValue UFirestoreLibrary::ServerTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "ServerTimestamp");

	Params::FirestoreLibrary_ServerTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Set
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreTransaction            Transaction                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreSetOptions             Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirestoreLibrary::Set(struct FFirestoreTransaction& Transaction, const class UFirestoreDocumentReference* Document, const TMap<class FString, struct FFirestoreFieldValue>& Data, const struct FFirestoreSetOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Set");

	Params::FirestoreLibrary_Set Parms{};

	Parms.Transaction = std::move(Transaction);
	Parms.Document = Document;
	Parms.Data = std::move(Data);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Transaction = std::move(Parms.Transaction);
}


// Function FirebaseFeatures.FirestoreLibrary.ToDateTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreTimestamp              Timestamp                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UFirestoreLibrary::ToDateTime(const struct FFirestoreTimestamp& Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "ToDateTime");

	Params::FirestoreLibrary_ToDateTime Parms{};

	Parms.Timestamp = std::move(Timestamp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreFieldPath              FieldPath                                              (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreLibrary::ToString(const struct FFirestoreFieldPath& FieldPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "ToString");

	Params::FirestoreLibrary_ToString Parms{};

	Parms.FieldPath = std::move(FieldPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.ToString_Snapshot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirestoreDocumentSnapshot       DocumentSnapshot                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirestoreLibrary::ToString_Snapshot(const struct FFirestoreDocumentSnapshot& DocumentSnapshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "ToString_Snapshot");

	Params::FirestoreLibrary_ToString_Snapshot Parms{};

	Parms.DocumentSnapshot = std::move(DocumentSnapshot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.Update
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreTransaction            Transaction                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirestoreLibrary::Update(struct FFirestoreTransaction& Transaction, const class UFirestoreDocumentReference* Document, const TMap<class FString, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "Update");

	Params::FirestoreLibrary_Update Parms{};

	Parms.Transaction = std::move(Transaction);
	Parms.Document = Document;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Transaction = std::move(Parms.Transaction);
}


// Function FirebaseFeatures.FirestoreLibrary.UpdateFieldPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirestoreTransaction            Transaction                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FFirestoreFieldPath, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirestoreLibrary::UpdateFieldPath(struct FFirestoreTransaction& Transaction, const class UFirestoreDocumentReference* Document, const TMap<struct FFirestoreFieldPath, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "UpdateFieldPath");

	Params::FirestoreLibrary_UpdateFieldPath Parms{};

	Parms.Transaction = std::move(Transaction);
	Parms.Document = Document;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Transaction = std::move(Parms.Transaction);
}


// Function FirebaseFeatures.FirestoreLibrary.WriteBatch_Delete
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWriteBatch                      WriteBatch                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FWriteBatch                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWriteBatch UFirestoreLibrary::WriteBatch_Delete(struct FWriteBatch& WriteBatch, const class UFirestoreDocumentReference* Document)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "WriteBatch_Delete");

	Params::FirestoreLibrary_WriteBatch_Delete Parms{};

	Parms.WriteBatch = std::move(WriteBatch);
	Parms.Document = Document;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	WriteBatch = std::move(Parms.WriteBatch);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.WriteBatch_Set
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWriteBatch                      WriteBatch                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreSetOptions             Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FWriteBatch                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWriteBatch UFirestoreLibrary::WriteBatch_Set(struct FWriteBatch& WriteBatch, const class UFirestoreDocumentReference* Document, const TMap<class FString, struct FFirestoreFieldValue>& Data, const struct FFirestoreSetOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "WriteBatch_Set");

	Params::FirestoreLibrary_WriteBatch_Set Parms{};

	Parms.WriteBatch = std::move(WriteBatch);
	Parms.Document = Document;
	Parms.Data = std::move(Data);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	WriteBatch = std::move(Parms.WriteBatch);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.WriteBatch_Update
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWriteBatch                      WriteBatch                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FWriteBatch                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWriteBatch UFirestoreLibrary::WriteBatch_Update(struct FWriteBatch& WriteBatch, const class UFirestoreDocumentReference* Document, const TMap<class FString, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "WriteBatch_Update");

	Params::FirestoreLibrary_WriteBatch_Update Parms{};

	Parms.WriteBatch = std::move(WriteBatch);
	Parms.Document = Document;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	WriteBatch = std::move(Parms.WriteBatch);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreLibrary.WriteBatch_UpdateFieldPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWriteBatch                      WriteBatch                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UFirestoreDocumentReference*      Document                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FFirestoreFieldPath, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FWriteBatch                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FWriteBatch UFirestoreLibrary::WriteBatch_UpdateFieldPath(struct FWriteBatch& WriteBatch, const class UFirestoreDocumentReference* Document, const TMap<struct FFirestoreFieldPath, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreLibrary", "WriteBatch_UpdateFieldPath");

	Params::FirestoreLibrary_WriteBatch_UpdateFieldPath Parms{};

	Parms.WriteBatch = std::move(WriteBatch);
	Parms.Document = Document;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	WriteBatch = std::move(Parms.WriteBatch);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.WriteBatchCommitProxy.Commit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FWriteBatch                      WriteBatch                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UWriteBatchCommitProxy*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWriteBatchCommitProxy* UWriteBatchCommitProxy::Commit(struct FWriteBatch& WriteBatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WriteBatchCommitProxy", "Commit");

	Params::WriteBatchCommitProxy_Commit Parms{};

	Parms.WriteBatch = std::move(WriteBatch);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	WriteBatch = std::move(Parms.WriteBatch);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirestoreRunTransactionProxy.RunTransaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(struct FFirestoreTransaction& Transaction, class FString* ErrorMessage)>TransactionFunction                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirestoreRunTransactionProxy*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirestoreRunTransactionProxy* UFirestoreRunTransactionProxy::RunTransaction(const TDelegate<void(struct FFirestoreTransaction& Transaction, class FString* ErrorMessage)>& TransactionFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirestoreRunTransactionProxy", "RunTransaction");

	Params::FirestoreRunTransactionProxy_RunTransaction Parms{};

	Parms.TransactionFunction = TransactionFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DisableNetworkProxy.DisableNetwork
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDisableNetworkProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDisableNetworkProxy* UDisableNetworkProxy::DisableNetwork()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DisableNetworkProxy", "DisableNetwork");

	Params::DisableNetworkProxy_DisableNetwork Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.EnableNetworkProxy.DisableNetwork
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UEnableNetworkProxy*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UEnableNetworkProxy* UEnableNetworkProxy::DisableNetwork()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EnableNetworkProxy", "DisableNetwork");

	Params::EnableNetworkProxy_DisableNetwork Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.WaitForPendingWritesProxy.DisableNetwork
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWaitForPendingWritesProxy*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWaitForPendingWritesProxy* UWaitForPendingWritesProxy::DisableNetwork()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("WaitForPendingWritesProxy", "DisableNetwork");

	Params::WaitForPendingWritesProxy_DisableNetwork Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DocumentReferenceGetProxy.Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirestoreDocumentReference*      DocumentReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreSource                        Source                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDocumentReferenceGetProxy*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDocumentReferenceGetProxy* UDocumentReferenceGetProxy::Get(const class UFirestoreDocumentReference* DocumentReference, EFirestoreSource Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DocumentReferenceGetProxy", "Get");

	Params::DocumentReferenceGetProxy_Get Parms{};

	Parms.DocumentReference = DocumentReference;
	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DocumentReferenceSetProxy.Set
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirestoreDocumentReference*      DocumentReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirestoreSetOptions             Options                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDocumentReferenceSetProxy*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDocumentReferenceSetProxy* UDocumentReferenceSetProxy::Set(const class UFirestoreDocumentReference* DocumentReference, const TMap<class FString, struct FFirestoreFieldValue>& Data, const struct FFirestoreSetOptions& Options)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DocumentReferenceSetProxy", "Set");

	Params::DocumentReferenceSetProxy_Set Parms{};

	Parms.DocumentReference = DocumentReference;
	Parms.Data = std::move(Data);
	Parms.Options = std::move(Options);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DocumentReferenceUpdateProxy.Update
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirestoreDocumentReference*      DocumentReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDocumentReferenceUpdateProxy*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDocumentReferenceUpdateProxy* UDocumentReferenceUpdateProxy::Update(const class UFirestoreDocumentReference* DocumentReference, const TMap<class FString, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DocumentReferenceUpdateProxy", "Update");

	Params::DocumentReferenceUpdateProxy_Update Parms{};

	Parms.DocumentReference = DocumentReference;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DocumentReferenceUpdateWithPathProxy.UpdateWithPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirestoreDocumentReference*      DocumentReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<struct FFirestoreFieldPath, struct FFirestoreFieldValue>Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UDocumentReferenceUpdateWithPathProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDocumentReferenceUpdateWithPathProxy* UDocumentReferenceUpdateWithPathProxy::UpdateWithPath(const class UFirestoreDocumentReference* DocumentReference, const TMap<struct FFirestoreFieldPath, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DocumentReferenceUpdateWithPathProxy", "UpdateWithPath");

	Params::DocumentReferenceUpdateWithPathProxy_UpdateWithPath Parms{};

	Parms.DocumentReference = DocumentReference;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DocumentReferenceDeleteProxy.Delete
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirestoreDocumentReference*      DocumentReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDocumentReferenceDeleteProxy*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDocumentReferenceDeleteProxy* UDocumentReferenceDeleteProxy::Delete(const class UFirestoreDocumentReference* DocumentReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DocumentReferenceDeleteProxy", "Delete");

	Params::DocumentReferenceDeleteProxy_Delete Parms{};

	Parms.DocumentReference = DocumentReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CollectionReferenceAddProxy.Add
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirestoreCollectionReference*    DocumentReference                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, struct FFirestoreFieldValue>Data                                                   (Parm, NativeAccessSpecifierPublic)
// class UCollectionReferenceAddProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCollectionReferenceAddProxy* UCollectionReferenceAddProxy::Add(const class UFirestoreCollectionReference* DocumentReference, const TMap<class FString, struct FFirestoreFieldValue>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CollectionReferenceAddProxy", "Add");

	Params::CollectionReferenceAddProxy_Add Parms{};

	Parms.DocumentReference = DocumentReference;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.QueryGetProxy.Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirestoreQuery*                  Param_Query                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFirestoreSource                        Source                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UQueryGetProxy*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UQueryGetProxy* UQueryGetProxy::Get(class UFirestoreQuery* Param_Query, const EFirestoreSource Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QueryGetProxy", "Get");

	Params::QueryGetProxy_Get Parms{};

	Parms.Param_Query = Param_Query;
	Parms.Source = Source;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseFunctionsLibrary.GetHttpsCallable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseHttpsCallableReference  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirebaseHttpsCallableReference UFirebaseFunctionsLibrary::GetHttpsCallable(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseFunctionsLibrary", "GetHttpsCallable");

	Params::FirebaseFunctionsLibrary_GetHttpsCallable Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseFunctionsLibrary.GetHttpsCallableWithRegion
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Region                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseHttpsCallableReference  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirebaseHttpsCallableReference UFirebaseFunctionsLibrary::GetHttpsCallableWithRegion(const class FString& Param_Name, const class FString& Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseFunctionsLibrary", "GetHttpsCallableWithRegion");

	Params::FirebaseFunctionsLibrary_GetHttpsCallableWithRegion Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Region = std::move(Region);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseFunctionsLibrary.UseFunctionsEmulator
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Origin                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseFunctionsLibrary::UseFunctionsEmulator(const class FString& Origin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseFunctionsLibrary", "UseFunctionsEmulator");

	Params::FirebaseFunctionsLibrary_UseFunctionsEmulator Parms{};

	Parms.Origin = std::move(Origin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseFunctionsBlueprintLibrary.IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseHttpsCallableReference  HttpsCallable                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseFunctionsBlueprintLibrary::IsValid(const struct FFirebaseHttpsCallableReference& HttpsCallable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseFunctionsBlueprintLibrary", "IsValid");

	Params::FirebaseFunctionsBlueprintLibrary_IsValid Parms{};

	Parms.HttpsCallable = std::move(HttpsCallable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CallHttpsFunctionsProxy.Call
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseHttpsCallableReference  HttpsCallable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UCallHttpsFunctionsProxy*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCallHttpsFunctionsProxy* UCallHttpsFunctionsProxy::Call(struct FFirebaseHttpsCallableReference& HttpsCallable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CallHttpsFunctionsProxy", "Call");

	Params::CallHttpsFunctionsProxy_Call Parms{};

	Parms.HttpsCallable = std::move(HttpsCallable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	HttpsCallable = std::move(Parms.HttpsCallable);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.CallHttpsFunctionsWithDataProxy.CallWithData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseHttpsCallableReference  HttpsCallable                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirebaseVariant                 Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCallHttpsFunctionsWithDataProxy* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCallHttpsFunctionsWithDataProxy* UCallHttpsFunctionsWithDataProxy::CallWithData(struct FFirebaseHttpsCallableReference& HttpsCallable, const struct FFirebaseVariant& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CallHttpsFunctionsWithDataProxy", "CallWithData");

	Params::CallHttpsFunctionsWithDataProxy_CallWithData Parms{};

	Parms.HttpsCallable = std::move(HttpsCallable);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	HttpsCallable = std::move(Parms.HttpsCallable);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FbGoogleSignInProxy.SignIn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerClientID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipIfSigned                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSilentSignIn                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFbGoogleSignInProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFbGoogleSignInProxy* UFbGoogleSignInProxy::SignIn(const class FString& ServerClientID, bool bSkipIfSigned, bool bUseSilentSignIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FbGoogleSignInProxy", "SignIn");

	Params::FbGoogleSignInProxy_SignIn Parms{};

	Parms.ServerClientID = std::move(ServerClientID);
	Parms.bSkipIfSigned = bSkipIfSigned;
	Parms.bUseSilentSignIn = bUseSilentSignIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GetLeaderboardScoreProxy.GetScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           LeaderboardID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGetLeaderboardScoreProxy*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGetLeaderboardScoreProxy* UGetLeaderboardScoreProxy::GetScore(const class FString& LeaderboardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GetLeaderboardScoreProxy", "GetScore");

	Params::GetLeaderboardScoreProxy_GetScore Parms{};

	Parms.LeaderboardID = std::move(LeaderboardID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleSignInCredentialProxy.GetCredential
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerClientID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSilentSignIn                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipIfSigned                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGoogleSignInCredentialProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGoogleSignInCredentialProxy* UGoogleSignInCredentialProxy::GetCredential(const class FString& ServerClientID, bool bUseSilentSignIn, bool bSkipIfSigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleSignInCredentialProxy", "GetCredential");

	Params::GoogleSignInCredentialProxy_GetCredential Parms{};

	Parms.ServerClientID = std::move(ServerClientID);
	Parms.bUseSilentSignIn = bUseSilentSignIn;
	Parms.bSkipIfSigned = bSkipIfSigned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleSignInCredentialProxy.GetCredentialFromPlayGames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerClientID                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSilentSignIn                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipIfSigned                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGoogleSignInCredentialProxy*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGoogleSignInCredentialProxy* UGoogleSignInCredentialProxy::GetCredentialFromPlayGames(const class FString& ServerClientID, bool bUseSilentSignIn, bool bSkipIfSigned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleSignInCredentialProxy", "GetCredentialFromPlayGames");

	Params::GoogleSignInCredentialProxy_GetCredentialFromPlayGames Parms{};

	Parms.ServerClientID = std::move(ServerClientID);
	Parms.bUseSilentSignIn = bUseSilentSignIn;
	Parms.bSkipIfSigned = bSkipIfSigned;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleServicesLibrary.GetAccessToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGoogleServicesLibrary::GetAccessToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "GetAccessToken");

	Params::GoogleServicesLibrary_GetAccessToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleServicesLibrary.GetIdToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGoogleServicesLibrary::GetIdToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "GetIdToken");

	Params::GoogleServicesLibrary_GetIdToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleServicesLibrary.GetServerAuthCode
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGoogleServicesLibrary::GetServerAuthCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "GetServerAuthCode");

	Params::GoogleServicesLibrary_GetServerAuthCode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleServicesLibrary.IsSignedIn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGoogleServicesLibrary::IsSignedIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "IsSignedIn");

	Params::GoogleServicesLibrary_IsSignedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.GoogleServicesLibrary.ShowAchievements
// (Final, Native, Static, Public, BlueprintCallable)

void UGoogleServicesLibrary::ShowAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "ShowAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.GoogleServicesLibrary.ShowLeaderboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           LeaderboardID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGoogleServicesLibrary::ShowLeaderboard(const class FString& LeaderboardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "ShowLeaderboard");

	Params::GoogleServicesLibrary_ShowLeaderboard Parms{};

	Parms.LeaderboardID = std::move(LeaderboardID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.GoogleServicesLibrary.SignOut
// (Final, Native, Static, Public, BlueprintCallable)

void UGoogleServicesLibrary::SignOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "SignOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.GoogleServicesLibrary.SubmitScore
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           LeaderboardID                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Score                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGoogleServicesLibrary::SubmitScore(const class FString& LeaderboardID, int64 Score)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GoogleServicesLibrary", "SubmitScore");

	Params::GoogleServicesLibrary_SubmitScore Parms{};

	Parms.LeaderboardID = std::move(LeaderboardID);
	Parms.Score = Score;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.GetCachedCloudMessagingToken
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseMesssagingBlueprintLibrary::GetCachedCloudMessagingToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "GetCachedCloudMessagingToken");

	Params::FirebaseMesssagingBlueprintLibrary_GetCachedCloudMessagingToken Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.GetLastMessage
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseMessage                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FFirebaseMessage UFirebaseMesssagingBlueprintLibrary::GetLastMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "GetLastMessage");

	Params::FirebaseMesssagingBlueprintLibrary_GetLastMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.IsDeliveryMetricsExportToBigQueryEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseMesssagingBlueprintLibrary::IsDeliveryMetricsExportToBigQueryEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "IsDeliveryMetricsExportToBigQueryEnabled");

	Params::FirebaseMesssagingBlueprintLibrary_IsDeliveryMetricsExportToBigQueryEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.IsTokenRegistrationOnInitEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseMesssagingBlueprintLibrary::IsTokenRegistrationOnInitEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "IsTokenRegistrationOnInitEnabled");

	Params::FirebaseMesssagingBlueprintLibrary_IsTokenRegistrationOnInitEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.Send
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseMessage                 Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebaseMesssagingBlueprintLibrary::Send(const struct FFirebaseMessage& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "Send");

	Params::FirebaseMesssagingBlueprintLibrary_Send Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.SetDeliveryMetricsExportToBigQuery
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseMesssagingBlueprintLibrary::SetDeliveryMetricsExportToBigQuery(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "SetDeliveryMetricsExportToBigQuery");

	Params::FirebaseMesssagingBlueprintLibrary_SetDeliveryMetricsExportToBigQuery Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.SetTokenRegistrationOnInitEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseMesssagingBlueprintLibrary::SetTokenRegistrationOnInitEnabled(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "SetTokenRegistrationOnInitEnabled");

	Params::FirebaseMesssagingBlueprintLibrary_SetTokenRegistrationOnInitEnabled Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseMesssagingBlueprintLibrary.Terminate
// (Final, Native, Static, Public, BlueprintCallable)

void UFirebaseMesssagingBlueprintLibrary::Terminate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseMesssagingBlueprintLibrary", "Terminate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.RequestPermissionProxy.RequestPermission
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URequestPermissionProxy*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URequestPermissionProxy* URequestPermissionProxy::RequestPermission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RequestPermissionProxy", "RequestPermission");

	Params::RequestPermissionProxy_RequestPermission Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.SubscribeProxy.Subscribe
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Topic                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USubscribeProxy*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USubscribeProxy* USubscribeProxy::Subscribe(const class FString& Topic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SubscribeProxy", "Subscribe");

	Params::SubscribeProxy_Subscribe Parms{};

	Parms.Topic = std::move(Topic);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UnsubscribeProxy.Unsubscribe
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Topic                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUnsubscribeProxy*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUnsubscribeProxy* UUnsubscribeProxy::Unsubscribe(const class FString& Topic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UnsubscribeProxy", "Unsubscribe");

	Params::UnsubscribeProxy_Unsubscribe Parms{};

	Parms.Topic = std::move(Topic);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.MessagingEventsProxy.ListenForMessagingEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMessagingEventsProxy*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMessagingEventsProxy* UMessagingEventsProxy::ListenForMessagingEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MessagingEventsProxy", "ListenForMessagingEvents");

	Params::MessagingEventsProxy_ListenForMessagingEvents Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.ActivateFetched
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EFirebaseConfigFetchActivationBranch    branch                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseRemoteConfig::ActivateFetched(EFirebaseConfigFetchActivationBranch* branch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "ActivateFetched");

	Params::FirebaseRemoteConfig_ActivateFetched Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (branch != nullptr)
		*branch = Parms.branch;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetBoolean
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseRemoteConfig::GetBoolean(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetBoolean");

	Params::FirebaseRemoteConfig_GetBoolean Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetBooleanWithInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseValueInfo               Info                                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseRemoteConfig::GetBooleanWithInfo(const class FString& Key, struct FFirebaseValueInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetBooleanWithInfo");

	Params::FirebaseRemoteConfig_GetBooleanWithInfo Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetByte
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UFirebaseRemoteConfig::GetByte(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetByte");

	Params::FirebaseRemoteConfig_GetByte Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetConfigSetting
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EFirebaseConfigSetting                  Defaults                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseRemoteConfig::GetConfigSetting(EFirebaseConfigSetting Defaults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetConfigSetting");

	Params::FirebaseRemoteConfig_GetConfigSetting Parms{};

	Parms.Defaults = Defaults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFirebaseRemoteConfig::GetData(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetData");

	Params::FirebaseRemoteConfig_GetData Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetDataWithInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseValueInfo               Info                                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UFirebaseRemoteConfig::GetDataWithInfo(const class FString& Key, struct FFirebaseValueInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetDataWithInfo");

	Params::FirebaseRemoteConfig_GetDataWithInfo Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFirebaseRemoteConfig::GetFloat(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetFloat");

	Params::FirebaseRemoteConfig_GetFloat Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetFloatWithInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseValueInfo               Info                                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFirebaseRemoteConfig::GetFloatWithInfo(const class FString& Key, struct FFirebaseValueInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetFloatWithInfo");

	Params::FirebaseRemoteConfig_GetFloatWithInfo Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetInfo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseConfigInfo              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FFirebaseConfigInfo UFirebaseRemoteConfig::GetInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetInfo");

	Params::FirebaseRemoteConfig_GetInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetInt32
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFirebaseRemoteConfig::GetInt32(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetInt32");

	Params::FirebaseRemoteConfig_GetInt32 Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetInt64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirebaseRemoteConfig::GetInt64(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetInt64");

	Params::FirebaseRemoteConfig_GetInt64 Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetInt64WithInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseValueInfo               Info                                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UFirebaseRemoteConfig::GetInt64WithInfo(const class FString& Key, struct FFirebaseValueInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetInt64WithInfo");

	Params::FirebaseRemoteConfig_GetInt64WithInfo Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetKeys
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UFirebaseRemoteConfig::GetKeys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetKeys");

	Params::FirebaseRemoteConfig_GetKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetKeysByPrefix
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Prefix                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UFirebaseRemoteConfig::GetKeysByPrefix(const class FString& Prefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetKeysByPrefix");

	Params::FirebaseRemoteConfig_GetKeysByPrefix Parms{};

	Parms.Prefix = std::move(Prefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseRemoteConfig::GetString(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetString");

	Params::FirebaseRemoteConfig_GetString Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.GetStringWithInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseValueInfo               Info                                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseRemoteConfig::GetStringWithInfo(const class FString& Key, struct FFirebaseValueInfo* Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "GetStringWithInfo");

	Params::FirebaseRemoteConfig_GetStringWithInfo Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Info != nullptr)
		*Info = std::move(Parms.Info);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.SetConfigSetting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EFirebaseConfigSetting                  Setting                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseRemoteConfig::SetConfigSetting(EFirebaseConfigSetting Setting, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "SetConfigSetting");

	Params::FirebaseRemoteConfig_SetConfigSetting Parms{};

	Parms.Setting = Setting;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.SetDefaults
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFirebaseConfigKeyValue>  Defaults                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebaseRemoteConfig::SetDefaults(const TArray<struct FFirebaseConfigKeyValue>& Defaults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "SetDefaults");

	Params::FirebaseRemoteConfig_SetDefaults Parms{};

	Parms.Defaults = std::move(Defaults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.SetDefaultsWithVariant
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FFirebaseConfigKeyValueVariant>Defaults                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFirebaseRemoteConfig::SetDefaultsWithVariant(const TArray<struct FFirebaseConfigKeyValueVariant>& Defaults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "SetDefaultsWithVariant");

	Params::FirebaseRemoteConfig_SetDefaultsWithVariant Parms{};

	Parms.Defaults = std::move(Defaults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseRemoteConfig.Terminate
// (Final, Native, Static, Public, BlueprintCallable)

void UFirebaseRemoteConfig::Terminate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseRemoteConfig", "Terminate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FetchProxy.Fetch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFetchProxy*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFetchProxy* UFetchProxy::Fetch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FetchProxy", "Fetch");

	Params::FetchProxy_Fetch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FetchWithCacheExpirationProxy.FetchWithCacheExpiration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CacheExpirationInSeconds                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFetchWithCacheExpirationProxy*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFetchWithCacheExpirationProxy* UFetchWithCacheExpirationProxy::FetchWithCacheExpiration(const int32 CacheExpirationInSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FetchWithCacheExpirationProxy", "FetchWithCacheExpiration");

	Params::FetchWithCacheExpirationProxy_FetchWithCacheExpiration Parms{};

	Parms.CacheExpirationInSeconds = CacheExpirationInSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetMaxDownloadRetryTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFirebaseStorage::GetMaxDownloadRetryTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetMaxDownloadRetryTime");

	Params::FirebaseStorage_GetMaxDownloadRetryTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetMaxOperationRetryTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFirebaseStorage::GetMaxOperationRetryTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetMaxOperationRetryTime");

	Params::FirebaseStorage_GetMaxOperationRetryTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetMaxUploadRetryTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFirebaseStorage::GetMaxUploadRetryTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetMaxUploadRetryTime");

	Params::FirebaseStorage_GetMaxUploadRetryTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetReference
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UFirebaseStorage::GetReference()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetReference");

	Params::FirebaseStorage_GetReference Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetReferenceFromPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UFirebaseStorage::GetReferenceFromPath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetReferenceFromPath");

	Params::FirebaseStorage_GetReferenceFromPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetReferenceFromUrl
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UFirebaseStorage::GetReferenceFromUrl(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetReferenceFromUrl");

	Params::FirebaseStorage_GetReferenceFromUrl Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.GetUrl
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseStorage::GetUrl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "GetUrl");

	Params::FirebaseStorage_GetUrl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorage.SetMaxDownloadRetryTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   MaxTransferRetrySeconds                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseStorage::SetMaxDownloadRetryTime(float MaxTransferRetrySeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "SetMaxDownloadRetryTime");

	Params::FirebaseStorage_SetMaxDownloadRetryTime Parms{};

	Parms.MaxTransferRetrySeconds = MaxTransferRetrySeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseStorage.SetMaxOperationRetryTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   MaxTransferRetrySeconds                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseStorage::SetMaxOperationRetryTime(float MaxTransferRetrySeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "SetMaxOperationRetryTime");

	Params::FirebaseStorage_SetMaxOperationRetryTime Parms{};

	Parms.MaxTransferRetrySeconds = MaxTransferRetrySeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.FirebaseStorage.SetMaxUploadRetryTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   MaxTransferRetrySeconds                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFirebaseStorage::SetMaxUploadRetryTime(float MaxTransferRetrySeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FirebaseStorage", "SetMaxUploadRetryTime");

	Params::FirebaseStorage_SetMaxUploadRetryTime Parms{};

	Parms.MaxTransferRetrySeconds = MaxTransferRetrySeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.BytesTransferred
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::BytesTransferred(const struct FFirebaseStorageController& Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "BytesTransferred");

	Params::StorageBlueprintLibrary_BytesTransferred Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.Cancel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EFirebaseStorageBlueprintExecutionPin   Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::Cancel(struct FFirebaseStorageController& Controller, EFirebaseStorageBlueprintExecutionPin* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "Cancel");

	Params::StorageBlueprintLibrary_Cancel Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.ContentType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::ContentType(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "ContentType");

	Params::StorageBlueprintLibrary_ContentType Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetBucket
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetBucket(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetBucket");

	Params::StorageBlueprintLibrary_GetBucket Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetCacheControl
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetCacheControl(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetCacheControl");

	Params::StorageBlueprintLibrary_GetCacheControl Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetContentDisposition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetContentDisposition(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetContentDisposition");

	Params::StorageBlueprintLibrary_GetContentDisposition Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetContentEncoding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetContentEncoding(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetContentEncoding");

	Params::StorageBlueprintLibrary_GetContentEncoding Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetContentLanguage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetContentLanguage(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetContentLanguage");

	Params::StorageBlueprintLibrary_GetContentLanguage Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetCreationTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::GetCreationTime(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetCreationTime");

	Params::StorageBlueprintLibrary_GetCreationTime Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetCustomMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FString, class FString> UStorageBlueprintLibrary::GetCustomMetadata(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetCustomMetadata");

	Params::StorageBlueprintLibrary_GetCustomMetadata Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetGeneration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::GetGeneration(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetGeneration");

	Params::StorageBlueprintLibrary_GetGeneration Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetMd5Hash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetMd5Hash(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetMd5Hash");

	Params::StorageBlueprintLibrary_GetMd5Hash Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetMetadataGeneration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::GetMetadataGeneration(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetMetadataGeneration");

	Params::StorageBlueprintLibrary_GetMetadataGeneration Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetName(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetName");

	Params::StorageBlueprintLibrary_GetName Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UStorageBlueprintLibrary::GetPath(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetPath");

	Params::StorageBlueprintLibrary_GetPath Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UStorageBlueprintLibrary::GetReference(const struct FFirebaseStorageController& Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetReference");

	Params::StorageBlueprintLibrary_GetReference Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetReference_Metadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UStorageBlueprintLibrary::GetReference_Metadata(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetReference_Metadata");

	Params::StorageBlueprintLibrary_GetReference_Metadata Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetSizeBytes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::GetSizeBytes(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetSizeBytes");

	Params::StorageBlueprintLibrary_GetSizeBytes Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.GetUpdatedTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::GetUpdatedTime(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "GetUpdatedTime");

	Params::StorageBlueprintLibrary_GetUpdatedTime Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.IsPaused
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStorageBlueprintLibrary::IsPaused(struct FFirebaseStorageController& Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "IsPaused");

	Params::StorageBlueprintLibrary_IsPaused Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStorageBlueprintLibrary::IsValid(const struct FFirebaseStorageController& Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "IsValid");

	Params::StorageBlueprintLibrary_IsValid Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.IsValid_Metadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStorageBlueprintLibrary::IsValid_Metadata(const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "IsValid_Metadata");

	Params::StorageBlueprintLibrary_IsValid_Metadata Parms{};

	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.Pause
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EFirebaseStorageBlueprintExecutionPin   Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::Pause(struct FFirebaseStorageController& Controller, EFirebaseStorageBlueprintExecutionPin* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "Pause");

	Params::StorageBlueprintLibrary_Pause Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.Resume
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EFirebaseStorageBlueprintExecutionPin   Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::Resume(struct FFirebaseStorageController& Controller, EFirebaseStorageBlueprintExecutionPin* Branches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "Resume");

	Params::StorageBlueprintLibrary_Resume Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Controller = std::move(Parms.Controller);

	if (Branches != nullptr)
		*Branches = Parms.Branches;
}


// Function FirebaseFeatures.StorageBlueprintLibrary.SetCachControl
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           CacheControl                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::SetCachControl(struct FFirebaseStorageMetadata& Metadata, const class FString& CacheControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "SetCachControl");

	Params::StorageBlueprintLibrary_SetCachControl Parms{};

	Parms.Metadata = std::move(Metadata);
	Parms.CacheControl = std::move(CacheControl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);
}


// Function FirebaseFeatures.StorageBlueprintLibrary.SetContentDisposition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Disposition                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::SetContentDisposition(struct FFirebaseStorageMetadata& Metadata, const class FString& Disposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "SetContentDisposition");

	Params::StorageBlueprintLibrary_SetContentDisposition Parms{};

	Parms.Metadata = std::move(Metadata);
	Parms.Disposition = std::move(Disposition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);
}


// Function FirebaseFeatures.StorageBlueprintLibrary.SetContentEncoding
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Encoding                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::SetContentEncoding(struct FFirebaseStorageMetadata& Metadata, const class FString& Encoding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "SetContentEncoding");

	Params::StorageBlueprintLibrary_SetContentEncoding Parms{};

	Parms.Metadata = std::move(Metadata);
	Parms.Encoding = std::move(Encoding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);
}


// Function FirebaseFeatures.StorageBlueprintLibrary.SetContentLanguage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Language                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::SetContentLanguage(struct FFirebaseStorageMetadata& Metadata, const class FString& Language)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "SetContentLanguage");

	Params::StorageBlueprintLibrary_SetContentLanguage Parms{};

	Parms.Metadata = std::move(Metadata);
	Parms.Language = std::move(Language);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);
}


// Function FirebaseFeatures.StorageBlueprintLibrary.SetContentType
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FFirebaseStorageMetadata         Metadata                                               (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           Type                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStorageBlueprintLibrary::SetContentType(struct FFirebaseStorageMetadata& Metadata, const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "SetContentType");

	Params::StorageBlueprintLibrary_SetContentType Parms{};

	Parms.Metadata = std::move(Metadata);
	Parms.Type = std::move(Type);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Metadata = std::move(Parms.Metadata);
}


// Function FirebaseFeatures.StorageBlueprintLibrary.TotalByteCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FFirebaseStorageController       Controller                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UStorageBlueprintLibrary::TotalByteCount(const struct FFirebaseStorageController& Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageBlueprintLibrary", "TotalByteCount");

	Params::StorageBlueprintLibrary_TotalByteCount Parms{};

	Parms.Controller = std::move(Controller);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageDeleteProxy.Delete
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStorageDeleteProxy*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStorageDeleteProxy* UStorageDeleteProxy::Delete(class UFirebaseStorageReference* StorageReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageDeleteProxy", "Delete");

	Params::StorageDeleteProxy_Delete Parms{};

	Parms.StorageReference = StorageReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageGetFileProxy.GetFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStorageGetFileProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStorageGetFileProxy* UStorageGetFileProxy::GetFile(class UFirebaseStorageReference* StorageReference, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageGetFileProxy", "GetFile");

	Params::StorageGetFileProxy_GetFile Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageGetBytesProxy.GetBytes
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   BufferSize                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStorageGetBytesProxy*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStorageGetBytesProxy* UStorageGetBytesProxy::GetBytes(class UFirebaseStorageReference* StorageReference, const int64 BufferSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageGetBytesProxy", "GetBytes");

	Params::StorageGetBytesProxy_GetBytes Parms{};

	Parms.StorageReference = StorageReference;
	Parms.BufferSize = BufferSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageGetDownloadUrlProxy.GetDownloadUrl
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStorageGetDownloadUrlProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStorageGetDownloadUrlProxy* UStorageGetDownloadUrlProxy::GetDownloadUrl(class UFirebaseStorageReference* StorageReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageGetDownloadUrlProxy", "GetDownloadUrl");

	Params::StorageGetDownloadUrlProxy_GetDownloadUrl Parms{};

	Parms.StorageReference = StorageReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StorageGetMetadataProxy.GetMetadata
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStorageGetMetadataProxy*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStorageGetMetadataProxy* UStorageGetMetadataProxy::GetMetadata(class UFirebaseStorageReference* StorageReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StorageGetMetadataProxy", "GetMetadata");

	Params::StorageGetMetadataProxy_GetMetadata Parms{};

	Parms.StorageReference = StorageReference;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StoragePutBytesProxy.PutBytes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Bytes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UStoragePutBytesProxy*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoragePutBytesProxy* UStoragePutBytesProxy::PutBytes(class UFirebaseStorageReference* StorageReference, const TArray<uint8>& Bytes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StoragePutBytesProxy", "PutBytes");

	Params::StoragePutBytesProxy_PutBytes Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Bytes = std::move(Bytes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StoragePutBytesWithMetadataProxy.PutBytesWithMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Bytes                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UStoragePutBytesWithMetadataProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoragePutBytesWithMetadataProxy* UStoragePutBytesWithMetadataProxy::PutBytesWithMetadata(class UFirebaseStorageReference* StorageReference, const TArray<uint8>& Bytes, const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StoragePutBytesWithMetadataProxy", "PutBytesWithMetadata");

	Params::StoragePutBytesWithMetadataProxy_PutBytesWithMetadata Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Bytes = std::move(Bytes);
	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StoragePutFileProxy.PutFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStoragePutFileProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoragePutFileProxy* UStoragePutFileProxy::PutFile(class UFirebaseStorageReference* StorageReference, const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StoragePutFileProxy", "PutFile");

	Params::StoragePutFileProxy_PutFile Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StoragePutFileWithMetadataProxy.PutFileUFS
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UStoragePutFileWithMetadataProxy* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoragePutFileWithMetadataProxy* UStoragePutFileWithMetadataProxy::PutFileUFS(class UFirebaseStorageReference* StorageReference, const class FString& Path, const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StoragePutFileWithMetadataProxy", "PutFileUFS");

	Params::StoragePutFileWithMetadataProxy_PutFileUFS Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Path = std::move(Path);
	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.StoragePutFileWithMetadataProxy.PutFileWithMetadata
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UFirebaseStorageReference*        StorageReference                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFirebaseStorageMetadata         Metadata                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UStoragePutFileWithMetadataProxy* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStoragePutFileWithMetadataProxy* UStoragePutFileWithMetadataProxy::PutFileWithMetadata(class UFirebaseStorageReference* StorageReference, const class FString& Path, const struct FFirebaseStorageMetadata& Metadata)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StoragePutFileWithMetadataProxy", "PutFileWithMetadata");

	Params::StoragePutFileWithMetadataProxy_PutFileWithMetadata Parms{};

	Parms.StorageReference = StorageReference;
	Parms.Path = std::move(Path);
	Parms.Metadata = std::move(Metadata);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorageReference.GetBucket
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseStorageReference::GetBucket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseStorageReference", "GetBucket");

	Params::FirebaseStorageReference_GetBucket Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorageReference.GetFullPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseStorageReference::GetFullPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseStorageReference", "GetFullPath");

	Params::FirebaseStorageReference_GetFullPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorageReference.GetName
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UFirebaseStorageReference::GetName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseStorageReference", "GetName");

	Params::FirebaseStorageReference_GetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorageReference.GetParent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UFirebaseStorageReference::GetParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseStorageReference", "GetParent");

	Params::FirebaseStorageReference_GetParent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorageReference.Child
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFirebaseStorageReference*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFirebaseStorageReference* UFirebaseStorageReference::Child(const class FString& Path) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseStorageReference", "Child");

	Params::FirebaseStorageReference_Child Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.FirebaseStorageReference.IsValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFirebaseStorageReference::IsValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FirebaseStorageReference", "IsValid");

	Params::FirebaseStorageReference_IsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UpdateEmailProxy.UpdateEmail
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Email                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUpdateEmailProxy*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUpdateEmailProxy* UUpdateEmailProxy::UpdateEmail(const class UUser* User, const class FString& Email)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpdateEmailProxy", "UpdateEmail");

	Params::UpdateEmailProxy_UpdateEmail Parms{};

	Parms.User = User;
	Parms.Email = std::move(Email);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ReauthenticateProxy.Reauthenticate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UReauthenticateProxy*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UReauthenticateProxy* UReauthenticateProxy::Reauthenticate(const class UUser* User, const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReauthenticateProxy", "Reauthenticate");

	Params::ReauthenticateProxy_Reauthenticate Parms{};

	Parms.User = User;
	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ReauthenticateWithProviderProxy.ReauthenticateWithProvider
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFederatedAuthProvider           Provider                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UReauthenticateWithProviderProxy* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UReauthenticateWithProviderProxy* UReauthenticateWithProviderProxy::ReauthenticateWithProvider(const class UUser* User, const struct FFederatedAuthProvider& Provider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReauthenticateWithProviderProxy", "ReauthenticateWithProvider");

	Params::ReauthenticateWithProviderProxy_ReauthenticateWithProvider Parms{};

	Parms.User = User;
	Parms.Provider = std::move(Provider);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UpdateUserProfileProxy.UpdateUserProfile
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUserProfile                     Profile                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UUpdateUserProfileProxy*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUpdateUserProfileProxy* UUpdateUserProfileProxy::UpdateUserProfile(const class UUser* User, const struct FUserProfile& Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UpdateUserProfileProxy", "UpdateUserProfile");

	Params::UpdateUserProfileProxy_UpdateUserProfile Parms{};

	Parms.User = User;
	Parms.Profile = std::move(Profile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.LinkWithCredentialProxy.LinkWithCredential
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULinkWithCredentialProxy*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULinkWithCredentialProxy* ULinkWithCredentialProxy::LinkWithCredential(const class UUser* User, const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LinkWithCredentialProxy", "LinkWithCredential");

	Params::LinkWithCredentialProxy_LinkWithCredential Parms{};

	Parms.User = User;
	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.LinkAndRetrieveDataWithCredentialProxy.LinkAndRetrieveDataWithCredential
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCredential                      Credential                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULinkAndRetrieveDataWithCredentialProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULinkAndRetrieveDataWithCredentialProxy* ULinkAndRetrieveDataWithCredentialProxy::LinkAndRetrieveDataWithCredential(const class UUser* User, const struct FCredential& Credential)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LinkAndRetrieveDataWithCredentialProxy", "LinkAndRetrieveDataWithCredential");

	Params::LinkAndRetrieveDataWithCredentialProxy_LinkAndRetrieveDataWithCredential Parms{};

	Parms.User = User;
	Parms.Credential = std::move(Credential);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.LinkWithProviderProxy.LinkWithProvider
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFederatedAuthProvider           Provider                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULinkWithProviderProxy*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULinkWithProviderProxy* ULinkWithProviderProxy::LinkWithProvider(const class UUser* User, const struct FFederatedAuthProvider& Provider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LinkWithProviderProxy", "LinkWithProvider");

	Params::LinkWithProviderProxy_LinkWithProvider Parms{};

	Parms.User = User;
	Parms.Provider = std::move(Provider);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.UnlinkProxy.Unlink
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Provider                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUnlinkProxy*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUnlinkProxy* UUnlinkProxy::Unlink(const class UUser* User, const class FString& Provider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UnlinkProxy", "Unlink");

	Params::UnlinkProxy_Unlink Parms{};

	Parms.User = User;
	Parms.Provider = std::move(Provider);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.ReloadProxy.Reload
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UReloadProxy*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UReloadProxy* UReloadProxy::Reload(const class UUser* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ReloadProxy", "Reload");

	Params::ReloadProxy_Reload Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function FirebaseFeatures.DeleteProxy.Delete
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUser*                            User                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDeleteProxy*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDeleteProxy* UDeleteProxy::Delete(const class UUser* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DeleteProxy", "Delete");

	Params::DeleteProxy_Delete Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

