#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Vehicle

#include "Basic.hpp"


namespace SDK::Params
{

// Function I_Vehicle.I_Vehicle_C.ExitVehicle
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_ExitVehicle final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipExitOnLocation;                                // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreSpeedLimits;                                 // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_ExitVehicle) == 0x000008, "Wrong alignment on I_Vehicle_C_ExitVehicle");
static_assert(sizeof(I_Vehicle_C_ExitVehicle) == 0x000010, "Wrong size on I_Vehicle_C_ExitVehicle");
static_assert(offsetof(I_Vehicle_C_ExitVehicle, Player) == 0x000000, "Member 'I_Vehicle_C_ExitVehicle::Player' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_ExitVehicle, SkipAnimation) == 0x000008, "Member 'I_Vehicle_C_ExitVehicle::SkipAnimation' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_ExitVehicle, SkipExitOnLocation) == 0x000009, "Member 'I_Vehicle_C_ExitVehicle::SkipExitOnLocation' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_ExitVehicle, IgnoreSpeedLimits) == 0x00000A, "Member 'I_Vehicle_C_ExitVehicle::IgnoreSpeedLimits' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_ExitVehicle, Success) == 0x00000B, "Member 'I_Vehicle_C_ExitVehicle::Success' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetBoostInfo
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_GetBoostInfo final
{
public:
	double                                        BoostTime;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BoostCooldownTime;                                 // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetBoostInfo) == 0x000008, "Wrong alignment on I_Vehicle_C_GetBoostInfo");
static_assert(sizeof(I_Vehicle_C_GetBoostInfo) == 0x000010, "Wrong size on I_Vehicle_C_GetBoostInfo");
static_assert(offsetof(I_Vehicle_C_GetBoostInfo, BoostTime) == 0x000000, "Member 'I_Vehicle_C_GetBoostInfo::BoostTime' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetBoostInfo, BoostCooldownTime) == 0x000008, "Member 'I_Vehicle_C_GetBoostInfo::BoostCooldownTime' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetCarStatsComponent
// 0x0008 (0x0008 - 0x0000)
struct I_Vehicle_C_GetCarStatsComponent final
{
public:
	class UBPC_CarStatsComponent_C*               CarStats;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetCarStatsComponent) == 0x000008, "Wrong alignment on I_Vehicle_C_GetCarStatsComponent");
static_assert(sizeof(I_Vehicle_C_GetCarStatsComponent) == 0x000008, "Wrong size on I_Vehicle_C_GetCarStatsComponent");
static_assert(offsetof(I_Vehicle_C_GetCarStatsComponent, CarStats) == 0x000000, "Member 'I_Vehicle_C_GetCarStatsComponent::CarStats' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetDriver
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_GetDriver final
{
public:
	class APawn*                                  Driver;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_V2_C*                   NewParam;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetDriver) == 0x000008, "Wrong alignment on I_Vehicle_C_GetDriver");
static_assert(sizeof(I_Vehicle_C_GetDriver) == 0x000010, "Wrong size on I_Vehicle_C_GetDriver");
static_assert(offsetof(I_Vehicle_C_GetDriver, Driver) == 0x000000, "Member 'I_Vehicle_C_GetDriver::Driver' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetDriver, NewParam) == 0x000008, "Member 'I_Vehicle_C_GetDriver::NewParam' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetEngineStarted
// 0x0001 (0x0001 - 0x0000)
struct I_Vehicle_C_GetEngineStarted final
{
public:
	bool                                          Started;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetEngineStarted) == 0x000001, "Wrong alignment on I_Vehicle_C_GetEngineStarted");
static_assert(sizeof(I_Vehicle_C_GetEngineStarted) == 0x000001, "Wrong size on I_Vehicle_C_GetEngineStarted");
static_assert(offsetof(I_Vehicle_C_GetEngineStarted, Started) == 0x000000, "Member 'I_Vehicle_C_GetEngineStarted::Started' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetIsAccelerating
// 0x0001 (0x0001 - 0x0000)
struct I_Vehicle_C_GetIsAccelerating final
{
public:
	bool                                          IsAccelerating;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetIsAccelerating) == 0x000001, "Wrong alignment on I_Vehicle_C_GetIsAccelerating");
static_assert(sizeof(I_Vehicle_C_GetIsAccelerating) == 0x000001, "Wrong size on I_Vehicle_C_GetIsAccelerating");
static_assert(offsetof(I_Vehicle_C_GetIsAccelerating, IsAccelerating) == 0x000000, "Member 'I_Vehicle_C_GetIsAccelerating::IsAccelerating' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetPassengers
// 0x0018 (0x0018 - 0x0000)
struct I_Vehicle_C_GetPassengers final
{
public:
	class APawn*                                  PassengerFL;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PassengerBL;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PassengerBR;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetPassengers) == 0x000008, "Wrong alignment on I_Vehicle_C_GetPassengers");
static_assert(sizeof(I_Vehicle_C_GetPassengers) == 0x000018, "Wrong size on I_Vehicle_C_GetPassengers");
static_assert(offsetof(I_Vehicle_C_GetPassengers, PassengerFL) == 0x000000, "Member 'I_Vehicle_C_GetPassengers::PassengerFL' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetPassengers, PassengerBL) == 0x000008, "Member 'I_Vehicle_C_GetPassengers::PassengerBL' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetPassengers, PassengerBR) == 0x000010, "Member 'I_Vehicle_C_GetPassengers::PassengerBR' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetSteering
// 0x0008 (0x0008 - 0x0000)
struct I_Vehicle_C_GetSteering final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetSteering) == 0x000008, "Wrong alignment on I_Vehicle_C_GetSteering");
static_assert(sizeof(I_Vehicle_C_GetSteering) == 0x000008, "Wrong size on I_Vehicle_C_GetSteering");
static_assert(offsetof(I_Vehicle_C_GetSteering, Angle) == 0x000000, "Member 'I_Vehicle_C_GetSteering::Angle' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetVehicleBody
// 0x0008 (0x0008 - 0x0000)
struct I_Vehicle_C_GetVehicleBody final
{
public:
	class USkeletalMeshComponent*                 Body;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetVehicleBody) == 0x000008, "Wrong alignment on I_Vehicle_C_GetVehicleBody");
static_assert(sizeof(I_Vehicle_C_GetVehicleBody) == 0x000008, "Wrong size on I_Vehicle_C_GetVehicleBody");
static_assert(offsetof(I_Vehicle_C_GetVehicleBody, Body) == 0x000000, "Member 'I_Vehicle_C_GetVehicleBody::Body' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetWheelPitches
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_GetWheelPitches final
{
public:
	TArray<double>                                Pitches;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(I_Vehicle_C_GetWheelPitches) == 0x000008, "Wrong alignment on I_Vehicle_C_GetWheelPitches");
static_assert(sizeof(I_Vehicle_C_GetWheelPitches) == 0x000010, "Wrong size on I_Vehicle_C_GetWheelPitches");
static_assert(offsetof(I_Vehicle_C_GetWheelPitches, Pitches) == 0x000000, "Member 'I_Vehicle_C_GetWheelPitches::Pitches' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.GetWheels
// 0x0028 (0x0028 - 0x0000)
struct I_Vehicle_C_GetWheels final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       LF;                                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RF;                                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LB;                                                // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RB;                                                // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_GetWheels) == 0x000008, "Wrong alignment on I_Vehicle_C_GetWheels");
static_assert(sizeof(I_Vehicle_C_GetWheels) == 0x000028, "Wrong size on I_Vehicle_C_GetWheels");
static_assert(offsetof(I_Vehicle_C_GetWheels, IsValid) == 0x000000, "Member 'I_Vehicle_C_GetWheels::IsValid' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetWheels, LF) == 0x000008, "Member 'I_Vehicle_C_GetWheels::LF' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetWheels, RF) == 0x000010, "Member 'I_Vehicle_C_GetWheels::RF' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetWheels, LB) == 0x000018, "Member 'I_Vehicle_C_GetWheels::LB' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_GetWheels, RB) == 0x000020, "Member 'I_Vehicle_C_GetWheels::RB' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.HasDriver
// 0x0001 (0x0001 - 0x0000)
struct I_Vehicle_C_HasDriver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_HasDriver) == 0x000001, "Wrong alignment on I_Vehicle_C_HasDriver");
static_assert(sizeof(I_Vehicle_C_HasDriver) == 0x000001, "Wrong size on I_Vehicle_C_HasDriver");
static_assert(offsetof(I_Vehicle_C_HasDriver, ReturnValue) == 0x000000, "Member 'I_Vehicle_C_HasDriver::ReturnValue' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.IsVehicle
// 0x0001 (0x0001 - 0x0000)
struct I_Vehicle_C_IsVehicle final
{
public:
	bool                                          Param_IsVehicle;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_IsVehicle) == 0x000001, "Wrong alignment on I_Vehicle_C_IsVehicle");
static_assert(sizeof(I_Vehicle_C_IsVehicle) == 0x000001, "Wrong size on I_Vehicle_C_IsVehicle");
static_assert(offsetof(I_Vehicle_C_IsVehicle, Param_IsVehicle) == 0x000000, "Member 'I_Vehicle_C_IsVehicle::Param_IsVehicle' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.OnLevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_OnLevelLoaded final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_OnLevelLoaded) == 0x000008, "Wrong alignment on I_Vehicle_C_OnLevelLoaded");
static_assert(sizeof(I_Vehicle_C_OnLevelLoaded) == 0x000010, "Wrong size on I_Vehicle_C_OnLevelLoaded");
static_assert(offsetof(I_Vehicle_C_OnLevelLoaded, Level) == 0x000000, "Member 'I_Vehicle_C_OnLevelLoaded::Level' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_OnLevelLoaded, Player) == 0x000008, "Member 'I_Vehicle_C_OnLevelLoaded::Player' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.OnLevelUnloaded
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_OnLevelUnloaded final
{
public:
	class FName                                   Level;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_OnLevelUnloaded) == 0x000008, "Wrong alignment on I_Vehicle_C_OnLevelUnloaded");
static_assert(sizeof(I_Vehicle_C_OnLevelUnloaded) == 0x000010, "Wrong size on I_Vehicle_C_OnLevelUnloaded");
static_assert(offsetof(I_Vehicle_C_OnLevelUnloaded, Level) == 0x000000, "Member 'I_Vehicle_C_OnLevelUnloaded::Level' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_OnLevelUnloaded, Player) == 0x000008, "Member 'I_Vehicle_C_OnLevelUnloaded::Player' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.SetBoost
// 0x0002 (0x0002 - 0x0000)
struct I_Vehicle_C_SetBoost final
{
public:
	bool                                          NewBoost;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_SetBoost) == 0x000001, "Wrong alignment on I_Vehicle_C_SetBoost");
static_assert(sizeof(I_Vehicle_C_SetBoost) == 0x000002, "Wrong size on I_Vehicle_C_SetBoost");
static_assert(offsetof(I_Vehicle_C_SetBoost, NewBoost) == 0x000000, "Member 'I_Vehicle_C_SetBoost::NewBoost' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_SetBoost, Success) == 0x000001, "Member 'I_Vehicle_C_SetBoost::Success' has a wrong offset!");

// Function I_Vehicle.I_Vehicle_C.SwitchSits
// 0x0010 (0x0010 - 0x0000)
struct I_Vehicle_C_SwitchSits final
{
public:
	int32                                         DesireSitIndex;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Vehicle_C_SwitchSits) == 0x000008, "Wrong alignment on I_Vehicle_C_SwitchSits");
static_assert(sizeof(I_Vehicle_C_SwitchSits) == 0x000010, "Wrong size on I_Vehicle_C_SwitchSits");
static_assert(offsetof(I_Vehicle_C_SwitchSits, DesireSitIndex) == 0x000000, "Member 'I_Vehicle_C_SwitchSits::DesireSitIndex' has a wrong offset!");
static_assert(offsetof(I_Vehicle_C_SwitchSits, Player) == 0x000008, "Member 'I_Vehicle_C_SwitchSits::Player' has a wrong offset!");

}

