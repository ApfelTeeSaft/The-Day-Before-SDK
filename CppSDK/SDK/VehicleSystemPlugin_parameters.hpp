#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "VehicleSystemPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VehicleSystemPlugin.VehicleConstraint.SetLinearSoftConstraint
// 0x000C (0x000C - 0x0000)
struct VehicleConstraint_SetLinearSoftConstraint final
{
public:
	bool                                          SoftConstraint;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Stiffness;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damping;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleConstraint_SetLinearSoftConstraint) == 0x000004, "Wrong alignment on VehicleConstraint_SetLinearSoftConstraint");
static_assert(sizeof(VehicleConstraint_SetLinearSoftConstraint) == 0x00000C, "Wrong size on VehicleConstraint_SetLinearSoftConstraint");
static_assert(offsetof(VehicleConstraint_SetLinearSoftConstraint, SoftConstraint) == 0x000000, "Member 'VehicleConstraint_SetLinearSoftConstraint::SoftConstraint' has a wrong offset!");
static_assert(offsetof(VehicleConstraint_SetLinearSoftConstraint, Stiffness) == 0x000004, "Member 'VehicleConstraint_SetLinearSoftConstraint::Stiffness' has a wrong offset!");
static_assert(offsetof(VehicleConstraint_SetLinearSoftConstraint, Damping) == 0x000008, "Member 'VehicleConstraint_SetLinearSoftConstraint::Damping' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.AVS_Tick
// 0x0004 (0x0004 - 0x0000)
struct VehicleSystemBase_AVS_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_AVS_Tick) == 0x000004, "Wrong alignment on VehicleSystemBase_AVS_Tick");
static_assert(sizeof(VehicleSystemBase_AVS_Tick) == 0x000004, "Wrong size on VehicleSystemBase_AVS_Tick");
static_assert(offsetof(VehicleSystemBase_AVS_Tick, DeltaTime) == 0x000000, "Member 'VehicleSystemBase_AVS_Tick::DeltaTime' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.BlueprintDebugMessage
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemBase_BlueprintDebugMessage final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_BlueprintDebugMessage) == 0x000008, "Wrong alignment on VehicleSystemBase_BlueprintDebugMessage");
static_assert(sizeof(VehicleSystemBase_BlueprintDebugMessage) == 0x000010, "Wrong size on VehicleSystemBase_BlueprintDebugMessage");
static_assert(offsetof(VehicleSystemBase_BlueprintDebugMessage, Text) == 0x000000, "Member 'VehicleSystemBase_BlueprintDebugMessage::Text' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.Client_ReceiveNetState
// 0x0068 (0x0068 - 0x0000)
struct VehicleSystemBase_Client_ReceiveNetState final
{
public:
	struct FNetState                              State;                                             // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_Client_ReceiveNetState) == 0x000008, "Wrong alignment on VehicleSystemBase_Client_ReceiveNetState");
static_assert(sizeof(VehicleSystemBase_Client_ReceiveNetState) == 0x000068, "Wrong size on VehicleSystemBase_Client_ReceiveNetState");
static_assert(offsetof(VehicleSystemBase_Client_ReceiveNetState, State) == 0x000000, "Member 'VehicleSystemBase_Client_ReceiveNetState::State' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.DeterminePassiveState
// 0x0001 (0x0001 - 0x0000)
struct VehicleSystemBase_DeterminePassiveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_DeterminePassiveState) == 0x000001, "Wrong alignment on VehicleSystemBase_DeterminePassiveState");
static_assert(sizeof(VehicleSystemBase_DeterminePassiveState) == 0x000001, "Wrong size on VehicleSystemBase_DeterminePassiveState");
static_assert(offsetof(VehicleSystemBase_DeterminePassiveState, ReturnValue) == 0x000000, "Member 'VehicleSystemBase_DeterminePassiveState::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.GetMaxSteeringFromCurve
// 0x0008 (0x0008 - 0x0000)
struct VehicleSystemBase_GetMaxSteeringFromCurve final
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_GetMaxSteeringFromCurve) == 0x000004, "Wrong alignment on VehicleSystemBase_GetMaxSteeringFromCurve");
static_assert(sizeof(VehicleSystemBase_GetMaxSteeringFromCurve) == 0x000008, "Wrong size on VehicleSystemBase_GetMaxSteeringFromCurve");
static_assert(offsetof(VehicleSystemBase_GetMaxSteeringFromCurve, Speed) == 0x000000, "Member 'VehicleSystemBase_GetMaxSteeringFromCurve::Speed' has a wrong offset!");
static_assert(offsetof(VehicleSystemBase_GetMaxSteeringFromCurve, ReturnValue) == 0x000004, "Member 'VehicleSystemBase_GetMaxSteeringFromCurve::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.PassiveStateChanged
// 0x0001 (0x0001 - 0x0000)
struct VehicleSystemBase_PassiveStateChanged final
{
public:
	bool                                          NewPassiveState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_PassiveStateChanged) == 0x000001, "Wrong alignment on VehicleSystemBase_PassiveStateChanged");
static_assert(sizeof(VehicleSystemBase_PassiveStateChanged) == 0x000001, "Wrong size on VehicleSystemBase_PassiveStateChanged");
static_assert(offsetof(VehicleSystemBase_PassiveStateChanged, NewPassiveState) == 0x000000, "Member 'VehicleSystemBase_PassiveStateChanged::NewPassiveState' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.PassiveTickBP
// 0x0004 (0x0004 - 0x0000)
struct VehicleSystemBase_PassiveTickBP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_PassiveTickBP) == 0x000004, "Wrong alignment on VehicleSystemBase_PassiveTickBP");
static_assert(sizeof(VehicleSystemBase_PassiveTickBP) == 0x000004, "Wrong size on VehicleSystemBase_PassiveTickBP");
static_assert(offsetof(VehicleSystemBase_PassiveTickBP, DeltaTime) == 0x000000, "Member 'VehicleSystemBase_PassiveTickBP::DeltaTime' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.PhysicsThreadInputs
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemBase_PhysicsThreadInputs final
{
public:
	struct FAVS_Inputs                            NewInputs;                                         // 0x0000(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_PhysicsThreadInputs) == 0x000004, "Wrong alignment on VehicleSystemBase_PhysicsThreadInputs");
static_assert(sizeof(VehicleSystemBase_PhysicsThreadInputs) == 0x000018, "Wrong size on VehicleSystemBase_PhysicsThreadInputs");
static_assert(offsetof(VehicleSystemBase_PhysicsThreadInputs, NewInputs) == 0x000000, "Member 'VehicleSystemBase_PhysicsThreadInputs::NewInputs' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.Server_ReceiveNetState
// 0x0068 (0x0068 - 0x0000)
struct VehicleSystemBase_Server_ReceiveNetState final
{
public:
	struct FNetState                              State;                                             // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_Server_ReceiveNetState) == 0x000008, "Wrong alignment on VehicleSystemBase_Server_ReceiveNetState");
static_assert(sizeof(VehicleSystemBase_Server_ReceiveNetState) == 0x000068, "Wrong size on VehicleSystemBase_Server_ReceiveNetState");
static_assert(offsetof(VehicleSystemBase_Server_ReceiveNetState, State) == 0x000000, "Member 'VehicleSystemBase_Server_ReceiveNetState::State' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.Server_ReceiveRestState
// 0x0068 (0x0068 - 0x0000)
struct VehicleSystemBase_Server_ReceiveRestState final
{
public:
	struct FNetState                              State;                                             // 0x0000(0x0068)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_Server_ReceiveRestState) == 0x000008, "Wrong alignment on VehicleSystemBase_Server_ReceiveRestState");
static_assert(sizeof(VehicleSystemBase_Server_ReceiveRestState) == 0x000068, "Wrong size on VehicleSystemBase_Server_ReceiveRestState");
static_assert(offsetof(VehicleSystemBase_Server_ReceiveRestState, State) == 0x000000, "Member 'VehicleSystemBase_Server_ReceiveRestState::State' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.SetArrayDisabledCollisions
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemBase_SetArrayDisabledCollisions final
{
public:
	TArray<class UPrimitiveComponent*>            Meshes;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemBase_SetArrayDisabledCollisions) == 0x000008, "Wrong alignment on VehicleSystemBase_SetArrayDisabledCollisions");
static_assert(sizeof(VehicleSystemBase_SetArrayDisabledCollisions) == 0x000018, "Wrong size on VehicleSystemBase_SetArrayDisabledCollisions");
static_assert(offsetof(VehicleSystemBase_SetArrayDisabledCollisions, Meshes) == 0x000000, "Member 'VehicleSystemBase_SetArrayDisabledCollisions::Meshes' has a wrong offset!");
static_assert(offsetof(VehicleSystemBase_SetArrayDisabledCollisions, ReturnValue) == 0x000010, "Member 'VehicleSystemBase_SetArrayDisabledCollisions::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemBase.SetShouldSyncWithServer
// 0x0001 (0x0001 - 0x0000)
struct VehicleSystemBase_SetShouldSyncWithServer final
{
public:
	bool                                          ShouldSync;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemBase_SetShouldSyncWithServer) == 0x000001, "Wrong alignment on VehicleSystemBase_SetShouldSyncWithServer");
static_assert(sizeof(VehicleSystemBase_SetShouldSyncWithServer) == 0x000001, "Wrong size on VehicleSystemBase_SetShouldSyncWithServer");
static_assert(offsetof(VehicleSystemBase_SetShouldSyncWithServer, ShouldSync) == 0x000000, "Member 'VehicleSystemBase_SetShouldSyncWithServer::ShouldSync' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddForce
// 0x0028 (0x0028 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosAddForce final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelChange;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosAddForce) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosAddForce");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosAddForce) == 0x000028, "Wrong size on VehicleSystemFunctions_AVS_ChaosAddForce");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddForce, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosAddForce::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddForce, Force) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosAddForce::Force' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddForce, bAccelChange) == 0x000020, "Member 'VehicleSystemFunctions_AVS_ChaosAddForce::bAccelChange' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddForceAtLocation
// 0x0038 (0x0038 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosAddForceAtLocation final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosAddForceAtLocation) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosAddForceAtLocation");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosAddForceAtLocation) == 0x000038, "Wrong size on VehicleSystemFunctions_AVS_ChaosAddForceAtLocation");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddForceAtLocation, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosAddForceAtLocation::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddForceAtLocation, Location) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosAddForceAtLocation::Location' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddForceAtLocation, Force) == 0x000020, "Member 'VehicleSystemFunctions_AVS_ChaosAddForceAtLocation::Force' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddTorque
// 0x0028 (0x0028 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosAddTorque final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Torque;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelChange;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosAddTorque) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosAddTorque");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosAddTorque) == 0x000028, "Wrong size on VehicleSystemFunctions_AVS_ChaosAddTorque");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddTorque, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosAddTorque::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddTorque, Torque) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosAddTorque::Torque' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddTorque, bAccelChange) == 0x000020, "Member 'VehicleSystemFunctions_AVS_ChaosAddTorque::bAccelChange' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosAddWheelTorque
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosAddWheelTorque final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Torque;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelChange;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosAddWheelTorque) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosAddWheelTorque");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosAddWheelTorque) == 0x000010, "Wrong size on VehicleSystemFunctions_AVS_ChaosAddWheelTorque");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddWheelTorque, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosAddWheelTorque::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddWheelTorque, Torque) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosAddWheelTorque::Torque' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosAddWheelTorque, bAccelChange) == 0x00000C, "Member 'VehicleSystemFunctions_AVS_ChaosAddWheelTorque::bAccelChange' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosBrakes
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosBrakes final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakePower;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaosDelta;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosBrakes) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosBrakes");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosBrakes) == 0x000010, "Wrong size on VehicleSystemFunctions_AVS_ChaosBrakes");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosBrakes, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosBrakes::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosBrakes, BrakePower) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosBrakes::BrakePower' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosBrakes, ChaosDelta) == 0x00000C, "Member 'VehicleSystemFunctions_AVS_ChaosBrakes::ChaosDelta' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosGetVelocityAtLocation
// 0x0038 (0x0038 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation) == 0x000038, "Wrong size on VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation, Component) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation::Component' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation, Location) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation::Location' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation, ReturnValue) == 0x000020, "Member 'VehicleSystemFunctions_AVS_ChaosGetVelocityAtLocation::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_ChaosSetWheelAngularVelocity
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngVel;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity");
static_assert(sizeof(VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity) == 0x000010, "Wrong size on VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity, AngVel) == 0x000008, "Member 'VehicleSystemFunctions_AVS_ChaosSetWheelAngularVelocity::AngVel' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_GetChaosTransform
// 0x0070 (0x0070 - 0x0000)
struct VehicleSystemFunctions_AVS_GetChaosTransform final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_AVS_GetChaosTransform) == 0x000010, "Wrong alignment on VehicleSystemFunctions_AVS_GetChaosTransform");
static_assert(sizeof(VehicleSystemFunctions_AVS_GetChaosTransform) == 0x000070, "Wrong size on VehicleSystemFunctions_AVS_GetChaosTransform");
static_assert(offsetof(VehicleSystemFunctions_AVS_GetChaosTransform, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_GetChaosTransform::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_GetChaosTransform, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_AVS_GetChaosTransform::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.AVS_SetWheelAngularVelocity
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_AVS_SetWheelAngularVelocity final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngVel;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_AVS_SetWheelAngularVelocity) == 0x000008, "Wrong alignment on VehicleSystemFunctions_AVS_SetWheelAngularVelocity");
static_assert(sizeof(VehicleSystemFunctions_AVS_SetWheelAngularVelocity) == 0x000010, "Wrong size on VehicleSystemFunctions_AVS_SetWheelAngularVelocity");
static_assert(offsetof(VehicleSystemFunctions_AVS_SetWheelAngularVelocity, Target) == 0x000000, "Member 'VehicleSystemFunctions_AVS_SetWheelAngularVelocity::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_AVS_SetWheelAngularVelocity, AngVel) == 0x000008, "Member 'VehicleSystemFunctions_AVS_SetWheelAngularVelocity::AngVel' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshCenterOfMass
// 0x0028 (0x0028 - 0x0000)
struct VehicleSystemFunctions_GetMeshCenterOfMass final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_GetMeshCenterOfMass) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetMeshCenterOfMass");
static_assert(sizeof(VehicleSystemFunctions_GetMeshCenterOfMass) == 0x000028, "Wrong size on VehicleSystemFunctions_GetMeshCenterOfMass");
static_assert(offsetof(VehicleSystemFunctions_GetMeshCenterOfMass, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetMeshCenterOfMass::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshCenterOfMass, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetMeshCenterOfMass::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshCenterOfMass, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetMeshCenterOfMass::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshDiameter
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_GetMeshDiameter final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_GetMeshDiameter) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetMeshDiameter");
static_assert(sizeof(VehicleSystemFunctions_GetMeshDiameter) == 0x000018, "Wrong size on VehicleSystemFunctions_GetMeshDiameter");
static_assert(offsetof(VehicleSystemFunctions_GetMeshDiameter, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetMeshDiameter::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshDiameter, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetMeshDiameter::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshDiameter, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetMeshDiameter::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetMeshRadius
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_GetMeshRadius final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_GetMeshRadius) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetMeshRadius");
static_assert(sizeof(VehicleSystemFunctions_GetMeshRadius) == 0x000018, "Wrong size on VehicleSystemFunctions_GetMeshRadius");
static_assert(offsetof(VehicleSystemFunctions_GetMeshRadius, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetMeshRadius::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshRadius, BoneName) == 0x000008, "Member 'VehicleSystemFunctions_GetMeshRadius::BoneName' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetMeshRadius, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetMeshRadius::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetPluginVersion
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_GetPluginVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_GetPluginVersion) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetPluginVersion");
static_assert(sizeof(VehicleSystemFunctions_GetPluginVersion) == 0x000010, "Wrong size on VehicleSystemFunctions_GetPluginVersion");
static_assert(offsetof(VehicleSystemFunctions_GetPluginVersion, ReturnValue) == 0x000000, "Member 'VehicleSystemFunctions_GetPluginVersion::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetUnrealEngineVersion
// 0x000C (0x000C - 0x0000)
struct VehicleSystemFunctions_GetUnrealEngineVersion final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Patch;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_GetUnrealEngineVersion) == 0x000004, "Wrong alignment on VehicleSystemFunctions_GetUnrealEngineVersion");
static_assert(sizeof(VehicleSystemFunctions_GetUnrealEngineVersion) == 0x00000C, "Wrong size on VehicleSystemFunctions_GetUnrealEngineVersion");
static_assert(offsetof(VehicleSystemFunctions_GetUnrealEngineVersion, Major) == 0x000000, "Member 'VehicleSystemFunctions_GetUnrealEngineVersion::Major' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetUnrealEngineVersion, Minor) == 0x000004, "Member 'VehicleSystemFunctions_GetUnrealEngineVersion::Minor' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetUnrealEngineVersion, Patch) == 0x000008, "Member 'VehicleSystemFunctions_GetUnrealEngineVersion::Patch' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.GetWheelInertia
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_GetWheelInertia final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MassKg;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusCm;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_GetWheelInertia) == 0x000008, "Wrong alignment on VehicleSystemFunctions_GetWheelInertia");
static_assert(sizeof(VehicleSystemFunctions_GetWheelInertia) == 0x000018, "Wrong size on VehicleSystemFunctions_GetWheelInertia");
static_assert(offsetof(VehicleSystemFunctions_GetWheelInertia, Target) == 0x000000, "Member 'VehicleSystemFunctions_GetWheelInertia::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetWheelInertia, MassKg) == 0x000008, "Member 'VehicleSystemFunctions_GetWheelInertia::MassKg' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetWheelInertia, RadiusCm) == 0x00000C, "Member 'VehicleSystemFunctions_GetWheelInertia::RadiusCm' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_GetWheelInertia, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_GetWheelInertia::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.LinearSpeedToRads
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_LinearSpeedToRads final
{
public:
	double                                        Cm_per_sec;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_LinearSpeedToRads) == 0x000008, "Wrong alignment on VehicleSystemFunctions_LinearSpeedToRads");
static_assert(sizeof(VehicleSystemFunctions_LinearSpeedToRads) == 0x000018, "Wrong size on VehicleSystemFunctions_LinearSpeedToRads");
static_assert(offsetof(VehicleSystemFunctions_LinearSpeedToRads, Cm_per_sec) == 0x000000, "Member 'VehicleSystemFunctions_LinearSpeedToRads::Cm_per_sec' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_LinearSpeedToRads, Radius) == 0x000008, "Member 'VehicleSystemFunctions_LinearSpeedToRads::Radius' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_LinearSpeedToRads, ReturnValue) == 0x000010, "Member 'VehicleSystemFunctions_LinearSpeedToRads::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.PrintToScreenWithTag
// 0x0028 (0x0028 - 0x0000)
struct VehicleSystemFunctions_PrintToScreenWithTag final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleSystemFunctions_PrintToScreenWithTag) == 0x000008, "Wrong alignment on VehicleSystemFunctions_PrintToScreenWithTag");
static_assert(sizeof(VehicleSystemFunctions_PrintToScreenWithTag) == 0x000028, "Wrong size on VehicleSystemFunctions_PrintToScreenWithTag");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, InString) == 0x000000, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::InString' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, TextColor) == 0x000010, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::TextColor' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, Duration) == 0x000020, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::Duration' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_PrintToScreenWithTag, Tag) == 0x000024, "Member 'VehicleSystemFunctions_PrintToScreenWithTag::Tag' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInEditor_World
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_RunningInEditor_World final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_RunningInEditor_World) == 0x000008, "Wrong alignment on VehicleSystemFunctions_RunningInEditor_World");
static_assert(sizeof(VehicleSystemFunctions_RunningInEditor_World) == 0x000010, "Wrong size on VehicleSystemFunctions_RunningInEditor_World");
static_assert(offsetof(VehicleSystemFunctions_RunningInEditor_World, WorldContextObject) == 0x000000, "Member 'VehicleSystemFunctions_RunningInEditor_World::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_RunningInEditor_World, ReturnValue) == 0x000008, "Member 'VehicleSystemFunctions_RunningInEditor_World::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInGame_World
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_RunningInGame_World final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_RunningInGame_World) == 0x000008, "Wrong alignment on VehicleSystemFunctions_RunningInGame_World");
static_assert(sizeof(VehicleSystemFunctions_RunningInGame_World) == 0x000010, "Wrong size on VehicleSystemFunctions_RunningInGame_World");
static_assert(offsetof(VehicleSystemFunctions_RunningInGame_World, WorldContextObject) == 0x000000, "Member 'VehicleSystemFunctions_RunningInGame_World::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_RunningInGame_World, ReturnValue) == 0x000008, "Member 'VehicleSystemFunctions_RunningInGame_World::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.RunningInPIE_World
// 0x0010 (0x0010 - 0x0000)
struct VehicleSystemFunctions_RunningInPIE_World final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_RunningInPIE_World) == 0x000008, "Wrong alignment on VehicleSystemFunctions_RunningInPIE_World");
static_assert(sizeof(VehicleSystemFunctions_RunningInPIE_World) == 0x000010, "Wrong size on VehicleSystemFunctions_RunningInPIE_World");
static_assert(offsetof(VehicleSystemFunctions_RunningInPIE_World, WorldContextObject) == 0x000000, "Member 'VehicleSystemFunctions_RunningInPIE_World::WorldContextObject' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_RunningInPIE_World, ReturnValue) == 0x000008, "Member 'VehicleSystemFunctions_RunningInPIE_World::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.SetAngularDamping
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_SetAngularDamping final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDamping;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_SetAngularDamping) == 0x000008, "Wrong alignment on VehicleSystemFunctions_SetAngularDamping");
static_assert(sizeof(VehicleSystemFunctions_SetAngularDamping) == 0x000018, "Wrong size on VehicleSystemFunctions_SetAngularDamping");
static_assert(offsetof(VehicleSystemFunctions_SetAngularDamping, Target) == 0x000000, "Member 'VehicleSystemFunctions_SetAngularDamping::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetAngularDamping, InDamping) == 0x000008, "Member 'VehicleSystemFunctions_SetAngularDamping::InDamping' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetAngularDamping, BoneName) == 0x00000C, "Member 'VehicleSystemFunctions_SetAngularDamping::BoneName' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleSystemFunctions.SetLinearDamping
// 0x0018 (0x0018 - 0x0000)
struct VehicleSystemFunctions_SetLinearDamping final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDamping;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleSystemFunctions_SetLinearDamping) == 0x000008, "Wrong alignment on VehicleSystemFunctions_SetLinearDamping");
static_assert(sizeof(VehicleSystemFunctions_SetLinearDamping) == 0x000018, "Wrong size on VehicleSystemFunctions_SetLinearDamping");
static_assert(offsetof(VehicleSystemFunctions_SetLinearDamping, Target) == 0x000000, "Member 'VehicleSystemFunctions_SetLinearDamping::Target' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetLinearDamping, InDamping) == 0x000008, "Member 'VehicleSystemFunctions_SetLinearDamping::InDamping' has a wrong offset!");
static_assert(offsetof(VehicleSystemFunctions_SetLinearDamping, BoneName) == 0x00000C, "Member 'VehicleSystemFunctions_SetLinearDamping::BoneName' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetHasContact
// 0x0001 (0x0001 - 0x0000)
struct VehicleWheelBase_GetHasContact final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetHasContact) == 0x000001, "Wrong alignment on VehicleWheelBase_GetHasContact");
static_assert(sizeof(VehicleWheelBase_GetHasContact) == 0x000001, "Wrong size on VehicleWheelBase_GetHasContact");
static_assert(offsetof(VehicleWheelBase_GetHasContact, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetHasContact::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetSteeringAngle
// 0x0004 (0x0004 - 0x0000)
struct VehicleWheelBase_GetSteeringAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetSteeringAngle) == 0x000004, "Wrong alignment on VehicleWheelBase_GetSteeringAngle");
static_assert(sizeof(VehicleWheelBase_GetSteeringAngle) == 0x000004, "Wrong size on VehicleWheelBase_GetSteeringAngle");
static_assert(offsetof(VehicleWheelBase_GetSteeringAngle, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetSteeringAngle::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct VehicleWheelBase_GetSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetSteeringInput) == 0x000004, "Wrong alignment on VehicleWheelBase_GetSteeringInput");
static_assert(sizeof(VehicleWheelBase_GetSteeringInput) == 0x000004, "Wrong size on VehicleWheelBase_GetSteeringInput");
static_assert(offsetof(VehicleWheelBase_GetSteeringInput, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetSteeringInput::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetWheelAngVelInRadians
// 0x0004 (0x0004 - 0x0000)
struct VehicleWheelBase_GetWheelAngVelInRadians final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetWheelAngVelInRadians) == 0x000004, "Wrong alignment on VehicleWheelBase_GetWheelAngVelInRadians");
static_assert(sizeof(VehicleWheelBase_GetWheelAngVelInRadians) == 0x000004, "Wrong size on VehicleWheelBase_GetWheelAngVelInRadians");
static_assert(offsetof(VehicleWheelBase_GetWheelAngVelInRadians, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetWheelAngVelInRadians::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetWheelMode
// 0x0001 (0x0001 - 0x0000)
struct VehicleWheelBase_GetWheelMode final
{
public:
	EWheelMode                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetWheelMode) == 0x000001, "Wrong alignment on VehicleWheelBase_GetWheelMode");
static_assert(sizeof(VehicleWheelBase_GetWheelMode) == 0x000001, "Wrong size on VehicleWheelBase_GetWheelMode");
static_assert(offsetof(VehicleWheelBase_GetWheelMode, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetWheelMode::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetWheelVelocity
// 0x0020 (0x0020 - 0x0000)
struct VehicleWheelBase_GetWheelVelocity final
{
public:
	bool                                          Local;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetWheelVelocity) == 0x000008, "Wrong alignment on VehicleWheelBase_GetWheelVelocity");
static_assert(sizeof(VehicleWheelBase_GetWheelVelocity) == 0x000020, "Wrong size on VehicleWheelBase_GetWheelVelocity");
static_assert(offsetof(VehicleWheelBase_GetWheelVelocity, Local) == 0x000000, "Member 'VehicleWheelBase_GetWheelVelocity::Local' has a wrong offset!");
static_assert(offsetof(VehicleWheelBase_GetWheelVelocity, ReturnValue) == 0x000008, "Member 'VehicleWheelBase_GetWheelVelocity::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.SetIsSimulatingSuspension
// 0x0001 (0x0001 - 0x0000)
struct VehicleWheelBase_SetIsSimulatingSuspension final
{
public:
	bool                                          NewSimulate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_SetIsSimulatingSuspension) == 0x000001, "Wrong alignment on VehicleWheelBase_SetIsSimulatingSuspension");
static_assert(sizeof(VehicleWheelBase_SetIsSimulatingSuspension) == 0x000001, "Wrong size on VehicleWheelBase_SetIsSimulatingSuspension");
static_assert(offsetof(VehicleWheelBase_SetIsSimulatingSuspension, NewSimulate) == 0x000000, "Member 'VehicleWheelBase_SetIsSimulatingSuspension::NewSimulate' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.SetRaycastWheelMass
// 0x0004 (0x0004 - 0x0000)
struct VehicleWheelBase_SetRaycastWheelMass final
{
public:
	float                                         NewMass;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_SetRaycastWheelMass) == 0x000004, "Wrong alignment on VehicleWheelBase_SetRaycastWheelMass");
static_assert(sizeof(VehicleWheelBase_SetRaycastWheelMass) == 0x000004, "Wrong size on VehicleWheelBase_SetRaycastWheelMass");
static_assert(offsetof(VehicleWheelBase_SetRaycastWheelMass, NewMass) == 0x000000, "Member 'VehicleWheelBase_SetRaycastWheelMass::NewMass' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.SetSteeringInput
// 0x0008 (0x0008 - 0x0000)
struct VehicleWheelBase_SetSteeringInput final
{
public:
	float                                         Steering;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertSteering;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VehicleWheelBase_SetSteeringInput) == 0x000004, "Wrong alignment on VehicleWheelBase_SetSteeringInput");
static_assert(sizeof(VehicleWheelBase_SetSteeringInput) == 0x000008, "Wrong size on VehicleWheelBase_SetSteeringInput");
static_assert(offsetof(VehicleWheelBase_SetSteeringInput, Steering) == 0x000000, "Member 'VehicleWheelBase_SetSteeringInput::Steering' has a wrong offset!");
static_assert(offsetof(VehicleWheelBase_SetSteeringInput, InvertSteering) == 0x000004, "Member 'VehicleWheelBase_SetSteeringInput::InvertSteering' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.SetWheelMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct VehicleWheelBase_SetWheelMeshComponent final
{
public:
	class UPrimitiveComponent*                    NewComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_SetWheelMeshComponent) == 0x000008, "Wrong alignment on VehicleWheelBase_SetWheelMeshComponent");
static_assert(sizeof(VehicleWheelBase_SetWheelMeshComponent) == 0x000008, "Wrong size on VehicleWheelBase_SetWheelMeshComponent");
static_assert(offsetof(VehicleWheelBase_SetWheelMeshComponent, NewComponent) == 0x000000, "Member 'VehicleWheelBase_SetWheelMeshComponent::NewComponent' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.SetWheelMode
// 0x0001 (0x0001 - 0x0000)
struct VehicleWheelBase_SetWheelMode final
{
public:
	EWheelMode                                    NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_SetWheelMode) == 0x000001, "Wrong alignment on VehicleWheelBase_SetWheelMode");
static_assert(sizeof(VehicleWheelBase_SetWheelMode) == 0x000001, "Wrong size on VehicleWheelBase_SetWheelMode");
static_assert(offsetof(VehicleWheelBase_SetWheelMode, NewMode) == 0x000000, "Member 'VehicleWheelBase_SetWheelMode::NewMode' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetIsAttached
// 0x0001 (0x0001 - 0x0000)
struct VehicleWheelBase_GetIsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetIsAttached) == 0x000001, "Wrong alignment on VehicleWheelBase_GetIsAttached");
static_assert(sizeof(VehicleWheelBase_GetIsAttached) == 0x000001, "Wrong size on VehicleWheelBase_GetIsAttached");
static_assert(offsetof(VehicleWheelBase_GetIsAttached, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetIsAttached::ReturnValue' has a wrong offset!");

// Function VehicleSystemPlugin.VehicleWheelBase.GetIsSimulatingSuspension
// 0x0001 (0x0001 - 0x0000)
struct VehicleWheelBase_GetIsSimulatingSuspension final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VehicleWheelBase_GetIsSimulatingSuspension) == 0x000001, "Wrong alignment on VehicleWheelBase_GetIsSimulatingSuspension");
static_assert(sizeof(VehicleWheelBase_GetIsSimulatingSuspension) == 0x000001, "Wrong size on VehicleWheelBase_GetIsSimulatingSuspension");
static_assert(offsetof(VehicleWheelBase_GetIsSimulatingSuspension, ReturnValue) == 0x000000, "Member 'VehicleWheelBase_GetIsSimulatingSuspension::ReturnValue' has a wrong offset!");

}

