#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: A_Item

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FItemInfo_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "ContainerPickupsInfo_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass A_Item.A_Item_C
// 0x02C8 (0x0558 - 0x0290)
class AA_Item_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USmoothSync*                            SmoothSync;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   WeaponPlaceholder;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UHighlightMesh_C*                       HighlightMesh;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPickupComponent_C*                     PickupComponent;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UO_ItemState_C*                         ItemState;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 Name_A_Item_C;                                     // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UInventoryComponent_C*                  OwningInventory;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                Components;                                        // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FContainerPickupsInfo>          MPContainerData;                                   // 0x02F8(0x0010)(Edit, BlueprintVisible, Net, ContainsInstancedReference, ExposeOnSpawn)
	TArray<struct FContainerPickupsInfo>          MPContainerItem;                                   // 0x0308(0x0010)(Edit, BlueprintVisible, Net, ContainsInstancedReference, ExposeOnSpawn)
	struct FTimerHandle                           Timer;                                             // 0x0318(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToSelfDestroyOnServer;                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeaponPlaceholder_C*                   WeaponPl;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             ItemInfo;                                          // 0x0330(0x0220)(Edit, BlueprintVisible, Net, RepNotify, ContainsInstancedReference, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          PrevLineTraceResult;                               // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractingAnimation;                              // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWeaponItem;                                      // 0x0552(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddPickupTag();
	void AddProcessingTag();
	void BndEvt__A_Item_StaticMesh_K2Node_ComponentBoundEvent_0_ComponentSleepSignature__DelegateSignature(class UPrimitiveComponent* SleepingComponent, class FName BoneName);
	void DestroyInteractable();
	void EndHighlight();
	void ExecuteUbergraph_A_Item(int32 EntryPoint);
	void GetActorType(E_ActorType* ActorType);
	void HasTag(const class FString& Tag, bool* Param_HasTag);
	void InitWeaponPlaceholder(const struct FFItemInfo& FItemInfo, class AWeaponPlaceholder_C* WraponPlaceholder);
	void IsLocked_(bool* Result);
	bool IsSomethingOnA_Way();
	void OnBeginInteract(class APawn* Player);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLoaded_0BB85B6D489E01394E6284BCBF05E250(class UObject* Loaded);
	void OnLoaded_8D47720B4D54BD33208329A6A1DDDCE5(class UObject* Loaded);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnRep_ItemInfo();
	void OnRep_WeaponPl();
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void ReceiveBeginPlay();
	void RemoveProcessingTag();
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetAttachments(class AWeaponPlaceholder_C* Param_WeaponPlaceholder, const struct FFItemInfo& FItemInfo);
	void SetTimer();
	void SetTutorial3DWidgetVisibility(bool Visible);
	void StartHighlight();
	void StartTimer();
	void UpdateItemInfo_Serv(const struct FFItemInfo& Param_ItemInfo);
	void UserConstructionScript();
	void ValidateItem();
	void ValidateWeapon(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"A_Item_C">();
	}
	static class AA_Item_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AA_Item_C>();
	}
};
static_assert(alignof(AA_Item_C) == 0x000008, "Wrong alignment on AA_Item_C");
static_assert(sizeof(AA_Item_C) == 0x000558, "Wrong size on AA_Item_C");
static_assert(offsetof(AA_Item_C, UberGraphFrame) == 0x000290, "Member 'AA_Item_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AA_Item_C, SmoothSync) == 0x000298, "Member 'AA_Item_C::SmoothSync' has a wrong offset!");
static_assert(offsetof(AA_Item_C, StaticMesh) == 0x0002A0, "Member 'AA_Item_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AA_Item_C, WeaponPlaceholder) == 0x0002A8, "Member 'AA_Item_C::WeaponPlaceholder' has a wrong offset!");
static_assert(offsetof(AA_Item_C, HighlightMesh) == 0x0002B0, "Member 'AA_Item_C::HighlightMesh' has a wrong offset!");
static_assert(offsetof(AA_Item_C, PickupComponent) == 0x0002B8, "Member 'AA_Item_C::PickupComponent' has a wrong offset!");
static_assert(offsetof(AA_Item_C, ItemState) == 0x0002C0, "Member 'AA_Item_C::ItemState' has a wrong offset!");
static_assert(offsetof(AA_Item_C, Name_A_Item_C) == 0x0002C8, "Member 'AA_Item_C::Name_A_Item_C' has a wrong offset!");
static_assert(offsetof(AA_Item_C, Count) == 0x0002D8, "Member 'AA_Item_C::Count' has a wrong offset!");
static_assert(offsetof(AA_Item_C, OwningInventory) == 0x0002E0, "Member 'AA_Item_C::OwningInventory' has a wrong offset!");
static_assert(offsetof(AA_Item_C, Components) == 0x0002E8, "Member 'AA_Item_C::Components' has a wrong offset!");
static_assert(offsetof(AA_Item_C, MPContainerData) == 0x0002F8, "Member 'AA_Item_C::MPContainerData' has a wrong offset!");
static_assert(offsetof(AA_Item_C, MPContainerItem) == 0x000308, "Member 'AA_Item_C::MPContainerItem' has a wrong offset!");
static_assert(offsetof(AA_Item_C, Timer) == 0x000318, "Member 'AA_Item_C::Timer' has a wrong offset!");
static_assert(offsetof(AA_Item_C, TimeToSelfDestroyOnServer) == 0x000320, "Member 'AA_Item_C::TimeToSelfDestroyOnServer' has a wrong offset!");
static_assert(offsetof(AA_Item_C, WeaponPl) == 0x000328, "Member 'AA_Item_C::WeaponPl' has a wrong offset!");
static_assert(offsetof(AA_Item_C, ItemInfo) == 0x000330, "Member 'AA_Item_C::ItemInfo' has a wrong offset!");
static_assert(offsetof(AA_Item_C, PrevLineTraceResult) == 0x000550, "Member 'AA_Item_C::PrevLineTraceResult' has a wrong offset!");
static_assert(offsetof(AA_Item_C, InteractingAnimation) == 0x000551, "Member 'AA_Item_C::InteractingAnimation' has a wrong offset!");
static_assert(offsetof(AA_Item_C, IsWeaponItem) == 0x000552, "Member 'AA_Item_C::IsWeaponItem' has a wrong offset!");

}

