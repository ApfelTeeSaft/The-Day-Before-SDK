#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlEye

#include "Basic.hpp"

#include "BattlEye_structs.hpp"


namespace SDK::Params
{

// Function BattlEye.BE_GameInstance.GetBEClientVersion
// 0x0004 (0x0004 - 0x0000)
struct BE_GameInstance_GetBEClientVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameInstance_GetBEClientVersion) == 0x000004, "Wrong alignment on BE_GameInstance_GetBEClientVersion");
static_assert(sizeof(BE_GameInstance_GetBEClientVersion) == 0x000004, "Wrong size on BE_GameInstance_GetBEClientVersion");
static_assert(offsetof(BE_GameInstance_GetBEClientVersion, ReturnValue) == 0x000000, "Member 'BE_GameInstance_GetBEClientVersion::ReturnValue' has a wrong offset!");

// Function BattlEye.BE_GameInstance.GetBEServerVersion
// 0x0004 (0x0004 - 0x0000)
struct BE_GameInstance_GetBEServerVersion final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameInstance_GetBEServerVersion) == 0x000004, "Wrong alignment on BE_GameInstance_GetBEServerVersion");
static_assert(sizeof(BE_GameInstance_GetBEServerVersion) == 0x000004, "Wrong size on BE_GameInstance_GetBEServerVersion");
static_assert(offsetof(BE_GameInstance_GetBEServerVersion, ReturnValue) == 0x000000, "Member 'BE_GameInstance_GetBEServerVersion::ReturnValue' has a wrong offset!");

// Function BattlEye.BE_GameInstance.InitClient
// 0x0001 (0x0001 - 0x0000)
struct BE_GameInstance_InitClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameInstance_InitClient) == 0x000001, "Wrong alignment on BE_GameInstance_InitClient");
static_assert(sizeof(BE_GameInstance_InitClient) == 0x000001, "Wrong size on BE_GameInstance_InitClient");
static_assert(offsetof(BE_GameInstance_InitClient, ReturnValue) == 0x000000, "Member 'BE_GameInstance_InitClient::ReturnValue' has a wrong offset!");

// Function BattlEye.BE_GameInstance.OnPrintMessageClient
// 0x0010 (0x0010 - 0x0000)
struct BE_GameInstance_OnPrintMessageClient final
{
public:
	class FString                                 PMessage;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameInstance_OnPrintMessageClient) == 0x000008, "Wrong alignment on BE_GameInstance_OnPrintMessageClient");
static_assert(sizeof(BE_GameInstance_OnPrintMessageClient) == 0x000010, "Wrong size on BE_GameInstance_OnPrintMessageClient");
static_assert(offsetof(BE_GameInstance_OnPrintMessageClient, PMessage) == 0x000000, "Member 'BE_GameInstance_OnPrintMessageClient::PMessage' has a wrong offset!");

// Function BattlEye.BE_GameInstance.OnPrintMessageServer
// 0x0018 (0x0018 - 0x0000)
struct BE_GameInstance_OnPrintMessageServer final
{
public:
	class FString                                 PMessage;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMessageType                                  PType;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BE_GameInstance_OnPrintMessageServer) == 0x000008, "Wrong alignment on BE_GameInstance_OnPrintMessageServer");
static_assert(sizeof(BE_GameInstance_OnPrintMessageServer) == 0x000018, "Wrong size on BE_GameInstance_OnPrintMessageServer");
static_assert(offsetof(BE_GameInstance_OnPrintMessageServer, PMessage) == 0x000000, "Member 'BE_GameInstance_OnPrintMessageServer::PMessage' has a wrong offset!");
static_assert(offsetof(BE_GameInstance_OnPrintMessageServer, PType) == 0x000010, "Member 'BE_GameInstance_OnPrintMessageServer::PType' has a wrong offset!");

// Function BattlEye.BE_GameInstance.OnRequestRestartClient
// 0x0001 (0x0001 - 0x0000)
struct BE_GameInstance_OnRequestRestartClient final
{
public:
	ERestartReason                                PReason;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameInstance_OnRequestRestartClient) == 0x000001, "Wrong alignment on BE_GameInstance_OnRequestRestartClient");
static_assert(sizeof(BE_GameInstance_OnRequestRestartClient) == 0x000001, "Wrong size on BE_GameInstance_OnRequestRestartClient");
static_assert(offsetof(BE_GameInstance_OnRequestRestartClient, PReason) == 0x000000, "Member 'BE_GameInstance_OnRequestRestartClient::PReason' has a wrong offset!");

// Function BattlEye.BE_GameMode.GetPlayerByPID
// 0x0010 (0x0010 - 0x0000)
struct BE_GameMode_GetPlayerByPID final
{
public:
	int32                                         PPID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABE_PlayerController*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameMode_GetPlayerByPID) == 0x000008, "Wrong alignment on BE_GameMode_GetPlayerByPID");
static_assert(sizeof(BE_GameMode_GetPlayerByPID) == 0x000010, "Wrong size on BE_GameMode_GetPlayerByPID");
static_assert(offsetof(BE_GameMode_GetPlayerByPID, PPID) == 0x000000, "Member 'BE_GameMode_GetPlayerByPID::PPID' has a wrong offset!");
static_assert(offsetof(BE_GameMode_GetPlayerByPID, ReturnValue) == 0x000008, "Member 'BE_GameMode_GetPlayerByPID::ReturnValue' has a wrong offset!");

// Function BattlEye.BE_GameMode.OnCheckOwnershipResult
// 0x0028 (0x0028 - 0x0000)
struct BE_GameMode_OnCheckOwnershipResult final
{
public:
	bool                                          Ownsapp;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PID;                                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         SteamID;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameMode_OnCheckOwnershipResult) == 0x000008, "Wrong alignment on BE_GameMode_OnCheckOwnershipResult");
static_assert(sizeof(BE_GameMode_OnCheckOwnershipResult) == 0x000028, "Wrong size on BE_GameMode_OnCheckOwnershipResult");
static_assert(offsetof(BE_GameMode_OnCheckOwnershipResult, Ownsapp) == 0x000000, "Member 'BE_GameMode_OnCheckOwnershipResult::Ownsapp' has a wrong offset!");
static_assert(offsetof(BE_GameMode_OnCheckOwnershipResult, Message) == 0x000008, "Member 'BE_GameMode_OnCheckOwnershipResult::Message' has a wrong offset!");
static_assert(offsetof(BE_GameMode_OnCheckOwnershipResult, PID) == 0x000018, "Member 'BE_GameMode_OnCheckOwnershipResult::PID' has a wrong offset!");
static_assert(offsetof(BE_GameMode_OnCheckOwnershipResult, SteamID) == 0x000020, "Member 'BE_GameMode_OnCheckOwnershipResult::SteamID' has a wrong offset!");

// Function BattlEye.BE_GameMode.OnKickPlayer
// 0x0018 (0x0018 - 0x0000)
struct BE_GameMode_OnKickPlayer final
{
public:
	int32                                         PPID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PReason;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameMode_OnKickPlayer) == 0x000008, "Wrong alignment on BE_GameMode_OnKickPlayer");
static_assert(sizeof(BE_GameMode_OnKickPlayer) == 0x000018, "Wrong size on BE_GameMode_OnKickPlayer");
static_assert(offsetof(BE_GameMode_OnKickPlayer, PPID) == 0x000000, "Member 'BE_GameMode_OnKickPlayer::PPID' has a wrong offset!");
static_assert(offsetof(BE_GameMode_OnKickPlayer, PReason) == 0x000008, "Member 'BE_GameMode_OnKickPlayer::PReason' has a wrong offset!");

// Function BattlEye.BE_GameMode.OnReceivePlayerGUID
// 0x0010 (0x0010 - 0x0000)
struct BE_GameMode_OnReceivePlayerGUID final
{
public:
	int32                                         PPID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         PGUID;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_GameMode_OnReceivePlayerGUID) == 0x000008, "Wrong alignment on BE_GameMode_OnReceivePlayerGUID");
static_assert(sizeof(BE_GameMode_OnReceivePlayerGUID) == 0x000010, "Wrong size on BE_GameMode_OnReceivePlayerGUID");
static_assert(offsetof(BE_GameMode_OnReceivePlayerGUID, PPID) == 0x000000, "Member 'BE_GameMode_OnReceivePlayerGUID::PPID' has a wrong offset!");
static_assert(offsetof(BE_GameMode_OnReceivePlayerGUID, PGUID) == 0x000008, "Member 'BE_GameMode_OnReceivePlayerGUID::PGUID' has a wrong offset!");

// Function BattlEye.BE_PlayerController.CheckOwnership
// 0x0010 (0x0010 - 0x0000)
struct BE_PlayerController_CheckOwnership final
{
public:
	class FString                                 PSteamSessionTicket;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_PlayerController_CheckOwnership) == 0x000008, "Wrong alignment on BE_PlayerController_CheckOwnership");
static_assert(sizeof(BE_PlayerController_CheckOwnership) == 0x000010, "Wrong size on BE_PlayerController_CheckOwnership");
static_assert(offsetof(BE_PlayerController_CheckOwnership, PSteamSessionTicket) == 0x000000, "Member 'BE_PlayerController_CheckOwnership::PSteamSessionTicket' has a wrong offset!");

// Function BattlEye.BE_PlayerController.Client_RecieveFromServer
// 0x0018 (0x0018 - 0x0000)
struct BE_PlayerController_Client_RecieveFromServer final
{
public:
	TArray<int32>                                 PPacketInt;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PLength;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BE_PlayerController_Client_RecieveFromServer) == 0x000008, "Wrong alignment on BE_PlayerController_Client_RecieveFromServer");
static_assert(sizeof(BE_PlayerController_Client_RecieveFromServer) == 0x000018, "Wrong size on BE_PlayerController_Client_RecieveFromServer");
static_assert(offsetof(BE_PlayerController_Client_RecieveFromServer, PPacketInt) == 0x000000, "Member 'BE_PlayerController_Client_RecieveFromServer::PPacketInt' has a wrong offset!");
static_assert(offsetof(BE_PlayerController_Client_RecieveFromServer, PLength) == 0x000010, "Member 'BE_PlayerController_Client_RecieveFromServer::PLength' has a wrong offset!");

// Function BattlEye.BE_PlayerController.OnSendPacket
// 0x0018 (0x0018 - 0x0000)
struct BE_PlayerController_OnSendPacket final
{
public:
	TArray<int32>                                 PPacketInt;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PLength;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BE_PlayerController_OnSendPacket) == 0x000008, "Wrong alignment on BE_PlayerController_OnSendPacket");
static_assert(sizeof(BE_PlayerController_OnSendPacket) == 0x000018, "Wrong size on BE_PlayerController_OnSendPacket");
static_assert(offsetof(BE_PlayerController_OnSendPacket, PPacketInt) == 0x000000, "Member 'BE_PlayerController_OnSendPacket::PPacketInt' has a wrong offset!");
static_assert(offsetof(BE_PlayerController_OnSendPacket, PLength) == 0x000010, "Member 'BE_PlayerController_OnSendPacket::PLength' has a wrong offset!");

// Function BattlEye.BE_PlayerController.Server_SendGUID
// 0x0008 (0x0008 - 0x0000)
struct BE_PlayerController_Server_SendGUID final
{
public:
	int64                                         PGUID;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BE_PlayerController_Server_SendGUID) == 0x000008, "Wrong alignment on BE_PlayerController_Server_SendGUID");
static_assert(sizeof(BE_PlayerController_Server_SendGUID) == 0x000008, "Wrong size on BE_PlayerController_Server_SendGUID");
static_assert(offsetof(BE_PlayerController_Server_SendGUID, PGUID) == 0x000000, "Member 'BE_PlayerController_Server_SendGUID::PGUID' has a wrong offset!");

// Function BattlEye.BE_PlayerController.Server_SendToServer
// 0x0018 (0x0018 - 0x0000)
struct BE_PlayerController_Server_SendToServer final
{
public:
	TArray<int32>                                 PPacketInt;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         PLength;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BE_PlayerController_Server_SendToServer) == 0x000008, "Wrong alignment on BE_PlayerController_Server_SendToServer");
static_assert(sizeof(BE_PlayerController_Server_SendToServer) == 0x000018, "Wrong size on BE_PlayerController_Server_SendToServer");
static_assert(offsetof(BE_PlayerController_Server_SendToServer, PPacketInt) == 0x000000, "Member 'BE_PlayerController_Server_SendToServer::PPacketInt' has a wrong offset!");
static_assert(offsetof(BE_PlayerController_Server_SendToServer, PLength) == 0x000010, "Member 'BE_PlayerController_Server_SendToServer::PLength' has a wrong offset!");

}

