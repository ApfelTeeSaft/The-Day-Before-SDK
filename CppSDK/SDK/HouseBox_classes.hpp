#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HouseBox

#include "Basic.hpp"

#include "DayCycleSettingsCSLStruct_structs.hpp"
#include "E_HouseType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FMODStudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass HouseBox.HouseBox_C
// 0x0D20 (0x0FB0 - 0x0290)
class AHouseBox_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dimensions;                                        // 0x02A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HouseType                                   HouseType;                                         // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDayCycleSettingsCSLStruct             HouseBoxSettings;                                  // 0x02C8(0x0C48)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExplored;                                        // 0x0F10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F11[0x7];                                      // 0x0F11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             TestReverbGroup;                                   // 0x0F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     FMODSnapshot;                                      // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        SkyLightOffset;                                    // 0x0F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VolumetriScattering;                               // 0x0F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      SkyLightColor;                                     // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     House_Ambient_Off;                                 // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FLinearColor                           SkyLightLinearColor;                               // 0x0F48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ExpHFogDensity;                                    // 0x0F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           House_Box_Cubemap;                                 // 0x0F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ACustomSkyLight_C*                      CustomSkyLight;                                    // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USkyCreatorWeatherPreset> SkyCreatorTarget;                                  // 0x0F70(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ASkyCreatorController_C*                SCController;                                      // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other_Actor;                                       // 0x0FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CustomLoadHouseBox(class AActor* Actor);
	void ExecuteUbergraph_HouseBox(int32 EntryPoint);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HouseBox_C">();
	}
	static class AHouseBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHouseBox_C>();
	}
};
static_assert(alignof(AHouseBox_C) == 0x000008, "Wrong alignment on AHouseBox_C");
static_assert(sizeof(AHouseBox_C) == 0x000FB0, "Wrong size on AHouseBox_C");
static_assert(offsetof(AHouseBox_C, UberGraphFrame) == 0x000290, "Member 'AHouseBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, Box) == 0x000298, "Member 'AHouseBox_C::Box' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, DefaultSceneRoot) == 0x0002A0, "Member 'AHouseBox_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, Dimensions) == 0x0002A8, "Member 'AHouseBox_C::Dimensions' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, HouseType) == 0x0002C0, "Member 'AHouseBox_C::HouseType' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, HouseBoxSettings) == 0x0002C8, "Member 'AHouseBox_C::HouseBoxSettings' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, IsExplored) == 0x000F10, "Member 'AHouseBox_C::IsExplored' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, TestReverbGroup) == 0x000F18, "Member 'AHouseBox_C::TestReverbGroup' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, FMODSnapshot) == 0x000F20, "Member 'AHouseBox_C::FMODSnapshot' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, SkyLightOffset) == 0x000F28, "Member 'AHouseBox_C::SkyLightOffset' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, VolumetriScattering) == 0x000F30, "Member 'AHouseBox_C::VolumetriScattering' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, SkyLightColor) == 0x000F38, "Member 'AHouseBox_C::SkyLightColor' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, House_Ambient_Off) == 0x000F40, "Member 'AHouseBox_C::House_Ambient_Off' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, SkyLightLinearColor) == 0x000F48, "Member 'AHouseBox_C::SkyLightLinearColor' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, ExpHFogDensity) == 0x000F58, "Member 'AHouseBox_C::ExpHFogDensity' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, House_Box_Cubemap) == 0x000F60, "Member 'AHouseBox_C::House_Box_Cubemap' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, CustomSkyLight) == 0x000F68, "Member 'AHouseBox_C::CustomSkyLight' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, SkyCreatorTarget) == 0x000F70, "Member 'AHouseBox_C::SkyCreatorTarget' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, SCController) == 0x000FA0, "Member 'AHouseBox_C::SCController' has a wrong offset!");
static_assert(offsetof(AHouseBox_C, Other_Actor) == 0x000FA8, "Member 'AHouseBox_C::Other_Actor' has a wrong offset!");

}

