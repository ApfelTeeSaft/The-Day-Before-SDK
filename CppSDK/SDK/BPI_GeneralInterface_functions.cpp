#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GeneralInterface

#include "Basic.hpp"

#include "BPI_GeneralInterface_classes.hpp"
#include "BPI_GeneralInterface_parameters.hpp"


namespace SDK
{

// Function BPI_GeneralInterface.BPI_GeneralInterface_C.CallLootAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LootingHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LootPointOpened                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::CallLootAnim(double LootingHeight, bool LootPointOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "CallLootAnim");

	Params::BPI_GeneralInterface_C_CallLootAnim Parms{};

	Parms.LootingHeight = LootingHeight;
	Parms.LootPointOpened = LootPointOpened;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.CampBuildInstant
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GeneralInterface_C::CampBuildInstant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "CampBuildInstant");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.CampPlaceBegin
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GeneralInterface_C::CampPlaceBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "CampPlaceBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.CampPlaceEnd
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GeneralInterface_C::CampPlaceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "CampPlaceEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.Craft
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::Craft(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "Craft");

	Params::BPI_GeneralInterface_C_Craft Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.GI_TileLoaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TileName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::GI_TileLoaded(class FName TileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "GI_TileLoaded");

	Params::BPI_GeneralInterface_C_GI_TileLoaded Parms{};

	Parms.TileName = TileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.GI_TileUnloaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TileName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::GI_TileUnloaded(class FName TileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "GI_TileUnloaded");

	Params::BPI_GeneralInterface_C_GI_TileUnloaded Parms{};

	Parms.TileName = TileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.HeatUpBonfire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::HeatUpBonfire(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "HeatUpBonfire");

	Params::BPI_GeneralInterface_C_HeatUpBonfire Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.Interact
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::Interact(bool NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "Interact");

	Params::BPI_GeneralInterface_C_Interact Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.IsInWater
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InWater                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::IsInWater(bool* InWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "IsInWater");

	Params::BPI_GeneralInterface_C_IsInWater Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InWater != nullptr)
		*InWater = Parms.InWater;
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.IsPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsPlayer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::IsPlayer(bool* Param_IsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "IsPlayer");

	Params::BPI_GeneralInterface_C_IsPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsPlayer != nullptr)
		*Param_IsPlayer = Parms.Param_IsPlayer;
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.OpenDoorRPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Door_C*                       Door                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOpen                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::OpenDoorRPC(class ABP_Door_C* Door, bool IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "OpenDoorRPC");

	Params::BPI_GeneralInterface_C_OpenDoorRPC Parms{};

	Parms.Door = Door;
	Parms.IsOpen = IsOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.OpenLootRPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALootPoint_C*                     LootPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::OpenLootRPC(class ALootPoint_C* LootPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "OpenLootRPC");

	Params::BPI_GeneralInterface_C_OpenLootRPC Parms{};

	Parms.LootPoint = LootPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerAddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       ItemInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class UWBP_AttachmentCell_C*            ActiveCell                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Added                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::PlayerAddItem(const struct FFItemInfo& ItemInfo, class UWBP_AttachmentCell_C* ActiveCell, bool* Added)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "PlayerAddItem");

	Params::BPI_GeneralInterface_C_PlayerAddItem Parms{};

	Parms.ItemInfo = std::move(ItemInfo);
	Parms.ActiveCell = ActiveCell;

	UObject::ProcessEvent(Func, &Parms);

	if (Added != nullptr)
		*Added = Parms.Added;
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerCanisterAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Attach                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Canister_C*                   Canister                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::PlayerCanisterAction(bool Attach, class ABP_Canister_C* Canister)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "PlayerCanisterAction");

	Params::BPI_GeneralInterface_C_PlayerCanisterAction Parms{};

	Parms.Attach = Attach;
	Parms.Canister = Canister;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerGetMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::PlayerGetMesh(class USkeletalMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "PlayerGetMesh");

	Params::BPI_GeneralInterface_C_PlayerGetMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.PlayerItemCountByName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::PlayerItemCountByName(const class FString& ItemName, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "PlayerItemCountByName");

	Params::BPI_GeneralInterface_C_PlayerItemCountByName Parms{};

	Parms.ItemName = std::move(ItemName);

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.SetEnableSmoothSync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::SetEnableSmoothSync(bool NewEnable, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "SetEnableSmoothSync");

	Params::BPI_GeneralInterface_C_SetEnableSmoothSync Parms{};

	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.SetPlayerCollisionInCar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::SetPlayerCollisionInCar(bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "SetPlayerCollisionInCar");

	Params::BPI_GeneralInterface_C_SetPlayerCollisionInCar Parms{};

	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GeneralInterface.BPI_GeneralInterface_C.ShowSimpleUIText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GeneralInterface_C::ShowSimpleUIText(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GeneralInterface_C", "ShowSimpleUIText");

	Params::BPI_GeneralInterface_C_ShowSimpleUIText Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}

}

