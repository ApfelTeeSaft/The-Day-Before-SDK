#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "VehicleSystemPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class VehicleSystemPlugin.VehicleComponent
// 0x0000 (0x02A0 - 0x02A0)
class UVehicleComponent : public USceneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleComponent">();
	}
	static class UVehicleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleComponent>();
	}
};
static_assert(alignof(UVehicleComponent) == 0x000010, "Wrong alignment on UVehicleComponent");
static_assert(sizeof(UVehicleComponent) == 0x0002A0, "Wrong size on UVehicleComponent");

// Class VehicleSystemPlugin.VehicleConstraint
// 0x0000 (0x0570 - 0x0570)
class UVehicleConstraint final : public UPhysicsConstraintComponent
{
public:
	void SetLinearSoftConstraint(bool SoftConstraint, float Stiffness, float Damping);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleConstraint">();
	}
	static class UVehicleConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleConstraint>();
	}
};
static_assert(alignof(UVehicleConstraint) == 0x000010, "Wrong alignment on UVehicleConstraint");
static_assert(sizeof(UVehicleConstraint) == 0x000570, "Wrong size on UVehicleConstraint");

// Class VehicleSystemPlugin.VehicleSystemBase
// 0x0248 (0x0560 - 0x0318)
class AVehicleSystemBase : public APawn
{
public:
	TArray<class UVehicleWheelBase*>              VehicleWheels;                                     // 0x0318(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            ContactModMeshes;                                  // 0x0330(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x15];                                     // 0x0340(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ReplicateMovement;                                 // 0x0355(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SyncLocation;                                      // 0x0356(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SyncRotation;                                      // 0x0357(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetSendRate;                                       // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetTimeBehind;                                     // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetLerpStart;                                      // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetPositionTolerance;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NetSmoothing;                                      // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNetState                              RestState;                                         // 0x0370(0x0068)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D8[0x1];                                      // 0x03D8(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          NetworkAtRest;                                     // 0x03D9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3DA[0x2];                                      // 0x03DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RestTimer;                                         // 0x03DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E0[0x88];                                     // 0x03E0(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChaosDeltaTime;                                    // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAVS_Inputs                            InputsForPhysicsThread;                            // 0x046C(0x0018)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     DebugTraces;                                       // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FDebugForce>                    DebugForces;                                       // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   VehicleMesh;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassiveMode;                                       // 0x04B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PassiveTickGatekeeping;                            // 0x04B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B2[0x2];                                      // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RestVelocityThreshold;                             // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocalVehicleAtRest;                                // 0x04B8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     SteeringCurve;                                     // 0x04C0(0x0088)(Edit, NativeAccessSpecifierPublic)
	ESteeringSmoothingType                        SteeringInputSmoothing;                            // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringSpeed;                                     // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleGear>                   Gears;                                             // 0x0550(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void AVS_Tick(float DeltaTime);
	void BlueprintDebugMessage(const class FString& Text);
	void Client_ReceiveNetState(const struct FNetState& State);
	bool DeterminePassiveState();
	float GetMaxSteeringFromCurve(float Speed);
	void Multicast_ChangedOwner();
	void NetStateSend();
	void OnRep_RestState();
	void OwnerChanged();
	void PassiveStateChanged(bool NewPassiveState);
	void PassiveTickBP(float DeltaTime);
	void PhysicsThreadInputs(const struct FAVS_Inputs& NewInputs);
	void Server_ReceiveNetState(const struct FNetState& State);
	void Server_ReceiveRestState(const struct FNetState& State);
	bool SetArrayDisabledCollisions(const TArray<class UPrimitiveComponent*>& Meshes);
	void SetShouldSyncWithServer(bool ShouldSync);
	void TeleportWheels();
	void UpdateInternalWheelArray();
	void WakeWheelsForMovement();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleSystemBase">();
	}
	static class AVehicleSystemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVehicleSystemBase>();
	}
};
static_assert(alignof(AVehicleSystemBase) == 0x000008, "Wrong alignment on AVehicleSystemBase");
static_assert(sizeof(AVehicleSystemBase) == 0x000560, "Wrong size on AVehicleSystemBase");
static_assert(offsetof(AVehicleSystemBase, VehicleWheels) == 0x000318, "Member 'AVehicleSystemBase::VehicleWheels' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, ContactModMeshes) == 0x000330, "Member 'AVehicleSystemBase::ContactModMeshes' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, ReplicateMovement) == 0x000355, "Member 'AVehicleSystemBase::ReplicateMovement' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SyncLocation) == 0x000356, "Member 'AVehicleSystemBase::SyncLocation' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SyncRotation) == 0x000357, "Member 'AVehicleSystemBase::SyncRotation' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetSendRate) == 0x000358, "Member 'AVehicleSystemBase::NetSendRate' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetTimeBehind) == 0x00035C, "Member 'AVehicleSystemBase::NetTimeBehind' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetLerpStart) == 0x000360, "Member 'AVehicleSystemBase::NetLerpStart' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetPositionTolerance) == 0x000364, "Member 'AVehicleSystemBase::NetPositionTolerance' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetSmoothing) == 0x000368, "Member 'AVehicleSystemBase::NetSmoothing' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, RestState) == 0x000370, "Member 'AVehicleSystemBase::RestState' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, NetworkAtRest) == 0x0003D9, "Member 'AVehicleSystemBase::NetworkAtRest' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, RestTimer) == 0x0003DC, "Member 'AVehicleSystemBase::RestTimer' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, ChaosDeltaTime) == 0x000468, "Member 'AVehicleSystemBase::ChaosDeltaTime' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, InputsForPhysicsThread) == 0x00046C, "Member 'AVehicleSystemBase::InputsForPhysicsThread' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, DebugTraces) == 0x000488, "Member 'AVehicleSystemBase::DebugTraces' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, DebugForces) == 0x000498, "Member 'AVehicleSystemBase::DebugForces' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, VehicleMesh) == 0x0004A8, "Member 'AVehicleSystemBase::VehicleMesh' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, PassiveMode) == 0x0004B0, "Member 'AVehicleSystemBase::PassiveMode' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, PassiveTickGatekeeping) == 0x0004B1, "Member 'AVehicleSystemBase::PassiveTickGatekeeping' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, RestVelocityThreshold) == 0x0004B4, "Member 'AVehicleSystemBase::RestVelocityThreshold' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, LocalVehicleAtRest) == 0x0004B8, "Member 'AVehicleSystemBase::LocalVehicleAtRest' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SteeringCurve) == 0x0004C0, "Member 'AVehicleSystemBase::SteeringCurve' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SteeringInputSmoothing) == 0x000548, "Member 'AVehicleSystemBase::SteeringInputSmoothing' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, SteeringSpeed) == 0x00054C, "Member 'AVehicleSystemBase::SteeringSpeed' has a wrong offset!");
static_assert(offsetof(AVehicleSystemBase, Gears) == 0x000550, "Member 'AVehicleSystemBase::Gears' has a wrong offset!");

// Class VehicleSystemPlugin.VehicleSystemFunctions
// 0x0000 (0x0028 - 0x0028)
class UVehicleSystemFunctions final : public UBlueprintFunctionLibrary
{
public:
	static void AVS_ChaosAddForce(class UPrimitiveComponent* Target, const struct FVector& Force, bool bAccelChange);
	static void AVS_ChaosAddForceAtLocation(class UPrimitiveComponent* Target, const struct FVector& Location, const struct FVector& Force);
	static void AVS_ChaosAddTorque(class UPrimitiveComponent* Target, const struct FVector& Torque, bool bAccelChange);
	static void AVS_ChaosAddWheelTorque(class UPrimitiveComponent* Target, float Torque, bool bAccelChange);
	static void AVS_ChaosBrakes(class UPrimitiveComponent* Target, float BrakePower, float ChaosDelta);
	static struct FVector AVS_ChaosGetVelocityAtLocation(class UPrimitiveComponent* Component, const struct FVector& Location);
	static void AVS_ChaosSetWheelAngularVelocity(class UPrimitiveComponent* Target, float AngVel);
	static struct FTransform AVS_GetChaosTransform(class UPrimitiveComponent* Target);
	static void AVS_SetWheelAngularVelocity(class UPrimitiveComponent* Target, float AngVel);
	static struct FVector GetMeshCenterOfMass(class UPrimitiveComponent* Target, class FName BoneName);
	static float GetMeshDiameter(class UPrimitiveComponent* Target, class FName BoneName);
	static float GetMeshRadius(class UPrimitiveComponent* Target, class FName BoneName);
	static class FString GetPluginVersion();
	static void GetUnrealEngineVersion(int32* Major, int32* Minor, int32* Patch);
	static float GetWheelInertia(class UPrimitiveComponent* Target, float MassKg, float RadiusCm);
	static double LinearSpeedToRads(double Cm_per_sec, float Radius);
	static void PrintToScreenWithTag(const class FString& InString, const struct FLinearColor& TextColor, float Duration, int32 Tag);
	static bool RunningInEditor_World(class UObject* WorldContextObject);
	static bool RunningInGame_World(class UObject* WorldContextObject);
	static bool RunningInPIE_World(class UObject* WorldContextObject);
	static void SetAngularDamping(class UPrimitiveComponent* Target, float InDamping, class FName BoneName);
	static void SetLinearDamping(class UPrimitiveComponent* Target, float InDamping, class FName BoneName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleSystemFunctions">();
	}
	static class UVehicleSystemFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleSystemFunctions>();
	}
};
static_assert(alignof(UVehicleSystemFunctions) == 0x000008, "Wrong alignment on UVehicleSystemFunctions");
static_assert(sizeof(UVehicleSystemFunctions) == 0x000028, "Wrong size on UVehicleSystemFunctions");

// Class VehicleSystemPlugin.VehicleWheelBase
// 0x0240 (0x04E0 - 0x02A0)
class UVehicleWheelBase : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x4];                                      // 0x02A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SimulateSuspension;                                // 0x02A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsAttached;                                        // 0x02A5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLocked;                                          // 0x02A6(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A7[0x1];                                      // 0x02A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetAngVel;                                      // 0x02A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            WheelStaticMesh;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAVS1_Wheel_Config                     WheelConfig;                                       // 0x02C0(0x00E0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ConnectToBone;                                     // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x03A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAVS1_Wheel_Output                     WheelData;                                         // 0x03B0(0x00F0)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRotator                               WheelRotation;                                     // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    WheelMeshComponent;                                // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasSpring;                                         // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpringHardLock;                                    // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C2[0x6];                                      // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PhysicsDownforce;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringInput;                                     // 0x04D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0xC];                                      // 0x04D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetHasContact();
	float GetSteeringAngle();
	float GetSteeringInput();
	float GetWheelAngVelInRadians();
	EWheelMode GetWheelMode();
	struct FVector GetWheelVelocity(bool Local);
	void ResetWheelCollisions();
	void SetIsSimulatingSuspension(bool NewSimulate);
	void SetRaycastWheelMass(float NewMass);
	void SetSteeringInput(float Steering, bool InvertSteering);
	void SetWheelMeshComponent(class UPrimitiveComponent* NewComponent);
	void SetWheelMode(EWheelMode NewMode);
	void UpdateLocalTransformCache();
	void UpdateWheelRadius();

	bool GetIsAttached() const;
	bool GetIsSimulatingSuspension() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VehicleWheelBase">();
	}
	static class UVehicleWheelBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicleWheelBase>();
	}
};
static_assert(alignof(UVehicleWheelBase) == 0x000010, "Wrong alignment on UVehicleWheelBase");
static_assert(sizeof(UVehicleWheelBase) == 0x0004E0, "Wrong size on UVehicleWheelBase");
static_assert(offsetof(UVehicleWheelBase, SimulateSuspension) == 0x0002A4, "Member 'UVehicleWheelBase::SimulateSuspension' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, IsAttached) == 0x0002A5, "Member 'UVehicleWheelBase::IsAttached' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, IsLocked) == 0x0002A6, "Member 'UVehicleWheelBase::IsLocked' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, TargetAngVel) == 0x0002A8, "Member 'UVehicleWheelBase::TargetAngVel' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, WheelStaticMesh) == 0x0002B0, "Member 'UVehicleWheelBase::WheelStaticMesh' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, WheelConfig) == 0x0002C0, "Member 'UVehicleWheelBase::WheelConfig' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, ConnectToBone) == 0x0003A0, "Member 'UVehicleWheelBase::ConnectToBone' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, BoneName) == 0x0003A4, "Member 'UVehicleWheelBase::BoneName' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, WheelData) == 0x0003B0, "Member 'UVehicleWheelBase::WheelData' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, WheelRotation) == 0x0004A0, "Member 'UVehicleWheelBase::WheelRotation' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, WheelMeshComponent) == 0x0004B8, "Member 'UVehicleWheelBase::WheelMeshComponent' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, HasSpring) == 0x0004C0, "Member 'UVehicleWheelBase::HasSpring' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, SpringHardLock) == 0x0004C1, "Member 'UVehicleWheelBase::SpringHardLock' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, PhysicsDownforce) == 0x0004C8, "Member 'UVehicleWheelBase::PhysicsDownforce' has a wrong offset!");
static_assert(offsetof(UVehicleWheelBase, SteeringInput) == 0x0004D0, "Member 'UVehicleWheelBase::SteeringInput' has a wrong offset!");

}

