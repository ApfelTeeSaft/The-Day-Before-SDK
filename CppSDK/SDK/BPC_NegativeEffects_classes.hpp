#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_NegativeEffects

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Survival_structs.hpp"
#include "E_WeakeningEffect_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_NegativeEffects.BPC_NegativeEffects_C
// 0x0088 (0x0128 - 0x00A0)
class UBPC_NegativeEffects_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ASurvivalPlayer_C*                      Player;                                            // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<EUNegativeEffectType>                  NegativeEffects;                                   // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ArmEffect;                                         // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PainkillerDuration;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnNegativeEffect;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           PainkillerTimer;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AdrenalineDuration;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WoundedAnim;                                       // 0x00E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaminaStimulator;                                 // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StaminaStimulatorTimer;                            // 0x00F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AdrenalineTimer;                                   // 0x00F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HemostaticEffect;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HemostaticTimer;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HemostaticDuration;                                // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Painkiller;                                        // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TalenolDuration;                                   // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TalenolTimer;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AdrenalineFunc(bool On_);
	void AdrenalineStomachEffectEvent(bool On);
	void ArmFunc(bool On_);
	void BleedingFunc(EUNegativeEffectType EffectType);
	void BodyCriticalEffectFunc(bool Enable);
	void CheckBleeding(const class FText& EffectName, bool* EffectFind);
	void ChestFunc(bool On_);
	void ClearEffects();
	void ExecuteUbergraph_BPC_NegativeEffects(int32 EntryPoint);
	void HemostaticFunc(bool On_);
	void OnNegativeEffect__DelegateSignature(bool On_, EUNegativeEffectType EffectType);
	void OverweightEvent(bool On_);
	void PainkillerFunc(bool On_);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void StaminaStimulatorFunc(bool On_);
	void StartNegativeEffect(EUNegativeEffectType Type);
	void StopAdrenaline();
	void StopHemostatic();
	void StopNegativeEffect(const class FText& Type);
	void StopPainkiller();
	void StopStaminaStimulator();
	void WeakeningEffectsEvent(const E_WeakeningEffect WeakeningEffect);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_NegativeEffects_C">();
	}
	static class UBPC_NegativeEffects_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_NegativeEffects_C>();
	}
};
static_assert(alignof(UBPC_NegativeEffects_C) == 0x000008, "Wrong alignment on UBPC_NegativeEffects_C");
static_assert(sizeof(UBPC_NegativeEffects_C) == 0x000128, "Wrong size on UBPC_NegativeEffects_C");
static_assert(offsetof(UBPC_NegativeEffects_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_NegativeEffects_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, Player) == 0x0000A8, "Member 'UBPC_NegativeEffects_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, NegativeEffects) == 0x0000B0, "Member 'UBPC_NegativeEffects_C::NegativeEffects' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, ArmEffect) == 0x0000C0, "Member 'UBPC_NegativeEffects_C::ArmEffect' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, PainkillerDuration) == 0x0000C4, "Member 'UBPC_NegativeEffects_C::PainkillerDuration' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, OnNegativeEffect) == 0x0000C8, "Member 'UBPC_NegativeEffects_C::OnNegativeEffect' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, PainkillerTimer) == 0x0000D8, "Member 'UBPC_NegativeEffects_C::PainkillerTimer' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, AdrenalineDuration) == 0x0000E0, "Member 'UBPC_NegativeEffects_C::AdrenalineDuration' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, WoundedAnim) == 0x0000E4, "Member 'UBPC_NegativeEffects_C::WoundedAnim' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, StaminaStimulator) == 0x0000E8, "Member 'UBPC_NegativeEffects_C::StaminaStimulator' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, StaminaStimulatorTimer) == 0x0000F0, "Member 'UBPC_NegativeEffects_C::StaminaStimulatorTimer' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, AdrenalineTimer) == 0x0000F8, "Member 'UBPC_NegativeEffects_C::AdrenalineTimer' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, HemostaticEffect) == 0x000100, "Member 'UBPC_NegativeEffects_C::HemostaticEffect' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, HemostaticTimer) == 0x000108, "Member 'UBPC_NegativeEffects_C::HemostaticTimer' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, HemostaticDuration) == 0x000110, "Member 'UBPC_NegativeEffects_C::HemostaticDuration' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, Painkiller) == 0x000114, "Member 'UBPC_NegativeEffects_C::Painkiller' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, TalenolDuration) == 0x000118, "Member 'UBPC_NegativeEffects_C::TalenolDuration' has a wrong offset!");
static_assert(offsetof(UBPC_NegativeEffects_C, TalenolTimer) == 0x000120, "Member 'UBPC_NegativeEffects_C::TalenolTimer' has a wrong offset!");

}

