#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AlarmKeyboard

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AlarmKeyboard.BP_AlarmKeyboard_C
// 0x0198 (0x0428 - 0x0290)
class ABP_AlarmKeyboard_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URectLightComponent*                    RectLight1;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshCover;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCapture_Keyboard;                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCapture_DisplayWidget;                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_DisplayWidget;                               // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_5;                                    // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_cage;                                 // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_0;                                    // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_star;                                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_9;                                    // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_8;                                    // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_1;                                    // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_7;                                    // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_4;                                    // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_3;                                    // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_2;                                    // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_KeyButton_6;                                    // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_Keyboard;                                    // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Cap_alpha_1C2F654E4E9CD17FE4301181E8EABC9B;        // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Cap__Direction_1C2F654E4E9CD17FE4301181E8EABC9B;   // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_355[0x3];                                      // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Cap;                                               // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_AlarmKeyButton_C*>           Keyboard;                                          // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_AlarmKeyButton_C*                   CurrentButton;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 Code;                                              // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CurrentCode;                                       // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Continues;                                         // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FlashindTimer;                                     // 0x03A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         FlashingCounter;                                   // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSuccessed;                                       // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnFailed;                                          // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInstanceDynamic*               PanelMaterial;                                     // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DisplayMaterial;                                   // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAnimationPlaying;                                // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCoverOpened;                                     // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCoverClosed;                                     // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CurrentRow;                                        // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentColomn;                                     // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRelease;                                         // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AutoPlay();
	void Cap__FinishedFunc();
	void Cap__UpdateFunc();
	void CheckCode(bool* Result);
	void Close();
	void DisableLights();
	void ErrorDisplayTimer_Handler();
	void ExecuteUbergraph_BP_AlarmKeyboard(int32 EntryPoint);
	void FindButtonByKeyCode(const class FString& KeyCode, class ABP_AlarmKeyButton_C** Button);
	void FirstTry();
	void FlashingTick();
	void GenerateCode();
	void HandleClearButton();
	void HandleNumberButton(const class FString& KeyCode);
	void KeyPressed(const class FString& KeyCode);
	void OnCoverClosed__DelegateSignature();
	void OnCoverOpened__DelegateSignature();
	void OnFailed__DelegateSignature();
	void OnRelease__DelegateSignature();
	void OnSuccessed__DelegateSignature();
	void Open();
	void PlayDisplayError();
	void PlayEventAttachedToPlayerMulti(class UFMODEvent* FMod);
	void PlayEventAttachedToPlayerServ(class UFMODEvent* FMod);
	void PlayRedLightFlashing();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void RedLightTimer_Handler();
	void ReleaseAlarm();
	void ResetAlarmino();
	void SecondTry();
	void SetActive(bool Param_IsActive);
	void SetEnabledGreenLight(bool IsEnabled);
	void SetEnabledRedLight(bool Enabled, double Time);
	void ThirdTry();
	void UnmarkAllButtons();
	void UpdateSelectedButton(int32 Row, int32 Column);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AlarmKeyboard_C">();
	}
	static class ABP_AlarmKeyboard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AlarmKeyboard_C>();
	}
};
static_assert(alignof(ABP_AlarmKeyboard_C) == 0x000008, "Wrong alignment on ABP_AlarmKeyboard_C");
static_assert(sizeof(ABP_AlarmKeyboard_C) == 0x000428, "Wrong size on ABP_AlarmKeyboard_C");
static_assert(offsetof(ABP_AlarmKeyboard_C, UberGraphFrame) == 0x000290, "Member 'ABP_AlarmKeyboard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, RectLight1) == 0x000298, "Member 'ABP_AlarmKeyboard_C::RectLight1' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, RectLight) == 0x0002A0, "Member 'ABP_AlarmKeyboard_C::RectLight' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, MeshCover) == 0x0002A8, "Member 'ABP_AlarmKeyboard_C::MeshCover' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, SceneCapture_Keyboard) == 0x0002B0, "Member 'ABP_AlarmKeyboard_C::SceneCapture_Keyboard' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, SceneCapture_DisplayWidget) == 0x0002B8, "Member 'ABP_AlarmKeyboard_C::SceneCapture_DisplayWidget' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Scene_DisplayWidget) == 0x0002C0, "Member 'ABP_AlarmKeyboard_C::Scene_DisplayWidget' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Widget) == 0x0002C8, "Member 'ABP_AlarmKeyboard_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_5) == 0x0002D0, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_5' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_cage) == 0x0002D8, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_cage' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_0) == 0x0002E0, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_0' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_star) == 0x0002E8, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_star' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_9) == 0x0002F0, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_9' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_8) == 0x0002F8, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_8' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_1) == 0x000300, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_1' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_7) == 0x000308, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_7' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_4) == 0x000310, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_4' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_3) == 0x000318, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_3' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_2) == 0x000320, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_2' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, BP_KeyButton_6) == 0x000328, "Member 'ABP_AlarmKeyboard_C::BP_KeyButton_6' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Scene_Keyboard) == 0x000330, "Member 'ABP_AlarmKeyboard_C::Scene_Keyboard' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Mesh) == 0x000338, "Member 'ABP_AlarmKeyboard_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Scene) == 0x000340, "Member 'ABP_AlarmKeyboard_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, DefaultSceneRoot) == 0x000348, "Member 'ABP_AlarmKeyboard_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Cap_alpha_1C2F654E4E9CD17FE4301181E8EABC9B) == 0x000350, "Member 'ABP_AlarmKeyboard_C::Cap_alpha_1C2F654E4E9CD17FE4301181E8EABC9B' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Cap__Direction_1C2F654E4E9CD17FE4301181E8EABC9B) == 0x000354, "Member 'ABP_AlarmKeyboard_C::Cap__Direction_1C2F654E4E9CD17FE4301181E8EABC9B' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Cap) == 0x000358, "Member 'ABP_AlarmKeyboard_C::Cap' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Keyboard) == 0x000360, "Member 'ABP_AlarmKeyboard_C::Keyboard' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, CurrentButton) == 0x000370, "Member 'ABP_AlarmKeyboard_C::CurrentButton' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Code) == 0x000378, "Member 'ABP_AlarmKeyboard_C::Code' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, CurrentCode) == 0x000388, "Member 'ABP_AlarmKeyboard_C::CurrentCode' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, Continues) == 0x000398, "Member 'ABP_AlarmKeyboard_C::Continues' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, CurrentIndex) == 0x00039C, "Member 'ABP_AlarmKeyboard_C::CurrentIndex' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, FlashindTimer) == 0x0003A0, "Member 'ABP_AlarmKeyboard_C::FlashindTimer' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, FlashingCounter) == 0x0003A8, "Member 'ABP_AlarmKeyboard_C::FlashingCounter' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, OnSuccessed) == 0x0003B0, "Member 'ABP_AlarmKeyboard_C::OnSuccessed' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, OnFailed) == 0x0003C0, "Member 'ABP_AlarmKeyboard_C::OnFailed' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, PanelMaterial) == 0x0003D0, "Member 'ABP_AlarmKeyboard_C::PanelMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, DisplayMaterial) == 0x0003D8, "Member 'ABP_AlarmKeyboard_C::DisplayMaterial' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, IsAnimationPlaying) == 0x0003E0, "Member 'ABP_AlarmKeyboard_C::IsAnimationPlaying' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, OnCoverOpened) == 0x0003E8, "Member 'ABP_AlarmKeyboard_C::OnCoverOpened' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, OnCoverClosed) == 0x0003F8, "Member 'ABP_AlarmKeyboard_C::OnCoverClosed' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, CurrentRow) == 0x000408, "Member 'ABP_AlarmKeyboard_C::CurrentRow' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, CurrentColomn) == 0x00040C, "Member 'ABP_AlarmKeyboard_C::CurrentColomn' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, IsActive) == 0x000410, "Member 'ABP_AlarmKeyboard_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_AlarmKeyboard_C, OnRelease) == 0x000418, "Member 'ABP_AlarmKeyboard_C::OnRelease' has a wrong offset!");

}

