#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TestABP

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "TestABP_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass TestABP.TestABP_C
// 0x0630 (0x0980 - 0x0350)
class UTestABP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct TestABP::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0002)(HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0360(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0368(0x0008)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x0370(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x03B8(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0400(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0428(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0450(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0498(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x04B8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0500(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0520(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0568(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0588(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x0650(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x0698(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x06E0(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x07E8(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x0810(0x00E0)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x08F0(0x0028)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0918(0x0020)()
	double                                        Direction;                                         // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Time_X;                                      // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AEMptyStatic_C*                         ShotgunShell1;                                     // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AEMptyStatic_C*                         ShotgunShell2;                                     // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AEMptyStatic_C*                         ShotgunShell3;                                     // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Direction_0;                                       // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crawl;                                             // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Died;                                              // 0x0971(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotify_EndReload();
	void AnimNotify_enter_turn();
	void AnimNotify_Shotgun_BulletIn();
	void AnimNotify_Shotgun_Cycle_End();
	void AnimNotify_TakeBullet();
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_TestABP(int32 EntryPoint);
	void ToCrawl();
	void ToDie();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TestABP_C">();
	}
	static class UTestABP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestABP_C>();
	}
};
static_assert(alignof(UTestABP_C) == 0x000010, "Wrong alignment on UTestABP_C");
static_assert(sizeof(UTestABP_C) == 0x000980, "Wrong size on UTestABP_C");
static_assert(offsetof(UTestABP_C, UberGraphFrame) == 0x000350, "Member 'UTestABP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTestABP_C, __AnimBlueprintMutables) == 0x000358, "Member 'UTestABP_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimBlueprintExtension_PropertyAccess) == 0x000360, "Member 'UTestABP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimBlueprintExtension_Base) == 0x000368, "Member 'UTestABP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_Slot_2) == 0x000370, "Member 'UTestABP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_BlendListByBool) == 0x0003B8, "Member 'UTestABP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_TransitionResult_1) == 0x000400, "Member 'UTestABP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_TransitionResult) == 0x000428, "Member 'UTestABP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_SequencePlayer_2) == 0x000450, "Member 'UTestABP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_StateResult_2) == 0x000498, "Member 'UTestABP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_SequencePlayer_1) == 0x0004B8, "Member 'UTestABP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_StateResult_1) == 0x000500, "Member 'UTestABP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_SequencePlayer) == 0x000520, "Member 'UTestABP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_StateResult) == 0x000568, "Member 'UTestABP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_StateMachine) == 0x000588, "Member 'UTestABP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_Slot_1) == 0x000650, "Member 'UTestABP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_Slot) == 0x000698, "Member 'UTestABP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_SaveCachedPose) == 0x0006E0, "Member 'UTestABP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_UseCachedPose_1) == 0x0007E8, "Member 'UTestABP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_LayeredBoneBlend) == 0x000810, "Member 'UTestABP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_UseCachedPose) == 0x0008F0, "Member 'UTestABP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UTestABP_C, AnimGraphNode_Root) == 0x000918, "Member 'UTestABP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UTestABP_C, Direction) == 0x000938, "Member 'UTestABP_C::Direction' has a wrong offset!");
static_assert(offsetof(UTestABP_C, Delta_Time_X) == 0x000940, "Member 'UTestABP_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UTestABP_C, ShotgunShell1) == 0x000948, "Member 'UTestABP_C::ShotgunShell1' has a wrong offset!");
static_assert(offsetof(UTestABP_C, ShotgunShell2) == 0x000950, "Member 'UTestABP_C::ShotgunShell2' has a wrong offset!");
static_assert(offsetof(UTestABP_C, ShotgunShell3) == 0x000958, "Member 'UTestABP_C::ShotgunShell3' has a wrong offset!");
static_assert(offsetof(UTestABP_C, NewVar_0) == 0x000960, "Member 'UTestABP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UTestABP_C, Direction_0) == 0x000968, "Member 'UTestABP_C::Direction_0' has a wrong offset!");
static_assert(offsetof(UTestABP_C, Crawl) == 0x000970, "Member 'UTestABP_C::Crawl' has a wrong offset!");
static_assert(offsetof(UTestABP_C, Died) == 0x000971, "Member 'UTestABP_C::Died' has a wrong offset!");

}

