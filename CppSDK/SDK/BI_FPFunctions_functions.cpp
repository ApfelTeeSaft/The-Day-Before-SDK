#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BI_FPFunctions

#include "Basic.hpp"

#include "BI_FPFunctions_classes.hpp"
#include "BI_FPFunctions_parameters.hpp"


namespace SDK
{

// Function BI_FPFunctions.BI_FPFunctions_C.ArmBrakeChangeMultiplier
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::ArmBrakeChangeMultiplier(double Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "ArmBrakeChangeMultiplier");

	Params::BI_FPFunctions_C_ArmBrakeChangeMultiplier Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.BobcycleIdleMultiplierFPP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BobcycleIdle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::BobcycleIdleMultiplierFPP(double BobcycleIdle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "BobcycleIdleMultiplierFPP");

	Params::BI_FPFunctions_C_BobcycleIdleMultiplierFPP Parms{};

	Parms.BobcycleIdle = BobcycleIdle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.CallAim
// (Public, BlueprintCallable, BlueprintEvent)

void IBI_FPFunctions_C::CallAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "CallAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BI_FPFunctions.BI_FPFunctions_C.CallFire
// (Public, BlueprintCallable, BlueprintEvent)

void IBI_FPFunctions_C::CallFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "CallFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BI_FPFunctions.BI_FPFunctions_C.CallReinitBobcycle
// (Public, BlueprintCallable, BlueprintEvent)

void IBI_FPFunctions_C::CallReinitBobcycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "CallReinitBobcycle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BI_FPFunctions.BI_FPFunctions_C.ChangeStanceState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStanceState                            Stance                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::ChangeStanceState(EStanceState Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "ChangeStanceState");

	Params::BI_FPFunctions_C_ChangeStanceState Parms{};

	Parms.Stance = Stance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.GetFireMontage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::GetFireMontage(class UAnimMontage** Montage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "GetFireMontage");

	Params::BI_FPFunctions_C_GetFireMontage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Montage != nullptr)
		*Montage = Parms.Montage;
}


// Function BI_FPFunctions.BI_FPFunctions_C.GetWallBlock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WallBlock_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::GetWallBlock(bool* WallBlock_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "GetWallBlock");

	Params::BI_FPFunctions_C_GetWallBlock Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WallBlock_ != nullptr)
		*WallBlock_ = Parms.WallBlock_;
}


// Function BI_FPFunctions.BI_FPFunctions_C.GetYawPitch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Yaw                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Pitch                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::GetYawPitch(double* Yaw, double* Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "GetYawPitch");

	Params::BI_FPFunctions_C_GetYawPitch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Yaw != nullptr)
		*Yaw = Parms.Yaw;

	if (Pitch != nullptr)
		*Pitch = Parms.Pitch;
}


// Function BI_FPFunctions.BI_FPFunctions_C.Set Aim Punch Rotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::Set_Aim_Punch_Rotation(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "Set Aim Punch Rotation");

	Params::BI_FPFunctions_C_Set_Aim_Punch_Rotation Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetAnims
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequence*                    Idle                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    Equip                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    UnEquip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Fire                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     FingerIdle                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    WallOffset_Up                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAnimSequence*                    WallOffset_Down                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           WeaponMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EBPE_Weapon_Type                        WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             WeaponName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStanceState                            Stance                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetAnims(class UAnimSequence* Idle, class UAnimSequence* Equip, class UAnimSequence* UnEquip, class UAnimSequence* Move, class UAnimMontage* Fire, class UAnimMontage* FingerIdle, class UAnimSequence* WallOffset_Up, class UAnimSequence* WallOffset_Down, class USkeletalMeshComponent* WeaponMesh, EBPE_Weapon_Type WeaponType, class FName WeaponName, EStanceState Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetAnims");

	Params::BI_FPFunctions_C_SetAnims Parms{};

	Parms.Idle = Idle;
	Parms.Equip = Equip;
	Parms.UnEquip = UnEquip;
	Parms.Move = Move;
	Parms.Fire = Fire;
	Parms.FingerIdle = FingerIdle;
	Parms.WallOffset_Up = WallOffset_Up;
	Parms.WallOffset_Down = WallOffset_Down;
	Parms.WeaponMesh = WeaponMesh;
	Parms.WeaponType = WeaponType;
	Parms.WeaponName = WeaponName;
	Parms.Stance = Stance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetBobcycleMultiplier
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetBobcycleMultiplier(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetBobcycleMultiplier");

	Params::BI_FPFunctions_C_SetBobcycleMultiplier Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetCrouchingWepOffset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetCrouchingWepOffset(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetCrouchingWepOffset");

	Params::BI_FPFunctions_C_SetCrouchingWepOffset Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetCrouchPitch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetCrouchPitch(double Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetCrouchPitch");

	Params::BI_FPFunctions_C_SetCrouchPitch Parms{};

	Parms.Pitch = Pitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetPitchYaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Pitch                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Yaw                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ApplyCustomMultiplier                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetPitchYaw(double Pitch, double Yaw, bool ApplyCustomMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetPitchYaw");

	Params::BI_FPFunctions_C_SetPitchYaw Parms{};

	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.ApplyCustomMultiplier = ApplyCustomMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetRecoilRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetRecoilRotation(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetRecoilRotation");

	Params::BI_FPFunctions_C_SetRecoilRotation Parms{};

	Parms.Value = std::move(Value);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetRotationSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RotationMultiplier                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RotationAnchor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RotationLimit                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetRotationSettings(double RotationMultiplier, double RotationAnchor, double RotationLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetRotationSettings");

	Params::BI_FPFunctions_C_SetRotationSettings Parms{};

	Parms.RotationMultiplier = RotationMultiplier;
	Parms.RotationAnchor = RotationAnchor;
	Parms.RotationLimit = RotationLimit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BI_FPFunctions.BI_FPFunctions_C.SetScopeInPos
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ScopeInPos                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBI_FPFunctions_C::SetScopeInPos(bool ScopeInPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BI_FPFunctions_C", "SetScopeInPos");

	Params::BI_FPFunctions_C_SetScopeInPos Parms{};

	Parms.ScopeInPos = ScopeInPos;

	UObject::ProcessEvent(Func, &Parms);
}

}

