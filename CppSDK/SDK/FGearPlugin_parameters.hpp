#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FGearPlugin

#include "Basic.hpp"

#include "FGearPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function FGearPlugin.FGearEffects.getBaseVolume
// 0x0004 (0x0004 - 0x0000)
struct FGearEffects_GetBaseVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_GetBaseVolume) == 0x000004, "Wrong alignment on FGearEffects_GetBaseVolume");
static_assert(sizeof(FGearEffects_GetBaseVolume) == 0x000004, "Wrong size on FGearEffects_GetBaseVolume");
static_assert(offsetof(FGearEffects_GetBaseVolume, ReturnValue) == 0x000000, "Member 'FGearEffects_GetBaseVolume::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEffects.getEnableSkidmarks
// 0x0001 (0x0001 - 0x0000)
struct FGearEffects_GetEnableSkidmarks final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_GetEnableSkidmarks) == 0x000001, "Wrong alignment on FGearEffects_GetEnableSkidmarks");
static_assert(sizeof(FGearEffects_GetEnableSkidmarks) == 0x000001, "Wrong size on FGearEffects_GetEnableSkidmarks");
static_assert(offsetof(FGearEffects_GetEnableSkidmarks, ReturnValue) == 0x000000, "Member 'FGearEffects_GetEnableSkidmarks::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEffects.getEngineVolume
// 0x0004 (0x0004 - 0x0000)
struct FGearEffects_GetEngineVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_GetEngineVolume) == 0x000004, "Wrong alignment on FGearEffects_GetEngineVolume");
static_assert(sizeof(FGearEffects_GetEngineVolume) == 0x000004, "Wrong size on FGearEffects_GetEngineVolume");
static_assert(offsetof(FGearEffects_GetEngineVolume, ReturnValue) == 0x000000, "Member 'FGearEffects_GetEngineVolume::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEffects.getSkidVolume
// 0x0004 (0x0004 - 0x0000)
struct FGearEffects_GetSkidVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_GetSkidVolume) == 0x000004, "Wrong alignment on FGearEffects_GetSkidVolume");
static_assert(sizeof(FGearEffects_GetSkidVolume) == 0x000004, "Wrong size on FGearEffects_GetSkidVolume");
static_assert(offsetof(FGearEffects_GetSkidVolume, ReturnValue) == 0x000000, "Member 'FGearEffects_GetSkidVolume::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEffects.setBaseVolume
// 0x0004 (0x0004 - 0x0000)
struct FGearEffects_SetBaseVolume final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_SetBaseVolume) == 0x000004, "Wrong alignment on FGearEffects_SetBaseVolume");
static_assert(sizeof(FGearEffects_SetBaseVolume) == 0x000004, "Wrong size on FGearEffects_SetBaseVolume");
static_assert(offsetof(FGearEffects_SetBaseVolume, V) == 0x000000, "Member 'FGearEffects_SetBaseVolume::V' has a wrong offset!");

// Function FGearPlugin.FGearEffects.setEnableSkidmarks
// 0x0001 (0x0001 - 0x0000)
struct FGearEffects_SetEnableSkidmarks final
{
public:
	bool                                          E;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_SetEnableSkidmarks) == 0x000001, "Wrong alignment on FGearEffects_SetEnableSkidmarks");
static_assert(sizeof(FGearEffects_SetEnableSkidmarks) == 0x000001, "Wrong size on FGearEffects_SetEnableSkidmarks");
static_assert(offsetof(FGearEffects_SetEnableSkidmarks, E) == 0x000000, "Member 'FGearEffects_SetEnableSkidmarks::E' has a wrong offset!");

// Function FGearPlugin.FGearEffects.setEngineVolume
// 0x0004 (0x0004 - 0x0000)
struct FGearEffects_SetEngineVolume final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_SetEngineVolume) == 0x000004, "Wrong alignment on FGearEffects_SetEngineVolume");
static_assert(sizeof(FGearEffects_SetEngineVolume) == 0x000004, "Wrong size on FGearEffects_SetEngineVolume");
static_assert(offsetof(FGearEffects_SetEngineVolume, V) == 0x000000, "Member 'FGearEffects_SetEngineVolume::V' has a wrong offset!");

// Function FGearPlugin.FGearEffects.setSkidVolume
// 0x0004 (0x0004 - 0x0000)
struct FGearEffects_SetSkidVolume final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEffects_SetSkidVolume) == 0x000004, "Wrong alignment on FGearEffects_SetSkidVolume");
static_assert(sizeof(FGearEffects_SetSkidVolume) == 0x000004, "Wrong size on FGearEffects_SetSkidVolume");
static_assert(offsetof(FGearEffects_SetSkidVolume, V) == 0x000000, "Member 'FGearEffects_SetSkidVolume::V' has a wrong offset!");

// Function FGearPlugin.FGearAeroDynamics.getDownForceCoefficient
// 0x0004 (0x0004 - 0x0000)
struct FGearAeroDynamics_GetDownForceCoefficient final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAeroDynamics_GetDownForceCoefficient) == 0x000004, "Wrong alignment on FGearAeroDynamics_GetDownForceCoefficient");
static_assert(sizeof(FGearAeroDynamics_GetDownForceCoefficient) == 0x000004, "Wrong size on FGearAeroDynamics_GetDownForceCoefficient");
static_assert(offsetof(FGearAeroDynamics_GetDownForceCoefficient, ReturnValue) == 0x000000, "Member 'FGearAeroDynamics_GetDownForceCoefficient::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAeroDynamics.getDownForceXOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearAeroDynamics_GetDownForceXOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAeroDynamics_GetDownForceXOffset) == 0x000004, "Wrong alignment on FGearAeroDynamics_GetDownForceXOffset");
static_assert(sizeof(FGearAeroDynamics_GetDownForceXOffset) == 0x000004, "Wrong size on FGearAeroDynamics_GetDownForceXOffset");
static_assert(offsetof(FGearAeroDynamics_GetDownForceXOffset, ReturnValue) == 0x000000, "Member 'FGearAeroDynamics_GetDownForceXOffset::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAeroDynamics.getDragCoefficient
// 0x0004 (0x0004 - 0x0000)
struct FGearAeroDynamics_GetDragCoefficient final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAeroDynamics_GetDragCoefficient) == 0x000004, "Wrong alignment on FGearAeroDynamics_GetDragCoefficient");
static_assert(sizeof(FGearAeroDynamics_GetDragCoefficient) == 0x000004, "Wrong size on FGearAeroDynamics_GetDragCoefficient");
static_assert(offsetof(FGearAeroDynamics_GetDragCoefficient, ReturnValue) == 0x000000, "Member 'FGearAeroDynamics_GetDragCoefficient::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAeroDynamics.SetDownforceCoefficient
// 0x0004 (0x0004 - 0x0000)
struct FGearAeroDynamics_SetDownforceCoefficient final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAeroDynamics_SetDownforceCoefficient) == 0x000004, "Wrong alignment on FGearAeroDynamics_SetDownforceCoefficient");
static_assert(sizeof(FGearAeroDynamics_SetDownforceCoefficient) == 0x000004, "Wrong size on FGearAeroDynamics_SetDownforceCoefficient");
static_assert(offsetof(FGearAeroDynamics_SetDownforceCoefficient, F) == 0x000000, "Member 'FGearAeroDynamics_SetDownforceCoefficient::F' has a wrong offset!");

// Function FGearPlugin.FGearAeroDynamics.setDownForceXOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearAeroDynamics_SetDownForceXOffset final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAeroDynamics_SetDownForceXOffset) == 0x000004, "Wrong alignment on FGearAeroDynamics_SetDownForceXOffset");
static_assert(sizeof(FGearAeroDynamics_SetDownForceXOffset) == 0x000004, "Wrong size on FGearAeroDynamics_SetDownForceXOffset");
static_assert(offsetof(FGearAeroDynamics_SetDownForceXOffset, F) == 0x000000, "Member 'FGearAeroDynamics_SetDownForceXOffset::F' has a wrong offset!");

// Function FGearPlugin.FGearAeroDynamics.SetDragCoefficient
// 0x0004 (0x0004 - 0x0000)
struct FGearAeroDynamics_SetDragCoefficient final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAeroDynamics_SetDragCoefficient) == 0x000004, "Wrong alignment on FGearAeroDynamics_SetDragCoefficient");
static_assert(sizeof(FGearAeroDynamics_SetDragCoefficient) == 0x000004, "Wrong size on FGearAeroDynamics_SetDragCoefficient");
static_assert(offsetof(FGearAeroDynamics_SetDragCoefficient, F) == 0x000000, "Member 'FGearAeroDynamics_SetDragCoefficient::F' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setAntirollBars
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetAntirollBars final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetAntirollBars) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetAntirollBars");
static_assert(sizeof(FGearArcadeAssists_SetAntirollBars) == 0x000001, "Wrong size on FGearArcadeAssists_SetAntirollBars");
static_assert(offsetof(FGearArcadeAssists_SetAntirollBars, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetAntirollBars::Enable' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setAntiRollSpring
// 0x0004 (0x0004 - 0x0000)
struct FGearArcadeAssists_SetAntiRollSpring final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetAntiRollSpring) == 0x000004, "Wrong alignment on FGearArcadeAssists_SetAntiRollSpring");
static_assert(sizeof(FGearArcadeAssists_SetAntiRollSpring) == 0x000004, "Wrong size on FGearArcadeAssists_SetAntiRollSpring");
static_assert(offsetof(FGearArcadeAssists_SetAntiRollSpring, V) == 0x000000, "Member 'FGearArcadeAssists_SetAntiRollSpring::V' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setBikeHelper
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetBikeHelper final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetBikeHelper) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetBikeHelper");
static_assert(sizeof(FGearArcadeAssists_SetBikeHelper) == 0x000001, "Wrong size on FGearArcadeAssists_SetBikeHelper");
static_assert(offsetof(FGearArcadeAssists_SetBikeHelper, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetBikeHelper::Enable' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setCruiseSpeed
// 0x0008 (0x0008 - 0x0000)
struct FGearArcadeAssists_SetCruiseSpeed final
{
public:
	float                                         KmhSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gear;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetCruiseSpeed) == 0x000004, "Wrong alignment on FGearArcadeAssists_SetCruiseSpeed");
static_assert(sizeof(FGearArcadeAssists_SetCruiseSpeed) == 0x000008, "Wrong size on FGearArcadeAssists_SetCruiseSpeed");
static_assert(offsetof(FGearArcadeAssists_SetCruiseSpeed, KmhSpeed) == 0x000000, "Member 'FGearArcadeAssists_SetCruiseSpeed::KmhSpeed' has a wrong offset!");
static_assert(offsetof(FGearArcadeAssists_SetCruiseSpeed, Gear) == 0x000004, "Member 'FGearArcadeAssists_SetCruiseSpeed::Gear' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setDamperSmooth
// 0x0004 (0x0004 - 0x0000)
struct FGearArcadeAssists_SetDamperSmooth final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetDamperSmooth) == 0x000004, "Wrong alignment on FGearArcadeAssists_SetDamperSmooth");
static_assert(sizeof(FGearArcadeAssists_SetDamperSmooth) == 0x000004, "Wrong size on FGearArcadeAssists_SetDamperSmooth");
static_assert(offsetof(FGearArcadeAssists_SetDamperSmooth, V) == 0x000000, "Member 'FGearArcadeAssists_SetDamperSmooth::V' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setDriftAssist
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetDriftAssist final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetDriftAssist) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetDriftAssist");
static_assert(sizeof(FGearArcadeAssists_SetDriftAssist) == 0x000001, "Wrong size on FGearArcadeAssists_SetDriftAssist");
static_assert(offsetof(FGearArcadeAssists_SetDriftAssist, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetDriftAssist::Enable' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setLeanInAir
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetLeanInAir final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetLeanInAir) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetLeanInAir");
static_assert(sizeof(FGearArcadeAssists_SetLeanInAir) == 0x000001, "Wrong size on FGearArcadeAssists_SetLeanInAir");
static_assert(offsetof(FGearArcadeAssists_SetLeanInAir, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetLeanInAir::Enable' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setMaxLeanAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearArcadeAssists_SetMaxLeanAngle final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetMaxLeanAngle) == 0x000004, "Wrong alignment on FGearArcadeAssists_SetMaxLeanAngle");
static_assert(sizeof(FGearArcadeAssists_SetMaxLeanAngle) == 0x000004, "Wrong size on FGearArcadeAssists_SetMaxLeanAngle");
static_assert(offsetof(FGearArcadeAssists_SetMaxLeanAngle, V) == 0x000000, "Member 'FGearArcadeAssists_SetMaxLeanAngle::V' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setMaxPitchAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearArcadeAssists_SetMaxPitchAngle final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetMaxPitchAngle) == 0x000004, "Wrong alignment on FGearArcadeAssists_SetMaxPitchAngle");
static_assert(sizeof(FGearArcadeAssists_SetMaxPitchAngle) == 0x000004, "Wrong size on FGearArcadeAssists_SetMaxPitchAngle");
static_assert(offsetof(FGearArcadeAssists_SetMaxPitchAngle, V) == 0x000000, "Member 'FGearArcadeAssists_SetMaxPitchAngle::V' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setMinLeanSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearArcadeAssists_SetMinLeanSpeed final
{
public:
	float                                         V;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetMinLeanSpeed) == 0x000004, "Wrong alignment on FGearArcadeAssists_SetMinLeanSpeed");
static_assert(sizeof(FGearArcadeAssists_SetMinLeanSpeed) == 0x000004, "Wrong size on FGearArcadeAssists_SetMinLeanSpeed");
static_assert(offsetof(FGearArcadeAssists_SetMinLeanSpeed, V) == 0x000000, "Member 'FGearArcadeAssists_SetMinLeanSpeed::V' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setRecoverAssists
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetRecoverAssists final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetRecoverAssists) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetRecoverAssists");
static_assert(sizeof(FGearArcadeAssists_SetRecoverAssists) == 0x000001, "Wrong size on FGearArcadeAssists_SetRecoverAssists");
static_assert(offsetof(FGearArcadeAssists_SetRecoverAssists, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetRecoverAssists::Enable' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setTorqueSplitter
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetTorqueSplitter final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetTorqueSplitter) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetTorqueSplitter");
static_assert(sizeof(FGearArcadeAssists_SetTorqueSplitter) == 0x000001, "Wrong size on FGearArcadeAssists_SetTorqueSplitter");
static_assert(offsetof(FGearArcadeAssists_SetTorqueSplitter, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetTorqueSplitter::Enable' has a wrong offset!");

// Function FGearPlugin.FGearArcadeAssists.setTractionAssist
// 0x0001 (0x0001 - 0x0000)
struct FGearArcadeAssists_SetTractionAssist final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearArcadeAssists_SetTractionAssist) == 0x000001, "Wrong alignment on FGearArcadeAssists_SetTractionAssist");
static_assert(sizeof(FGearArcadeAssists_SetTractionAssist) == 0x000001, "Wrong size on FGearArcadeAssists_SetTractionAssist");
static_assert(offsetof(FGearArcadeAssists_SetTractionAssist, Enable) == 0x000000, "Member 'FGearArcadeAssists_SetTractionAssist::Enable' has a wrong offset!");

// Function FGearPlugin.FGearAutoDrive.getCurrentSplineParam
// 0x0004 (0x0004 - 0x0000)
struct FGearAutoDrive_GetCurrentSplineParam final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAutoDrive_GetCurrentSplineParam) == 0x000004, "Wrong alignment on FGearAutoDrive_GetCurrentSplineParam");
static_assert(sizeof(FGearAutoDrive_GetCurrentSplineParam) == 0x000004, "Wrong size on FGearAutoDrive_GetCurrentSplineParam");
static_assert(offsetof(FGearAutoDrive_GetCurrentSplineParam, ReturnValue) == 0x000000, "Member 'FGearAutoDrive_GetCurrentSplineParam::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAutoDrive.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FGearAutoDrive_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAutoDrive_IsEnabled) == 0x000001, "Wrong alignment on FGearAutoDrive_IsEnabled");
static_assert(sizeof(FGearAutoDrive_IsEnabled) == 0x000001, "Wrong size on FGearAutoDrive_IsEnabled");
static_assert(offsetof(FGearAutoDrive_IsEnabled, ReturnValue) == 0x000000, "Member 'FGearAutoDrive_IsEnabled::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAutoDrive.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct FGearAutoDrive_SetEnabled final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAutoDrive_SetEnabled) == 0x000001, "Wrong alignment on FGearAutoDrive_SetEnabled");
static_assert(sizeof(FGearAutoDrive_SetEnabled) == 0x000001, "Wrong size on FGearAutoDrive_SetEnabled");
static_assert(offsetof(FGearAutoDrive_SetEnabled, B) == 0x000000, "Member 'FGearAutoDrive_SetEnabled::B' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getAckermanCoeff
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetAckermanCoeff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetAckermanCoeff) == 0x000004, "Wrong alignment on FGearAxle_GetAckermanCoeff");
static_assert(sizeof(FGearAxle_GetAckermanCoeff) == 0x000004, "Wrong size on FGearAxle_GetAckermanCoeff");
static_assert(offsetof(FGearAxle_GetAckermanCoeff, ReturnValue) == 0x000000, "Member 'FGearAxle_GetAckermanCoeff::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getAckermanReferenceIndex
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetAckermanReferenceIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetAckermanReferenceIndex) == 0x000004, "Wrong alignment on FGearAxle_GetAckermanReferenceIndex");
static_assert(sizeof(FGearAxle_GetAckermanReferenceIndex) == 0x000004, "Wrong size on FGearAxle_GetAckermanReferenceIndex");
static_assert(offsetof(FGearAxle_GetAckermanReferenceIndex, ReturnValue) == 0x000000, "Member 'FGearAxle_GetAckermanReferenceIndex::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getCamberAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetCamberAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetCamberAngle) == 0x000004, "Wrong alignment on FGearAxle_GetCamberAngle");
static_assert(sizeof(FGearAxle_GetCamberAngle) == 0x000004, "Wrong size on FGearAxle_GetCamberAngle");
static_assert(offsetof(FGearAxle_GetCamberAngle, ReturnValue) == 0x000000, "Member 'FGearAxle_GetCamberAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getCurRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetCurRpm final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetCurRpm) == 0x000004, "Wrong alignment on FGearAxle_GetCurRpm");
static_assert(sizeof(FGearAxle_GetCurRpm) == 0x000004, "Wrong size on FGearAxle_GetCurRpm");
static_assert(offsetof(FGearAxle_GetCurRpm, ReturnValue) == 0x000000, "Member 'FGearAxle_GetCurRpm::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getDifferentialType
// 0x0001 (0x0001 - 0x0000)
struct FGearAxle_GetDifferentialType final
{
public:
	EFGearDifferentialType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetDifferentialType) == 0x000001, "Wrong alignment on FGearAxle_GetDifferentialType");
static_assert(sizeof(FGearAxle_GetDifferentialType) == 0x000001, "Wrong size on FGearAxle_GetDifferentialType");
static_assert(offsetof(FGearAxle_GetDifferentialType, ReturnValue) == 0x000000, "Member 'FGearAxle_GetDifferentialType::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getDiffStrength
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetDiffStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetDiffStrength) == 0x000004, "Wrong alignment on FGearAxle_GetDiffStrength");
static_assert(sizeof(FGearAxle_GetDiffStrength) == 0x000004, "Wrong size on FGearAxle_GetDiffStrength");
static_assert(offsetof(FGearAxle_GetDiffStrength, ReturnValue) == 0x000000, "Member 'FGearAxle_GetDiffStrength::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getFeedbackTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetFeedbackTorque final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetFeedbackTorque) == 0x000004, "Wrong alignment on FGearAxle_GetFeedbackTorque");
static_assert(sizeof(FGearAxle_GetFeedbackTorque) == 0x000004, "Wrong size on FGearAxle_GetFeedbackTorque");
static_assert(offsetof(FGearAxle_GetFeedbackTorque, ReturnValue) == 0x000000, "Member 'FGearAxle_GetFeedbackTorque::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getGlobalCenter
// 0x0018 (0x0018 - 0x0000)
struct FGearAxle_GetGlobalCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetGlobalCenter) == 0x000008, "Wrong alignment on FGearAxle_GetGlobalCenter");
static_assert(sizeof(FGearAxle_GetGlobalCenter) == 0x000018, "Wrong size on FGearAxle_GetGlobalCenter");
static_assert(offsetof(FGearAxle_GetGlobalCenter, ReturnValue) == 0x000000, "Member 'FGearAxle_GetGlobalCenter::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getIndex
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetIndex) == 0x000004, "Wrong alignment on FGearAxle_GetIndex");
static_assert(sizeof(FGearAxle_GetIndex) == 0x000004, "Wrong size on FGearAxle_GetIndex");
static_assert(offsetof(FGearAxle_GetIndex, ReturnValue) == 0x000000, "Member 'FGearAxle_GetIndex::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getLeftWheel
// 0x0008 (0x0008 - 0x0000)
struct FGearAxle_GetLeftWheel final
{
public:
	class UFGearWheel*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetLeftWheel) == 0x000008, "Wrong alignment on FGearAxle_GetLeftWheel");
static_assert(sizeof(FGearAxle_GetLeftWheel) == 0x000008, "Wrong size on FGearAxle_GetLeftWheel");
static_assert(offsetof(FGearAxle_GetLeftWheel, ReturnValue) == 0x000000, "Member 'FGearAxle_GetLeftWheel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getLocalCenter
// 0x0018 (0x0018 - 0x0000)
struct FGearAxle_GetLocalCenter final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetLocalCenter) == 0x000008, "Wrong alignment on FGearAxle_GetLocalCenter");
static_assert(sizeof(FGearAxle_GetLocalCenter) == 0x000018, "Wrong size on FGearAxle_GetLocalCenter");
static_assert(offsetof(FGearAxle_GetLocalCenter, ReturnValue) == 0x000000, "Member 'FGearAxle_GetLocalCenter::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getMaxRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetMaxRpm final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetMaxRpm) == 0x000004, "Wrong alignment on FGearAxle_GetMaxRpm");
static_assert(sizeof(FGearAxle_GetMaxRpm) == 0x000004, "Wrong size on FGearAxle_GetMaxRpm");
static_assert(offsetof(FGearAxle_GetMaxRpm, ReturnValue) == 0x000000, "Member 'FGearAxle_GetMaxRpm::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getMaxSteerAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetMaxSteerAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetMaxSteerAngle) == 0x000004, "Wrong alignment on FGearAxle_GetMaxSteerAngle");
static_assert(sizeof(FGearAxle_GetMaxSteerAngle) == 0x000004, "Wrong size on FGearAxle_GetMaxSteerAngle");
static_assert(offsetof(FGearAxle_GetMaxSteerAngle, ReturnValue) == 0x000000, "Member 'FGearAxle_GetMaxSteerAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getNormalizedSteering
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetNormalizedSteering final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetNormalizedSteering) == 0x000004, "Wrong alignment on FGearAxle_GetNormalizedSteering");
static_assert(sizeof(FGearAxle_GetNormalizedSteering) == 0x000004, "Wrong size on FGearAxle_GetNormalizedSteering");
static_assert(offsetof(FGearAxle_GetNormalizedSteering, ReturnValue) == 0x000000, "Member 'FGearAxle_GetNormalizedSteering::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getRightWheel
// 0x0008 (0x0008 - 0x0000)
struct FGearAxle_GetRightWheel final
{
public:
	class UFGearWheel*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetRightWheel) == 0x000008, "Wrong alignment on FGearAxle_GetRightWheel");
static_assert(sizeof(FGearAxle_GetRightWheel) == 0x000008, "Wrong size on FGearAxle_GetRightWheel");
static_assert(offsetof(FGearAxle_GetRightWheel, ReturnValue) == 0x000000, "Member 'FGearAxle_GetRightWheel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getRPM
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetRPM) == 0x000004, "Wrong alignment on FGearAxle_GetRPM");
static_assert(sizeof(FGearAxle_GetRPM) == 0x000004, "Wrong size on FGearAxle_GetRPM");
static_assert(offsetof(FGearAxle_GetRPM, ReturnValue) == 0x000000, "Member 'FGearAxle_GetRPM::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getToeAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetToeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetToeAngle) == 0x000004, "Wrong alignment on FGearAxle_GetToeAngle");
static_assert(sizeof(FGearAxle_GetToeAngle) == 0x000004, "Wrong size on FGearAxle_GetToeAngle");
static_assert(offsetof(FGearAxle_GetToeAngle, ReturnValue) == 0x000000, "Member 'FGearAxle_GetToeAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getTorqueShare
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetTorqueShare final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetTorqueShare) == 0x000004, "Wrong alignment on FGearAxle_GetTorqueShare");
static_assert(sizeof(FGearAxle_GetTorqueShare) == 0x000004, "Wrong size on FGearAxle_GetTorqueShare");
static_assert(offsetof(FGearAxle_GetTorqueShare, ReturnValue) == 0x000000, "Member 'FGearAxle_GetTorqueShare::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getTrackWidth
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetTrackWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetTrackWidth) == 0x000004, "Wrong alignment on FGearAxle_GetTrackWidth");
static_assert(sizeof(FGearAxle_GetTrackWidth) == 0x000004, "Wrong size on FGearAxle_GetTrackWidth");
static_assert(offsetof(FGearAxle_GetTrackWidth, ReturnValue) == 0x000000, "Member 'FGearAxle_GetTrackWidth::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getWheelOptions
// 0x0008 (0x0008 - 0x0000)
struct FGearAxle_GetWheelOptions final
{
public:
	class UFGearWheelOptions*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetWheelOptions) == 0x000008, "Wrong alignment on FGearAxle_GetWheelOptions");
static_assert(sizeof(FGearAxle_GetWheelOptions) == 0x000008, "Wrong size on FGearAxle_GetWheelOptions");
static_assert(offsetof(FGearAxle_GetWheelOptions, ReturnValue) == 0x000000, "Member 'FGearAxle_GetWheelOptions::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.getWheelRPMToKMH
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_GetWheelRPMToKMH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_GetWheelRPMToKMH) == 0x000004, "Wrong alignment on FGearAxle_GetWheelRPMToKMH");
static_assert(sizeof(FGearAxle_GetWheelRPMToKMH) == 0x000004, "Wrong size on FGearAxle_GetWheelRPMToKMH");
static_assert(offsetof(FGearAxle_GetWheelRPMToKMH, ReturnValue) == 0x000000, "Member 'FGearAxle_GetWheelRPMToKMH::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.hasHandBrake
// 0x0001 (0x0001 - 0x0000)
struct FGearAxle_HasHandBrake final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_HasHandBrake) == 0x000001, "Wrong alignment on FGearAxle_HasHandBrake");
static_assert(sizeof(FGearAxle_HasHandBrake) == 0x000001, "Wrong size on FGearAxle_HasHandBrake");
static_assert(offsetof(FGearAxle_HasHandBrake, ReturnValue) == 0x000000, "Member 'FGearAxle_HasHandBrake::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.hasSteering
// 0x0001 (0x0001 - 0x0000)
struct FGearAxle_HasSteering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_HasSteering) == 0x000001, "Wrong alignment on FGearAxle_HasSteering");
static_assert(sizeof(FGearAxle_HasSteering) == 0x000001, "Wrong size on FGearAxle_HasSteering");
static_assert(offsetof(FGearAxle_HasSteering, ReturnValue) == 0x000000, "Member 'FGearAxle_HasSteering::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setAckermanCoeff
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetAckermanCoeff final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetAckermanCoeff) == 0x000004, "Wrong alignment on FGearAxle_SetAckermanCoeff");
static_assert(sizeof(FGearAxle_SetAckermanCoeff) == 0x000004, "Wrong size on FGearAxle_SetAckermanCoeff");
static_assert(offsetof(FGearAxle_SetAckermanCoeff, F) == 0x000000, "Member 'FGearAxle_SetAckermanCoeff::F' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setAckermanReferenceIndex
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetAckermanReferenceIndex final
{
public:
	int32                                         I;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetAckermanReferenceIndex) == 0x000004, "Wrong alignment on FGearAxle_SetAckermanReferenceIndex");
static_assert(sizeof(FGearAxle_SetAckermanReferenceIndex) == 0x000004, "Wrong size on FGearAxle_SetAckermanReferenceIndex");
static_assert(offsetof(FGearAxle_SetAckermanReferenceIndex, I) == 0x000000, "Member 'FGearAxle_SetAckermanReferenceIndex::I' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setCamberAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetCamberAngle final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetCamberAngle) == 0x000004, "Wrong alignment on FGearAxle_SetCamberAngle");
static_assert(sizeof(FGearAxle_SetCamberAngle) == 0x000004, "Wrong size on FGearAxle_SetCamberAngle");
static_assert(offsetof(FGearAxle_SetCamberAngle, F) == 0x000000, "Member 'FGearAxle_SetCamberAngle::F' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setDifferentialType
// 0x0001 (0x0001 - 0x0000)
struct FGearAxle_SetDifferentialType final
{
public:
	EFGearDifferentialType                        Dt;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetDifferentialType) == 0x000001, "Wrong alignment on FGearAxle_SetDifferentialType");
static_assert(sizeof(FGearAxle_SetDifferentialType) == 0x000001, "Wrong size on FGearAxle_SetDifferentialType");
static_assert(offsetof(FGearAxle_SetDifferentialType, Dt) == 0x000000, "Member 'FGearAxle_SetDifferentialType::Dt' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setDiffStrength
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetDiffStrength final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetDiffStrength) == 0x000004, "Wrong alignment on FGearAxle_SetDiffStrength");
static_assert(sizeof(FGearAxle_SetDiffStrength) == 0x000004, "Wrong size on FGearAxle_SetDiffStrength");
static_assert(offsetof(FGearAxle_SetDiffStrength, F) == 0x000000, "Member 'FGearAxle_SetDiffStrength::F' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setHasHandBrake
// 0x0001 (0x0001 - 0x0000)
struct FGearAxle_SetHasHandBrake final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetHasHandBrake) == 0x000001, "Wrong alignment on FGearAxle_SetHasHandBrake");
static_assert(sizeof(FGearAxle_SetHasHandBrake) == 0x000001, "Wrong size on FGearAxle_SetHasHandBrake");
static_assert(offsetof(FGearAxle_SetHasHandBrake, B) == 0x000000, "Member 'FGearAxle_SetHasHandBrake::B' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setLeftWheel
// 0x0008 (0x0008 - 0x0000)
struct FGearAxle_SetLeftWheel final
{
public:
	class UFGearWheel*                            W;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetLeftWheel) == 0x000008, "Wrong alignment on FGearAxle_SetLeftWheel");
static_assert(sizeof(FGearAxle_SetLeftWheel) == 0x000008, "Wrong size on FGearAxle_SetLeftWheel");
static_assert(offsetof(FGearAxle_SetLeftWheel, W) == 0x000000, "Member 'FGearAxle_SetLeftWheel::W' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setMaxSteerAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetMaxSteerAngle final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetMaxSteerAngle) == 0x000004, "Wrong alignment on FGearAxle_SetMaxSteerAngle");
static_assert(sizeof(FGearAxle_SetMaxSteerAngle) == 0x000004, "Wrong size on FGearAxle_SetMaxSteerAngle");
static_assert(offsetof(FGearAxle_SetMaxSteerAngle, F) == 0x000000, "Member 'FGearAxle_SetMaxSteerAngle::F' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setRightWheel
// 0x0008 (0x0008 - 0x0000)
struct FGearAxle_SetRightWheel final
{
public:
	class UFGearWheel*                            W;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetRightWheel) == 0x000008, "Wrong alignment on FGearAxle_SetRightWheel");
static_assert(sizeof(FGearAxle_SetRightWheel) == 0x000008, "Wrong size on FGearAxle_SetRightWheel");
static_assert(offsetof(FGearAxle_SetRightWheel, W) == 0x000000, "Member 'FGearAxle_SetRightWheel::W' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setTargetSteer
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetTargetSteer final
{
public:
	float                                         S;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetTargetSteer) == 0x000004, "Wrong alignment on FGearAxle_SetTargetSteer");
static_assert(sizeof(FGearAxle_SetTargetSteer) == 0x000004, "Wrong size on FGearAxle_SetTargetSteer");
static_assert(offsetof(FGearAxle_SetTargetSteer, S) == 0x000000, "Member 'FGearAxle_SetTargetSteer::S' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setToeAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetToeAngle final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetToeAngle) == 0x000004, "Wrong alignment on FGearAxle_SetToeAngle");
static_assert(sizeof(FGearAxle_SetToeAngle) == 0x000004, "Wrong size on FGearAxle_SetToeAngle");
static_assert(offsetof(FGearAxle_SetToeAngle, F) == 0x000000, "Member 'FGearAxle_SetToeAngle::F' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setTorqueShare
// 0x0004 (0x0004 - 0x0000)
struct FGearAxle_SetTorqueShare final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetTorqueShare) == 0x000004, "Wrong alignment on FGearAxle_SetTorqueShare");
static_assert(sizeof(FGearAxle_SetTorqueShare) == 0x000004, "Wrong size on FGearAxle_SetTorqueShare");
static_assert(offsetof(FGearAxle_SetTorqueShare, F) == 0x000000, "Member 'FGearAxle_SetTorqueShare::F' has a wrong offset!");

// Function FGearPlugin.FGearAxle.setWheelOptions
// 0x0008 (0x0008 - 0x0000)
struct FGearAxle_SetWheelOptions final
{
public:
	class UFGearWheelOptions*                     Wo;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearAxle_SetWheelOptions) == 0x000008, "Wrong alignment on FGearAxle_SetWheelOptions");
static_assert(sizeof(FGearAxle_SetWheelOptions) == 0x000008, "Wrong size on FGearAxle_SetWheelOptions");
static_assert(offsetof(FGearAxle_SetWheelOptions, Wo) == 0x000000, "Member 'FGearAxle_SetWheelOptions::Wo' has a wrong offset!");

// Function FGearPlugin.FGearEngine.calculateMaxPower
// 0x0008 (0x0008 - 0x0000)
struct FGearEngine_CalculateMaxPower final
{
public:
	float                                         MaxPower;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPowerRpm;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_CalculateMaxPower) == 0x000004, "Wrong alignment on FGearEngine_CalculateMaxPower");
static_assert(sizeof(FGearEngine_CalculateMaxPower) == 0x000008, "Wrong size on FGearEngine_CalculateMaxPower");
static_assert(offsetof(FGearEngine_CalculateMaxPower, MaxPower) == 0x000000, "Member 'FGearEngine_CalculateMaxPower::MaxPower' has a wrong offset!");
static_assert(offsetof(FGearEngine_CalculateMaxPower, MaxPowerRpm) == 0x000004, "Member 'FGearEngine_CalculateMaxPower::MaxPowerRpm' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getEngineInertia
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetEngineInertia final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetEngineInertia) == 0x000004, "Wrong alignment on FGearEngine_GetEngineInertia");
static_assert(sizeof(FGearEngine_GetEngineInertia) == 0x000004, "Wrong size on FGearEngine_GetEngineInertia");
static_assert(offsetof(FGearEngine_GetEngineInertia, ReturnValue) == 0x000000, "Member 'FGearEngine_GetEngineInertia::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getFrictionTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetFrictionTorque final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetFrictionTorque) == 0x000004, "Wrong alignment on FGearEngine_GetFrictionTorque");
static_assert(sizeof(FGearEngine_GetFrictionTorque) == 0x000004, "Wrong size on FGearEngine_GetFrictionTorque");
static_assert(offsetof(FGearEngine_GetFrictionTorque, ReturnValue) == 0x000000, "Member 'FGearEngine_GetFrictionTorque::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getIdleRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetIdleRpm final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetIdleRpm) == 0x000004, "Wrong alignment on FGearEngine_GetIdleRpm");
static_assert(sizeof(FGearEngine_GetIdleRpm) == 0x000004, "Wrong size on FGearEngine_GetIdleRpm");
static_assert(offsetof(FGearEngine_GetIdleRpm, ReturnValue) == 0x000000, "Member 'FGearEngine_GetIdleRpm::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getLimiterTime
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetLimiterTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetLimiterTime) == 0x000004, "Wrong alignment on FGearEngine_GetLimiterTime");
static_assert(sizeof(FGearEngine_GetLimiterTime) == 0x000004, "Wrong size on FGearEngine_GetLimiterTime");
static_assert(offsetof(FGearEngine_GetLimiterTime, ReturnValue) == 0x000000, "Member 'FGearEngine_GetLimiterTime::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getLimitRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetLimitRpm final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetLimitRpm) == 0x000004, "Wrong alignment on FGearEngine_GetLimitRpm");
static_assert(sizeof(FGearEngine_GetLimitRpm) == 0x000004, "Wrong size on FGearEngine_GetLimitRpm");
static_assert(offsetof(FGearEngine_GetLimitRpm, ReturnValue) == 0x000000, "Member 'FGearEngine_GetLimitRpm::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getRPM
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetRPM) == 0x000004, "Wrong alignment on FGearEngine_GetRPM");
static_assert(sizeof(FGearEngine_GetRPM) == 0x000004, "Wrong size on FGearEngine_GetRPM");
static_assert(offsetof(FGearEngine_GetRPM, ReturnValue) == 0x000000, "Member 'FGearEngine_GetRPM::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getRpmRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetRpmRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetRpmRatio) == 0x000004, "Wrong alignment on FGearEngine_GetRpmRatio");
static_assert(sizeof(FGearEngine_GetRpmRatio) == 0x000004, "Wrong size on FGearEngine_GetRpmRatio");
static_assert(offsetof(FGearEngine_GetRpmRatio, ReturnValue) == 0x000000, "Member 'FGearEngine_GetRpmRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getThrottle
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetThrottle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetThrottle) == 0x000004, "Wrong alignment on FGearEngine_GetThrottle");
static_assert(sizeof(FGearEngine_GetThrottle) == 0x000004, "Wrong size on FGearEngine_GetThrottle");
static_assert(offsetof(FGearEngine_GetThrottle, ReturnValue) == 0x000000, "Member 'FGearEngine_GetThrottle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetTorque final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetTorque) == 0x000004, "Wrong alignment on FGearEngine_GetTorque");
static_assert(sizeof(FGearEngine_GetTorque) == 0x000004, "Wrong size on FGearEngine_GetTorque");
static_assert(offsetof(FGearEngine_GetTorque, ReturnValue) == 0x000000, "Member 'FGearEngine_GetTorque::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getTorqueCurve
// 0x0008 (0x0008 - 0x0000)
struct FGearEngine_GetTorqueCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetTorqueCurve) == 0x000008, "Wrong alignment on FGearEngine_GetTorqueCurve");
static_assert(sizeof(FGearEngine_GetTorqueCurve) == 0x000008, "Wrong size on FGearEngine_GetTorqueCurve");
static_assert(offsetof(FGearEngine_GetTorqueCurve, ReturnValue) == 0x000000, "Member 'FGearEngine_GetTorqueCurve::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.getTorqueScale
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_GetTorqueScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_GetTorqueScale) == 0x000004, "Wrong alignment on FGearEngine_GetTorqueScale");
static_assert(sizeof(FGearEngine_GetTorqueScale) == 0x000004, "Wrong size on FGearEngine_GetTorqueScale");
static_assert(offsetof(FGearEngine_GetTorqueScale, ReturnValue) == 0x000000, "Member 'FGearEngine_GetTorqueScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.isLimiterOn
// 0x0001 (0x0001 - 0x0000)
struct FGearEngine_IsLimiterOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_IsLimiterOn) == 0x000001, "Wrong alignment on FGearEngine_IsLimiterOn");
static_assert(sizeof(FGearEngine_IsLimiterOn) == 0x000001, "Wrong size on FGearEngine_IsLimiterOn");
static_assert(offsetof(FGearEngine_IsLimiterOn, ReturnValue) == 0x000000, "Member 'FGearEngine_IsLimiterOn::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.isRunning
// 0x0001 (0x0001 - 0x0000)
struct FGearEngine_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_IsRunning) == 0x000001, "Wrong alignment on FGearEngine_IsRunning");
static_assert(sizeof(FGearEngine_IsRunning) == 0x000001, "Wrong size on FGearEngine_IsRunning");
static_assert(offsetof(FGearEngine_IsRunning, ReturnValue) == 0x000000, "Member 'FGearEngine_IsRunning::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setEngineInertia
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetEngineInertia final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetEngineInertia) == 0x000004, "Wrong alignment on FGearEngine_SetEngineInertia");
static_assert(sizeof(FGearEngine_SetEngineInertia) == 0x000004, "Wrong size on FGearEngine_SetEngineInertia");
static_assert(offsetof(FGearEngine_SetEngineInertia, F) == 0x000000, "Member 'FGearEngine_SetEngineInertia::F' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setFrictionTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetFrictionTorque final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetFrictionTorque) == 0x000004, "Wrong alignment on FGearEngine_SetFrictionTorque");
static_assert(sizeof(FGearEngine_SetFrictionTorque) == 0x000004, "Wrong size on FGearEngine_SetFrictionTorque");
static_assert(offsetof(FGearEngine_SetFrictionTorque, F) == 0x000000, "Member 'FGearEngine_SetFrictionTorque::F' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setIdleRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetIdleRpm final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetIdleRpm) == 0x000004, "Wrong alignment on FGearEngine_SetIdleRpm");
static_assert(sizeof(FGearEngine_SetIdleRpm) == 0x000004, "Wrong size on FGearEngine_SetIdleRpm");
static_assert(offsetof(FGearEngine_SetIdleRpm, F) == 0x000000, "Member 'FGearEngine_SetIdleRpm::F' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setLimiter
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetLimiter final
{
public:
	float                                         L;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetLimiter) == 0x000004, "Wrong alignment on FGearEngine_SetLimiter");
static_assert(sizeof(FGearEngine_SetLimiter) == 0x000004, "Wrong size on FGearEngine_SetLimiter");
static_assert(offsetof(FGearEngine_SetLimiter, L) == 0x000000, "Member 'FGearEngine_SetLimiter::L' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setLimiterTime
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetLimiterTime final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetLimiterTime) == 0x000004, "Wrong alignment on FGearEngine_SetLimiterTime");
static_assert(sizeof(FGearEngine_SetLimiterTime) == 0x000004, "Wrong size on FGearEngine_SetLimiterTime");
static_assert(offsetof(FGearEngine_SetLimiterTime, F) == 0x000000, "Member 'FGearEngine_SetLimiterTime::F' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setLimitRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetLimitRpm final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetLimitRpm) == 0x000004, "Wrong alignment on FGearEngine_SetLimitRpm");
static_assert(sizeof(FGearEngine_SetLimitRpm) == 0x000004, "Wrong size on FGearEngine_SetLimitRpm");
static_assert(offsetof(FGearEngine_SetLimitRpm, F) == 0x000000, "Member 'FGearEngine_SetLimitRpm::F' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setRpm
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetRpm final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetRpm) == 0x000004, "Wrong alignment on FGearEngine_SetRpm");
static_assert(sizeof(FGearEngine_SetRpm) == 0x000004, "Wrong size on FGearEngine_SetRpm");
static_assert(offsetof(FGearEngine_SetRpm, F) == 0x000000, "Member 'FGearEngine_SetRpm::F' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setRunning
// 0x0001 (0x0001 - 0x0000)
struct FGearEngine_SetRunning final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetRunning) == 0x000001, "Wrong alignment on FGearEngine_SetRunning");
static_assert(sizeof(FGearEngine_SetRunning) == 0x000001, "Wrong size on FGearEngine_SetRunning");
static_assert(offsetof(FGearEngine_SetRunning, B) == 0x000000, "Member 'FGearEngine_SetRunning::B' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setThrottle
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetThrottle final
{
public:
	float                                         Pedal;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetThrottle) == 0x000004, "Wrong alignment on FGearEngine_SetThrottle");
static_assert(sizeof(FGearEngine_SetThrottle) == 0x000004, "Wrong size on FGearEngine_SetThrottle");
static_assert(offsetof(FGearEngine_SetThrottle, Pedal) == 0x000000, "Member 'FGearEngine_SetThrottle::Pedal' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setTorqueCurve
// 0x0008 (0x0008 - 0x0000)
struct FGearEngine_SetTorqueCurve final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetTorqueCurve) == 0x000008, "Wrong alignment on FGearEngine_SetTorqueCurve");
static_assert(sizeof(FGearEngine_SetTorqueCurve) == 0x000008, "Wrong size on FGearEngine_SetTorqueCurve");
static_assert(offsetof(FGearEngine_SetTorqueCurve, Curve) == 0x000000, "Member 'FGearEngine_SetTorqueCurve::Curve' has a wrong offset!");

// Function FGearPlugin.FGearEngine.setTorqueScale
// 0x0004 (0x0004 - 0x0000)
struct FGearEngine_SetTorqueScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearEngine_SetTorqueScale) == 0x000004, "Wrong alignment on FGearEngine_SetTorqueScale");
static_assert(sizeof(FGearEngine_SetTorqueScale) == 0x000004, "Wrong size on FGearEngine_SetTorqueScale");
static_assert(offsetof(FGearEngine_SetTorqueScale, F) == 0x000000, "Member 'FGearEngine_SetTorqueScale::F' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.injectMouseDX
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_InjectMouseDX final
{
public:
	float                                         Mx;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_InjectMouseDX) == 0x000004, "Wrong alignment on FGearOrbitCamera_InjectMouseDX");
static_assert(sizeof(FGearOrbitCamera_InjectMouseDX) == 0x000004, "Wrong size on FGearOrbitCamera_InjectMouseDX");
static_assert(offsetof(FGearOrbitCamera_InjectMouseDX, Mx) == 0x000000, "Member 'FGearOrbitCamera_InjectMouseDX::Mx' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.injectMouseDY
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_InjectMouseDY final
{
public:
	float                                         My;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_InjectMouseDY) == 0x000004, "Wrong alignment on FGearOrbitCamera_InjectMouseDY");
static_assert(sizeof(FGearOrbitCamera_InjectMouseDY) == 0x000004, "Wrong size on FGearOrbitCamera_InjectMouseDY");
static_assert(offsetof(FGearOrbitCamera_InjectMouseDY, My) == 0x000000, "Member 'FGearOrbitCamera_InjectMouseDY::My' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.injectMouseDZ
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_InjectMouseDZ final
{
public:
	float                                         Mz;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_InjectMouseDZ) == 0x000004, "Wrong alignment on FGearOrbitCamera_InjectMouseDZ");
static_assert(sizeof(FGearOrbitCamera_InjectMouseDZ) == 0x000004, "Wrong size on FGearOrbitCamera_InjectMouseDZ");
static_assert(offsetof(FGearOrbitCamera_InjectMouseDZ, Mz) == 0x000000, "Member 'FGearOrbitCamera_InjectMouseDZ::Mz' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setDistance
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_SetDistance final
{
public:
	float                                         D;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetDistance) == 0x000004, "Wrong alignment on FGearOrbitCamera_SetDistance");
static_assert(sizeof(FGearOrbitCamera_SetDistance) == 0x000004, "Wrong size on FGearOrbitCamera_SetDistance");
static_assert(offsetof(FGearOrbitCamera_SetDistance, D) == 0x000000, "Member 'FGearOrbitCamera_SetDistance::D' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setDriftMode
// 0x0001 (0x0001 - 0x0000)
struct FGearOrbitCamera_SetDriftMode final
{
public:
	bool                                          Dm;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetDriftMode) == 0x000001, "Wrong alignment on FGearOrbitCamera_SetDriftMode");
static_assert(sizeof(FGearOrbitCamera_SetDriftMode) == 0x000001, "Wrong size on FGearOrbitCamera_SetDriftMode");
static_assert(offsetof(FGearOrbitCamera_SetDriftMode, Dm) == 0x000000, "Member 'FGearOrbitCamera_SetDriftMode::Dm' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setFreeze
// 0x0001 (0x0001 - 0x0000)
struct FGearOrbitCamera_SetFreeze final
{
public:
	bool                                          F;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetFreeze) == 0x000001, "Wrong alignment on FGearOrbitCamera_SetFreeze");
static_assert(sizeof(FGearOrbitCamera_SetFreeze) == 0x000001, "Wrong size on FGearOrbitCamera_SetFreeze");
static_assert(offsetof(FGearOrbitCamera_SetFreeze, F) == 0x000000, "Member 'FGearOrbitCamera_SetFreeze::F' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setOrbitMode
// 0x0001 (0x0001 - 0x0000)
struct FGearOrbitCamera_SetOrbitMode final
{
public:
	bool                                          Orbit;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetOrbitMode) == 0x000001, "Wrong alignment on FGearOrbitCamera_SetOrbitMode");
static_assert(sizeof(FGearOrbitCamera_SetOrbitMode) == 0x000001, "Wrong size on FGearOrbitCamera_SetOrbitMode");
static_assert(offsetof(FGearOrbitCamera_SetOrbitMode, Orbit) == 0x000000, "Member 'FGearOrbitCamera_SetOrbitMode::Orbit' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setRotationOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_SetRotationOffset final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetRotationOffset) == 0x000004, "Wrong alignment on FGearOrbitCamera_SetRotationOffset");
static_assert(sizeof(FGearOrbitCamera_SetRotationOffset) == 0x000004, "Wrong size on FGearOrbitCamera_SetRotationOffset");
static_assert(offsetof(FGearOrbitCamera_SetRotationOffset, Angle) == 0x000000, "Member 'FGearOrbitCamera_SetRotationOffset::Angle' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setSpring
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_SetSpring final
{
public:
	float                                         S;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetSpring) == 0x000004, "Wrong alignment on FGearOrbitCamera_SetSpring");
static_assert(sizeof(FGearOrbitCamera_SetSpring) == 0x000004, "Wrong size on FGearOrbitCamera_SetSpring");
static_assert(offsetof(FGearOrbitCamera_SetSpring, S) == 0x000000, "Member 'FGearOrbitCamera_SetSpring::S' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setTargetZOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_SetTargetZOffset final
{
public:
	float                                         Z;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetTargetZOffset) == 0x000004, "Wrong alignment on FGearOrbitCamera_SetTargetZOffset");
static_assert(sizeof(FGearOrbitCamera_SetTargetZOffset) == 0x000004, "Wrong size on FGearOrbitCamera_SetTargetZOffset");
static_assert(offsetof(FGearOrbitCamera_SetTargetZOffset, Z) == 0x000000, "Member 'FGearOrbitCamera_SetTargetZOffset::Z' has a wrong offset!");

// Function FGearPlugin.FGearOrbitCamera.setTiltAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearOrbitCamera_SetTiltAngle final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearOrbitCamera_SetTiltAngle) == 0x000004, "Wrong alignment on FGearOrbitCamera_SetTiltAngle");
static_assert(sizeof(FGearOrbitCamera_SetTiltAngle) == 0x000004, "Wrong size on FGearOrbitCamera_SetTiltAngle");
static_assert(offsetof(FGearOrbitCamera_SetTiltAngle, T) == 0x000000, "Member 'FGearOrbitCamera_SetTiltAngle::T' has a wrong offset!");

// Function FGearPlugin.FGearReplication.clientReceiveState
// 0x0070 (0x0070 - 0x0000)
struct FGearReplication_ClientReceiveState final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rot;                                               // 0x0020(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vel;                                               // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Avel;                                              // 0x0058(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearReplication_ClientReceiveState) == 0x000010, "Wrong alignment on FGearReplication_ClientReceiveState");
static_assert(sizeof(FGearReplication_ClientReceiveState) == 0x000070, "Wrong size on FGearReplication_ClientReceiveState");
static_assert(offsetof(FGearReplication_ClientReceiveState, Time) == 0x000000, "Member 'FGearReplication_ClientReceiveState::Time' has a wrong offset!");
static_assert(offsetof(FGearReplication_ClientReceiveState, Pos) == 0x000008, "Member 'FGearReplication_ClientReceiveState::Pos' has a wrong offset!");
static_assert(offsetof(FGearReplication_ClientReceiveState, Rot) == 0x000020, "Member 'FGearReplication_ClientReceiveState::Rot' has a wrong offset!");
static_assert(offsetof(FGearReplication_ClientReceiveState, Vel) == 0x000040, "Member 'FGearReplication_ClientReceiveState::Vel' has a wrong offset!");
static_assert(offsetof(FGearReplication_ClientReceiveState, Avel) == 0x000058, "Member 'FGearReplication_ClientReceiveState::Avel' has a wrong offset!");

// Function FGearPlugin.FGearReplication.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FGearReplication_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearReplication_IsEnabled) == 0x000001, "Wrong alignment on FGearReplication_IsEnabled");
static_assert(sizeof(FGearReplication_IsEnabled) == 0x000001, "Wrong size on FGearReplication_IsEnabled");
static_assert(offsetof(FGearReplication_IsEnabled, ReturnValue) == 0x000000, "Member 'FGearReplication_IsEnabled::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearReplication.serverReceiveInputs
// 0x0010 (0x0010 - 0x0000)
struct FGearReplication_ServerReceiveInputs final
{
public:
	struct FGearInputStateBuffer                  Inputs;                                            // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearReplication_ServerReceiveInputs) == 0x000008, "Wrong alignment on FGearReplication_ServerReceiveInputs");
static_assert(sizeof(FGearReplication_ServerReceiveInputs) == 0x000010, "Wrong size on FGearReplication_ServerReceiveInputs");
static_assert(offsetof(FGearReplication_ServerReceiveInputs, Inputs) == 0x000000, "Member 'FGearReplication_ServerReceiveInputs::Inputs' has a wrong offset!");

// Function FGearPlugin.FGearReplication.serverReceiveState
// 0x0070 (0x0070 - 0x0000)
struct FGearReplication_ServerReceiveState final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  Rot;                                               // 0x0020(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Vel;                                               // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Avel;                                              // 0x0058(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearReplication_ServerReceiveState) == 0x000010, "Wrong alignment on FGearReplication_ServerReceiveState");
static_assert(sizeof(FGearReplication_ServerReceiveState) == 0x000070, "Wrong size on FGearReplication_ServerReceiveState");
static_assert(offsetof(FGearReplication_ServerReceiveState, Time) == 0x000000, "Member 'FGearReplication_ServerReceiveState::Time' has a wrong offset!");
static_assert(offsetof(FGearReplication_ServerReceiveState, Pos) == 0x000008, "Member 'FGearReplication_ServerReceiveState::Pos' has a wrong offset!");
static_assert(offsetof(FGearReplication_ServerReceiveState, Rot) == 0x000020, "Member 'FGearReplication_ServerReceiveState::Rot' has a wrong offset!");
static_assert(offsetof(FGearReplication_ServerReceiveState, Vel) == 0x000040, "Member 'FGearReplication_ServerReceiveState::Vel' has a wrong offset!");
static_assert(offsetof(FGearReplication_ServerReceiveState, Avel) == 0x000058, "Member 'FGearReplication_ServerReceiveState::Avel' has a wrong offset!");

// Function FGearPlugin.FGearRewindReplay.getProgressValue
// 0x0004 (0x0004 - 0x0000)
struct FGearRewindReplay_GetProgressValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearRewindReplay_GetProgressValue) == 0x000004, "Wrong alignment on FGearRewindReplay_GetProgressValue");
static_assert(sizeof(FGearRewindReplay_GetProgressValue) == 0x000004, "Wrong size on FGearRewindReplay_GetProgressValue");
static_assert(offsetof(FGearRewindReplay_GetProgressValue, ReturnValue) == 0x000000, "Member 'FGearRewindReplay_GetProgressValue::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearRewindReplay.getState
// 0x0001 (0x0001 - 0x0000)
struct FGearRewindReplay_GetState final
{
public:
	EFGearRewindReplayState                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearRewindReplay_GetState) == 0x000001, "Wrong alignment on FGearRewindReplay_GetState");
static_assert(sizeof(FGearRewindReplay_GetState) == 0x000001, "Wrong size on FGearRewindReplay_GetState");
static_assert(offsetof(FGearRewindReplay_GetState, ReturnValue) == 0x000000, "Member 'FGearRewindReplay_GetState::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearRewindReplay.replay
// 0x0001 (0x0001 - 0x0000)
struct FGearRewindReplay_Replay final
{
public:
	bool                                          ResetIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearRewindReplay_Replay) == 0x000001, "Wrong alignment on FGearRewindReplay_Replay");
static_assert(sizeof(FGearRewindReplay_Replay) == 0x000001, "Wrong size on FGearRewindReplay_Replay");
static_assert(offsetof(FGearRewindReplay_Replay, ResetIndex) == 0x000000, "Member 'FGearRewindReplay_Replay::ResetIndex' has a wrong offset!");

// Function FGearPlugin.FGearRewindReplay.rewind
// 0x0001 (0x0001 - 0x0000)
struct FGearRewindReplay_Rewind final
{
public:
	bool                                          ResetIndex;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearRewindReplay_Rewind) == 0x000001, "Wrong alignment on FGearRewindReplay_Rewind");
static_assert(sizeof(FGearRewindReplay_Rewind) == 0x000001, "Wrong size on FGearRewindReplay_Rewind");
static_assert(offsetof(FGearRewindReplay_Rewind, ResetIndex) == 0x000000, "Member 'FGearRewindReplay_Rewind::ResetIndex' has a wrong offset!");

// Function FGearPlugin.FGearRewindReplay.setReplayFrames
// 0x0004 (0x0004 - 0x0000)
struct FGearRewindReplay_SetReplayFrames final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearRewindReplay_SetReplayFrames) == 0x000004, "Wrong alignment on FGearRewindReplay_SetReplayFrames");
static_assert(sizeof(FGearRewindReplay_SetReplayFrames) == 0x000004, "Wrong size on FGearRewindReplay_SetReplayFrames");
static_assert(offsetof(FGearRewindReplay_SetReplayFrames, Count) == 0x000000, "Member 'FGearRewindReplay_SetReplayFrames::Count' has a wrong offset!");

// Function FGearPlugin.FGearSpline.getClosestParam
// 0x0020 (0x0020 - 0x0000)
struct FGearSpline_GetClosestParam final
{
public:
	struct FVector                                P;                                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearSpline_GetClosestParam) == 0x000008, "Wrong alignment on FGearSpline_GetClosestParam");
static_assert(sizeof(FGearSpline_GetClosestParam) == 0x000020, "Wrong size on FGearSpline_GetClosestParam");
static_assert(offsetof(FGearSpline_GetClosestParam, P) == 0x000000, "Member 'FGearSpline_GetClosestParam::P' has a wrong offset!");
static_assert(offsetof(FGearSpline_GetClosestParam, ReturnValue) == 0x000018, "Member 'FGearSpline_GetClosestParam::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearSpline.getDirection
// 0x0020 (0x0020 - 0x0000)
struct FGearSpline_GetDirection final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSpline_GetDirection) == 0x000008, "Wrong alignment on FGearSpline_GetDirection");
static_assert(sizeof(FGearSpline_GetDirection) == 0x000020, "Wrong size on FGearSpline_GetDirection");
static_assert(offsetof(FGearSpline_GetDirection, P) == 0x000000, "Member 'FGearSpline_GetDirection::P' has a wrong offset!");
static_assert(offsetof(FGearSpline_GetDirection, ReturnValue) == 0x000008, "Member 'FGearSpline_GetDirection::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearSpline.getPoint
// 0x0020 (0x0020 - 0x0000)
struct FGearSpline_GetPoint final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSpline_GetPoint) == 0x000008, "Wrong alignment on FGearSpline_GetPoint");
static_assert(sizeof(FGearSpline_GetPoint) == 0x000020, "Wrong size on FGearSpline_GetPoint");
static_assert(offsetof(FGearSpline_GetPoint, P) == 0x000000, "Member 'FGearSpline_GetPoint::P' has a wrong offset!");
static_assert(offsetof(FGearSpline_GetPoint, ReturnValue) == 0x000008, "Member 'FGearSpline_GetPoint::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearSpline.getSpline
// 0x0008 (0x0008 - 0x0000)
struct FGearSpline_GetSpline final
{
public:
	class USplineComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSpline_GetSpline) == 0x000008, "Wrong alignment on FGearSpline_GetSpline");
static_assert(sizeof(FGearSpline_GetSpline) == 0x000008, "Wrong size on FGearSpline_GetSpline");
static_assert(offsetof(FGearSpline_GetSpline, ReturnValue) == 0x000000, "Member 'FGearSpline_GetSpline::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearSpline.getTangent
// 0x0020 (0x0020 - 0x0000)
struct FGearSpline_GetTangent final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSpline_GetTangent) == 0x000008, "Wrong alignment on FGearSpline_GetTangent");
static_assert(sizeof(FGearSpline_GetTangent) == 0x000020, "Wrong size on FGearSpline_GetTangent");
static_assert(offsetof(FGearSpline_GetTangent, P) == 0x000000, "Member 'FGearSpline_GetTangent::P' has a wrong offset!");
static_assert(offsetof(FGearSpline_GetTangent, ReturnValue) == 0x000008, "Member 'FGearSpline_GetTangent::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearSpline.moveParam
// 0x0020 (0x0020 - 0x0000)
struct FGearSpline_MoveParam final
{
public:
	float                                         P;                                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSpline_MoveParam) == 0x000008, "Wrong alignment on FGearSpline_MoveParam");
static_assert(sizeof(FGearSpline_MoveParam) == 0x000020, "Wrong size on FGearSpline_MoveParam");
static_assert(offsetof(FGearSpline_MoveParam, P) == 0x000000, "Member 'FGearSpline_MoveParam::P' has a wrong offset!");
static_assert(offsetof(FGearSpline_MoveParam, Distance) == 0x000004, "Member 'FGearSpline_MoveParam::Distance' has a wrong offset!");
static_assert(offsetof(FGearSpline_MoveParam, ReturnValue) == 0x000008, "Member 'FGearSpline_MoveParam::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getBrakeAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetBrakeAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetBrakeAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetBrakeAxis");
static_assert(sizeof(FGearStandardInput_GetBrakeAxis) == 0x000008, "Wrong size on FGearStandardInput_GetBrakeAxis");
static_assert(offsetof(FGearStandardInput_GetBrakeAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetBrakeAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getBrakingDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetBrakingDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetBrakingDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_GetBrakingDeadzone");
static_assert(sizeof(FGearStandardInput_GetBrakingDeadzone) == 0x000004, "Wrong size on FGearStandardInput_GetBrakingDeadzone");
static_assert(offsetof(FGearStandardInput_GetBrakingDeadzone, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetBrakingDeadzone::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getBrakingRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetBrakingRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetBrakingRange) == 0x000004, "Wrong alignment on FGearStandardInput_GetBrakingRange");
static_assert(sizeof(FGearStandardInput_GetBrakingRange) == 0x000004, "Wrong size on FGearStandardInput_GetBrakingRange");
static_assert(offsetof(FGearStandardInput_GetBrakingRange, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetBrakingRange::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getBrakingSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetBrakingSensivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetBrakingSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_GetBrakingSensivity");
static_assert(sizeof(FGearStandardInput_GetBrakingSensivity) == 0x000004, "Wrong size on FGearStandardInput_GetBrakingSensivity");
static_assert(offsetof(FGearStandardInput_GetBrakingSensivity, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetBrakingSensivity::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getClutchAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetClutchAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetClutchAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetClutchAxis");
static_assert(sizeof(FGearStandardInput_GetClutchAxis) == 0x000008, "Wrong size on FGearStandardInput_GetClutchAxis");
static_assert(offsetof(FGearStandardInput_GetClutchAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetClutchAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getClutchDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetClutchDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetClutchDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_GetClutchDeadzone");
static_assert(sizeof(FGearStandardInput_GetClutchDeadzone) == 0x000004, "Wrong size on FGearStandardInput_GetClutchDeadzone");
static_assert(offsetof(FGearStandardInput_GetClutchDeadzone, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetClutchDeadzone::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getClutchRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetClutchRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetClutchRange) == 0x000004, "Wrong alignment on FGearStandardInput_GetClutchRange");
static_assert(sizeof(FGearStandardInput_GetClutchRange) == 0x000004, "Wrong size on FGearStandardInput_GetClutchRange");
static_assert(offsetof(FGearStandardInput_GetClutchRange, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetClutchRange::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getClutchSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetClutchSensivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetClutchSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_GetClutchSensivity");
static_assert(sizeof(FGearStandardInput_GetClutchSensivity) == 0x000004, "Wrong size on FGearStandardInput_GetClutchSensivity");
static_assert(offsetof(FGearStandardInput_GetClutchSensivity, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetClutchSensivity::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getCombinedAxis
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_GetCombinedAxis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetCombinedAxis) == 0x000001, "Wrong alignment on FGearStandardInput_GetCombinedAxis");
static_assert(sizeof(FGearStandardInput_GetCombinedAxis) == 0x000001, "Wrong size on FGearStandardInput_GetCombinedAxis");
static_assert(offsetof(FGearStandardInput_GetCombinedAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetCombinedAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getControllerType
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_GetControllerType final
{
public:
	EFGearControllerType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetControllerType) == 0x000001, "Wrong alignment on FGearStandardInput_GetControllerType");
static_assert(sizeof(FGearStandardInput_GetControllerType) == 0x000001, "Wrong size on FGearStandardInput_GetControllerType");
static_assert(offsetof(FGearStandardInput_GetControllerType, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetControllerType::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getHandbrakeAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetHandbrakeAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetHandbrakeAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetHandbrakeAxis");
static_assert(sizeof(FGearStandardInput_GetHandbrakeAxis) == 0x000008, "Wrong size on FGearStandardInput_GetHandbrakeAxis");
static_assert(offsetof(FGearStandardInput_GetHandbrakeAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetHandbrakeAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getHorizontalAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetHorizontalAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetHorizontalAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetHorizontalAxis");
static_assert(sizeof(FGearStandardInput_GetHorizontalAxis) == 0x000008, "Wrong size on FGearStandardInput_GetHorizontalAxis");
static_assert(offsetof(FGearStandardInput_GetHorizontalAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetHorizontalAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getLeftAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetLeftAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetLeftAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetLeftAxis");
static_assert(sizeof(FGearStandardInput_GetLeftAxis) == 0x000008, "Wrong size on FGearStandardInput_GetLeftAxis");
static_assert(offsetof(FGearStandardInput_GetLeftAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetLeftAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getRightAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetRightAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetRightAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetRightAxis");
static_assert(sizeof(FGearStandardInput_GetRightAxis) == 0x000008, "Wrong size on FGearStandardInput_GetRightAxis");
static_assert(offsetof(FGearStandardInput_GetRightAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetRightAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShift1Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShift1Axis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShift1Axis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShift1Axis");
static_assert(sizeof(FGearStandardInput_GetShift1Axis) == 0x000008, "Wrong size on FGearStandardInput_GetShift1Axis");
static_assert(offsetof(FGearStandardInput_GetShift1Axis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShift1Axis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShift2Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShift2Axis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShift2Axis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShift2Axis");
static_assert(sizeof(FGearStandardInput_GetShift2Axis) == 0x000008, "Wrong size on FGearStandardInput_GetShift2Axis");
static_assert(offsetof(FGearStandardInput_GetShift2Axis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShift2Axis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShift3Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShift3Axis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShift3Axis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShift3Axis");
static_assert(sizeof(FGearStandardInput_GetShift3Axis) == 0x000008, "Wrong size on FGearStandardInput_GetShift3Axis");
static_assert(offsetof(FGearStandardInput_GetShift3Axis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShift3Axis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShift4Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShift4Axis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShift4Axis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShift4Axis");
static_assert(sizeof(FGearStandardInput_GetShift4Axis) == 0x000008, "Wrong size on FGearStandardInput_GetShift4Axis");
static_assert(offsetof(FGearStandardInput_GetShift4Axis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShift4Axis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShift5Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShift5Axis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShift5Axis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShift5Axis");
static_assert(sizeof(FGearStandardInput_GetShift5Axis) == 0x000008, "Wrong size on FGearStandardInput_GetShift5Axis");
static_assert(offsetof(FGearStandardInput_GetShift5Axis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShift5Axis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShift6Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShift6Axis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShift6Axis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShift6Axis");
static_assert(sizeof(FGearStandardInput_GetShift6Axis) == 0x000008, "Wrong size on FGearStandardInput_GetShift6Axis");
static_assert(offsetof(FGearStandardInput_GetShift6Axis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShift6Axis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShiftAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShiftAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShiftAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShiftAxis");
static_assert(sizeof(FGearStandardInput_GetShiftAxis) == 0x000008, "Wrong size on FGearStandardInput_GetShiftAxis");
static_assert(offsetof(FGearStandardInput_GetShiftAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShiftAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShifterType
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_GetShifterType final
{
public:
	EFGearShifterType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShifterType) == 0x000001, "Wrong alignment on FGearStandardInput_GetShifterType");
static_assert(sizeof(FGearStandardInput_GetShifterType) == 0x000001, "Wrong size on FGearStandardInput_GetShifterType");
static_assert(offsetof(FGearStandardInput_GetShifterType, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShifterType::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getShiftRAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetShiftRAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetShiftRAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetShiftRAxis");
static_assert(sizeof(FGearStandardInput_GetShiftRAxis) == 0x000008, "Wrong size on FGearStandardInput_GetShiftRAxis");
static_assert(offsetof(FGearStandardInput_GetShiftRAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetShiftRAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteerDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetSteerDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteerDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_GetSteerDeadzone");
static_assert(sizeof(FGearStandardInput_GetSteerDeadzone) == 0x000004, "Wrong size on FGearStandardInput_GetSteerDeadzone");
static_assert(offsetof(FGearStandardInput_GetSteerDeadzone, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteerDeadzone::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteeringAssist
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetSteeringAssist final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteeringAssist) == 0x000004, "Wrong alignment on FGearStandardInput_GetSteeringAssist");
static_assert(sizeof(FGearStandardInput_GetSteeringAssist) == 0x000004, "Wrong size on FGearStandardInput_GetSteeringAssist");
static_assert(offsetof(FGearStandardInput_GetSteeringAssist, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteeringAssist::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteeringAssistThresholdAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetSteeringAssistThresholdAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteeringAssistThresholdAngle) == 0x000004, "Wrong alignment on FGearStandardInput_GetSteeringAssistThresholdAngle");
static_assert(sizeof(FGearStandardInput_GetSteeringAssistThresholdAngle) == 0x000004, "Wrong size on FGearStandardInput_GetSteeringAssistThresholdAngle");
static_assert(offsetof(FGearStandardInput_GetSteeringAssistThresholdAngle, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteeringAssistThresholdAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteerInputGravity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetSteerInputGravity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteerInputGravity) == 0x000004, "Wrong alignment on FGearStandardInput_GetSteerInputGravity");
static_assert(sizeof(FGearStandardInput_GetSteerInputGravity) == 0x000004, "Wrong size on FGearStandardInput_GetSteerInputGravity");
static_assert(offsetof(FGearStandardInput_GetSteerInputGravity, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteerInputGravity::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteerLimitCurve
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetSteerLimitCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteerLimitCurve) == 0x000008, "Wrong alignment on FGearStandardInput_GetSteerLimitCurve");
static_assert(sizeof(FGearStandardInput_GetSteerLimitCurve) == 0x000008, "Wrong size on FGearStandardInput_GetSteerLimitCurve");
static_assert(offsetof(FGearStandardInput_GetSteerLimitCurve, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteerLimitCurve::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteerRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetSteerRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteerRange) == 0x000004, "Wrong alignment on FGearStandardInput_GetSteerRange");
static_assert(sizeof(FGearStandardInput_GetSteerRange) == 0x000004, "Wrong size on FGearStandardInput_GetSteerRange");
static_assert(offsetof(FGearStandardInput_GetSteerRange, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteerRange::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteerSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetSteerSensivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteerSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_GetSteerSensivity");
static_assert(sizeof(FGearStandardInput_GetSteerSensivity) == 0x000004, "Wrong size on FGearStandardInput_GetSteerSensivity");
static_assert(offsetof(FGearStandardInput_GetSteerSensivity, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteerSensivity::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getSteerSpeedCurve
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetSteerSpeedCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetSteerSpeedCurve) == 0x000008, "Wrong alignment on FGearStandardInput_GetSteerSpeedCurve");
static_assert(sizeof(FGearStandardInput_GetSteerSpeedCurve) == 0x000008, "Wrong size on FGearStandardInput_GetSteerSpeedCurve");
static_assert(offsetof(FGearStandardInput_GetSteerSpeedCurve, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetSteerSpeedCurve::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getThrottleAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetThrottleAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetThrottleAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetThrottleAxis");
static_assert(sizeof(FGearStandardInput_GetThrottleAxis) == 0x000008, "Wrong size on FGearStandardInput_GetThrottleAxis");
static_assert(offsetof(FGearStandardInput_GetThrottleAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetThrottleAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getThrottleDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetThrottleDeadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetThrottleDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_GetThrottleDeadzone");
static_assert(sizeof(FGearStandardInput_GetThrottleDeadzone) == 0x000004, "Wrong size on FGearStandardInput_GetThrottleDeadzone");
static_assert(offsetof(FGearStandardInput_GetThrottleDeadzone, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetThrottleDeadzone::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getThrottleRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetThrottleRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetThrottleRange) == 0x000004, "Wrong alignment on FGearStandardInput_GetThrottleRange");
static_assert(sizeof(FGearStandardInput_GetThrottleRange) == 0x000004, "Wrong size on FGearStandardInput_GetThrottleRange");
static_assert(offsetof(FGearStandardInput_GetThrottleRange, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetThrottleRange::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getThrottleSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_GetThrottleSensivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetThrottleSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_GetThrottleSensivity");
static_assert(sizeof(FGearStandardInput_GetThrottleSensivity) == 0x000004, "Wrong size on FGearStandardInput_GetThrottleSensivity");
static_assert(offsetof(FGearStandardInput_GetThrottleSensivity, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetThrottleSensivity::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.getVerticalAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_GetVerticalAxis final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_GetVerticalAxis) == 0x000004, "Wrong alignment on FGearStandardInput_GetVerticalAxis");
static_assert(sizeof(FGearStandardInput_GetVerticalAxis) == 0x000008, "Wrong size on FGearStandardInput_GetVerticalAxis");
static_assert(offsetof(FGearStandardInput_GetVerticalAxis, ReturnValue) == 0x000000, "Member 'FGearStandardInput_GetVerticalAxis::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_IsEnabled) == 0x000001, "Wrong alignment on FGearStandardInput_IsEnabled");
static_assert(sizeof(FGearStandardInput_IsEnabled) == 0x000001, "Wrong size on FGearStandardInput_IsEnabled");
static_assert(offsetof(FGearStandardInput_IsEnabled, ReturnValue) == 0x000000, "Member 'FGearStandardInput_IsEnabled::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.isSteeringAssistActive
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_IsSteeringAssistActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_IsSteeringAssistActive) == 0x000001, "Wrong alignment on FGearStandardInput_IsSteeringAssistActive");
static_assert(sizeof(FGearStandardInput_IsSteeringAssistActive) == 0x000001, "Wrong size on FGearStandardInput_IsSteeringAssistActive");
static_assert(offsetof(FGearStandardInput_IsSteeringAssistActive, ReturnValue) == 0x000000, "Member 'FGearStandardInput_IsSteeringAssistActive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setBrakeAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetBrakeAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetBrakeAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetBrakeAxis");
static_assert(sizeof(FGearStandardInput_SetBrakeAxis) == 0x000008, "Wrong size on FGearStandardInput_SetBrakeAxis");
static_assert(offsetof(FGearStandardInput_SetBrakeAxis, S) == 0x000000, "Member 'FGearStandardInput_SetBrakeAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setBrakingDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetBrakingDeadzone final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetBrakingDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_SetBrakingDeadzone");
static_assert(sizeof(FGearStandardInput_SetBrakingDeadzone) == 0x000004, "Wrong size on FGearStandardInput_SetBrakingDeadzone");
static_assert(offsetof(FGearStandardInput_SetBrakingDeadzone, F) == 0x000000, "Member 'FGearStandardInput_SetBrakingDeadzone::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setBrakingRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetBrakingRange final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetBrakingRange) == 0x000004, "Wrong alignment on FGearStandardInput_SetBrakingRange");
static_assert(sizeof(FGearStandardInput_SetBrakingRange) == 0x000004, "Wrong size on FGearStandardInput_SetBrakingRange");
static_assert(offsetof(FGearStandardInput_SetBrakingRange, F) == 0x000000, "Member 'FGearStandardInput_SetBrakingRange::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setBrakingSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetBrakingSensivity final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetBrakingSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_SetBrakingSensivity");
static_assert(sizeof(FGearStandardInput_SetBrakingSensivity) == 0x000004, "Wrong size on FGearStandardInput_SetBrakingSensivity");
static_assert(offsetof(FGearStandardInput_SetBrakingSensivity, F) == 0x000000, "Member 'FGearStandardInput_SetBrakingSensivity::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setClutchAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetClutchAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetClutchAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetClutchAxis");
static_assert(sizeof(FGearStandardInput_SetClutchAxis) == 0x000008, "Wrong size on FGearStandardInput_SetClutchAxis");
static_assert(offsetof(FGearStandardInput_SetClutchAxis, S) == 0x000000, "Member 'FGearStandardInput_SetClutchAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setClutchDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetClutchDeadzone final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetClutchDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_SetClutchDeadzone");
static_assert(sizeof(FGearStandardInput_SetClutchDeadzone) == 0x000004, "Wrong size on FGearStandardInput_SetClutchDeadzone");
static_assert(offsetof(FGearStandardInput_SetClutchDeadzone, F) == 0x000000, "Member 'FGearStandardInput_SetClutchDeadzone::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setClutchRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetClutchRange final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetClutchRange) == 0x000004, "Wrong alignment on FGearStandardInput_SetClutchRange");
static_assert(sizeof(FGearStandardInput_SetClutchRange) == 0x000004, "Wrong size on FGearStandardInput_SetClutchRange");
static_assert(offsetof(FGearStandardInput_SetClutchRange, F) == 0x000000, "Member 'FGearStandardInput_SetClutchRange::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setClutchSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetClutchSensivity final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetClutchSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_SetClutchSensivity");
static_assert(sizeof(FGearStandardInput_SetClutchSensivity) == 0x000004, "Wrong size on FGearStandardInput_SetClutchSensivity");
static_assert(offsetof(FGearStandardInput_SetClutchSensivity, F) == 0x000000, "Member 'FGearStandardInput_SetClutchSensivity::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setCombinedAxis
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_SetCombinedAxis final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetCombinedAxis) == 0x000001, "Wrong alignment on FGearStandardInput_SetCombinedAxis");
static_assert(sizeof(FGearStandardInput_SetCombinedAxis) == 0x000001, "Wrong size on FGearStandardInput_SetCombinedAxis");
static_assert(offsetof(FGearStandardInput_SetCombinedAxis, B) == 0x000000, "Member 'FGearStandardInput_SetCombinedAxis::B' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setControllerType
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_SetControllerType final
{
public:
	EFGearControllerType                          Ct;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetControllerType) == 0x000001, "Wrong alignment on FGearStandardInput_SetControllerType");
static_assert(sizeof(FGearStandardInput_SetControllerType) == 0x000001, "Wrong size on FGearStandardInput_SetControllerType");
static_assert(offsetof(FGearStandardInput_SetControllerType, Ct) == 0x000000, "Member 'FGearStandardInput_SetControllerType::Ct' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.SetEnabled
// 0x0002 (0x0002 - 0x0000)
struct FGearStandardInput_SetEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetInputs;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetEnabled) == 0x000001, "Wrong alignment on FGearStandardInput_SetEnabled");
static_assert(sizeof(FGearStandardInput_SetEnabled) == 0x000002, "Wrong size on FGearStandardInput_SetEnabled");
static_assert(offsetof(FGearStandardInput_SetEnabled, Enable) == 0x000000, "Member 'FGearStandardInput_SetEnabled::Enable' has a wrong offset!");
static_assert(offsetof(FGearStandardInput_SetEnabled, ResetInputs) == 0x000001, "Member 'FGearStandardInput_SetEnabled::ResetInputs' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setHandbrakeAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetHandbrakeAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetHandbrakeAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetHandbrakeAxis");
static_assert(sizeof(FGearStandardInput_SetHandbrakeAxis) == 0x000008, "Wrong size on FGearStandardInput_SetHandbrakeAxis");
static_assert(offsetof(FGearStandardInput_SetHandbrakeAxis, S) == 0x000000, "Member 'FGearStandardInput_SetHandbrakeAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setHorizontalAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetHorizontalAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetHorizontalAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetHorizontalAxis");
static_assert(sizeof(FGearStandardInput_SetHorizontalAxis) == 0x000008, "Wrong size on FGearStandardInput_SetHorizontalAxis");
static_assert(offsetof(FGearStandardInput_SetHorizontalAxis, S) == 0x000000, "Member 'FGearStandardInput_SetHorizontalAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setInputs
// 0x0018 (0x0018 - 0x0000)
struct FGearStandardInput_SetInputs final
{
public:
	float                                         Throttle;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brake;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steer;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Clutch;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gear;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hb;                                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearStandardInput_SetInputs) == 0x000004, "Wrong alignment on FGearStandardInput_SetInputs");
static_assert(sizeof(FGearStandardInput_SetInputs) == 0x000018, "Wrong size on FGearStandardInput_SetInputs");
static_assert(offsetof(FGearStandardInput_SetInputs, Throttle) == 0x000000, "Member 'FGearStandardInput_SetInputs::Throttle' has a wrong offset!");
static_assert(offsetof(FGearStandardInput_SetInputs, Brake) == 0x000004, "Member 'FGearStandardInput_SetInputs::Brake' has a wrong offset!");
static_assert(offsetof(FGearStandardInput_SetInputs, Steer) == 0x000008, "Member 'FGearStandardInput_SetInputs::Steer' has a wrong offset!");
static_assert(offsetof(FGearStandardInput_SetInputs, Clutch) == 0x00000C, "Member 'FGearStandardInput_SetInputs::Clutch' has a wrong offset!");
static_assert(offsetof(FGearStandardInput_SetInputs, Gear) == 0x000010, "Member 'FGearStandardInput_SetInputs::Gear' has a wrong offset!");
static_assert(offsetof(FGearStandardInput_SetInputs, Hb) == 0x000014, "Member 'FGearStandardInput_SetInputs::Hb' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setLeftAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetLeftAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetLeftAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetLeftAxis");
static_assert(sizeof(FGearStandardInput_SetLeftAxis) == 0x000008, "Wrong size on FGearStandardInput_SetLeftAxis");
static_assert(offsetof(FGearStandardInput_SetLeftAxis, S) == 0x000000, "Member 'FGearStandardInput_SetLeftAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setReadInputs
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_SetReadInputs final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetReadInputs) == 0x000001, "Wrong alignment on FGearStandardInput_SetReadInputs");
static_assert(sizeof(FGearStandardInput_SetReadInputs) == 0x000001, "Wrong size on FGearStandardInput_SetReadInputs");
static_assert(offsetof(FGearStandardInput_SetReadInputs, B) == 0x000000, "Member 'FGearStandardInput_SetReadInputs::B' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setRightAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetRightAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetRightAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetRightAxis");
static_assert(sizeof(FGearStandardInput_SetRightAxis) == 0x000008, "Wrong size on FGearStandardInput_SetRightAxis");
static_assert(offsetof(FGearStandardInput_SetRightAxis, S) == 0x000000, "Member 'FGearStandardInput_SetRightAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShift1Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShift1Axis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShift1Axis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShift1Axis");
static_assert(sizeof(FGearStandardInput_SetShift1Axis) == 0x000008, "Wrong size on FGearStandardInput_SetShift1Axis");
static_assert(offsetof(FGearStandardInput_SetShift1Axis, S) == 0x000000, "Member 'FGearStandardInput_SetShift1Axis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShift2Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShift2Axis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShift2Axis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShift2Axis");
static_assert(sizeof(FGearStandardInput_SetShift2Axis) == 0x000008, "Wrong size on FGearStandardInput_SetShift2Axis");
static_assert(offsetof(FGearStandardInput_SetShift2Axis, S) == 0x000000, "Member 'FGearStandardInput_SetShift2Axis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShift3Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShift3Axis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShift3Axis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShift3Axis");
static_assert(sizeof(FGearStandardInput_SetShift3Axis) == 0x000008, "Wrong size on FGearStandardInput_SetShift3Axis");
static_assert(offsetof(FGearStandardInput_SetShift3Axis, S) == 0x000000, "Member 'FGearStandardInput_SetShift3Axis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShift4Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShift4Axis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShift4Axis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShift4Axis");
static_assert(sizeof(FGearStandardInput_SetShift4Axis) == 0x000008, "Wrong size on FGearStandardInput_SetShift4Axis");
static_assert(offsetof(FGearStandardInput_SetShift4Axis, S) == 0x000000, "Member 'FGearStandardInput_SetShift4Axis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShift5Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShift5Axis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShift5Axis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShift5Axis");
static_assert(sizeof(FGearStandardInput_SetShift5Axis) == 0x000008, "Wrong size on FGearStandardInput_SetShift5Axis");
static_assert(offsetof(FGearStandardInput_SetShift5Axis, S) == 0x000000, "Member 'FGearStandardInput_SetShift5Axis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShift6Axis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShift6Axis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShift6Axis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShift6Axis");
static_assert(sizeof(FGearStandardInput_SetShift6Axis) == 0x000008, "Wrong size on FGearStandardInput_SetShift6Axis");
static_assert(offsetof(FGearStandardInput_SetShift6Axis, S) == 0x000000, "Member 'FGearStandardInput_SetShift6Axis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShiftAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShiftAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShiftAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShiftAxis");
static_assert(sizeof(FGearStandardInput_SetShiftAxis) == 0x000008, "Wrong size on FGearStandardInput_SetShiftAxis");
static_assert(offsetof(FGearStandardInput_SetShiftAxis, S) == 0x000000, "Member 'FGearStandardInput_SetShiftAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShifterType
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_SetShifterType final
{
public:
	EFGearShifterType                             St;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShifterType) == 0x000001, "Wrong alignment on FGearStandardInput_SetShifterType");
static_assert(sizeof(FGearStandardInput_SetShifterType) == 0x000001, "Wrong size on FGearStandardInput_SetShifterType");
static_assert(offsetof(FGearStandardInput_SetShifterType, St) == 0x000000, "Member 'FGearStandardInput_SetShifterType::St' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setShiftRAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetShiftRAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetShiftRAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetShiftRAxis");
static_assert(sizeof(FGearStandardInput_SetShiftRAxis) == 0x000008, "Wrong size on FGearStandardInput_SetShiftRAxis");
static_assert(offsetof(FGearStandardInput_SetShiftRAxis, S) == 0x000000, "Member 'FGearStandardInput_SetShiftRAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setStartGridMode
// 0x0001 (0x0001 - 0x0000)
struct FGearStandardInput_SetStartGridMode final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetStartGridMode) == 0x000001, "Wrong alignment on FGearStandardInput_SetStartGridMode");
static_assert(sizeof(FGearStandardInput_SetStartGridMode) == 0x000001, "Wrong size on FGearStandardInput_SetStartGridMode");
static_assert(offsetof(FGearStandardInput_SetStartGridMode, B) == 0x000000, "Member 'FGearStandardInput_SetStartGridMode::B' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setSteerDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetSteerDeadzone final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetSteerDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_SetSteerDeadzone");
static_assert(sizeof(FGearStandardInput_SetSteerDeadzone) == 0x000004, "Wrong size on FGearStandardInput_SetSteerDeadzone");
static_assert(offsetof(FGearStandardInput_SetSteerDeadzone, F) == 0x000000, "Member 'FGearStandardInput_SetSteerDeadzone::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setSteeringAssist
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetSteeringAssist final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetSteeringAssist) == 0x000004, "Wrong alignment on FGearStandardInput_SetSteeringAssist");
static_assert(sizeof(FGearStandardInput_SetSteeringAssist) == 0x000004, "Wrong size on FGearStandardInput_SetSteeringAssist");
static_assert(offsetof(FGearStandardInput_SetSteeringAssist, F) == 0x000000, "Member 'FGearStandardInput_SetSteeringAssist::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setSteeringAssistThresholdAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetSteeringAssistThresholdAngle final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetSteeringAssistThresholdAngle) == 0x000004, "Wrong alignment on FGearStandardInput_SetSteeringAssistThresholdAngle");
static_assert(sizeof(FGearStandardInput_SetSteeringAssistThresholdAngle) == 0x000004, "Wrong size on FGearStandardInput_SetSteeringAssistThresholdAngle");
static_assert(offsetof(FGearStandardInput_SetSteeringAssistThresholdAngle, F) == 0x000000, "Member 'FGearStandardInput_SetSteeringAssistThresholdAngle::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setSteerInputGravity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetSteerInputGravity final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetSteerInputGravity) == 0x000004, "Wrong alignment on FGearStandardInput_SetSteerInputGravity");
static_assert(sizeof(FGearStandardInput_SetSteerInputGravity) == 0x000004, "Wrong size on FGearStandardInput_SetSteerInputGravity");
static_assert(offsetof(FGearStandardInput_SetSteerInputGravity, F) == 0x000000, "Member 'FGearStandardInput_SetSteerInputGravity::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setSteerRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetSteerRange final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetSteerRange) == 0x000004, "Wrong alignment on FGearStandardInput_SetSteerRange");
static_assert(sizeof(FGearStandardInput_SetSteerRange) == 0x000004, "Wrong size on FGearStandardInput_SetSteerRange");
static_assert(offsetof(FGearStandardInput_SetSteerRange, F) == 0x000000, "Member 'FGearStandardInput_SetSteerRange::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setSteerSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetSteerSensivity final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetSteerSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_SetSteerSensivity");
static_assert(sizeof(FGearStandardInput_SetSteerSensivity) == 0x000004, "Wrong size on FGearStandardInput_SetSteerSensivity");
static_assert(offsetof(FGearStandardInput_SetSteerSensivity, F) == 0x000000, "Member 'FGearStandardInput_SetSteerSensivity::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setThrottleAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetThrottleAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetThrottleAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetThrottleAxis");
static_assert(sizeof(FGearStandardInput_SetThrottleAxis) == 0x000008, "Wrong size on FGearStandardInput_SetThrottleAxis");
static_assert(offsetof(FGearStandardInput_SetThrottleAxis, S) == 0x000000, "Member 'FGearStandardInput_SetThrottleAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setThrottleDeadzone
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetThrottleDeadzone final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetThrottleDeadzone) == 0x000004, "Wrong alignment on FGearStandardInput_SetThrottleDeadzone");
static_assert(sizeof(FGearStandardInput_SetThrottleDeadzone) == 0x000004, "Wrong size on FGearStandardInput_SetThrottleDeadzone");
static_assert(offsetof(FGearStandardInput_SetThrottleDeadzone, F) == 0x000000, "Member 'FGearStandardInput_SetThrottleDeadzone::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setThrottleRange
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetThrottleRange final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetThrottleRange) == 0x000004, "Wrong alignment on FGearStandardInput_SetThrottleRange");
static_assert(sizeof(FGearStandardInput_SetThrottleRange) == 0x000004, "Wrong size on FGearStandardInput_SetThrottleRange");
static_assert(offsetof(FGearStandardInput_SetThrottleRange, F) == 0x000000, "Member 'FGearStandardInput_SetThrottleRange::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setThrottleSensivity
// 0x0004 (0x0004 - 0x0000)
struct FGearStandardInput_SetThrottleSensivity final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetThrottleSensivity) == 0x000004, "Wrong alignment on FGearStandardInput_SetThrottleSensivity");
static_assert(sizeof(FGearStandardInput_SetThrottleSensivity) == 0x000004, "Wrong size on FGearStandardInput_SetThrottleSensivity");
static_assert(offsetof(FGearStandardInput_SetThrottleSensivity, F) == 0x000000, "Member 'FGearStandardInput_SetThrottleSensivity::F' has a wrong offset!");

// Function FGearPlugin.FGearStandardInput.setVerticalAxis
// 0x0008 (0x0008 - 0x0000)
struct FGearStandardInput_SetVerticalAxis final
{
public:
	class FName                                   S;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearStandardInput_SetVerticalAxis) == 0x000004, "Wrong alignment on FGearStandardInput_SetVerticalAxis");
static_assert(sizeof(FGearStandardInput_SetVerticalAxis) == 0x000008, "Wrong size on FGearStandardInput_SetVerticalAxis");
static_assert(offsetof(FGearStandardInput_SetVerticalAxis, S) == 0x000000, "Member 'FGearStandardInput_SetVerticalAxis::S' has a wrong offset!");

// Function FGearPlugin.FGearSuspensionConstraint.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct FGearSuspensionConstraint_SetEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSuspensionConstraint_SetEnabled) == 0x000001, "Wrong alignment on FGearSuspensionConstraint_SetEnabled");
static_assert(sizeof(FGearSuspensionConstraint_SetEnabled) == 0x000001, "Wrong size on FGearSuspensionConstraint_SetEnabled");
static_assert(offsetof(FGearSuspensionConstraint_SetEnabled, Enable) == 0x000000, "Member 'FGearSuspensionConstraint_SetEnabled::Enable' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.gearDown
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_GearDown final
{
public:
	bool                                          SkipN;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GearDown) == 0x000001, "Wrong alignment on FGearTransmission_GearDown");
static_assert(sizeof(FGearTransmission_GearDown) == 0x000001, "Wrong size on FGearTransmission_GearDown");
static_assert(offsetof(FGearTransmission_GearDown, SkipN) == 0x000000, "Member 'FGearTransmission_GearDown::SkipN' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.gearUp
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_GearUp final
{
public:
	bool                                          SkipN;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GearUp) == 0x000001, "Wrong alignment on FGearTransmission_GearUp");
static_assert(sizeof(FGearTransmission_GearUp) == 0x000001, "Wrong size on FGearTransmission_GearUp");
static_assert(offsetof(FGearTransmission_GearUp, SkipN) == 0x000000, "Member 'FGearTransmission_GearUp::SkipN' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getChangeTime
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetChangeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetChangeTime) == 0x000004, "Wrong alignment on FGearTransmission_GetChangeTime");
static_assert(sizeof(FGearTransmission_GetChangeTime) == 0x000004, "Wrong size on FGearTransmission_GetChangeTime");
static_assert(offsetof(FGearTransmission_GetChangeTime, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetChangeTime::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getClutchPower
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetClutchPower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetClutchPower) == 0x000004, "Wrong alignment on FGearTransmission_GetClutchPower");
static_assert(sizeof(FGearTransmission_GetClutchPower) == 0x000004, "Wrong size on FGearTransmission_GetClutchPower");
static_assert(offsetof(FGearTransmission_GetClutchPower, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetClutchPower::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getClutchScale
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetClutchScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetClutchScale) == 0x000004, "Wrong alignment on FGearTransmission_GetClutchScale");
static_assert(sizeof(FGearTransmission_GetClutchScale) == 0x000004, "Wrong size on FGearTransmission_GetClutchScale");
static_assert(offsetof(FGearTransmission_GetClutchScale, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetClutchScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getClutchTime
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetClutchTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetClutchTime) == 0x000004, "Wrong alignment on FGearTransmission_GetClutchTime");
static_assert(sizeof(FGearTransmission_GetClutchTime) == 0x000004, "Wrong size on FGearTransmission_GetClutchTime");
static_assert(offsetof(FGearTransmission_GetClutchTime, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetClutchTime::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getCluthEngagementCurve
// 0x0008 (0x0008 - 0x0000)
struct FGearTransmission_GetCluthEngagementCurve final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetCluthEngagementCurve) == 0x000008, "Wrong alignment on FGearTransmission_GetCluthEngagementCurve");
static_assert(sizeof(FGearTransmission_GetCluthEngagementCurve) == 0x000008, "Wrong size on FGearTransmission_GetCluthEngagementCurve");
static_assert(offsetof(FGearTransmission_GetCluthEngagementCurve, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetCluthEngagementCurve::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getCurGear
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetCurGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetCurGear) == 0x000004, "Wrong alignment on FGearTransmission_GetCurGear");
static_assert(sizeof(FGearTransmission_GetCurGear) == 0x000004, "Wrong size on FGearTransmission_GetCurGear");
static_assert(offsetof(FGearTransmission_GetCurGear, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetCurGear::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getFinalGearRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetFinalGearRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetFinalGearRatio) == 0x000004, "Wrong alignment on FGearTransmission_GetFinalGearRatio");
static_assert(sizeof(FGearTransmission_GetFinalGearRatio) == 0x000004, "Wrong size on FGearTransmission_GetFinalGearRatio");
static_assert(offsetof(FGearTransmission_GetFinalGearRatio, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetFinalGearRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getGearCount
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetGearCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetGearCount) == 0x000004, "Wrong alignment on FGearTransmission_GetGearCount");
static_assert(sizeof(FGearTransmission_GetGearCount) == 0x000004, "Wrong size on FGearTransmission_GetGearCount");
static_assert(offsetof(FGearTransmission_GetGearCount, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetGearCount::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getGearDownRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetGearDownRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetGearDownRatio) == 0x000004, "Wrong alignment on FGearTransmission_GetGearDownRatio");
static_assert(sizeof(FGearTransmission_GetGearDownRatio) == 0x000004, "Wrong size on FGearTransmission_GetGearDownRatio");
static_assert(offsetof(FGearTransmission_GetGearDownRatio, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetGearDownRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getGearMaxSpeed
// 0x0008 (0x0008 - 0x0000)
struct FGearTransmission_GetGearMaxSpeed final
{
public:
	int32                                         Gear;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetGearMaxSpeed) == 0x000004, "Wrong alignment on FGearTransmission_GetGearMaxSpeed");
static_assert(sizeof(FGearTransmission_GetGearMaxSpeed) == 0x000008, "Wrong size on FGearTransmission_GetGearMaxSpeed");
static_assert(offsetof(FGearTransmission_GetGearMaxSpeed, Gear) == 0x000000, "Member 'FGearTransmission_GetGearMaxSpeed::Gear' has a wrong offset!");
static_assert(offsetof(FGearTransmission_GetGearMaxSpeed, ReturnValue) == 0x000004, "Member 'FGearTransmission_GetGearMaxSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getGearRatio
// 0x0008 (0x0008 - 0x0000)
struct FGearTransmission_GetGearRatio final
{
public:
	int32                                         Gear;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetGearRatio) == 0x000004, "Wrong alignment on FGearTransmission_GetGearRatio");
static_assert(sizeof(FGearTransmission_GetGearRatio) == 0x000008, "Wrong size on FGearTransmission_GetGearRatio");
static_assert(offsetof(FGearTransmission_GetGearRatio, Gear) == 0x000000, "Member 'FGearTransmission_GetGearRatio::Gear' has a wrong offset!");
static_assert(offsetof(FGearTransmission_GetGearRatio, ReturnValue) == 0x000004, "Member 'FGearTransmission_GetGearRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getGearUpRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetGearUpRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetGearUpRatio) == 0x000004, "Wrong alignment on FGearTransmission_GetGearUpRatio");
static_assert(sizeof(FGearTransmission_GetGearUpRatio) == 0x000004, "Wrong size on FGearTransmission_GetGearUpRatio");
static_assert(offsetof(FGearTransmission_GetGearUpRatio, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetGearUpRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getMaxGear
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetMaxGear final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetMaxGear) == 0x000004, "Wrong alignment on FGearTransmission_GetMaxGear");
static_assert(sizeof(FGearTransmission_GetMaxGear) == 0x000004, "Wrong size on FGearTransmission_GetMaxGear");
static_assert(offsetof(FGearTransmission_GetMaxGear, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetMaxGear::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getMaxSpeeds
// 0x0010 (0x0010 - 0x0000)
struct FGearTransmission_GetMaxSpeeds final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetMaxSpeeds) == 0x000008, "Wrong alignment on FGearTransmission_GetMaxSpeeds");
static_assert(sizeof(FGearTransmission_GetMaxSpeeds) == 0x000010, "Wrong size on FGearTransmission_GetMaxSpeeds");
static_assert(offsetof(FGearTransmission_GetMaxSpeeds, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetMaxSpeeds::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.getTransmissionRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_GetTransmissionRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_GetTransmissionRatio) == 0x000004, "Wrong alignment on FGearTransmission_GetTransmissionRatio");
static_assert(sizeof(FGearTransmission_GetTransmissionRatio) == 0x000004, "Wrong size on FGearTransmission_GetTransmissionRatio");
static_assert(offsetof(FGearTransmission_GetTransmissionRatio, ReturnValue) == 0x000000, "Member 'FGearTransmission_GetTransmissionRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.isAutoChange
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_IsAutoChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_IsAutoChange) == 0x000001, "Wrong alignment on FGearTransmission_IsAutoChange");
static_assert(sizeof(FGearTransmission_IsAutoChange) == 0x000001, "Wrong size on FGearTransmission_IsAutoChange");
static_assert(offsetof(FGearTransmission_IsAutoChange, ReturnValue) == 0x000000, "Member 'FGearTransmission_IsAutoChange::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.isAutoClutch
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_IsAutoClutch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_IsAutoClutch) == 0x000001, "Wrong alignment on FGearTransmission_IsAutoClutch");
static_assert(sizeof(FGearTransmission_IsAutoClutch) == 0x000001, "Wrong size on FGearTransmission_IsAutoClutch");
static_assert(offsetof(FGearTransmission_IsAutoClutch, ReturnValue) == 0x000000, "Member 'FGearTransmission_IsAutoClutch::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.isAutoReverse
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_IsAutoReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_IsAutoReverse) == 0x000001, "Wrong alignment on FGearTransmission_IsAutoReverse");
static_assert(sizeof(FGearTransmission_IsAutoReverse) == 0x000001, "Wrong size on FGearTransmission_IsAutoReverse");
static_assert(offsetof(FGearTransmission_IsAutoReverse, ReturnValue) == 0x000000, "Member 'FGearTransmission_IsAutoReverse::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.isChanging
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_IsChanging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_IsChanging) == 0x000001, "Wrong alignment on FGearTransmission_IsChanging");
static_assert(sizeof(FGearTransmission_IsChanging) == 0x000001, "Wrong size on FGearTransmission_IsChanging");
static_assert(offsetof(FGearTransmission_IsChanging, ReturnValue) == 0x000000, "Member 'FGearTransmission_IsChanging::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setAutoChange
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_SetAutoChange final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetAutoChange) == 0x000001, "Wrong alignment on FGearTransmission_SetAutoChange");
static_assert(sizeof(FGearTransmission_SetAutoChange) == 0x000001, "Wrong size on FGearTransmission_SetAutoChange");
static_assert(offsetof(FGearTransmission_SetAutoChange, B) == 0x000000, "Member 'FGearTransmission_SetAutoChange::B' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setAutoClutch
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_SetAutoClutch final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetAutoClutch) == 0x000001, "Wrong alignment on FGearTransmission_SetAutoClutch");
static_assert(sizeof(FGearTransmission_SetAutoClutch) == 0x000001, "Wrong size on FGearTransmission_SetAutoClutch");
static_assert(offsetof(FGearTransmission_SetAutoClutch, B) == 0x000000, "Member 'FGearTransmission_SetAutoClutch::B' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setAutoReverse
// 0x0001 (0x0001 - 0x0000)
struct FGearTransmission_SetAutoReverse final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetAutoReverse) == 0x000001, "Wrong alignment on FGearTransmission_SetAutoReverse");
static_assert(sizeof(FGearTransmission_SetAutoReverse) == 0x000001, "Wrong size on FGearTransmission_SetAutoReverse");
static_assert(offsetof(FGearTransmission_SetAutoReverse, B) == 0x000000, "Member 'FGearTransmission_SetAutoReverse::B' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setChangeTime
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetChangeTime final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetChangeTime) == 0x000004, "Wrong alignment on FGearTransmission_SetChangeTime");
static_assert(sizeof(FGearTransmission_SetChangeTime) == 0x000004, "Wrong size on FGearTransmission_SetChangeTime");
static_assert(offsetof(FGearTransmission_SetChangeTime, T) == 0x000000, "Member 'FGearTransmission_SetChangeTime::T' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setClutchScale
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetClutchScale final
{
public:
	float                                         Cs;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetClutchScale) == 0x000004, "Wrong alignment on FGearTransmission_SetClutchScale");
static_assert(sizeof(FGearTransmission_SetClutchScale) == 0x000004, "Wrong size on FGearTransmission_SetClutchScale");
static_assert(offsetof(FGearTransmission_SetClutchScale, Cs) == 0x000000, "Member 'FGearTransmission_SetClutchScale::Cs' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setClutchState
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetClutchState final
{
public:
	float                                         Cs;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetClutchState) == 0x000004, "Wrong alignment on FGearTransmission_SetClutchState");
static_assert(sizeof(FGearTransmission_SetClutchState) == 0x000004, "Wrong size on FGearTransmission_SetClutchState");
static_assert(offsetof(FGearTransmission_SetClutchState, Cs) == 0x000000, "Member 'FGearTransmission_SetClutchState::Cs' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setClutchTime
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetClutchTime final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetClutchTime) == 0x000004, "Wrong alignment on FGearTransmission_SetClutchTime");
static_assert(sizeof(FGearTransmission_SetClutchTime) == 0x000004, "Wrong size on FGearTransmission_SetClutchTime");
static_assert(offsetof(FGearTransmission_SetClutchTime, T) == 0x000000, "Member 'FGearTransmission_SetClutchTime::T' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setCurrentGear
// 0x0008 (0x0008 - 0x0000)
struct FGearTransmission_SetCurrentGear final
{
public:
	int32                                         Gear;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearTransmission_SetCurrentGear) == 0x000004, "Wrong alignment on FGearTransmission_SetCurrentGear");
static_assert(sizeof(FGearTransmission_SetCurrentGear) == 0x000008, "Wrong size on FGearTransmission_SetCurrentGear");
static_assert(offsetof(FGearTransmission_SetCurrentGear, Gear) == 0x000000, "Member 'FGearTransmission_SetCurrentGear::Gear' has a wrong offset!");
static_assert(offsetof(FGearTransmission_SetCurrentGear, Force) == 0x000004, "Member 'FGearTransmission_SetCurrentGear::Force' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setFinalGearRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetFinalGearRatio final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetFinalGearRatio) == 0x000004, "Wrong alignment on FGearTransmission_SetFinalGearRatio");
static_assert(sizeof(FGearTransmission_SetFinalGearRatio) == 0x000004, "Wrong size on FGearTransmission_SetFinalGearRatio");
static_assert(offsetof(FGearTransmission_SetFinalGearRatio, F) == 0x000000, "Member 'FGearTransmission_SetFinalGearRatio::F' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setGearCount
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetGearCount final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetGearCount) == 0x000004, "Wrong alignment on FGearTransmission_SetGearCount");
static_assert(sizeof(FGearTransmission_SetGearCount) == 0x000004, "Wrong size on FGearTransmission_SetGearCount");
static_assert(offsetof(FGearTransmission_SetGearCount, Size) == 0x000000, "Member 'FGearTransmission_SetGearCount::Size' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setGearDownRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetGearDownRatio final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetGearDownRatio) == 0x000004, "Wrong alignment on FGearTransmission_SetGearDownRatio");
static_assert(sizeof(FGearTransmission_SetGearDownRatio) == 0x000004, "Wrong size on FGearTransmission_SetGearDownRatio");
static_assert(offsetof(FGearTransmission_SetGearDownRatio, F) == 0x000000, "Member 'FGearTransmission_SetGearDownRatio::F' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setGearRatio
// 0x0008 (0x0008 - 0x0000)
struct FGearTransmission_SetGearRatio final
{
public:
	int32                                         Gear;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ratio;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetGearRatio) == 0x000004, "Wrong alignment on FGearTransmission_SetGearRatio");
static_assert(sizeof(FGearTransmission_SetGearRatio) == 0x000008, "Wrong size on FGearTransmission_SetGearRatio");
static_assert(offsetof(FGearTransmission_SetGearRatio, Gear) == 0x000000, "Member 'FGearTransmission_SetGearRatio::Gear' has a wrong offset!");
static_assert(offsetof(FGearTransmission_SetGearRatio, Ratio) == 0x000004, "Member 'FGearTransmission_SetGearRatio::Ratio' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setGearUpRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetGearUpRatio final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetGearUpRatio) == 0x000004, "Wrong alignment on FGearTransmission_SetGearUpRatio");
static_assert(sizeof(FGearTransmission_SetGearUpRatio) == 0x000004, "Wrong size on FGearTransmission_SetGearUpRatio");
static_assert(offsetof(FGearTransmission_SetGearUpRatio, F) == 0x000000, "Member 'FGearTransmission_SetGearUpRatio::F' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setPauseTime
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetPauseTime final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetPauseTime) == 0x000004, "Wrong alignment on FGearTransmission_SetPauseTime");
static_assert(sizeof(FGearTransmission_SetPauseTime) == 0x000004, "Wrong size on FGearTransmission_SetPauseTime");
static_assert(offsetof(FGearTransmission_SetPauseTime, F) == 0x000000, "Member 'FGearTransmission_SetPauseTime::F' has a wrong offset!");

// Function FGearPlugin.FGearTransmission.setThrottleState
// 0x0004 (0x0004 - 0x0000)
struct FGearTransmission_SetThrottleState final
{
public:
	int32                                         Ts;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTransmission_SetThrottleState) == 0x000004, "Wrong alignment on FGearTransmission_SetThrottleState");
static_assert(sizeof(FGearTransmission_SetThrottleState) == 0x000004, "Wrong size on FGearTransmission_SetThrottleState");
static_assert(offsetof(FGearTransmission_SetThrottleState, Ts) == 0x000000, "Member 'FGearTransmission_SetThrottleState::Ts' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getABS
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetABS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetABS) == 0x000004, "Wrong alignment on FGearVehicle_GetABS");
static_assert(sizeof(FGearVehicle_GetABS) == 0x000004, "Wrong size on FGearVehicle_GetABS");
static_assert(offsetof(FGearVehicle_GetABS, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetABS::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getABSActive
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetABSActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetABSActive) == 0x000001, "Wrong alignment on FGearVehicle_GetABSActive");
static_assert(sizeof(FGearVehicle_GetABSActive) == 0x000001, "Wrong size on FGearVehicle_GetABSActive");
static_assert(offsetof(FGearVehicle_GetABSActive, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetABSActive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getAeroDynamics
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetAeroDynamics final
{
public:
	class UFGearAeroDynamics*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetAeroDynamics) == 0x000008, "Wrong alignment on FGearVehicle_GetAeroDynamics");
static_assert(sizeof(FGearVehicle_GetAeroDynamics) == 0x000008, "Wrong size on FGearVehicle_GetAeroDynamics");
static_assert(offsetof(FGearVehicle_GetAeroDynamics, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetAeroDynamics::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getAllowReverse
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetAllowReverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetAllowReverse) == 0x000001, "Wrong alignment on FGearVehicle_GetAllowReverse");
static_assert(sizeof(FGearVehicle_GetAllowReverse) == 0x000001, "Wrong size on FGearVehicle_GetAllowReverse");
static_assert(offsetof(FGearVehicle_GetAllowReverse, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetAllowReverse::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getAnim
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetAnim final
{
public:
	class UFGearAnimInstance*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetAnim) == 0x000008, "Wrong alignment on FGearVehicle_GetAnim");
static_assert(sizeof(FGearVehicle_GetAnim) == 0x000008, "Wrong size on FGearVehicle_GetAnim");
static_assert(offsetof(FGearVehicle_GetAnim, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetAnim::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getASR
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetASR final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetASR) == 0x000004, "Wrong alignment on FGearVehicle_GetASR");
static_assert(sizeof(FGearVehicle_GetASR) == 0x000004, "Wrong size on FGearVehicle_GetASR");
static_assert(offsetof(FGearVehicle_GetASR, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetASR::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getASRActive
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetASRActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetASRActive) == 0x000001, "Wrong alignment on FGearVehicle_GetASRActive");
static_assert(sizeof(FGearVehicle_GetASRActive) == 0x000001, "Wrong size on FGearVehicle_GetASRActive");
static_assert(offsetof(FGearVehicle_GetASRActive, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetASRActive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getAxle
// 0x0010 (0x0010 - 0x0000)
struct FGearVehicle_GetAxle final
{
public:
	int32                                         I;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFGearAxle*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetAxle) == 0x000008, "Wrong alignment on FGearVehicle_GetAxle");
static_assert(sizeof(FGearVehicle_GetAxle) == 0x000010, "Wrong size on FGearVehicle_GetAxle");
static_assert(offsetof(FGearVehicle_GetAxle, I) == 0x000000, "Member 'FGearVehicle_GetAxle::I' has a wrong offset!");
static_assert(offsetof(FGearVehicle_GetAxle, ReturnValue) == 0x000008, "Member 'FGearVehicle_GetAxle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getAxleCount
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetAxleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetAxleCount) == 0x000004, "Wrong alignment on FGearVehicle_GetAxleCount");
static_assert(sizeof(FGearVehicle_GetAxleCount) == 0x000004, "Wrong size on FGearVehicle_GetAxleCount");
static_assert(offsetof(FGearVehicle_GetAxleCount, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetAxleCount::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getAxleDistance
// 0x000C (0x000C - 0x0000)
struct FGearVehicle_GetAxleDistance final
{
public:
	int32                                         Axle1;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Axle2;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetAxleDistance) == 0x000004, "Wrong alignment on FGearVehicle_GetAxleDistance");
static_assert(sizeof(FGearVehicle_GetAxleDistance) == 0x00000C, "Wrong size on FGearVehicle_GetAxleDistance");
static_assert(offsetof(FGearVehicle_GetAxleDistance, Axle1) == 0x000000, "Member 'FGearVehicle_GetAxleDistance::Axle1' has a wrong offset!");
static_assert(offsetof(FGearVehicle_GetAxleDistance, Axle2) == 0x000004, "Member 'FGearVehicle_GetAxleDistance::Axle2' has a wrong offset!");
static_assert(offsetof(FGearVehicle_GetAxleDistance, ReturnValue) == 0x000008, "Member 'FGearVehicle_GetAxleDistance::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.GetCenterOfMass
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetCenterOfMass final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetCenterOfMass) == 0x000008, "Wrong alignment on FGearVehicle_GetCenterOfMass");
static_assert(sizeof(FGearVehicle_GetCenterOfMass) == 0x000018, "Wrong size on FGearVehicle_GetCenterOfMass");
static_assert(offsetof(FGearVehicle_GetCenterOfMass, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetCenterOfMass::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getDetectGround
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetDetectGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetDetectGround) == 0x000001, "Wrong alignment on FGearVehicle_GetDetectGround");
static_assert(sizeof(FGearVehicle_GetDetectGround) == 0x000001, "Wrong size on FGearVehicle_GetDetectGround");
static_assert(offsetof(FGearVehicle_GetDetectGround, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetDetectGround::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getEngine
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetEngine final
{
public:
	class UFGearEngine*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetEngine) == 0x000008, "Wrong alignment on FGearVehicle_GetEngine");
static_assert(sizeof(FGearVehicle_GetEngine) == 0x000008, "Wrong size on FGearVehicle_GetEngine");
static_assert(offsetof(FGearVehicle_GetEngine, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetEngine::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getESPActive
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetESPActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetESPActive) == 0x000001, "Wrong alignment on FGearVehicle_GetESPActive");
static_assert(sizeof(FGearVehicle_GetESPActive) == 0x000001, "Wrong size on FGearVehicle_GetESPActive");
static_assert(offsetof(FGearVehicle_GetESPActive, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetESPActive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getForwardDir
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetForwardDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetForwardDir) == 0x000008, "Wrong alignment on FGearVehicle_GetForwardDir");
static_assert(sizeof(FGearVehicle_GetForwardDir) == 0x000018, "Wrong size on FGearVehicle_GetForwardDir");
static_assert(offsetof(FGearVehicle_GetForwardDir, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetForwardDir::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetForwardSpeed) == 0x000004, "Wrong alignment on FGearVehicle_GetForwardSpeed");
static_assert(sizeof(FGearVehicle_GetForwardSpeed) == 0x000004, "Wrong size on FGearVehicle_GetForwardSpeed");
static_assert(offsetof(FGearVehicle_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getHandbrakePower
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetHandbrakePower final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetHandbrakePower) == 0x000004, "Wrong alignment on FGearVehicle_GetHandbrakePower");
static_assert(sizeof(FGearVehicle_GetHandbrakePower) == 0x000004, "Wrong size on FGearVehicle_GetHandbrakePower");
static_assert(offsetof(FGearVehicle_GetHandbrakePower, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetHandbrakePower::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getHardContactScale
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetHardContactScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetHardContactScale) == 0x000004, "Wrong alignment on FGearVehicle_GetHardContactScale");
static_assert(sizeof(FGearVehicle_GetHardContactScale) == 0x000004, "Wrong size on FGearVehicle_GetHardContactScale");
static_assert(offsetof(FGearVehicle_GetHardContactScale, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetHardContactScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getIgnoreMask
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetIgnoreMask final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetIgnoreMask) == 0x000001, "Wrong alignment on FGearVehicle_GetIgnoreMask");
static_assert(sizeof(FGearVehicle_GetIgnoreMask) == 0x000001, "Wrong size on FGearVehicle_GetIgnoreMask");
static_assert(offsetof(FGearVehicle_GetIgnoreMask, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetIgnoreMask::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getInertiaScale
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetInertiaScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetInertiaScale) == 0x000008, "Wrong alignment on FGearVehicle_GetInertiaScale");
static_assert(sizeof(FGearVehicle_GetInertiaScale) == 0x000018, "Wrong size on FGearVehicle_GetInertiaScale");
static_assert(offsetof(FGearVehicle_GetInertiaScale, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetInertiaScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getKMHSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetKMHSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetKMHSpeed) == 0x000004, "Wrong alignment on FGearVehicle_GetKMHSpeed");
static_assert(sizeof(FGearVehicle_GetKMHSpeed) == 0x000004, "Wrong size on FGearVehicle_GetKMHSpeed");
static_assert(offsetof(FGearVehicle_GetKMHSpeed, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetKMHSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getLateralRayCount
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetLateralRayCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetLateralRayCount) == 0x000004, "Wrong alignment on FGearVehicle_GetLateralRayCount");
static_assert(sizeof(FGearVehicle_GetLateralRayCount) == 0x000004, "Wrong size on FGearVehicle_GetLateralRayCount");
static_assert(offsetof(FGearVehicle_GetLateralRayCount, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetLateralRayCount::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getLocalInertiaTensor
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetLocalInertiaTensor final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetLocalInertiaTensor) == 0x000008, "Wrong alignment on FGearVehicle_GetLocalInertiaTensor");
static_assert(sizeof(FGearVehicle_GetLocalInertiaTensor) == 0x000018, "Wrong size on FGearVehicle_GetLocalInertiaTensor");
static_assert(offsetof(FGearVehicle_GetLocalInertiaTensor, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetLocalInertiaTensor::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.GetMass
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetMass final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMass) == 0x000004, "Wrong alignment on FGearVehicle_GetMass");
static_assert(sizeof(FGearVehicle_GetMass) == 0x000004, "Wrong size on FGearVehicle_GetMass");
static_assert(offsetof(FGearVehicle_GetMass, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMass::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMassPerWheel
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetMassPerWheel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMassPerWheel) == 0x000004, "Wrong alignment on FGearVehicle_GetMassPerWheel");
static_assert(sizeof(FGearVehicle_GetMassPerWheel) == 0x000004, "Wrong size on FGearVehicle_GetMassPerWheel");
static_assert(offsetof(FGearVehicle_GetMassPerWheel, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMassPerWheel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMaxSteeringAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetMaxSteeringAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMaxSteeringAngle) == 0x000004, "Wrong alignment on FGearVehicle_GetMaxSteeringAngle");
static_assert(sizeof(FGearVehicle_GetMaxSteeringAngle) == 0x000004, "Wrong size on FGearVehicle_GetMaxSteeringAngle");
static_assert(offsetof(FGearVehicle_GetMaxSteeringAngle, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMaxSteeringAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMaxWheelKMHSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetMaxWheelKMHSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMaxWheelKMHSpeed) == 0x000004, "Wrong alignment on FGearVehicle_GetMaxWheelKMHSpeed");
static_assert(sizeof(FGearVehicle_GetMaxWheelKMHSpeed) == 0x000004, "Wrong size on FGearVehicle_GetMaxWheelKMHSpeed");
static_assert(offsetof(FGearVehicle_GetMaxWheelKMHSpeed, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMaxWheelKMHSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMaxWheelRPMToKMH
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetMaxWheelRPMToKMH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMaxWheelRPMToKMH) == 0x000004, "Wrong alignment on FGearVehicle_GetMaxWheelRPMToKMH");
static_assert(sizeof(FGearVehicle_GetMaxWheelRPMToKMH) == 0x000004, "Wrong size on FGearVehicle_GetMaxWheelRPMToKMH");
static_assert(offsetof(FGearVehicle_GetMaxWheelRPMToKMH, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMaxWheelRPMToKMH::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMesh
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetMesh final
{
public:
	class UFGearSkeletalMeshComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMesh) == 0x000008, "Wrong alignment on FGearVehicle_GetMesh");
static_assert(sizeof(FGearVehicle_GetMesh) == 0x000008, "Wrong size on FGearVehicle_GetMesh");
static_assert(offsetof(FGearVehicle_GetMesh, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMesh::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMinWheelKMHSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetMinWheelKMHSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMinWheelKMHSpeed) == 0x000004, "Wrong alignment on FGearVehicle_GetMinWheelKMHSpeed");
static_assert(sizeof(FGearVehicle_GetMinWheelKMHSpeed) == 0x000004, "Wrong size on FGearVehicle_GetMinWheelKMHSpeed");
static_assert(offsetof(FGearVehicle_GetMinWheelKMHSpeed, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMinWheelKMHSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getMyVelocity
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetMyVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetMyVelocity) == 0x000008, "Wrong alignment on FGearVehicle_GetMyVelocity");
static_assert(sizeof(FGearVehicle_GetMyVelocity) == 0x000018, "Wrong size on FGearVehicle_GetMyVelocity");
static_assert(offsetof(FGearVehicle_GetMyVelocity, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetMyVelocity::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getNormalizedSteering
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetNormalizedSteering final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetNormalizedSteering) == 0x000004, "Wrong alignment on FGearVehicle_GetNormalizedSteering");
static_assert(sizeof(FGearVehicle_GetNormalizedSteering) == 0x000004, "Wrong size on FGearVehicle_GetNormalizedSteering");
static_assert(offsetof(FGearVehicle_GetNormalizedSteering, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetNormalizedSteering::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.GetPosition
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetPosition) == 0x000008, "Wrong alignment on FGearVehicle_GetPosition");
static_assert(sizeof(FGearVehicle_GetPosition) == 0x000018, "Wrong size on FGearVehicle_GetPosition");
static_assert(offsetof(FGearVehicle_GetPosition, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetPosition::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getQueryMobilityType
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetQueryMobilityType final
{
public:
	EFGearQueryMobilityType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetQueryMobilityType) == 0x000001, "Wrong alignment on FGearVehicle_GetQueryMobilityType");
static_assert(sizeof(FGearVehicle_GetQueryMobilityType) == 0x000001, "Wrong size on FGearVehicle_GetQueryMobilityType");
static_assert(offsetof(FGearVehicle_GetQueryMobilityType, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetQueryMobilityType::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getQueryType
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetQueryType final
{
public:
	EFGearQueryType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetQueryType) == 0x000001, "Wrong alignment on FGearVehicle_GetQueryType");
static_assert(sizeof(FGearVehicle_GetQueryType) == 0x000001, "Wrong size on FGearVehicle_GetQueryType");
static_assert(offsetof(FGearVehicle_GetQueryType, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetQueryType::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getRayCount
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetRayCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetRayCount) == 0x000004, "Wrong alignment on FGearVehicle_GetRayCount");
static_assert(sizeof(FGearVehicle_GetRayCount) == 0x000004, "Wrong size on FGearVehicle_GetRayCount");
static_assert(offsetof(FGearVehicle_GetRayCount, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetRayCount::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getRelaxationDownforce
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetRelaxationDownforce final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetRelaxationDownforce) == 0x000001, "Wrong alignment on FGearVehicle_GetRelaxationDownforce");
static_assert(sizeof(FGearVehicle_GetRelaxationDownforce) == 0x000001, "Wrong size on FGearVehicle_GetRelaxationDownforce");
static_assert(offsetof(FGearVehicle_GetRelaxationDownforce, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetRelaxationDownforce::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getRightSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetRightSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetRightSpeed) == 0x000004, "Wrong alignment on FGearVehicle_GetRightSpeed");
static_assert(sizeof(FGearVehicle_GetRightSpeed) == 0x000004, "Wrong size on FGearVehicle_GetRightSpeed");
static_assert(offsetof(FGearVehicle_GetRightSpeed, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetRightSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getRollingResistanceCoeff
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetRollingResistanceCoeff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetRollingResistanceCoeff) == 0x000004, "Wrong alignment on FGearVehicle_GetRollingResistanceCoeff");
static_assert(sizeof(FGearVehicle_GetRollingResistanceCoeff) == 0x000004, "Wrong size on FGearVehicle_GetRollingResistanceCoeff");
static_assert(offsetof(FGearVehicle_GetRollingResistanceCoeff, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetRollingResistanceCoeff::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getRotation
// 0x0020 (0x0020 - 0x0000)
struct FGearVehicle_GetRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetRotation) == 0x000010, "Wrong alignment on FGearVehicle_GetRotation");
static_assert(sizeof(FGearVehicle_GetRotation) == 0x000020, "Wrong size on FGearVehicle_GetRotation");
static_assert(offsetof(FGearVehicle_GetRotation, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetRotation::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getSimCoeff
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetSimCoeff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetSimCoeff) == 0x000004, "Wrong alignment on FGearVehicle_GetSimCoeff");
static_assert(sizeof(FGearVehicle_GetSimCoeff) == 0x000004, "Wrong size on FGearVehicle_GetSimCoeff");
static_assert(offsetof(FGearVehicle_GetSimCoeff, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetSimCoeff::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getStandardInput
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetStandardInput final
{
public:
	class UFGearStandardInput*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetStandardInput) == 0x000008, "Wrong alignment on FGearVehicle_GetStandardInput");
static_assert(sizeof(FGearVehicle_GetStandardInput) == 0x000008, "Wrong size on FGearVehicle_GetStandardInput");
static_assert(offsetof(FGearVehicle_GetStandardInput, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetStandardInput::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getSteerDeltaAngle
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetSteerDeltaAngle final
{
public:
	bool                                          Front;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetSteerDeltaAngle) == 0x000004, "Wrong alignment on FGearVehicle_GetSteerDeltaAngle");
static_assert(sizeof(FGearVehicle_GetSteerDeltaAngle) == 0x000008, "Wrong size on FGearVehicle_GetSteerDeltaAngle");
static_assert(offsetof(FGearVehicle_GetSteerDeltaAngle, Front) == 0x000000, "Member 'FGearVehicle_GetSteerDeltaAngle::Front' has a wrong offset!");
static_assert(offsetof(FGearVehicle_GetSteerDeltaAngle, ReturnValue) == 0x000004, "Member 'FGearVehicle_GetSteerDeltaAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getTirePenetration
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetTirePenetration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetTirePenetration) == 0x000001, "Wrong alignment on FGearVehicle_GetTirePenetration");
static_assert(sizeof(FGearVehicle_GetTirePenetration) == 0x000001, "Wrong size on FGearVehicle_GetTirePenetration");
static_assert(offsetof(FGearVehicle_GetTirePenetration, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetTirePenetration::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetTraceChannel final
{
public:
	ECollisionChannel                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetTraceChannel) == 0x000001, "Wrong alignment on FGearVehicle_GetTraceChannel");
static_assert(sizeof(FGearVehicle_GetTraceChannel) == 0x000001, "Wrong size on FGearVehicle_GetTraceChannel");
static_assert(offsetof(FGearVehicle_GetTraceChannel, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetTraceChannel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getTraceComplex
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_GetTraceComplex final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetTraceComplex) == 0x000001, "Wrong alignment on FGearVehicle_GetTraceComplex");
static_assert(sizeof(FGearVehicle_GetTraceComplex) == 0x000001, "Wrong size on FGearVehicle_GetTraceComplex");
static_assert(offsetof(FGearVehicle_GetTraceComplex, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetTraceComplex::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getTransmission
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_GetTransmission final
{
public:
	class UFGearTransmission*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetTransmission) == 0x000008, "Wrong alignment on FGearVehicle_GetTransmission");
static_assert(sizeof(FGearVehicle_GetTransmission) == 0x000008, "Wrong size on FGearVehicle_GetTransmission");
static_assert(offsetof(FGearVehicle_GetTransmission, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetTransmission::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getUpdateRate
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetUpdateRate final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetUpdateRate) == 0x000004, "Wrong alignment on FGearVehicle_GetUpdateRate");
static_assert(sizeof(FGearVehicle_GetUpdateRate) == 0x000004, "Wrong size on FGearVehicle_GetUpdateRate");
static_assert(offsetof(FGearVehicle_GetUpdateRate, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetUpdateRate::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getUpDir
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetUpDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetUpDir) == 0x000008, "Wrong alignment on FGearVehicle_GetUpDir");
static_assert(sizeof(FGearVehicle_GetUpDir) == 0x000018, "Wrong size on FGearVehicle_GetUpDir");
static_assert(offsetof(FGearVehicle_GetUpDir, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetUpDir::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getVelocityDir
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_GetVelocityDir final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetVelocityDir) == 0x000008, "Wrong alignment on FGearVehicle_GetVelocityDir");
static_assert(sizeof(FGearVehicle_GetVelocityDir) == 0x000018, "Wrong size on FGearVehicle_GetVelocityDir");
static_assert(offsetof(FGearVehicle_GetVelocityDir, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetVelocityDir::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getVelocitySize
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetVelocitySize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetVelocitySize) == 0x000004, "Wrong alignment on FGearVehicle_GetVelocitySize");
static_assert(sizeof(FGearVehicle_GetVelocitySize) == 0x000004, "Wrong size on FGearVehicle_GetVelocitySize");
static_assert(offsetof(FGearVehicle_GetVelocitySize, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetVelocitySize::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getWheelCount
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetWheelCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetWheelCount) == 0x000004, "Wrong alignment on FGearVehicle_GetWheelCount");
static_assert(sizeof(FGearVehicle_GetWheelCount) == 0x000004, "Wrong size on FGearVehicle_GetWheelCount");
static_assert(offsetof(FGearVehicle_GetWheelCount, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetWheelCount::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.getWheelSpeedLimitKMH
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_GetWheelSpeedLimitKMH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_GetWheelSpeedLimitKMH) == 0x000004, "Wrong alignment on FGearVehicle_GetWheelSpeedLimitKMH");
static_assert(sizeof(FGearVehicle_GetWheelSpeedLimitKMH) == 0x000004, "Wrong size on FGearVehicle_GetWheelSpeedLimitKMH");
static_assert(offsetof(FGearVehicle_GetWheelSpeedLimitKMH, ReturnValue) == 0x000000, "Member 'FGearVehicle_GetWheelSpeedLimitKMH::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.isHandbrakeOn
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_IsHandbrakeOn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_IsHandbrakeOn) == 0x000001, "Wrong alignment on FGearVehicle_IsHandbrakeOn");
static_assert(sizeof(FGearVehicle_IsHandbrakeOn) == 0x000001, "Wrong size on FGearVehicle_IsHandbrakeOn");
static_assert(offsetof(FGearVehicle_IsHandbrakeOn, ReturnValue) == 0x000000, "Member 'FGearVehicle_IsHandbrakeOn::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.isOverSteering
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_IsOverSteering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_IsOverSteering) == 0x000001, "Wrong alignment on FGearVehicle_IsOverSteering");
static_assert(sizeof(FGearVehicle_IsOverSteering) == 0x000001, "Wrong size on FGearVehicle_IsOverSteering");
static_assert(offsetof(FGearVehicle_IsOverSteering, ReturnValue) == 0x000000, "Member 'FGearVehicle_IsOverSteering::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.isUnderSteering
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_IsUnderSteering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_IsUnderSteering) == 0x000001, "Wrong alignment on FGearVehicle_IsUnderSteering");
static_assert(sizeof(FGearVehicle_IsUnderSteering) == 0x000001, "Wrong size on FGearVehicle_IsUnderSteering");
static_assert(offsetof(FGearVehicle_IsUnderSteering, ReturnValue) == 0x000000, "Member 'FGearVehicle_IsUnderSteering::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.loadState
// 0x00F0 (0x00F0 - 0x0000)
struct FGearVehicle_LoadState final
{
public:
	struct FFGearVehicleState                     State;                                             // 0x0000(0x00F0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_LoadState) == 0x000010, "Wrong alignment on FGearVehicle_LoadState");
static_assert(sizeof(FGearVehicle_LoadState) == 0x0000F0, "Wrong size on FGearVehicle_LoadState");
static_assert(offsetof(FGearVehicle_LoadState, State) == 0x000000, "Member 'FGearVehicle_LoadState::State' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.OnSimulatedPhysicsChanged
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_OnSimulatedPhysicsChanged final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_OnSimulatedPhysicsChanged) == 0x000001, "Wrong alignment on FGearVehicle_OnSimulatedPhysicsChanged");
static_assert(sizeof(FGearVehicle_OnSimulatedPhysicsChanged) == 0x000001, "Wrong size on FGearVehicle_OnSimulatedPhysicsChanged");
static_assert(offsetof(FGearVehicle_OnSimulatedPhysicsChanged, IsEnabled) == 0x000000, "Member 'FGearVehicle_OnSimulatedPhysicsChanged::IsEnabled' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.Reset
// 0x0030 (0x0030 - 0x0000)
struct FGearVehicle_Reset final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_Reset) == 0x000008, "Wrong alignment on FGearVehicle_Reset");
static_assert(sizeof(FGearVehicle_Reset) == 0x000030, "Wrong size on FGearVehicle_Reset");
static_assert(offsetof(FGearVehicle_Reset, Position) == 0x000000, "Member 'FGearVehicle_Reset::Position' has a wrong offset!");
static_assert(offsetof(FGearVehicle_Reset, Rotation) == 0x000018, "Member 'FGearVehicle_Reset::Rotation' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.saveState
// 0x00F0 (0x00F0 - 0x0000)
struct FGearVehicle_SaveState final
{
public:
	struct FFGearVehicleState                     State;                                             // 0x0000(0x00F0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SaveState) == 0x000010, "Wrong alignment on FGearVehicle_SaveState");
static_assert(sizeof(FGearVehicle_SaveState) == 0x0000F0, "Wrong size on FGearVehicle_SaveState");
static_assert(offsetof(FGearVehicle_SaveState, State) == 0x000000, "Member 'FGearVehicle_SaveState::State' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.serverReset
// 0x0040 (0x0040 - 0x0000)
struct FGearVehicle_ServerReset final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_ServerReset) == 0x000010, "Wrong alignment on FGearVehicle_ServerReset");
static_assert(sizeof(FGearVehicle_ServerReset) == 0x000040, "Wrong size on FGearVehicle_ServerReset");
static_assert(offsetof(FGearVehicle_ServerReset, Position) == 0x000000, "Member 'FGearVehicle_ServerReset::Position' has a wrong offset!");
static_assert(offsetof(FGearVehicle_ServerReset, Rotation) == 0x000020, "Member 'FGearVehicle_ServerReset::Rotation' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setABS
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetABS final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetABS) == 0x000004, "Wrong alignment on FGearVehicle_SetABS");
static_assert(sizeof(FGearVehicle_SetABS) == 0x000004, "Wrong size on FGearVehicle_SetABS");
static_assert(offsetof(FGearVehicle_SetABS, F) == 0x000000, "Member 'FGearVehicle_SetABS::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setAllowReverse
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetAllowReverse final
{
public:
	bool                                          Allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetAllowReverse) == 0x000001, "Wrong alignment on FGearVehicle_SetAllowReverse");
static_assert(sizeof(FGearVehicle_SetAllowReverse) == 0x000001, "Wrong size on FGearVehicle_SetAllowReverse");
static_assert(offsetof(FGearVehicle_SetAllowReverse, Allow) == 0x000000, "Member 'FGearVehicle_SetAllowReverse::Allow' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setASR
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetASR final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetASR) == 0x000004, "Wrong alignment on FGearVehicle_SetASR");
static_assert(sizeof(FGearVehicle_SetASR) == 0x000004, "Wrong size on FGearVehicle_SetASR");
static_assert(offsetof(FGearVehicle_SetASR, F) == 0x000000, "Member 'FGearVehicle_SetASR::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setBraking
// 0x0008 (0x0008 - 0x0000)
struct FGearVehicle_SetBraking final
{
public:
	float                                         BrakeInput;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Handbrake;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearVehicle_SetBraking) == 0x000004, "Wrong alignment on FGearVehicle_SetBraking");
static_assert(sizeof(FGearVehicle_SetBraking) == 0x000008, "Wrong size on FGearVehicle_SetBraking");
static_assert(offsetof(FGearVehicle_SetBraking, BrakeInput) == 0x000000, "Member 'FGearVehicle_SetBraking::BrakeInput' has a wrong offset!");
static_assert(offsetof(FGearVehicle_SetBraking, Handbrake) == 0x000004, "Member 'FGearVehicle_SetBraking::Handbrake' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setCenterOfMassOffset
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_SetCenterOfMassOffset final
{
public:
	struct FVector                                Com;                                               // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetCenterOfMassOffset) == 0x000008, "Wrong alignment on FGearVehicle_SetCenterOfMassOffset");
static_assert(sizeof(FGearVehicle_SetCenterOfMassOffset) == 0x000018, "Wrong size on FGearVehicle_SetCenterOfMassOffset");
static_assert(offsetof(FGearVehicle_SetCenterOfMassOffset, Com) == 0x000000, "Member 'FGearVehicle_SetCenterOfMassOffset::Com' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setDetectGround
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetDetectGround final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetDetectGround) == 0x000001, "Wrong alignment on FGearVehicle_SetDetectGround");
static_assert(sizeof(FGearVehicle_SetDetectGround) == 0x000001, "Wrong size on FGearVehicle_SetDetectGround");
static_assert(offsetof(FGearVehicle_SetDetectGround, B) == 0x000000, "Member 'FGearVehicle_SetDetectGround::B' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setFrontAntiRollPower
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetFrontAntiRollPower final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetFrontAntiRollPower) == 0x000004, "Wrong alignment on FGearVehicle_SetFrontAntiRollPower");
static_assert(sizeof(FGearVehicle_SetFrontAntiRollPower) == 0x000004, "Wrong size on FGearVehicle_SetFrontAntiRollPower");
static_assert(offsetof(FGearVehicle_SetFrontAntiRollPower, F) == 0x000000, "Member 'FGearVehicle_SetFrontAntiRollPower::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.SetGravity
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_SetGravity final
{
public:
	struct FVector                                Gravity;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetGravity) == 0x000008, "Wrong alignment on FGearVehicle_SetGravity");
static_assert(sizeof(FGearVehicle_SetGravity) == 0x000018, "Wrong size on FGearVehicle_SetGravity");
static_assert(offsetof(FGearVehicle_SetGravity, Gravity) == 0x000000, "Member 'FGearVehicle_SetGravity::Gravity' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setHandbrakePower
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetHandbrakePower final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetHandbrakePower) == 0x000004, "Wrong alignment on FGearVehicle_SetHandbrakePower");
static_assert(sizeof(FGearVehicle_SetHandbrakePower) == 0x000004, "Wrong size on FGearVehicle_SetHandbrakePower");
static_assert(offsetof(FGearVehicle_SetHandbrakePower, F) == 0x000000, "Member 'FGearVehicle_SetHandbrakePower::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setHardContactScale
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetHardContactScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetHardContactScale) == 0x000004, "Wrong alignment on FGearVehicle_SetHardContactScale");
static_assert(sizeof(FGearVehicle_SetHardContactScale) == 0x000004, "Wrong size on FGearVehicle_SetHardContactScale");
static_assert(offsetof(FGearVehicle_SetHardContactScale, F) == 0x000000, "Member 'FGearVehicle_SetHardContactScale::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setIgnoreMask
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetIgnoreMask final
{
public:
	uint8                                         F;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetIgnoreMask) == 0x000001, "Wrong alignment on FGearVehicle_SetIgnoreMask");
static_assert(sizeof(FGearVehicle_SetIgnoreMask) == 0x000001, "Wrong size on FGearVehicle_SetIgnoreMask");
static_assert(offsetof(FGearVehicle_SetIgnoreMask, F) == 0x000000, "Member 'FGearVehicle_SetIgnoreMask::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setInertiaScale
// 0x0018 (0x0018 - 0x0000)
struct FGearVehicle_SetInertiaScale final
{
public:
	struct FVector                                Iscale;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetInertiaScale) == 0x000008, "Wrong alignment on FGearVehicle_SetInertiaScale");
static_assert(sizeof(FGearVehicle_SetInertiaScale) == 0x000018, "Wrong size on FGearVehicle_SetInertiaScale");
static_assert(offsetof(FGearVehicle_SetInertiaScale, Iscale) == 0x000000, "Member 'FGearVehicle_SetInertiaScale::Iscale' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setLateralRayCount
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetLateralRayCount final
{
public:
	int32                                         Ct;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetLateralRayCount) == 0x000004, "Wrong alignment on FGearVehicle_SetLateralRayCount");
static_assert(sizeof(FGearVehicle_SetLateralRayCount) == 0x000004, "Wrong size on FGearVehicle_SetLateralRayCount");
static_assert(offsetof(FGearVehicle_SetLateralRayCount, Ct) == 0x000000, "Member 'FGearVehicle_SetLateralRayCount::Ct' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setMass
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetMass final
{
public:
	float                                         Mass;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetMass) == 0x000004, "Wrong alignment on FGearVehicle_SetMass");
static_assert(sizeof(FGearVehicle_SetMass) == 0x000004, "Wrong size on FGearVehicle_SetMass");
static_assert(offsetof(FGearVehicle_SetMass, Mass) == 0x000000, "Member 'FGearVehicle_SetMass::Mass' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setMinOverSteerAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetMinOverSteerAngle final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetMinOverSteerAngle) == 0x000004, "Wrong alignment on FGearVehicle_SetMinOverSteerAngle");
static_assert(sizeof(FGearVehicle_SetMinOverSteerAngle) == 0x000004, "Wrong size on FGearVehicle_SetMinOverSteerAngle");
static_assert(offsetof(FGearVehicle_SetMinOverSteerAngle, F) == 0x000000, "Member 'FGearVehicle_SetMinOverSteerAngle::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setMinUnderSteerAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetMinUnderSteerAngle final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetMinUnderSteerAngle) == 0x000004, "Wrong alignment on FGearVehicle_SetMinUnderSteerAngle");
static_assert(sizeof(FGearVehicle_SetMinUnderSteerAngle) == 0x000004, "Wrong size on FGearVehicle_SetMinUnderSteerAngle");
static_assert(offsetof(FGearVehicle_SetMinUnderSteerAngle, F) == 0x000000, "Member 'FGearVehicle_SetMinUnderSteerAngle::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setOverSteerAssist
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetOverSteerAssist final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetOverSteerAssist) == 0x000004, "Wrong alignment on FGearVehicle_SetOverSteerAssist");
static_assert(sizeof(FGearVehicle_SetOverSteerAssist) == 0x000004, "Wrong size on FGearVehicle_SetOverSteerAssist");
static_assert(offsetof(FGearVehicle_SetOverSteerAssist, F) == 0x000000, "Member 'FGearVehicle_SetOverSteerAssist::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setQueryMobilityType
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetQueryMobilityType final
{
public:
	EFGearQueryMobilityType                       T;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetQueryMobilityType) == 0x000001, "Wrong alignment on FGearVehicle_SetQueryMobilityType");
static_assert(sizeof(FGearVehicle_SetQueryMobilityType) == 0x000001, "Wrong size on FGearVehicle_SetQueryMobilityType");
static_assert(offsetof(FGearVehicle_SetQueryMobilityType, T) == 0x000000, "Member 'FGearVehicle_SetQueryMobilityType::T' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setQueryType
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetQueryType final
{
public:
	EFGearQueryType                               T;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetQueryType) == 0x000001, "Wrong alignment on FGearVehicle_SetQueryType");
static_assert(sizeof(FGearVehicle_SetQueryType) == 0x000001, "Wrong size on FGearVehicle_SetQueryType");
static_assert(offsetof(FGearVehicle_SetQueryType, T) == 0x000000, "Member 'FGearVehicle_SetQueryType::T' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setRayCount
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetRayCount final
{
public:
	int32                                         Ct;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetRayCount) == 0x000004, "Wrong alignment on FGearVehicle_SetRayCount");
static_assert(sizeof(FGearVehicle_SetRayCount) == 0x000004, "Wrong size on FGearVehicle_SetRayCount");
static_assert(offsetof(FGearVehicle_SetRayCount, Ct) == 0x000000, "Member 'FGearVehicle_SetRayCount::Ct' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setReactionForceScale
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetReactionForceScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetReactionForceScale) == 0x000004, "Wrong alignment on FGearVehicle_SetReactionForceScale");
static_assert(sizeof(FGearVehicle_SetReactionForceScale) == 0x000004, "Wrong size on FGearVehicle_SetReactionForceScale");
static_assert(offsetof(FGearVehicle_SetReactionForceScale, F) == 0x000000, "Member 'FGearVehicle_SetReactionForceScale::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setRearAntiRollPower
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetRearAntiRollPower final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetRearAntiRollPower) == 0x000004, "Wrong alignment on FGearVehicle_SetRearAntiRollPower");
static_assert(sizeof(FGearVehicle_SetRearAntiRollPower) == 0x000004, "Wrong size on FGearVehicle_SetRearAntiRollPower");
static_assert(offsetof(FGearVehicle_SetRearAntiRollPower, F) == 0x000000, "Member 'FGearVehicle_SetRearAntiRollPower::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setRelaxationDownforce
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetRelaxationDownforce final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetRelaxationDownforce) == 0x000001, "Wrong alignment on FGearVehicle_SetRelaxationDownforce");
static_assert(sizeof(FGearVehicle_SetRelaxationDownforce) == 0x000001, "Wrong size on FGearVehicle_SetRelaxationDownforce");
static_assert(offsetof(FGearVehicle_SetRelaxationDownforce, B) == 0x000000, "Member 'FGearVehicle_SetRelaxationDownforce::B' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setRollingResistanceCoeff
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetRollingResistanceCoeff final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetRollingResistanceCoeff) == 0x000004, "Wrong alignment on FGearVehicle_SetRollingResistanceCoeff");
static_assert(sizeof(FGearVehicle_SetRollingResistanceCoeff) == 0x000004, "Wrong size on FGearVehicle_SetRollingResistanceCoeff");
static_assert(offsetof(FGearVehicle_SetRollingResistanceCoeff, F) == 0x000000, "Member 'FGearVehicle_SetRollingResistanceCoeff::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setSteering
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetSteering final
{
public:
	float                                         SteerInput;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetSteering) == 0x000004, "Wrong alignment on FGearVehicle_SetSteering");
static_assert(sizeof(FGearVehicle_SetSteering) == 0x000004, "Wrong size on FGearVehicle_SetSteering");
static_assert(offsetof(FGearVehicle_SetSteering, SteerInput) == 0x000000, "Member 'FGearVehicle_SetSteering::SteerInput' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setStickyTireSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetStickyTireSpeed final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetStickyTireSpeed) == 0x000004, "Wrong alignment on FGearVehicle_SetStickyTireSpeed");
static_assert(sizeof(FGearVehicle_SetStickyTireSpeed) == 0x000004, "Wrong size on FGearVehicle_SetStickyTireSpeed");
static_assert(offsetof(FGearVehicle_SetStickyTireSpeed, F) == 0x000000, "Member 'FGearVehicle_SetStickyTireSpeed::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setStickyTireState
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetStickyTireState final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetStickyTireState) == 0x000004, "Wrong alignment on FGearVehicle_SetStickyTireState");
static_assert(sizeof(FGearVehicle_SetStickyTireState) == 0x000004, "Wrong size on FGearVehicle_SetStickyTireState");
static_assert(offsetof(FGearVehicle_SetStickyTireState, F) == 0x000000, "Member 'FGearVehicle_SetStickyTireState::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setTirePenetration
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetTirePenetration final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetTirePenetration) == 0x000001, "Wrong alignment on FGearVehicle_SetTirePenetration");
static_assert(sizeof(FGearVehicle_SetTirePenetration) == 0x000001, "Wrong size on FGearVehicle_SetTirePenetration");
static_assert(offsetof(FGearVehicle_SetTirePenetration, B) == 0x000000, "Member 'FGearVehicle_SetTirePenetration::B' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetTraceChannel final
{
public:
	ECollisionChannel                             L;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetTraceChannel) == 0x000001, "Wrong alignment on FGearVehicle_SetTraceChannel");
static_assert(sizeof(FGearVehicle_SetTraceChannel) == 0x000001, "Wrong size on FGearVehicle_SetTraceChannel");
static_assert(offsetof(FGearVehicle_SetTraceChannel, L) == 0x000000, "Member 'FGearVehicle_SetTraceChannel::L' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setTraceComplex
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetTraceComplex final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetTraceComplex) == 0x000001, "Wrong alignment on FGearVehicle_SetTraceComplex");
static_assert(sizeof(FGearVehicle_SetTraceComplex) == 0x000001, "Wrong size on FGearVehicle_SetTraceComplex");
static_assert(offsetof(FGearVehicle_SetTraceComplex, B) == 0x000000, "Member 'FGearVehicle_SetTraceComplex::B' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setUnderSteerAssist
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetUnderSteerAssist final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetUnderSteerAssist) == 0x000004, "Wrong alignment on FGearVehicle_SetUnderSteerAssist");
static_assert(sizeof(FGearVehicle_SetUnderSteerAssist) == 0x000004, "Wrong size on FGearVehicle_SetUnderSteerAssist");
static_assert(offsetof(FGearVehicle_SetUnderSteerAssist, F) == 0x000000, "Member 'FGearVehicle_SetUnderSteerAssist::F' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setUpdateInputs
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetUpdateInputs final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetUpdateInputs) == 0x000001, "Wrong alignment on FGearVehicle_SetUpdateInputs");
static_assert(sizeof(FGearVehicle_SetUpdateInputs) == 0x000001, "Wrong size on FGearVehicle_SetUpdateInputs");
static_assert(offsetof(FGearVehicle_SetUpdateInputs, B) == 0x000000, "Member 'FGearVehicle_SetUpdateInputs::B' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setUpdateRate
// 0x0004 (0x0004 - 0x0000)
struct FGearVehicle_SetUpdateRate final
{
public:
	int32                                         I;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetUpdateRate) == 0x000004, "Wrong alignment on FGearVehicle_SetUpdateRate");
static_assert(sizeof(FGearVehicle_SetUpdateRate) == 0x000004, "Wrong size on FGearVehicle_SetUpdateRate");
static_assert(offsetof(FGearVehicle_SetUpdateRate, I) == 0x000000, "Member 'FGearVehicle_SetUpdateRate::I' has a wrong offset!");

// Function FGearPlugin.FGearVehicle.setUseCustomGravity
// 0x0001 (0x0001 - 0x0000)
struct FGearVehicle_SetUseCustomGravity final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearVehicle_SetUseCustomGravity) == 0x000001, "Wrong alignment on FGearVehicle_SetUseCustomGravity");
static_assert(sizeof(FGearVehicle_SetUseCustomGravity) == 0x000001, "Wrong size on FGearVehicle_SetUseCustomGravity");
static_assert(offsetof(FGearVehicle_SetUseCustomGravity, Use) == 0x000000, "Member 'FGearVehicle_SetUseCustomGravity::Use' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getCurrentSteer
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetCurrentSteer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetCurrentSteer) == 0x000004, "Wrong alignment on FGearWheel_GetCurrentSteer");
static_assert(sizeof(FGearWheel_GetCurrentSteer) == 0x000004, "Wrong size on FGearWheel_GetCurrentSteer");
static_assert(offsetof(FGearWheel_GetCurrentSteer, ReturnValue) == 0x000000, "Member 'FGearWheel_GetCurrentSteer::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getGlobalForward
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetGlobalForward final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetGlobalForward) == 0x000008, "Wrong alignment on FGearWheel_GetGlobalForward");
static_assert(sizeof(FGearWheel_GetGlobalForward) == 0x000018, "Wrong size on FGearWheel_GetGlobalForward");
static_assert(offsetof(FGearWheel_GetGlobalForward, ReturnValue) == 0x000000, "Member 'FGearWheel_GetGlobalForward::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getGlobalRight
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetGlobalRight final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetGlobalRight) == 0x000008, "Wrong alignment on FGearWheel_GetGlobalRight");
static_assert(sizeof(FGearWheel_GetGlobalRight) == 0x000018, "Wrong size on FGearWheel_GetGlobalRight");
static_assert(offsetof(FGearWheel_GetGlobalRight, ReturnValue) == 0x000000, "Member 'FGearWheel_GetGlobalRight::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getPitch
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetPitch) == 0x000004, "Wrong alignment on FGearWheel_GetPitch");
static_assert(sizeof(FGearWheel_GetPitch) == 0x000004, "Wrong size on FGearWheel_GetPitch");
static_assert(offsetof(FGearWheel_GetPitch, ReturnValue) == 0x000000, "Member 'FGearWheel_GetPitch::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setAlignScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetAlignScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetAlignScale) == 0x000004, "Wrong alignment on FGearWheel_SetAlignScale");
static_assert(sizeof(FGearWheel_SetAlignScale) == 0x000004, "Wrong size on FGearWheel_SetAlignScale");
static_assert(offsetof(FGearWheel_SetAlignScale, F) == 0x000000, "Member 'FGearWheel_SetAlignScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setBoneName
// 0x0010 (0x0010 - 0x0000)
struct FGearWheel_SetBoneName final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetBoneName) == 0x000008, "Wrong alignment on FGearWheel_SetBoneName");
static_assert(sizeof(FGearWheel_SetBoneName) == 0x000010, "Wrong size on FGearWheel_SetBoneName");
static_assert(offsetof(FGearWheel_SetBoneName, NewName) == 0x000000, "Member 'FGearWheel_SetBoneName::NewName' has a wrong offset!");

// Function FGearPlugin.FGearWheel.SetBrakeTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetBrakeTorque final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetBrakeTorque) == 0x000004, "Wrong alignment on FGearWheel_SetBrakeTorque");
static_assert(sizeof(FGearWheel_SetBrakeTorque) == 0x000004, "Wrong size on FGearWheel_SetBrakeTorque");
static_assert(offsetof(FGearWheel_SetBrakeTorque, F) == 0x000000, "Member 'FGearWheel_SetBrakeTorque::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setBraking
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetBraking final
{
public:
	float                                         B;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetBraking) == 0x000004, "Wrong alignment on FGearWheel_SetBraking");
static_assert(sizeof(FGearWheel_SetBraking) == 0x000004, "Wrong size on FGearWheel_SetBraking");
static_assert(offsetof(FGearWheel_SetBraking, B) == 0x000000, "Member 'FGearWheel_SetBraking::B' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setCompressionDamper
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetCompressionDamper final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetCompressionDamper) == 0x000004, "Wrong alignment on FGearWheel_SetCompressionDamper");
static_assert(sizeof(FGearWheel_SetCompressionDamper) == 0x000004, "Wrong size on FGearWheel_SetCompressionDamper");
static_assert(offsetof(FGearWheel_SetCompressionDamper, F) == 0x000000, "Member 'FGearWheel_SetCompressionDamper::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setCurrentSteer
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetCurrentSteer final
{
public:
	float                                         S;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetCurrentSteer) == 0x000004, "Wrong alignment on FGearWheel_SetCurrentSteer");
static_assert(sizeof(FGearWheel_SetCurrentSteer) == 0x000004, "Wrong size on FGearWheel_SetCurrentSteer");
static_assert(offsetof(FGearWheel_SetCurrentSteer, S) == 0x000000, "Member 'FGearWheel_SetCurrentSteer::S' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setEnable
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_SetEnable final
{
public:
	bool                                          B;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetEnable) == 0x000001, "Wrong alignment on FGearWheel_SetEnable");
static_assert(sizeof(FGearWheel_SetEnable) == 0x000001, "Wrong size on FGearWheel_SetEnable");
static_assert(offsetof(FGearWheel_SetEnable, B) == 0x000000, "Member 'FGearWheel_SetEnable::B' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setFrictionFactor
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetFrictionFactor final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetFrictionFactor) == 0x000004, "Wrong alignment on FGearWheel_SetFrictionFactor");
static_assert(sizeof(FGearWheel_SetFrictionFactor) == 0x000004, "Wrong size on FGearWheel_SetFrictionFactor");
static_assert(offsetof(FGearWheel_SetFrictionFactor, F) == 0x000000, "Member 'FGearWheel_SetFrictionFactor::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setLatFriction
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetLatFriction final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetLatFriction) == 0x000004, "Wrong alignment on FGearWheel_SetLatFriction");
static_assert(sizeof(FGearWheel_SetLatFriction) == 0x000004, "Wrong size on FGearWheel_SetLatFriction");
static_assert(offsetof(FGearWheel_SetLatFriction, F) == 0x000000, "Member 'FGearWheel_SetLatFriction::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setLatScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetLatScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetLatScale) == 0x000004, "Wrong alignment on FGearWheel_SetLatScale");
static_assert(sizeof(FGearWheel_SetLatScale) == 0x000004, "Wrong size on FGearWheel_SetLatScale");
static_assert(offsetof(FGearWheel_SetLatScale, F) == 0x000000, "Member 'FGearWheel_SetLatScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setLngFriction
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetLngFriction final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetLngFriction) == 0x000004, "Wrong alignment on FGearWheel_SetLngFriction");
static_assert(sizeof(FGearWheel_SetLngFriction) == 0x000004, "Wrong size on FGearWheel_SetLngFriction");
static_assert(offsetof(FGearWheel_SetLngFriction, F) == 0x000000, "Member 'FGearWheel_SetLngFriction::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setLngScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetLngScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetLngScale) == 0x000004, "Wrong alignment on FGearWheel_SetLngScale");
static_assert(sizeof(FGearWheel_SetLngScale) == 0x000004, "Wrong size on FGearWheel_SetLngScale");
static_assert(offsetof(FGearWheel_SetLngScale, F) == 0x000000, "Member 'FGearWheel_SetLngScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setMass
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetMass final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetMass) == 0x000004, "Wrong alignment on FGearWheel_SetMass");
static_assert(sizeof(FGearWheel_SetMass) == 0x000004, "Wrong size on FGearWheel_SetMass");
static_assert(offsetof(FGearWheel_SetMass, F) == 0x000000, "Member 'FGearWheel_SetMass::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setOverturnScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetOverturnScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetOverturnScale) == 0x000004, "Wrong alignment on FGearWheel_SetOverturnScale");
static_assert(sizeof(FGearWheel_SetOverturnScale) == 0x000004, "Wrong size on FGearWheel_SetOverturnScale");
static_assert(offsetof(FGearWheel_SetOverturnScale, F) == 0x000000, "Member 'FGearWheel_SetOverturnScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.SetPressure
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetPressure final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetPressure) == 0x000004, "Wrong alignment on FGearWheel_SetPressure");
static_assert(sizeof(FGearWheel_SetPressure) == 0x000004, "Wrong size on FGearWheel_SetPressure");
static_assert(offsetof(FGearWheel_SetPressure, F) == 0x000000, "Member 'FGearWheel_SetPressure::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setRadius
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetRadius final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetRadius) == 0x000004, "Wrong alignment on FGearWheel_SetRadius");
static_assert(sizeof(FGearWheel_SetRadius) == 0x000004, "Wrong size on FGearWheel_SetRadius");
static_assert(offsetof(FGearWheel_SetRadius, F) == 0x000000, "Member 'FGearWheel_SetRadius::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setRelaxationDamper
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetRelaxationDamper final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetRelaxationDamper) == 0x000004, "Wrong alignment on FGearWheel_SetRelaxationDamper");
static_assert(sizeof(FGearWheel_SetRelaxationDamper) == 0x000004, "Wrong size on FGearWheel_SetRelaxationDamper");
static_assert(offsetof(FGearWheel_SetRelaxationDamper, F) == 0x000000, "Member 'FGearWheel_SetRelaxationDamper::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setRimOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetRimOffset final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetRimOffset) == 0x000004, "Wrong alignment on FGearWheel_SetRimOffset");
static_assert(sizeof(FGearWheel_SetRimOffset) == 0x000004, "Wrong size on FGearWheel_SetRimOffset");
static_assert(offsetof(FGearWheel_SetRimOffset, F) == 0x000000, "Member 'FGearWheel_SetRimOffset::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setRollScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetRollScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetRollScale) == 0x000004, "Wrong alignment on FGearWheel_SetRollScale");
static_assert(sizeof(FGearWheel_SetRollScale) == 0x000004, "Wrong size on FGearWheel_SetRollScale");
static_assert(offsetof(FGearWheel_SetRollScale, F) == 0x000000, "Member 'FGearWheel_SetRollScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetSpeed final
{
public:
	float                                         S;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetSpeed) == 0x000004, "Wrong alignment on FGearWheel_SetSpeed");
static_assert(sizeof(FGearWheel_SetSpeed) == 0x000004, "Wrong size on FGearWheel_SetSpeed");
static_assert(offsetof(FGearWheel_SetSpeed, S) == 0x000000, "Member 'FGearWheel_SetSpeed::S' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setSpringCoeff
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetSpringCoeff final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetSpringCoeff) == 0x000004, "Wrong alignment on FGearWheel_SetSpringCoeff");
static_assert(sizeof(FGearWheel_SetSpringCoeff) == 0x000004, "Wrong size on FGearWheel_SetSpringCoeff");
static_assert(offsetof(FGearWheel_SetSpringCoeff, F) == 0x000000, "Member 'FGearWheel_SetSpringCoeff::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setSuspensionDownTravel
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetSuspensionDownTravel final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetSuspensionDownTravel) == 0x000004, "Wrong alignment on FGearWheel_SetSuspensionDownTravel");
static_assert(sizeof(FGearWheel_SetSuspensionDownTravel) == 0x000004, "Wrong size on FGearWheel_SetSuspensionDownTravel");
static_assert(offsetof(FGearWheel_SetSuspensionDownTravel, F) == 0x000000, "Member 'FGearWheel_SetSuspensionDownTravel::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setSuspensionPreload
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetSuspensionPreload final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetSuspensionPreload) == 0x000004, "Wrong alignment on FGearWheel_SetSuspensionPreload");
static_assert(sizeof(FGearWheel_SetSuspensionPreload) == 0x000004, "Wrong size on FGearWheel_SetSuspensionPreload");
static_assert(offsetof(FGearWheel_SetSuspensionPreload, F) == 0x000000, "Member 'FGearWheel_SetSuspensionPreload::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setSuspensionSpring
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetSuspensionSpring final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetSuspensionSpring) == 0x000004, "Wrong alignment on FGearWheel_SetSuspensionSpring");
static_assert(sizeof(FGearWheel_SetSuspensionSpring) == 0x000004, "Wrong size on FGearWheel_SetSuspensionSpring");
static_assert(offsetof(FGearWheel_SetSuspensionSpring, F) == 0x000000, "Member 'FGearWheel_SetSuspensionSpring::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setSuspensionUpTravel
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetSuspensionUpTravel final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetSuspensionUpTravel) == 0x000004, "Wrong alignment on FGearWheel_SetSuspensionUpTravel");
static_assert(sizeof(FGearWheel_SetSuspensionUpTravel) == 0x000004, "Wrong size on FGearWheel_SetSuspensionUpTravel");
static_assert(offsetof(FGearWheel_SetSuspensionUpTravel, F) == 0x000000, "Member 'FGearWheel_SetSuspensionUpTravel::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setWheelSide
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_SetWheelSide final
{
public:
	EFGearWheelSide                               S;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetWheelSide) == 0x000001, "Wrong alignment on FGearWheel_SetWheelSide");
static_assert(sizeof(FGearWheel_SetWheelSide) == 0x000001, "Wrong size on FGearWheel_SetWheelSide");
static_assert(offsetof(FGearWheel_SetWheelSide, S) == 0x000000, "Member 'FGearWheel_SetWheelSide::S' has a wrong offset!");

// Function FGearPlugin.FGearWheel.setWidth
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_SetWidth final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_SetWidth) == 0x000004, "Wrong alignment on FGearWheel_SetWidth");
static_assert(sizeof(FGearWheel_SetWidth) == 0x000004, "Wrong size on FGearWheel_SetWidth");
static_assert(offsetof(FGearWheel_SetWidth, F) == 0x000000, "Member 'FGearWheel_SetWidth::F' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getAxle
// 0x0008 (0x0008 - 0x0000)
struct FGearWheel_GetAxle final
{
public:
	class UFGearAxle*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetAxle) == 0x000008, "Wrong alignment on FGearWheel_GetAxle");
static_assert(sizeof(FGearWheel_GetAxle) == 0x000008, "Wrong size on FGearWheel_GetAxle");
static_assert(offsetof(FGearWheel_GetAxle, ReturnValue) == 0x000000, "Member 'FGearWheel_GetAxle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getBraking
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetBraking final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetBraking) == 0x000004, "Wrong alignment on FGearWheel_GetBraking");
static_assert(sizeof(FGearWheel_GetBraking) == 0x000004, "Wrong size on FGearWheel_GetBraking");
static_assert(offsetof(FGearWheel_GetBraking, ReturnValue) == 0x000000, "Member 'FGearWheel_GetBraking::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getCombinedTorque
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetCombinedTorque final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetCombinedTorque) == 0x000008, "Wrong alignment on FGearWheel_GetCombinedTorque");
static_assert(sizeof(FGearWheel_GetCombinedTorque) == 0x000018, "Wrong size on FGearWheel_GetCombinedTorque");
static_assert(offsetof(FGearWheel_GetCombinedTorque, ReturnValue) == 0x000000, "Member 'FGearWheel_GetCombinedTorque::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getCurrentLoad
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetCurrentLoad final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetCurrentLoad) == 0x000004, "Wrong alignment on FGearWheel_GetCurrentLoad");
static_assert(sizeof(FGearWheel_GetCurrentLoad) == 0x000004, "Wrong size on FGearWheel_GetCurrentLoad");
static_assert(offsetof(FGearWheel_GetCurrentLoad, ReturnValue) == 0x000000, "Member 'FGearWheel_GetCurrentLoad::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getFeedbackTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetFeedbackTorque final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetFeedbackTorque) == 0x000004, "Wrong alignment on FGearWheel_GetFeedbackTorque");
static_assert(sizeof(FGearWheel_GetFeedbackTorque) == 0x000004, "Wrong size on FGearWheel_GetFeedbackTorque");
static_assert(offsetof(FGearWheel_GetFeedbackTorque, ReturnValue) == 0x000000, "Member 'FGearWheel_GetFeedbackTorque::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getFrictionFactor
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetFrictionFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetFrictionFactor) == 0x000004, "Wrong alignment on FGearWheel_GetFrictionFactor");
static_assert(sizeof(FGearWheel_GetFrictionFactor) == 0x000004, "Wrong size on FGearWheel_GetFrictionFactor");
static_assert(offsetof(FGearWheel_GetFrictionFactor, ReturnValue) == 0x000000, "Member 'FGearWheel_GetFrictionFactor::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getHubPosition
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetHubPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetHubPosition) == 0x000008, "Wrong alignment on FGearWheel_GetHubPosition");
static_assert(sizeof(FGearWheel_GetHubPosition) == 0x000018, "Wrong size on FGearWheel_GetHubPosition");
static_assert(offsetof(FGearWheel_GetHubPosition, ReturnValue) == 0x000000, "Member 'FGearWheel_GetHubPosition::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getKMHSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetKMHSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetKMHSpeed) == 0x000004, "Wrong alignment on FGearWheel_GetKMHSpeed");
static_assert(sizeof(FGearWheel_GetKMHSpeed) == 0x000004, "Wrong size on FGearWheel_GetKMHSpeed");
static_assert(offsetof(FGearWheel_GetKMHSpeed, ReturnValue) == 0x000000, "Member 'FGearWheel_GetKMHSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getLateralForce
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetLateralForce final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetLateralForce) == 0x000008, "Wrong alignment on FGearWheel_GetLateralForce");
static_assert(sizeof(FGearWheel_GetLateralForce) == 0x000018, "Wrong size on FGearWheel_GetLateralForce");
static_assert(offsetof(FGearWheel_GetLateralForce, ReturnValue) == 0x000000, "Member 'FGearWheel_GetLateralForce::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getLateralSlip
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetLateralSlip final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetLateralSlip) == 0x000004, "Wrong alignment on FGearWheel_GetLateralSlip");
static_assert(sizeof(FGearWheel_GetLateralSlip) == 0x000004, "Wrong size on FGearWheel_GetLateralSlip");
static_assert(offsetof(FGearWheel_GetLateralSlip, ReturnValue) == 0x000000, "Member 'FGearWheel_GetLateralSlip::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getLocalHubPosition
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetLocalHubPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetLocalHubPosition) == 0x000008, "Wrong alignment on FGearWheel_GetLocalHubPosition");
static_assert(sizeof(FGearWheel_GetLocalHubPosition) == 0x000018, "Wrong size on FGearWheel_GetLocalHubPosition");
static_assert(offsetof(FGearWheel_GetLocalHubPosition, ReturnValue) == 0x000000, "Member 'FGearWheel_GetLocalHubPosition::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getLongitudinalForce
// 0x0018 (0x0018 - 0x0000)
struct FGearWheel_GetLongitudinalForce final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetLongitudinalForce) == 0x000008, "Wrong alignment on FGearWheel_GetLongitudinalForce");
static_assert(sizeof(FGearWheel_GetLongitudinalForce) == 0x000018, "Wrong size on FGearWheel_GetLongitudinalForce");
static_assert(offsetof(FGearWheel_GetLongitudinalForce, ReturnValue) == 0x000000, "Member 'FGearWheel_GetLongitudinalForce::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getLongitudinalSlip
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetLongitudinalSlip final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetLongitudinalSlip) == 0x000004, "Wrong alignment on FGearWheel_GetLongitudinalSlip");
static_assert(sizeof(FGearWheel_GetLongitudinalSlip) == 0x000004, "Wrong size on FGearWheel_GetLongitudinalSlip");
static_assert(offsetof(FGearWheel_GetLongitudinalSlip, ReturnValue) == 0x000000, "Member 'FGearWheel_GetLongitudinalSlip::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getPressure
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetPressure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetPressure) == 0x000004, "Wrong alignment on FGearWheel_GetPressure");
static_assert(sizeof(FGearWheel_GetPressure) == 0x000004, "Wrong size on FGearWheel_GetPressure");
static_assert(offsetof(FGearWheel_GetPressure, ReturnValue) == 0x000000, "Member 'FGearWheel_GetPressure::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getRadius
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetRadius) == 0x000004, "Wrong alignment on FGearWheel_GetRadius");
static_assert(sizeof(FGearWheel_GetRadius) == 0x000004, "Wrong size on FGearWheel_GetRadius");
static_assert(offsetof(FGearWheel_GetRadius, ReturnValue) == 0x000000, "Member 'FGearWheel_GetRadius::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getRayHit
// 0x00E8 (0x00E8 - 0x0000)
struct FGearWheel_GetRayHit final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetRayHit) == 0x000008, "Wrong alignment on FGearWheel_GetRayHit");
static_assert(sizeof(FGearWheel_GetRayHit) == 0x0000E8, "Wrong size on FGearWheel_GetRayHit");
static_assert(offsetof(FGearWheel_GetRayHit, ReturnValue) == 0x000000, "Member 'FGearWheel_GetRayHit::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getRPM
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetRPM) == 0x000004, "Wrong alignment on FGearWheel_GetRPM");
static_assert(sizeof(FGearWheel_GetRPM) == 0x000004, "Wrong size on FGearWheel_GetRPM");
static_assert(offsetof(FGearWheel_GetRPM, ReturnValue) == 0x000000, "Member 'FGearWheel_GetRPM::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSlipAngle
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSlipAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSlipAngle) == 0x000004, "Wrong alignment on FGearWheel_GetSlipAngle");
static_assert(sizeof(FGearWheel_GetSlipAngle) == 0x000004, "Wrong size on FGearWheel_GetSlipAngle");
static_assert(offsetof(FGearWheel_GetSlipAngle, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSlipAngle::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSlipRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSlipRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSlipRatio) == 0x000004, "Wrong alignment on FGearWheel_GetSlipRatio");
static_assert(sizeof(FGearWheel_GetSlipRatio) == 0x000004, "Wrong size on FGearWheel_GetSlipRatio");
static_assert(offsetof(FGearWheel_GetSlipRatio, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSlipRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSpeed
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSpeed) == 0x000004, "Wrong alignment on FGearWheel_GetSpeed");
static_assert(sizeof(FGearWheel_GetSpeed) == 0x000004, "Wrong size on FGearWheel_GetSpeed");
static_assert(offsetof(FGearWheel_GetSpeed, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSpeed::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSuspensionCompressedLength
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSuspensionCompressedLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSuspensionCompressedLength) == 0x000004, "Wrong alignment on FGearWheel_GetSuspensionCompressedLength");
static_assert(sizeof(FGearWheel_GetSuspensionCompressedLength) == 0x000004, "Wrong size on FGearWheel_GetSuspensionCompressedLength");
static_assert(offsetof(FGearWheel_GetSuspensionCompressedLength, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSuspensionCompressedLength::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSuspensionCompressRatio
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSuspensionCompressRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSuspensionCompressRatio) == 0x000004, "Wrong alignment on FGearWheel_GetSuspensionCompressRatio");
static_assert(sizeof(FGearWheel_GetSuspensionCompressRatio) == 0x000004, "Wrong size on FGearWheel_GetSuspensionCompressRatio");
static_assert(offsetof(FGearWheel_GetSuspensionCompressRatio, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSuspensionCompressRatio::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSuspensionSpring
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSuspensionSpring final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSuspensionSpring) == 0x000004, "Wrong alignment on FGearWheel_GetSuspensionSpring");
static_assert(sizeof(FGearWheel_GetSuspensionSpring) == 0x000004, "Wrong size on FGearWheel_GetSuspensionSpring");
static_assert(offsetof(FGearWheel_GetSuspensionSpring, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSuspensionSpring::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getSuspensionTotalLength
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetSuspensionTotalLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetSuspensionTotalLength) == 0x000004, "Wrong alignment on FGearWheel_GetSuspensionTotalLength");
static_assert(sizeof(FGearWheel_GetSuspensionTotalLength) == 0x000004, "Wrong size on FGearWheel_GetSuspensionTotalLength");
static_assert(offsetof(FGearWheel_GetSuspensionTotalLength, ReturnValue) == 0x000000, "Member 'FGearWheel_GetSuspensionTotalLength::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getWheelRPMToKMH
// 0x0004 (0x0004 - 0x0000)
struct FGearWheel_GetWheelRPMToKMH final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetWheelRPMToKMH) == 0x000004, "Wrong alignment on FGearWheel_GetWheelRPMToKMH");
static_assert(sizeof(FGearWheel_GetWheelRPMToKMH) == 0x000004, "Wrong size on FGearWheel_GetWheelRPMToKMH");
static_assert(offsetof(FGearWheel_GetWheelRPMToKMH, ReturnValue) == 0x000000, "Member 'FGearWheel_GetWheelRPMToKMH::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.getWheelSide
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_GetWheelSide final
{
public:
	EFGearWheelSide                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_GetWheelSide) == 0x000001, "Wrong alignment on FGearWheel_GetWheelSide");
static_assert(sizeof(FGearWheel_GetWheelSide) == 0x000001, "Wrong size on FGearWheel_GetWheelSide");
static_assert(offsetof(FGearWheel_GetWheelSide, ReturnValue) == 0x000000, "Member 'FGearWheel_GetWheelSide::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.hasContact
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_HasContact final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_HasContact) == 0x000001, "Wrong alignment on FGearWheel_HasContact");
static_assert(sizeof(FGearWheel_HasContact) == 0x000001, "Wrong size on FGearWheel_HasContact");
static_assert(offsetof(FGearWheel_HasContact, ReturnValue) == 0x000000, "Member 'FGearWheel_HasContact::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.hasDrive
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_HasDrive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_HasDrive) == 0x000001, "Wrong alignment on FGearWheel_HasDrive");
static_assert(sizeof(FGearWheel_HasDrive) == 0x000001, "Wrong size on FGearWheel_HasDrive");
static_assert(offsetof(FGearWheel_HasDrive, ReturnValue) == 0x000000, "Member 'FGearWheel_HasDrive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.isABSActive
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_IsABSActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_IsABSActive) == 0x000001, "Wrong alignment on FGearWheel_IsABSActive");
static_assert(sizeof(FGearWheel_IsABSActive) == 0x000001, "Wrong size on FGearWheel_IsABSActive");
static_assert(offsetof(FGearWheel_IsABSActive, ReturnValue) == 0x000000, "Member 'FGearWheel_IsABSActive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.isASRActive
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_IsASRActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_IsASRActive) == 0x000001, "Wrong alignment on FGearWheel_IsASRActive");
static_assert(sizeof(FGearWheel_IsASRActive) == 0x000001, "Wrong size on FGearWheel_IsASRActive");
static_assert(offsetof(FGearWheel_IsASRActive, ReturnValue) == 0x000000, "Member 'FGearWheel_IsASRActive::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheel.isEnable
// 0x0001 (0x0001 - 0x0000)
struct FGearWheel_IsEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheel_IsEnable) == 0x000001, "Wrong alignment on FGearWheel_IsEnable");
static_assert(sizeof(FGearWheel_IsEnable) == 0x000001, "Wrong size on FGearWheel_IsEnable");
static_assert(offsetof(FGearWheel_IsEnable, ReturnValue) == 0x000000, "Member 'FGearWheel_IsEnable::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.SetBrakeTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetBrakeTorque final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetBrakeTorque) == 0x000004, "Wrong alignment on FGearWheelOptions_SetBrakeTorque");
static_assert(sizeof(FGearWheelOptions_SetBrakeTorque) == 0x000004, "Wrong size on FGearWheelOptions_SetBrakeTorque");
static_assert(offsetof(FGearWheelOptions_SetBrakeTorque, F) == 0x000000, "Member 'FGearWheelOptions_SetBrakeTorque::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setCastOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetCastOffset final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetCastOffset) == 0x000004, "Wrong alignment on FGearWheelOptions_SetCastOffset");
static_assert(sizeof(FGearWheelOptions_SetCastOffset) == 0x000004, "Wrong size on FGearWheelOptions_SetCastOffset");
static_assert(offsetof(FGearWheelOptions_SetCastOffset, F) == 0x000000, "Member 'FGearWheelOptions_SetCastOffset::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setCompressionDamper
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetCompressionDamper final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetCompressionDamper) == 0x000004, "Wrong alignment on FGearWheelOptions_SetCompressionDamper");
static_assert(sizeof(FGearWheelOptions_SetCompressionDamper) == 0x000004, "Wrong size on FGearWheelOptions_SetCompressionDamper");
static_assert(offsetof(FGearWheelOptions_SetCompressionDamper, F) == 0x000000, "Member 'FGearWheelOptions_SetCompressionDamper::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setLateralFriction
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetLateralFriction final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetLateralFriction) == 0x000004, "Wrong alignment on FGearWheelOptions_SetLateralFriction");
static_assert(sizeof(FGearWheelOptions_SetLateralFriction) == 0x000004, "Wrong size on FGearWheelOptions_SetLateralFriction");
static_assert(offsetof(FGearWheelOptions_SetLateralFriction, F) == 0x000000, "Member 'FGearWheelOptions_SetLateralFriction::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setLateralScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetLateralScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetLateralScale) == 0x000004, "Wrong alignment on FGearWheelOptions_SetLateralScale");
static_assert(sizeof(FGearWheelOptions_SetLateralScale) == 0x000004, "Wrong size on FGearWheelOptions_SetLateralScale");
static_assert(offsetof(FGearWheelOptions_SetLateralScale, F) == 0x000000, "Member 'FGearWheelOptions_SetLateralScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setLongitudinalFriction
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetLongitudinalFriction final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetLongitudinalFriction) == 0x000004, "Wrong alignment on FGearWheelOptions_SetLongitudinalFriction");
static_assert(sizeof(FGearWheelOptions_SetLongitudinalFriction) == 0x000004, "Wrong size on FGearWheelOptions_SetLongitudinalFriction");
static_assert(offsetof(FGearWheelOptions_SetLongitudinalFriction, F) == 0x000000, "Member 'FGearWheelOptions_SetLongitudinalFriction::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setLongitudinalScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetLongitudinalScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetLongitudinalScale) == 0x000004, "Wrong alignment on FGearWheelOptions_SetLongitudinalScale");
static_assert(sizeof(FGearWheelOptions_SetLongitudinalScale) == 0x000004, "Wrong size on FGearWheelOptions_SetLongitudinalScale");
static_assert(offsetof(FGearWheelOptions_SetLongitudinalScale, F) == 0x000000, "Member 'FGearWheelOptions_SetLongitudinalScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setMass
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetMass final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetMass) == 0x000004, "Wrong alignment on FGearWheelOptions_SetMass");
static_assert(sizeof(FGearWheelOptions_SetMass) == 0x000004, "Wrong size on FGearWheelOptions_SetMass");
static_assert(offsetof(FGearWheelOptions_SetMass, F) == 0x000000, "Member 'FGearWheelOptions_SetMass::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setOverturnScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetOverturnScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetOverturnScale) == 0x000004, "Wrong alignment on FGearWheelOptions_SetOverturnScale");
static_assert(sizeof(FGearWheelOptions_SetOverturnScale) == 0x000004, "Wrong size on FGearWheelOptions_SetOverturnScale");
static_assert(offsetof(FGearWheelOptions_SetOverturnScale, F) == 0x000000, "Member 'FGearWheelOptions_SetOverturnScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setRadius
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetRadius final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetRadius) == 0x000004, "Wrong alignment on FGearWheelOptions_SetRadius");
static_assert(sizeof(FGearWheelOptions_SetRadius) == 0x000004, "Wrong size on FGearWheelOptions_SetRadius");
static_assert(offsetof(FGearWheelOptions_SetRadius, F) == 0x000000, "Member 'FGearWheelOptions_SetRadius::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setRelaxationDamper
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetRelaxationDamper final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetRelaxationDamper) == 0x000004, "Wrong alignment on FGearWheelOptions_SetRelaxationDamper");
static_assert(sizeof(FGearWheelOptions_SetRelaxationDamper) == 0x000004, "Wrong size on FGearWheelOptions_SetRelaxationDamper");
static_assert(offsetof(FGearWheelOptions_SetRelaxationDamper, F) == 0x000000, "Member 'FGearWheelOptions_SetRelaxationDamper::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setRimOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetRimOffset final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetRimOffset) == 0x000004, "Wrong alignment on FGearWheelOptions_SetRimOffset");
static_assert(sizeof(FGearWheelOptions_SetRimOffset) == 0x000004, "Wrong size on FGearWheelOptions_SetRimOffset");
static_assert(offsetof(FGearWheelOptions_SetRimOffset, F) == 0x000000, "Member 'FGearWheelOptions_SetRimOffset::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setRollMomentScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetRollMomentScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetRollMomentScale) == 0x000004, "Wrong alignment on FGearWheelOptions_SetRollMomentScale");
static_assert(sizeof(FGearWheelOptions_SetRollMomentScale) == 0x000004, "Wrong size on FGearWheelOptions_SetRollMomentScale");
static_assert(offsetof(FGearWheelOptions_SetRollMomentScale, F) == 0x000000, "Member 'FGearWheelOptions_SetRollMomentScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setSelfAlignScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetSelfAlignScale final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetSelfAlignScale) == 0x000004, "Wrong alignment on FGearWheelOptions_SetSelfAlignScale");
static_assert(sizeof(FGearWheelOptions_SetSelfAlignScale) == 0x000004, "Wrong size on FGearWheelOptions_SetSelfAlignScale");
static_assert(offsetof(FGearWheelOptions_SetSelfAlignScale, F) == 0x000000, "Member 'FGearWheelOptions_SetSelfAlignScale::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setSuspensionDownTravel
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetSuspensionDownTravel final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetSuspensionDownTravel) == 0x000004, "Wrong alignment on FGearWheelOptions_SetSuspensionDownTravel");
static_assert(sizeof(FGearWheelOptions_SetSuspensionDownTravel) == 0x000004, "Wrong size on FGearWheelOptions_SetSuspensionDownTravel");
static_assert(offsetof(FGearWheelOptions_SetSuspensionDownTravel, F) == 0x000000, "Member 'FGearWheelOptions_SetSuspensionDownTravel::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setSuspensionPreload
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetSuspensionPreload final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetSuspensionPreload) == 0x000004, "Wrong alignment on FGearWheelOptions_SetSuspensionPreload");
static_assert(sizeof(FGearWheelOptions_SetSuspensionPreload) == 0x000004, "Wrong size on FGearWheelOptions_SetSuspensionPreload");
static_assert(offsetof(FGearWheelOptions_SetSuspensionPreload, F) == 0x000000, "Member 'FGearWheelOptions_SetSuspensionPreload::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setSuspensionSpring
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetSuspensionSpring final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetSuspensionSpring) == 0x000004, "Wrong alignment on FGearWheelOptions_SetSuspensionSpring");
static_assert(sizeof(FGearWheelOptions_SetSuspensionSpring) == 0x000004, "Wrong size on FGearWheelOptions_SetSuspensionSpring");
static_assert(offsetof(FGearWheelOptions_SetSuspensionSpring, F) == 0x000000, "Member 'FGearWheelOptions_SetSuspensionSpring::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setSuspensionUpTravel
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetSuspensionUpTravel final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetSuspensionUpTravel) == 0x000004, "Wrong alignment on FGearWheelOptions_SetSuspensionUpTravel");
static_assert(sizeof(FGearWheelOptions_SetSuspensionUpTravel) == 0x000004, "Wrong size on FGearWheelOptions_SetSuspensionUpTravel");
static_assert(offsetof(FGearWheelOptions_SetSuspensionUpTravel, F) == 0x000000, "Member 'FGearWheelOptions_SetSuspensionUpTravel::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setTireModel
// 0x0008 (0x0008 - 0x0000)
struct FGearWheelOptions_SetTireModel final
{
public:
	class UFGearTire*                             T;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetTireModel) == 0x000008, "Wrong alignment on FGearWheelOptions_SetTireModel");
static_assert(sizeof(FGearWheelOptions_SetTireModel) == 0x000008, "Wrong size on FGearWheelOptions_SetTireModel");
static_assert(offsetof(FGearWheelOptions_SetTireModel, T) == 0x000000, "Member 'FGearWheelOptions_SetTireModel::T' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setTirePressure
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetTirePressure final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetTirePressure) == 0x000004, "Wrong alignment on FGearWheelOptions_SetTirePressure");
static_assert(sizeof(FGearWheelOptions_SetTirePressure) == 0x000004, "Wrong size on FGearWheelOptions_SetTirePressure");
static_assert(offsetof(FGearWheelOptions_SetTirePressure, F) == 0x000000, "Member 'FGearWheelOptions_SetTirePressure::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.setWidth
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_SetWidth final
{
public:
	float                                         F;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_SetWidth) == 0x000004, "Wrong alignment on FGearWheelOptions_SetWidth");
static_assert(sizeof(FGearWheelOptions_SetWidth) == 0x000004, "Wrong size on FGearWheelOptions_SetWidth");
static_assert(offsetof(FGearWheelOptions_SetWidth, F) == 0x000000, "Member 'FGearWheelOptions_SetWidth::F' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getBrakeTorque
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetBrakeTorque final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetBrakeTorque) == 0x000004, "Wrong alignment on FGearWheelOptions_GetBrakeTorque");
static_assert(sizeof(FGearWheelOptions_GetBrakeTorque) == 0x000004, "Wrong size on FGearWheelOptions_GetBrakeTorque");
static_assert(offsetof(FGearWheelOptions_GetBrakeTorque, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetBrakeTorque::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getCastOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetCastOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetCastOffset) == 0x000004, "Wrong alignment on FGearWheelOptions_GetCastOffset");
static_assert(sizeof(FGearWheelOptions_GetCastOffset) == 0x000004, "Wrong size on FGearWheelOptions_GetCastOffset");
static_assert(offsetof(FGearWheelOptions_GetCastOffset, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetCastOffset::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getCompressionDamper
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetCompressionDamper final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetCompressionDamper) == 0x000004, "Wrong alignment on FGearWheelOptions_GetCompressionDamper");
static_assert(sizeof(FGearWheelOptions_GetCompressionDamper) == 0x000004, "Wrong size on FGearWheelOptions_GetCompressionDamper");
static_assert(offsetof(FGearWheelOptions_GetCompressionDamper, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetCompressionDamper::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getLateralFriction
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetLateralFriction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetLateralFriction) == 0x000004, "Wrong alignment on FGearWheelOptions_GetLateralFriction");
static_assert(sizeof(FGearWheelOptions_GetLateralFriction) == 0x000004, "Wrong size on FGearWheelOptions_GetLateralFriction");
static_assert(offsetof(FGearWheelOptions_GetLateralFriction, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetLateralFriction::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getLateralScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetLateralScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetLateralScale) == 0x000004, "Wrong alignment on FGearWheelOptions_GetLateralScale");
static_assert(sizeof(FGearWheelOptions_GetLateralScale) == 0x000004, "Wrong size on FGearWheelOptions_GetLateralScale");
static_assert(offsetof(FGearWheelOptions_GetLateralScale, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetLateralScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getLongitudinalFriction
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetLongitudinalFriction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetLongitudinalFriction) == 0x000004, "Wrong alignment on FGearWheelOptions_GetLongitudinalFriction");
static_assert(sizeof(FGearWheelOptions_GetLongitudinalFriction) == 0x000004, "Wrong size on FGearWheelOptions_GetLongitudinalFriction");
static_assert(offsetof(FGearWheelOptions_GetLongitudinalFriction, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetLongitudinalFriction::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getLongitudinalScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetLongitudinalScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetLongitudinalScale) == 0x000004, "Wrong alignment on FGearWheelOptions_GetLongitudinalScale");
static_assert(sizeof(FGearWheelOptions_GetLongitudinalScale) == 0x000004, "Wrong size on FGearWheelOptions_GetLongitudinalScale");
static_assert(offsetof(FGearWheelOptions_GetLongitudinalScale, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetLongitudinalScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.GetMass
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetMass final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetMass) == 0x000004, "Wrong alignment on FGearWheelOptions_GetMass");
static_assert(sizeof(FGearWheelOptions_GetMass) == 0x000004, "Wrong size on FGearWheelOptions_GetMass");
static_assert(offsetof(FGearWheelOptions_GetMass, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetMass::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getOverturnScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetOverturnScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetOverturnScale) == 0x000004, "Wrong alignment on FGearWheelOptions_GetOverturnScale");
static_assert(sizeof(FGearWheelOptions_GetOverturnScale) == 0x000004, "Wrong size on FGearWheelOptions_GetOverturnScale");
static_assert(offsetof(FGearWheelOptions_GetOverturnScale, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetOverturnScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getRadius
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetRadius) == 0x000004, "Wrong alignment on FGearWheelOptions_GetRadius");
static_assert(sizeof(FGearWheelOptions_GetRadius) == 0x000004, "Wrong size on FGearWheelOptions_GetRadius");
static_assert(offsetof(FGearWheelOptions_GetRadius, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetRadius::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getRelaxationDamper
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetRelaxationDamper final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetRelaxationDamper) == 0x000004, "Wrong alignment on FGearWheelOptions_GetRelaxationDamper");
static_assert(sizeof(FGearWheelOptions_GetRelaxationDamper) == 0x000004, "Wrong size on FGearWheelOptions_GetRelaxationDamper");
static_assert(offsetof(FGearWheelOptions_GetRelaxationDamper, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetRelaxationDamper::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getRimOffset
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetRimOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetRimOffset) == 0x000004, "Wrong alignment on FGearWheelOptions_GetRimOffset");
static_assert(sizeof(FGearWheelOptions_GetRimOffset) == 0x000004, "Wrong size on FGearWheelOptions_GetRimOffset");
static_assert(offsetof(FGearWheelOptions_GetRimOffset, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetRimOffset::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getRollMomentScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetRollMomentScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetRollMomentScale) == 0x000004, "Wrong alignment on FGearWheelOptions_GetRollMomentScale");
static_assert(sizeof(FGearWheelOptions_GetRollMomentScale) == 0x000004, "Wrong size on FGearWheelOptions_GetRollMomentScale");
static_assert(offsetof(FGearWheelOptions_GetRollMomentScale, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetRollMomentScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getSelfAlignScale
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetSelfAlignScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetSelfAlignScale) == 0x000004, "Wrong alignment on FGearWheelOptions_GetSelfAlignScale");
static_assert(sizeof(FGearWheelOptions_GetSelfAlignScale) == 0x000004, "Wrong size on FGearWheelOptions_GetSelfAlignScale");
static_assert(offsetof(FGearWheelOptions_GetSelfAlignScale, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetSelfAlignScale::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getSuspensionDownTravel
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetSuspensionDownTravel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetSuspensionDownTravel) == 0x000004, "Wrong alignment on FGearWheelOptions_GetSuspensionDownTravel");
static_assert(sizeof(FGearWheelOptions_GetSuspensionDownTravel) == 0x000004, "Wrong size on FGearWheelOptions_GetSuspensionDownTravel");
static_assert(offsetof(FGearWheelOptions_GetSuspensionDownTravel, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetSuspensionDownTravel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getSuspensionPreload
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetSuspensionPreload final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetSuspensionPreload) == 0x000004, "Wrong alignment on FGearWheelOptions_GetSuspensionPreload");
static_assert(sizeof(FGearWheelOptions_GetSuspensionPreload) == 0x000004, "Wrong size on FGearWheelOptions_GetSuspensionPreload");
static_assert(offsetof(FGearWheelOptions_GetSuspensionPreload, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetSuspensionPreload::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getSuspensionSpring
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetSuspensionSpring final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetSuspensionSpring) == 0x000004, "Wrong alignment on FGearWheelOptions_GetSuspensionSpring");
static_assert(sizeof(FGearWheelOptions_GetSuspensionSpring) == 0x000004, "Wrong size on FGearWheelOptions_GetSuspensionSpring");
static_assert(offsetof(FGearWheelOptions_GetSuspensionSpring, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetSuspensionSpring::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getSuspensionUpTravel
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetSuspensionUpTravel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetSuspensionUpTravel) == 0x000004, "Wrong alignment on FGearWheelOptions_GetSuspensionUpTravel");
static_assert(sizeof(FGearWheelOptions_GetSuspensionUpTravel) == 0x000004, "Wrong size on FGearWheelOptions_GetSuspensionUpTravel");
static_assert(offsetof(FGearWheelOptions_GetSuspensionUpTravel, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetSuspensionUpTravel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getTireModel
// 0x0008 (0x0008 - 0x0000)
struct FGearWheelOptions_GetTireModel final
{
public:
	class UFGearTire*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetTireModel) == 0x000008, "Wrong alignment on FGearWheelOptions_GetTireModel");
static_assert(sizeof(FGearWheelOptions_GetTireModel) == 0x000008, "Wrong size on FGearWheelOptions_GetTireModel");
static_assert(offsetof(FGearWheelOptions_GetTireModel, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetTireModel::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getTirePressure
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetTirePressure final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetTirePressure) == 0x000004, "Wrong alignment on FGearWheelOptions_GetTirePressure");
static_assert(sizeof(FGearWheelOptions_GetTirePressure) == 0x000004, "Wrong size on FGearWheelOptions_GetTirePressure");
static_assert(offsetof(FGearWheelOptions_GetTirePressure, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetTirePressure::ReturnValue' has a wrong offset!");

// Function FGearPlugin.FGearWheelOptions.getWidth
// 0x0004 (0x0004 - 0x0000)
struct FGearWheelOptions_GetWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearWheelOptions_GetWidth) == 0x000004, "Wrong alignment on FGearWheelOptions_GetWidth");
static_assert(sizeof(FGearWheelOptions_GetWidth) == 0x000004, "Wrong size on FGearWheelOptions_GetWidth");
static_assert(offsetof(FGearWheelOptions_GetWidth, ReturnValue) == 0x000000, "Member 'FGearWheelOptions_GetWidth::ReturnValue' has a wrong offset!");

}

