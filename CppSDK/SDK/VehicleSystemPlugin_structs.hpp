#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleSystemPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum VehicleSystemPlugin.NetworkRoles
// NumValues: 0x0006
enum class ENetworkRoles : uint8
{
	None                                     = 0,
	Owner                                    = 1,
	Server                                   = 2,
	Client                                   = 3,
	ClientSpawned                            = 4,
	NetworkRoles_MAX                         = 5,
};

// Enum VehicleSystemPlugin.SteeringSmoothingType
// NumValues: 0x0004
enum class ESteeringSmoothingType : uint8
{
	Instant                                  = 0,
	Constant                                 = 1,
	Ease                                     = 2,
	SteeringSmoothingType_MAX                = 3,
};

// Enum VehicleSystemPlugin.EWheelMode
// NumValues: 0x0003
enum class EWheelMode : uint8
{
	Raycast                                  = 0,
	Physics                                  = 1,
	EWheelMode_MAX                           = 2,
};

// ScriptStruct VehicleSystemPlugin.NetState
// 0x0068 (0x0068 - 0x0000)
struct FNetState final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Localtimestamp;                                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNetState) == 0x000008, "Wrong alignment on FNetState");
static_assert(sizeof(FNetState) == 0x000068, "Wrong size on FNetState");
static_assert(offsetof(FNetState, Timestamp) == 0x000000, "Member 'FNetState::Timestamp' has a wrong offset!");
static_assert(offsetof(FNetState, Localtimestamp) == 0x000004, "Member 'FNetState::Localtimestamp' has a wrong offset!");
static_assert(offsetof(FNetState, Position) == 0x000008, "Member 'FNetState::Position' has a wrong offset!");
static_assert(offsetof(FNetState, Rotation) == 0x000020, "Member 'FNetState::Rotation' has a wrong offset!");
static_assert(offsetof(FNetState, Velocity) == 0x000038, "Member 'FNetState::Velocity' has a wrong offset!");
static_assert(offsetof(FNetState, AngularVelocity) == 0x000050, "Member 'FNetState::AngularVelocity' has a wrong offset!");

// ScriptStruct VehicleSystemPlugin.VehicleGear
// 0x0020 (0x0020 - 0x0000)
struct FVehicleGear final
{
public:
	float                                         EndSpeed;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartSpeed;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpShift;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownShift;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HighRPM;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowRPM;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTorque;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTorque;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleGear) == 0x000004, "Wrong alignment on FVehicleGear");
static_assert(sizeof(FVehicleGear) == 0x000020, "Wrong size on FVehicleGear");
static_assert(offsetof(FVehicleGear, EndSpeed) == 0x000000, "Member 'FVehicleGear::EndSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleGear, StartSpeed) == 0x000004, "Member 'FVehicleGear::StartSpeed' has a wrong offset!");
static_assert(offsetof(FVehicleGear, UpShift) == 0x000008, "Member 'FVehicleGear::UpShift' has a wrong offset!");
static_assert(offsetof(FVehicleGear, DownShift) == 0x00000C, "Member 'FVehicleGear::DownShift' has a wrong offset!");
static_assert(offsetof(FVehicleGear, HighRPM) == 0x000010, "Member 'FVehicleGear::HighRPM' has a wrong offset!");
static_assert(offsetof(FVehicleGear, LowRPM) == 0x000014, "Member 'FVehicleGear::LowRPM' has a wrong offset!");
static_assert(offsetof(FVehicleGear, MaxTorque) == 0x000018, "Member 'FVehicleGear::MaxTorque' has a wrong offset!");
static_assert(offsetof(FVehicleGear, MinTorque) == 0x00001C, "Member 'FVehicleGear::MinTorque' has a wrong offset!");

// ScriptStruct VehicleSystemPlugin.DebugForce
// 0x0038 (0x0038 - 0x0000)
struct FDebugForce final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Force;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelMode                                    WheelMode;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDebugForce) == 0x000008, "Wrong alignment on FDebugForce");
static_assert(sizeof(FDebugForce) == 0x000038, "Wrong size on FDebugForce");
static_assert(offsetof(FDebugForce, Location) == 0x000000, "Member 'FDebugForce::Location' has a wrong offset!");
static_assert(offsetof(FDebugForce, Force) == 0x000018, "Member 'FDebugForce::Force' has a wrong offset!");
static_assert(offsetof(FDebugForce, WheelMode) == 0x000030, "Member 'FDebugForce::WheelMode' has a wrong offset!");

// ScriptStruct VehicleSystemPlugin.AVS_Inputs
// 0x0018 (0x0018 - 0x0000)
struct FAVS_Inputs final
{
public:
	float                                         Steering;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Throttle;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brake;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Handbrake;                                         // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Torque;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseTorque;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAVS_Inputs) == 0x000004, "Wrong alignment on FAVS_Inputs");
static_assert(sizeof(FAVS_Inputs) == 0x000018, "Wrong size on FAVS_Inputs");
static_assert(offsetof(FAVS_Inputs, Steering) == 0x000000, "Member 'FAVS_Inputs::Steering' has a wrong offset!");
static_assert(offsetof(FAVS_Inputs, Throttle) == 0x000004, "Member 'FAVS_Inputs::Throttle' has a wrong offset!");
static_assert(offsetof(FAVS_Inputs, Brake) == 0x000008, "Member 'FAVS_Inputs::Brake' has a wrong offset!");
static_assert(offsetof(FAVS_Inputs, Handbrake) == 0x00000C, "Member 'FAVS_Inputs::Handbrake' has a wrong offset!");
static_assert(offsetof(FAVS_Inputs, Torque) == 0x000010, "Member 'FAVS_Inputs::Torque' has a wrong offset!");
static_assert(offsetof(FAVS_Inputs, ReverseTorque) == 0x000014, "Member 'FAVS_Inputs::ReverseTorque' has a wrong offset!");

// ScriptStruct VehicleSystemPlugin.AVS1_Wheel_State
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAVS1_Wheel_State final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAVS1_Wheel_State) == 0x000008, "Wrong alignment on FAVS1_Wheel_State");
static_assert(sizeof(FAVS1_Wheel_State) == 0x000018, "Wrong size on FAVS1_Wheel_State");

// ScriptStruct VehicleSystemPlugin.AVS1_Wheel_Output
// 0x00F0 (0x00F0 - 0x0000)
struct FAVS1_Wheel_Output final
{
public:
	struct FHitResult                             LastTrace;                                         // 0x0000(0x00E8)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         AngularVelocity;                                   // 0x00E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpringLength;                               // 0x00EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAVS1_Wheel_Output) == 0x000008, "Wrong alignment on FAVS1_Wheel_Output");
static_assert(sizeof(FAVS1_Wheel_Output) == 0x0000F0, "Wrong size on FAVS1_Wheel_Output");
static_assert(offsetof(FAVS1_Wheel_Output, LastTrace) == 0x000000, "Member 'FAVS1_Wheel_Output::LastTrace' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Output, AngularVelocity) == 0x0000E8, "Member 'FAVS1_Wheel_Output::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Output, CurrentSpringLength) == 0x0000EC, "Member 'FAVS1_Wheel_Output::CurrentSpringLength' has a wrong offset!");

// ScriptStruct VehicleSystemPlugin.AVS1_Wheel_Config
// 0x00E0 (0x00E0 - 0x0000)
struct FAVS1_Wheel_Config final
{
public:
	struct FTransform                             WheelLocalTransform;                               // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0060(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    WheelPrim;                                         // 0x0068(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWheelMode                                    WheelMode;                                         // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TraceIgnoreActors;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WheelMass;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoWheelRadius;                                   // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelRadius;                                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TireFriction;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDrivingWheel;                                    // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSteerableWheel;                                  // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSteeringAngle;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertTorque;                                      // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvertSteering;                                    // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBrakingWheel;                                    // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B3[0x1];                                       // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrakePressure;                                     // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RollingResistance;                                 // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHandbrakeWheel;                                  // 0x00BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EditorPreview;                                     // 0x00BD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringLength;                                      // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringStrength;                                    // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringDamping;                                     // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelRadiusM;                                      // 0x00CC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Inertia;                                           // 0x00D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0xC];                                       // 0x00D4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAVS1_Wheel_Config) == 0x000010, "Wrong alignment on FAVS1_Wheel_Config");
static_assert(sizeof(FAVS1_Wheel_Config) == 0x0000E0, "Wrong size on FAVS1_Wheel_Config");
static_assert(offsetof(FAVS1_Wheel_Config, WheelLocalTransform) == 0x000000, "Member 'FAVS1_Wheel_Config::WheelLocalTransform' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, IsLocked) == 0x000060, "Member 'FAVS1_Wheel_Config::IsLocked' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, WheelPrim) == 0x000068, "Member 'FAVS1_Wheel_Config::WheelPrim' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, WheelMode) == 0x000070, "Member 'FAVS1_Wheel_Config::WheelMode' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, TraceChannel) == 0x000071, "Member 'FAVS1_Wheel_Config::TraceChannel' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, TraceIgnoreActors) == 0x000078, "Member 'FAVS1_Wheel_Config::TraceIgnoreActors' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, WheelMass) == 0x000088, "Member 'FAVS1_Wheel_Config::WheelMass' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, AutoWheelRadius) == 0x00008C, "Member 'FAVS1_Wheel_Config::AutoWheelRadius' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, WheelRadius) == 0x000090, "Member 'FAVS1_Wheel_Config::WheelRadius' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, TireFriction) == 0x000098, "Member 'FAVS1_Wheel_Config::TireFriction' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, IsDrivingWheel) == 0x0000A8, "Member 'FAVS1_Wheel_Config::IsDrivingWheel' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, IsSteerableWheel) == 0x0000A9, "Member 'FAVS1_Wheel_Config::IsSteerableWheel' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, MaxSteeringAngle) == 0x0000AC, "Member 'FAVS1_Wheel_Config::MaxSteeringAngle' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, InvertTorque) == 0x0000B0, "Member 'FAVS1_Wheel_Config::InvertTorque' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, InvertSteering) == 0x0000B1, "Member 'FAVS1_Wheel_Config::InvertSteering' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, IsBrakingWheel) == 0x0000B2, "Member 'FAVS1_Wheel_Config::IsBrakingWheel' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, BrakePressure) == 0x0000B4, "Member 'FAVS1_Wheel_Config::BrakePressure' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, RollingResistance) == 0x0000B8, "Member 'FAVS1_Wheel_Config::RollingResistance' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, IsHandbrakeWheel) == 0x0000BC, "Member 'FAVS1_Wheel_Config::IsHandbrakeWheel' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, EditorPreview) == 0x0000BD, "Member 'FAVS1_Wheel_Config::EditorPreview' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, SpringLength) == 0x0000C0, "Member 'FAVS1_Wheel_Config::SpringLength' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, SpringStrength) == 0x0000C4, "Member 'FAVS1_Wheel_Config::SpringStrength' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, SpringDamping) == 0x0000C8, "Member 'FAVS1_Wheel_Config::SpringDamping' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, WheelRadiusM) == 0x0000CC, "Member 'FAVS1_Wheel_Config::WheelRadiusM' has a wrong offset!");
static_assert(offsetof(FAVS1_Wheel_Config, Inertia) == 0x0000D0, "Member 'FAVS1_Wheel_Config::Inertia' has a wrong offset!");

}

