#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DragWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass DragWidget.DragWidget_C
// 0x0110 (0x0390 - 0x0280)
class UDragWidget_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_ImageCanvas;                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_Root;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ColorGradient;                               // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ItemIcon;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Count;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              Size;                                              // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TSoftObjectPtr<class UPaperSprite>            Image;                                             // 0x02C8(0x0030)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ParentSlot;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                ContainersDragOver;                                // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FKey                                   RotateKey;                                         // 0x0310(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsKeyDown;                                         // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotationChanged_;                                  // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            OnSlot;                                            // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDragDropOperation*                     Operation;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSlotRotated_;                                    // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InitImageRot;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          AdjustLocToMouse;                                  // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSplit_;                                          // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ItemDragTexture;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Candrop;                                           // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CanDropSprite;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CannotDropSprite;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MoveOffset;                                        // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InitPivotIndex;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddContainer(const class UJSIContainer_C*& NewContainer);
	void Construct();
	void Destruct();
	void ExecuteUbergraph_DragWidget(int32 EntryPoint);
	void GetPivotIndex(int32* Ind);
	void GetRotationOffset(const struct FVector2D& Param_MoveOffset, struct FVector2D* RotationOffset);
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void RotateKeyDown();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

	struct FVector2D GetMoveOffset() const;
	void GetSlotBrushes(struct FSlateBrush* BG_Brush, struct FSlateBrush* Gradient_Brush) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DragWidget_C">();
	}
	static class UDragWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragWidget_C>();
	}
};
static_assert(alignof(UDragWidget_C) == 0x000008, "Wrong alignment on UDragWidget_C");
static_assert(sizeof(UDragWidget_C) == 0x000390, "Wrong size on UDragWidget_C");
static_assert(offsetof(UDragWidget_C, UberGraphFrame) == 0x000280, "Member 'UDragWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, CanvasPanel_ImageCanvas) == 0x000288, "Member 'UDragWidget_C::CanvasPanel_ImageCanvas' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, CanvasPanel_Root) == 0x000290, "Member 'UDragWidget_C::CanvasPanel_Root' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Image_BG) == 0x000298, "Member 'UDragWidget_C::Image_BG' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Image_ColorGradient) == 0x0002A0, "Member 'UDragWidget_C::Image_ColorGradient' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Image_ItemIcon) == 0x0002A8, "Member 'UDragWidget_C::Image_ItemIcon' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, TextBlock_Count) == 0x0002B0, "Member 'UDragWidget_C::TextBlock_Count' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Size) == 0x0002B8, "Member 'UDragWidget_C::Size' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Image) == 0x0002C8, "Member 'UDragWidget_C::Image' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, ParentSlot) == 0x0002F8, "Member 'UDragWidget_C::ParentSlot' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, ContainersDragOver) == 0x000300, "Member 'UDragWidget_C::ContainersDragOver' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, RotateKey) == 0x000310, "Member 'UDragWidget_C::RotateKey' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, IsKeyDown) == 0x000328, "Member 'UDragWidget_C::IsKeyDown' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, RotationChanged_) == 0x000329, "Member 'UDragWidget_C::RotationChanged_' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, OnSlot) == 0x000330, "Member 'UDragWidget_C::OnSlot' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Operation) == 0x000338, "Member 'UDragWidget_C::Operation' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, IsSlotRotated_) == 0x000340, "Member 'UDragWidget_C::IsSlotRotated_' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, InitImageRot) == 0x000348, "Member 'UDragWidget_C::InitImageRot' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, AdjustLocToMouse) == 0x000350, "Member 'UDragWidget_C::AdjustLocToMouse' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, IsSplit_) == 0x000351, "Member 'UDragWidget_C::IsSplit_' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, ItemDragTexture) == 0x000358, "Member 'UDragWidget_C::ItemDragTexture' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, Candrop) == 0x000360, "Member 'UDragWidget_C::Candrop' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, CanDropSprite) == 0x000368, "Member 'UDragWidget_C::CanDropSprite' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, CannotDropSprite) == 0x000370, "Member 'UDragWidget_C::CannotDropSprite' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, MoveOffset) == 0x000378, "Member 'UDragWidget_C::MoveOffset' has a wrong offset!");
static_assert(offsetof(UDragWidget_C, InitPivotIndex) == 0x000388, "Member 'UDragWidget_C::InitPivotIndex' has a wrong offset!");

}

