#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseProjectile

#include "Basic.hpp"

#include "BPS_WeaponData_structs.hpp"
#include "BPE_AmmoClass_structs.hpp"
#include "BPE_AmmoType_structs.hpp"
#include "Engine_structs.hpp"
#include "BPS_DamageInfo_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "Survival_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseProjectile.BP_BaseProjectile_C
// 0x06E0 (0x09F8 - 0x0318)
class ABP_BaseProjectile_C final : public AProjectileBullet
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        Damage;                                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TraceDuration;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DecalSize;                                         // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    ImpactSound;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FBPS_DamageInfo                        DamageInfo;                                        // 0x0350(0x0098)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FHitResult                             HitResult;                                         // 0x03E8(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FBPS_WeaponData                        WeaponData;                                        // 0x04D0(0x04C0)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      HitSurvivalPlayer;                                 // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                PrevVelocity;                                      // 0x0998(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceInMeters;                                  // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundNearMove;                                     // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          LocallySpawned;                                    // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x09C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C2[0x6];                                      // 0x09C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvPC_C*                              LocalPlayer;                                       // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DragCoef;                                          // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_AmmoType                                 AmmoType;                                          // 0x09D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_9D9[0x3];                                      // 0x09D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitNoiseRange;                                     // 0x09DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnNoiseRange;                                   // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ProjectilePooled;                                  // 0x09E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_9E5[0x3];                                      // 0x09E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultDeerDamage;                                 // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_AmmoClass                                AmmoClass;                                         // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AngleBetweenVectorsInDegrees(const struct FVector& Vector1, const struct FVector& Vector2, double* Angle);
	void BndEvt__BP_BaseProjectile_ProjectileMovement_K2Node_ComponentBoundEvent_0_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void BndEvt__BP_BaseProjectile_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_BaseProjectile_Sphere_K2Node_ComponentBoundEvent_3_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void CalculateDamageBySpeed(double Param_Damage, double* Result);
	void CalculateDistance();
	void CalculateSpeed();
	void ComputeExitLocation(const struct FHitResult& Param_HitResult, const struct FVector& ImpactVelocity, struct FVector* ExitLocation, bool* ResultFound, struct FVector* ExitNormal);
	void DecideWhetherToPenetrate(const struct FHitResult& Hit, const struct FVector& ImpactVelocity, bool* Penetrate);
	void DecideWhetherToPenetrate_Simple(const struct FHitResult& Hit, bool* Penetrate);
	void DelayDecalSpawn(const struct FVector& Location, const struct FVector& Forward, class UMaterialInterface* DecalMaterial, const TArray<class AActor*>& ActorsToIgnore);
	void ExecuteUbergraph_BP_BaseProjectile(int32 EntryPoint);
	void GetNewSpeed(const struct FHitResult& Hit, const struct FVector& ExitLocation, const struct FVector& ImpactVelocity, double* NewSpeed);
	struct FLinearColor GetTraceColor(const struct FVector& A);
	void Hit_VisualLow(const struct FHitResult& Hit);
	void Hit_VisualPart(const struct FHitResult& Hit);
	void HitEvent(class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Param_HitResult);
	void HitHandling(const struct FHitResult& Hit, bool Param_Owner, struct FVector* ImpactPoint, struct FVector* ImpactNormal, EPhysicalSurface* SurfaceType);
	void HitZombie(struct FHitResult& Param_HitResult, class AZombie_C*& HittedZombie, const struct FVector& NormalImpulse);
	void LocalImpulse(class UPrimitiveComponent* Target);
	void MultiNearProjectile(class ASurvivalPlayer_V2_C* HitPlayer);
	void OwnerVisualPart(const struct FHitResult& Hit);
	void PlayHitParticle(EPhysicalSurface Enumerator, const struct FVector& InputPin, const struct FVector& Forward, class FName bone, class USceneComponent* Component_To_Attach, class AActor* HitActor, const struct FVector& Hit_Normal, bool NoSound);
	void ReceiveBeginPlay();
	void SimulateLocalMontage(class UObject* Attacked, class FName BoneName, double Param_Damage, const struct FVector& HitLocation);
	void VaryTrajectory(const struct FVector& SurfaceNormal, const struct FVector& ImpactVelocity, class ABP_BaseProjectile_C* Projectile);

	void GetDecalMaterial(EPhysicalSurface SurfaceType, class UMaterialInstanceDynamic** DynMat, struct FVector* Size, double* Size_X, double* Size_Y, double* Size_Z) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseProjectile_C">();
	}
	static class ABP_BaseProjectile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseProjectile_C>();
	}
};
static_assert(alignof(ABP_BaseProjectile_C) == 0x000008, "Wrong alignment on ABP_BaseProjectile_C");
static_assert(sizeof(ABP_BaseProjectile_C) == 0x0009F8, "Wrong size on ABP_BaseProjectile_C");
static_assert(offsetof(ABP_BaseProjectile_C, UberGraphFrame) == 0x000318, "Member 'ABP_BaseProjectile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, Damage) == 0x000320, "Member 'ABP_BaseProjectile_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, TraceDuration) == 0x000328, "Member 'ABP_BaseProjectile_C::TraceDuration' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, DecalSize) == 0x000330, "Member 'ABP_BaseProjectile_C::DecalSize' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, ImpactSound) == 0x000348, "Member 'ABP_BaseProjectile_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, DamageInfo) == 0x000350, "Member 'ABP_BaseProjectile_C::DamageInfo' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, HitResult) == 0x0003E8, "Member 'ABP_BaseProjectile_C::HitResult' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, WeaponData) == 0x0004D0, "Member 'ABP_BaseProjectile_C::WeaponData' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, HitSurvivalPlayer) == 0x000990, "Member 'ABP_BaseProjectile_C::HitSurvivalPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, PrevVelocity) == 0x000998, "Member 'ABP_BaseProjectile_C::PrevVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, DistanceInMeters) == 0x0009B0, "Member 'ABP_BaseProjectile_C::DistanceInMeters' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, SoundNearMove) == 0x0009B8, "Member 'ABP_BaseProjectile_C::SoundNearMove' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, LocallySpawned) == 0x0009C0, "Member 'ABP_BaseProjectile_C::LocallySpawned' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, NewVar_0) == 0x0009C1, "Member 'ABP_BaseProjectile_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, LocalPlayer) == 0x0009C8, "Member 'ABP_BaseProjectile_C::LocalPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, DragCoef) == 0x0009D0, "Member 'ABP_BaseProjectile_C::DragCoef' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, AmmoType) == 0x0009D8, "Member 'ABP_BaseProjectile_C::AmmoType' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, HitNoiseRange) == 0x0009DC, "Member 'ABP_BaseProjectile_C::HitNoiseRange' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, SpawnNoiseRange) == 0x0009E0, "Member 'ABP_BaseProjectile_C::SpawnNoiseRange' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, ProjectilePooled) == 0x0009E4, "Member 'ABP_BaseProjectile_C::ProjectilePooled' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, DefaultDeerDamage) == 0x0009E8, "Member 'ABP_BaseProjectile_C::DefaultDeerDamage' has a wrong offset!");
static_assert(offsetof(ABP_BaseProjectile_C, AmmoClass) == 0x0009F0, "Member 'ABP_BaseProjectile_C::AmmoClass' has a wrong offset!");

}

