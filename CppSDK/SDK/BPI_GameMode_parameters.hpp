#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameMode

#include "Basic.hpp"


namespace SDK::Params
{

// Function BPI_GameMode.BPI_GameMode_C.GetAISpawnerManager
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_GetAISpawnerManager final
{
public:
	class AAISpawnManager_C*                      AISpawnerManager;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_GetAISpawnerManager) == 0x000008, "Wrong alignment on BPI_GameMode_C_GetAISpawnerManager");
static_assert(sizeof(BPI_GameMode_C_GetAISpawnerManager) == 0x000008, "Wrong size on BPI_GameMode_C_GetAISpawnerManager");
static_assert(offsetof(BPI_GameMode_C_GetAISpawnerManager, AISpawnerManager) == 0x000000, "Member 'BPI_GameMode_C_GetAISpawnerManager::AISpawnerManager' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.GetBunkerPlayerStart
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_GetBunkerPlayerStart final
{
public:
	class AActor*                                 Start;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_GetBunkerPlayerStart) == 0x000008, "Wrong alignment on BPI_GameMode_C_GetBunkerPlayerStart");
static_assert(sizeof(BPI_GameMode_C_GetBunkerPlayerStart) == 0x000008, "Wrong size on BPI_GameMode_C_GetBunkerPlayerStart");
static_assert(offsetof(BPI_GameMode_C_GetBunkerPlayerStart, Start) == 0x000000, "Member 'BPI_GameMode_C_GetBunkerPlayerStart::Start' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.GetPlayers
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameMode_C_GetPlayers final
{
public:
	TArray<class AActor*>                         Players;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_GameMode_C_GetPlayers) == 0x000008, "Wrong alignment on BPI_GameMode_C_GetPlayers");
static_assert(sizeof(BPI_GameMode_C_GetPlayers) == 0x000010, "Wrong size on BPI_GameMode_C_GetPlayers");
static_assert(offsetof(BPI_GameMode_C_GetPlayers, Players) == 0x000000, "Member 'BPI_GameMode_C_GetPlayers::Players' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.GetPlayerStartForEnterBunker
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_GetPlayerStartForEnterBunker final
{
public:
	class AActor*                                 Start;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_GetPlayerStartForEnterBunker) == 0x000008, "Wrong alignment on BPI_GameMode_C_GetPlayerStartForEnterBunker");
static_assert(sizeof(BPI_GameMode_C_GetPlayerStartForEnterBunker) == 0x000008, "Wrong size on BPI_GameMode_C_GetPlayerStartForEnterBunker");
static_assert(offsetof(BPI_GameMode_C_GetPlayerStartForEnterBunker, Start) == 0x000000, "Member 'BPI_GameMode_C_GetPlayerStartForEnterBunker::Start' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.GetPlayerStartsWithTag
// 0x0020 (0x0020 - 0x0000)
struct BPI_GameMode_C_GetPlayerStartsWithTag final
{
public:
	class FString                                 Tag;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Starts;                                            // 0x0010(0x0010)(Parm, OutParm)
};
static_assert(alignof(BPI_GameMode_C_GetPlayerStartsWithTag) == 0x000008, "Wrong alignment on BPI_GameMode_C_GetPlayerStartsWithTag");
static_assert(sizeof(BPI_GameMode_C_GetPlayerStartsWithTag) == 0x000020, "Wrong size on BPI_GameMode_C_GetPlayerStartsWithTag");
static_assert(offsetof(BPI_GameMode_C_GetPlayerStartsWithTag, Tag) == 0x000000, "Member 'BPI_GameMode_C_GetPlayerStartsWithTag::Tag' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_GetPlayerStartsWithTag, Starts) == 0x000010, "Member 'BPI_GameMode_C_GetPlayerStartsWithTag::Starts' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.IsPawnRendered?
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameMode_C_IsPawnRendered_ final
{
public:
	class AActor*                                 Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Rendered_;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_IsPawnRendered_) == 0x000008, "Wrong alignment on BPI_GameMode_C_IsPawnRendered_");
static_assert(sizeof(BPI_GameMode_C_IsPawnRendered_) == 0x000010, "Wrong size on BPI_GameMode_C_IsPawnRendered_");
static_assert(offsetof(BPI_GameMode_C_IsPawnRendered_, Pawn) == 0x000000, "Member 'BPI_GameMode_C_IsPawnRendered_::Pawn' has a wrong offset!");
static_assert(offsetof(BPI_GameMode_C_IsPawnRendered_, Rendered_) == 0x000008, "Member 'BPI_GameMode_C_IsPawnRendered_::Rendered_' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.RegisterAISpawnerManager
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_RegisterAISpawnerManager final
{
public:
	class AAISpawnManager_C*                      AISpawnManager;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_RegisterAISpawnerManager) == 0x000008, "Wrong alignment on BPI_GameMode_C_RegisterAISpawnerManager");
static_assert(sizeof(BPI_GameMode_C_RegisterAISpawnerManager) == 0x000008, "Wrong size on BPI_GameMode_C_RegisterAISpawnerManager");
static_assert(offsetof(BPI_GameMode_C_RegisterAISpawnerManager, AISpawnManager) == 0x000000, "Member 'BPI_GameMode_C_RegisterAISpawnerManager::AISpawnManager' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.RegisterPlayerOld
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_RegisterPlayerOld final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_RegisterPlayerOld) == 0x000008, "Wrong alignment on BPI_GameMode_C_RegisterPlayerOld");
static_assert(sizeof(BPI_GameMode_C_RegisterPlayerOld) == 0x000008, "Wrong size on BPI_GameMode_C_RegisterPlayerOld");
static_assert(offsetof(BPI_GameMode_C_RegisterPlayerOld, Player) == 0x000000, "Member 'BPI_GameMode_C_RegisterPlayerOld::Player' has a wrong offset!");

// Function BPI_GameMode.BPI_GameMode_C.UnregisterPlayerOld
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameMode_C_UnregisterPlayerOld final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameMode_C_UnregisterPlayerOld) == 0x000008, "Wrong alignment on BPI_GameMode_C_UnregisterPlayerOld");
static_assert(sizeof(BPI_GameMode_C_UnregisterPlayerOld) == 0x000008, "Wrong size on BPI_GameMode_C_UnregisterPlayerOld");
static_assert(offsetof(BPI_GameMode_C_UnregisterPlayerOld, Player) == 0x000000, "Member 'BPI_GameMode_C_UnregisterPlayerOld::Player' has a wrong offset!");

}

