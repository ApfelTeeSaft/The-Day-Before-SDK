#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MouseCameraController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MouseCameraController.MouseCameraController_C
// 0x00A8 (0x0148 - 0x00A0)
class UMouseCameraController_C final : public UActorComponent
{
public:
	struct FTimerHandle                           CameraControllerTimerHandle;                       // 0x00A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaTime;                                         // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CameraRootComponent;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Owner;                                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Usable;                                            // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      Controller;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinPitch;                                          // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxPitch;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinYaw;                                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxYaw;                                            // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DefaultCaneraRotation;                             // 0x00F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UCameraComponent*                       CameraComponent;                                   // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MinPitchTemp;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxPitchTemp;                                      // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinYawTemp;                                        // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxYawTemp;                                        // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lock;                                              // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           InvalidateTimerHandle;                             // 0x0140(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void CameraController(bool Clear, bool Stop);
	void CameraControllerTimerHandler();
	void ClampAngel(double Pitch, double Yaw, bool Condition, double* ClaimedPitch, double* ClaimedYaw);
	void Invalidate();
	void InvalidateWithDelay(double Delay);
	void Validate(bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MouseCameraController_C">();
	}
	static class UMouseCameraController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMouseCameraController_C>();
	}
};
static_assert(alignof(UMouseCameraController_C) == 0x000008, "Wrong alignment on UMouseCameraController_C");
static_assert(sizeof(UMouseCameraController_C) == 0x000148, "Wrong size on UMouseCameraController_C");
static_assert(offsetof(UMouseCameraController_C, CameraControllerTimerHandle) == 0x0000A0, "Member 'UMouseCameraController_C::CameraControllerTimerHandle' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, DeltaTime) == 0x0000A8, "Member 'UMouseCameraController_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, CameraRootComponent) == 0x0000B0, "Member 'UMouseCameraController_C::CameraRootComponent' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, Owner) == 0x0000B8, "Member 'UMouseCameraController_C::Owner' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, Usable) == 0x0000C0, "Member 'UMouseCameraController_C::Usable' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, Controller) == 0x0000C8, "Member 'UMouseCameraController_C::Controller' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, InterpSpeed) == 0x0000D0, "Member 'UMouseCameraController_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MinPitch) == 0x0000D8, "Member 'UMouseCameraController_C::MinPitch' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MaxPitch) == 0x0000E0, "Member 'UMouseCameraController_C::MaxPitch' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MinYaw) == 0x0000E8, "Member 'UMouseCameraController_C::MinYaw' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MaxYaw) == 0x0000F0, "Member 'UMouseCameraController_C::MaxYaw' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, DefaultCaneraRotation) == 0x0000F8, "Member 'UMouseCameraController_C::DefaultCaneraRotation' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, CameraComponent) == 0x000110, "Member 'UMouseCameraController_C::CameraComponent' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MinPitchTemp) == 0x000118, "Member 'UMouseCameraController_C::MinPitchTemp' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MaxPitchTemp) == 0x000120, "Member 'UMouseCameraController_C::MaxPitchTemp' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MinYawTemp) == 0x000128, "Member 'UMouseCameraController_C::MinYawTemp' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, MaxYawTemp) == 0x000130, "Member 'UMouseCameraController_C::MaxYawTemp' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, Lock) == 0x000138, "Member 'UMouseCameraController_C::Lock' has a wrong offset!");
static_assert(offsetof(UMouseCameraController_C, InvalidateTimerHandle) == 0x000140, "Member 'UMouseCameraController_C::InvalidateTimerHandle' has a wrong offset!");

}

