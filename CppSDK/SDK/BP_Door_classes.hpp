#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Door

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Door.BP_Door_C
// 0x0190 (0x0420 - 0x0290)
class ABP_Door_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        HandlePoint;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_DoorNavModifier;                                // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          NewAITrigger;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RoomCollision;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorMesh;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DoorPivot;                                         // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Pivot;                                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PhysicPivot;                                       // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          AITrigger;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotating;                                        // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpened;                                          // 0x02F9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetRot;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OneSide;                                           // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Health;                                            // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpening;                                         // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Zombie_R;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Interier_Toggler_C*                 Toggler;                                           // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          broken;                                            // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             CloseSound;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             OpenSound;                                         // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             KnockOutSound;                                     // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             DestroySound;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ClosedValue;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseForwardVector;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDoorBlocked;                                    // 0x0361(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDoorCanBlock;                                   // 0x0362(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsKeyOpenedDoor;                                  // 0x0363(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KeyID;                                             // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TSet<class AActor*>                           SurvInRoomRefs;                                    // 0x0378(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          Shootable;                                         // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBlockDoor;                                       // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Alpha;                                             // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Stop;                                              // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CloseCurve;                                        // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            OpenCurve;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     StartTransform;                                    // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LocalOpenStart;                                    // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvertOpen;                                        // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BlockDoor();
	void BndEvt__BP_Door_NewAITrigger_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Door_NewAITrigger_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_Door_RoomCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Door_RoomCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CallInterface();
	void CinCloseDoor();
	void CinOpenDoor(bool FrontSide);
	void CloseDoorAfterBlockMulticast();
	void ClosingDoor();
	void CustomClose();
	void Damage();
	void DestroyInteractable();
	TSoftObjectPtr<class UAnimMontage> DoorAnimationSelection(bool DoorState, class APawn* Pawn);
	void DoorSetCollisionResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse);
	void ExecuteUbergraph_BP_Door(int32 EntryPoint);
	void FailedUnlockDoorServer();
	void GetActorType(E_ActorType* ActorType);
	void GetWidgetSceneComponent(class USceneComponent** Param_HandlePoint);
	void IsLocked_(bool* Result);
	void KnockOut(class AActor* Actor);
	void MulticastKnockOut(class AActor* Opener);
	void MulticastTurnDoor(class AActor* Opener);
	void MultiClosingDoor();
	void OnBeginInteract(class APawn* Player);
	void OnBlockDoor__DelegateSignature(bool bLocked);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLoaded_D4ABDA2640A29ABA333FDC9ED5AA48F1(class UObject* Loaded);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnRep_bIsDoorBlocked();
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void OpenOnBeginPlay();
	void PlayFailOpenSoundMulticast();
	void PlaySound_DoorDestr();
	void PlaySound_DoorHit();
	void PlaySuccessOpenSoundMulticast();
	void ReceiveBeginPlay();
	void ReceivePointDamage(float Param_Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ResetConstrains();
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetDoorState(class FText* Text, bool* bInactive);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void SuccesUnlockDoorServer();
	void TurnDoor(class AActor* Opener, bool IsOpen);
	void UpdateResponse(class UMeshComponent* Target);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Door_C">();
	}
	static class ABP_Door_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Door_C>();
	}
};
static_assert(alignof(ABP_Door_C) == 0x000008, "Wrong alignment on ABP_Door_C");
static_assert(sizeof(ABP_Door_C) == 0x000420, "Wrong size on ABP_Door_C");
static_assert(offsetof(ABP_Door_C, UberGraphFrame) == 0x000290, "Member 'ABP_Door_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, HandlePoint) == 0x000298, "Member 'ABP_Door_C::HandlePoint' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, BP_DoorNavModifier) == 0x0002A0, "Member 'ABP_Door_C::BP_DoorNavModifier' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, NewAITrigger) == 0x0002A8, "Member 'ABP_Door_C::NewAITrigger' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, RoomCollision) == 0x0002B0, "Member 'ABP_Door_C::RoomCollision' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorMesh) == 0x0002B8, "Member 'ABP_Door_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PhysicsConstraint) == 0x0002C0, "Member 'ABP_Door_C::PhysicsConstraint' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DoorPivot) == 0x0002C8, "Member 'ABP_Door_C::DoorPivot' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Pivot) == 0x0002D0, "Member 'ABP_Door_C::Pivot' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, PhysicPivot) == 0x0002D8, "Member 'ABP_Door_C::PhysicPivot' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Arrow) == 0x0002E0, "Member 'ABP_Door_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, AITrigger) == 0x0002E8, "Member 'ABP_Door_C::AITrigger' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DefaultSceneRoot) == 0x0002F0, "Member 'ABP_Door_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, IsRotating) == 0x0002F8, "Member 'ABP_Door_C::IsRotating' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, IsOpened) == 0x0002F9, "Member 'ABP_Door_C::IsOpened' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, TargetRot) == 0x000300, "Member 'ABP_Door_C::TargetRot' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OneSide) == 0x000308, "Member 'ABP_Door_C::OneSide' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Health) == 0x000310, "Member 'ABP_Door_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, IsOpening) == 0x000318, "Member 'ABP_Door_C::IsOpening' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Zombie_R) == 0x000320, "Member 'ABP_Door_C::Zombie_R' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Toggler) == 0x000328, "Member 'ABP_Door_C::Toggler' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, broken) == 0x000330, "Member 'ABP_Door_C::broken' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, CloseSound) == 0x000338, "Member 'ABP_Door_C::CloseSound' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OpenSound) == 0x000340, "Member 'ABP_Door_C::OpenSound' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, KnockOutSound) == 0x000348, "Member 'ABP_Door_C::KnockOutSound' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, DestroySound) == 0x000350, "Member 'ABP_Door_C::DestroySound' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, ClosedValue) == 0x000358, "Member 'ABP_Door_C::ClosedValue' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, UseForwardVector) == 0x000360, "Member 'ABP_Door_C::UseForwardVector' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, bIsDoorBlocked) == 0x000361, "Member 'ABP_Door_C::bIsDoorBlocked' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, bIsDoorCanBlock) == 0x000362, "Member 'ABP_Door_C::bIsDoorCanBlock' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, bIsKeyOpenedDoor) == 0x000363, "Member 'ABP_Door_C::bIsKeyOpenedDoor' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, KeyID) == 0x000368, "Member 'ABP_Door_C::KeyID' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, SurvInRoomRefs) == 0x000378, "Member 'ABP_Door_C::SurvInRoomRefs' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Shootable) == 0x0003C8, "Member 'ABP_Door_C::Shootable' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OnBlockDoor) == 0x0003D0, "Member 'ABP_Door_C::OnBlockDoor' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Alpha) == 0x0003E0, "Member 'ABP_Door_C::Alpha' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Curve) == 0x0003E8, "Member 'ABP_Door_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, Stop) == 0x0003F0, "Member 'ABP_Door_C::Stop' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, CloseCurve) == 0x0003F8, "Member 'ABP_Door_C::CloseCurve' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, OpenCurve) == 0x000400, "Member 'ABP_Door_C::OpenCurve' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, StartTransform) == 0x000408, "Member 'ABP_Door_C::StartTransform' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, LocalOpenStart) == 0x000418, "Member 'ABP_Door_C::LocalOpenStart' has a wrong offset!");
static_assert(offsetof(ABP_Door_C, InvertOpen) == 0x000419, "Member 'ABP_Door_C::InvertOpen' has a wrong offset!");

}

