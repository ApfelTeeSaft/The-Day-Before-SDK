#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vehicle_Wheel

#include "Basic.hpp"

#include "Vehicle_Wheel_classes.hpp"
#include "Vehicle_Wheel_parameters.hpp"


namespace SDK
{

// Function Vehicle_Wheel.Vehicle_Wheel_C.Attach
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_ResetPosition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::Attach(bool Param_ResetPosition, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "Attach");

	Params::Vehicle_Wheel_C_Attach Parms{};

	Parms.Param_ResetPosition = Param_ResetPosition;
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.BreakAttachment
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::BreakAttachment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "BreakAttachment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.CalculateSkidAmount
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::CalculateSkidAmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "CalculateSkidAmount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.CalculateSkidDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         WheelForward                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         MarkDirection                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVehicle_Wheel_C::CalculateSkidDirection(const struct FVector& Velocity, const struct FRotator& WheelForward, struct FRotator* MarkDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "CalculateSkidDirection");

	Params::Vehicle_Wheel_C_CalculateSkidDirection Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.WheelForward = std::move(WheelForward);

	UObject::ProcessEvent(Func, &Parms);

	if (MarkDirection != nullptr)
		*MarkDirection = std::move(Parms.MarkDirection);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ChangePassiveState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewPassive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::ChangePassiveState(bool NewPassive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ChangePassiveState");

	Params::Vehicle_Wheel_C_ChangePassiveState Parms{};

	Parms.NewPassive = NewPassive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ChangeStaticMesh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMesh*                      NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::ChangeStaticMesh(class UStaticMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ChangeStaticMesh");

	Params::Vehicle_Wheel_C_ChangeStaticMesh Parms{};

	Parms.NewMesh = NewMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.CleanupForDestroy
// (Public, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::CleanupForDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "CleanupForDestroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.CleanupSkidParticle
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::CleanupSkidParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "CleanupSkidParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ClearActiveParticle
// (Public, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::ClearActiveParticle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ClearActiveParticle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ConfigurePhysConstraints
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::ConfigurePhysConstraints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ConfigurePhysConstraints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.Construct
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.CreatePhysConstraints
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::CreatePhysConstraints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "CreatePhysConstraints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.CreateWheelController
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::CreateWheelController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "CreateWheelController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.DebugWarningOrError
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Error_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::DebugWarningOrError(const class FString& Message, bool Error_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "DebugWarningOrError");

	Params::Vehicle_Wheel_C_DebugWarningOrError Parms{};

	Parms.Message = std::move(Message);
	Parms.Error_ = Error_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.DestroyPhysConstraints
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::DestroyPhysConstraints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "DestroyPhysConstraints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.Detach
// (Public, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::Detach()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "Detach");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ExecuteUbergraph_Vehicle_Wheel
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::ExecuteUbergraph_Vehicle_Wheel(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ExecuteUbergraph_Vehicle_Wheel");

	Params::Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetBrakePressure
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  BrakePressure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetBrakePressure(double* BrakePressure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetBrakePressure");

	Params::Vehicle_Wheel_C_GetBrakePressure Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BrakePressure != nullptr)
		*BrakePressure = Parms.BrakePressure;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetConstraints
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UVehicleConstraint*               Param_TurnConstraint                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UVehicleConstraint*               Param_SpringConstraint                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetConstraints(class UVehicleConstraint** Param_TurnConstraint, class UVehicleConstraint** Param_SpringConstraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetConstraints");

	Params::Vehicle_Wheel_C_GetConstraints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_TurnConstraint != nullptr)
		*Param_TurnConstraint = Parms.Param_TurnConstraint;

	if (Param_SpringConstraint != nullptr)
		*Param_SpringConstraint = Parms.Param_SpringConstraint;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetEffectsForSurface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        Surface                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase*                       Param_SkidSound                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  Param_SkidParticle                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetEffectsForSurface(EPhysicalSurface Surface, class USoundBase** Param_SkidSound, class UParticleSystem** Param_SkidParticle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetEffectsForSurface");

	Params::Vehicle_Wheel_C_GetEffectsForSurface Parms{};

	Parms.Surface = Surface;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SkidSound != nullptr)
		*Param_SkidSound = Parms.Param_SkidSound;

	if (Param_SkidParticle != nullptr)
		*Param_SkidParticle = Parms.Param_SkidParticle;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetInvertTorque
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsInvertedTorque                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetInvertTorque(bool* IsInvertedTorque)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetInvertTorque");

	Params::Vehicle_Wheel_C_GetInvertTorque Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsInvertedTorque != nullptr)
		*IsInvertedTorque = Parms.IsInvertedTorque;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsBrakeLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsBrakeLocked                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetIsBrakeLocked(bool* Param_IsBrakeLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetIsBrakeLocked");

	Params::Vehicle_Wheel_C_GetIsBrakeLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsBrakeLocked != nullptr)
		*Param_IsBrakeLocked = Parms.Param_IsBrakeLocked;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsDrivingWheel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsDrivingWheel                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetIsDrivingWheel(bool* IsDrivingWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetIsDrivingWheel");

	Params::Vehicle_Wheel_C_GetIsDrivingWheel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDrivingWheel != nullptr)
		*IsDrivingWheel = Parms.IsDrivingWheel;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsHandbrakeWheel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsHandbrakeWheel                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetIsHandbrakeWheel(bool* IsHandbrakeWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetIsHandbrakeWheel");

	Params::Vehicle_Wheel_C_GetIsHandbrakeWheel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsHandbrakeWheel != nullptr)
		*IsHandbrakeWheel = Parms.IsHandbrakeWheel;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsLocked                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetIsLocked(bool* Param_IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetIsLocked");

	Params::Vehicle_Wheel_C_GetIsLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsLocked != nullptr)
		*Param_IsLocked = Parms.Param_IsLocked;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetLastTouch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FHitResult                       LastTouch                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void UVehicle_Wheel_C::GetLastTouch(struct FHitResult* LastTouch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetLastTouch");

	Params::Vehicle_Wheel_C_GetLastTouch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LastTouch != nullptr)
		*LastTouch = std::move(Parms.LastTouch);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetProjectedMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Param_ProjectedMesh                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetProjectedMesh(class UPrimitiveComponent** Param_ProjectedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetProjectedMesh");

	Params::Vehicle_Wheel_C_GetProjectedMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ProjectedMesh != nullptr)
		*Param_ProjectedMesh = Parms.Param_ProjectedMesh;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetRollingResistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  RollingResistance                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetRollingResistance(double* RollingResistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetRollingResistance");

	Params::Vehicle_Wheel_C_GetRollingResistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RollingResistance != nullptr)
		*RollingResistance = Parms.RollingResistance;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetRotationSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_RotationSpeed                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetRotationSpeed(double* Param_RotationSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetRotationSpeed");

	Params::Vehicle_Wheel_C_GetRotationSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_RotationSpeed != nullptr)
		*Param_RotationSpeed = Parms.Param_RotationSpeed;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetSpringLength
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  SpringLength                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetSpringLength(double* SpringLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetSpringLength");

	Params::Vehicle_Wheel_C_GetSpringLength Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpringLength != nullptr)
		*SpringLength = Parms.SpringLength;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetSuspensionPreview
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    EditorPreview                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetSuspensionPreview(bool* EditorPreview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetSuspensionPreview");

	Params::Vehicle_Wheel_C_GetSuspensionPreview Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EditorPreview != nullptr)
		*EditorPreview = Parms.EditorPreview;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetSuspensionSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   SpringLength                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpringStrength                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SpringDamping                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_PhysicsDownforce                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetSuspensionSettings(float* SpringLength, float* SpringStrength, float* SpringDamping, double* Param_PhysicsDownforce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetSuspensionSettings");

	Params::Vehicle_Wheel_C_GetSuspensionSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpringLength != nullptr)
		*SpringLength = Parms.SpringLength;

	if (SpringStrength != nullptr)
		*SpringStrength = Parms.SpringStrength;

	if (SpringDamping != nullptr)
		*SpringDamping = Parms.SpringDamping;

	if (Param_PhysicsDownforce != nullptr)
		*Param_PhysicsDownforce = Parms.Param_PhysicsDownforce;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              ControllerMesh                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetWheelController(class UPrimitiveComponent** ControllerMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetWheelController");

	Params::Vehicle_Wheel_C_GetWheelController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ControllerMesh != nullptr)
		*ControllerMesh = Parms.ControllerMesh;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              WheelMesh                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetWheelMesh(class UPrimitiveComponent** WheelMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetWheelMesh");

	Params::Vehicle_Wheel_C_GetWheelMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WheelMesh != nullptr)
		*WheelMesh = Parms.WheelMesh;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelRadius
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  BrakePressure                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetWheelRadius(double* BrakePressure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetWheelRadius");

	Params::Vehicle_Wheel_C_GetWheelRadius Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BrakePressure != nullptr)
		*BrakePressure = Parms.BrakePressure;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelTorque
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_WheelTorque                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::GetWheelTorque(double* Param_WheelTorque)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "GetWheelTorque");

	Params::Vehicle_Wheel_C_GetWheelTorque Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_WheelTorque != nullptr)
		*Param_WheelTorque = Parms.Param_WheelTorque;
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.InitBonePhysics
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::InitBonePhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "InitBonePhysics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.InitializeWheel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAVS_Vehicle_C*                   Owner                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::InitializeWheel(class AAVS_Vehicle_C* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "InitializeWheel");

	Params::Vehicle_Wheel_C_InitializeWheel Parms{};

	Parms.Owner = Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.InitSkidParticles
// (Public, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::InitSkidParticles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "InitSkidParticles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.InitSkidSounds
// (Public, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::InitSkidSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "InitSkidSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.LockWheel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::LockWheel(bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "LockWheel");

	Params::Vehicle_Wheel_C_LockWheel Parms{};

	Parms.Lock = Lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ReceiveEndPlay");

	Params::Vehicle_Wheel_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ReceiveTick");

	Params::Vehicle_Wheel_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ResetPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::ResetPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ResetPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.ResetSteering
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::ResetSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "ResetSteering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetChassisCollisions
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Collision                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetChassisCollisions(bool Collision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetChassisCollisions");

	Params::Vehicle_Wheel_C_SetChassisCollisions Parms{};

	Parms.Collision = Collision;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetDriveMotor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableMotor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetDriveMotor(bool EnableMotor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetDriveMotor");

	Params::Vehicle_Wheel_C_SetDriveMotor Parms{};

	Parms.EnableMotor = EnableMotor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetIsBrakeLocked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsBrakeLocked                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetIsBrakeLocked(bool Param_IsBrakeLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetIsBrakeLocked");

	Params::Vehicle_Wheel_C_SetIsBrakeLocked Parms{};

	Parms.Param_IsBrakeLocked = Param_IsBrakeLocked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetIsDrivingWheel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsDrivingWheel                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetIsDrivingWheel(bool IsDrivingWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetIsDrivingWheel");

	Params::Vehicle_Wheel_C_SetIsDrivingWheel Parms{};

	Parms.IsDrivingWheel = IsDrivingWheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetPhysics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Simulate_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetPhysics(bool Simulate_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetPhysics");

	Params::Vehicle_Wheel_C_SetPhysics Parms{};

	Parms.Simulate_ = Simulate_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetProjectedMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             Param_ProjectedMesh                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetProjectedMesh(class UStaticMeshComponent* Param_ProjectedMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetProjectedMesh");

	Params::Vehicle_Wheel_C_SetProjectedMesh Parms{};

	Parms.Param_ProjectedMesh = Param_ProjectedMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringDamping
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SpringDamping                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetSpringDamping(float SpringDamping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetSpringDamping");

	Params::Vehicle_Wheel_C_SetSpringDamping Parms{};

	Parms.SpringDamping = SpringDamping;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringDownforce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SpringDownforce                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetSpringDownforce(float SpringDownforce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetSpringDownforce");

	Params::Vehicle_Wheel_C_SetSpringDownforce Parms{};

	Parms.SpringDownforce = SpringDownforce;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringLength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SpringLength                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetSpringLength(float SpringLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetSpringLength");

	Params::Vehicle_Wheel_C_SetSpringLength Parms{};

	Parms.SpringLength = SpringLength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringStrength
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   SpringStrength                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetSpringStrength(float SpringStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetSpringStrength");

	Params::Vehicle_Wheel_C_SetSpringStrength Parms{};

	Parms.SpringStrength = SpringStrength;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSuspensionPreview
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Preview                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetSuspensionPreview(bool Preview)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetSuspensionPreview");

	Params::Vehicle_Wheel_C_SetSuspensionPreview Parms{};

	Parms.Preview = Preview;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSuspensionSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Spring_Length                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Spring_Strength                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Spring_Damping                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetSuspensionSettings(float Spring_Length, float Spring_Strength, float Spring_Damping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetSuspensionSettings");

	Params::Vehicle_Wheel_C_SetSuspensionSettings Parms{};

	Parms.Spring_Length = Spring_Length;
	Parms.Spring_Strength = Spring_Strength;
	Parms.Spring_Damping = Spring_Damping;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetVehicleTorque
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Torque                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reverse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetVehicleTorque(double TargetSpeed, double Torque, bool Reverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetVehicleTorque");

	Params::Vehicle_Wheel_C_SetVehicleTorque Parms{};

	Parms.TargetSpeed = TargetSpeed;
	Parms.Torque = Torque;
	Parms.Reverse = Reverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetWheelMode
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWheelMode                              NewMode                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetWheelMode(EWheelMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetWheelMode");

	Params::Vehicle_Wheel_C_SetWheelMode Parms{};

	Parms.NewMode = NewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetWheelPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UVehicle_Wheel_C::SetWheelPosition(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetWheelPosition");

	Params::Vehicle_Wheel_C_SetWheelPosition Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SetWheelTorque
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OverrideVehicle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TargetSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Torque                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Reverse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SetWheelTorque(bool OverrideVehicle, double TargetSpeed, double Torque, bool Reverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SetWheelTorque");

	Params::Vehicle_Wheel_C_SetWheelTorque Parms{};

	Parms.OverrideVehicle = OverrideVehicle;
	Parms.TargetSpeed = TargetSpeed;
	Parms.Torque = Torque;
	Parms.Reverse = Reverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.StopSkidEffects
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::StopSkidEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "StopSkidEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.SwapVisibleMesh
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseProjected                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::SwapVisibleMesh(bool UseProjected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "SwapVisibleMesh");

	Params::Vehicle_Wheel_C_SwapVisibleMesh Parms{};

	Parms.UseProjected = UseProjected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.TouchSurfaceChange
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::TouchSurfaceChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "TouchSurfaceChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateConstraints
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateConstraints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateConstraints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateRotationConstraint
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateRotationConstraint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateRotationConstraint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateRotationSpeed
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateRotationSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateRotationSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSkid
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateSkid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateSkid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSkidEffects
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateSkidEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateSkidEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSpringConstraint
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateSpringConstraint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateSpringConstraint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSteering
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewSteering                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UVehicle_Wheel_C::UpdateSteering(double NewSteering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateSteering");

	Params::Vehicle_Wheel_C_UpdateSteering Parms{};

	Parms.NewSteering = NewSteering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateWheel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateWheel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateWheelMeshProperties
// (Private, BlueprintCallable, BlueprintEvent)

void UVehicle_Wheel_C::UpdateWheelMeshProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Vehicle_Wheel_C", "UpdateWheelMeshProperties");

	UObject::ProcessEvent(Func, nullptr);
}

}

