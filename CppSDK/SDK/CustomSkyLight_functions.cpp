#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomSkyLight

#include "Basic.hpp"

#include "CustomSkyLight_classes.hpp"
#include "CustomSkyLight_parameters.hpp"


namespace SDK
{

// Function CustomSkyLight.CustomSkyLight_C.ApplySettings
// (Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::ApplySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "ApplySettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.AzimuthCalc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::AzimuthCalc(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "AzimuthCalc");

	Params::CustomSkyLight_C_AzimuthCalc Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.BackCloudsSettingsTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSettingCSLStruct                From                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                To                                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::BackCloudsSettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "BackCloudsSettingsTransition");

	Params::CustomSkyLight_C_BackCloudsSettingsTransition Parms{};

	Parms.From = std::move(From);
	Parms.Transition = std::move(Transition);
	Parms.To = std::move(To);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.CalculateAlpha
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InterpTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::CalculateAlpha(double InterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "CalculateAlpha");

	Params::CustomSkyLight_C_CalculateAlpha Parms{};

	Parms.InterpTime = InterpTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.CalculateInsideSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::CalculateInsideSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "CalculateInsideSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.ChangeDayCycleState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDayCycleState                          NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::ChangeDayCycleState(EDayCycleState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "ChangeDayCycleState");

	Params::CustomSkyLight_C_ChangeDayCycleState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.CheckDayTime
// (Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::CheckDayTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "CheckDayTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.CheckVolumetricScattering
// (Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::CheckVolumetricScattering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "CheckVolumetricScattering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.DayCycle
// (Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::DayCycle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "DayCycle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.DenormalizeTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ACustomSkyLight_C::DenormalizeTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "DenormalizeTime");

	Params::CustomSkyLight_C_DenormalizeTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CustomSkyLight.CustomSkyLight_C.EditorSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Editor_                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewHidden                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::EditorSettings(bool Editor_, bool NewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "EditorSettings");

	Params::CustomSkyLight_C_EditorSettings Parms{};

	Parms.Editor_ = Editor_;
	Parms.NewHidden = NewHidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.ExecuteUbergraph_CustomSkyLight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::ExecuteUbergraph_CustomSkyLight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "ExecuteUbergraph_CustomSkyLight");

	Params::CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.FogSettingsTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSettingCSLStruct                From                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                To                                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::FogSettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "FogSettingsTransition");

	Params::CustomSkyLight_C_FogSettingsTransition Parms{};

	Parms.From = std::move(From);
	Parms.Transition = std::move(Transition);
	Parms.To = std::move(To);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.GetCurrentSolarTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::GetCurrentSolarTime(double* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "GetCurrentSolarTime");

	Params::CustomSkyLight_C_GetCurrentSolarTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function CustomSkyLight.CustomSkyLight_C.GetHMSFromSolarTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_SolarTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hour                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Minute                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Second                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::GetHMSFromSolarTime(double Param_SolarTime, int32* Hour, int32* Minute, int32* Param_Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "GetHMSFromSolarTime");

	Params::CustomSkyLight_C_GetHMSFromSolarTime Parms{};

	Parms.Param_SolarTime = Param_SolarTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Hour != nullptr)
		*Hour = Parms.Hour;

	if (Minute != nullptr)
		*Minute = Parms.Minute;

	if (Param_Second != nullptr)
		*Param_Second = Parms.Param_Second;
}


// Function CustomSkyLight.CustomSkyLight_C.GetTimeInterp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  MaxAlpha                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::GetTimeInterp(double* MaxAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "GetTimeInterp");

	Params::CustomSkyLight_C_GetTimeInterp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxAlpha != nullptr)
		*MaxAlpha = Parms.MaxAlpha;
}


// Function CustomSkyLight.CustomSkyLight_C.GSTimeTick
// (Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::GSTimeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "GSTimeTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.IsDST
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    DSTEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_DSTStartMonth                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_DSTStartDay                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_DSTEndMonth                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_DSTEndDay                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_DSTSwitchHour                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsDST                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::IsDST(bool DSTEnable, int32 Param_DSTStartMonth, int32 Param_DSTStartDay, int32 Param_DSTEndMonth, int32 Param_DSTEndDay, int32 Param_DSTSwitchHour, bool* Param_IsDST)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "IsDST");

	Params::CustomSkyLight_C_IsDST Parms{};

	Parms.DSTEnable = DSTEnable;
	Parms.Param_DSTStartMonth = Param_DSTStartMonth;
	Parms.Param_DSTStartDay = Param_DSTStartDay;
	Parms.Param_DSTEndMonth = Param_DSTEndMonth;
	Parms.Param_DSTEndDay = Param_DSTEndDay;
	Parms.Param_DSTSwitchHour = Param_DSTSwitchHour;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsDST != nullptr)
		*Param_IsDST = Parms.Param_IsDST;
}


// Function CustomSkyLight.CustomSkyLight_C.LerpBackgroundClouds
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FBackgroundCloudsCSLStruct       From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBackgroundCloudsCSLStruct       To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Alpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBackgroundCloudsCSLStruct       Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::LerpBackgroundClouds(const struct FBackgroundCloudsCSLStruct& From, const struct FBackgroundCloudsCSLStruct& To, double Param_Alpha, struct FBackgroundCloudsCSLStruct* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "LerpBackgroundClouds");

	Params::CustomSkyLight_C_LerpBackgroundClouds Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);
	Parms.Param_Alpha = Param_Alpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function CustomSkyLight.CustomSkyLight_C.LerpDirectionalLightSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDirectionalLightCSLStruct       From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDirectionalLightCSLStruct       To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Alpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDirectionalLightCSLStruct       Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::LerpDirectionalLightSettings(const struct FDirectionalLightCSLStruct& From, const struct FDirectionalLightCSLStruct& To, double Param_Alpha, struct FDirectionalLightCSLStruct* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "LerpDirectionalLightSettings");

	Params::CustomSkyLight_C_LerpDirectionalLightSettings Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);
	Parms.Param_Alpha = Param_Alpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function CustomSkyLight.CustomSkyLight_C.LerpFogSettings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FFogCSLStruct                    From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFogCSLStruct                    To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Alpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFogCSLStruct                    Result                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::LerpFogSettings(const struct FFogCSLStruct& From, const struct FFogCSLStruct& To, double Param_Alpha, struct FFogCSLStruct* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "LerpFogSettings");

	Params::CustomSkyLight_C_LerpFogSettings Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);
	Parms.Param_Alpha = Param_Alpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function CustomSkyLight.CustomSkyLight_C.LerpSkyAtmosphereSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSkyAtmosphereCSLStruct          From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkyAtmosphereCSLStruct          To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Alpha                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkyAtmosphereCSLStruct          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::LerpSkyAtmosphereSettings(const struct FSkyAtmosphereCSLStruct& From, const struct FSkyAtmosphereCSLStruct& To, double Param_Alpha, struct FSkyAtmosphereCSLStruct* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "LerpSkyAtmosphereSettings");

	Params::CustomSkyLight_C_LerpSkyAtmosphereSettings Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);
	Parms.Param_Alpha = Param_Alpha;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function CustomSkyLight.CustomSkyLight_C.LightSettingsTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSettingCSLStruct                From                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                To                                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::LightSettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "LightSettingsTransition");

	Params::CustomSkyLight_C_LightSettingsTransition Parms{};

	Parms.From = std::move(From);
	Parms.Transition = std::move(Transition);
	Parms.To = std::move(To);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.NormalizeTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ACustomSkyLight_C::NormalizeTime(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "NormalizeTime");

	Params::CustomSkyLight_C_NormalizeTime Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CustomSkyLight.CustomSkyLight_C.OneSettingToAnother
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSettingCSLStruct                From                                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                To                                                     (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                Result                                                 (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::OneSettingToAnother(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& To, struct FSettingCSLStruct* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "OneSettingToAnother");

	Params::CustomSkyLight_C_OneSettingToAnother Parms{};

	Parms.From = std::move(From);
	Parms.To = std::move(To);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function CustomSkyLight.CustomSkyLight_C.OnRep_ServerSolarTime
// (BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::OnRep_ServerSolarTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "OnRep_ServerSolarTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.PostProcessAndSkyLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldBeVisible_                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::PostProcessAndSkyLight(bool ShouldBeVisible_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "PostProcessAndSkyLight");

	Params::CustomSkyLight_C_PostProcessAndSkyLight Parms{};

	Parms.ShouldBeVisible_ = ShouldBeVisible_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ACustomSkyLight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "ReceiveTick");

	Params::CustomSkyLight_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.RotAlphaReady
// (BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::RotAlphaReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "RotAlphaReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.RotAlphaReset
// (BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::RotAlphaReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "RotAlphaReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.SetBackCloudsSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBackgroundCloudsCSLStruct       TargetFogSettings                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBackgroundCloudsCSLStruct       PrevFogSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SetBackCloudsSettings(const struct FBackgroundCloudsCSLStruct& TargetFogSettings, const struct FBackgroundCloudsCSLStruct& PrevFogSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetBackCloudsSettings");

	Params::CustomSkyLight_C_SetBackCloudsSettings Parms{};

	Parms.TargetFogSettings = std::move(TargetFogSettings);
	Parms.PrevFogSettings = std::move(PrevFogSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.SetCubemapWithInterpolation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureCube*                     DestinationCubemap                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SetCubemapWithInterpolation(class UTextureCube* DestinationCubemap, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetCubemapWithInterpolation");

	Params::CustomSkyLight_C_SetCubemapWithInterpolation Parms{};

	Parms.DestinationCubemap = DestinationCubemap;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function CustomSkyLight.CustomSkyLight_C.SetFogSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFogCSLStruct                    TargetFogSettings                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFogCSLStruct                    PrevFogSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SetFogSettings(const struct FFogCSLStruct& TargetFogSettings, const struct FFogCSLStruct& PrevFogSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetFogSettings");

	Params::CustomSkyLight_C_SetFogSettings Parms{};

	Parms.TargetFogSettings = std::move(TargetFogSettings);
	Parms.PrevFogSettings = std::move(PrevFogSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.SetNextStateTime
// (BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::SetNextStateTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetNextStateTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.SetQuickSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::SetQuickSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetQuickSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.SetSkyAtmosphere
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSkyAtmosphereCSLStruct          SkyAtmosphereStruct                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSkyAtmosphereCSLStruct          PrevAtmosphere                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SetSkyAtmosphere(const struct FSkyAtmosphereCSLStruct& SkyAtmosphereStruct, const struct FSkyAtmosphereCSLStruct& PrevAtmosphere)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetSkyAtmosphere");

	Params::CustomSkyLight_C_SetSkyAtmosphere Parms{};

	Parms.SkyAtmosphereStruct = std::move(SkyAtmosphereStruct);
	Parms.PrevAtmosphere = std::move(PrevAtmosphere);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.SetSkyLightSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetIntensity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     TargetLightColor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PrevIntensity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     PrevLightColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTextureCube*                     SourceCubemap                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTextureCube*                     DestinationCubemap                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SetSkyLightSettings(double TargetIntensity, const struct FLinearColor& TargetLightColor, double PrevIntensity, const struct FLinearColor& PrevLightColor, class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SetSkyLightSettings");

	Params::CustomSkyLight_C_SetSkyLightSettings Parms{};

	Parms.TargetIntensity = TargetIntensity;
	Parms.TargetLightColor = std::move(TargetLightColor);
	Parms.PrevIntensity = PrevIntensity;
	Parms.PrevLightColor = std::move(PrevLightColor);
	Parms.SourceCubemap = SourceCubemap;
	Parms.DestinationCubemap = DestinationCubemap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.Sky Set Up
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsNight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::Sky_Set_Up(bool IsNight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "Sky Set Up");

	Params::CustomSkyLight_C_Sky_Set_Up Parms{};

	Parms.IsNight = IsNight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.SkySettingsTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSettingCSLStruct                From                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                Transition                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FSettingCSLStruct                To                                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SkySettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SkySettingsTransition");

	Params::CustomSkyLight_C_SkySettingsTransition Parms{};

	Parms.From = std::move(From);
	Parms.Transition = std::move(Transition);
	Parms.To = std::move(To);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.SunSetSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TargetIntencity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     TargetLightColor                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TargetTemperature                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseTemperature                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PrevIntencity                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     PrevLightColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PrevTemperature                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDirectionalLightCSLStruct       PrevDirectionalLightSettings                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDirectionalLightCSLStruct       NewDirectionalLightSettings                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SunSetSettings(double TargetIntencity, const struct FLinearColor& TargetLightColor, double TargetTemperature, bool UseTemperature, double PrevIntencity, const struct FLinearColor& PrevLightColor, double PrevTemperature, const struct FDirectionalLightCSLStruct& PrevDirectionalLightSettings, const struct FDirectionalLightCSLStruct& NewDirectionalLightSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SunSetSettings");

	Params::CustomSkyLight_C_SunSetSettings Parms{};

	Parms.TargetIntencity = TargetIntencity;
	Parms.TargetLightColor = std::move(TargetLightColor);
	Parms.TargetTemperature = TargetTemperature;
	Parms.UseTemperature = UseTemperature;
	Parms.PrevIntencity = PrevIntencity;
	Parms.PrevLightColor = std::move(PrevLightColor);
	Parms.PrevTemperature = PrevTemperature;
	Parms.PrevDirectionalLightSettings = std::move(PrevDirectionalLightSettings);
	Parms.NewDirectionalLightSettings = std::move(NewDirectionalLightSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.SunTimerInterp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Server                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ACustomSkyLight_C::SunTimerInterp(bool Server)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "SunTimerInterp");

	Params::CustomSkyLight_C_SunTimerInterp Parms{};

	Parms.Server = Server;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CustomSkyLight.CustomSkyLight_C.TimeStep
// (BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::TimeStep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "TimeStep");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.TimeTick
// (Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::TimeTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "TimeTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.UpdateSun
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::UpdateSun()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "UpdateSun");

	UObject::ProcessEvent(Func, nullptr);
}


// Function CustomSkyLight.CustomSkyLight_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ACustomSkyLight_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomSkyLight_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

