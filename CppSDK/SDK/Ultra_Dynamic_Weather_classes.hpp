#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Weather

#include "Basic.hpp"

#include "UDS_WeatherVariables_structs.hpp"
#include "UDS_WeatherTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_ControlPointMode_structs.hpp"
#include "UDS_Season_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UDS_TemperatureType_structs.hpp"
#include "UDS_DLWE_Mode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ultra_Dynamic_Weather.Ultra_Dynamic_Weather_C
// 0x0A28 (0x0CB8 - 0x0290)
class AUltra_Dynamic_Weather_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  Post_Process_Wind_Fog;                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URandom_Weather_Variation_C*            Random_Weather_Variation;                          // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_YMinus;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_YPlus;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_XMinus;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rain_XPlus;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_YMinus;                                       // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_YPlus;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_XMinus;                                       // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_Whistling;                                    // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        DistantThunder_Cue;                                // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Wind_XPlus;                                        // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Obscured_Lightning;                                // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Lightning_Light;                                   // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Root;                                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Rain_and_Snow;                                     // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_C*                   UltraDynamicSky;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EUDS_WeatherTypes                             Weather_Type;                                      // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Intensity;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Coverage;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow;                                             // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Intensity;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Direction;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lerp_to_New_Settings;                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Weather_Intensity;                             // 0x0358(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Cloud_Coverage;                                // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow_0;                                           // 0x0368(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Wind_Intensity;                                // 0x0370(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lerp_to_Static_Settings;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Weather_Intensity;                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Cloud_Coverage;                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow_1;                                           // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Wind_Intensity;                            // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_In_Time;                                // 0x03A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Out_Time;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hold_Time;                                         // 0x03B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Transition_State;                                  // 0x03B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Timer;                                             // 0x03C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Rain_and_Snow_Particles;                    // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Particle_Spawn_Rate;                           // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Particle_Collision_Enabled;                        // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Camera_Forward_Spawn_Offset;                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ceiling_Check_Height;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Box_Height;                                  // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Spawn_Distance;                                // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Spawn_Distance_Distribution;                       // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Particle_Distance;                         // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Drops_Scale;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Flakes_Scale;                                 // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Splash_Particles_Scale;                            // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Drops_Alpha;                                  // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Flakes_Alpha;                                 // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Rain_Particle_Color_Multiplier;                    // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Snow_Particle_Color_Multiplier;                    // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             _Snow_Particle_Collision_Channel;                  // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Splash_Frequency;                                  // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Snow_Flakes_Stick_to_Surfaces;                     // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_469[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Snow_Percentage;                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Current_Lightning_Location;                        // 0x0478(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_Lightning_Flashes;                           // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Current_Camera_Location;                           // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Lightning_Intensity;                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Interval__Min_;                    // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Interval__Max_;                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Timing_Randomization;              // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lightning_Flash_Light_Source;                      // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x3];                                      // 0x04D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Lightning_Flash_Light_Source_Color;                // 0x04D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Maximum_Lightning_Flash_Light_Intensity;           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lightning_Flashes_Cast_Shadows;                    // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lightning_Flashes_Cast_Light_Shaft_Bloom;          // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F2[0x6];                                      // 0x04F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Lightning_Flash_Light_Shaft_Intensity;             // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Minimum_Distance;                  // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Maximum_Distance;                  // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Obscured_Lightning;                         // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Obscured_Lightning_Spawn_Interval__Rain_;          // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Obscured_Lightning_Spawn_Interval__Snow_;          // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Height;                            // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Spawn_Lightning_Flashes_During_Snow;               // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Enable_Fog_Particles;                              // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_532[0x6];                                      // 0x0532(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Fog_Particle_Percentage__Rain_;                // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Fog_Particle_Percentage__Snow_;                // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particle_Intensity__Rain_;                     // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particle_Intensity__Snow_;                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Particles_Draw_Distance;                       // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWindDirectionalSource*                 Wind_Directional_Source_Actor__for_SpeedTree_;     // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Material_Wetness;                                  // 0x0568(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Material_Snow_Coverage;                            // 0x0570(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Material_Wetness;                          // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Material_Snow_Coverage;                    // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Changing_Material_Effects_with_Weather;   // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Material_Wetness;                              // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Material_Snow_Coverage;                        // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Materials_to_Get_Wet;                     // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Materials_to_Dry_Out;                     // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Materials_to_Gather_Snow;                 // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_for_Snow_to_Melt;                             // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Delta;                                        // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Amount_of_Snow_to_Turn_to_Wetness_when_Melted;     // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Random_Weather_Variation;                      // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Start_With_a_Random_Weather_Type;                  // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_Season                                   Season;                                            // 0x05D2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D3[0x5];                                      // 0x05D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weather_Type_Change_Minimum_Interval;              // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Weather_Type_Change_Maximum_Interval;              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Length;                                 // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Summer_;               // 0x05F0(0x0050)(Edit, BlueprintVisible)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Autumn_;               // 0x0640(0x0050)(Edit, BlueprintVisible)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Winter_;               // 0x0690(0x0050)(Edit, BlueprintVisible)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Spring_;               // 0x06E0(0x0050)(Edit, BlueprintVisible)
	bool                                          Avoid_Extreme_Weather_Shifts;                      // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Repeating_Weather_Types;                     // 0x0731(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Avoid_Changing_Directly_from_Snow_to_Rain__Or_Vice_Versa_; // 0x0732(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Sound_Effects;                                 // 0x0733(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rain_Volume;                                       // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Rain_Fade_Curve;                                   // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Distant_Thunder_Volume;                            // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Close_Thunder_Volume;                              // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Volume;                                       // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Whistling_Volume;                             // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Cloud_Speed;                              // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Cloud_Coverage;                           // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Intended_Cloud_Direction;                          // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Speed_Multiplier;                            // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x0788(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_789[0x7];                                      // 0x0789(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fog_Particle_Camera_Offset;                        // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Directional_Source_Intensity_Scale;           // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Force_Scale;                                  // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Length;                            // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flashing_Lightning;                                // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Lightning_Flash_Timer;                             // 0x07B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Lightning_Flash_Curve;                             // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EUDS_TemperatureType                          Temperature_Scale;                                 // 0x07C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C9[0x7];                                      // 0x07C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Summer_Temperature;                           // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Autumn_Temperature;                           // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Winter_Temperature;                           // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Spring_Temerature;                            // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Nighttime_Factor;                                  // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Factor;                                   // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Raining_Factor;                                    // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Evening_Factor;                                    // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snowing_Factor;                                    // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Factor;                                     // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Valid_Temperature;                         // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Maximum_Valid_Temperature;                         // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Cloud_Speed;                                   // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Limit_Weather_Intensity_with_Cloud_Coverage;       // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Scale_Distant_Particles;                           // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Dynamic_Landscape_Weather_Effects;          // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALandscape*>                     Landscape_Actors;                                  // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	EUDS_ControlPointMode                         Control_Point_Location_Source;                     // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Custom_Control_Point_Location;                     // 0x0868(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Render_Target_Area_for_Dynamic_Snow;               // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Render_Target_Area_for_Dynamic_Puddles;            // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Render_Target_Resolution;                          // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_894[0x4];                                      // 0x0894(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Displacement_Input_Minimum_Level;                  // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Displacement_Input_Maximum_Level;                  // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Displacement_Coverage_Factor__Snow_;               // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Displacement_Coverage_Factor__Puddles_;            // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Dynamic_Trails_to_Snow;                      // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Snow_and_Puddle_Distribution_Erosion;              // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Depth;                                        // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Z_Normal_Cutoff;                              // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Z_Normal_Falloff;                             // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Texture_Scale;                                // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Compression_Brush_Spread;                     // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Compression_Brush_Scatter;                    // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Compression_Brush_Size_Scatter;               // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Compression_Fade_Speed_Idle;                  // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Compression_Fade_Speed_Snowy;                 // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Compression_Displacement_Radius;              // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Compression_Displacement_Falloff;             // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Disturbance_Height;                           // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Render_Target_Distortion;                     // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Compression_Normal_Map_Intensity;             // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Pixel_Normal_Snow_Buildup;                         // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Frames_Per_Update;                                 // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Increasing_Material_Snow_Coverage;                 // 0x0944(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_945[0x3];                                      // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        DLWE_Brush_Locations_Buffer;                       // 0x0948(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTextureRenderTarget2D*                 DLWE_NormalTarget;                                 // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 DLWE_MaskTarget;                                   // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Player_Pawn_Location;                              // 0x0968(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Player_Camera_Location;                            // 0x0980(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Control_Point_Location;                            // 0x0998(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DLWE_RenderTarget_Center;                          // 0x09B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DLWE_Recenter_Offset;                              // 0x09C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DLWE_Frame_Count;                                  // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_DLWE_Mode                                Current_DLWE_Mode;                                 // 0x09E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Interaction_Ripples_to_Puddles;              // 0x09E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E6[0x2];                                      // 0x09E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Puddles_Z_Normal_Cutoff;                           // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddles_Z_Normal_Falloff;                          // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddle_Coverage;                                   // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Wetness_when_Raining;                         // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Wetness_when_Clear;                           // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Wetness_Slope_Multiplier;                     // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Raindrop_Effect;                                   // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Puddle_Darkening;                                  // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddle_Sharpness;                                  // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Roughness;                                   // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Ripple_Spread;                                     // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Ripple_Fade_Speed;                                 // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Puddle_Normals_Intensity;                          // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddle_Refraction;                                 // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Puddle_Render_Target_Distortion;                   // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class UTextureRenderTarget2D*>         Render_Targets_to_Release_Next_Frame;              // 0x0A60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      Cloud_Reference_Array;                             // 0x0A70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EObjectTypeQuery                              Landscape_Object_Type;                             // 0x0A80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_A81[0x7];                                      // 0x0A81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              Physical_Materials_which_disable_Snow_Sounds_and_Particles; // 0x0A88(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	TArray<class UPhysicalMaterial*>              Physical_Materials_which_disable_Puddle_Sounds_and_Particles; // 0x0A98(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	struct FVector2D                              Variation_Clouds_Offset;                           // 0x0AA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Large_Variation_Clouds_Scale;                      // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Small_Variation_Clouds_Scale;                      // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class AWeather_Override_Volume_C*>     Weather_Override_Volumes;                          // 0x0AC8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Global_Material_Snow_Coverage;                     // 0x0AD8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Material_Wetness;                           // 0x0AE0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Weather_Intensity;                          // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Cloud_Coverage;                             // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow_2;                                           // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Global_Wind_Intensity;                             // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tiling_Ripples_Scale;                              // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Minimum_Length;                    // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lightning_Flash_Maximum_Length;                    // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Custom_Lightning_Location;                     // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Custom_Lightning_Location;                         // 0x0B28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Using_Global_Weather_State;                        // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B41[0x7];                                      // 0x0B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Global_Snow_Percentage;                            // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resetting_Particle_Emitters;                       // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B51[0x7];                                      // 0x0B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Max_Interact_Distance;                     // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mobile;                                            // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B61[0x7];                                      // 0x0B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Current_Lightning_Angle;                           // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeather_Override_Volume_C*             Current_Weather_Override_Volume;                   // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Currently_in_a_Weather_Override_Volume;            // 0x0B78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B79[0x7];                                      // 0x0B79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        New_Cloud_Coverage;                                // 0x0B80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        New_Weather_Intensity;                             // 0x0B88(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow_3;                                           // 0x0B90(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        New_Wind_Intensity;                                // 0x0B98(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                DLWE_Brush_Size_Buffer;                            // 0x0BA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       Ripple_Brushes;                                    // 0x0BB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                DLWE_Brush_Strength_Buffer;                        // 0x0BC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Use_Occlusion_to_Attenuate_Sounds_in_Interiors;    // 0x0BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD1[0x7];                                      // 0x0BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Max_Attenuation;                                   // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_LPF_Frequency;                                 // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Interior_Occlusion_Distance;                   // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sound_Occlusion_Update_Period;                     // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Current_Sound_Occlusion_Profile;                   // 0x0BF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Target_Sound_Occlusion_Profile;                    // 0x0C08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	ETraceTypeQuery                               Occlusion_Trace_Channel;                           // 0x0C18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Post_Process_Wind_Fog;                      // 0x0C19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1A[0x6];                                      // 0x0C1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Post_Process_Wind_Fog_MID;                         // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PPWF_Phase;                                        // 0x0C28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PPWF_Snow_Intensity;                               // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PPWF_Rain_Intensity;                               // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rain_Sounds_Active;                                // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wind_Sounds_Active;                                // 0x0C51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Wind_Whistling_Sound_Active;                       // 0x0C52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Distant_Thunder_Sound_Active;                      // 0x0C53(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C54[0x4];                                      // 0x0C54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                Rain_Sound_Components;                             // 0x0C58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UAudioComponent*>                Wind_Sound_Components;                             // 0x0C68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        PPWF_Fade_Distance;                                // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Random_Offset;                                // 0x0C80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Replicate_Lightning_Direction;                     // 0x0C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Wind_Direction_Variation;                   // 0x0C89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8A[0x6];                                      // 0x0C8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Maximum_Wind_Direction_Variation;                  // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Wind_Direction;                            // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Variation_Speed;                                   // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Variation_Time;                               // 0x0CA8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Run_By_Counterpart;                                // 0x0CB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Apply_Weather_Override_Volumes();
	void Apply_Weather_Preset();
	void Audio_Update();
	void Change_Weather_Using_Settings(double Param_Weather_Intensity, double Cloudiness, double Param_Wind_Intensity, double Param__Snow, double Time_To_Transition_To_New_Settings, double Time_to_Hold_New_Settings, double Time_to_Transition_Back_to_Random_Variation, bool Reset_Particle_Emitters);
	void Change_Weather_Using_Type(EUDS_WeatherTypes New_Weather_Type, double Time_To_Transition_To_New_Settings, double Time_to_Hold_New_Settings, double Time_to_Transition_Back_to_Random_Variation, bool Reset_Particle_Emitters);
	void Check_for_DLWE_Recenter();
	void Check_Point_for_Puddles_or_Snow(const struct FVector& Location, const struct FVector& Ground_Normal, class UPhysicalMaterial* Physical_Material, double* Puddle_Depth, double* Param_Snow_Depth);
	void Check_to_change_DLWE_Mode();
	void Compress_DLWE_Snow(const struct FVector& Location, double Size);
	void ConstructionScript_Function(bool Param_Run_By_Counterpart);
	void Create_Cloud_Reference_Array();
	void Current_Lightning_Period_and_Status(double Param_Weather_Intensity, double Param_Cloud_Coverage, double Snow_Percentage, double* Period, bool* Enabled);
	void End_Lightning_Flash();
	void ExecuteUbergraph_Ultra_Dynamic_Weather(int32 EntryPoint);
	void Fade_DLWE_Target_Over_Time();
	void Filter_Probability_Map(const TMap<EUDS_WeatherTypes, double>& Probability_Map, EUDS_WeatherTypes Current_Random_Type, TMap<EUDS_WeatherTypes, double>* Filtered_Probability_Map);
	void Flash_Lightning(double Angle, bool Param_Use_Custom_Lightning_Location, const struct FVector& Param_Custom_Lightning_Location);
	void Flash_Lightning_Local(class AWeather_Override_Volume_C* Volume, double Angle);
	void Force_Tick();
	void Get_Current_Temperature(double* Celsius, double* Fahrenheit);
	void Get_Current_Weather_Type(EUDS_WeatherTypes* Current_Weather_Type);
	void Get_Intended_Cloud_Direction(double* Param_Intended_Cloud_Direction);
	void Get_Intended_Cloud_Speed(double* Param_Intended_Cloud_Speed);
	void Get_Updated_Control_Point_Location();
	void Get_Weather_Preset(EUDS_WeatherTypes Preset, double* Param_Weather_Intensity, double* Param_Cloud_Coverage, double* Param__Snow, double* Param_Wind_Intensity, double* Param_Material_Wetness, double* Material_Snow);
	void Initialize_Weather();
	void Limit_Weather_Intensity();
	void Print_Current_Status_To_Screen();
	void ReceiveTick(float DeltaSeconds);
	void Recenter_DLWE_Render_Target(class UTextureRenderTarget2D* Render_Target, ETextureRenderTargetFormat Format, const struct FLinearColor& Clear_Color, class UMaterialInterface* EdgeFade_Material, class UTextureRenderTarget2D** New_Target);
	void Recycle_Render_Targets();
	void Reset_All_Emitters();
	void Ripple_DLWE_Puddle(const struct FVector& Location, double Size, double Strength);
	void Set_Current_Season(EUDS_Season Param_Season);
	void Set_up_Post_Process_Wind_Fog();
	void _Update_DLWE_Targets(bool First_Run);
	void Start_Client_Weather_Change(int32 Param_Transition_State);
	void Tick_Lightning_Flash();
	void Update_Active_Variables();
	void Update_Audio_Component_Activity(class UAudioComponent* Tested_Component, TArray<class UAudioComponent*>& Affected_Components, double Current_Sound_Intensity, double Start_Randomization);
	void Update_Cloud_Coverage_from_UDS(double Param_Cloud_Coverage);
	void Update_Current_Material_Effects();
	void Update_Current_Occlusion_Profile();
	void Update_DLWE_Parameters();
	void Update_DLWE_Puddle_Ripples();
	void Update_DLWE_Snow_Compressions();
	void Update_Enabled_Sound_Components();
	void Update_Material_Effect_Parameters();
	void Update_New_Settings();
	void Update_Post_Process_Wind_Fog();
	void Update_Static_Variables();
	void Update_Target_Occlusion_Profile();
	void Update_Wind_Direction();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ultra_Dynamic_Weather_C">();
	}
	static class AUltra_Dynamic_Weather_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUltra_Dynamic_Weather_C>();
	}
};
static_assert(alignof(AUltra_Dynamic_Weather_C) == 0x000008, "Wrong alignment on AUltra_Dynamic_Weather_C");
static_assert(sizeof(AUltra_Dynamic_Weather_C) == 0x000CB8, "Wrong size on AUltra_Dynamic_Weather_C");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UberGraphFrame) == 0x000290, "Member 'AUltra_Dynamic_Weather_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Post_Process_Wind_Fog) == 0x000298, "Member 'AUltra_Dynamic_Weather_C::Post_Process_Wind_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Random_Weather_Variation) == 0x0002A0, "Member 'AUltra_Dynamic_Weather_C::Random_Weather_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_YMinus) == 0x0002A8, "Member 'AUltra_Dynamic_Weather_C::Rain_YMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_YPlus) == 0x0002B0, "Member 'AUltra_Dynamic_Weather_C::Rain_YPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_XMinus) == 0x0002B8, "Member 'AUltra_Dynamic_Weather_C::Rain_XMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_XPlus) == 0x0002C0, "Member 'AUltra_Dynamic_Weather_C::Rain_XPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_YMinus) == 0x0002C8, "Member 'AUltra_Dynamic_Weather_C::Wind_YMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_YPlus) == 0x0002D0, "Member 'AUltra_Dynamic_Weather_C::Wind_YPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_XMinus) == 0x0002D8, "Member 'AUltra_Dynamic_Weather_C::Wind_XMinus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Whistling) == 0x0002E0, "Member 'AUltra_Dynamic_Weather_C::Wind_Whistling' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DistantThunder_Cue) == 0x0002E8, "Member 'AUltra_Dynamic_Weather_C::DistantThunder_Cue' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_XPlus) == 0x0002F0, "Member 'AUltra_Dynamic_Weather_C::Wind_XPlus' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning) == 0x0002F8, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Light) == 0x000300, "Member 'AUltra_Dynamic_Weather_C::Lightning_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Root) == 0x000308, "Member 'AUltra_Dynamic_Weather_C::Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_and_Snow) == 0x000310, "Member 'AUltra_Dynamic_Weather_C::Rain_and_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, UltraDynamicSky) == 0x000318, "Member 'AUltra_Dynamic_Weather_C::UltraDynamicSky' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type) == 0x000320, "Member 'AUltra_Dynamic_Weather_C::Weather_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Intensity) == 0x000328, "Member 'AUltra_Dynamic_Weather_C::Weather_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cloud_Coverage) == 0x000330, "Member 'AUltra_Dynamic_Weather_C::Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, _Snow) == 0x000338, "Member 'AUltra_Dynamic_Weather_C::_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Intensity) == 0x000340, "Member 'AUltra_Dynamic_Weather_C::Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Direction) == 0x000348, "Member 'AUltra_Dynamic_Weather_C::Wind_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lerp_to_New_Settings) == 0x000350, "Member 'AUltra_Dynamic_Weather_C::Lerp_to_New_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Weather_Intensity) == 0x000358, "Member 'AUltra_Dynamic_Weather_C::Old_Weather_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Cloud_Coverage) == 0x000360, "Member 'AUltra_Dynamic_Weather_C::Old_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, _Snow_0) == 0x000368, "Member 'AUltra_Dynamic_Weather_C::_Snow_0' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Old_Wind_Intensity) == 0x000370, "Member 'AUltra_Dynamic_Weather_C::Old_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lerp_to_Static_Settings) == 0x000378, "Member 'AUltra_Dynamic_Weather_C::Lerp_to_Static_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Weather_Intensity) == 0x000380, "Member 'AUltra_Dynamic_Weather_C::Current_Weather_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Cloud_Coverage) == 0x000388, "Member 'AUltra_Dynamic_Weather_C::Current_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, _Snow_1) == 0x000390, "Member 'AUltra_Dynamic_Weather_C::_Snow_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Wind_Intensity) == 0x000398, "Member 'AUltra_Dynamic_Weather_C::Current_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_In_Time) == 0x0003A0, "Member 'AUltra_Dynamic_Weather_C::Transition_In_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_Out_Time) == 0x0003A8, "Member 'AUltra_Dynamic_Weather_C::Transition_Out_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Hold_Time) == 0x0003B0, "Member 'AUltra_Dynamic_Weather_C::Hold_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_State) == 0x0003B8, "Member 'AUltra_Dynamic_Weather_C::Transition_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Timer) == 0x0003C0, "Member 'AUltra_Dynamic_Weather_C::Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Rain_and_Snow_Particles) == 0x0003C8, "Member 'AUltra_Dynamic_Weather_C::Enable_Rain_and_Snow_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Particle_Spawn_Rate) == 0x0003D0, "Member 'AUltra_Dynamic_Weather_C::Max_Particle_Spawn_Rate' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Particle_Collision_Enabled) == 0x0003D8, "Member 'AUltra_Dynamic_Weather_C::Particle_Collision_Enabled' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Camera_Forward_Spawn_Offset) == 0x0003E0, "Member 'AUltra_Dynamic_Weather_C::Camera_Forward_Spawn_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ceiling_Check_Height) == 0x0003E8, "Member 'AUltra_Dynamic_Weather_C::Ceiling_Check_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Box_Height) == 0x0003F0, "Member 'AUltra_Dynamic_Weather_C::Spawn_Box_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Spawn_Distance) == 0x0003F8, "Member 'AUltra_Dynamic_Weather_C::Max_Spawn_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Distance_Distribution) == 0x000400, "Member 'AUltra_Dynamic_Weather_C::Spawn_Distance_Distribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Minimum_Particle_Distance) == 0x000408, "Member 'AUltra_Dynamic_Weather_C::Minimum_Particle_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Drops_Scale) == 0x000410, "Member 'AUltra_Dynamic_Weather_C::Rain_Drops_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Scale) == 0x000418, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Splash_Particles_Scale) == 0x000420, "Member 'AUltra_Dynamic_Weather_C::Splash_Particles_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Drops_Alpha) == 0x000428, "Member 'AUltra_Dynamic_Weather_C::Rain_Drops_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Alpha) == 0x000430, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Alpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Particle_Color_Multiplier) == 0x000438, "Member 'AUltra_Dynamic_Weather_C::Rain_Particle_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Particle_Color_Multiplier) == 0x000448, "Member 'AUltra_Dynamic_Weather_C::Snow_Particle_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, _Snow_Particle_Collision_Channel) == 0x000458, "Member 'AUltra_Dynamic_Weather_C::_Snow_Particle_Collision_Channel' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Splash_Frequency) == 0x000460, "Member 'AUltra_Dynamic_Weather_C::Splash_Frequency' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Flakes_Stick_to_Surfaces) == 0x000468, "Member 'AUltra_Dynamic_Weather_C::Snow_Flakes_Stick_to_Surfaces' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Snow_Percentage) == 0x000470, "Member 'AUltra_Dynamic_Weather_C::Current_Snow_Percentage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Location) == 0x000478, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Lightning_Flashes) == 0x000490, "Member 'AUltra_Dynamic_Weather_C::Spawn_Lightning_Flashes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Camera_Location) == 0x000498, "Member 'AUltra_Dynamic_Weather_C::Current_Camera_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Intensity) == 0x0004B0, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Interval__Min_) == 0x0004B8, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Interval__Min_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Interval__Max_) == 0x0004C0, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Interval__Max_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Timing_Randomization) == 0x0004C8, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Timing_Randomization' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Light_Source) == 0x0004D0, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Light_Source' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Light_Source_Color) == 0x0004D4, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Light_Source_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Maximum_Lightning_Flash_Light_Intensity) == 0x0004E8, "Member 'AUltra_Dynamic_Weather_C::Maximum_Lightning_Flash_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flashes_Cast_Shadows) == 0x0004F0, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flashes_Cast_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flashes_Cast_Light_Shaft_Bloom) == 0x0004F1, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flashes_Cast_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Light_Shaft_Intensity) == 0x0004F8, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Light_Shaft_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Minimum_Distance) == 0x000500, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Minimum_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Maximum_Distance) == 0x000508, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Maximum_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Obscured_Lightning) == 0x000510, "Member 'AUltra_Dynamic_Weather_C::Enable_Obscured_Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning_Spawn_Interval__Rain_) == 0x000518, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning_Spawn_Interval__Rain_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Obscured_Lightning_Spawn_Interval__Snow_) == 0x000520, "Member 'AUltra_Dynamic_Weather_C::Obscured_Lightning_Spawn_Interval__Snow_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Height) == 0x000528, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Spawn_Lightning_Flashes_During_Snow) == 0x000530, "Member 'AUltra_Dynamic_Weather_C::Spawn_Lightning_Flashes_During_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Fog_Particles) == 0x000531, "Member 'AUltra_Dynamic_Weather_C::Enable_Fog_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Fog_Particle_Percentage__Rain_) == 0x000538, "Member 'AUltra_Dynamic_Weather_C::Max_Fog_Particle_Percentage__Rain_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Fog_Particle_Percentage__Snow_) == 0x000540, "Member 'AUltra_Dynamic_Weather_C::Max_Fog_Particle_Percentage__Snow_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Intensity__Rain_) == 0x000548, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Intensity__Rain_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Intensity__Snow_) == 0x000550, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Intensity__Snow_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particles_Draw_Distance) == 0x000558, "Member 'AUltra_Dynamic_Weather_C::Fog_Particles_Draw_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Directional_Source_Actor__for_SpeedTree_) == 0x000560, "Member 'AUltra_Dynamic_Weather_C::Wind_Directional_Source_Actor__for_SpeedTree_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Material_Wetness) == 0x000568, "Member 'AUltra_Dynamic_Weather_C::Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Material_Snow_Coverage) == 0x000570, "Member 'AUltra_Dynamic_Weather_C::Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Material_Wetness) == 0x000578, "Member 'AUltra_Dynamic_Weather_C::Current_Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Material_Snow_Coverage) == 0x000580, "Member 'AUltra_Dynamic_Weather_C::Current_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Simulate_Changing_Material_Effects_with_Weather) == 0x000588, "Member 'AUltra_Dynamic_Weather_C::Simulate_Changing_Material_Effects_with_Weather' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Material_Wetness) == 0x000590, "Member 'AUltra_Dynamic_Weather_C::Max_Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Material_Snow_Coverage) == 0x000598, "Member 'AUltra_Dynamic_Weather_C::Max_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Get_Wet) == 0x0005A0, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Get_Wet' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Dry_Out) == 0x0005A8, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Dry_Out' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Materials_to_Gather_Snow) == 0x0005B0, "Member 'AUltra_Dynamic_Weather_C::Time_for_Materials_to_Gather_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_for_Snow_to_Melt) == 0x0005B8, "Member 'AUltra_Dynamic_Weather_C::Time_for_Snow_to_Melt' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Delta) == 0x0005C0, "Member 'AUltra_Dynamic_Weather_C::Snow_Delta' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Amount_of_Snow_to_Turn_to_Wetness_when_Melted) == 0x0005C8, "Member 'AUltra_Dynamic_Weather_C::Amount_of_Snow_to_Turn_to_Wetness_when_Melted' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Random_Weather_Variation) == 0x0005D0, "Member 'AUltra_Dynamic_Weather_C::Use_Random_Weather_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Start_With_a_Random_Weather_Type) == 0x0005D1, "Member 'AUltra_Dynamic_Weather_C::Start_With_a_Random_Weather_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Season) == 0x0005D2, "Member 'AUltra_Dynamic_Weather_C::Season' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Change_Minimum_Interval) == 0x0005D8, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Change_Minimum_Interval' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Change_Maximum_Interval) == 0x0005E0, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Change_Maximum_Interval' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Transition_Length) == 0x0005E8, "Member 'AUltra_Dynamic_Weather_C::Transition_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Summer_) == 0x0005F0, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Summer_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Autumn_) == 0x000640, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Autumn_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Winter_) == 0x000690, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Winter_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Type_Probabilities__Spring_) == 0x0006E0, "Member 'AUltra_Dynamic_Weather_C::Weather_Type_Probabilities__Spring_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Avoid_Extreme_Weather_Shifts) == 0x000730, "Member 'AUltra_Dynamic_Weather_C::Avoid_Extreme_Weather_Shifts' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Avoid_Repeating_Weather_Types) == 0x000731, "Member 'AUltra_Dynamic_Weather_C::Avoid_Repeating_Weather_Types' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Avoid_Changing_Directly_from_Snow_to_Rain__Or_Vice_Versa_) == 0x000732, "Member 'AUltra_Dynamic_Weather_C::Avoid_Changing_Directly_from_Snow_to_Rain__Or_Vice_Versa_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Sound_Effects) == 0x000733, "Member 'AUltra_Dynamic_Weather_C::Use_Sound_Effects' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Volume) == 0x000738, "Member 'AUltra_Dynamic_Weather_C::Rain_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Fade_Curve) == 0x000740, "Member 'AUltra_Dynamic_Weather_C::Rain_Fade_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Distant_Thunder_Volume) == 0x000748, "Member 'AUltra_Dynamic_Weather_C::Distant_Thunder_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Close_Thunder_Volume) == 0x000750, "Member 'AUltra_Dynamic_Weather_C::Close_Thunder_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Volume) == 0x000758, "Member 'AUltra_Dynamic_Weather_C::Wind_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Whistling_Volume) == 0x000760, "Member 'AUltra_Dynamic_Weather_C::Wind_Whistling_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Cloud_Speed) == 0x000768, "Member 'AUltra_Dynamic_Weather_C::Intended_Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Cloud_Coverage) == 0x000770, "Member 'AUltra_Dynamic_Weather_C::Intended_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Intended_Cloud_Direction) == 0x000778, "Member 'AUltra_Dynamic_Weather_C::Intended_Cloud_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cloud_Speed_Multiplier) == 0x000780, "Member 'AUltra_Dynamic_Weather_C::Cloud_Speed_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Runtime) == 0x000788, "Member 'AUltra_Dynamic_Weather_C::Runtime' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Fog_Particle_Camera_Offset) == 0x000790, "Member 'AUltra_Dynamic_Weather_C::Fog_Particle_Camera_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Directional_Source_Intensity_Scale) == 0x000798, "Member 'AUltra_Dynamic_Weather_C::Wind_Directional_Source_Intensity_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Force_Scale) == 0x0007A0, "Member 'AUltra_Dynamic_Weather_C::Wind_Force_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Length) == 0x0007A8, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Flashing_Lightning) == 0x0007B0, "Member 'AUltra_Dynamic_Weather_C::Flashing_Lightning' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Timer) == 0x0007B8, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Timer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Curve) == 0x0007C0, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Temperature_Scale) == 0x0007C8, "Member 'AUltra_Dynamic_Weather_C::Temperature_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Summer_Temperature) == 0x0007D0, "Member 'AUltra_Dynamic_Weather_C::Base_Summer_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Autumn_Temperature) == 0x0007D8, "Member 'AUltra_Dynamic_Weather_C::Base_Autumn_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Winter_Temperature) == 0x0007E0, "Member 'AUltra_Dynamic_Weather_C::Base_Winter_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Spring_Temerature) == 0x0007E8, "Member 'AUltra_Dynamic_Weather_C::Base_Spring_Temerature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Nighttime_Factor) == 0x0007F0, "Member 'AUltra_Dynamic_Weather_C::Nighttime_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Overcast_Factor) == 0x0007F8, "Member 'AUltra_Dynamic_Weather_C::Overcast_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Raining_Factor) == 0x000800, "Member 'AUltra_Dynamic_Weather_C::Raining_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Evening_Factor) == 0x000808, "Member 'AUltra_Dynamic_Weather_C::Evening_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snowing_Factor) == 0x000810, "Member 'AUltra_Dynamic_Weather_C::Snowing_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Random_Factor) == 0x000818, "Member 'AUltra_Dynamic_Weather_C::Random_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Minimum_Valid_Temperature) == 0x000820, "Member 'AUltra_Dynamic_Weather_C::Minimum_Valid_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Maximum_Valid_Temperature) == 0x000828, "Member 'AUltra_Dynamic_Weather_C::Maximum_Valid_Temperature' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Cloud_Speed) == 0x000830, "Member 'AUltra_Dynamic_Weather_C::Max_Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Limit_Weather_Intensity_with_Cloud_Coverage) == 0x000838, "Member 'AUltra_Dynamic_Weather_C::Limit_Weather_Intensity_with_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Scale_Distant_Particles) == 0x000840, "Member 'AUltra_Dynamic_Weather_C::Scale_Distant_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Dynamic_Landscape_Weather_Effects) == 0x000848, "Member 'AUltra_Dynamic_Weather_C::Enable_Dynamic_Landscape_Weather_Effects' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Landscape_Actors) == 0x000850, "Member 'AUltra_Dynamic_Weather_C::Landscape_Actors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Control_Point_Location_Source) == 0x000860, "Member 'AUltra_Dynamic_Weather_C::Control_Point_Location_Source' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Custom_Control_Point_Location) == 0x000868, "Member 'AUltra_Dynamic_Weather_C::Custom_Control_Point_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Target_Area_for_Dynamic_Snow) == 0x000880, "Member 'AUltra_Dynamic_Weather_C::Render_Target_Area_for_Dynamic_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Target_Area_for_Dynamic_Puddles) == 0x000888, "Member 'AUltra_Dynamic_Weather_C::Render_Target_Area_for_Dynamic_Puddles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Target_Resolution) == 0x000890, "Member 'AUltra_Dynamic_Weather_C::Render_Target_Resolution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Displacement_Input_Minimum_Level) == 0x000898, "Member 'AUltra_Dynamic_Weather_C::Displacement_Input_Minimum_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Displacement_Input_Maximum_Level) == 0x0008A0, "Member 'AUltra_Dynamic_Weather_C::Displacement_Input_Maximum_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Displacement_Coverage_Factor__Snow_) == 0x0008A8, "Member 'AUltra_Dynamic_Weather_C::Displacement_Coverage_Factor__Snow_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Displacement_Coverage_Factor__Puddles_) == 0x0008B0, "Member 'AUltra_Dynamic_Weather_C::Displacement_Coverage_Factor__Puddles_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Apply_Dynamic_Trails_to_Snow) == 0x0008B8, "Member 'AUltra_Dynamic_Weather_C::Apply_Dynamic_Trails_to_Snow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_and_Puddle_Distribution_Erosion) == 0x0008C0, "Member 'AUltra_Dynamic_Weather_C::Snow_and_Puddle_Distribution_Erosion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Depth) == 0x0008C8, "Member 'AUltra_Dynamic_Weather_C::Snow_Depth' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Z_Normal_Cutoff) == 0x0008D0, "Member 'AUltra_Dynamic_Weather_C::Snow_Z_Normal_Cutoff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Z_Normal_Falloff) == 0x0008D8, "Member 'AUltra_Dynamic_Weather_C::Snow_Z_Normal_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Texture_Scale) == 0x0008E0, "Member 'AUltra_Dynamic_Weather_C::Snow_Texture_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Brush_Spread) == 0x0008E8, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Brush_Spread' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Brush_Scatter) == 0x0008F0, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Brush_Scatter' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Brush_Size_Scatter) == 0x0008F8, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Brush_Size_Scatter' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Fade_Speed_Idle) == 0x000900, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Fade_Speed_Idle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Fade_Speed_Snowy) == 0x000908, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Fade_Speed_Snowy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Displacement_Radius) == 0x000910, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Displacement_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Displacement_Falloff) == 0x000918, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Displacement_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Disturbance_Height) == 0x000920, "Member 'AUltra_Dynamic_Weather_C::Snow_Disturbance_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Render_Target_Distortion) == 0x000928, "Member 'AUltra_Dynamic_Weather_C::Snow_Render_Target_Distortion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Snow_Compression_Normal_Map_Intensity) == 0x000930, "Member 'AUltra_Dynamic_Weather_C::Snow_Compression_Normal_Map_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Pixel_Normal_Snow_Buildup) == 0x000938, "Member 'AUltra_Dynamic_Weather_C::Pixel_Normal_Snow_Buildup' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Frames_Per_Update) == 0x000940, "Member 'AUltra_Dynamic_Weather_C::Frames_Per_Update' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Increasing_Material_Snow_Coverage) == 0x000944, "Member 'AUltra_Dynamic_Weather_C::Increasing_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Brush_Locations_Buffer) == 0x000948, "Member 'AUltra_Dynamic_Weather_C::DLWE_Brush_Locations_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_NormalTarget) == 0x000958, "Member 'AUltra_Dynamic_Weather_C::DLWE_NormalTarget' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_MaskTarget) == 0x000960, "Member 'AUltra_Dynamic_Weather_C::DLWE_MaskTarget' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Player_Pawn_Location) == 0x000968, "Member 'AUltra_Dynamic_Weather_C::Player_Pawn_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Player_Camera_Location) == 0x000980, "Member 'AUltra_Dynamic_Weather_C::Player_Camera_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Control_Point_Location) == 0x000998, "Member 'AUltra_Dynamic_Weather_C::Control_Point_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_RenderTarget_Center) == 0x0009B0, "Member 'AUltra_Dynamic_Weather_C::DLWE_RenderTarget_Center' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Recenter_Offset) == 0x0009C8, "Member 'AUltra_Dynamic_Weather_C::DLWE_Recenter_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Frame_Count) == 0x0009E0, "Member 'AUltra_Dynamic_Weather_C::DLWE_Frame_Count' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_DLWE_Mode) == 0x0009E4, "Member 'AUltra_Dynamic_Weather_C::Current_DLWE_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Apply_Interaction_Ripples_to_Puddles) == 0x0009E5, "Member 'AUltra_Dynamic_Weather_C::Apply_Interaction_Ripples_to_Puddles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddles_Z_Normal_Cutoff) == 0x0009E8, "Member 'AUltra_Dynamic_Weather_C::Puddles_Z_Normal_Cutoff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddles_Z_Normal_Falloff) == 0x0009F0, "Member 'AUltra_Dynamic_Weather_C::Puddles_Z_Normal_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Coverage) == 0x0009F8, "Member 'AUltra_Dynamic_Weather_C::Puddle_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Wetness_when_Raining) == 0x000A00, "Member 'AUltra_Dynamic_Weather_C::Base_Wetness_when_Raining' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Wetness_when_Clear) == 0x000A08, "Member 'AUltra_Dynamic_Weather_C::Base_Wetness_when_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Base_Wetness_Slope_Multiplier) == 0x000A10, "Member 'AUltra_Dynamic_Weather_C::Base_Wetness_Slope_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Raindrop_Effect) == 0x000A18, "Member 'AUltra_Dynamic_Weather_C::Raindrop_Effect' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Darkening) == 0x000A20, "Member 'AUltra_Dynamic_Weather_C::Puddle_Darkening' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Sharpness) == 0x000A28, "Member 'AUltra_Dynamic_Weather_C::Puddle_Sharpness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Water_Roughness) == 0x000A30, "Member 'AUltra_Dynamic_Weather_C::Water_Roughness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ripple_Spread) == 0x000A38, "Member 'AUltra_Dynamic_Weather_C::Ripple_Spread' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ripple_Fade_Speed) == 0x000A40, "Member 'AUltra_Dynamic_Weather_C::Ripple_Fade_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Normals_Intensity) == 0x000A48, "Member 'AUltra_Dynamic_Weather_C::Puddle_Normals_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Refraction) == 0x000A50, "Member 'AUltra_Dynamic_Weather_C::Puddle_Refraction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Puddle_Render_Target_Distortion) == 0x000A58, "Member 'AUltra_Dynamic_Weather_C::Puddle_Render_Target_Distortion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Render_Targets_to_Release_Next_Frame) == 0x000A60, "Member 'AUltra_Dynamic_Weather_C::Render_Targets_to_Release_Next_Frame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Cloud_Reference_Array) == 0x000A70, "Member 'AUltra_Dynamic_Weather_C::Cloud_Reference_Array' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Landscape_Object_Type) == 0x000A80, "Member 'AUltra_Dynamic_Weather_C::Landscape_Object_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Physical_Materials_which_disable_Snow_Sounds_and_Particles) == 0x000A88, "Member 'AUltra_Dynamic_Weather_C::Physical_Materials_which_disable_Snow_Sounds_and_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Physical_Materials_which_disable_Puddle_Sounds_and_Particles) == 0x000A98, "Member 'AUltra_Dynamic_Weather_C::Physical_Materials_which_disable_Puddle_Sounds_and_Particles' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Variation_Clouds_Offset) == 0x000AA8, "Member 'AUltra_Dynamic_Weather_C::Variation_Clouds_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Large_Variation_Clouds_Scale) == 0x000AB8, "Member 'AUltra_Dynamic_Weather_C::Large_Variation_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Small_Variation_Clouds_Scale) == 0x000AC0, "Member 'AUltra_Dynamic_Weather_C::Small_Variation_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Weather_Override_Volumes) == 0x000AC8, "Member 'AUltra_Dynamic_Weather_C::Weather_Override_Volumes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Material_Snow_Coverage) == 0x000AD8, "Member 'AUltra_Dynamic_Weather_C::Global_Material_Snow_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Material_Wetness) == 0x000AE0, "Member 'AUltra_Dynamic_Weather_C::Global_Material_Wetness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Weather_Intensity) == 0x000AE8, "Member 'AUltra_Dynamic_Weather_C::Global_Weather_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Cloud_Coverage) == 0x000AF0, "Member 'AUltra_Dynamic_Weather_C::Global_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, _Snow_2) == 0x000AF8, "Member 'AUltra_Dynamic_Weather_C::_Snow_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Wind_Intensity) == 0x000B00, "Member 'AUltra_Dynamic_Weather_C::Global_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Tiling_Ripples_Scale) == 0x000B08, "Member 'AUltra_Dynamic_Weather_C::Tiling_Ripples_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Minimum_Length) == 0x000B10, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Minimum_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Lightning_Flash_Maximum_Length) == 0x000B18, "Member 'AUltra_Dynamic_Weather_C::Lightning_Flash_Maximum_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Custom_Lightning_Location) == 0x000B20, "Member 'AUltra_Dynamic_Weather_C::Use_Custom_Lightning_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Custom_Lightning_Location) == 0x000B28, "Member 'AUltra_Dynamic_Weather_C::Custom_Lightning_Location' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Using_Global_Weather_State) == 0x000B40, "Member 'AUltra_Dynamic_Weather_C::Using_Global_Weather_State' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Global_Snow_Percentage) == 0x000B48, "Member 'AUltra_Dynamic_Weather_C::Global_Snow_Percentage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Resetting_Particle_Emitters) == 0x000B50, "Member 'AUltra_Dynamic_Weather_C::Resetting_Particle_Emitters' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Max_Interact_Distance) == 0x000B58, "Member 'AUltra_Dynamic_Weather_C::Current_Max_Interact_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Mobile) == 0x000B60, "Member 'AUltra_Dynamic_Weather_C::Mobile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Lightning_Angle) == 0x000B68, "Member 'AUltra_Dynamic_Weather_C::Current_Lightning_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Weather_Override_Volume) == 0x000B70, "Member 'AUltra_Dynamic_Weather_C::Current_Weather_Override_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Currently_in_a_Weather_Override_Volume) == 0x000B78, "Member 'AUltra_Dynamic_Weather_C::Currently_in_a_Weather_Override_Volume' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, New_Cloud_Coverage) == 0x000B80, "Member 'AUltra_Dynamic_Weather_C::New_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, New_Weather_Intensity) == 0x000B88, "Member 'AUltra_Dynamic_Weather_C::New_Weather_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, _Snow_3) == 0x000B90, "Member 'AUltra_Dynamic_Weather_C::_Snow_3' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, New_Wind_Intensity) == 0x000B98, "Member 'AUltra_Dynamic_Weather_C::New_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Brush_Size_Buffer) == 0x000BA0, "Member 'AUltra_Dynamic_Weather_C::DLWE_Brush_Size_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Ripple_Brushes) == 0x000BB0, "Member 'AUltra_Dynamic_Weather_C::Ripple_Brushes' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, DLWE_Brush_Strength_Buffer) == 0x000BC0, "Member 'AUltra_Dynamic_Weather_C::DLWE_Brush_Strength_Buffer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Use_Occlusion_to_Attenuate_Sounds_in_Interiors) == 0x000BD0, "Member 'AUltra_Dynamic_Weather_C::Use_Occlusion_to_Attenuate_Sounds_in_Interiors' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Attenuation) == 0x000BD8, "Member 'AUltra_Dynamic_Weather_C::Max_Attenuation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Min_LPF_Frequency) == 0x000BE0, "Member 'AUltra_Dynamic_Weather_C::Min_LPF_Frequency' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Max_Interior_Occlusion_Distance) == 0x000BE8, "Member 'AUltra_Dynamic_Weather_C::Max_Interior_Occlusion_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Sound_Occlusion_Update_Period) == 0x000BF0, "Member 'AUltra_Dynamic_Weather_C::Sound_Occlusion_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Sound_Occlusion_Profile) == 0x000BF8, "Member 'AUltra_Dynamic_Weather_C::Current_Sound_Occlusion_Profile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Target_Sound_Occlusion_Profile) == 0x000C08, "Member 'AUltra_Dynamic_Weather_C::Target_Sound_Occlusion_Profile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Occlusion_Trace_Channel) == 0x000C18, "Member 'AUltra_Dynamic_Weather_C::Occlusion_Trace_Channel' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Post_Process_Wind_Fog) == 0x000C19, "Member 'AUltra_Dynamic_Weather_C::Enable_Post_Process_Wind_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Post_Process_Wind_Fog_MID) == 0x000C20, "Member 'AUltra_Dynamic_Weather_C::Post_Process_Wind_Fog_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Phase) == 0x000C28, "Member 'AUltra_Dynamic_Weather_C::PPWF_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Snow_Intensity) == 0x000C40, "Member 'AUltra_Dynamic_Weather_C::PPWF_Snow_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Rain_Intensity) == 0x000C48, "Member 'AUltra_Dynamic_Weather_C::PPWF_Rain_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Sounds_Active) == 0x000C50, "Member 'AUltra_Dynamic_Weather_C::Rain_Sounds_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Sounds_Active) == 0x000C51, "Member 'AUltra_Dynamic_Weather_C::Wind_Sounds_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Whistling_Sound_Active) == 0x000C52, "Member 'AUltra_Dynamic_Weather_C::Wind_Whistling_Sound_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Distant_Thunder_Sound_Active) == 0x000C53, "Member 'AUltra_Dynamic_Weather_C::Distant_Thunder_Sound_Active' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Rain_Sound_Components) == 0x000C58, "Member 'AUltra_Dynamic_Weather_C::Rain_Sound_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Sound_Components) == 0x000C68, "Member 'AUltra_Dynamic_Weather_C::Wind_Sound_Components' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, PPWF_Fade_Distance) == 0x000C78, "Member 'AUltra_Dynamic_Weather_C::PPWF_Fade_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Time_Random_Offset) == 0x000C80, "Member 'AUltra_Dynamic_Weather_C::Time_Random_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Replicate_Lightning_Direction) == 0x000C88, "Member 'AUltra_Dynamic_Weather_C::Replicate_Lightning_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Enable_Wind_Direction_Variation) == 0x000C89, "Member 'AUltra_Dynamic_Weather_C::Enable_Wind_Direction_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Maximum_Wind_Direction_Variation) == 0x000C90, "Member 'AUltra_Dynamic_Weather_C::Maximum_Wind_Direction_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Current_Wind_Direction) == 0x000C98, "Member 'AUltra_Dynamic_Weather_C::Current_Wind_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Variation_Speed) == 0x000CA0, "Member 'AUltra_Dynamic_Weather_C::Variation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Wind_Variation_Time) == 0x000CA8, "Member 'AUltra_Dynamic_Weather_C::Wind_Variation_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Weather_C, Run_By_Counterpart) == 0x000CB0, "Member 'AUltra_Dynamic_Weather_C::Run_By_Counterpart' has a wrong offset!");

}

