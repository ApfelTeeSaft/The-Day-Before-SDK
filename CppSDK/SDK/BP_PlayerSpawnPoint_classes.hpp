#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerSpawnPoint

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerSpawnPoint.BP_PlayerSpawnPoint_C
// 0x0088 (0x0318 - 0x0290)
class ABP_PlayerSpawnPoint_C final : public AActor
{
public:
	class UCapsuleComponent*                      Capsule;                                           // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 Region;                                            // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FActorDataLayer                        DataLayer;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          ForFirstLaunch;                                    // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpawnCounter;                                      // 0x02D4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumberOfPlayersOnMe;                               // 0x02D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Tier;                                              // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsCarSpawn;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForBeginner;                                       // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToHub;                                             // 0x02E2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E3[0x5];                                      // 0x02E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LocationName;                                      // 0x02E8(0x0018)(Edit, BlueprintVisible)
	class FText                                   RegionName;                                        // 0x0300(0x0018)(Edit, BlueprintVisible)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerSpawnPoint_C">();
	}
	static class ABP_PlayerSpawnPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerSpawnPoint_C>();
	}
};
static_assert(alignof(ABP_PlayerSpawnPoint_C) == 0x000008, "Wrong alignment on ABP_PlayerSpawnPoint_C");
static_assert(sizeof(ABP_PlayerSpawnPoint_C) == 0x000318, "Wrong size on ABP_PlayerSpawnPoint_C");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, Capsule) == 0x000290, "Member 'ABP_PlayerSpawnPoint_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, Box) == 0x000298, "Member 'ABP_PlayerSpawnPoint_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, Arrow) == 0x0002A0, "Member 'ABP_PlayerSpawnPoint_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, Cube) == 0x0002A8, "Member 'ABP_PlayerSpawnPoint_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_PlayerSpawnPoint_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, Region) == 0x0002B8, "Member 'ABP_PlayerSpawnPoint_C::Region' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, DataLayer) == 0x0002C8, "Member 'ABP_PlayerSpawnPoint_C::DataLayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, ForFirstLaunch) == 0x0002D0, "Member 'ABP_PlayerSpawnPoint_C::ForFirstLaunch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, SpawnCounter) == 0x0002D4, "Member 'ABP_PlayerSpawnPoint_C::SpawnCounter' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, NumberOfPlayersOnMe) == 0x0002D8, "Member 'ABP_PlayerSpawnPoint_C::NumberOfPlayersOnMe' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, Tier) == 0x0002DC, "Member 'ABP_PlayerSpawnPoint_C::Tier' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, IsCarSpawn) == 0x0002E0, "Member 'ABP_PlayerSpawnPoint_C::IsCarSpawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, ForBeginner) == 0x0002E1, "Member 'ABP_PlayerSpawnPoint_C::ForBeginner' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, ToHub) == 0x0002E2, "Member 'ABP_PlayerSpawnPoint_C::ToHub' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, LocationName) == 0x0002E8, "Member 'ABP_PlayerSpawnPoint_C::LocationName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerSpawnPoint_C, RegionName) == 0x000300, "Member 'ABP_PlayerSpawnPoint_C::RegionName' has a wrong offset!");

}

