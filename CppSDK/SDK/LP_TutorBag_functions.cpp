#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LP_TutorBag

#include "Basic.hpp"

#include "LP_TutorBag_classes.hpp"
#include "LP_TutorBag_parameters.hpp"


namespace SDK
{

// Function LP_TutorBag.LP_TutorBag_C.ContainerOpened
// (BlueprintCallable, BlueprintEvent)

void ALP_TutorBag_C::ContainerOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "ContainerOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LP_TutorBag.LP_TutorBag_C.CustomEvent
// (BlueprintCallable, BlueprintEvent)

void ALP_TutorBag_C::CustomEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "CustomEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LP_TutorBag.LP_TutorBag_C.ExecuteUbergraph_LP_TutorBag
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::ExecuteUbergraph_LP_TutorBag(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "ExecuteUbergraph_LP_TutorBag");

	Params::LP_TutorBag_C_ExecuteUbergraph_LP_TutorBag Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.FindItemToPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ALP_TutorBag_C::FindItemToPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "FindItemToPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LP_TutorBag.LP_TutorBag_C.MC_MPContainerMoveItem
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSlotIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::MC_MPContainerMoveItem(int32 ContainerID, int32 ItemSlotIndex, int32 ToSlotIndex, bool Rotated_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "MC_MPContainerMoveItem");

	Params::LP_TutorBag_C_MC_MPContainerMoveItem Parms{};

	Parms.ContainerID = ContainerID;
	Parms.ItemSlotIndex = ItemSlotIndex;
	Parms.ToSlotIndex = ToSlotIndex;
	Parms.Rotated_ = Rotated_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.MC_RemoveItem
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::MC_RemoveItem(int32 ContainerUID, int32 ItemUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "MC_RemoveItem");

	Params::LP_TutorBag_C_MC_RemoveItem Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.ItemUID = ItemUID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.MPCFindItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            ItemInfo                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::MPCFindItem(int32 ContainerUID, int32 ItemUID, bool IsContainer_, bool Shop, bool* Found, struct FContainerPickupsInfo* ItemInfo, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "MPCFindItem");

	Params::LP_TutorBag_C_MPCFindItem Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.ItemUID = ItemUID;
	Parms.IsContainer_ = IsContainer_;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (ItemInfo != nullptr)
		*ItemInfo = std::move(Parms.ItemInfo);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function LP_TutorBag.LP_TutorBag_C.OnTutorStageUpdated_Event
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           TutorialStage                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ALP_TutorBag_C::OnTutorStageUpdated_Event(const class FString& TutorialStage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "OnTutorStageUpdated_Event");

	Params::LP_TutorBag_C_OnTutorStageUpdated_Event Parms{};

	Parms.TutorialStage = std::move(TutorialStage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.Set3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::Set3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "Set3DWidgetVisibility");

	Params::LP_TutorBag_C_Set3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.SetItemsToPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ALP_TutorBag_C::SetItemsToPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "SetItemsToPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LP_TutorBag.LP_TutorBag_C.SetTutorial3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::SetTutorial3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "SetTutorial3DWidgetVisibility");

	Params::LP_TutorBag_C_SetTutorial3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.OnBeginInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::OnBeginInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "OnBeginInteract");

	Params::LP_TutorBag_C_OnBeginInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.OnFocused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HighlightActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HighlightActorComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// E_InteractType                          InteractType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LateTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "OnFocused");

	Params::LP_TutorBag_C_OnFocused Parms{};

	Parms.Player = Player;
	Parms.HighlightActor = HighlightActor;
	Parms.HighlightActorComponent = HighlightActorComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractType != nullptr)
		*InteractType = Parms.InteractType;

	if (LateTime != nullptr)
		*LateTime = Parms.LateTime;
}


// Function LP_TutorBag.LP_TutorBag_C.OnSeen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::OnSeen(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "OnSeen");

	Params::LP_TutorBag_C_OnSeen Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.OnStopInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ALP_TutorBag_C::OnStopInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "OnStopInteract");

	Params::LP_TutorBag_C_OnStopInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LP_TutorBag.LP_TutorBag_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ALP_TutorBag_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LP_TutorBag_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

