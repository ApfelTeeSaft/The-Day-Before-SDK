#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AdvancedThirdPersonCamera

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum AdvancedThirdPersonCamera.EATPCInterpolationType
// NumValues: 0x0003
enum class EATPCInterpolationType : uint8
{
	SmoothInterpolation                      = 0,
	ConstInterpolation                       = 1,
	EATPCInterpolationType_MAX               = 2,
};

// Enum AdvancedThirdPersonCamera.EATPCChangeTargetReason
// NumValues: 0x0006
enum class EATPCChangeTargetReason : uint8
{
	SetNew                                   = 0,
	LostByExitCameraMode                     = 1,
	LostByDistance                           = 2,
	LostByVisible                            = 3,
	LostByPlayerInput                        = 4,
	EATPCChangeTargetReason_MAX              = 5,
};

// Enum AdvancedThirdPersonCamera.EATPCCameraModeScriptTickGroup
// NumValues: 0x0003
enum class EATPCCameraModeScriptTickGroup : uint32
{
	PreCameraObjectTick                      = 0,
	PostCameraObjectTick                     = 1,
	EATPCCameraModeScriptTickGroup_MAX       = 2,
};

// ScriptStruct AdvancedThirdPersonCamera.ATPCInterploationSpeed
// 0x0014 (0x0014 - 0x0000)
struct FATPCInterploationSpeed final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATPCInterpolationType                        InterpType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInterpSpeedToInterpolation;                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeedToInterpolation;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResetInterpSpeedTolerance;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCInterploationSpeed) == 0x000004, "Wrong alignment on FATPCInterploationSpeed");
static_assert(sizeof(FATPCInterploationSpeed) == 0x000014, "Wrong size on FATPCInterploationSpeed");
static_assert(offsetof(FATPCInterploationSpeed, InterpSpeed) == 0x000004, "Member 'FATPCInterploationSpeed::InterpSpeed' has a wrong offset!");
static_assert(offsetof(FATPCInterploationSpeed, InterpType) == 0x000008, "Member 'FATPCInterploationSpeed::InterpType' has a wrong offset!");
static_assert(offsetof(FATPCInterploationSpeed, bUseInterpSpeedToInterpolation) == 0x000009, "Member 'FATPCInterploationSpeed::bUseInterpSpeedToInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCInterploationSpeed, InterpSpeedToInterpolation) == 0x00000C, "Member 'FATPCInterploationSpeed::InterpSpeedToInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCInterploationSpeed, ResetInterpSpeedTolerance) == 0x000010, "Member 'FATPCInterploationSpeed::ResetInterpSpeedTolerance' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCFOVSettings
// 0x0030 (0x0030 - 0x0000)
struct FATPCFOVSettings final
{
public:
	float                                         CameraFOV;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                FOVInterpolation;                                  // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            PitchRotationFOVModifier;                          // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MovementSpeedFOVModifier;                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChangeFOVWhenCineCamera;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpolationSpeed_OLD;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCFOVSettings) == 0x000008, "Wrong alignment on FATPCFOVSettings");
static_assert(sizeof(FATPCFOVSettings) == 0x000030, "Wrong size on FATPCFOVSettings");
static_assert(offsetof(FATPCFOVSettings, CameraFOV) == 0x000000, "Member 'FATPCFOVSettings::CameraFOV' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, FOVInterpolation) == 0x000004, "Member 'FATPCFOVSettings::FOVInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, PitchRotationFOVModifier) == 0x000018, "Member 'FATPCFOVSettings::PitchRotationFOVModifier' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, MovementSpeedFOVModifier) == 0x000020, "Member 'FATPCFOVSettings::MovementSpeedFOVModifier' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, ChangeFOVWhenCineCamera) == 0x000028, "Member 'FATPCFOVSettings::ChangeFOVWhenCineCamera' has a wrong offset!");
static_assert(offsetof(FATPCFOVSettings, InterpolationSpeed_OLD) == 0x00002C, "Member 'FATPCFOVSettings::InterpolationSpeed_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraLocationLagSettings
// 0x0014 (0x0014 - 0x0000)
struct FATPCCameraLocationLagSettings final
{
public:
	bool                                          bEnableCameraLagForXY;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLagForZ;                              // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugLagMarkers;                              // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraLagSubstepping;                          // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagMaxTimeStep;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraLocationLagSettings) == 0x000004, "Wrong alignment on FATPCCameraLocationLagSettings");
static_assert(sizeof(FATPCCameraLocationLagSettings) == 0x000014, "Wrong size on FATPCCameraLocationLagSettings");
static_assert(offsetof(FATPCCameraLocationLagSettings, bEnableCameraLagForXY) == 0x000000, "Member 'FATPCCameraLocationLagSettings::bEnableCameraLagForXY' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, bEnableCameraLagForZ) == 0x000001, "Member 'FATPCCameraLocationLagSettings::bEnableCameraLagForZ' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, CameraLagSpeed) == 0x000004, "Member 'FATPCCameraLocationLagSettings::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, CameraLagMaxDistance) == 0x000008, "Member 'FATPCCameraLocationLagSettings::CameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, bDrawDebugLagMarkers) == 0x00000C, "Member 'FATPCCameraLocationLagSettings::bDrawDebugLagMarkers' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, bUseCameraLagSubstepping) == 0x00000D, "Member 'FATPCCameraLocationLagSettings::bUseCameraLagSubstepping' has a wrong offset!");
static_assert(offsetof(FATPCCameraLocationLagSettings, CameraLagMaxTimeStep) == 0x000010, "Member 'FATPCCameraLocationLagSettings::CameraLagMaxTimeStep' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraRotationLagSettings
// 0x000C (0x000C - 0x0000)
struct FATPCCameraRotationLagSettings final
{
public:
	float                                         CameraLagSpeed;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCameraLagSubstepping;                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagMaxTimeStep;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraRotationLagSettings) == 0x000004, "Wrong alignment on FATPCCameraRotationLagSettings");
static_assert(sizeof(FATPCCameraRotationLagSettings) == 0x00000C, "Wrong size on FATPCCameraRotationLagSettings");
static_assert(offsetof(FATPCCameraRotationLagSettings, CameraLagSpeed) == 0x000000, "Member 'FATPCCameraRotationLagSettings::CameraLagSpeed' has a wrong offset!");
static_assert(offsetof(FATPCCameraRotationLagSettings, bUseCameraLagSubstepping) == 0x000004, "Member 'FATPCCameraRotationLagSettings::bUseCameraLagSubstepping' has a wrong offset!");
static_assert(offsetof(FATPCCameraRotationLagSettings, CameraLagMaxTimeStep) == 0x000008, "Member 'FATPCCameraRotationLagSettings::CameraLagMaxTimeStep' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCLocationSettings
// 0x00D8 (0x00D8 - 0x0000)
struct FATPCLocationSettings final
{
public:
	bool                                          bEnableCameraLocationLag;                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCCameraLocationLagSettings         CameraLocationLagSettings;                         // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraRotationLag;                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCCameraRotationLagSettings         CameraRotationLagSettings;                         // 0x001C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDoCollisionTest;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProbeSize;                                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ProbeChannel;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoMovementCollisionTest;                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementCollisionTestDuration;                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementCollisionTestMinLocationDelta;             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             MovementCollisionTestCollisionChannel;             // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinCameraDistance;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCameraDistance;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetDistanceToDefaultOnChangeCameraMode;           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultCameraDistance;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCacheDistanceForCurrentCameraMode;                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCInterploationSpeed                ZoomInterpolation;                                 // 0x0054(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ZoomDistance;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           SocketOffsetCurve;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                SocketOffsetInterpolation;                         // 0x0078(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetOffset;                                      // 0x0090(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                TargetOffsetInterpolation;                         // 0x00A8(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PitchDistanceCurve;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATPCInterpolationType                        ZoomInterpolationType_OLD;                         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ZoomSpeed_OLD;                                     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketOffsetInterpSpeed_OLD;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetOffsetInterpSpeed_OLD;                       // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCLocationSettings) == 0x000008, "Wrong alignment on FATPCLocationSettings");
static_assert(sizeof(FATPCLocationSettings) == 0x0000D8, "Wrong size on FATPCLocationSettings");
static_assert(offsetof(FATPCLocationSettings, bEnableCameraLocationLag) == 0x000000, "Member 'FATPCLocationSettings::bEnableCameraLocationLag' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, CameraLocationLagSettings) == 0x000004, "Member 'FATPCLocationSettings::CameraLocationLagSettings' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bEnableCameraRotationLag) == 0x000018, "Member 'FATPCLocationSettings::bEnableCameraRotationLag' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, CameraRotationLagSettings) == 0x00001C, "Member 'FATPCLocationSettings::CameraRotationLagSettings' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bDoCollisionTest) == 0x000028, "Member 'FATPCLocationSettings::bDoCollisionTest' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ProbeSize) == 0x00002C, "Member 'FATPCLocationSettings::ProbeSize' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ProbeChannel) == 0x000030, "Member 'FATPCLocationSettings::ProbeChannel' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bDoMovementCollisionTest) == 0x000031, "Member 'FATPCLocationSettings::bDoMovementCollisionTest' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MovementCollisionTestDuration) == 0x000034, "Member 'FATPCLocationSettings::MovementCollisionTestDuration' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MovementCollisionTestMinLocationDelta) == 0x000038, "Member 'FATPCLocationSettings::MovementCollisionTestMinLocationDelta' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MovementCollisionTestCollisionChannel) == 0x00003C, "Member 'FATPCLocationSettings::MovementCollisionTestCollisionChannel' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MinCameraDistance) == 0x000040, "Member 'FATPCLocationSettings::MinCameraDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, MaxCameraDistance) == 0x000044, "Member 'FATPCLocationSettings::MaxCameraDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bSetDistanceToDefaultOnChangeCameraMode) == 0x000048, "Member 'FATPCLocationSettings::bSetDistanceToDefaultOnChangeCameraMode' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, DefaultCameraDistance) == 0x00004C, "Member 'FATPCLocationSettings::DefaultCameraDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, bCacheDistanceForCurrentCameraMode) == 0x000050, "Member 'FATPCLocationSettings::bCacheDistanceForCurrentCameraMode' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomInterpolation) == 0x000054, "Member 'FATPCLocationSettings::ZoomInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomDistance) == 0x000068, "Member 'FATPCLocationSettings::ZoomDistance' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, SocketOffsetCurve) == 0x000070, "Member 'FATPCLocationSettings::SocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, SocketOffsetInterpolation) == 0x000078, "Member 'FATPCLocationSettings::SocketOffsetInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, TargetOffset) == 0x000090, "Member 'FATPCLocationSettings::TargetOffset' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, TargetOffsetInterpolation) == 0x0000A8, "Member 'FATPCLocationSettings::TargetOffsetInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, PitchDistanceCurve) == 0x0000C0, "Member 'FATPCLocationSettings::PitchDistanceCurve' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomInterpolationType_OLD) == 0x0000C8, "Member 'FATPCLocationSettings::ZoomInterpolationType_OLD' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, ZoomSpeed_OLD) == 0x0000CC, "Member 'FATPCLocationSettings::ZoomSpeed_OLD' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, SocketOffsetInterpSpeed_OLD) == 0x0000D0, "Member 'FATPCLocationSettings::SocketOffsetInterpSpeed_OLD' has a wrong offset!");
static_assert(offsetof(FATPCLocationSettings, TargetOffsetInterpSpeed_OLD) == 0x0000D4, "Member 'FATPCLocationSettings::TargetOffsetInterpSpeed_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraShakesSettings
// 0x0018 (0x0018 - 0x0000)
struct FATPCCameraShakesSettings final
{
public:
	TSubclassOf<class UCameraShakeBase>           EnterToModeCameraShake;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           RegularCameraShake;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedStopAllCameraShakeOnEnterToCameraMode;        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCCameraShakesSettings) == 0x000008, "Wrong alignment on FATPCCameraShakesSettings");
static_assert(sizeof(FATPCCameraShakesSettings) == 0x000018, "Wrong size on FATPCCameraShakesSettings");
static_assert(offsetof(FATPCCameraShakesSettings, EnterToModeCameraShake) == 0x000000, "Member 'FATPCCameraShakesSettings::EnterToModeCameraShake' has a wrong offset!");
static_assert(offsetof(FATPCCameraShakesSettings, RegularCameraShake) == 0x000008, "Member 'FATPCCameraShakesSettings::RegularCameraShake' has a wrong offset!");
static_assert(offsetof(FATPCCameraShakesSettings, bNeedStopAllCameraShakeOnEnterToCameraMode) == 0x000010, "Member 'FATPCCameraShakesSettings::bNeedStopAllCameraShakeOnEnterToCameraMode' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCRotationOffsetSettings
// 0x002C (0x002C - 0x0000)
struct FATPCRotationOffsetSettings final
{
public:
	float                                         StartOffsetDelay;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                RotationInterpolation;                             // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PitchOffset;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateOnlyIfMovement;                           // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinMovementSpeedForActivate;                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeRotationSpeed_OLD;                           // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EATPCInterpolationType                        InterpolationType_OLD;                             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCRotationOffsetSettings) == 0x000004, "Wrong alignment on FATPCRotationOffsetSettings");
static_assert(sizeof(FATPCRotationOffsetSettings) == 0x00002C, "Wrong size on FATPCRotationOffsetSettings");
static_assert(offsetof(FATPCRotationOffsetSettings, StartOffsetDelay) == 0x000000, "Member 'FATPCRotationOffsetSettings::StartOffsetDelay' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, RotationInterpolation) == 0x000004, "Member 'FATPCRotationOffsetSettings::RotationInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, PitchOffset) == 0x000018, "Member 'FATPCRotationOffsetSettings::PitchOffset' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, bActivateOnlyIfMovement) == 0x00001C, "Member 'FATPCRotationOffsetSettings::bActivateOnlyIfMovement' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, MinMovementSpeedForActivate) == 0x000020, "Member 'FATPCRotationOffsetSettings::MinMovementSpeedForActivate' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, ChangeRotationSpeed_OLD) == 0x000024, "Member 'FATPCRotationOffsetSettings::ChangeRotationSpeed_OLD' has a wrong offset!");
static_assert(offsetof(FATPCRotationOffsetSettings, InterpolationType_OLD) == 0x000028, "Member 'FATPCRotationOffsetSettings::InterpolationType_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCRoofCollisionCheckSettings
// 0x0098 (0x0098 - 0x0000)
struct FATPCRoofCollisionCheckSettings final
{
public:
	TArray<EObjectTypeQuery>                      TraceObjectTypes;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                EyesBoxTraceHalfSize;                              // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoofTraceAngleFirst;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RoofBoxTraceHalfSizeFirst;                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoofTraceAngleSecond;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RoofBoxTraceHalfSizeSecond;                        // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCRotationOffsetSettings            RotationOffsetSettings;                            // 0x0068(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCRoofCollisionCheckSettings) == 0x000008, "Wrong alignment on FATPCRoofCollisionCheckSettings");
static_assert(sizeof(FATPCRoofCollisionCheckSettings) == 0x000098, "Wrong size on FATPCRoofCollisionCheckSettings");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, TraceObjectTypes) == 0x000000, "Member 'FATPCRoofCollisionCheckSettings::TraceObjectTypes' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, EyesBoxTraceHalfSize) == 0x000010, "Member 'FATPCRoofCollisionCheckSettings::EyesBoxTraceHalfSize' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofTraceAngleFirst) == 0x000028, "Member 'FATPCRoofCollisionCheckSettings::RoofTraceAngleFirst' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofBoxTraceHalfSizeFirst) == 0x000030, "Member 'FATPCRoofCollisionCheckSettings::RoofBoxTraceHalfSizeFirst' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofTraceAngleSecond) == 0x000048, "Member 'FATPCRoofCollisionCheckSettings::RoofTraceAngleSecond' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RoofBoxTraceHalfSizeSecond) == 0x000050, "Member 'FATPCRoofCollisionCheckSettings::RoofBoxTraceHalfSizeSecond' has a wrong offset!");
static_assert(offsetof(FATPCRoofCollisionCheckSettings, RotationOffsetSettings) == 0x000068, "Member 'FATPCRoofCollisionCheckSettings::RotationOffsetSettings' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCViewRotationToActorRotationSettings
// 0x0024 (0x0024 - 0x0000)
struct FATPCViewRotationToActorRotationSettings final
{
public:
	float                                         MaxDeltaForChange;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartChangeDelay;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                RotationInterpolation;                             // 0x0008(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChangeRotationSpeed_OLD;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeRotationSpeedInterpSpeed_OLD;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCViewRotationToActorRotationSettings) == 0x000004, "Wrong alignment on FATPCViewRotationToActorRotationSettings");
static_assert(sizeof(FATPCViewRotationToActorRotationSettings) == 0x000024, "Wrong size on FATPCViewRotationToActorRotationSettings");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, MaxDeltaForChange) == 0x000000, "Member 'FATPCViewRotationToActorRotationSettings::MaxDeltaForChange' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, StartChangeDelay) == 0x000004, "Member 'FATPCViewRotationToActorRotationSettings::StartChangeDelay' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, RotationInterpolation) == 0x000008, "Member 'FATPCViewRotationToActorRotationSettings::RotationInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, ChangeRotationSpeed_OLD) == 0x00001C, "Member 'FATPCViewRotationToActorRotationSettings::ChangeRotationSpeed_OLD' has a wrong offset!");
static_assert(offsetof(FATPCViewRotationToActorRotationSettings, ChangeRotationSpeedInterpSpeed_OLD) == 0x000020, "Member 'FATPCViewRotationToActorRotationSettings::ChangeRotationSpeedInterpSpeed_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCRotationSettings
// 0x0120 (0x0120 - 0x0000)
struct FATPCRotationSettings final
{
public:
	float                                         ViewPitchMin;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMax;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMin;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewYawMax;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                ViewInterpolation;                                 // 0x0010(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationOffset;                             // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCRotationOffsetSettings            RotationOffsetSettings;                            // 0x0028(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRoofCollisionCheckSettings;                 // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCRoofCollisionCheckSettings        RoofCollisionCheckSettings;                        // 0x0058(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableViewRotationToActorRotation;                // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCViewRotationToActorRotationSettings ViewRotationToActorRotationSettings;               // 0x00F4(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUsePawnControlRotation;                           // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritPitch;                                     // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritYaw;                                       // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInheritRoll;                                      // 0x011B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewInterpolationSpeed_OLD;                        // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCRotationSettings) == 0x000008, "Wrong alignment on FATPCRotationSettings");
static_assert(sizeof(FATPCRotationSettings) == 0x000120, "Wrong size on FATPCRotationSettings");
static_assert(offsetof(FATPCRotationSettings, ViewPitchMin) == 0x000000, "Member 'FATPCRotationSettings::ViewPitchMin' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewPitchMax) == 0x000004, "Member 'FATPCRotationSettings::ViewPitchMax' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewYawMin) == 0x000008, "Member 'FATPCRotationSettings::ViewYawMin' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewYawMax) == 0x00000C, "Member 'FATPCRotationSettings::ViewYawMax' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewInterpolation) == 0x000010, "Member 'FATPCRotationSettings::ViewInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bEnableRotationOffset) == 0x000024, "Member 'FATPCRotationSettings::bEnableRotationOffset' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, RotationOffsetSettings) == 0x000028, "Member 'FATPCRotationSettings::RotationOffsetSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bEnableRoofCollisionCheckSettings) == 0x000054, "Member 'FATPCRotationSettings::bEnableRoofCollisionCheckSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, RoofCollisionCheckSettings) == 0x000058, "Member 'FATPCRotationSettings::RoofCollisionCheckSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bEnableViewRotationToActorRotation) == 0x0000F0, "Member 'FATPCRotationSettings::bEnableViewRotationToActorRotation' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewRotationToActorRotationSettings) == 0x0000F4, "Member 'FATPCRotationSettings::ViewRotationToActorRotationSettings' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bUsePawnControlRotation) == 0x000118, "Member 'FATPCRotationSettings::bUsePawnControlRotation' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bInheritPitch) == 0x000119, "Member 'FATPCRotationSettings::bInheritPitch' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bInheritYaw) == 0x00011A, "Member 'FATPCRotationSettings::bInheritYaw' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, bInheritRoll) == 0x00011B, "Member 'FATPCRotationSettings::bInheritRoll' has a wrong offset!");
static_assert(offsetof(FATPCRotationSettings, ViewInterpolationSpeed_OLD) == 0x00011C, "Member 'FATPCRotationSettings::ViewInterpolationSpeed_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCLockOnTargetSettings
// 0x0060 (0x0060 - 0x0000)
struct FATPCLockOnTargetSettings final
{
public:
	bool                                          bResetTargetOnChangeCameraMode;                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateCameraByYaw;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RotateCameraByPitch;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCInterploationSpeed                CameraRotationInterpolation;                       // 0x0004(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bResetInterpolationSpeedAfterChangeTarget;         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampByCameraModeRotationLimits;                  // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMaxLockDistance;                               // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTargetOnReachMaxDistance;                    // 0x001B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLockDistance;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCheckTargetVisibility;                         // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetLockOnLostVisibleTarget;                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CheckVisibilityTraceChannel;                       // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHardLockOnTarget;                                 // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseLockAfterPlayerInput;                        // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PauseLockAfterPlayerInputTime;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTargetAfterPlayerInput;                      // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RequiredPlayerInputForResetTarget;                 // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ResetAccumulatedPlayerInputForResetTargetDelay;    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDesiredConeRotation;                           // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeisredConeRotationYaw;                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraRotationSpeed_OLD;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditionalSmoothRotationSpeed_OLD;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCLockOnTargetSettings) == 0x000008, "Wrong alignment on FATPCLockOnTargetSettings");
static_assert(sizeof(FATPCLockOnTargetSettings) == 0x000060, "Wrong size on FATPCLockOnTargetSettings");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetTargetOnChangeCameraMode) == 0x000000, "Member 'FATPCLockOnTargetSettings::bResetTargetOnChangeCameraMode' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, RotateCameraByYaw) == 0x000001, "Member 'FATPCLockOnTargetSettings::RotateCameraByYaw' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, RotateCameraByPitch) == 0x000002, "Member 'FATPCLockOnTargetSettings::RotateCameraByPitch' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, CameraRotationInterpolation) == 0x000004, "Member 'FATPCLockOnTargetSettings::CameraRotationInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetInterpolationSpeedAfterChangeTarget) == 0x000018, "Member 'FATPCLockOnTargetSettings::bResetInterpolationSpeedAfterChangeTarget' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bClampByCameraModeRotationLimits) == 0x000019, "Member 'FATPCLockOnTargetSettings::bClampByCameraModeRotationLimits' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseMaxLockDistance) == 0x00001A, "Member 'FATPCLockOnTargetSettings::bUseMaxLockDistance' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetTargetOnReachMaxDistance) == 0x00001B, "Member 'FATPCLockOnTargetSettings::bResetTargetOnReachMaxDistance' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, MaxLockDistance) == 0x00001C, "Member 'FATPCLockOnTargetSettings::MaxLockDistance' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseCheckTargetVisibility) == 0x000020, "Member 'FATPCLockOnTargetSettings::bUseCheckTargetVisibility' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetLockOnLostVisibleTarget) == 0x000021, "Member 'FATPCLockOnTargetSettings::bResetLockOnLostVisibleTarget' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, CheckVisibilityTraceChannel) == 0x000022, "Member 'FATPCLockOnTargetSettings::CheckVisibilityTraceChannel' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bHardLockOnTarget) == 0x000023, "Member 'FATPCLockOnTargetSettings::bHardLockOnTarget' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bPauseLockAfterPlayerInput) == 0x000024, "Member 'FATPCLockOnTargetSettings::bPauseLockAfterPlayerInput' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, PauseLockAfterPlayerInputTime) == 0x000028, "Member 'FATPCLockOnTargetSettings::PauseLockAfterPlayerInputTime' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bResetTargetAfterPlayerInput) == 0x00002C, "Member 'FATPCLockOnTargetSettings::bResetTargetAfterPlayerInput' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, RequiredPlayerInputForResetTarget) == 0x000030, "Member 'FATPCLockOnTargetSettings::RequiredPlayerInputForResetTarget' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, ResetAccumulatedPlayerInputForResetTargetDelay) == 0x000048, "Member 'FATPCLockOnTargetSettings::ResetAccumulatedPlayerInputForResetTargetDelay' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, bUseDesiredConeRotation) == 0x00004C, "Member 'FATPCLockOnTargetSettings::bUseDesiredConeRotation' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, DeisredConeRotationYaw) == 0x000050, "Member 'FATPCLockOnTargetSettings::DeisredConeRotationYaw' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, CameraRotationSpeed_OLD) == 0x000054, "Member 'FATPCLockOnTargetSettings::CameraRotationSpeed_OLD' has a wrong offset!");
static_assert(offsetof(FATPCLockOnTargetSettings, AdditionalSmoothRotationSpeed_OLD) == 0x000058, "Member 'FATPCLockOnTargetSettings::AdditionalSmoothRotationSpeed_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCFadeSettings
// 0x0030 (0x0030 - 0x0000)
struct FATPCFadeSettings final
{
public:
	float                                         FadeInTime;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFadeMinValue;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFadeMaxValue;                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialFadeParamNames;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ECollisionChannel                             FadeChannel;                                       // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFadeSelfIfCollision;                              // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomFadeOutTimeForSelfFade;                  // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfFadeCustomFadeOutTime;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfFadeCheckRadius;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfFadeAttachedActors;                           // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FATPCFadeSettings) == 0x000008, "Wrong alignment on FATPCFadeSettings");
static_assert(sizeof(FATPCFadeSettings) == 0x000030, "Wrong size on FATPCFadeSettings");
static_assert(offsetof(FATPCFadeSettings, FadeInTime) == 0x000000, "Member 'FATPCFadeSettings::FadeInTime' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, FadeOutTime) == 0x000004, "Member 'FATPCFadeSettings::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, MaterialFadeMinValue) == 0x000008, "Member 'FATPCFadeSettings::MaterialFadeMinValue' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, MaterialFadeMaxValue) == 0x00000C, "Member 'FATPCFadeSettings::MaterialFadeMaxValue' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, MaterialFadeParamNames) == 0x000010, "Member 'FATPCFadeSettings::MaterialFadeParamNames' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, FadeChannel) == 0x000020, "Member 'FATPCFadeSettings::FadeChannel' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bFadeSelfIfCollision) == 0x000021, "Member 'FATPCFadeSettings::bFadeSelfIfCollision' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bUseCustomFadeOutTimeForSelfFade) == 0x000022, "Member 'FATPCFadeSettings::bUseCustomFadeOutTimeForSelfFade' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, SelfFadeCustomFadeOutTime) == 0x000024, "Member 'FATPCFadeSettings::SelfFadeCustomFadeOutTime' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, SelfFadeCheckRadius) == 0x000028, "Member 'FATPCFadeSettings::SelfFadeCheckRadius' has a wrong offset!");
static_assert(offsetof(FATPCFadeSettings, bSelfFadeAttachedActors) == 0x00002C, "Member 'FATPCFadeSettings::bSelfFadeAttachedActors' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCFollowTerrainSettings
// 0x0048 (0x0048 - 0x0000)
struct FATPCFollowTerrainSettings final
{
public:
	class UCurveVector*                           SocketOffsetCurve;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                SocketOffsetInterpolation;                         // 0x0008(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PitchRotationCurve;                                // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FATPCInterploationSpeed                PitchRotationInterpolation;                        // 0x0028(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChangePitchRotationDelay;                          // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SocketOffsetInterpSpeed_OLD;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleRotationInterpSpeed_OLD;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCFollowTerrainSettings) == 0x000008, "Wrong alignment on FATPCFollowTerrainSettings");
static_assert(sizeof(FATPCFollowTerrainSettings) == 0x000048, "Wrong size on FATPCFollowTerrainSettings");
static_assert(offsetof(FATPCFollowTerrainSettings, SocketOffsetCurve) == 0x000000, "Member 'FATPCFollowTerrainSettings::SocketOffsetCurve' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, SocketOffsetInterpolation) == 0x000008, "Member 'FATPCFollowTerrainSettings::SocketOffsetInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, PitchRotationCurve) == 0x000020, "Member 'FATPCFollowTerrainSettings::PitchRotationCurve' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, PitchRotationInterpolation) == 0x000028, "Member 'FATPCFollowTerrainSettings::PitchRotationInterpolation' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, ChangePitchRotationDelay) == 0x00003C, "Member 'FATPCFollowTerrainSettings::ChangePitchRotationDelay' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, SocketOffsetInterpSpeed_OLD) == 0x000040, "Member 'FATPCFollowTerrainSettings::SocketOffsetInterpSpeed_OLD' has a wrong offset!");
static_assert(offsetof(FATPCFollowTerrainSettings, AngleRotationInterpSpeed_OLD) == 0x000044, "Member 'FATPCFollowTerrainSettings::AngleRotationInterpSpeed_OLD' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraMode
// 0x0348 (0x0348 - 0x0000)
struct FATPCCameraMode final
{
public:
	bool                                          bEnableLocationSettings;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCLocationSettings                  LocationSettings;                                  // 0x0008(0x00D8)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableRotationSettings;                           // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCRotationSettings                  RotationSettings;                                  // 0x00E8(0x0120)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableFOVSettings;                                // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCFOVSettings                       FOVSettings;                                       // 0x0210(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableFadeSettings;                               // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCFadeSettings                      FadeSettings;                                      // 0x0248(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bEnableFollowTerrainSettings;                      // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCFollowTerrainSettings             FollowTerrainSettings;                             // 0x0280(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShakesSettings;                       // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FATPCCameraShakesSettings              CameraShakesSettings;                              // 0x02D0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FATPCLockOnTargetSettings              LockOnTargetSettings;                              // 0x02E8(0x0060)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraMode) == 0x000008, "Wrong alignment on FATPCCameraMode");
static_assert(sizeof(FATPCCameraMode) == 0x000348, "Wrong size on FATPCCameraMode");
static_assert(offsetof(FATPCCameraMode, bEnableLocationSettings) == 0x000000, "Member 'FATPCCameraMode::bEnableLocationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, LocationSettings) == 0x000008, "Member 'FATPCCameraMode::LocationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableRotationSettings) == 0x0000E0, "Member 'FATPCCameraMode::bEnableRotationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, RotationSettings) == 0x0000E8, "Member 'FATPCCameraMode::RotationSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableFOVSettings) == 0x000208, "Member 'FATPCCameraMode::bEnableFOVSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, FOVSettings) == 0x000210, "Member 'FATPCCameraMode::FOVSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableFadeSettings) == 0x000240, "Member 'FATPCCameraMode::bEnableFadeSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, FadeSettings) == 0x000248, "Member 'FATPCCameraMode::FadeSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableFollowTerrainSettings) == 0x000278, "Member 'FATPCCameraMode::bEnableFollowTerrainSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, FollowTerrainSettings) == 0x000280, "Member 'FATPCCameraMode::FollowTerrainSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, bEnableCameraShakesSettings) == 0x0002C8, "Member 'FATPCCameraMode::bEnableCameraShakesSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, CameraShakesSettings) == 0x0002D0, "Member 'FATPCCameraMode::CameraShakesSettings' has a wrong offset!");
static_assert(offsetof(FATPCCameraMode, LockOnTargetSettings) == 0x0002E8, "Member 'FATPCCameraMode::LockOnTargetSettings' has a wrong offset!");

// ScriptStruct AdvancedThirdPersonCamera.ATPCCameraDebugRules
// 0x0007 (0x0007 - 0x0000)
struct FATPCCameraDebugRules final
{
public:
	bool                                          bPrintErrorsToScreen;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLocationObjectDebug;                        // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRoofCollisionCheckDebug;                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDrawFadeShapeDebug;                         // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollowTerrainEnableDebug;                         // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLockOnTargetDebug;                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOnTargetShowTargetDebug;                      // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FATPCCameraDebugRules) == 0x000001, "Wrong alignment on FATPCCameraDebugRules");
static_assert(sizeof(FATPCCameraDebugRules) == 0x000007, "Wrong size on FATPCCameraDebugRules");
static_assert(offsetof(FATPCCameraDebugRules, bPrintErrorsToScreen) == 0x000000, "Member 'FATPCCameraDebugRules::bPrintErrorsToScreen' has a wrong offset!");
static_assert(offsetof(FATPCCameraDebugRules, bEnableLocationObjectDebug) == 0x000001, "Member 'FATPCCameraDebugRules::bEnableLocationObjectDebug' has a wrong offset!");
static_assert(offsetof(FATPCCameraDebugRules, bEnableRoofCollisionCheckDebug) == 0x000002, "Member 'FATPCCameraDebugRules::bEnableRoofCollisionCheckDebug' has a wrong offset!");
static_assert(offsetof(FATPCCameraDebugRules, bEnableDrawFadeShapeDebug) == 0x000003, "Member 'FATPCCameraDebugRules::bEnableDrawFadeShapeDebug' has a wrong offset!");
static_assert(offsetof(FATPCCameraDebugRules, bFollowTerrainEnableDebug) == 0x000004, "Member 'FATPCCameraDebugRules::bFollowTerrainEnableDebug' has a wrong offset!");
static_assert(offsetof(FATPCCameraDebugRules, bEnableLockOnTargetDebug) == 0x000005, "Member 'FATPCCameraDebugRules::bEnableLockOnTargetDebug' has a wrong offset!");
static_assert(offsetof(FATPCCameraDebugRules, bLockOnTargetShowTargetDebug) == 0x000006, "Member 'FATPCCameraDebugRules::bLockOnTargetShowTargetDebug' has a wrong offset!");

}

