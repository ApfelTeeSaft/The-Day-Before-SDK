#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrueSkyController

#include "Basic.hpp"

#include "Illumination_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrueSkyController.BP_TrueSkyController_C
// 0x00C0 (0x0350 - 0x0290)
class ABP_TrueSkyController_C final : public AActor
{
public:
	class UAtmosphericFogComponent*               AtmosphericFog;                                    // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog_Player;                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASkyLight*                              SkyLight;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UObject*                                TS_Actor;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        SecondsInDay;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeOfDay;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SkyLightIntensityCurve;                            // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      SkyLightColorCurve;                                // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      PlayerFogInscatteringColorCurve;                   // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogDensityCurve;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogStartDistanceCurve;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogSunMultiplierCurve;                             // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      PlayerFogInscatteringColorCurve_Blizzard;          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogDensityCurve_Blizzard;                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogStartDistanceCurve_Blizzard;                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlizzard;                                        // 0x0310(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        UpdateHeightFogInterpSpeed;                        // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CloudLerpValue;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlizzardSetted;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WindPowerLerpValue;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNight;                                           // 0x0338(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCustomIllumination;                             // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x2];                                      // 0x033A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIllumination                          Illumination;                                      // 0x033C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IlluminationAlpha;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrueSkyController_C">();
	}
	static class ABP_TrueSkyController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrueSkyController_C>();
	}
};
static_assert(alignof(ABP_TrueSkyController_C) == 0x000008, "Wrong alignment on ABP_TrueSkyController_C");
static_assert(sizeof(ABP_TrueSkyController_C) == 0x000350, "Wrong size on ABP_TrueSkyController_C");
static_assert(offsetof(ABP_TrueSkyController_C, AtmosphericFog) == 0x000290, "Member 'ABP_TrueSkyController_C::AtmosphericFog' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, ExponentialHeightFog_Player) == 0x000298, "Member 'ABP_TrueSkyController_C::ExponentialHeightFog_Player' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_TrueSkyController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, SkyLight) == 0x0002A8, "Member 'ABP_TrueSkyController_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, TS_Actor) == 0x0002B0, "Member 'ABP_TrueSkyController_C::TS_Actor' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, SecondsInDay) == 0x0002B8, "Member 'ABP_TrueSkyController_C::SecondsInDay' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, TimeOfDay) == 0x0002C0, "Member 'ABP_TrueSkyController_C::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, SkyLightIntensityCurve) == 0x0002C8, "Member 'ABP_TrueSkyController_C::SkyLightIntensityCurve' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, SkyLightColorCurve) == 0x0002D0, "Member 'ABP_TrueSkyController_C::SkyLightColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, PlayerFogInscatteringColorCurve) == 0x0002D8, "Member 'ABP_TrueSkyController_C::PlayerFogInscatteringColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, FogDensityCurve) == 0x0002E0, "Member 'ABP_TrueSkyController_C::FogDensityCurve' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, FogStartDistanceCurve) == 0x0002E8, "Member 'ABP_TrueSkyController_C::FogStartDistanceCurve' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, FogSunMultiplierCurve) == 0x0002F0, "Member 'ABP_TrueSkyController_C::FogSunMultiplierCurve' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, PlayerFogInscatteringColorCurve_Blizzard) == 0x0002F8, "Member 'ABP_TrueSkyController_C::PlayerFogInscatteringColorCurve_Blizzard' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, FogDensityCurve_Blizzard) == 0x000300, "Member 'ABP_TrueSkyController_C::FogDensityCurve_Blizzard' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, FogStartDistanceCurve_Blizzard) == 0x000308, "Member 'ABP_TrueSkyController_C::FogStartDistanceCurve_Blizzard' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, IsBlizzard) == 0x000310, "Member 'ABP_TrueSkyController_C::IsBlizzard' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, UpdateHeightFogInterpSpeed) == 0x000318, "Member 'ABP_TrueSkyController_C::UpdateHeightFogInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, CloudLerpValue) == 0x000320, "Member 'ABP_TrueSkyController_C::CloudLerpValue' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, BlizzardSetted) == 0x000328, "Member 'ABP_TrueSkyController_C::BlizzardSetted' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, WindPowerLerpValue) == 0x000330, "Member 'ABP_TrueSkyController_C::WindPowerLerpValue' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, IsNight) == 0x000338, "Member 'ABP_TrueSkyController_C::IsNight' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, HasCustomIllumination) == 0x000339, "Member 'ABP_TrueSkyController_C::HasCustomIllumination' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, Illumination) == 0x00033C, "Member 'ABP_TrueSkyController_C::Illumination' has a wrong offset!");
static_assert(offsetof(ABP_TrueSkyController_C, IlluminationAlpha) == 0x000348, "Member 'ABP_TrueSkyController_C::IlluminationAlpha' has a wrong offset!");

}

