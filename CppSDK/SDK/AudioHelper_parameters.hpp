#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioHelper

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FMODStudio_structs.hpp"


namespace SDK::Params
{

// Function AudioHelper.AudioHelper_C.FMODPlayEventAtLocation
// 0x0090 (0x0090 - 0x0000)
struct AudioHelper_C_FMODPlayEventAtLocation final
{
public:
	class UFMODEvent*                             Event;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Location;                                          // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoPlay;                                         // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     ReturnValue;                                       // 0x0080(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AudioHelper_C_FMODPlayEventAtLocation) == 0x000010, "Wrong alignment on AudioHelper_C_FMODPlayEventAtLocation");
static_assert(sizeof(AudioHelper_C_FMODPlayEventAtLocation) == 0x000090, "Wrong size on AudioHelper_C_FMODPlayEventAtLocation");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAtLocation, Event) == 0x000000, "Member 'AudioHelper_C_FMODPlayEventAtLocation::Event' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAtLocation, Location) == 0x000010, "Member 'AudioHelper_C_FMODPlayEventAtLocation::Location' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAtLocation, bAutoPlay) == 0x000070, "Member 'AudioHelper_C_FMODPlayEventAtLocation::bAutoPlay' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAtLocation, __WorldContext) == 0x000078, "Member 'AudioHelper_C_FMODPlayEventAtLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAtLocation, ReturnValue) == 0x000080, "Member 'AudioHelper_C_FMODPlayEventAtLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAtLocation, CallFunc_PlayEventAtLocation_ReturnValue) == 0x000088, "Member 'AudioHelper_C_FMODPlayEventAtLocation::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.FMODPlayEventAttached
// 0x0058 (0x0058 - 0x0000)
struct AudioHelper_C_FMODPlayEventAttached final
{
public:
	class UFMODEvent*                             Event;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoPlay;                                         // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoDestroy;                                      // 0x0033(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AudioHelper_C_FMODPlayEventAttached) == 0x000008, "Wrong alignment on AudioHelper_C_FMODPlayEventAttached");
static_assert(sizeof(AudioHelper_C_FMODPlayEventAttached) == 0x000058, "Wrong size on AudioHelper_C_FMODPlayEventAttached");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, Event) == 0x000000, "Member 'AudioHelper_C_FMODPlayEventAttached::Event' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, AttachToComponent) == 0x000008, "Member 'AudioHelper_C_FMODPlayEventAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, AttachPointName) == 0x000010, "Member 'AudioHelper_C_FMODPlayEventAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, Location) == 0x000018, "Member 'AudioHelper_C_FMODPlayEventAttached::Location' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, LocationType) == 0x000030, "Member 'AudioHelper_C_FMODPlayEventAttached::LocationType' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, bStopWhenAttachedToDestroyed) == 0x000031, "Member 'AudioHelper_C_FMODPlayEventAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, bAutoPlay) == 0x000032, "Member 'AudioHelper_C_FMODPlayEventAttached::bAutoPlay' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, bAutoDestroy) == 0x000033, "Member 'AudioHelper_C_FMODPlayEventAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, __WorldContext) == 0x000038, "Member 'AudioHelper_C_FMODPlayEventAttached::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, ReturnValue) == 0x000040, "Member 'AudioHelper_C_FMODPlayEventAttached::ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, CallFunc_PlayEventAttached_ReturnValue) == 0x000048, "Member 'AudioHelper_C_FMODPlayEventAttached::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttached, CallFunc_IsDedicatedServer_ReturnValue) == 0x000050, "Member 'AudioHelper_C_FMODPlayEventAttached::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.FMODPlayEventAttachedBullet
// 0x0058 (0x0058 - 0x0000)
struct AudioHelper_C_FMODPlayEventAttachedBullet final
{
public:
	class UFMODEvent*                             Event;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoPlay;                                         // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAutoDestroy;                                      // 0x0033(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODOcclusionDetails                  Occlusion;                                         // 0x0034(0x0003)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODOcclusionDetails                  K2Node_MakeStruct_FMODOcclusionDetails;            // 0x0050(0x0003)(NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AudioHelper_C_FMODPlayEventAttachedBullet) == 0x000008, "Wrong alignment on AudioHelper_C_FMODPlayEventAttachedBullet");
static_assert(sizeof(AudioHelper_C_FMODPlayEventAttachedBullet) == 0x000058, "Wrong size on AudioHelper_C_FMODPlayEventAttachedBullet");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, Event) == 0x000000, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::Event' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, AttachToComponent) == 0x000008, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, AttachPointName) == 0x000010, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::AttachPointName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, Location) == 0x000018, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::Location' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, LocationType) == 0x000030, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::LocationType' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, bStopWhenAttachedToDestroyed) == 0x000031, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, bAutoPlay) == 0x000032, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::bAutoPlay' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, bAutoDestroy) == 0x000033, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, Occlusion) == 0x000034, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::Occlusion' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, __WorldContext) == 0x000038, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, ReturnValue) == 0x000040, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, CallFunc_PlayEventAttached_ReturnValue) == 0x000048, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, K2Node_MakeStruct_FMODOcclusionDetails) == 0x000050, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::K2Node_MakeStruct_FMODOcclusionDetails' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_FMODPlayEventAttachedBullet, CallFunc_IsDedicatedServer_ReturnValue) == 0x000053, "Member 'AudioHelper_C_FMODPlayEventAttachedBullet::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.PlayEventWithOcclusion
// 0x0038 (0x0038 - 0x0000)
struct AudioHelper_C_PlayEventWithOcclusion final
{
public:
	class UFMODEvent*                             Event;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODAudioComponent;                                // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODOcclusionDetails                  K2Node_MakeStruct_FMODOcclusionDetails;            // 0x0020(0x0003)(NoDestructor)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_FMODPlayEventAttached_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AudioHelper_C_PlayEventWithOcclusion) == 0x000008, "Wrong alignment on AudioHelper_C_PlayEventWithOcclusion");
static_assert(sizeof(AudioHelper_C_PlayEventWithOcclusion) == 0x000038, "Wrong size on AudioHelper_C_PlayEventWithOcclusion");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, Event) == 0x000000, "Member 'AudioHelper_C_PlayEventWithOcclusion::Event' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, AttachToComponent) == 0x000008, "Member 'AudioHelper_C_PlayEventWithOcclusion::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, __WorldContext) == 0x000010, "Member 'AudioHelper_C_PlayEventWithOcclusion::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, FMODAudioComponent) == 0x000018, "Member 'AudioHelper_C_PlayEventWithOcclusion::FMODAudioComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, K2Node_MakeStruct_FMODOcclusionDetails) == 0x000020, "Member 'AudioHelper_C_PlayEventWithOcclusion::K2Node_MakeStruct_FMODOcclusionDetails' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, CallFunc_FMODPlayEventAttached_ReturnValue) == 0x000028, "Member 'AudioHelper_C_PlayEventWithOcclusion::CallFunc_FMODPlayEventAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayEventWithOcclusion, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'AudioHelper_C_PlayEventWithOcclusion::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.PlayForSurface
// 0x0430 (0x0430 - 0x0000)
struct AudioHelper_C_PlayForSurface final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Default;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Asphalt;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Snow;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Dirt;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Wood;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Stone;                                             // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Ice;                                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Metal;                                             // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Carpet;                                            // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             SnowFlat;                                          // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Concrete;                                          // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ConcreteWet;                                       // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             GlassBroken;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Mud_Road;                                          // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Sand;                                              // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             RUBBER;                                            // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Vegetable;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Tree;                                              // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Soil;                                              // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Grass;                                             // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Water;                                             // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Peeble;                                            // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlatSurface;                                     // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             Temp_object_Variable;                              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_1;                            // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_2;                            // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_3;                            // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_4;                            // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_5;                            // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_6;                            // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_7;                            // 0x01A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_8;                            // 0x01A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_9;                            // 0x01B0(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x01C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent; // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA[0x2];                                      // 0x02BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0328(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0338(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0358(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_10;                           // 0x0390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0398(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x03B0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0410(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             K2Node_Select_Default;                             // 0x0418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_FMODPlayEventAtLocation_ReturnValue;      // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AudioHelper_C_PlayForSurface) == 0x000010, "Wrong alignment on AudioHelper_C_PlayForSurface");
static_assert(sizeof(AudioHelper_C_PlayForSurface) == 0x000430, "Wrong size on AudioHelper_C_PlayForSurface");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Actor) == 0x000000, "Member 'AudioHelper_C_PlayForSurface::Actor' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, AttachToComponent) == 0x000008, "Member 'AudioHelper_C_PlayForSurface::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Default) == 0x000010, "Member 'AudioHelper_C_PlayForSurface::Default' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Asphalt) == 0x000018, "Member 'AudioHelper_C_PlayForSurface::Asphalt' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Snow) == 0x000020, "Member 'AudioHelper_C_PlayForSurface::Snow' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Dirt) == 0x000028, "Member 'AudioHelper_C_PlayForSurface::Dirt' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Wood) == 0x000030, "Member 'AudioHelper_C_PlayForSurface::Wood' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Stone) == 0x000038, "Member 'AudioHelper_C_PlayForSurface::Stone' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Ice) == 0x000040, "Member 'AudioHelper_C_PlayForSurface::Ice' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Metal) == 0x000048, "Member 'AudioHelper_C_PlayForSurface::Metal' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Carpet) == 0x000050, "Member 'AudioHelper_C_PlayForSurface::Carpet' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, SnowFlat) == 0x000058, "Member 'AudioHelper_C_PlayForSurface::SnowFlat' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Concrete) == 0x000060, "Member 'AudioHelper_C_PlayForSurface::Concrete' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, ConcreteWet) == 0x000068, "Member 'AudioHelper_C_PlayForSurface::ConcreteWet' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, GlassBroken) == 0x000070, "Member 'AudioHelper_C_PlayForSurface::GlassBroken' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Mud_Road) == 0x000078, "Member 'AudioHelper_C_PlayForSurface::Mud_Road' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Sand) == 0x000080, "Member 'AudioHelper_C_PlayForSurface::Sand' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, RUBBER) == 0x000088, "Member 'AudioHelper_C_PlayForSurface::RUBBER' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Vegetable) == 0x000090, "Member 'AudioHelper_C_PlayForSurface::Vegetable' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Tree) == 0x000098, "Member 'AudioHelper_C_PlayForSurface::Tree' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Soil) == 0x0000A0, "Member 'AudioHelper_C_PlayForSurface::Soil' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Grass) == 0x0000A8, "Member 'AudioHelper_C_PlayForSurface::Grass' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Water) == 0x0000B0, "Member 'AudioHelper_C_PlayForSurface::Water' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Peeble) == 0x0000B8, "Member 'AudioHelper_C_PlayForSurface::Peeble' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, __WorldContext) == 0x0000C0, "Member 'AudioHelper_C_PlayForSurface::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, IsFlatSurface) == 0x0000C8, "Member 'AudioHelper_C_PlayForSurface::IsFlatSurface' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable) == 0x0000D0, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_GetActorRightVector_ReturnValue) == 0x0000D8, "Member 'AudioHelper_C_PlayForSurface::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000F0, "Member 'AudioHelper_C_PlayForSurface::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_IsDedicatedServer_ReturnValue) == 0x000108, "Member 'AudioHelper_C_PlayForSurface::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000110, "Member 'AudioHelper_C_PlayForSurface::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_Add_VectorVector_ReturnValue) == 0x000128, "Member 'AudioHelper_C_PlayForSurface::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000140, "Member 'AudioHelper_C_PlayForSurface::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000158, "Member 'AudioHelper_C_PlayForSurface::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_1) == 0x000170, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_2) == 0x000178, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_3) == 0x000180, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_4) == 0x000188, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_5) == 0x000190, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_6) == 0x000198, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_7) == 0x0001A0, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_8) == 0x0001A8, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_9) == 0x0001B0, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_LineTraceSingle_OutHit) == 0x0001C0, "Member 'AudioHelper_C_PlayForSurface::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_LineTraceSingle_ReturnValue) == 0x0002A8, "Member 'AudioHelper_C_PlayForSurface::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_PlayEventWithOcclusion_FMODAudioComponent) == 0x0002B0, "Member 'AudioHelper_C_PlayForSurface::CallFunc_PlayEventWithOcclusion_FMODAudioComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x0002B8, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x0002B9, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_Time) == 0x0002BC, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_Distance) == 0x0002C0, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_Location) == 0x0002C8, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x0002E0, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_Normal) == 0x0002F8, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x000310, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_PhysMat) == 0x000328, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_HitActor) == 0x000330, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_HitComponent) == 0x000338, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_HitBoneName) == 0x000340, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_BoneName) == 0x000348, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_HitItem) == 0x000350, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_ElementIndex) == 0x000354, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_FaceIndex) == 0x000358, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_TraceStart) == 0x000360, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_BreakHitResult_TraceEnd) == 0x000378, "Member 'AudioHelper_C_PlayForSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_object_Variable_10) == 0x000390, "Member 'AudioHelper_C_PlayForSurface::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000398, "Member 'AudioHelper_C_PlayForSurface::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_MakeTransform_ReturnValue) == 0x0003B0, "Member 'AudioHelper_C_PlayForSurface::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, Temp_byte_Variable) == 0x000410, "Member 'AudioHelper_C_PlayForSurface::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, K2Node_Select_Default) == 0x000418, "Member 'AudioHelper_C_PlayForSurface::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayForSurface, CallFunc_FMODPlayEventAtLocation_ReturnValue) == 0x000420, "Member 'AudioHelper_C_PlayForSurface::CallFunc_FMODPlayEventAtLocation_ReturnValue' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.PlayStepForSurface
// 0x0320 (0x0320 - 0x0000)
struct AudioHelper_C_PlayStepForSurface final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Default;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Asphalt;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Snow;                                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Dirt;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Wood;                                              // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Stone;                                             // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Ice;                                               // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Metal;                                             // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Carpet;                                            // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             SnowFlat;                                          // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Concrete;                                          // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ConcreteWet;                                       // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             GlassBroken;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Mud_Road;                                          // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Sand;                                              // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             RUBBER;                                            // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Vegetable;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Tree;                                              // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Soil;                                              // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Grass;                                             // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Water;                                             // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Peeble;                                            // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlatSurface;                                     // 0x00C8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             Temp_object_Variable;                              // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent; // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_1;                            // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_2;                            // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_3;                            // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_4;                            // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable_5;                            // 0x0138(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0148(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0231(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0232(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_233[0x1];                                      // 0x0233(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x02A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             K2Node_Select_Default;                             // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent_1; // 0x0318(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AudioHelper_C_PlayStepForSurface) == 0x000008, "Wrong alignment on AudioHelper_C_PlayStepForSurface");
static_assert(sizeof(AudioHelper_C_PlayStepForSurface) == 0x000320, "Wrong size on AudioHelper_C_PlayStepForSurface");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Actor) == 0x000000, "Member 'AudioHelper_C_PlayStepForSurface::Actor' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, AttachToComponent) == 0x000008, "Member 'AudioHelper_C_PlayStepForSurface::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Default) == 0x000010, "Member 'AudioHelper_C_PlayStepForSurface::Default' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Asphalt) == 0x000018, "Member 'AudioHelper_C_PlayStepForSurface::Asphalt' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Snow) == 0x000020, "Member 'AudioHelper_C_PlayStepForSurface::Snow' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Dirt) == 0x000028, "Member 'AudioHelper_C_PlayStepForSurface::Dirt' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Wood) == 0x000030, "Member 'AudioHelper_C_PlayStepForSurface::Wood' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Stone) == 0x000038, "Member 'AudioHelper_C_PlayStepForSurface::Stone' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Ice) == 0x000040, "Member 'AudioHelper_C_PlayStepForSurface::Ice' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Metal) == 0x000048, "Member 'AudioHelper_C_PlayStepForSurface::Metal' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Carpet) == 0x000050, "Member 'AudioHelper_C_PlayStepForSurface::Carpet' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, SnowFlat) == 0x000058, "Member 'AudioHelper_C_PlayStepForSurface::SnowFlat' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Concrete) == 0x000060, "Member 'AudioHelper_C_PlayStepForSurface::Concrete' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, ConcreteWet) == 0x000068, "Member 'AudioHelper_C_PlayStepForSurface::ConcreteWet' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, GlassBroken) == 0x000070, "Member 'AudioHelper_C_PlayStepForSurface::GlassBroken' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Mud_Road) == 0x000078, "Member 'AudioHelper_C_PlayStepForSurface::Mud_Road' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Sand) == 0x000080, "Member 'AudioHelper_C_PlayStepForSurface::Sand' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, RUBBER) == 0x000088, "Member 'AudioHelper_C_PlayStepForSurface::RUBBER' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Vegetable) == 0x000090, "Member 'AudioHelper_C_PlayStepForSurface::Vegetable' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Tree) == 0x000098, "Member 'AudioHelper_C_PlayStepForSurface::Tree' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Soil) == 0x0000A0, "Member 'AudioHelper_C_PlayStepForSurface::Soil' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Grass) == 0x0000A8, "Member 'AudioHelper_C_PlayStepForSurface::Grass' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Water) == 0x0000B0, "Member 'AudioHelper_C_PlayStepForSurface::Water' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Peeble) == 0x0000B8, "Member 'AudioHelper_C_PlayStepForSurface::Peeble' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, __WorldContext) == 0x0000C0, "Member 'AudioHelper_C_PlayStepForSurface::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, IsFlatSurface) == 0x0000C8, "Member 'AudioHelper_C_PlayStepForSurface::IsFlatSurface' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_object_Variable) == 0x0000D0, "Member 'AudioHelper_C_PlayStepForSurface::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_PlayEventWithOcclusion_FMODAudioComponent) == 0x0000D8, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_PlayEventWithOcclusion_FMODAudioComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_IsValid_ReturnValue) == 0x0000E0, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_IsDedicatedServer_ReturnValue) == 0x0000E1, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0000E8, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_object_Variable_1) == 0x000100, "Member 'AudioHelper_C_PlayStepForSurface::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_object_Variable_2) == 0x000120, "Member 'AudioHelper_C_PlayStepForSurface::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_object_Variable_3) == 0x000128, "Member 'AudioHelper_C_PlayStepForSurface::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_object_Variable_4) == 0x000130, "Member 'AudioHelper_C_PlayStepForSurface::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_object_Variable_5) == 0x000138, "Member 'AudioHelper_C_PlayStepForSurface::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_LineTraceSingle_OutHit) == 0x000148, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_LineTraceSingle_ReturnValue) == 0x000230, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x000231, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x000232, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_Time) == 0x000234, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_Distance) == 0x000238, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_Location) == 0x000240, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x000258, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_Normal) == 0x000270, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x000288, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_PhysMat) == 0x0002A0, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_HitActor) == 0x0002A8, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_HitComponent) == 0x0002B0, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_HitBoneName) == 0x0002B8, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_BoneName) == 0x0002C0, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_HitItem) == 0x0002C8, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_ElementIndex) == 0x0002CC, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_FaceIndex) == 0x0002D0, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_TraceStart) == 0x0002D8, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_BreakHitResult_TraceEnd) == 0x0002F0, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, Temp_byte_Variable) == 0x000308, "Member 'AudioHelper_C_PlayStepForSurface::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, K2Node_Select_Default) == 0x000310, "Member 'AudioHelper_C_PlayStepForSurface::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_PlayStepForSurface, CallFunc_PlayEventWithOcclusion_FMODAudioComponent_1) == 0x000318, "Member 'AudioHelper_C_PlayStepForSurface::CallFunc_PlayEventWithOcclusion_FMODAudioComponent_1' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.SetFMODParam
// 0x0040 (0x0040 - 0x0000)
struct AudioHelper_C_SetFMODParam final
{
public:
	class UFMODAudioComponent*                    FMODComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ToValue;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpTime;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CustomCurve;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODParamTask_C*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class UFMODParamTask_C*                       CallFunc_SpawnObject_ReturnValue;                  // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AudioHelper_C_SetFMODParam) == 0x000008, "Wrong alignment on AudioHelper_C_SetFMODParam");
static_assert(sizeof(AudioHelper_C_SetFMODParam) == 0x000040, "Wrong size on AudioHelper_C_SetFMODParam");
static_assert(offsetof(AudioHelper_C_SetFMODParam, FMODComp) == 0x000000, "Member 'AudioHelper_C_SetFMODParam::FMODComp' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, ParamName) == 0x000008, "Member 'AudioHelper_C_SetFMODParam::ParamName' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, ToValue) == 0x000010, "Member 'AudioHelper_C_SetFMODParam::ToValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, LerpTime) == 0x000018, "Member 'AudioHelper_C_SetFMODParam::LerpTime' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, CustomCurve) == 0x000020, "Member 'AudioHelper_C_SetFMODParam::CustomCurve' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, __WorldContext) == 0x000028, "Member 'AudioHelper_C_SetFMODParam::__WorldContext' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, ReturnValue) == 0x000030, "Member 'AudioHelper_C_SetFMODParam::ReturnValue' has a wrong offset!");
static_assert(offsetof(AudioHelper_C_SetFMODParam, CallFunc_SpawnObject_ReturnValue) == 0x000038, "Member 'AudioHelper_C_SetFMODParam::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

// Function AudioHelper.AudioHelper_C.UnloadAllBanks
// 0x0008 (0x0008 - 0x0000)
struct AudioHelper_C_UnloadAllBanks final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AudioHelper_C_UnloadAllBanks) == 0x000008, "Wrong alignment on AudioHelper_C_UnloadAllBanks");
static_assert(sizeof(AudioHelper_C_UnloadAllBanks) == 0x000008, "Wrong size on AudioHelper_C_UnloadAllBanks");
static_assert(offsetof(AudioHelper_C_UnloadAllBanks, __WorldContext) == 0x000000, "Member 'AudioHelper_C_UnloadAllBanks::__WorldContext' has a wrong offset!");

}

