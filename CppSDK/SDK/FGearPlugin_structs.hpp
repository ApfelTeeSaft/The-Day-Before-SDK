#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FGearPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FGearPlugin.FGearDifferentialType
// NumValues: 0x0004
enum class EFGearDifferentialType : uint8
{
	DF_OPEN                                  = 0,
	DF_LOCKED                                = 1,
	DF_LSD                                   = 2,
	DF_MAX                                   = 3,
};

// Enum FGearPlugin.FGearRewindReplayState
// NumValues: 0x0004
enum class EFGearRewindReplayState : uint8
{
	RS_PLAY                                  = 0,
	RS_REWIND                                = 1,
	RS_REPLAY                                = 2,
	RS_MAX                                   = 3,
};

// Enum FGearPlugin.FGearControllerType
// NumValues: 0x0004
enum class EFGearControllerType : uint8
{
	KEYBOARD                                 = 0,
	JOYSTICK                                 = 1,
	WHEEL                                    = 2,
	FGearControllerType_MAX                  = 3,
};

// Enum FGearPlugin.FGearShifterType
// NumValues: 0x0004
enum class EFGearShifterType : uint8
{
	AUTO                                     = 0,
	SEQUENTIAL                               = 1,
	MANUAL                                   = 2,
	FGearShifterType_MAX                     = 3,
};

// Enum FGearPlugin.FGearForceCombineMode
// NumValues: 0x0004
enum class EFGearForceCombineMode : uint8
{
	GRIP                                     = 0,
	SIMPLE                                   = 1,
	SUM                                      = 2,
	FGearForceCombineMode_MAX                = 3,
};

// Enum FGearPlugin.FGearQueryType
// NumValues: 0x0004
enum class EFGearQueryType : uint8
{
	Line                                     = 0,
	Sphere                                   = 1,
	Convex                                   = 2,
	FGearQueryType_MAX                       = 3,
};

// Enum FGearPlugin.FGearUpDirection
// NumValues: 0x0004
enum class EFGearUpDirection : uint8
{
	X_UP                                     = 0,
	Y_UP                                     = 1,
	Z_UP                                     = 2,
	FGearUpDirection_MAX                     = 3,
};

// Enum FGearPlugin.FGearQueryMobilityType
// NumValues: 0x0004
enum class EFGearQueryMobilityType : uint8
{
	Any                                      = 0,
	Static                                   = 1,
	Dynamic                                  = 2,
	FGearQueryMobilityType_MAX               = 3,
};

// Enum FGearPlugin.FGearWheelSide
// NumValues: 0x0003
enum class EFGearWheelSide : uint8
{
	WS_LEFT                                  = 0,
	WS_RIGHT                                 = 1,
	WS_MAX                                   = 2,
};

// ScriptStruct FGearPlugin.GearBoneTransform
// 0x0030 (0x0030 - 0x0000)
struct FGearBoneTransform final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearBoneTransform) == 0x000008, "Wrong alignment on FGearBoneTransform");
static_assert(sizeof(FGearBoneTransform) == 0x000030, "Wrong size on FGearBoneTransform");
static_assert(offsetof(FGearBoneTransform, Position) == 0x000000, "Member 'FGearBoneTransform::Position' has a wrong offset!");
static_assert(offsetof(FGearBoneTransform, Rotation) == 0x000018, "Member 'FGearBoneTransform::Rotation' has a wrong offset!");

// ScriptStruct FGearPlugin.GearBoneAxle
// 0x0060 (0x0060 - 0x0000)
struct FGearBoneAxle final
{
public:
	struct FGearBoneTransform                     Left;                                              // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FGearBoneTransform                     Right;                                             // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearBoneAxle) == 0x000008, "Wrong alignment on FGearBoneAxle");
static_assert(sizeof(FGearBoneAxle) == 0x000060, "Wrong size on FGearBoneAxle");
static_assert(offsetof(FGearBoneAxle, Left) == 0x000000, "Member 'FGearBoneAxle::Left' has a wrong offset!");
static_assert(offsetof(FGearBoneAxle, Right) == 0x000030, "Member 'FGearBoneAxle::Right' has a wrong offset!");

// ScriptStruct FGearPlugin.FGearInputState
// 0x001C (0x001C - 0x0000)
struct FFGearInputState final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MTick;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MThrottle;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MSteer;                                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MBrake;                                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MClutch;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MThrottleState;                                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          MGear;                                             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MHandbrake;                                        // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFGearInputState) == 0x000004, "Wrong alignment on FFGearInputState");
static_assert(sizeof(FFGearInputState) == 0x00001C, "Wrong size on FFGearInputState");
static_assert(offsetof(FFGearInputState, MTick) == 0x000004, "Member 'FFGearInputState::MTick' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MThrottle) == 0x000008, "Member 'FFGearInputState::MThrottle' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MSteer) == 0x00000C, "Member 'FFGearInputState::MSteer' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MBrake) == 0x000010, "Member 'FFGearInputState::MBrake' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MClutch) == 0x000014, "Member 'FFGearInputState::MClutch' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MThrottleState) == 0x000018, "Member 'FFGearInputState::MThrottleState' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MGear) == 0x000019, "Member 'FFGearInputState::MGear' has a wrong offset!");
static_assert(offsetof(FFGearInputState, MHandbrake) == 0x00001A, "Member 'FFGearInputState::MHandbrake' has a wrong offset!");

// ScriptStruct FGearPlugin.GearInputStateBuffer
// 0x0010 (0x0010 - 0x0000)
struct FGearInputStateBuffer final
{
public:
	TArray<struct FFGearInputState>               MBuffer;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearInputStateBuffer) == 0x000008, "Wrong alignment on FGearInputStateBuffer");
static_assert(sizeof(FGearInputStateBuffer) == 0x000010, "Wrong size on FGearInputStateBuffer");
static_assert(offsetof(FGearInputStateBuffer, MBuffer) == 0x000000, "Member 'FGearInputStateBuffer::MBuffer' has a wrong offset!");

// ScriptStruct FGearPlugin.GearSnapState
// 0x0070 (0x0070 - 0x0000)
struct FGearSnapState final
{
public:
	float                                         MTime;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MPosition;                                         // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  MRotation;                                         // 0x0020(0x0020)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MVelocity;                                         // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MAngVelocity;                                      // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearSnapState) == 0x000010, "Wrong alignment on FGearSnapState");
static_assert(sizeof(FGearSnapState) == 0x000070, "Wrong size on FGearSnapState");
static_assert(offsetof(FGearSnapState, MTime) == 0x000000, "Member 'FGearSnapState::MTime' has a wrong offset!");
static_assert(offsetof(FGearSnapState, MPosition) == 0x000008, "Member 'FGearSnapState::MPosition' has a wrong offset!");
static_assert(offsetof(FGearSnapState, MRotation) == 0x000020, "Member 'FGearSnapState::MRotation' has a wrong offset!");
static_assert(offsetof(FGearSnapState, MVelocity) == 0x000040, "Member 'FGearSnapState::MVelocity' has a wrong offset!");
static_assert(offsetof(FGearSnapState, MAngVelocity) == 0x000058, "Member 'FGearSnapState::MAngVelocity' has a wrong offset!");

// ScriptStruct FGearPlugin.GearMarkSection
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FGearMarkSection final
{
public:
	uint8                                         Pad_0[0x88];                                       // 0x0000(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGearMarkSection) == 0x000008, "Wrong alignment on FGearMarkSection");
static_assert(sizeof(FGearMarkSection) == 0x000088, "Wrong size on FGearMarkSection");

// ScriptStruct FGearPlugin.GearTelemetryOptions
// 0x001C (0x001C - 0x0000)
struct FGearTelemetryOptions final
{
public:
	struct FLinearColor                           MTextColor;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShow;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowGauge;                                        // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowAeroDynamics;                                 // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowAxles;                                        // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowEngine;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowInput;                                        // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowTransmission;                                 // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowVehicle;                                      // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowWheels;                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowReplication;                                  // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowStats;                                        // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MShowGizmos;                                       // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGearTelemetryOptions) == 0x000004, "Wrong alignment on FGearTelemetryOptions");
static_assert(sizeof(FGearTelemetryOptions) == 0x00001C, "Wrong size on FGearTelemetryOptions");
static_assert(offsetof(FGearTelemetryOptions, MTextColor) == 0x000000, "Member 'FGearTelemetryOptions::MTextColor' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShow) == 0x000010, "Member 'FGearTelemetryOptions::MShow' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowGauge) == 0x000011, "Member 'FGearTelemetryOptions::MShowGauge' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowAeroDynamics) == 0x000012, "Member 'FGearTelemetryOptions::MShowAeroDynamics' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowAxles) == 0x000013, "Member 'FGearTelemetryOptions::MShowAxles' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowEngine) == 0x000014, "Member 'FGearTelemetryOptions::MShowEngine' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowInput) == 0x000015, "Member 'FGearTelemetryOptions::MShowInput' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowTransmission) == 0x000016, "Member 'FGearTelemetryOptions::MShowTransmission' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowVehicle) == 0x000017, "Member 'FGearTelemetryOptions::MShowVehicle' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowWheels) == 0x000018, "Member 'FGearTelemetryOptions::MShowWheels' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowReplication) == 0x000019, "Member 'FGearTelemetryOptions::MShowReplication' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowStats) == 0x00001A, "Member 'FGearTelemetryOptions::MShowStats' has a wrong offset!");
static_assert(offsetof(FGearTelemetryOptions, MShowGizmos) == 0x00001B, "Member 'FGearTelemetryOptions::MShowGizmos' has a wrong offset!");

// ScriptStruct FGearPlugin.FGearVehicleState
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FFGearVehicleState final
{
public:
	uint8                                         Pad_0[0xF0];                                       // 0x0000(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFGearVehicleState) == 0x000010, "Wrong alignment on FFGearVehicleState");
static_assert(sizeof(FFGearVehicleState) == 0x0000F0, "Wrong size on FFGearVehicleState");

}

