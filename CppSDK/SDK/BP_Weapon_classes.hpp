#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Weapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FItemInfo_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BPE_AmmoClass_structs.hpp"
#include "BPS_WeaponData_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "BPE_FireMode_structs.hpp"
#include "BPE_AmmoType_structs.hpp"
#include "Survival_classes.hpp"
#include "E_TypesOfModes_structs.hpp"
#include "PlayerSlots_structs.hpp"
#include "StanceState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Weapon.BP_Weapon_C
// 0x1250 (0x14E0 - 0x0290)
class ABP_Weapon_C final : public ATDB_Weapon
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Widget;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimPunchTimeline_Rot_5AF9CA0D44568BE2DE45628916F9FD64; // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimPunchTimeline_Pos_5AF9CA0D44568BE2DE45628916F9FD64; // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AimPunchTimeline__Direction_5AF9CA0D44568BE2DE45628916F9FD64; // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AimPunchTimeline;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         InterpRecoil_Alpha_56BC14C34E36A4D447B709A867546A72; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InterpRecoil__Direction_56BC14C34E36A4D447B709A867546A72; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InterpRecoil;                                      // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CameraRecoilTimeline_Alpha_3DF744D74FBCD9EC81675DA222D483C0; // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraRecoilTimeline__Direction_3DF744D74FBCD9EC81675DA222D483C0; // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraRecoilTimeline;                              // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilLerpTimeline_Alpha_8CBEC02B444083C91ED08D905006B22E; // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RecoilLerpTimeline__Direction_8CBEC02B444083C91ED08D905006B22E; // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RecoilLerpTimeline;                                // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         MeleeSkipAnimTime_NewTrack_1_4774D7774FA4D79189F088BF86459ACC; // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MeleeSkipAnimTime__Direction_4774D7774FA4D79189F088BF86459ACC; // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MeleeSkipAnimTime;                                 // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilStableRoutine_Float_95F70A6F4A7EB69C2DF02F864400EDA6; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RecoilStableRoutine__Direction_95F70A6F4A7EB69C2DF02F864400EDA6; // 0x0334(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RecoilStableRoutine;                               // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RecoilHorizontal;                                  // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RecoilVertical;                                    // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      CharRef;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FBPS_WeaponData                        WeaponData;                                        // 0x0368(0x04C0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   WeaponName;                                        // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_FireMode                                 FireMode;                                          // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FireRatio;                                         // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BulletMinDamage;                                   // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BulletMaxDamage;                                   // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadAddAfterShot;                                // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadMax;                                         // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadChangeTime;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadDefault;                                     // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadMovingPenalty;                               // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadInit;                                        // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilAddTime;                                     // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilStabilizeTime;                               // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSingleMode;                                     // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasAutoMode;                                       // 0x0891(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBurstMode;                                      // 0x0892(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_893[0x1];                                      // 0x0893(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletsInShot;                                     // 0x0894(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAmmo;                                           // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RoundsInBurst;                                     // 0x089C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerPulled;                                     // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InOnFireDelay;                                     // 0x08A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A2[0x6];                                      // 0x08A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentSpread;                                     // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpreadDecreaseTimer;                               // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilAddTimer;                                    // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilStableTimer;                                 // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpreadDecreaseHandle;                              // 0x08C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AddedRecoil;                                       // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RoutineRecoil;                                     // 0x08E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RecoilChangeValue;                                 // 0x08E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponAimReloadMontage;                            // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            WeaponShotMontage;                                 // 0x0900(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponReloadMontage;                               // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAmmo;                                       // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloading;                                       // 0x093C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93D[0x3];                                      // 0x093D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ExpectedHitPoint;                                  // 0x0940(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasWeapon;                                         // 0x0959(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aiming;                                            // 0x095A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95B[0x5];                                      // 0x095B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelaxEffector;                                     // 0x0960(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             AimEffector;                                       // 0x09C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilPower;                                       // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RecoilCurve;                                       // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CrouchAimEffector;                                 // 0x0A30(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotationEffector;                           // 0x0A90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CurrentLocationEffector;                           // 0x0AA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ReloadRotateEffector;                              // 0x0AC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBPE_AmmoType                                 AmmoType;                                          // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD9[0x7];                                      // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            InvItem;                                           // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          HasHit;                                            // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE9[0x7];                                      // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimMontage>            MeleeWeaponMontage;                                // 0x0AF0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           MeleeSweepingTimer;                                // 0x0B20(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleeTargetFinded;                                 // 0x0B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             MeleeTargetHitInfo;                                // 0x0B30(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CurrentMaxAmmo;                                    // 0x0C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1C[0x4];                                      // 0x0C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RecoilStabilizing;                                 // 0x0C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousRecoilRoutineAlpha;                        // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDurability;                                 // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDurability;                                     // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleeAnim;                                         // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C49[0x7];                                      // 0x0C49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MeleeClosestTarget;                                // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShotgunReload;                                     // 0x0C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C59[0x3];                                      // 0x0C59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeleeAnimIndex;                                    // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    Guntail;                                           // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    ImpactSound;                                       // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletPenetrateLimit;                              // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0C74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C75[0x3];                                      // 0x0C75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DecalSize;                                         // 0x0C78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleSize;                                      // 0x0C90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _;                                                 // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA9[0x7];                                      // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponPlaceholder_C*                   SkMesh;                                            // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstPersonMode;                                   // 0x0CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB9[0x7];                                      // 0x0CB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DurabilityDecreaseMultiplier;                      // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBPE_Weapon_Type, double>                ReloadPlayRate;                                    // 0x0CC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AEMptyStatic_C*                         ShotgunShell;                                      // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWeaponAnimAsset*                       PlayerAnimAsset;                                   // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonSpreadMultiplier;                       // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasInFPSMode;                                      // 0x0D30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D31[0x7];                                      // 0x0D31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ShotgunDistance;                                   // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, EBPE_AmmoType>              AmmoTypeExceptions;                                // 0x0D40(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShootAimIsPlaying;                                 // 0x0D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D91[0x7];                                      // 0x0D91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UPaperSprite>            UIIcon;                                            // 0x0D98(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        CurShotgunPhReloadDuration;                        // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             Item_Info;                                         // 0x0DD0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Bolt_Action;                                       // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimAnimFinished;                                   // 0x0FF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF2[0x6];                                      // 0x0FF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    AutoFireEvent;                                     // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             AutoSound;                                         // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstShot;                                         // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1009[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             SingleShotSound;                                   // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Grenade;                                           // 0x1018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1019[0x7];                                     // 0x1019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    SingleFireEvent;                                   // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ShotgunPhasedReloadBegan;                          // 0x1028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShotgunForciblyEndReload;                          // 0x1029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102A[0x6];                                     // 0x102A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             ModifiedSingleShotSound;                           // 0x1030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ModifiedAutoSound;                                 // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SoundSupressed;                                    // 0x1040(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1041[0x7];                                     // 0x1041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AttachmentRecoilMultiplier;                        // 0x1048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilSumUp;                                       // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilSumRight;                                    // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          FPMesh_Anim;                                       // 0x1068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        RecoilMultiplier;                                  // 0x1070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastYAddedRecoil;                                  // 0x1078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastXAddedRecoil;                                  // 0x1080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EPhysicalSurface, double>                ImpactsParameter;                                  // 0x1088(0x0050)(Edit, BlueprintVisible)
	int32                                         LowAmmoCount;                                      // 0x10D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10DC[0x4];                                     // 0x10DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       SmoothShake;                                       // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraShakeBase*                       ShootShake;                                        // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ReloadCheckTimerHandle;                            // 0x10F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FireRatioTimerHandle;                              // 0x10F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Value;                                             // 0x1100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1104[0x4];                                     // 0x1104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, int32>                    DamageShotgunFilterActors;                         // 0x1108(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        Recoil_Vertical_Max_Time;                          // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Recoil_Vertical_Current_Time;                      // 0x1160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RecoilVerticalSavedRotation;                       // 0x1168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HipFireMode;                                       // 0x1180(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1181[0xF];                                     // 0x1181(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SavedFP;                                           // 0x1190(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimPunchRandomRotX;                                // 0x11F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimPunchRandomRotY;                                // 0x11F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimPunchRandomRotZ;                                // 0x11F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F3[0x5];                                     // 0x11F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           AimPunchPosCurve;                                  // 0x11F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           AimPunchRotCurve;                                  // 0x1200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RegisteredHit;                                     // 0x1208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_120C[0x4];                                     // 0x120C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HitPercentage;                                     // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BurstShotNumber;                                   // 0x1218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExtendedAmmo;                                      // 0x121C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsFastReload;                                     // 0x1220(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1221[0x7];                                     // 0x1221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReloadEventTimer;                                  // 0x1228(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   MagIDName;                                         // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             FDropItemInfo;                                     // 0x1238(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	EBPE_AmmoClass                                AmmoClass;                                         // 0x1458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1459[0x7];                                     // 0x1459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Scope_Offset;                                      // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReloadCountInt;                                    // 0x1468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_146C[0x4];                                     // 0x146C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NegativeRecoilMultiplier;                          // 0x1470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasFastReload;                                    // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1479[0x7];                                     // 0x1479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HipFireCameraTimer;                                // 0x1480(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Engaged;                                           // 0x1488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1489[0x7];                                     // 0x1489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           InFightCooldown;                                   // 0x1490(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPlayEndRoundsSound;                             // 0x1498(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1499[0x7];                                     // 0x1499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Render_Weapon_Icon;                                // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HipFireTimer;                                      // 0x14A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ReloadDelay;                                       // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MuzzleMultiplier;                                  // 0x14B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TacticalGripMultiplier;                            // 0x14C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PistolGripMultiplier;                              // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ButtMultiplier;                                    // 0x14D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TacticalGrip2Multiplier;                           // 0x14D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddAmmoToInventory(bool bIsForCurrentWeapon, int32 NewAmmoCount, class FName AmmoNameForOtherWeapon, int32 AmmoCountForOtherWeapon);
	void AimEvent(bool Aim);
	void AimPunch();
	void AimPunchTimeline__FinishedFunc();
	void AimPunchTimeline__UpdateFunc();
	void AutoFireSound(bool Start);
	void BoltActionResume();
	void BoltActionStop();
	void BrokenSound();
	void BrokenSoundMulticast();
	void BrokenSoundServer();
	void BulletTrace(TArray<struct FBPS_DamageInfo>* OutHit, bool* GetHit);
	void BurstShot();
	void CalculateDamage(class APawn* Pawn, const struct FHitResult& Hit, double* ResultDamage);
	void CalculateSubtrahendForPhased(double* Subtrahend);
	void CallAmmoUpdate();
	void CallRecoilPowerChange(double Param_RecoilPower);
	void CameraRecoilTimeline__FinishedFunc();
	void CameraRecoilTimeline__UpdateFunc();
	void CanShoot(bool* bIsCan);
	void ChangeAmmoClass();
	void ChangeFireMode();
	void CheckAvailabilityAmmoType(bool bIsPlayerChangeAmmoType, bool* bIsChangedAmmoType, EBPE_AmmoClass* SettedAmmoClass, EBPE_AmmoType* SettedAmmoType);
	void CHeckDamageDuplicate(class UObject* A, TArray<struct FBPS_DamageInfo>& Array, bool* CanAdd);
	void CheckForDrySound();
	void CheckWeapEffector(bool HipFire);
	void DecreaseDurability();
	void DelayDecalSpawn(const struct FVector& Location, const struct FVector& Forward, class UMaterialInterface* DecalMaterial, const TArray<class AActor*>& ActorsToIgnore);
	void DisableHipFire();
	void DropItemServer(struct FFItemInfo& F_DroppedItemInfo);
	void EnableCollision(bool Activation);
	void EndReload();
	void EngagedInFight();
	void ExecuteUbergraph_BP_Weapon(int32 EntryPoint);
	void FakeFire(const TArray<struct FBPS_DamageInfo>& HitInfo, bool Param_Fire);
	void FastReload();
	void FightEnded();
	void FindBestTarget(TArray<struct FHitResult>& Results, struct FHitResult* Target, bool* Finded);
	void FindTargetForMelee(class AActor** Target, bool* Finded);
	void Fire(bool _PulledTrigger);
	void FireRatioTimer();
	void ForceReloadStop();
	void GetDecalMaterial(EPhysicalSurface SurfaceType, class UMaterialInstanceDynamic** DynMat, struct FVector* Size);
	void GetMeleeWeaponMontage(class UAnimMontage** Output);
	void GetPhasedReloadBegin2(class UAnimMontage** NewParam);
	void GetPhasedReloadEnd2(class UAnimMontage** NewParam);
	void GetPhasedReloadLoop2(class UAnimMontage** NewParam);
	void GetProjectileNiagara(class UNiagaraSystem** Output);
	void GetReloadCharAnim2(class UAnimMontage** NewParam);
	void GetReloadPlayRate(double* PlayRate);
	void GetWeaponShotMontage(class UAnimMontage** NewParam);
	void HeadshotXP(class AActor* HitActor, class FName BoneName);
	void HipFireCamera(bool On_);
	void HipFireCameraDisable();
	void HipFireServer(bool Param_HipFireMode);
	void HitHandling(const struct FHitResult& Hit, struct FVector* ImpactPoint, struct FVector* ImpactNormal, EPhysicalSurface* SurfaceType);
	void HitSimplify(const struct FHitResult& Hit, struct FS_SimplifiedHitInfo* S_SimplifiedHitInfo);
	void HitTraceFromCenter(struct FHitResult* BlockingHit, bool* WasHit, struct FVector* LocationWithoutHit);
	void InitDurability();
	void InitValues();
	void InterpRecoil__FinishedFunc();
	void InterpRecoil__UpdateFunc();
	void Kostyl();
	void LoadAnimMontage(TSoftObjectPtr<class UAnimMontage> Soft, class UAnimMontage** AnimMontage);
	void MakeProjectileShot(const struct FHitResult& BlockingHit, bool WasHit);
	void MeleeAttack();
	void MeleeSkipAnimTime__FinishedFunc();
	void MeleeSkipAnimTime__UpdateFunc();
	struct FRotator MeleeTargetRotation();
	void MeleeTrace();
	void MultiShotgunReloadAnim(bool BulletIn);
	void OnBlendOut_0FB3F6564A0CD0C952EFF8BFC06DC154(class FName NotifyName);
	void OnBlendOut_642915F049FF687BCEAB758975C4E4D2(class FName NotifyName);
	void OnBlendOut_A24E11344E6A4662725E59913D420242(class FName NotifyName);
	void OnCompleted_0FB3F6564A0CD0C952EFF8BFC06DC154(class FName NotifyName);
	void OnCompleted_642915F049FF687BCEAB758975C4E4D2(class FName NotifyName);
	void OnCompleted_A24E11344E6A4662725E59913D420242(class FName NotifyName);
	void OnInterrupted_0FB3F6564A0CD0C952EFF8BFC06DC154(class FName NotifyName);
	void OnInterrupted_642915F049FF687BCEAB758975C4E4D2(class FName NotifyName);
	void OnInterrupted_A24E11344E6A4662725E59913D420242(class FName NotifyName);
	void OnLoaded_A077CC734AC02F2F596C3D9FB33E2BBF(class UObject* Loaded);
	void OnNotifyBegin_0FB3F6564A0CD0C952EFF8BFC06DC154(class FName NotifyName);
	void OnNotifyBegin_642915F049FF687BCEAB758975C4E4D2(class FName NotifyName);
	void OnNotifyBegin_A24E11344E6A4662725E59913D420242(class FName NotifyName);
	void OnNotifyEnd_0FB3F6564A0CD0C952EFF8BFC06DC154(class FName NotifyName);
	void OnNotifyEnd_642915F049FF687BCEAB758975C4E4D2(class FName NotifyName);
	void OnNotifyEnd_A24E11344E6A4662725E59913D420242(class FName NotifyName);
	void OnRep_bIsPlayEndRoundsSound();
	void OnWeaponInited();
	void PlayAimFire();
	void PlayEndRoundsEffectMulticast();
	void PlayHipFire();
	void PlayHitParticle(EPhysicalSurface Enumerator, const struct FVector& InputPin, const struct FVector& Forward, class USceneComponent* Component_To_Attach, class FName bone, class AActor* HitActor, const struct FVector& Hit_Normal, bool NoSound);
	void PlayMeleeMontage();
	void PlayShootShake(const struct FBPS_WeaponData& BPS_WeaponData);
	void PlaySmoothShootShake(bool Start);
	void PreciseHitPoint(struct FVector* HitPoint);
	void PredictHitTrace(struct FHitResult* BlockingHit, bool* WasHit);
	bool ProjectileTrace(const struct FHitResult& BlockingHit, bool WasHit, const struct FVector& LocationWithoutHit, struct FHitResult* OutHit, bool* ShowDecal);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	double Recoil_Compensation_for_Train();
	void RecoilAdd();
	void RecoilCamera(bool Forward);
	void RecoilFirstPerson(double Pitch, double Yaw);
	void RecoilLerpTimeline__FinishedFunc();
	void RecoilLerpTimeline__UpdateFunc();
	void RecoilStabilize();
	void RecoilStableRoutine__FinishedFunc();
	void RecoilStableRoutine__UpdateFunc();
	void ReInitVars(const struct FFItemInfo& ItemInfo);
	void Reload(bool bIsFastReloadMulti);
	void ReloadCheckTimer();
	void ReloadCount();
	void ReloadEvent();
	void ResetMeleeGate();
	void SelectAmmoTypes(EBPE_AmmoType Param_AmmoType, EBPE_AmmoType* AmmoType_Default, EBPE_AmmoType* AmmoType_Piercing);
	void SelectWeaponPlaceholder();
	void SetAmmoType(EBPE_AmmoClass Param_AmmoClass, EBPE_AmmoType Param_AmmoType);
	void SetAttachmentsMultiplier(E_TypesOfModes Type, double AttachmentMultiplier, double Attachment2Multiplier, bool WipeAllMultipliers);
	void SetIsPlayEndRoundsSound(const bool bIsPlaySound);
	void SetSkMesh();
	void SetSupressedSound(bool Supressed);
	void SetWeaponIcon();
	void ShootDirection(struct FVector* BeginPoint, struct FVector* EndPoint, struct FVector* CamForwardVector);
	void Shotgun_Cycle(bool ForciblyEnd);
	void ShotgunBulletIn();
	void SimpleToCommon(const struct FS_SimplifiedHitInfo& Hit, struct FHitResult* S_SimplifiedHitInfo);
	void SimulateLocalMontage(class UObject* Attacked, class FName BoneName, double Damage, const struct FVector& HitLocation);
	void SingleShot();
	void Spawnd_Decal(class UMaterialInterface* DecalMaterial, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation);
	void SpawnDecal(const struct FHitResult& BlockingHit, bool WasHit);
	void SpawnProjectile_Client(const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, const struct FVector& Spawn_Transform_Scale, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Param_Owner, const struct FBPS_WeaponData& Param_WeaponData, bool ShowTrace, class UNiagaraSystem* NiagaraSystem, class APawn* Param_Instigator);
	void SpreadDecreasing();
	void StopShakes();
	void TriggerHipFireAnim(bool Param_HipFireMode);
	void WeaponShot(double StartingPosition);
	void WP_Aiming(bool Aim);
	void WP_Anim_Weapon_Equiped(class ABP_Weapon_C* NewParam);
	void WP_EquipWeapon(class FName Param_WeaponName);
	void WP_GetAimCamera(class UCameraComponent** Camera);
	void WP_GetLefHandEffectorTransform(struct FTransform* Transform, bool* HasEffector);
	void WP_GetRotationInput(struct FVector2D* NewParam);
	void WP_GetShootDirection(struct FVector* ShootDirection);
	void WP_GetSkeletalMesh(class USkeletalMeshComponent** SkinnedMesh, bool* Success);
	void WP_GetWeaponType(EBPE_Weapon_Type* Param_WeaponType);
	void WP_HasWeaponOrBroken(bool* Param_Value);
	void WP_MeleeActivation(bool State);
	void WP_PlayGunTail(class UFMODEvent* TailSound);
	void WP_SetRecoilPower(double Param_RecoilPower);
	void WP_UnequipWeapon();
	void ZeroingBurstShots();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Weapon_C">();
	}
	static class ABP_Weapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Weapon_C>();
	}
};
static_assert(alignof(ABP_Weapon_C) == 0x000010, "Wrong alignment on ABP_Weapon_C");
static_assert(sizeof(ABP_Weapon_C) == 0x0014E0, "Wrong size on ABP_Weapon_C");
static_assert(offsetof(ABP_Weapon_C, UberGraphFrame) == 0x000290, "Member 'ABP_Weapon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Widget) == 0x000298, "Member 'ABP_Weapon_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SkeletalMesh) == 0x0002A0, "Member 'ABP_Weapon_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Box) == 0x0002A8, "Member 'ABP_Weapon_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchTimeline_Rot_5AF9CA0D44568BE2DE45628916F9FD64) == 0x0002B0, "Member 'ABP_Weapon_C::AimPunchTimeline_Rot_5AF9CA0D44568BE2DE45628916F9FD64' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchTimeline_Pos_5AF9CA0D44568BE2DE45628916F9FD64) == 0x0002C8, "Member 'ABP_Weapon_C::AimPunchTimeline_Pos_5AF9CA0D44568BE2DE45628916F9FD64' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchTimeline__Direction_5AF9CA0D44568BE2DE45628916F9FD64) == 0x0002E0, "Member 'ABP_Weapon_C::AimPunchTimeline__Direction_5AF9CA0D44568BE2DE45628916F9FD64' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchTimeline) == 0x0002E8, "Member 'ABP_Weapon_C::AimPunchTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, InterpRecoil_Alpha_56BC14C34E36A4D447B709A867546A72) == 0x0002F0, "Member 'ABP_Weapon_C::InterpRecoil_Alpha_56BC14C34E36A4D447B709A867546A72' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, InterpRecoil__Direction_56BC14C34E36A4D447B709A867546A72) == 0x0002F4, "Member 'ABP_Weapon_C::InterpRecoil__Direction_56BC14C34E36A4D447B709A867546A72' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, InterpRecoil) == 0x0002F8, "Member 'ABP_Weapon_C::InterpRecoil' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CameraRecoilTimeline_Alpha_3DF744D74FBCD9EC81675DA222D483C0) == 0x000300, "Member 'ABP_Weapon_C::CameraRecoilTimeline_Alpha_3DF744D74FBCD9EC81675DA222D483C0' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CameraRecoilTimeline__Direction_3DF744D74FBCD9EC81675DA222D483C0) == 0x000304, "Member 'ABP_Weapon_C::CameraRecoilTimeline__Direction_3DF744D74FBCD9EC81675DA222D483C0' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CameraRecoilTimeline) == 0x000308, "Member 'ABP_Weapon_C::CameraRecoilTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilLerpTimeline_Alpha_8CBEC02B444083C91ED08D905006B22E) == 0x000310, "Member 'ABP_Weapon_C::RecoilLerpTimeline_Alpha_8CBEC02B444083C91ED08D905006B22E' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilLerpTimeline__Direction_8CBEC02B444083C91ED08D905006B22E) == 0x000314, "Member 'ABP_Weapon_C::RecoilLerpTimeline__Direction_8CBEC02B444083C91ED08D905006B22E' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilLerpTimeline) == 0x000318, "Member 'ABP_Weapon_C::RecoilLerpTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeSkipAnimTime_NewTrack_1_4774D7774FA4D79189F088BF86459ACC) == 0x000320, "Member 'ABP_Weapon_C::MeleeSkipAnimTime_NewTrack_1_4774D7774FA4D79189F088BF86459ACC' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeSkipAnimTime__Direction_4774D7774FA4D79189F088BF86459ACC) == 0x000324, "Member 'ABP_Weapon_C::MeleeSkipAnimTime__Direction_4774D7774FA4D79189F088BF86459ACC' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeSkipAnimTime) == 0x000328, "Member 'ABP_Weapon_C::MeleeSkipAnimTime' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilStableRoutine_Float_95F70A6F4A7EB69C2DF02F864400EDA6) == 0x000330, "Member 'ABP_Weapon_C::RecoilStableRoutine_Float_95F70A6F4A7EB69C2DF02F864400EDA6' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilStableRoutine__Direction_95F70A6F4A7EB69C2DF02F864400EDA6) == 0x000334, "Member 'ABP_Weapon_C::RecoilStableRoutine__Direction_95F70A6F4A7EB69C2DF02F864400EDA6' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilStableRoutine) == 0x000338, "Member 'ABP_Weapon_C::RecoilStableRoutine' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilHorizontal) == 0x000340, "Member 'ABP_Weapon_C::RecoilHorizontal' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilVertical) == 0x000350, "Member 'ABP_Weapon_C::RecoilVertical' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CharRef) == 0x000360, "Member 'ABP_Weapon_C::CharRef' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WeaponData) == 0x000368, "Member 'ABP_Weapon_C::WeaponData' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WeaponName) == 0x000828, "Member 'ABP_Weapon_C::WeaponName' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FireMode) == 0x000830, "Member 'ABP_Weapon_C::FireMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FireRatio) == 0x000838, "Member 'ABP_Weapon_C::FireRatio' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, BulletMinDamage) == 0x000840, "Member 'ABP_Weapon_C::BulletMinDamage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, BulletMaxDamage) == 0x000848, "Member 'ABP_Weapon_C::BulletMaxDamage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadAddAfterShot) == 0x000850, "Member 'ABP_Weapon_C::SpreadAddAfterShot' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadMax) == 0x000858, "Member 'ABP_Weapon_C::SpreadMax' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadChangeTime) == 0x000860, "Member 'ABP_Weapon_C::SpreadChangeTime' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadDefault) == 0x000868, "Member 'ABP_Weapon_C::SpreadDefault' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadMovingPenalty) == 0x000870, "Member 'ABP_Weapon_C::SpreadMovingPenalty' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadInit) == 0x000878, "Member 'ABP_Weapon_C::SpreadInit' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilAddTime) == 0x000880, "Member 'ABP_Weapon_C::RecoilAddTime' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilStabilizeTime) == 0x000888, "Member 'ABP_Weapon_C::RecoilStabilizeTime' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HasSingleMode) == 0x000890, "Member 'ABP_Weapon_C::HasSingleMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HasAutoMode) == 0x000891, "Member 'ABP_Weapon_C::HasAutoMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HasBurstMode) == 0x000892, "Member 'ABP_Weapon_C::HasBurstMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, BulletsInShot) == 0x000894, "Member 'ABP_Weapon_C::BulletsInShot' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MaxAmmo) == 0x000898, "Member 'ABP_Weapon_C::MaxAmmo' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RoundsInBurst) == 0x00089C, "Member 'ABP_Weapon_C::RoundsInBurst' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, TriggerPulled) == 0x0008A0, "Member 'ABP_Weapon_C::TriggerPulled' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, InOnFireDelay) == 0x0008A1, "Member 'ABP_Weapon_C::InOnFireDelay' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurrentSpread) == 0x0008A8, "Member 'ABP_Weapon_C::CurrentSpread' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadDecreaseTimer) == 0x0008B0, "Member 'ABP_Weapon_C::SpreadDecreaseTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilAddTimer) == 0x0008B8, "Member 'ABP_Weapon_C::RecoilAddTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilStableTimer) == 0x0008C0, "Member 'ABP_Weapon_C::RecoilStableTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SpreadDecreaseHandle) == 0x0008C8, "Member 'ABP_Weapon_C::SpreadDecreaseHandle' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AddedRecoil) == 0x0008D0, "Member 'ABP_Weapon_C::AddedRecoil' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RoutineRecoil) == 0x0008E0, "Member 'ABP_Weapon_C::RoutineRecoil' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilChangeValue) == 0x0008E8, "Member 'ABP_Weapon_C::RecoilChangeValue' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WeaponAimReloadMontage) == 0x0008F8, "Member 'ABP_Weapon_C::WeaponAimReloadMontage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WeaponShotMontage) == 0x000900, "Member 'ABP_Weapon_C::WeaponShotMontage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WeaponReloadMontage) == 0x000930, "Member 'ABP_Weapon_C::WeaponReloadMontage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurrentAmmo) == 0x000938, "Member 'ABP_Weapon_C::CurrentAmmo' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, IsReloading) == 0x00093C, "Member 'ABP_Weapon_C::IsReloading' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ExpectedHitPoint) == 0x000940, "Member 'ABP_Weapon_C::ExpectedHitPoint' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WeaponType) == 0x000958, "Member 'ABP_Weapon_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HasWeapon) == 0x000959, "Member 'ABP_Weapon_C::HasWeapon' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Aiming) == 0x00095A, "Member 'ABP_Weapon_C::Aiming' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RelaxEffector) == 0x000960, "Member 'ABP_Weapon_C::RelaxEffector' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimEffector) == 0x0009C0, "Member 'ABP_Weapon_C::AimEffector' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilPower) == 0x000A20, "Member 'ABP_Weapon_C::RecoilPower' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilCurve) == 0x000A28, "Member 'ABP_Weapon_C::RecoilCurve' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CrouchAimEffector) == 0x000A30, "Member 'ABP_Weapon_C::CrouchAimEffector' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurrentRotationEffector) == 0x000A90, "Member 'ABP_Weapon_C::CurrentRotationEffector' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurrentLocationEffector) == 0x000AA8, "Member 'ABP_Weapon_C::CurrentLocationEffector' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ReloadRotateEffector) == 0x000AC0, "Member 'ABP_Weapon_C::ReloadRotateEffector' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AmmoType) == 0x000AD8, "Member 'ABP_Weapon_C::AmmoType' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, InvItem) == 0x000AE0, "Member 'ABP_Weapon_C::InvItem' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HasHit) == 0x000AE8, "Member 'ABP_Weapon_C::HasHit' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeWeaponMontage) == 0x000AF0, "Member 'ABP_Weapon_C::MeleeWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeSweepingTimer) == 0x000B20, "Member 'ABP_Weapon_C::MeleeSweepingTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeTargetFinded) == 0x000B28, "Member 'ABP_Weapon_C::MeleeTargetFinded' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeTargetHitInfo) == 0x000B30, "Member 'ABP_Weapon_C::MeleeTargetHitInfo' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurrentMaxAmmo) == 0x000C18, "Member 'ABP_Weapon_C::CurrentMaxAmmo' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilStabilizing) == 0x000C20, "Member 'ABP_Weapon_C::RecoilStabilizing' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, PreviousRecoilRoutineAlpha) == 0x000C30, "Member 'ABP_Weapon_C::PreviousRecoilRoutineAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurrentDurability) == 0x000C38, "Member 'ABP_Weapon_C::CurrentDurability' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MaxDurability) == 0x000C40, "Member 'ABP_Weapon_C::MaxDurability' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeAnim) == 0x000C48, "Member 'ABP_Weapon_C::MeleeAnim' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeClosestTarget) == 0x000C50, "Member 'ABP_Weapon_C::MeleeClosestTarget' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShotgunReload) == 0x000C58, "Member 'ABP_Weapon_C::ShotgunReload' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MeleeAnimIndex) == 0x000C5C, "Member 'ABP_Weapon_C::MeleeAnimIndex' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Guntail) == 0x000C60, "Member 'ABP_Weapon_C::Guntail' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ImpactSound) == 0x000C68, "Member 'ABP_Weapon_C::ImpactSound' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, BulletPenetrateLimit) == 0x000C70, "Member 'ABP_Weapon_C::BulletPenetrateLimit' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, NewVar_0) == 0x000C74, "Member 'ABP_Weapon_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, DecalSize) == 0x000C78, "Member 'ABP_Weapon_C::DecalSize' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ParticleSize) == 0x000C90, "Member 'ABP_Weapon_C::ParticleSize' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, _) == 0x000CA8, "Member 'ABP_Weapon_C::_' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SkMesh) == 0x000CB0, "Member 'ABP_Weapon_C::SkMesh' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FirstPersonMode) == 0x000CB8, "Member 'ABP_Weapon_C::FirstPersonMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, DurabilityDecreaseMultiplier) == 0x000CC0, "Member 'ABP_Weapon_C::DurabilityDecreaseMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ReloadPlayRate) == 0x000CC8, "Member 'ABP_Weapon_C::ReloadPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShotgunShell) == 0x000D18, "Member 'ABP_Weapon_C::ShotgunShell' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, PlayerAnimAsset) == 0x000D20, "Member 'ABP_Weapon_C::PlayerAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ThirdPersonSpreadMultiplier) == 0x000D28, "Member 'ABP_Weapon_C::ThirdPersonSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, WasInFPSMode) == 0x000D30, "Member 'ABP_Weapon_C::WasInFPSMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShotgunDistance) == 0x000D38, "Member 'ABP_Weapon_C::ShotgunDistance' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AmmoTypeExceptions) == 0x000D40, "Member 'ABP_Weapon_C::AmmoTypeExceptions' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShootAimIsPlaying) == 0x000D90, "Member 'ABP_Weapon_C::ShootAimIsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, UIIcon) == 0x000D98, "Member 'ABP_Weapon_C::UIIcon' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, CurShotgunPhReloadDuration) == 0x000DC8, "Member 'ABP_Weapon_C::CurShotgunPhReloadDuration' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Item_Info) == 0x000DD0, "Member 'ABP_Weapon_C::Item_Info' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Bolt_Action) == 0x000FF0, "Member 'ABP_Weapon_C::Bolt_Action' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimAnimFinished) == 0x000FF1, "Member 'ABP_Weapon_C::AimAnimFinished' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AutoFireEvent) == 0x000FF8, "Member 'ABP_Weapon_C::AutoFireEvent' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AutoSound) == 0x001000, "Member 'ABP_Weapon_C::AutoSound' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FirstShot) == 0x001008, "Member 'ABP_Weapon_C::FirstShot' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SingleShotSound) == 0x001010, "Member 'ABP_Weapon_C::SingleShotSound' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Grenade) == 0x001018, "Member 'ABP_Weapon_C::Grenade' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SingleFireEvent) == 0x001020, "Member 'ABP_Weapon_C::SingleFireEvent' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShotgunPhasedReloadBegan) == 0x001028, "Member 'ABP_Weapon_C::ShotgunPhasedReloadBegan' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShotgunForciblyEndReload) == 0x001029, "Member 'ABP_Weapon_C::ShotgunForciblyEndReload' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ModifiedSingleShotSound) == 0x001030, "Member 'ABP_Weapon_C::ModifiedSingleShotSound' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ModifiedAutoSound) == 0x001038, "Member 'ABP_Weapon_C::ModifiedAutoSound' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SoundSupressed) == 0x001040, "Member 'ABP_Weapon_C::SoundSupressed' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AttachmentRecoilMultiplier) == 0x001048, "Member 'ABP_Weapon_C::AttachmentRecoilMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilSumUp) == 0x001058, "Member 'ABP_Weapon_C::RecoilSumUp' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilSumRight) == 0x001060, "Member 'ABP_Weapon_C::RecoilSumRight' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FPMesh_Anim) == 0x001068, "Member 'ABP_Weapon_C::FPMesh_Anim' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilMultiplier) == 0x001070, "Member 'ABP_Weapon_C::RecoilMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, LastYAddedRecoil) == 0x001078, "Member 'ABP_Weapon_C::LastYAddedRecoil' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, LastXAddedRecoil) == 0x001080, "Member 'ABP_Weapon_C::LastXAddedRecoil' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ImpactsParameter) == 0x001088, "Member 'ABP_Weapon_C::ImpactsParameter' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, LowAmmoCount) == 0x0010D8, "Member 'ABP_Weapon_C::LowAmmoCount' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SmoothShake) == 0x0010E0, "Member 'ABP_Weapon_C::SmoothShake' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ShootShake) == 0x0010E8, "Member 'ABP_Weapon_C::ShootShake' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ReloadCheckTimerHandle) == 0x0010F0, "Member 'ABP_Weapon_C::ReloadCheckTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FireRatioTimerHandle) == 0x0010F8, "Member 'ABP_Weapon_C::FireRatioTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Value) == 0x001100, "Member 'ABP_Weapon_C::Value' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, DamageShotgunFilterActors) == 0x001108, "Member 'ABP_Weapon_C::DamageShotgunFilterActors' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Recoil_Vertical_Max_Time) == 0x001158, "Member 'ABP_Weapon_C::Recoil_Vertical_Max_Time' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Recoil_Vertical_Current_Time) == 0x001160, "Member 'ABP_Weapon_C::Recoil_Vertical_Current_Time' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RecoilVerticalSavedRotation) == 0x001168, "Member 'ABP_Weapon_C::RecoilVerticalSavedRotation' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HipFireMode) == 0x001180, "Member 'ABP_Weapon_C::HipFireMode' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, SavedFP) == 0x001190, "Member 'ABP_Weapon_C::SavedFP' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchRandomRotX) == 0x0011F0, "Member 'ABP_Weapon_C::AimPunchRandomRotX' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchRandomRotY) == 0x0011F1, "Member 'ABP_Weapon_C::AimPunchRandomRotY' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchRandomRotZ) == 0x0011F2, "Member 'ABP_Weapon_C::AimPunchRandomRotZ' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchPosCurve) == 0x0011F8, "Member 'ABP_Weapon_C::AimPunchPosCurve' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AimPunchRotCurve) == 0x001200, "Member 'ABP_Weapon_C::AimPunchRotCurve' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, RegisteredHit) == 0x001208, "Member 'ABP_Weapon_C::RegisteredHit' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HitPercentage) == 0x001210, "Member 'ABP_Weapon_C::HitPercentage' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, BurstShotNumber) == 0x001218, "Member 'ABP_Weapon_C::BurstShotNumber' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ExtendedAmmo) == 0x00121C, "Member 'ABP_Weapon_C::ExtendedAmmo' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, bIsFastReload) == 0x001220, "Member 'ABP_Weapon_C::bIsFastReload' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ReloadEventTimer) == 0x001228, "Member 'ABP_Weapon_C::ReloadEventTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MagIDName) == 0x001230, "Member 'ABP_Weapon_C::MagIDName' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, FDropItemInfo) == 0x001238, "Member 'ABP_Weapon_C::FDropItemInfo' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, AmmoClass) == 0x001458, "Member 'ABP_Weapon_C::AmmoClass' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Scope_Offset) == 0x001460, "Member 'ABP_Weapon_C::Scope_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ReloadCountInt) == 0x001468, "Member 'ABP_Weapon_C::ReloadCountInt' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, NegativeRecoilMultiplier) == 0x001470, "Member 'ABP_Weapon_C::NegativeRecoilMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, bHasFastReload) == 0x001478, "Member 'ABP_Weapon_C::bHasFastReload' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HipFireCameraTimer) == 0x001480, "Member 'ABP_Weapon_C::HipFireCameraTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Engaged) == 0x001488, "Member 'ABP_Weapon_C::Engaged' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, InFightCooldown) == 0x001490, "Member 'ABP_Weapon_C::InFightCooldown' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, bIsPlayEndRoundsSound) == 0x001498, "Member 'ABP_Weapon_C::bIsPlayEndRoundsSound' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, Render_Weapon_Icon) == 0x0014A0, "Member 'ABP_Weapon_C::Render_Weapon_Icon' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, HipFireTimer) == 0x0014A8, "Member 'ABP_Weapon_C::HipFireTimer' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ReloadDelay) == 0x0014B0, "Member 'ABP_Weapon_C::ReloadDelay' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, MuzzleMultiplier) == 0x0014B8, "Member 'ABP_Weapon_C::MuzzleMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, TacticalGripMultiplier) == 0x0014C0, "Member 'ABP_Weapon_C::TacticalGripMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, PistolGripMultiplier) == 0x0014C8, "Member 'ABP_Weapon_C::PistolGripMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, ButtMultiplier) == 0x0014D0, "Member 'ABP_Weapon_C::ButtMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Weapon_C, TacticalGrip2Multiplier) == 0x0014D8, "Member 'ABP_Weapon_C::TacticalGrip2Multiplier' has a wrong offset!");

}

