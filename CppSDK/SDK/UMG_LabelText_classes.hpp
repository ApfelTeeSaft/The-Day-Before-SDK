#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_LabelText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UMG_LabelText.UMG_LabelText_C
// 0x0060 (0x02E0 - 0x0280)
class UUMG_LabelText_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Close;                                             // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Expand;                                            // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_30;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Icon;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Label;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   LableText;                                         // 0x02B8(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          IsNeededNormalWidth;                               // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x3];                                      // 0x02D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Set_Padding_Right;                                 // 0x02D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowIcon;                                          // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UMG_LabelText(int32 EntryPoint);
	void PlayShowAnimation(EUMGSequencePlayMode PlayMode);
	void PreConstruct(bool IsDesignTime);
	void SequenceEvent__ENTRYPOINTUMG_LabelText(class USizeBox* Param_SizeBox);
	void SetText(const class FText& Param_LableText);
	void SizeBox_Event(class USizeBox* Param_SizeBox);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UMG_LabelText_C">();
	}
	static class UUMG_LabelText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMG_LabelText_C>();
	}
};
static_assert(alignof(UUMG_LabelText_C) == 0x000008, "Wrong alignment on UUMG_LabelText_C");
static_assert(sizeof(UUMG_LabelText_C) == 0x0002E0, "Wrong size on UUMG_LabelText_C");
static_assert(offsetof(UUMG_LabelText_C, UberGraphFrame) == 0x000280, "Member 'UUMG_LabelText_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, Close) == 0x000288, "Member 'UUMG_LabelText_C::Close' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, Expand) == 0x000290, "Member 'UUMG_LabelText_C::Expand' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, Border_30) == 0x000298, "Member 'UUMG_LabelText_C::Border_30' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, Image_Icon) == 0x0002A0, "Member 'UUMG_LabelText_C::Image_Icon' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, SizeBox) == 0x0002A8, "Member 'UUMG_LabelText_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, TextBlock_Label) == 0x0002B0, "Member 'UUMG_LabelText_C::TextBlock_Label' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, LableText) == 0x0002B8, "Member 'UUMG_LabelText_C::LableText' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, IsNeededNormalWidth) == 0x0002D0, "Member 'UUMG_LabelText_C::IsNeededNormalWidth' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, Set_Padding_Right) == 0x0002D4, "Member 'UUMG_LabelText_C::Set_Padding_Right' has a wrong offset!");
static_assert(offsetof(UUMG_LabelText_C, ShowIcon) == 0x0002D8, "Member 'UUMG_LabelText_C::ShowIcon' has a wrong offset!");

}

