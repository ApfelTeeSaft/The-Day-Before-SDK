#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSI_Slot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ContainerType_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "E_ShopContainer_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FItemInfo_structs.hpp"
#include "SlotRarity_structs.hpp"
#include "InputCore_structs.hpp"
#include "JSItemType_structs.hpp"
#include "E_ItemColorTypes_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass JSI_Slot.JSI_Slot_C
// 0x06F0 (0x0970 - 0x0280)
class UJSI_Slot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       UsingItemAnim;                                     // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       GTAHover;                                          // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       HoverV2;                                           // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover_Anim_0;                                      // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShopAnim;                                          // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover_AnimShop;                                    // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CannotBeUsingItem;                                 // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DismantleProgress_Anim;                            // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowProgressBar6sec;                               // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ShowProgressBar52sec;                              // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Deselect_Anim;                                     // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Add_Anim;                                          // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Drop_Anim;                                         // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       FailedToSelect_Anim;                               // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DoubleClick_Failed_Anim;                           // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DoubleClick_Successed_Anim;                        // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Select_Anim;                                       // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MouseUp_Anim;                                      // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MouseDown_Anim;                                    // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover_Anim;                                        // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Background;                                        // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Background_WithItem;                               // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_SlotImage;                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           Durability_ProgressBar;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 HighlightEffect;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_RP;                                  // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_ShopPrice;                           // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BGPrice;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Border;                                      // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BorderShop;                                  // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ColorGradient;                               // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_DismantleLocked;                             // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_EmptySlotHovered;                            // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hovered;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_QuestItemIcon;                               // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Repair;                                      // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_RP;                                          // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Selected;                                    // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Selected_Bad;                                // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ShopAnim;                                    // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Indicator_BG;                                      // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Indicator_Fill;                                    // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MainSlotOverlay;                                   // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_BGPrice;                                   // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_ShopPrice;                                 // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_Component;                             // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_Dismantle;                             // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               RoundProgressBar;                                  // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ShopPrice;                                         // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ShopPrice_RP;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_q;                                         // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_ShopPrice;                                 // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_ShopPriceBG;                               // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_TextPrice;                                 // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SlotImage;                                         // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SlotSizeBox;                                       // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_WCoin;                                        // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Durability;                              // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextCout;                                          // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextCout_WithRP;                                   // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TutorialHighlight_C*               WBP_TutorialHighlight;                             // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size;                                              // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FSlateColor                            OnHoverTint;                                       // 0x0488(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Image;                                             // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsEmpty;                                           // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Row;                                               // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         Column;                                            // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Highlighted_;                                      // 0x04B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HighlightOnHover_;                                 // 0x04B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4B6[0x2];                                      // 0x04B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ContainerMother;                                   // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              SlotVector;                                        // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              LastClickLoc;                                      // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            HostedItem;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    ArrayOfHostingItem;                                // 0x04E8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UOverlaySlot*                           OverlayRef;                                        // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DragOffset;                                        // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlotRarity                                   Rarity;                                            // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             ItemInfo;                                          // 0x0518(0x0220)(Edit, BlueprintVisible, ContainsInstancedReference, ExposeOnSpawn, HasGetValueTypeHash)
	class UJSIContainer_C*                        SlotContainer;                                     // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<EJSItemType>                           DropSupportedItems;                                // 0x0740(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FVector2D                              OriginalSize;                                      // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFixedSlot_;                                      // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_761[0x7];                                      // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   RotateKey;                                         // 0x0768(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          SlotRotated_;                                      // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UContainerWindowWidget_C*               WindowContainer;                                   // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UOnHoverTooltipWidget_C*                OnHoverWidget;                                     // 0x0790(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameImage;                                        // 0x0798(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FrameImageRect;                                    // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ParentID;                                          // 0x07A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideOnDrag;                                        // 0x07AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDragPivot                                    DragBehaviour;                                     // 0x07AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SortHighlighted_;                                  // 0x07AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowInteractionOnSort;                            // 0x07AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SortHighlightOpacity;                              // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            ImageTint;                                         // 0x07B8(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn)
	uint8                                         Pad_7CC[0x4];                                      // 0x07CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ItemDragTexture;                                   // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableSome;                                       // 0x07D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D9[0x7];                                      // 0x07D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_UsageRequest_C*                      W_UsageRequest;                                    // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Loot;                                              // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_7E9[0x7];                                      // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             ItemsDataTable;                                    // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BorderIsInvisible;                                 // 0x07F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F9[0x3];                                      // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                BoxMargin;                                         // 0x07FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Active;                                            // 0x080C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_80D[0x3];                                      // 0x080D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time;                                              // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoading;                                         // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedsLoading;                                      // 0x0819(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEquipmentSlot;                                   // 0x081A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_81B[0x5];                                      // 0x081B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 EquipmentSiluet;                                   // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSelected;                                        // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowSiluetImage;                                  // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82A[0x6];                                      // 0x082A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DC_Position;                                       // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_JSI_Slot_C;                                   // 0x0840(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          PossiblyOccupied;                                  // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GameHUD_C*                          Game_HUD_Ref;                                      // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                RenderWeaponIcon;                                  // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvPC_C*                              Controller_Ref;                                    // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDragStart;                                       // 0x0878(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ASurvivalPlayer_C*                      As_Survival_Player;                                // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDragMove;                                        // 0x0890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSelected_Clicked_;                               // 0x08A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         Playback_Speed5sec;                                // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Playback_Speed6sec;                                // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Percent;                                           // 0x08B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8BC[0x4];                                      // 0x08BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Values;                                            // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DismantleEnabled;                                  // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnMouseEnter;                                     // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8CA[0x6];                                      // 0x08CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelected_ClickedRMB_;                            // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnContentHidden;                                   // 0x08E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnContentShow;                                     // 0x08F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDurabilityChanged;                               // 0x0900(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UFMODEvent*                             HoverSoundEvent;                                   // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TogglePrice;                                       // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_919[0x7];                                      // 0x0919(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SetCustomTranslation;                              // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         RP_Point;                                          // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShopContainer                               SetShopContainerEnum;                              // 0x0934(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_935[0x3];                                      // 0x0935(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnShopAnimFinished;                                // 0x0938(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInterface*                     GeneratedWeaponIcon;                               // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeHovered;                                      // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullDurability;                                    // 0x0951(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_952[0x2];                                      // 0x0952(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RepairPrice;                                       // 0x0954(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HaveEnoughMoney;                                   // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_959[0x7];                                      // 0x0959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RepairProgressTimer;                               // 0x0960(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bLock;                                             // 0x0968(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddAttachment(const struct FAttachmentInfo& AttachmentInfo);
	void AddToXY(int32 X, int32 Y, struct FVector2D* SlotDimension);
	void BlockTimer(double Param_Time);
	void ButtonPressed();
	int32 Calculate_Result_Price();
	void Calculate_Size_With_Ratio(struct FVector2D* Param_Size);
	bool CanAttachAttachment(class FName AttachmentID);
	void CanOpenSpecialContainer_(bool* Return_value);
	void ChangeImageAnchors(bool Equipped);
	void ChangePrice(double Price);
	void ChangeRarity(ESlotRarity Param_Rarity, bool* Changed_);
	void ChangesImageAnchors();
	void ChangeVisibilityIsEmpty();
	void ChangeVisibilityIsFixedSlot();
	void CheckRootContainer(class UJSI_Slot_C* DraggedItem, bool* CanAdd_);
	void CheckShopContainer(int32* PageIndex, E_ShopContainer* GetShopContainer, class UJSIContainer_C** ShopContainer);
	void CheckSlotIsContainer();
	void ClearSlot();
	void ConfirmDragOperation(class UJSIContainer_C* OutContainer, class UJSIContainer_C* InContainer, bool* Result);
	void Construct();
	void ConstructInitialize();
	void Destruct();
	void DetectChange(class UJSI_Slot_C* DroppedSlotRef, bool DraggedRotated_, bool* NOChange);
	class UWidget* DoCustomNavigation_Down(EUINavigation Param_Navigation);
	class UWidget* DoCustomNavigation_Left(EUINavigation Param_Navigation);
	class UWidget* DoCustomNavigation_Right(EUINavigation Param_Navigation);
	class UWidget* DoCustomNavigation_Up(EUINavigation Param_Navigation);
	void DragCancel();
	void ExecuteUbergraph_JSI_Slot(int32 EntryPoint);
	void Finished_C4F95376474216B3E074BAA89C8034E2();
	void Get_Enough_Money(bool* Param_HaveEnoughMoney);
	void Get_Icon(const struct FFItemInfo& FItemInfo, class ABP_GameHUD_C* HUD, class UObject** Param_Image);
	ESlateVisibility Get_Image_Border_Visibility();
	void Get_Pivot_Index(const struct FVector2D& Param_DragOffset, int32* Param_Index);
	void Get_Repair_Price(int32* Param_RepairPrice);
	ESlateVisibility Get_Background_Visibility_0();
	ESlateVisibility Get_Background_WithItem_Visibility_0();
	ESlateVisibility Get_Image_ColorGradient_Visibility_0();
	void GetBorderColorByRarity(ESlotRarity Param_Rarity, struct FLinearColor* Color);
	void GetClickLocation(const struct FGeometry& Geometry, const struct FPointerEvent& MouseEvents, struct FVector2D* Output_Get);
	void GetCount(int32* Count);
	void GetDismantleEnabled(bool* Enabled);
	void GetDurability(double* Durability, double* MaxDurability);
	void GetHostedSlot(class UJSI_Slot_C** HostingItem);
	void GetItemName(class FText* Param_Name);
	double GetNewMaxDurability(double InputPin);
	void GetPrice_Shop_();
	void GetRepairStatus();
	void GetSlotIndexOnDrop(int32* Param_SlotIndex);
	void GetSlotSizeBaground();
	void GetSpecialContainerRef(class UUserWidget** SpecialContainerRef);
	void GetType(EJSItemType* Type);
	void GetUniqueID(int32* UniqueServerID);
	void GetWeaponIcon(class UMaterialInterface** Param_GeneratedWeaponIcon);
	void GetWeight(double* Weight);
	void Handle_Size_Box();
	void Hovered_Slot();
	void HoverSlot();
	void Image_Hovered_Event(class UImage* Param_Image_Hovered);
	void Image_Hovered_Event_0(class UImage* Param_Image_Hovered);
	void Initialize();
	void IsBroken(bool* Return);
	void IsContainer_(bool* Param_IsContainer_);
	void IsEmptySlot(bool* Param_IsEmpty);
	bool IsRotated_();
	bool IsSpecialContainer_();
	void IsStillValid(class UJSI_Slot_C* Param_Slot, bool* Valid);
	bool IsSupportedAttachment(class FName AttachmentID);
	struct FEventReply On_MouseDoubleClick(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnContentHidden__DelegateSignature();
	void OnContentShow__DelegateSignature();
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragMove__DelegateSignature();
	bool OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragStart__DelegateSignature();
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDurabilityChanged__DelegateSignature();
	void OnHideItemInfo();
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnLoaded_7D15951943AF1C18C4E3788AE52A2621(TSubclassOf<class UObject> Loaded);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnSelected_Clicked___DelegateSignature(class UJSI_Slot_C* SlotWidgetRef);
	void OnSelected_ClickedRMB___DelegateSignature(class UJSI_Slot_C* SlotWidgetRef);
	void OnShopAnimFinished__DelegateSignature();
	void OnShowItemInfo();
	void PlayDismantleAnimation();
	void PlayDoubleClickFailed();
	void PlayDoubleClickSuccessed();
	void PlayDropAnimation(EUMGSequencePlayMode Direction);
	void PlayDropSound(class UJSI_Slot_C* SlotRef, class UJSIContainer_C* ToContainerRef, bool Local);
	void PreConstruct(bool IsDesignTime);
	void ProgressBar52sec();
	void ProgressBar5s(class UProgressBar* Param_ProgressBar_Component);
	void ProgressBar6s(class UProgressBar* Param_ProgressBar_Component);
	void ProgressBar6Sec();
	void QuipItem();
	void RefreshOnDragEnter(class UDragDropOperation* Op);
	void Repair();
	void Repair_Stop_Progress();
	void RepairProgressFilled();
	void ResizeSlot(const struct FVector2D& NewSize, const struct FVector2D& SlotDimension, struct FVector2D* Param_Size);
	void RotateSlot(bool Rotate_, bool FlipVector_);
	void SequenceEvent__ENTRYPOINTJSI_Slot(class UProgressBar* Param_ProgressBar_Component);
	void SequenceEvent__ENTRYPOINTJSI_Slot_0(class UProgressBar* Param_ProgressBar_Component);
	void SequenceEvent__ENTRYPOINTJSI_Slot_1(class UImage* Param_Image_ShopAnim);
	void SequenceEvent__ENTRYPOINTJSI_Slot_2(class UImage* Param_Image_Hovered);
	void SequenceEvent__ENTRYPOINTJSI_Slot_3(class UImage* Param_Image_Hovered);
	double Set_Percent_To_Progress_Bar();
	void SetActiveHighlight(bool Param_Index);
	void SetActiveSlot(bool Param_Active);
	void SetBadSelectionImage();
	void SetBorderHidden(bool Value);
	void SetContentHidden(bool bIsHidden);
	void SetDefaultSelectionImage();
	void SetDismantleEnabled(bool Enable);
	void SetDurability(double NewDurability);
	void SetFillValue(double Param_Values);
	void SetHighlight(bool Highlight_, const struct FSlateColor& HighlightColor, bool Drop);
	void SetHostedSlot(class UJSI_Slot_C* HostingItem);
	void SetHostingArray(TArray<class UJSI_Slot_C*>& Param_ArrayOfHostingItem);
	void SetImageDefaultBackground();
	void SetOverlaySlot(class UOverlaySlot* Param_OverlayRef);
	void SetRenderIcon(bool bForced);
	void SetRepair();
	void SetSelected(bool Selected);
	void SetSlotBrushes();
	void SetSortHighlight(bool IsFaded);
	void SetSpecialContainer(class UUserWidget* SpecialContainerRef);
	void SetUnactiveSlot();
	void SetUniqueID(int32 ID, int32* UniqueId);
	void ShopAnim_();
	void ShopAnimFinished(class UImage* Param_Image_ShopAnim);
	void StartProcessRepair();
	void StopDismantleAnimation();
	void ToggleHighlight(bool DragEnter, class UDragDropOperation* Operation);
	void UnhandledGetTargetContainer(class UJSIContainer_C* Container1, class UJSIContainer_C* Container2, class UJSIContainer_C** Target);
	void UnhoveredSlot();
	void UnhoverSlot();
	void Update_Slot_Info();
	void UpdateCount(int32 NewCount, double NewDurability, bool WithDurabilty, int32* Count);
	void UpdateDurabilityProgressBar();
	void UpdateIcon();
	void UpdateImage(class UPaperSprite* NewTexture, bool* Updated);
	void UpdateInfo(class UObject* Param_Image, const struct FVector2D& Image_Size);

	void GetSlotBrushes(struct FSlateBrush* BG_Brush, struct FSlateBrush* Gradient_Brush, struct FSlateBrush* Highlight_Brush, struct FSlateBrush* Hover_Brush, class UPaperSprite** BGSprite) const;
	struct FVector2D SwapVector(const struct FVector2D& Vector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"JSI_Slot_C">();
	}
	static class UJSI_Slot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJSI_Slot_C>();
	}
};
static_assert(alignof(UJSI_Slot_C) == 0x000008, "Wrong alignment on UJSI_Slot_C");
static_assert(sizeof(UJSI_Slot_C) == 0x000970, "Wrong size on UJSI_Slot_C");
static_assert(offsetof(UJSI_Slot_C, UberGraphFrame) == 0x000280, "Member 'UJSI_Slot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, UsingItemAnim) == 0x000288, "Member 'UJSI_Slot_C::UsingItemAnim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, GTAHover) == 0x000290, "Member 'UJSI_Slot_C::GTAHover' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HoverV2) == 0x000298, "Member 'UJSI_Slot_C::HoverV2' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Hover_Anim_0) == 0x0002A0, "Member 'UJSI_Slot_C::Hover_Anim_0' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ShopAnim) == 0x0002A8, "Member 'UJSI_Slot_C::ShopAnim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Hover_AnimShop) == 0x0002B0, "Member 'UJSI_Slot_C::Hover_AnimShop' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, CannotBeUsingItem) == 0x0002B8, "Member 'UJSI_Slot_C::CannotBeUsingItem' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DismantleProgress_Anim) == 0x0002C0, "Member 'UJSI_Slot_C::DismantleProgress_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ShowProgressBar6sec) == 0x0002C8, "Member 'UJSI_Slot_C::ShowProgressBar6sec' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ShowProgressBar52sec) == 0x0002D0, "Member 'UJSI_Slot_C::ShowProgressBar52sec' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Deselect_Anim) == 0x0002D8, "Member 'UJSI_Slot_C::Deselect_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Add_Anim) == 0x0002E0, "Member 'UJSI_Slot_C::Add_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Drop_Anim) == 0x0002E8, "Member 'UJSI_Slot_C::Drop_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, FailedToSelect_Anim) == 0x0002F0, "Member 'UJSI_Slot_C::FailedToSelect_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DoubleClick_Failed_Anim) == 0x0002F8, "Member 'UJSI_Slot_C::DoubleClick_Failed_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DoubleClick_Successed_Anim) == 0x000300, "Member 'UJSI_Slot_C::DoubleClick_Successed_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Select_Anim) == 0x000308, "Member 'UJSI_Slot_C::Select_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, MouseUp_Anim) == 0x000310, "Member 'UJSI_Slot_C::MouseUp_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, MouseDown_Anim) == 0x000318, "Member 'UJSI_Slot_C::MouseDown_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Hover_Anim) == 0x000320, "Member 'UJSI_Slot_C::Hover_Anim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Background) == 0x000328, "Member 'UJSI_Slot_C::Background' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Background_WithItem) == 0x000330, "Member 'UJSI_Slot_C::Background_WithItem' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, CanvasPanel_SlotImage) == 0x000338, "Member 'UJSI_Slot_C::CanvasPanel_SlotImage' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Durability_ProgressBar) == 0x000340, "Member 'UJSI_Slot_C::Durability_ProgressBar' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HighlightEffect) == 0x000348, "Member 'UJSI_Slot_C::HighlightEffect' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HorizontalBox_RP) == 0x000350, "Member 'UJSI_Slot_C::HorizontalBox_RP' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HorizontalBox_ShopPrice) == 0x000358, "Member 'UJSI_Slot_C::HorizontalBox_ShopPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_BGPrice) == 0x000360, "Member 'UJSI_Slot_C::Image_BGPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_Border) == 0x000368, "Member 'UJSI_Slot_C::Image_Border' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_BorderShop) == 0x000370, "Member 'UJSI_Slot_C::Image_BorderShop' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_ColorGradient) == 0x000378, "Member 'UJSI_Slot_C::Image_ColorGradient' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_DismantleLocked) == 0x000380, "Member 'UJSI_Slot_C::Image_DismantleLocked' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_EmptySlotHovered) == 0x000388, "Member 'UJSI_Slot_C::Image_EmptySlotHovered' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_Hovered) == 0x000390, "Member 'UJSI_Slot_C::Image_Hovered' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_QuestItemIcon) == 0x000398, "Member 'UJSI_Slot_C::Image_QuestItemIcon' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_Repair) == 0x0003A0, "Member 'UJSI_Slot_C::Image_Repair' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_RP) == 0x0003A8, "Member 'UJSI_Slot_C::Image_RP' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_Selected) == 0x0003B0, "Member 'UJSI_Slot_C::Image_Selected' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_Selected_Bad) == 0x0003B8, "Member 'UJSI_Slot_C::Image_Selected_Bad' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image_ShopAnim) == 0x0003C0, "Member 'UJSI_Slot_C::Image_ShopAnim' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Indicator_BG) == 0x0003C8, "Member 'UJSI_Slot_C::Indicator_BG' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Indicator_Fill) == 0x0003D0, "Member 'UJSI_Slot_C::Indicator_Fill' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, MainSlotOverlay) == 0x0003D8, "Member 'UJSI_Slot_C::MainSlotOverlay' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Overlay_BGPrice) == 0x0003E0, "Member 'UJSI_Slot_C::Overlay_BGPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Overlay_ShopPrice) == 0x0003E8, "Member 'UJSI_Slot_C::Overlay_ShopPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ProgressBar_Component) == 0x0003F0, "Member 'UJSI_Slot_C::ProgressBar_Component' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ProgressBar_Dismantle) == 0x0003F8, "Member 'UJSI_Slot_C::ProgressBar_Dismantle' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, RoundProgressBar) == 0x000400, "Member 'UJSI_Slot_C::RoundProgressBar' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ShopPrice) == 0x000408, "Member 'UJSI_Slot_C::ShopPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ShopPrice_RP) == 0x000410, "Member 'UJSI_Slot_C::ShopPrice_RP' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SizeBox_q) == 0x000418, "Member 'UJSI_Slot_C::SizeBox_q' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SizeBox_ShopPrice) == 0x000420, "Member 'UJSI_Slot_C::SizeBox_ShopPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SizeBox_ShopPriceBG) == 0x000428, "Member 'UJSI_Slot_C::SizeBox_ShopPriceBG' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SizeBox_TextPrice) == 0x000430, "Member 'UJSI_Slot_C::SizeBox_TextPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SlotImage) == 0x000438, "Member 'UJSI_Slot_C::SlotImage' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SlotSizeBox) == 0x000440, "Member 'UJSI_Slot_C::SlotSizeBox' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Text_WCoin) == 0x000448, "Member 'UJSI_Slot_C::Text_WCoin' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, TextBlock_Durability) == 0x000450, "Member 'UJSI_Slot_C::TextBlock_Durability' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, TextCout) == 0x000458, "Member 'UJSI_Slot_C::TextCout' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, TextCout_WithRP) == 0x000460, "Member 'UJSI_Slot_C::TextCout_WithRP' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, WBP_TutorialHighlight) == 0x000468, "Member 'UJSI_Slot_C::WBP_TutorialHighlight' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SlotIndex) == 0x000470, "Member 'UJSI_Slot_C::SlotIndex' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Size) == 0x000478, "Member 'UJSI_Slot_C::Size' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnHoverTint) == 0x000488, "Member 'UJSI_Slot_C::OnHoverTint' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Image) == 0x0004A0, "Member 'UJSI_Slot_C::Image' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, IsEmpty) == 0x0004A8, "Member 'UJSI_Slot_C::IsEmpty' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Row) == 0x0004AC, "Member 'UJSI_Slot_C::Row' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Column) == 0x0004B0, "Member 'UJSI_Slot_C::Column' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Highlighted_) == 0x0004B4, "Member 'UJSI_Slot_C::Highlighted_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HighlightOnHover_) == 0x0004B5, "Member 'UJSI_Slot_C::HighlightOnHover_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ContainerMother) == 0x0004B8, "Member 'UJSI_Slot_C::ContainerMother' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SlotVector) == 0x0004C0, "Member 'UJSI_Slot_C::SlotVector' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, LastClickLoc) == 0x0004D0, "Member 'UJSI_Slot_C::LastClickLoc' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HostedItem) == 0x0004E0, "Member 'UJSI_Slot_C::HostedItem' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ArrayOfHostingItem) == 0x0004E8, "Member 'UJSI_Slot_C::ArrayOfHostingItem' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OverlayRef) == 0x0004F8, "Member 'UJSI_Slot_C::OverlayRef' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DragOffset) == 0x000500, "Member 'UJSI_Slot_C::DragOffset' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Rarity) == 0x000510, "Member 'UJSI_Slot_C::Rarity' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ItemInfo) == 0x000518, "Member 'UJSI_Slot_C::ItemInfo' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SlotContainer) == 0x000738, "Member 'UJSI_Slot_C::SlotContainer' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DropSupportedItems) == 0x000740, "Member 'UJSI_Slot_C::DropSupportedItems' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OriginalSize) == 0x000750, "Member 'UJSI_Slot_C::OriginalSize' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, IsFixedSlot_) == 0x000760, "Member 'UJSI_Slot_C::IsFixedSlot_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, RotateKey) == 0x000768, "Member 'UJSI_Slot_C::RotateKey' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SlotRotated_) == 0x000780, "Member 'UJSI_Slot_C::SlotRotated_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, WindowContainer) == 0x000788, "Member 'UJSI_Slot_C::WindowContainer' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnHoverWidget) == 0x000790, "Member 'UJSI_Slot_C::OnHoverWidget' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, FrameImage) == 0x000798, "Member 'UJSI_Slot_C::FrameImage' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, FrameImageRect) == 0x0007A0, "Member 'UJSI_Slot_C::FrameImageRect' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ParentID) == 0x0007A8, "Member 'UJSI_Slot_C::ParentID' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HideOnDrag) == 0x0007AC, "Member 'UJSI_Slot_C::HideOnDrag' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DragBehaviour) == 0x0007AD, "Member 'UJSI_Slot_C::DragBehaviour' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SortHighlighted_) == 0x0007AE, "Member 'UJSI_Slot_C::SortHighlighted_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, AllowInteractionOnSort) == 0x0007AF, "Member 'UJSI_Slot_C::AllowInteractionOnSort' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SortHighlightOpacity) == 0x0007B0, "Member 'UJSI_Slot_C::SortHighlightOpacity' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ImageTint) == 0x0007B8, "Member 'UJSI_Slot_C::ImageTint' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ItemDragTexture) == 0x0007D0, "Member 'UJSI_Slot_C::ItemDragTexture' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DisableSome) == 0x0007D8, "Member 'UJSI_Slot_C::DisableSome' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, W_UsageRequest) == 0x0007E0, "Member 'UJSI_Slot_C::W_UsageRequest' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Loot) == 0x0007E8, "Member 'UJSI_Slot_C::Loot' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, ItemsDataTable) == 0x0007F0, "Member 'UJSI_Slot_C::ItemsDataTable' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, BorderIsInvisible) == 0x0007F8, "Member 'UJSI_Slot_C::BorderIsInvisible' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, BoxMargin) == 0x0007FC, "Member 'UJSI_Slot_C::BoxMargin' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Active) == 0x00080C, "Member 'UJSI_Slot_C::Active' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Time) == 0x000810, "Member 'UJSI_Slot_C::Time' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, IsLoading) == 0x000818, "Member 'UJSI_Slot_C::IsLoading' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, NeedsLoading) == 0x000819, "Member 'UJSI_Slot_C::NeedsLoading' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, IsEquipmentSlot) == 0x00081A, "Member 'UJSI_Slot_C::IsEquipmentSlot' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, EquipmentSiluet) == 0x000820, "Member 'UJSI_Slot_C::EquipmentSiluet' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, IsSelected) == 0x000828, "Member 'UJSI_Slot_C::IsSelected' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, bShowSiluetImage) == 0x000829, "Member 'UJSI_Slot_C::bShowSiluetImage' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DC_Position) == 0x000830, "Member 'UJSI_Slot_C::DC_Position' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Name_JSI_Slot_C) == 0x000840, "Member 'UJSI_Slot_C::Name_JSI_Slot_C' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, PossiblyOccupied) == 0x000858, "Member 'UJSI_Slot_C::PossiblyOccupied' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Game_HUD_Ref) == 0x000860, "Member 'UJSI_Slot_C::Game_HUD_Ref' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, RenderWeaponIcon) == 0x000868, "Member 'UJSI_Slot_C::RenderWeaponIcon' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Controller_Ref) == 0x000870, "Member 'UJSI_Slot_C::Controller_Ref' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnDragStart) == 0x000878, "Member 'UJSI_Slot_C::OnDragStart' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, As_Survival_Player) == 0x000888, "Member 'UJSI_Slot_C::As_Survival_Player' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnDragMove) == 0x000890, "Member 'UJSI_Slot_C::OnDragMove' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnSelected_Clicked_) == 0x0008A0, "Member 'UJSI_Slot_C::OnSelected_Clicked_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Playback_Speed5sec) == 0x0008B0, "Member 'UJSI_Slot_C::Playback_Speed5sec' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Playback_Speed6sec) == 0x0008B4, "Member 'UJSI_Slot_C::Playback_Speed6sec' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Percent) == 0x0008B8, "Member 'UJSI_Slot_C::Percent' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, Values) == 0x0008C0, "Member 'UJSI_Slot_C::Values' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, DismantleEnabled) == 0x0008C8, "Member 'UJSI_Slot_C::DismantleEnabled' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, bOnMouseEnter) == 0x0008C9, "Member 'UJSI_Slot_C::bOnMouseEnter' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnSelected_ClickedRMB_) == 0x0008D0, "Member 'UJSI_Slot_C::OnSelected_ClickedRMB_' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnContentHidden) == 0x0008E0, "Member 'UJSI_Slot_C::OnContentHidden' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnContentShow) == 0x0008F0, "Member 'UJSI_Slot_C::OnContentShow' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnDurabilityChanged) == 0x000900, "Member 'UJSI_Slot_C::OnDurabilityChanged' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HoverSoundEvent) == 0x000910, "Member 'UJSI_Slot_C::HoverSoundEvent' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, TogglePrice) == 0x000918, "Member 'UJSI_Slot_C::TogglePrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SetCustomTranslation) == 0x000920, "Member 'UJSI_Slot_C::SetCustomTranslation' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, RP_Point) == 0x000930, "Member 'UJSI_Slot_C::RP_Point' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, SetShopContainerEnum) == 0x000934, "Member 'UJSI_Slot_C::SetShopContainerEnum' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, OnShopAnimFinished) == 0x000938, "Member 'UJSI_Slot_C::OnShopAnimFinished' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, GeneratedWeaponIcon) == 0x000948, "Member 'UJSI_Slot_C::GeneratedWeaponIcon' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, CanBeHovered) == 0x000950, "Member 'UJSI_Slot_C::CanBeHovered' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, FullDurability) == 0x000951, "Member 'UJSI_Slot_C::FullDurability' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, RepairPrice) == 0x000954, "Member 'UJSI_Slot_C::RepairPrice' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, HaveEnoughMoney) == 0x000958, "Member 'UJSI_Slot_C::HaveEnoughMoney' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, RepairProgressTimer) == 0x000960, "Member 'UJSI_Slot_C::RepairProgressTimer' has a wrong offset!");
static_assert(offsetof(UJSI_Slot_C, bLock) == 0x000968, "Member 'UJSI_Slot_C::bLock' has a wrong offset!");

}

