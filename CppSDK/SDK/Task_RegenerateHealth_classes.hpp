#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Task_RegenerateHealth

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Task_RegenerateHealth.Task_RegenerateHealth_C
// 0x0018 (0x00C0 - 0x00A8)
class UTask_RegenerateHealth_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AMainBanditAI_C*                        bandit;                                            // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HPPerSecond;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Task_RegenerateHealth(int32 EntryPoint);
	void OnBlendOut_6E66623F4EB6B666E4DAFA8B1E537348(class FName NotifyName);
	void OnCompleted_6E66623F4EB6B666E4DAFA8B1E537348(class FName NotifyName);
	void OnInterrupted_6E66623F4EB6B666E4DAFA8B1E537348(class FName NotifyName);
	void OnNotifyBegin_6E66623F4EB6B666E4DAFA8B1E537348(class FName NotifyName);
	void OnNotifyEnd_6E66623F4EB6B666E4DAFA8B1E537348(class FName NotifyName);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Task_RegenerateHealth_C">();
	}
	static class UTask_RegenerateHealth_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTask_RegenerateHealth_C>();
	}
};
static_assert(alignof(UTask_RegenerateHealth_C) == 0x000008, "Wrong alignment on UTask_RegenerateHealth_C");
static_assert(sizeof(UTask_RegenerateHealth_C) == 0x0000C0, "Wrong size on UTask_RegenerateHealth_C");
static_assert(offsetof(UTask_RegenerateHealth_C, UberGraphFrame) == 0x0000A8, "Member 'UTask_RegenerateHealth_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTask_RegenerateHealth_C, bandit) == 0x0000B0, "Member 'UTask_RegenerateHealth_C::bandit' has a wrong offset!");
static_assert(offsetof(UTask_RegenerateHealth_C, HPPerSecond) == 0x0000B8, "Member 'UTask_RegenerateHealth_C::HPPerSecond' has a wrong offset!");

}

