#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Lockpicking

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_LockpickDifficulty_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Lockpicking.WBP_Lockpicking_C
// 0x00E0 (0x0360 - 0x0280)
class UWBP_Lockpicking_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       NewLockpickAnim;                                   // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_86;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_108;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_271;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Background;                                  // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BlackScreenAbove;                            // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           LeftCursorTeleport;                                // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           OffersVerticalBox;                                 // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           RightCursorTeleport;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           SquadNotifiactions;                                // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           SquadVerticalBox;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_LockpicksNum;                            // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_KeyIcon_C*                         WBP_KeyIcon;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TipsInfo_C*                        WBP_TipsInfo;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	E_LockpickDifficulty                          LockpickDifficulty;                                // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      PlayerRef;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FString                                 LockpickName;                                      // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnExit;                                            // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ASurvPC_C*                              ControllerRef;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ABP_LockpickingGame_C*                  ParentActorRef;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector2D                              RightTeleportTarget;                               // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LeftTeleportTarget;                                // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_TipsInfo_C*                        WBP_Tips_Info;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void CollapseWidget();
	void Construct();
	void ExecuteUbergraph_WBP_Lockpicking(int32 EntryPoint);
	void GetLockpickNum(int32* Num);
	void InitSubWidgets();
	void OnExit__DelegateSignature();
	void OnInitialized();
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void RemoveLockpick(bool* HasLockpick);
	void RunExitEvent();
	void ShowSuccessMessage();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateLockpickNum();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Lockpicking_C">();
	}
	static class UWBP_Lockpicking_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Lockpicking_C>();
	}
};
static_assert(alignof(UWBP_Lockpicking_C) == 0x000008, "Wrong alignment on UWBP_Lockpicking_C");
static_assert(sizeof(UWBP_Lockpicking_C) == 0x000360, "Wrong size on UWBP_Lockpicking_C");
static_assert(offsetof(UWBP_Lockpicking_C, UberGraphFrame) == 0x000280, "Member 'UWBP_Lockpicking_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, NewLockpickAnim) == 0x000288, "Member 'UWBP_Lockpicking_C::NewLockpickAnim' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, Image_86) == 0x000290, "Member 'UWBP_Lockpicking_C::Image_86' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, Image_108) == 0x000298, "Member 'UWBP_Lockpicking_C::Image_108' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, Image_271) == 0x0002A0, "Member 'UWBP_Lockpicking_C::Image_271' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, Image_Background) == 0x0002A8, "Member 'UWBP_Lockpicking_C::Image_Background' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, Image_BlackScreenAbove) == 0x0002B0, "Member 'UWBP_Lockpicking_C::Image_BlackScreenAbove' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, LeftCursorTeleport) == 0x0002B8, "Member 'UWBP_Lockpicking_C::LeftCursorTeleport' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, OffersVerticalBox) == 0x0002C0, "Member 'UWBP_Lockpicking_C::OffersVerticalBox' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, RightCursorTeleport) == 0x0002C8, "Member 'UWBP_Lockpicking_C::RightCursorTeleport' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, SquadNotifiactions) == 0x0002D0, "Member 'UWBP_Lockpicking_C::SquadNotifiactions' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, SquadVerticalBox) == 0x0002D8, "Member 'UWBP_Lockpicking_C::SquadVerticalBox' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, TextBlock_LockpicksNum) == 0x0002E0, "Member 'UWBP_Lockpicking_C::TextBlock_LockpicksNum' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, WBP_KeyIcon) == 0x0002E8, "Member 'UWBP_Lockpicking_C::WBP_KeyIcon' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, WBP_TipsInfo) == 0x0002F0, "Member 'UWBP_Lockpicking_C::WBP_TipsInfo' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, LockpickDifficulty) == 0x0002F8, "Member 'UWBP_Lockpicking_C::LockpickDifficulty' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, PlayerRef) == 0x000300, "Member 'UWBP_Lockpicking_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, LockpickName) == 0x000308, "Member 'UWBP_Lockpicking_C::LockpickName' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, OnExit) == 0x000318, "Member 'UWBP_Lockpicking_C::OnExit' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, ControllerRef) == 0x000328, "Member 'UWBP_Lockpicking_C::ControllerRef' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, ParentActorRef) == 0x000330, "Member 'UWBP_Lockpicking_C::ParentActorRef' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, RightTeleportTarget) == 0x000338, "Member 'UWBP_Lockpicking_C::RightTeleportTarget' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, LeftTeleportTarget) == 0x000348, "Member 'UWBP_Lockpicking_C::LeftTeleportTarget' has a wrong offset!");
static_assert(offsetof(UWBP_Lockpicking_C, WBP_Tips_Info) == 0x000358, "Member 'UWBP_Lockpicking_C::WBP_Tips_Info' has a wrong offset!");

}

