#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SleepingBag

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_SleepingBagBase_classes.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SleepingBag.BP_SleepingBag_C
// 0x0070 (0x0318 - 0x02A8)
class ABP_SleepingBag_C final : public ABP_SleepingBagBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SleepingBag_C;                   // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_TrailComponent_C*                   BP_TrailComponent2;                                // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent1;                                // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent;                                 // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ArrowActor;                                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CollectPoint;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sleeping_bag_inflate;                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExitPoint;                                         // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SleepPosition;                                     // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Open;                                              // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Close;                                             // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  User;                                              // 0x0308(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OwnerUser;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void DestroyInteractable();
	void ExecuteUbergraph_BP_SleepingBag(int32 EntryPoint);
	void GetActorType(E_ActorType* ActorType);
	void IsLocked_(bool* Result);
	void OnBeginInteract(class APawn* Player);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReleaseUser();
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void TeleportToOwner();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SleepingBag_C">();
	}
	static class ABP_SleepingBag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SleepingBag_C>();
	}
};
static_assert(alignof(ABP_SleepingBag_C) == 0x000008, "Wrong alignment on ABP_SleepingBag_C");
static_assert(sizeof(ABP_SleepingBag_C) == 0x000318, "Wrong size on ABP_SleepingBag_C");
static_assert(offsetof(ABP_SleepingBag_C, UberGraphFrame_BP_SleepingBag_C) == 0x0002A8, "Member 'ABP_SleepingBag_C::UberGraphFrame_BP_SleepingBag_C' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, BP_TrailComponent2) == 0x0002B0, "Member 'ABP_SleepingBag_C::BP_TrailComponent2' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, BP_TrailComponent1) == 0x0002B8, "Member 'ABP_SleepingBag_C::BP_TrailComponent1' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, BP_TrailComponent) == 0x0002C0, "Member 'ABP_SleepingBag_C::BP_TrailComponent' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, ArrowActor) == 0x0002C8, "Member 'ABP_SleepingBag_C::ArrowActor' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, Cube) == 0x0002D0, "Member 'ABP_SleepingBag_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, CollectPoint) == 0x0002D8, "Member 'ABP_SleepingBag_C::CollectPoint' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, Sleeping_bag_inflate) == 0x0002E0, "Member 'ABP_SleepingBag_C::Sleeping_bag_inflate' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, ExitPoint) == 0x0002E8, "Member 'ABP_SleepingBag_C::ExitPoint' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, SleepPosition) == 0x0002F0, "Member 'ABP_SleepingBag_C::SleepPosition' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, Box) == 0x0002F8, "Member 'ABP_SleepingBag_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, Open) == 0x000300, "Member 'ABP_SleepingBag_C::Open' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, Close) == 0x000301, "Member 'ABP_SleepingBag_C::Close' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, User) == 0x000308, "Member 'ABP_SleepingBag_C::User' has a wrong offset!");
static_assert(offsetof(ABP_SleepingBag_C, OwnerUser) == 0x000310, "Member 'ABP_SleepingBag_C::OwnerUser' has a wrong offset!");

}

