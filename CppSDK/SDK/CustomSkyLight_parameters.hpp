#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomSkyLight

#include "Basic.hpp"

#include "MieStruct_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BackgroundCloudsCSLStruct_structs.hpp"
#include "FogCSLStruct_structs.hpp"
#include "SkyAtmosphereCSLStruct_structs.hpp"
#include "ArtDirectionStruct_structs.hpp"
#include "RayleighStruct_structs.hpp"
#include "DirectionalLightCSLStruct_structs.hpp"
#include "SettingCSLStruct_structs.hpp"
#include "DayCycleState_structs.hpp"
#include "SunPosition_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function CustomSkyLight.CustomSkyLight_C.AzimuthCalc
// 0x00C0 (0x00C0 - 0x0000)
struct CustomSkyLight_C_AzimuthCalc final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_1;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_2;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetHMSFromSolarTime_Hour;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHMSFromSolarTime_Minute;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHMSFromSolarTime_Second;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_3;                              // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_3;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_4;                           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_5;                           // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDST_IsDST;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSunPositionData                       CallFunc_GetSunPosition_SunPositionData;           // 0x0078(0x0028)(NoDestructor)
	float                                         CallFunc_GetSunPosition_Latitude_ImplicitCast;     // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSunPosition_TimeZone_ImplicitCast;     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSunPosition_Longitude_ImplicitCast;    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_CorrectedElevation_ImplicitCast; // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_Azimuth_ImplicitCast;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_AzimuthCalc) == 0x000008, "Wrong alignment on CustomSkyLight_C_AzimuthCalc");
static_assert(sizeof(CustomSkyLight_C_AzimuthCalc) == 0x0000C0, "Wrong size on CustomSkyLight_C_AzimuthCalc");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, DeltaTime) == 0x000000, "Member 'CustomSkyLight_C_AzimuthCalc::DeltaTime' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable) == 0x000008, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_1) == 0x000009, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_2) == 0x00000A, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_3) == 0x00000B, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_byte_Variable) == 0x00000C, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_4) == 0x00000D, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_byte_Variable_1) == 0x00000E, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_5) == 0x00000F, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_6) == 0x000010, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_7) == 0x000011, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_8) == 0x000012, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_bool_Variable_9) == 0x000013, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_byte_Variable_2) == 0x000014, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetHMSFromSolarTime_Hour) == 0x000018, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetHMSFromSolarTime_Hour' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetHMSFromSolarTime_Minute) == 0x00001C, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetHMSFromSolarTime_Minute' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetHMSFromSolarTime_Second) == 0x000020, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetHMSFromSolarTime_Second' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_Select_Default) == 0x000028, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000030, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_Select_Default_1) == 0x000031, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000032, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, Temp_byte_Variable_3) == 0x000033, "Member 'CustomSkyLight_C_AzimuthCalc::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_Select_Default_2) == 0x000038, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_Select_Default_3) == 0x000040, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_Select_Default_4) == 0x000048, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_Select_Default_5) == 0x000049, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_SelectFloat_ReturnValue) == 0x000050, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_SelectFloat_ReturnValue_1) == 0x000058, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_MapRangeClamped_ReturnValue) == 0x000068, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_IsDST_IsDST) == 0x000070, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_IsDST_IsDST' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetSunPosition_SunPositionData) == 0x000078, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetSunPosition_SunPositionData' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetSunPosition_Latitude_ImplicitCast) == 0x0000A0, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetSunPosition_Latitude_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetSunPosition_TimeZone_ImplicitCast) == 0x0000A4, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetSunPosition_TimeZone_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, CallFunc_GetSunPosition_Longitude_ImplicitCast) == 0x0000A8, "Member 'CustomSkyLight_C_AzimuthCalc::CallFunc_GetSunPosition_Longitude_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_VariableSet_CorrectedElevation_ImplicitCast) == 0x0000B0, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_VariableSet_CorrectedElevation_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_AzimuthCalc, K2Node_VariableSet_Azimuth_ImplicitCast) == 0x0000B8, "Member 'CustomSkyLight_C_AzimuthCalc::K2Node_VariableSet_Azimuth_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.BackCloudsSettingsTransition
// 0x04A0 (0x04A0 - 0x0000)
struct CustomSkyLight_C_BackCloudsSettingsTransition final
{
public:
	struct FSettingCSLStruct                      From;                                              // 0x0000(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      Transition;                                        // 0x0188(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      To;                                                // 0x0310(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_BackCloudsSettingsTransition) == 0x000008, "Wrong alignment on CustomSkyLight_C_BackCloudsSettingsTransition");
static_assert(sizeof(CustomSkyLight_C_BackCloudsSettingsTransition) == 0x0004A0, "Wrong size on CustomSkyLight_C_BackCloudsSettingsTransition");
static_assert(offsetof(CustomSkyLight_C_BackCloudsSettingsTransition, From) == 0x000000, "Member 'CustomSkyLight_C_BackCloudsSettingsTransition::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_BackCloudsSettingsTransition, Transition) == 0x000188, "Member 'CustomSkyLight_C_BackCloudsSettingsTransition::Transition' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_BackCloudsSettingsTransition, To) == 0x000310, "Member 'CustomSkyLight_C_BackCloudsSettingsTransition::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_BackCloudsSettingsTransition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000498, "Member 'CustomSkyLight_C_BackCloudsSettingsTransition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.CalculateAlpha
// 0x01B0 (0x01B0 - 0x0000)
struct CustomSkyLight_C_CalculateAlpha final
{
public:
	double                                        InterpTime;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_3;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_4;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_5;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_6;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable;                                // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F3[0x5];                                       // 0x00F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                K2Node_MakeArray_Array;                            // 0x00F8(0x0010)(ReferenceParm)
	double                                        K2Node_Select_Default;                             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeTime_ReturnValue;                // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_1;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeTime_ReturnValue_1;              // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_7;      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_4;                     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast_1; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast_1;     // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_RotAlpha_ImplicitCast;          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast_2;     // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_CalculateAlpha) == 0x000008, "Wrong alignment on CustomSkyLight_C_CalculateAlpha");
static_assert(sizeof(CustomSkyLight_C_CalculateAlpha) == 0x0001B0, "Wrong size on CustomSkyLight_C_CalculateAlpha");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, InterpTime) == 0x000000, "Member 'CustomSkyLight_C_CalculateAlpha::InterpTime' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_SelectFloat_ReturnValue_1) == 0x000038, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000058, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000068, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_3) == 0x000070, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_FClamp_ReturnValue) == 0x000078, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Abs_ReturnValue) == 0x000080, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_4) == 0x000088, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_FClamp_ReturnValue_1) == 0x000090, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_5) == 0x000098, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_FClamp_ReturnValue_2) == 0x0000A8, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_SelectFloat_ReturnValue_2) == 0x0000B0, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Abs_ReturnValue_1) == 0x0000B8, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_6) == 0x0000C0, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, Temp_real_Variable) == 0x0000C8, "Member 'CustomSkyLight_C_CalculateAlpha::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_FClamp_ReturnValue_3) == 0x0000D0, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000D8, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_SelectFloat_ReturnValue_3) == 0x0000E0, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, Temp_real_Variable_1) == 0x0000E8, "Member 'CustomSkyLight_C_CalculateAlpha::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x0000F0, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_BooleanOR_ReturnValue) == 0x0000F1, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, Temp_byte_Variable) == 0x0000F2, "Member 'CustomSkyLight_C_CalculateAlpha::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, K2Node_MakeArray_Array) == 0x0000F8, "Member 'CustomSkyLight_C_CalculateAlpha::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, K2Node_Select_Default) == 0x000108, "Member 'CustomSkyLight_C_CalculateAlpha::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_NormalizeTime_ReturnValue) == 0x000110, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_NormalizeTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000118, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Array_Get_Item) == 0x000120, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, Temp_byte_Variable_1) == 0x000128, "Member 'CustomSkyLight_C_CalculateAlpha::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_NormalizeTime_ReturnValue_1) == 0x000130, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_NormalizeTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Subtract_DoubleDouble_ReturnValue_7) == 0x000138, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Subtract_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, K2Node_Select_Default_1) == 0x000140, "Member 'CustomSkyLight_C_CalculateAlpha::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_FClamp_ReturnValue_4) == 0x000148, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_FClamp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000150, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000158, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000160, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000168, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000170, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000178, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000180, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast_1) == 0x000188, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Divide_DoubleDouble_A_ImplicitCast_1) == 0x000190, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Divide_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000198, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, K2Node_VariableSet_RotAlpha_ImplicitCast) == 0x0001A0, "Member 'CustomSkyLight_C_CalculateAlpha::K2Node_VariableSet_RotAlpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateAlpha, CallFunc_Divide_DoubleDouble_A_ImplicitCast_2) == 0x0001A8, "Member 'CustomSkyLight_C_CalculateAlpha::CallFunc_Divide_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.CalculateInsideSettings
// 0x0938 (0x0938 - 0x0000)
struct CustomSkyLight_C_CalculateInsideSettings final
{
public:
	EDayCycleState                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSettingCSLStruct                      K2Node_Select_Default;                             // 0x0008(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      K2Node_Select_Default_1;                           // 0x0190(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      K2Node_Select_Default_2;                           // 0x0318(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      CallFunc_OneSettingToAnother_Result;               // 0x04A0(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      CallFunc_OneSettingToAnother_Result_1;             // 0x0628(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      CallFunc_OneSettingToAnother_Result_2;             // 0x07B0(0x0188)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_CalculateInsideSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_CalculateInsideSettings");
static_assert(sizeof(CustomSkyLight_C_CalculateInsideSettings) == 0x000938, "Wrong size on CustomSkyLight_C_CalculateInsideSettings");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, Temp_byte_Variable) == 0x000000, "Member 'CustomSkyLight_C_CalculateInsideSettings::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, Temp_byte_Variable_1) == 0x000001, "Member 'CustomSkyLight_C_CalculateInsideSettings::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, Temp_byte_Variable_2) == 0x000002, "Member 'CustomSkyLight_C_CalculateInsideSettings::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000003, "Member 'CustomSkyLight_C_CalculateInsideSettings::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, K2Node_Select_Default) == 0x000008, "Member 'CustomSkyLight_C_CalculateInsideSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, K2Node_Select_Default_1) == 0x000190, "Member 'CustomSkyLight_C_CalculateInsideSettings::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, K2Node_Select_Default_2) == 0x000318, "Member 'CustomSkyLight_C_CalculateInsideSettings::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, CallFunc_OneSettingToAnother_Result) == 0x0004A0, "Member 'CustomSkyLight_C_CalculateInsideSettings::CallFunc_OneSettingToAnother_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, CallFunc_OneSettingToAnother_Result_1) == 0x000628, "Member 'CustomSkyLight_C_CalculateInsideSettings::CallFunc_OneSettingToAnother_Result_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CalculateInsideSettings, CallFunc_OneSettingToAnother_Result_2) == 0x0007B0, "Member 'CustomSkyLight_C_CalculateInsideSettings::CallFunc_OneSettingToAnother_Result_2' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.ChangeDayCycleState
// 0x0038 (0x0038 - 0x0000)
struct CustomSkyLight_C_ChangeDayCycleState final
{
public:
	EDayCycleState                                NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGS_TDB_C*                              K2Node_DynamicCast_AsGS_TDB;                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_ChangeDayCycleState) == 0x000008, "Wrong alignment on CustomSkyLight_C_ChangeDayCycleState");
static_assert(sizeof(CustomSkyLight_C_ChangeDayCycleState) == 0x000038, "Wrong size on CustomSkyLight_C_ChangeDayCycleState");
static_assert(offsetof(CustomSkyLight_C_ChangeDayCycleState, NewState) == 0x000000, "Member 'CustomSkyLight_C_ChangeDayCycleState::NewState' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ChangeDayCycleState, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_ChangeDayCycleState::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ChangeDayCycleState, CallFunc_GetGameState_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_ChangeDayCycleState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ChangeDayCycleState, K2Node_DynamicCast_AsGS_TDB) == 0x000028, "Member 'CustomSkyLight_C_ChangeDayCycleState::K2Node_DynamicCast_AsGS_TDB' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ChangeDayCycleState, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'CustomSkyLight_C_ChangeDayCycleState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ChangeDayCycleState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000031, "Member 'CustomSkyLight_C_ChangeDayCycleState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.CheckDayTime
// 0x0068 (0x0068 - 0x0000)
struct CustomSkyLight_C_CheckDayTime final
{
public:
	EDayCycleState                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentSolarTime_Result;               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCurrentSolarTime_Result_1;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_3;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable_4;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                K2Node_Select_Default;                             // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item_2;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_CheckDayTime) == 0x000008, "Wrong alignment on CustomSkyLight_C_CheckDayTime");
static_assert(sizeof(CustomSkyLight_C_CheckDayTime) == 0x000068, "Wrong size on CustomSkyLight_C_CheckDayTime");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, Temp_byte_Variable) == 0x000000, "Member 'CustomSkyLight_C_CheckDayTime::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, Temp_byte_Variable_1) == 0x000001, "Member 'CustomSkyLight_C_CheckDayTime::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, Temp_byte_Variable_2) == 0x000002, "Member 'CustomSkyLight_C_CheckDayTime::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_GetCurrentSolarTime_Result) == 0x000008, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_GetCurrentSolarTime_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_FTrunc_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_Divide_IntInt_ReturnValue) == 0x000014, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_GetCurrentSolarTime_Result_1) == 0x000018, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_GetCurrentSolarTime_Result_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, Temp_byte_Variable_3) == 0x000020, "Member 'CustomSkyLight_C_CheckDayTime::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_Array_Get_Item) == 0x000028, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, Temp_byte_Variable_4) == 0x000030, "Member 'CustomSkyLight_C_CheckDayTime::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000031, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, Temp_int_Variable) == 0x000034, "Member 'CustomSkyLight_C_CheckDayTime::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, K2Node_Select_Default) == 0x000041, "Member 'CustomSkyLight_C_CheckDayTime::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_Array_Get_Item_2) == 0x000048, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_Array_Get_Item_3) == 0x000058, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckDayTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x000060, "Member 'CustomSkyLight_C_CheckDayTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.CheckVolumetricScattering
// 0x0028 (0x0028 - 0x0000)
struct CustomSkyLight_C_CheckVolumetricScattering final
{
public:
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue_1;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EqualEqual_DoubleDouble_B_ImplicitCast;   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_CheckVolumetricScattering) == 0x000008, "Wrong alignment on CustomSkyLight_C_CheckVolumetricScattering");
static_assert(sizeof(CustomSkyLight_C_CheckVolumetricScattering) == 0x000028, "Wrong size on CustomSkyLight_C_CheckVolumetricScattering");
static_assert(offsetof(CustomSkyLight_C_CheckVolumetricScattering, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000000, "Member 'CustomSkyLight_C_CheckVolumetricScattering::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckVolumetricScattering, CallFunc_EqualEqual_DoubleDouble_ReturnValue_1) == 0x000001, "Member 'CustomSkyLight_C_CheckVolumetricScattering::CallFunc_EqualEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckVolumetricScattering, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000008, "Member 'CustomSkyLight_C_CheckVolumetricScattering::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckVolumetricScattering, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1) == 0x000010, "Member 'CustomSkyLight_C_CheckVolumetricScattering::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckVolumetricScattering, CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast) == 0x000018, "Member 'CustomSkyLight_C_CheckVolumetricScattering::CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_CheckVolumetricScattering, CallFunc_EqualEqual_DoubleDouble_B_ImplicitCast) == 0x000020, "Member 'CustomSkyLight_C_CheckVolumetricScattering::CallFunc_EqualEqual_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.DayCycle
// 0x0004 (0x0004 - 0x0000)
struct CustomSkyLight_C_DayCycle final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_DayCycle) == 0x000001, "Wrong alignment on CustomSkyLight_C_DayCycle");
static_assert(sizeof(CustomSkyLight_C_DayCycle) == 0x000004, "Wrong size on CustomSkyLight_C_DayCycle");
static_assert(offsetof(CustomSkyLight_C_DayCycle, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'CustomSkyLight_C_DayCycle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DayCycle, K2Node_SwitchEnum_CmpSuccess_1) == 0x000001, "Member 'CustomSkyLight_C_DayCycle::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DayCycle, K2Node_SwitchEnum_CmpSuccess_2) == 0x000002, "Member 'CustomSkyLight_C_DayCycle::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DayCycle, K2Node_SwitchEnum_CmpSuccess_3) == 0x000003, "Member 'CustomSkyLight_C_DayCycle::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.DenormalizeTime
// 0x0048 (0x0048 - 0x0000)
struct CustomSkyLight_C_DenormalizeTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_DenormalizeTime) == 0x000008, "Wrong alignment on CustomSkyLight_C_DenormalizeTime");
static_assert(sizeof(CustomSkyLight_C_DenormalizeTime) == 0x000048, "Wrong size on CustomSkyLight_C_DenormalizeTime");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, Time) == 0x000000, "Member 'CustomSkyLight_C_DenormalizeTime::Time' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_DenormalizeTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000030, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000038, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_DenormalizeTime, CallFunc_SelectFloat_ReturnValue_1) == 0x000040, "Member 'CustomSkyLight_C_DenormalizeTime::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.EditorSettings
// 0x0002 (0x0002 - 0x0000)
struct CustomSkyLight_C_EditorSettings final
{
public:
	bool                                          Editor_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewHidden;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_EditorSettings) == 0x000001, "Wrong alignment on CustomSkyLight_C_EditorSettings");
static_assert(sizeof(CustomSkyLight_C_EditorSettings) == 0x000002, "Wrong size on CustomSkyLight_C_EditorSettings");
static_assert(offsetof(CustomSkyLight_C_EditorSettings, Editor_) == 0x000000, "Member 'CustomSkyLight_C_EditorSettings::Editor_' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_EditorSettings, NewHidden) == 0x000001, "Member 'CustomSkyLight_C_EditorSettings::NewHidden' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.ExecuteUbergraph_CustomSkyLight
// 0x02E8 (0x02E8 - 0x0000)
struct CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Server;                         // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_V2_C*                   K2Node_DynamicCast_AsSurvival_Player_V2;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeTime_ReturnValue;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeTime_ReturnValue_1;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_6;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable;                                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item_1;                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_2;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_7;           // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalController_ReturnValue;            // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0163(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGS_TDB_C*                              K2Node_DynamicCast_AsGS_TDB;                       // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_8;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_9;           // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x01D8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_AzimuthCalc_DeltaTime_ImplicitCast;       // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight) == 0x000008, "Wrong alignment on CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight");
static_assert(sizeof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight) == 0x0002E8, "Wrong size on CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, EntryPoint) == 0x000000, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_HasAuthority_ReturnValue) == 0x000005, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_HasAuthority_ReturnValue_1) == 0x000006, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_SwitchEnum_CmpSuccess) == 0x00000C, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, Temp_bool_Has_Been_Initd_Variable_1) == 0x00000D, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_CustomEvent_Server) == 0x00000E, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_CustomEvent_Server' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_K2_GetPawn_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_DynamicCast_AsSurvival_Player_V2) == 0x000020, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_DynamicCast_AsSurvival_Player_V2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, Temp_bool_IsClosed_Variable) == 0x00002A, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000058, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000060, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x000068, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000070, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_NormalizeTime_ReturnValue) == 0x000080, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_NormalizeTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_SelectInt_ReturnValue) == 0x000088, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_NormalizeTime_ReturnValue_1) == 0x000090, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_NormalizeTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_6) == 0x0000A8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_SelectFloat_ReturnValue) == 0x0000B0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_SelectFloat_ReturnValue_1) == 0x0000B8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000C8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000D8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Array_Get_Item) == 0x0000E0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_MapRangeClamped_ReturnValue) == 0x0000E8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, Temp_byte_Variable) == 0x0000F0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Array_Get_Item_1) == 0x0000F8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_Select_Default) == 0x000100, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000108, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000110, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Array_Get_Item_2) == 0x000118, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000120, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000128, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_7) == 0x000130, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Array_Get_Item_3) == 0x000138, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000140, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000148, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_GetPlayerController_ReturnValue_1) == 0x000150, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_SelectFloat_ReturnValue_2) == 0x000158, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_IsValid_ReturnValue_1) == 0x000160, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_IsLocalController_ReturnValue) == 0x000161, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_IsLocalController_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, Temp_bool_IsClosed_Variable_1) == 0x000162, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_HasAuthority_ReturnValue_2) == 0x000163, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_GetGameState_ReturnValue) == 0x000168, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_DynamicCast_AsGS_TDB) == 0x000170, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_DynamicCast_AsGS_TDB' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, K2Node_DynamicCast_bSuccess_1) == 0x000178, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_8) == 0x000180, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000188, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_BooleanOR_ReturnValue) == 0x000189, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000190, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Add_DoubleDouble_ReturnValue_9) == 0x0001A8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Add_DoubleDouble_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_HasAuthority_ReturnValue_3) == 0x0001B0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_FClamp_ReturnValue) == 0x0001B8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_MakeRotator_ReturnValue) == 0x0001C0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0001D8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x0002C0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0002C8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x0002D0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x0002D4, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_AzimuthCalc_DeltaTime_ImplicitCast) == 0x0002D8, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_AzimuthCalc_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0002E0, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0002E4, "Member 'CustomSkyLight_C_ExecuteUbergraph_CustomSkyLight::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.FogSettingsTransition
// 0x04A0 (0x04A0 - 0x0000)
struct CustomSkyLight_C_FogSettingsTransition final
{
public:
	struct FSettingCSLStruct                      From;                                              // 0x0000(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      Transition;                                        // 0x0188(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      To;                                                // 0x0310(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_FogSettingsTransition) == 0x000008, "Wrong alignment on CustomSkyLight_C_FogSettingsTransition");
static_assert(sizeof(CustomSkyLight_C_FogSettingsTransition) == 0x0004A0, "Wrong size on CustomSkyLight_C_FogSettingsTransition");
static_assert(offsetof(CustomSkyLight_C_FogSettingsTransition, From) == 0x000000, "Member 'CustomSkyLight_C_FogSettingsTransition::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_FogSettingsTransition, Transition) == 0x000188, "Member 'CustomSkyLight_C_FogSettingsTransition::Transition' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_FogSettingsTransition, To) == 0x000310, "Member 'CustomSkyLight_C_FogSettingsTransition::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_FogSettingsTransition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000498, "Member 'CustomSkyLight_C_FogSettingsTransition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.GetCurrentSolarTime
// 0x0010 (0x0010 - 0x0000)
struct CustomSkyLight_C_GetCurrentSolarTime final
{
public:
	double                                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_GetCurrentSolarTime) == 0x000008, "Wrong alignment on CustomSkyLight_C_GetCurrentSolarTime");
static_assert(sizeof(CustomSkyLight_C_GetCurrentSolarTime) == 0x000010, "Wrong size on CustomSkyLight_C_GetCurrentSolarTime");
static_assert(offsetof(CustomSkyLight_C_GetCurrentSolarTime, Result) == 0x000000, "Member 'CustomSkyLight_C_GetCurrentSolarTime::Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetCurrentSolarTime, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_GetCurrentSolarTime::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.GetHMSFromSolarTime
// 0x0078 (0x0078 - 0x0000)
struct CustomSkyLight_C_GetHMSFromSolarTime final
{
public:
	double                                        Param_SolarTime;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hour;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Minute;                                            // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_Second;                                      // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_2;             // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_GetHMSFromSolarTime) == 0x000008, "Wrong alignment on CustomSkyLight_C_GetHMSFromSolarTime");
static_assert(sizeof(CustomSkyLight_C_GetHMSFromSolarTime) == 0x000078, "Wrong size on CustomSkyLight_C_GetHMSFromSolarTime");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, Param_SolarTime) == 0x000000, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::Param_SolarTime' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, Hour) == 0x000008, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::Hour' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, Minute) == 0x00000C, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::Minute' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, Param_Second) == 0x000010, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::Param_Second' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_FTrunc_ReturnValue) == 0x000014, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Percent_IntInt_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000028, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000040, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_FTrunc_ReturnValue_1) == 0x000048, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Percent_IntInt_ReturnValue_1) == 0x00004C, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000050, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x000068, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_FTrunc_ReturnValue_2) == 0x000070, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetHMSFromSolarTime, CallFunc_Percent_IntInt_ReturnValue_2) == 0x000074, "Member 'CustomSkyLight_C_GetHMSFromSolarTime::CallFunc_Percent_IntInt_ReturnValue_2' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.GetTimeInterp
// 0x0058 (0x0058 - 0x0000)
struct CustomSkyLight_C_GetTimeInterp final
{
public:
	double                                        MaxAlpha;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDayCycleState                                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_2;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_GetTimeInterp) == 0x000008, "Wrong alignment on CustomSkyLight_C_GetTimeInterp");
static_assert(sizeof(CustomSkyLight_C_GetTimeInterp) == 0x000058, "Wrong size on CustomSkyLight_C_GetTimeInterp");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, MaxAlpha) == 0x000000, "Member 'CustomSkyLight_C_GetTimeInterp::MaxAlpha' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, Temp_byte_Variable) == 0x000008, "Member 'CustomSkyLight_C_GetTimeInterp::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Array_Get_Item) == 0x000010, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Array_Get_Item_2) == 0x000028, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Array_Get_Item_3) == 0x000038, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'CustomSkyLight_C_GetTimeInterp::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_GetTimeInterp, K2Node_Select_Default) == 0x000050, "Member 'CustomSkyLight_C_GetTimeInterp::K2Node_Select_Default' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.GSTimeTick
// 0x0001 (0x0001 - 0x0000)
struct CustomSkyLight_C_GSTimeTick final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_GSTimeTick) == 0x000001, "Wrong alignment on CustomSkyLight_C_GSTimeTick");
static_assert(sizeof(CustomSkyLight_C_GSTimeTick) == 0x000001, "Wrong size on CustomSkyLight_C_GSTimeTick");
static_assert(offsetof(CustomSkyLight_C_GSTimeTick, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'CustomSkyLight_C_GSTimeTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.IsDST
// 0x0058 (0x0058 - 0x0000)
struct CustomSkyLight_C_IsDST final
{
public:
	bool                                          DSTEnable;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param_DSTStartMonth;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_DSTStartDay;                                 // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_DSTEndMonth;                                 // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_DSTEndDay;                                   // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_DSTSwitchHour;                               // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsDST;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentSolarTime_Result;               // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHMSFromSolarTime_Hour;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHMSFromSolarTime_Minute;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetHMSFromSolarTime_Second;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue_1;               // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue_2;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DateTimeDateTime_ReturnValue;   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DateTimeDateTime_ReturnValue; // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_IsDST) == 0x000008, "Wrong alignment on CustomSkyLight_C_IsDST");
static_assert(sizeof(CustomSkyLight_C_IsDST) == 0x000058, "Wrong size on CustomSkyLight_C_IsDST");
static_assert(offsetof(CustomSkyLight_C_IsDST, DSTEnable) == 0x000000, "Member 'CustomSkyLight_C_IsDST::DSTEnable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, Param_DSTStartMonth) == 0x000004, "Member 'CustomSkyLight_C_IsDST::Param_DSTStartMonth' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, Param_DSTStartDay) == 0x000008, "Member 'CustomSkyLight_C_IsDST::Param_DSTStartDay' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, Param_DSTEndMonth) == 0x00000C, "Member 'CustomSkyLight_C_IsDST::Param_DSTEndMonth' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, Param_DSTEndDay) == 0x000010, "Member 'CustomSkyLight_C_IsDST::Param_DSTEndDay' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, Param_DSTSwitchHour) == 0x000014, "Member 'CustomSkyLight_C_IsDST::Param_DSTSwitchHour' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, Param_IsDST) == 0x000018, "Member 'CustomSkyLight_C_IsDST::Param_IsDST' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_GetCurrentSolarTime_Result) == 0x000020, "Member 'CustomSkyLight_C_IsDST::CallFunc_GetCurrentSolarTime_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_GetHMSFromSolarTime_Hour) == 0x000028, "Member 'CustomSkyLight_C_IsDST::CallFunc_GetHMSFromSolarTime_Hour' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_GetHMSFromSolarTime_Minute) == 0x00002C, "Member 'CustomSkyLight_C_IsDST::CallFunc_GetHMSFromSolarTime_Minute' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_GetHMSFromSolarTime_Second) == 0x000030, "Member 'CustomSkyLight_C_IsDST::CallFunc_GetHMSFromSolarTime_Second' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_MakeDateTime_ReturnValue) == 0x000038, "Member 'CustomSkyLight_C_IsDST::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_MakeDateTime_ReturnValue_1) == 0x000040, "Member 'CustomSkyLight_C_IsDST::CallFunc_MakeDateTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_MakeDateTime_ReturnValue_2) == 0x000048, "Member 'CustomSkyLight_C_IsDST::CallFunc_MakeDateTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_LessEqual_DateTimeDateTime_ReturnValue) == 0x000050, "Member 'CustomSkyLight_C_IsDST::CallFunc_LessEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_GreaterEqual_DateTimeDateTime_ReturnValue) == 0x000051, "Member 'CustomSkyLight_C_IsDST::CallFunc_GreaterEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_BooleanAND_ReturnValue) == 0x000052, "Member 'CustomSkyLight_C_IsDST::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_IsDST, CallFunc_BooleanAND_ReturnValue_1) == 0x000053, "Member 'CustomSkyLight_C_IsDST::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.LerpBackgroundClouds
// 0x01A0 (0x01A0 - 0x0000)
struct CustomSkyLight_C_LerpBackgroundClouds final
{
public:
	struct FBackgroundCloudsCSLStruct             From;                                              // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             To;                                                // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Alpha;                                       // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             Result;                                            // 0x00A8(0x0050)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             K2Node_MakeStruct_BackgroundCloudsCSLStruct;       // 0x0148(0x0050)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_LerpBackgroundClouds) == 0x000008, "Wrong alignment on CustomSkyLight_C_LerpBackgroundClouds");
static_assert(sizeof(CustomSkyLight_C_LerpBackgroundClouds) == 0x0001A0, "Wrong size on CustomSkyLight_C_LerpBackgroundClouds");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, From) == 0x000000, "Member 'CustomSkyLight_C_LerpBackgroundClouds::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, To) == 0x000050, "Member 'CustomSkyLight_C_LerpBackgroundClouds::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, Param_Alpha) == 0x0000A0, "Member 'CustomSkyLight_C_LerpBackgroundClouds::Param_Alpha' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, Result) == 0x0000A8, "Member 'CustomSkyLight_C_LerpBackgroundClouds::Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_Lerp_ReturnValue) == 0x0000F8, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_Lerp_ReturnValue_1) == 0x000100, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_LinearColorLerp_ReturnValue) == 0x000108, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_Lerp_ReturnValue_2) == 0x000118, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_Lerp_ReturnValue_3) == 0x000120, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_Lerp_ReturnValue_4) == 0x000128, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_Lerp_ReturnValue_5) == 0x000130, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_LinearColorLerp_ReturnValue_1) == 0x000138, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, K2Node_MakeStruct_BackgroundCloudsCSLStruct) == 0x000148, "Member 'CustomSkyLight_C_LerpBackgroundClouds::K2Node_MakeStruct_BackgroundCloudsCSLStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000198, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpBackgroundClouds, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x00019C, "Member 'CustomSkyLight_C_LerpBackgroundClouds::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.LerpDirectionalLightSettings
// 0x0158 (0x0158 - 0x0000)
struct CustomSkyLight_C_LerpDirectionalLightSettings final
{
public:
	struct FDirectionalLightCSLStruct             From;                                              // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDirectionalLightCSLStruct             To;                                                // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Alpha;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDirectionalLightCSLStruct             Result;                                            // 0x0078(0x0038)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDirectionalLightCSLStruct             K2Node_MakeStruct_DirectionalLightCSLStruct;       // 0x0118(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_LerpDirectionalLightSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_LerpDirectionalLightSettings");
static_assert(sizeof(CustomSkyLight_C_LerpDirectionalLightSettings) == 0x000158, "Wrong size on CustomSkyLight_C_LerpDirectionalLightSettings");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, From) == 0x000000, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, To) == 0x000038, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, Param_Alpha) == 0x000070, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::Param_Alpha' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, Result) == 0x000078, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x0000B0, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Lerp_ReturnValue) == 0x0000C0, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x0000C8, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Lerp_ReturnValue_1) == 0x0000D8, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x0000E0, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Lerp_ReturnValue_2) == 0x0000F0, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x0000F8, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Lerp_ReturnValue_3) == 0x000100, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Lerp_ReturnValue_4) == 0x000108, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_Lerp_ReturnValue_5) == 0x000110, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, K2Node_MakeStruct_DirectionalLightCSLStruct) == 0x000118, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::K2Node_MakeStruct_DirectionalLightCSLStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpDirectionalLightSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000150, "Member 'CustomSkyLight_C_LerpDirectionalLightSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.LerpFogSettings
// 0x0150 (0x0150 - 0x0000)
struct CustomSkyLight_C_LerpFogSettings final
{
public:
	struct FFogCSLStruct                          From;                                              // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          To;                                                // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Alpha;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          Result;                                            // 0x0078(0x0038)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          K2Node_MakeStruct_FogCSLStruct;                    // 0x0110(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_LerpFogSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_LerpFogSettings");
static_assert(sizeof(CustomSkyLight_C_LerpFogSettings) == 0x000150, "Wrong size on CustomSkyLight_C_LerpFogSettings");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, From) == 0x000000, "Member 'CustomSkyLight_C_LerpFogSettings::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, To) == 0x000038, "Member 'CustomSkyLight_C_LerpFogSettings::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, Param_Alpha) == 0x000070, "Member 'CustomSkyLight_C_LerpFogSettings::Param_Alpha' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, Result) == 0x000078, "Member 'CustomSkyLight_C_LerpFogSettings::Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x0000B0, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x0000C0, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x0000D0, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000E0, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_Lerp_ReturnValue) == 0x0000F0, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x0000F8, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_Lerp_ReturnValue_1) == 0x000100, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_Lerp_ReturnValue_2) == 0x000108, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, K2Node_MakeStruct_FogCSLStruct) == 0x000110, "Member 'CustomSkyLight_C_LerpFogSettings::K2Node_MakeStruct_FogCSLStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000148, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpFogSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x00014C, "Member 'CustomSkyLight_C_LerpFogSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.LerpSkyAtmosphereSettings
// 0x0318 (0x0318 - 0x0000)
struct CustomSkyLight_C_LerpSkyAtmosphereSettings final
{
public:
	struct FSkyAtmosphereCSLStruct                From;                                              // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                To;                                                // 0x0080(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_Alpha;                                       // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                Result;                                            // 0x0108(0x0080)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FArtDirectionStruct                    K2Node_MakeStruct_ArtDirectionStruct;              // 0x01A8(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRayleighStruct                        K2Node_MakeStruct_RayleighStruct;                  // 0x01F8(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x0230(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_7;                       // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMieStruct                             K2Node_MakeStruct_MieStruct;                       // 0x0248(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                K2Node_MakeStruct_SkyAtmosphereCSLStruct;          // 0x0288(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_2;     // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_3;     // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_LerpSkyAtmosphereSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_LerpSkyAtmosphereSettings");
static_assert(sizeof(CustomSkyLight_C_LerpSkyAtmosphereSettings) == 0x000318, "Wrong size on CustomSkyLight_C_LerpSkyAtmosphereSettings");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, From) == 0x000000, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, To) == 0x000080, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, Param_Alpha) == 0x000100, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::Param_Alpha' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, Result) == 0x000108, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue) == 0x000188, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_1) == 0x000190, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x000198, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, K2Node_MakeStruct_ArtDirectionStruct) == 0x0001A8, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::K2Node_MakeStruct_ArtDirectionStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_2) == 0x0001C8, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_3) == 0x0001D0, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0001D8, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_4) == 0x0001E8, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_5) == 0x0001F0, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, K2Node_MakeStruct_RayleighStruct) == 0x0001F8, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::K2Node_MakeStruct_RayleighStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_ReturnValue_2) == 0x000218, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_6) == 0x000228, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_ReturnValue_3) == 0x000230, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_Lerp_ReturnValue_7) == 0x000240, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, K2Node_MakeStruct_MieStruct) == 0x000248, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::K2Node_MakeStruct_MieStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, K2Node_MakeStruct_SkyAtmosphereCSLStruct) == 0x000288, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::K2Node_MakeStruct_SkyAtmosphereCSLStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000308, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x00030C, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_2) == 0x000310, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LerpSkyAtmosphereSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_3) == 0x000314, "Member 'CustomSkyLight_C_LerpSkyAtmosphereSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_3' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.LightSettingsTransition
// 0x04A0 (0x04A0 - 0x0000)
struct CustomSkyLight_C_LightSettingsTransition final
{
public:
	struct FSettingCSLStruct                      From;                                              // 0x0000(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      Transition;                                        // 0x0188(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      To;                                                // 0x0310(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_LightSettingsTransition) == 0x000008, "Wrong alignment on CustomSkyLight_C_LightSettingsTransition");
static_assert(sizeof(CustomSkyLight_C_LightSettingsTransition) == 0x0004A0, "Wrong size on CustomSkyLight_C_LightSettingsTransition");
static_assert(offsetof(CustomSkyLight_C_LightSettingsTransition, From) == 0x000000, "Member 'CustomSkyLight_C_LightSettingsTransition::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LightSettingsTransition, Transition) == 0x000188, "Member 'CustomSkyLight_C_LightSettingsTransition::Transition' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LightSettingsTransition, To) == 0x000310, "Member 'CustomSkyLight_C_LightSettingsTransition::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_LightSettingsTransition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000498, "Member 'CustomSkyLight_C_LightSettingsTransition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.NormalizeTime
// 0x0030 (0x0030 - 0x0000)
struct CustomSkyLight_C_NormalizeTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_NormalizeTime) == 0x000008, "Wrong alignment on CustomSkyLight_C_NormalizeTime");
static_assert(sizeof(CustomSkyLight_C_NormalizeTime) == 0x000030, "Wrong size on CustomSkyLight_C_NormalizeTime");
static_assert(offsetof(CustomSkyLight_C_NormalizeTime, Time) == 0x000000, "Member 'CustomSkyLight_C_NormalizeTime::Time' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_NormalizeTime, ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_NormalizeTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_NormalizeTime, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_NormalizeTime::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_NormalizeTime, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_NormalizeTime::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_NormalizeTime, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000020, "Member 'CustomSkyLight_C_NormalizeTime::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_NormalizeTime, CallFunc_SelectFloat_ReturnValue) == 0x000028, "Member 'CustomSkyLight_C_NormalizeTime::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.OneSettingToAnother
// 0x07A0 (0x07A0 - 0x0000)
struct CustomSkyLight_C_OneSettingToAnother final
{
public:
	struct FSettingCSLStruct                      From;                                              // 0x0000(0x0188)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      To;                                                // 0x0188(0x0188)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      Result;                                            // 0x0310(0x0188)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             CallFunc_LerpBackgroundClouds_Result;              // 0x04A0(0x0050)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          CallFunc_LerpFogSettings_Result;                   // 0x04F0(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                CallFunc_LerpSkyAtmosphereSettings_Result;         // 0x0528(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x05A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDirectionalLightCSLStruct             CallFunc_LerpDirectionalLightSettings_Result;      // 0x05C0(0x0038)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x0600(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      K2Node_MakeStruct_SettingCSLStruct;                // 0x0610(0x0188)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x079C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_OneSettingToAnother) == 0x000008, "Wrong alignment on CustomSkyLight_C_OneSettingToAnother");
static_assert(sizeof(CustomSkyLight_C_OneSettingToAnother) == 0x0007A0, "Wrong size on CustomSkyLight_C_OneSettingToAnother");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, From) == 0x000000, "Member 'CustomSkyLight_C_OneSettingToAnother::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, To) == 0x000188, "Member 'CustomSkyLight_C_OneSettingToAnother::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, Result) == 0x000310, "Member 'CustomSkyLight_C_OneSettingToAnother::Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_Lerp_ReturnValue) == 0x000498, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LerpBackgroundClouds_Result) == 0x0004A0, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LerpBackgroundClouds_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LerpFogSettings_Result) == 0x0004F0, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LerpFogSettings_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LerpSkyAtmosphereSettings_Result) == 0x000528, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LerpSkyAtmosphereSettings_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LinearColorLerp_ReturnValue) == 0x0005A8, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_Lerp_ReturnValue_1) == 0x0005B8, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LerpDirectionalLightSettings_Result) == 0x0005C0, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LerpDirectionalLightSettings_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_Lerp_ReturnValue_2) == 0x0005F8, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LinearColorLerp_ReturnValue_1) == 0x000600, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, K2Node_MakeStruct_SettingCSLStruct) == 0x000610, "Member 'CustomSkyLight_C_OneSettingToAnother::K2Node_MakeStruct_SettingCSLStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000798, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_OneSettingToAnother, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x00079C, "Member 'CustomSkyLight_C_OneSettingToAnother::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.PostProcessAndSkyLight
// 0x0001 (0x0001 - 0x0000)
struct CustomSkyLight_C_PostProcessAndSkyLight final
{
public:
	bool                                          ShouldBeVisible_;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_PostProcessAndSkyLight) == 0x000001, "Wrong alignment on CustomSkyLight_C_PostProcessAndSkyLight");
static_assert(sizeof(CustomSkyLight_C_PostProcessAndSkyLight) == 0x000001, "Wrong size on CustomSkyLight_C_PostProcessAndSkyLight");
static_assert(offsetof(CustomSkyLight_C_PostProcessAndSkyLight, ShouldBeVisible_) == 0x000000, "Member 'CustomSkyLight_C_PostProcessAndSkyLight::ShouldBeVisible_' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct CustomSkyLight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_ReceiveTick) == 0x000004, "Wrong alignment on CustomSkyLight_C_ReceiveTick");
static_assert(sizeof(CustomSkyLight_C_ReceiveTick) == 0x000004, "Wrong size on CustomSkyLight_C_ReceiveTick");
static_assert(offsetof(CustomSkyLight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'CustomSkyLight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SetBackCloudsSettings
// 0x0168 (0x0168 - 0x0000)
struct CustomSkyLight_C_SetBackCloudsSettings final
{
public:
	struct FBackgroundCloudsCSLStruct             TargetFogSettings;                                 // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             PrevFogSettings;                                   // 0x0050(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_7;                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_8;                       // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_9;                       // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_10;                      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_11;                      // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_2;     // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_3;     // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_3; // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_4; // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_5; // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SetBackCloudsSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_SetBackCloudsSettings");
static_assert(sizeof(CustomSkyLight_C_SetBackCloudsSettings) == 0x000168, "Wrong size on CustomSkyLight_C_SetBackCloudsSettings");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, TargetFogSettings) == 0x000000, "Member 'CustomSkyLight_C_SetBackCloudsSettings::TargetFogSettings' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, PrevFogSettings) == 0x000050, "Member 'CustomSkyLight_C_SetBackCloudsSettings::PrevFogSettings' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue) == 0x0000A0, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_1) == 0x0000A8, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_2) == 0x0000B0, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_3) == 0x0000B8, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x0000C0, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000D0, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_ReturnValue_2) == 0x0000E0, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_ReturnValue_3) == 0x0000F0, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_4) == 0x000100, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_5) == 0x000108, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_6) == 0x000110, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_7) == 0x000118, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_8) == 0x000120, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_9) == 0x000128, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_10) == 0x000130, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_Lerp_ReturnValue_11) == 0x000138, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_Lerp_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000140, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x000144, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000148, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00014C, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_2) == 0x000150, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_3) == 0x000154, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x000158, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_SetScalarParameterValue_Value_ImplicitCast_3) == 0x00015C, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_SetScalarParameterValue_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_SetScalarParameterValue_Value_ImplicitCast_4) == 0x000160, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_SetScalarParameterValue_Value_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetBackCloudsSettings, CallFunc_SetScalarParameterValue_Value_ImplicitCast_5) == 0x000164, "Member 'CustomSkyLight_C_SetBackCloudsSettings::CallFunc_SetScalarParameterValue_Value_ImplicitCast_5' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SetCubemapWithInterpolation
// 0x0038 (0x0038 - 0x0000)
struct CustomSkyLight_C_SetCubemapWithInterpolation final
{
public:
	class UTextureCube*                           DestinationCubemap;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCubemapBlend_InBlendFraction_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SetCubemapWithInterpolation) == 0x000008, "Wrong alignment on CustomSkyLight_C_SetCubemapWithInterpolation");
static_assert(sizeof(CustomSkyLight_C_SetCubemapWithInterpolation) == 0x000038, "Wrong size on CustomSkyLight_C_SetCubemapWithInterpolation");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, DestinationCubemap) == 0x000000, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::DestinationCubemap' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, Success) == 0x000008, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::Success' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000009, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00000A, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_BooleanOR_ReturnValue) == 0x000019, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_FInterpTo_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_EqualEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetCubemapWithInterpolation, CallFunc_SetCubemapBlend_InBlendFraction_ImplicitCast) == 0x000030, "Member 'CustomSkyLight_C_SetCubemapWithInterpolation::CallFunc_SetCubemapBlend_InBlendFraction_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SetFogSettings
// 0x0140 (0x0140 - 0x0000)
struct CustomSkyLight_C_SetFogSettings final
{
public:
	struct FFogCSLStruct                          TargetFogSettings;                                 // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          PrevFogSettings;                                   // 0x0038(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_2;    // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricFogExtinctionScale_NewValue_ImplicitCast; // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_2;     // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_3;     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFogHeightFalloff_Value_ImplicitCast;   // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFogDensity_Value_ImplicitCast;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SetFogSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_SetFogSettings");
static_assert(sizeof(CustomSkyLight_C_SetFogSettings) == 0x000140, "Wrong size on CustomSkyLight_C_SetFogSettings");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, TargetFogSettings) == 0x000000, "Member 'CustomSkyLight_C_SetFogSettings::TargetFogSettings' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, PrevFogSettings) == 0x000038, "Member 'CustomSkyLight_C_SetFogSettings::PrevFogSettings' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000070, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x000080, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x000090, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_ReturnValue_1) == 0x0000A0, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Lerp_ReturnValue) == 0x0000B0, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Not_PreBool_ReturnValue) == 0x0000B8, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Lerp_ReturnValue_1) == 0x0000C0, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue_2) == 0x0000C8, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Lerp_ReturnValue_2) == 0x0000D8, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_ReturnValue_2) == 0x0000E0, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Lerp_ReturnValue_3) == 0x0000F0, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x0000F8, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_ReturnValue_3) == 0x0000FC, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Lerp_ReturnValue_4) == 0x000110, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_Lerp_ReturnValue_5) == 0x000118, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000120, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x000124, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_SetVolumetricFogExtinctionScale_NewValue_ImplicitCast) == 0x000128, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_SetVolumetricFogExtinctionScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_2) == 0x00012C, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_3) == 0x000130, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_SetFogHeightFalloff_Value_ImplicitCast) == 0x000134, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_SetFogHeightFalloff_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetFogSettings, CallFunc_SetFogDensity_Value_ImplicitCast) == 0x000138, "Member 'CustomSkyLight_C_SetFogSettings::CallFunc_SetFogDensity_Value_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SetQuickSettings
// 0x0680 (0x0680 - 0x0000)
struct CustomSkyLight_C_SetQuickSettings final
{
public:
	struct FSettingCSLStruct                      K2Node_MakeStruct_SettingCSLStruct;                // 0x0000(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      K2Node_MakeStruct_SettingCSLStruct_1;              // 0x0188(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      K2Node_MakeStruct_SettingCSLStruct_2;              // 0x0310(0x0188)(NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      K2Node_MakeStruct_SettingCSLStruct_3;              // 0x0498(0x0188)(NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast; // 0x0620(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast; // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast; // 0x0630(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_1; // 0x0638(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_1; // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_1; // 0x0648(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_2; // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_2; // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_2; // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_3; // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_3; // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_3; // 0x0678(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SetQuickSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_SetQuickSettings");
static_assert(sizeof(CustomSkyLight_C_SetQuickSettings) == 0x000680, "Wrong size on CustomSkyLight_C_SetQuickSettings");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SettingCSLStruct) == 0x000000, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SettingCSLStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SettingCSLStruct_1) == 0x000188, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SettingCSLStruct_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SettingCSLStruct_2) == 0x000310, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SettingCSLStruct_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SettingCSLStruct_3) == 0x000498, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SettingCSLStruct_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast) == 0x000620, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast) == 0x000628, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast) == 0x000630, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_1) == 0x000638, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_1) == 0x000640, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_1) == 0x000648, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_2) == 0x000650, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_2) == 0x000658, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_2) == 0x000660, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_3) == 0x000668, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_SkyLightIntensity_17_2FCDA98648616CE663391FAFD6963F3D_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_3) == 0x000670, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightTemperature_31_E12A5F494891B48E3A69E2B89AF72B5F_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetQuickSettings, K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_3) == 0x000678, "Member 'CustomSkyLight_C_SetQuickSettings::K2Node_MakeStruct_LightIntensity_2_B3A540B24050A516B3B6A09E4D2103AA_ImplicitCast_3' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SetSkyAtmosphere
// 0x0240 (0x0240 - 0x0000)
struct CustomSkyLight_C_SetSkyAtmosphere final
{
public:
	struct FSkyAtmosphereCSLStruct                SkyAtmosphereStruct;                               // 0x0000(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                PrevAtmosphere;                                    // 0x0080(0x0080)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_7;                       // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_4;            // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_5;            // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_8;                       // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_9;                       // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_10;                      // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_11;                      // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_6;            // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_7;            // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_12;                      // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_13;                      // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_14;                      // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_15;                      // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_2;     // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_3;     // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_4;     // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMieExponentialDistribution_NewValue_ImplicitCast; // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_5;     // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMieAnisotropy_NewValue_ImplicitCast;   // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_6;     // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMieAbsorptionScale_NewValue_ImplicitCast; // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMieScatteringScale_NewValue_ImplicitCast; // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_7;     // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRayleighExponentialDistribution_NewValue_ImplicitCast; // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRayleighScatteringScale_NewValue_ImplicitCast; // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAerialPespectiveViewDistanceScale_NewValue_ImplicitCast; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightFogContribution_NewValue_ImplicitCast; // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SetSkyAtmosphere) == 0x000008, "Wrong alignment on CustomSkyLight_C_SetSkyAtmosphere");
static_assert(sizeof(CustomSkyLight_C_SetSkyAtmosphere) == 0x000240, "Wrong size on CustomSkyLight_C_SetSkyAtmosphere");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, SkyAtmosphereStruct) == 0x000000, "Member 'CustomSkyLight_C_SetSkyAtmosphere::SkyAtmosphereStruct' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, PrevAtmosphere) == 0x000080, "Member 'CustomSkyLight_C_SetSkyAtmosphere::PrevAtmosphere' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue) == 0x000100, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_1) == 0x000108, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue) == 0x000110, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_1) == 0x000120, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_2) == 0x000130, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_3) == 0x000138, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_4) == 0x000140, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_5) == 0x000148, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_2) == 0x000150, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_3) == 0x000160, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_6) == 0x000170, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_7) == 0x000178, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_4) == 0x000180, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_5) == 0x000190, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_8) == 0x0001A0, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_9) == 0x0001A8, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_10) == 0x0001B0, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_11) == 0x0001B8, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_6) == 0x0001C0, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_ReturnValue_7) == 0x0001D0, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_12) == 0x0001E0, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_13) == 0x0001E8, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_14) == 0x0001F0, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_Lerp_ReturnValue_15) == 0x0001F8, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_Lerp_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000200, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x000204, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_2) == 0x000208, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_3) == 0x00020C, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_4) == 0x000210, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetMieExponentialDistribution_NewValue_ImplicitCast) == 0x000214, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetMieExponentialDistribution_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_5) == 0x000218, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetMieAnisotropy_NewValue_ImplicitCast) == 0x00021C, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetMieAnisotropy_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_6) == 0x000220, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetMieAbsorptionScale_NewValue_ImplicitCast) == 0x000224, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetMieAbsorptionScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetMieScatteringScale_NewValue_ImplicitCast) == 0x000228, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetMieScatteringScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_LinearColorLerp_Alpha_ImplicitCast_7) == 0x00022C, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_LinearColorLerp_Alpha_ImplicitCast_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetRayleighExponentialDistribution_NewValue_ImplicitCast) == 0x000230, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetRayleighExponentialDistribution_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetRayleighScatteringScale_NewValue_ImplicitCast) == 0x000234, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetRayleighScatteringScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetAerialPespectiveViewDistanceScale_NewValue_ImplicitCast) == 0x000238, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetAerialPespectiveViewDistanceScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyAtmosphere, CallFunc_SetHeightFogContribution_NewValue_ImplicitCast) == 0x00023C, "Member 'CustomSkyLight_C_SetSkyAtmosphere::CallFunc_SetHeightFogContribution_NewValue_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SetSkyLightSettings
// 0x0090 (0x0090 - 0x0000)
struct CustomSkyLight_C_SetSkyLightSettings final
{
public:
	double                                        TargetIntensity;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetLightColor;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrevIntensity;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PrevLightColor;                                    // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           SourceCubemap;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           DestinationCubemap;                                // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetCubemapWithInterpolation_Success;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           K2Node_Select_Default;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SetSkyLightSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_SetSkyLightSettings");
static_assert(sizeof(CustomSkyLight_C_SetSkyLightSettings) == 0x000090, "Wrong size on CustomSkyLight_C_SetSkyLightSettings");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, TargetIntensity) == 0x000000, "Member 'CustomSkyLight_C_SetSkyLightSettings::TargetIntensity' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, TargetLightColor) == 0x000008, "Member 'CustomSkyLight_C_SetSkyLightSettings::TargetLightColor' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, PrevIntensity) == 0x000018, "Member 'CustomSkyLight_C_SetSkyLightSettings::PrevIntensity' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, PrevLightColor) == 0x000020, "Member 'CustomSkyLight_C_SetSkyLightSettings::PrevLightColor' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, SourceCubemap) == 0x000030, "Member 'CustomSkyLight_C_SetSkyLightSettings::SourceCubemap' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, DestinationCubemap) == 0x000038, "Member 'CustomSkyLight_C_SetSkyLightSettings::DestinationCubemap' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_SetCubemapWithInterpolation_Success) == 0x000040, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_SetCubemapWithInterpolation_Success' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, Temp_bool_Variable) == 0x000041, "Member 'CustomSkyLight_C_SetSkyLightSettings::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_Lerp_ReturnValue) == 0x000048, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_Lerp_ReturnValue_1) == 0x000050, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, K2Node_Select_Default) == 0x000058, "Member 'CustomSkyLight_C_SetSkyLightSettings::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000060, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x000064, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_LinearColorLerp_ReturnValue_1) == 0x000074, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000084, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x000088, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SetSkyLightSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x00008C, "Member 'CustomSkyLight_C_SetSkyLightSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.Sky Set Up
// 0x00B0 (0x00B0 - 0x0000)
struct CustomSkyLight_C_Sky_Set_Up final
{
public:
	bool                                          IsNight;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_3;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_4;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_3; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLightSourceAngle_NewValue_ImplicitCast; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_Sky_Set_Up) == 0x000008, "Wrong alignment on CustomSkyLight_C_Sky_Set_Up");
static_assert(sizeof(CustomSkyLight_C_Sky_Set_Up) == 0x0000B0, "Wrong size on CustomSkyLight_C_Sky_Set_Up");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, IsNight) == 0x000000, "Member 'CustomSkyLight_C_Sky_Set_Up::IsNight' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Abs_ReturnValue_1) == 0x000018, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000030, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Abs_ReturnValue_2) == 0x000038, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Abs_ReturnValue_3) == 0x000040, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000048, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000050, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Abs_ReturnValue_4) == 0x000058, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000060, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000068, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SelectFloat_ReturnValue) == 0x000070, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SelectFloat_ReturnValue_1) == 0x000078, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000080, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000088, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000090, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000098, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00009C, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x0000A0, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SetScalarParameterValue_Value_ImplicitCast_3) == 0x0000A4, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SetScalarParameterValue_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_Sky_Set_Up, CallFunc_SetLightSourceAngle_NewValue_ImplicitCast) == 0x0000A8, "Member 'CustomSkyLight_C_Sky_Set_Up::CallFunc_SetLightSourceAngle_NewValue_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SkySettingsTransition
// 0x04A0 (0x04A0 - 0x0000)
struct CustomSkyLight_C_SkySettingsTransition final
{
public:
	struct FSettingCSLStruct                      From;                                              // 0x0000(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      Transition;                                        // 0x0188(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      To;                                                // 0x0310(0x0188)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SkySettingsTransition) == 0x000008, "Wrong alignment on CustomSkyLight_C_SkySettingsTransition");
static_assert(sizeof(CustomSkyLight_C_SkySettingsTransition) == 0x0004A0, "Wrong size on CustomSkyLight_C_SkySettingsTransition");
static_assert(offsetof(CustomSkyLight_C_SkySettingsTransition, From) == 0x000000, "Member 'CustomSkyLight_C_SkySettingsTransition::From' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SkySettingsTransition, Transition) == 0x000188, "Member 'CustomSkyLight_C_SkySettingsTransition::Transition' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SkySettingsTransition, To) == 0x000310, "Member 'CustomSkyLight_C_SkySettingsTransition::To' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SkySettingsTransition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000498, "Member 'CustomSkyLight_C_SkySettingsTransition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SunSetSettings
// 0x01E0 (0x01E0 - 0x0000)
struct CustomSkyLight_C_SunSetSettings final
{
public:
	double                                        TargetIntencity;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetLightColor;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetTemperature;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTemperature;                                    // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PrevIntencity;                                     // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PrevLightColor;                                    // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrevTemperature;                                   // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDirectionalLightCSLStruct             PrevDirectionalLightSettings;                      // 0x0048(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDirectionalLightCSLStruct             NewDirectionalLightSettings;                       // 0x0080(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_1;    // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue_2;    // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_1;            // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CallFunc_Conv_LinearColorToColor_ReturnValue;      // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_4;                       // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_5;                       // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_6;                       // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_7;                       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_8;                       // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_9;                       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_10;                      // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_11;                      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_12;                      // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_13;                      // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_14;                      // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_15;                      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_2;            // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue_3;            // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_1;     // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_2;     // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast; // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBloomMaxBrightness_NewValue_ImplicitCast; // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBloomThreshold_NewValue_ImplicitCast;  // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetBloomScale_NewValue_ImplicitCast;      // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetOcclusionDepthRange_NewValue_ImplicitCast; // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetOcclusionMaskDarkness_NewValue_ImplicitCast; // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast_3;     // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetTemperature_NewTemperature_ImplicitCast; // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SunSetSettings) == 0x000008, "Wrong alignment on CustomSkyLight_C_SunSetSettings");
static_assert(sizeof(CustomSkyLight_C_SunSetSettings) == 0x0001E0, "Wrong size on CustomSkyLight_C_SunSetSettings");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, TargetIntencity) == 0x000000, "Member 'CustomSkyLight_C_SunSetSettings::TargetIntencity' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, TargetLightColor) == 0x000008, "Member 'CustomSkyLight_C_SunSetSettings::TargetLightColor' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, TargetTemperature) == 0x000018, "Member 'CustomSkyLight_C_SunSetSettings::TargetTemperature' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, UseTemperature) == 0x000020, "Member 'CustomSkyLight_C_SunSetSettings::UseTemperature' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, PrevIntencity) == 0x000028, "Member 'CustomSkyLight_C_SunSetSettings::PrevIntencity' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, PrevLightColor) == 0x000030, "Member 'CustomSkyLight_C_SunSetSettings::PrevLightColor' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, PrevTemperature) == 0x000040, "Member 'CustomSkyLight_C_SunSetSettings::PrevTemperature' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, PrevDirectionalLightSettings) == 0x000048, "Member 'CustomSkyLight_C_SunSetSettings::PrevDirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, NewDirectionalLightSettings) == 0x000080, "Member 'CustomSkyLight_C_SunSetSettings::NewDirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x0000B8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue_1) == 0x0000C8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue) == 0x0000D8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Conv_ColorToLinearColor_ReturnValue_2) == 0x0000E0, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Conv_ColorToLinearColor_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_1) == 0x0000F0, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_ReturnValue) == 0x0000F8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_ReturnValue_1) == 0x000108, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_2) == 0x000118, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Conv_LinearColorToColor_ReturnValue) == 0x000120, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Conv_LinearColorToColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_3) == 0x000128, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_4) == 0x000130, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_5) == 0x000138, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_6) == 0x000140, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_7) == 0x000148, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_8) == 0x000150, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_9) == 0x000158, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_10) == 0x000160, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_11) == 0x000168, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_12) == 0x000170, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_13) == 0x000178, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_14) == 0x000180, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_Lerp_ReturnValue_15) == 0x000188, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_Lerp_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_ReturnValue_2) == 0x000190, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_ReturnValue_3) == 0x0001A0, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x0001B0, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_1) == 0x0001B4, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_2) == 0x0001B8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast) == 0x0001BC, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetVolumetricScatteringIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetBloomMaxBrightness_NewValue_ImplicitCast) == 0x0001C0, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetBloomMaxBrightness_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetBloomThreshold_NewValue_ImplicitCast) == 0x0001C4, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetBloomThreshold_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetBloomScale_NewValue_ImplicitCast) == 0x0001C8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetBloomScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetOcclusionDepthRange_NewValue_ImplicitCast) == 0x0001CC, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetOcclusionDepthRange_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetOcclusionMaskDarkness_NewValue_ImplicitCast) == 0x0001D0, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetOcclusionMaskDarkness_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_LinearColorLerp_Alpha_ImplicitCast_3) == 0x0001D4, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_LinearColorLerp_Alpha_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x0001D8, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_SunSetSettings, CallFunc_SetTemperature_NewTemperature_ImplicitCast) == 0x0001DC, "Member 'CustomSkyLight_C_SunSetSettings::CallFunc_SetTemperature_NewTemperature_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.SunTimerInterp
// 0x0001 (0x0001 - 0x0000)
struct CustomSkyLight_C_SunTimerInterp final
{
public:
	bool                                          Server;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_SunTimerInterp) == 0x000001, "Wrong alignment on CustomSkyLight_C_SunTimerInterp");
static_assert(sizeof(CustomSkyLight_C_SunTimerInterp) == 0x000001, "Wrong size on CustomSkyLight_C_SunTimerInterp");
static_assert(offsetof(CustomSkyLight_C_SunTimerInterp, Server) == 0x000000, "Member 'CustomSkyLight_C_SunTimerInterp::Server' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.TimeTick
// 0x00B8 (0x00B8 - 0x0000)
struct CustomSkyLight_C_TimeTick final
{
public:
	double                                        CallFunc_FMod_Remainder;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMod_Remainder_1;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue_1;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMod_Remainder_2;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FMod_ReturnValue_2;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDay_ReturnValue;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_TimeTick) == 0x000008, "Wrong alignment on CustomSkyLight_C_TimeTick");
static_assert(sizeof(CustomSkyLight_C_TimeTick) == 0x0000B8, "Wrong size on CustomSkyLight_C_TimeTick");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_FMod_Remainder) == 0x000000, "Member 'CustomSkyLight_C_TimeTick::CallFunc_FMod_Remainder' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_FMod_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_TimeTick::CallFunc_FMod_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_FMod_Remainder_1) == 0x000020, "Member 'CustomSkyLight_C_TimeTick::CallFunc_FMod_Remainder_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_FMod_ReturnValue_1) == 0x000028, "Member 'CustomSkyLight_C_TimeTick::CallFunc_FMod_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_FMod_Remainder_2) == 0x000038, "Member 'CustomSkyLight_C_TimeTick::CallFunc_FMod_Remainder_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_FMod_ReturnValue_2) == 0x000040, "Member 'CustomSkyLight_C_TimeTick::CallFunc_FMod_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_GetDay_ReturnValue) == 0x000058, "Member 'CustomSkyLight_C_TimeTick::CallFunc_GetDay_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000080, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_SelectInt_ReturnValue) == 0x000088, "Member 'CustomSkyLight_C_TimeTick::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000090, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_MakeDateTime_ReturnValue) == 0x000098, "Member 'CustomSkyLight_C_TimeTick::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_SelectFloat_ReturnValue) == 0x0000A8, "Member 'CustomSkyLight_C_TimeTick::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_TimeTick, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'CustomSkyLight_C_TimeTick::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.UpdateSun
// 0x0350 (0x0350 - 0x0000)
struct CustomSkyLight_C_UpdateSun final
{
public:
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0068(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_GetCurrentSolarTime_Result;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B[0x5];                                      // 0x015B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C1[0x7];                                      // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_SelectRotator_ReturnValue;                // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0228(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_AzimuthCalc_DeltaTime_ImplicitCast;       // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetGlobalParameterByName_Value_ImplicitCast; // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_UpdateSun) == 0x000008, "Wrong alignment on CustomSkyLight_C_UpdateSun");
static_assert(sizeof(CustomSkyLight_C_UpdateSun) == 0x000350, "Wrong size on CustomSkyLight_C_UpdateSun");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000000, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_BreakRotator_Roll) == 0x000028, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_BreakRotator_Pitch) == 0x00002C, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_BreakRotator_Yaw) == 0x000030, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_MapRangeClamped_ReturnValue) == 0x000038, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000068, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_GetCurrentSolarTime_Result) == 0x000150, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_GetCurrentSolarTime_Result' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000158, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000159, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_BooleanOR_ReturnValue) == 0x00015A, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_GetForwardVector_ReturnValue) == 0x000160, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000178, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000188, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000190, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_BooleanAND_ReturnValue) == 0x000198, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, K2Node_SwitchEnum_CmpSuccess) == 0x000199, "Member 'CustomSkyLight_C_UpdateSun::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Not_PreBool_ReturnValue) == 0x00019A, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Not_PreBool_ReturnValue_1) == 0x00019B, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0001A0, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_FClamp_ReturnValue) == 0x0001A8, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001B0, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_FClamp_ReturnValue_1) == 0x0001B8, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_IsValid_ReturnValue) == 0x0001C0, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_MakeRotator_ReturnValue_1) == 0x0001C8, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_RLerp_ReturnValue) == 0x0001E0, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_RInterpTo_ReturnValue) == 0x0001F8, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_SelectRotator_ReturnValue) == 0x000210, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_SelectRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000228, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000310, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000318, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000320, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_AzimuthCalc_DeltaTime_ImplicitCast) == 0x000328, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_AzimuthCalc_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_SetGlobalParameterByName_Value_ImplicitCast) == 0x000330, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_SetGlobalParameterByName_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000338, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000340, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x000344, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UpdateSun, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000348, "Member 'CustomSkyLight_C_UpdateSun::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function CustomSkyLight.CustomSkyLight_C.UserConstructionScript
// 0x0088 (0x0088 - 0x0000)
struct CustomSkyLight_C_UserConstructionScript final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast_1;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast_2;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CustomSkyLight_C_UserConstructionScript) == 0x000008, "Wrong alignment on CustomSkyLight_C_UserConstructionScript");
static_assert(sizeof(CustomSkyLight_C_UserConstructionScript) == 0x000088, "Wrong size on CustomSkyLight_C_UserConstructionScript");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, Temp_bool_Variable) == 0x000000, "Member 'CustomSkyLight_C_UserConstructionScript::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000008, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000018, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000038, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000048, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, K2Node_Select_Default) == 0x000058, "Member 'CustomSkyLight_C_UserConstructionScript::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000060, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000068, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000070, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000074, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_A_ImplicitCast_1) == 0x000078, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(CustomSkyLight_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_A_ImplicitCast_2) == 0x000080, "Member 'CustomSkyLight_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

}

