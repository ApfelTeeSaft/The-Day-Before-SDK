#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BasicDecals_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BasicDecals_BP.BasicDecals_BP_C
// 0x00E0 (0x0370 - 0x0290)
class ABasicDecals_BP_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDecalComponent*                        Decal;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ParentMaterial;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_POM;                                           // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinSteps;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxSteps;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        POMDepth;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Color___Alpha;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Normal;                                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Stack;                                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMetalnessMask;                                  // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AOContribution;                                    // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAngleFade;                                      // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SurfaceAngleFade;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UVScaler;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlignToSurface;                                    // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HeightReferencePlane;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockAspectRatio;                                   // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugArrowScale;                                   // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SortOrder;                                         // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NormalFlatten;                                     // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rougness;                                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Metallic;                                          // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AddColor;                                          // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Specular;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BasicDecals_BP(int32 EntryPoint);
	void ReceiveBeginPlay();
	void SetParams();
	void UpdateDecal();
	void UpdateTransforms();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BasicDecals_BP_C">();
	}
	static class ABasicDecals_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABasicDecals_BP_C>();
	}
};
static_assert(alignof(ABasicDecals_BP_C) == 0x000008, "Wrong alignment on ABasicDecals_BP_C");
static_assert(sizeof(ABasicDecals_BP_C) == 0x000370, "Wrong size on ABasicDecals_BP_C");
static_assert(offsetof(ABasicDecals_BP_C, UberGraphFrame) == 0x000290, "Member 'ABasicDecals_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Decal) == 0x000298, "Member 'ABasicDecals_BP_C::Decal' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Arrow) == 0x0002A0, "Member 'ABasicDecals_BP_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, ParentMaterial) == 0x0002A8, "Member 'ABasicDecals_BP_C::ParentMaterial' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, MaterialInstance) == 0x0002B0, "Member 'ABasicDecals_BP_C::MaterialInstance' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Use_POM) == 0x0002B8, "Member 'ABasicDecals_BP_C::Use_POM' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, MinSteps) == 0x0002C0, "Member 'ABasicDecals_BP_C::MinSteps' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, MaxSteps) == 0x0002C8, "Member 'ABasicDecals_BP_C::MaxSteps' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, POMDepth) == 0x0002D0, "Member 'ABasicDecals_BP_C::POMDepth' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Color___Alpha) == 0x0002D8, "Member 'ABasicDecals_BP_C::Color___Alpha' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Normal) == 0x0002E0, "Member 'ABasicDecals_BP_C::Normal' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Stack) == 0x0002E8, "Member 'ABasicDecals_BP_C::Stack' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, UseMetalnessMask) == 0x0002F0, "Member 'ABasicDecals_BP_C::UseMetalnessMask' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, AOContribution) == 0x0002F8, "Member 'ABasicDecals_BP_C::AOContribution' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, UseAngleFade) == 0x000300, "Member 'ABasicDecals_BP_C::UseAngleFade' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, SurfaceAngleFade) == 0x000308, "Member 'ABasicDecals_BP_C::SurfaceAngleFade' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, UVScaler) == 0x000310, "Member 'ABasicDecals_BP_C::UVScaler' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, AlignToSurface) == 0x000318, "Member 'ABasicDecals_BP_C::AlignToSurface' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, HeightReferencePlane) == 0x000320, "Member 'ABasicDecals_BP_C::HeightReferencePlane' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, LockAspectRatio) == 0x000328, "Member 'ABasicDecals_BP_C::LockAspectRatio' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, DebugArrowScale) == 0x000330, "Member 'ABasicDecals_BP_C::DebugArrowScale' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, SortOrder) == 0x000338, "Member 'ABasicDecals_BP_C::SortOrder' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, NormalFlatten) == 0x000340, "Member 'ABasicDecals_BP_C::NormalFlatten' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Rougness) == 0x000348, "Member 'ABasicDecals_BP_C::Rougness' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Metallic) == 0x000350, "Member 'ABasicDecals_BP_C::Metallic' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, AddColor) == 0x000358, "Member 'ABasicDecals_BP_C::AddColor' has a wrong offset!");
static_assert(offsetof(ABasicDecals_BP_C, Specular) == 0x000368, "Member 'ABasicDecals_BP_C::Specular' has a wrong offset!");

}

