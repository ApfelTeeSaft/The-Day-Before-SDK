#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Surv_Simpled_Pose

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CarTipe_structs.hpp"
#include "S_WeaponGripType_structs.hpp"
#include "Engine_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "S_EatConfiguration_structs.hpp"
#include "S_PlayerWeaponAnim_structs.hpp"


namespace SDK::Params
{

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.AddCharacterRotation
// 0x0018 (0x0018 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_AddCharacterRotation final
{
public:
	struct FRotator                               Amount;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_AddCharacterRotation) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_AddCharacterRotation");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_AddCharacterRotation) == 0x000018, "Wrong size on ABP_Surv_Simpled_Pose_C_AddCharacterRotation");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_AddCharacterRotation, Amount) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_AddCharacterRotation::Amount' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_AnimGraph");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_AnimGraph) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_AnimGraph");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.AnimNotifyTurningInPlace
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace final
{
public:
	class UAnimMontage*                           TurnIPMontage;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTurn;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurningIP;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurningRight;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace, TurnIPMontage) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace::TurnIPMontage' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace, ShouldTurn) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace::ShouldTurn' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace, TurningIP) == 0x000009, "Member 'ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace::TurningIP' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace, TurningRight) == 0x00000A, "Member 'ABP_Surv_Simpled_Pose_C_AnimNotifyTurningInPlace::TurningRight' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.BlueprintThreadSafeUpdateAnimation
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_VariableSet_Direction_ImplicitCast;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, DeltaTime) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, CallFunc_Not_PreBool_ReturnValue_2) == 0x000006, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, CallFunc_BooleanAND_ReturnValue_1) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation, K2Node_VariableSet_Direction_ImplicitCast) == 0x00000C, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintThreadSafeUpdateAnimation::K2Node_VariableSet_Direction_ImplicitCast' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.BPI_CameraShake
// 0x0018 (0x0018 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_BPI_CameraShake final
{
public:
	class UClass*                                 ShakeClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedChangeScale;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Scale;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_BPI_CameraShake) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_BPI_CameraShake");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_BPI_CameraShake) == 0x000018, "Wrong size on ABP_Surv_Simpled_Pose_C_BPI_CameraShake");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BPI_CameraShake, ShakeClass) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_BPI_CameraShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BPI_CameraShake, NeedChangeScale) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_BPI_CameraShake::NeedChangeScale' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_BPI_CameraShake, Scale) == 0x000010, "Member 'ABP_Surv_Simpled_Pose_C_BPI_CameraShake::Scale' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.CallEatMesh
// 0x0028 (0x0028 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_CallEatMesh final
{
public:
	class FName                                   ItemType;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DurationAttached;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimDelay;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissappearDelay;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayRate;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_CallEatMesh) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_CallEatMesh");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_CallEatMesh) == 0x000028, "Wrong size on ABP_Surv_Simpled_Pose_C_CallEatMesh");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_CallEatMesh, ItemType) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_CallEatMesh::ItemType' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_CallEatMesh, DurationAttached) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_CallEatMesh::DurationAttached' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_CallEatMesh, AnimDelay) == 0x000010, "Member 'ABP_Surv_Simpled_Pose_C_CallEatMesh::AnimDelay' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_CallEatMesh, DissappearDelay) == 0x000018, "Member 'ABP_Surv_Simpled_Pose_C_CallEatMesh::DissappearDelay' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_CallEatMesh, PlayRate) == 0x000020, "Member 'ABP_Surv_Simpled_Pose_C_CallEatMesh::PlayRate' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.CheckEndEat
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_CheckEndEat final
{
public:
	bool                                          Eat_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_CheckEndEat) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_CheckEndEat");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_CheckEndEat) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_CheckEndEat");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_CheckEndEat, Eat_) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_CheckEndEat::Eat_' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.ExecuteUbergraph_ABP_Surv_Simpled_Pose
// 0x05B0 (0x05B0 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_SprayOffset;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsReloading;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_TacticalGripName;                     // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_EatConfiguration                    K2Node_Event_ItemSettings;                         // 0x0030(0x0400)(HasGetValueTypeHash)
	class UAnimSequence*                          K2Node_Event_HandPose;                             // 0x0430(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Event_TurnIPMontage;                        // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_ShouldTurn;                           // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_TurningIP;                            // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_TurningRight;                         // 0x0442(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_443[0x5];                                      // 0x0443(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_PlayerWeaponAnim                    K2Node_Event_WeaponAnims;                          // 0x0448(0x0088)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Event_HipFirePoseStand;                     // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           K2Node_Event_HipFirePoseCrouch;                    // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x04E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Event_Amount;                               // 0x04E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0500(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0501(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0502(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_503[0x5];                                      // 0x0503(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          K2Node_Event_Anim;                                 // 0x0508(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_SpecialItem;                          // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_CanMove;                              // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_HasStandAnim;                         // 0x0512(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WepNotHiding;                         // 0x0513(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0514(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_515[0x3];                                      // 0x0515(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Event_ItemType;                             // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_DurationAttached;                     // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_AnimDelay;                            // 0x0528(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_DissappearDelay;                      // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_PlayRate;                             // 0x0538(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_State;                                // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0542(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              K2Node_Event_WeaponType;                           // 0x0543(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_544[0x4];                                      // 0x0544(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           K2Node_Event_AnimMontage;                          // 0x0548(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsHipfire;                            // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Reloading;                            // 0x0551(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_552[0x6];                                      // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_PlayRate_1;                           // 0x0558(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_StartTime;                            // 0x0560(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 Temp_byte_Variable;                                // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_569[0x3];                                      // 0x0569(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x056C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0578(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_Event_ShakeClass;                           // 0x0580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NeedChangeScale;                      // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Scale;                                // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0598(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 K2Node_Event_NewParam;                             // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x05A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose) == 0x000010, "Wrong alignment on ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose) == 0x0005B0, "Wrong size on ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, EntryPoint) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_SprayOffset) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_SprayOffset' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_IsReloading) == 0x000010, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_IsReloading' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_TacticalGripName) == 0x000018, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_TacticalGripName' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_ItemSettings) == 0x000030, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_ItemSettings' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_HandPose) == 0x000430, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_HandPose' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_TurnIPMontage) == 0x000438, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_TurnIPMontage' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_ShouldTurn) == 0x000440, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_ShouldTurn' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_TurningIP) == 0x000441, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_TurningIP' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_TurningRight) == 0x000442, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_TurningRight' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_WeaponAnims) == 0x000448, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_WeaponAnims' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_HipFirePoseStand) == 0x0004D0, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_HipFirePoseStand' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_HipFirePoseCrouch) == 0x0004D8, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_HipFirePoseCrouch' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable) == 0x0004E0, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_Amount) == 0x0004E8, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_Amount' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable_1) == 0x000500, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable_2) == 0x000501, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable_3) == 0x000502, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_Anim) == 0x000508, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_Anim' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_SpecialItem) == 0x000510, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_SpecialItem' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_CanMove) == 0x000511, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_CanMove' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_HasStandAnim) == 0x000512, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_HasStandAnim' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_WepNotHiding) == 0x000513, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_WepNotHiding' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable_4) == 0x000514, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_ItemType) == 0x000518, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_ItemType' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_DurationAttached) == 0x000520, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_DurationAttached' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_AnimDelay) == 0x000528, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_AnimDelay' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_DissappearDelay) == 0x000530, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_DissappearDelay' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_PlayRate) == 0x000538, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable_5) == 0x000540, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_State) == 0x000541, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_State' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_bool_Variable_6) == 0x000542, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_WeaponType) == 0x000543, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_WeaponType' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_AnimMontage) == 0x000548, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_AnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_IsHipfire) == 0x000550, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_IsHipfire' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_Reloading) == 0x000551, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_Reloading' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_PlayRate_1) == 0x000558, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_PlayRate_1' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_StartTime) == 0x000560, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_StartTime' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, Temp_byte_Variable) == 0x000568, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_DeltaTimeX) == 0x00056C, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, CallFunc_IsValid_ReturnValue) == 0x000570, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000578, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_ShakeClass) == 0x000580, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_ShakeClass' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_NeedChangeScale) == 0x000588, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_NeedChangeScale' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_Scale) == 0x000590, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_DynamicCast_AsSurvival_Player) == 0x000598, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_DynamicCast_bSuccess) == 0x0005A0, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Event_NewParam) == 0x0005A1, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Event_NewParam' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose, K2Node_Select_Default) == 0x0005A2, "Member 'ABP_Surv_Simpled_Pose_C_ExecuteUbergraph_ABP_Surv_Simpled_Pose::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetCameraOffset
// 0x0030 (0x0030 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetCameraOffset final
{
public:
	struct FVector                                PelvisOffset;                                      // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InterpOffset;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetCameraOffset) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetCameraOffset");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetCameraOffset) == 0x000030, "Wrong size on ABP_Surv_Simpled_Pose_C_GetCameraOffset");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetCameraOffset, PelvisOffset) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetCameraOffset::PelvisOffset' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetCameraOffset, InterpOffset) == 0x000018, "Member 'ABP_Surv_Simpled_Pose_C_GetCameraOffset::InterpOffset' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetDriving
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetDriving final
{
public:
	bool                                          IsDriving;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetDriving) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetDriving");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetDriving) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_GetDriving");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetDriving, IsDriving) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetDriving::IsDriving' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetFireSprayOffset
// 0x0008 (0x0008 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetFireSprayOffset final
{
public:
	double                                        SprayOffset;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetFireSprayOffset) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetFireSprayOffset");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetFireSprayOffset) == 0x000008, "Wrong size on ABP_Surv_Simpled_Pose_C_GetFireSprayOffset");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetFireSprayOffset, SprayOffset) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetFireSprayOffset::SprayOffset' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetFPPTacticalGripOffset
// 0x0060 (0x0060 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset final
{
public:
	struct FTransform                             GripOffset;                                        // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset) == 0x000010, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset) == 0x000060, "Wrong size on ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset, GripOffset) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetFPPTacticalGripOffset::GripOffset' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetInteractAnim
// 0x0008 (0x0008 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetInteractAnim final
{
public:
	class UAnimSequence*                          Sequence;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetInteractAnim) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetInteractAnim");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetInteractAnim) == 0x000008, "Wrong size on ABP_Surv_Simpled_Pose_C_GetInteractAnim");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetInteractAnim, Sequence) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetInteractAnim::Sequence' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetInventoryLayerState
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetInventoryLayerState final
{
public:
	bool                                          Active_;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetInventoryLayerState) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetInventoryLayerState");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetInventoryLayerState) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_GetInventoryLayerState");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetInventoryLayerState, Active_) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetInventoryLayerState::Active_' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetKneltTime
// 0x0008 (0x0008 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetKneltTime final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetKneltTime) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetKneltTime");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetKneltTime) == 0x000008, "Wrong size on ABP_Surv_Simpled_Pose_C_GetKneltTime");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetKneltTime, Time) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetKneltTime::Time' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetSurvController
// 0x0008 (0x0008 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetSurvController final
{
public:
	class ASurvPC_C*                              SurvPC;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetSurvController) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetSurvController");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetSurvController) == 0x000008, "Wrong size on ABP_Surv_Simpled_Pose_C_GetSurvController");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetSurvController, SurvPC) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetSurvController::SurvPC' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetTacticalGripOffset
// 0x0060 (0x0060 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset final
{
public:
	struct FTransform                             GripOffset;                                        // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset) == 0x000010, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset) == 0x000060, "Wrong size on ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset, GripOffset) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetTacticalGripOffset::GripOffset' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.GetTacticalGripPoses
// 0x0190 (0x0190 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses final
{
public:
	struct FS_WeaponGripType                      GripPoses;                                         // 0x0000(0x0190)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses) == 0x000190, "Wrong size on ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses, GripPoses) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_GetTacticalGripPoses::GripPoses' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.InFlatSurface
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_InFlatSurface final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_InFlatSurface) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_InFlatSurface");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_InFlatSurface) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_InFlatSurface");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_InFlatSurface, Return) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_InFlatSurface::Return' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.IsInTurn
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_IsInTurn final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_IsInTurn) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_IsInTurn");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_IsInTurn) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_IsInTurn");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_IsInTurn, Return) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_IsInTurn::Return' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.IsJumpPrepare
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_IsJumpPrepare final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_IsJumpPrepare) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_IsJumpPrepare");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_IsJumpPrepare) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_IsJumpPrepare");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_IsJumpPrepare, Return) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_IsJumpPrepare::Return' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_IsReloading final
{
public:
	bool                                          Param_IsReloading;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_IsReloading) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_IsReloading");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_IsReloading) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_IsReloading");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_IsReloading, Param_IsReloading) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_IsReloading::Param_IsReloading' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.IsRootRotation
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_IsRootRotation final
{
public:
	bool                                          RM;                                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_IsRootRotation) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_IsRootRotation");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_IsRootRotation) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_IsRootRotation");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_IsRootRotation, RM) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_IsRootRotation::RM' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.IsSpineMontage
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_IsSpineMontage final
{
public:
	bool                                          Return;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_IsSpineMontage) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_IsSpineMontage");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_IsSpineMontage) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_IsSpineMontage");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_IsSpineMontage, Return) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_IsSpineMontage::Return' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.MovementModeChanged
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_MovementModeChanged final
{
public:
	EMovementMode                                 NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_MovementModeChanged) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_MovementModeChanged");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_MovementModeChanged) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_MovementModeChanged");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_MovementModeChanged, NewParam) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_MovementModeChanged::NewParam' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.PlayMontage
// 0x0020 (0x0020 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_PlayMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHipfire;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reloading;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayRate;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartTime;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_PlayMontage) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_PlayMontage");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_PlayMontage) == 0x000020, "Wrong size on ABP_Surv_Simpled_Pose_C_PlayMontage");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_PlayMontage, AnimMontage) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_PlayMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_PlayMontage, IsHipfire) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_PlayMontage::IsHipfire' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_PlayMontage, Reloading) == 0x000009, "Member 'ABP_Surv_Simpled_Pose_C_PlayMontage::Reloading' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_PlayMontage, PlayRate) == 0x000010, "Member 'ABP_Surv_Simpled_Pose_C_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_PlayMontage, StartTime) == 0x000018, "Member 'ABP_Surv_Simpled_Pose_C_PlayMontage::StartTime' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetDriving
// 0x000C (0x000C - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetDriving final
{
public:
	bool                                          InCar;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Driver;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarTipe                                      CarTipe;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SitIndex;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Nothing;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetDriving) == 0x000004, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetDriving");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetDriving) == 0x00000C, "Wrong size on ABP_Surv_Simpled_Pose_C_SetDriving");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetDriving, InCar) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetDriving::InCar' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetDriving, Driver) == 0x000001, "Member 'ABP_Surv_Simpled_Pose_C_SetDriving::Driver' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetDriving, CarTipe) == 0x000002, "Member 'ABP_Surv_Simpled_Pose_C_SetDriving::CarTipe' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetDriving, SitIndex) == 0x000004, "Member 'ABP_Surv_Simpled_Pose_C_SetDriving::SitIndex' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetDriving, Nothing) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_SetDriving::Nothing' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetFireSprayOffset
// 0x0008 (0x0008 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetFireSprayOffset final
{
public:
	double                                        SprayOffset;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetFireSprayOffset) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetFireSprayOffset");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetFireSprayOffset) == 0x000008, "Wrong size on ABP_Surv_Simpled_Pose_C_SetFireSprayOffset");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetFireSprayOffset, SprayOffset) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetFireSprayOffset::SprayOffset' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetItemUsingAnim
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetItemUsingAnim final
{
public:
	class UAnimSequence*                          Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialItem;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasStandAnim;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WepNotHiding;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetItemUsingAnim");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_SetItemUsingAnim");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim, Anim) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetItemUsingAnim::Anim' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim, SpecialItem) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_SetItemUsingAnim::SpecialItem' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim, CanMove) == 0x000009, "Member 'ABP_Surv_Simpled_Pose_C_SetItemUsingAnim::CanMove' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim, HasStandAnim) == 0x00000A, "Member 'ABP_Surv_Simpled_Pose_C_SetItemUsingAnim::HasStandAnim' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetItemUsingAnim, WepNotHiding) == 0x00000B, "Member 'ABP_Surv_Simpled_Pose_C_SetItemUsingAnim::WepNotHiding' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetJumpPrepare
// 0x0002 (0x0002 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetJumpPrepare final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Nothing;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetJumpPrepare) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetJumpPrepare");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetJumpPrepare) == 0x000002, "Wrong size on ABP_Surv_Simpled_Pose_C_SetJumpPrepare");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetJumpPrepare, Value) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetJumpPrepare::Value' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetJumpPrepare, Nothing) == 0x000001, "Member 'ABP_Surv_Simpled_Pose_C_SetJumpPrepare::Nothing' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetLeftHandVariant
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetLeftHandVariant final
{
public:
	double                                        Variant;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetLeftHandVariant) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetLeftHandVariant");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetLeftHandVariant) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_SetLeftHandVariant");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetLeftHandVariant, Variant) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetLeftHandVariant::Variant' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetLeftHandVariant, Success) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_SetLeftHandVariant::Success' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetLootTarget
// 0x0070 (0x0070 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetLootTarget final
{
public:
	struct FTransform                             TargetTransform;                                   // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetLootTarget) == 0x000010, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetLootTarget");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetLootTarget) == 0x000070, "Wrong size on ABP_Surv_Simpled_Pose_C_SetLootTarget");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetLootTarget, TargetTransform) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetLootTarget::TargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetLootTarget, Return) == 0x000060, "Member 'ABP_Surv_Simpled_Pose_C_SetLootTarget::Return' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetReloadingState
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetReloadingState final
{
public:
	bool                                          Param_IsReloading;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetReloadingState) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetReloadingState");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetReloadingState) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_SetReloadingState");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetReloadingState, Param_IsReloading) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetReloadingState::Param_IsReloading' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetReloadState
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetReloadState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetReloadState) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetReloadState");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetReloadState) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_SetReloadState");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetReloadState, State) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetReloadState::State' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetRubberDirection
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetRubberDirection final
{
public:
	double                                        Param_Direction;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Nothing;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetRubberDirection) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetRubberDirection");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetRubberDirection) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_SetRubberDirection");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetRubberDirection, Param_Direction) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetRubberDirection::Param_Direction' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetRubberDirection, Nothing) == 0x000008, "Member 'ABP_Surv_Simpled_Pose_C_SetRubberDirection::Nothing' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetSpineMotageBool
// 0x0002 (0x0002 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetSpineMotageBool final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Nothing;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetSpineMotageBool) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetSpineMotageBool");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetSpineMotageBool) == 0x000002, "Wrong size on ABP_Surv_Simpled_Pose_C_SetSpineMotageBool");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetSpineMotageBool, Value) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetSpineMotageBool::Value' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetSpineMotageBool, Nothing) == 0x000001, "Member 'ABP_Surv_Simpled_Pose_C_SetSpineMotageBool::Nothing' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetThrowableHandPose
// 0x0008 (0x0008 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetThrowableHandPose final
{
public:
	class UAnimSequence*                          HandPose;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetThrowableHandPose) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetThrowableHandPose");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetThrowableHandPose) == 0x000008, "Wrong size on ABP_Surv_Simpled_Pose_C_SetThrowableHandPose");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetThrowableHandPose, HandPose) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetThrowableHandPose::HandPose' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetUsableItemSettings
// 0x0400 (0x0400 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetUsableItemSettings final
{
public:
	struct FS_EatConfiguration                    ItemSettings;                                      // 0x0000(0x0400)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetUsableItemSettings) == 0x000010, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetUsableItemSettings");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetUsableItemSettings) == 0x000400, "Wrong size on ABP_Surv_Simpled_Pose_C_SetUsableItemSettings");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetUsableItemSettings, ItemSettings) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetUsableItemSettings::ItemSettings' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetWeaponAnims
// 0x0098 (0x0098 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetWeaponAnims final
{
public:
	struct FS_PlayerWeaponAnim                    WeaponAnims;                                       // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HipFirePoseStand;                                  // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HipFirePoseCrouch;                                 // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetWeaponAnims) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetWeaponAnims");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetWeaponAnims) == 0x000098, "Wrong size on ABP_Surv_Simpled_Pose_C_SetWeaponAnims");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetWeaponAnims, WeaponAnims) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetWeaponAnims::WeaponAnims' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetWeaponAnims, HipFirePoseStand) == 0x000088, "Member 'ABP_Surv_Simpled_Pose_C_SetWeaponAnims::HipFirePoseStand' has a wrong offset!");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetWeaponAnims, HipFirePoseCrouch) == 0x000090, "Member 'ABP_Surv_Simpled_Pose_C_SetWeaponAnims::HipFirePoseCrouch' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetWeaponGripType
// 0x0010 (0x0010 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetWeaponGripType final
{
public:
	class FString                                 TacticalGripName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetWeaponGripType) == 0x000008, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetWeaponGripType");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetWeaponGripType) == 0x000010, "Wrong size on ABP_Surv_Simpled_Pose_C_SetWeaponGripType");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetWeaponGripType, TacticalGripName) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetWeaponGripType::TacticalGripName' has a wrong offset!");

// Function ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C.SetWeaponType
// 0x0001 (0x0001 - 0x0000)
struct ABP_Surv_Simpled_Pose_C_SetWeaponType final
{
public:
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Surv_Simpled_Pose_C_SetWeaponType) == 0x000001, "Wrong alignment on ABP_Surv_Simpled_Pose_C_SetWeaponType");
static_assert(sizeof(ABP_Surv_Simpled_Pose_C_SetWeaponType) == 0x000001, "Wrong size on ABP_Surv_Simpled_Pose_C_SetWeaponType");
static_assert(offsetof(ABP_Surv_Simpled_Pose_C_SetWeaponType, WeaponType) == 0x000000, "Member 'ABP_Surv_Simpled_Pose_C_SetWeaponType::WeaponType' has a wrong offset!");

}

