#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LensFlare_BP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LensFlare_BP.LensFlare_BP_C
// 0x04A0 (0x0730 - 0x0290)
class ALensFlare_BP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            LensFlare;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FlareDynamicMI;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FlareMat;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalBrightness;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        GhostsBrightness;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFadeDistance;                                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FadeDistance;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDistanceBloom;                                  // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IncreasingBloomByDistance;                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlobalColor;                                       // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeOutSpeed;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeInSpeed;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseSizeY;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        BaseSizeX;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        FlickerIntensity;                                  // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlickerTime;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Luminosity;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors_for_ignore_lens_flare_;                     // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	double                                        HaloBrightness;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HaloContrast;                                      // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HaloOpacity;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HaloInnerRadius;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HaloOuterColor;                                    // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HaloInnerColor;                                    // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               HaloTexture;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CentreFlareBrightness;                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CentreFlareContrast;                               // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CentreFlareColor;                                  // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CentreFlareTexture;                                // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareBrightness;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareContrast;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareInnerRadius;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareSize;                                     // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainLensInnerColor;                                // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainOuterColor;                                    // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MainFlare;                                         // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HaloTextureSize;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CentreFlareSize;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectionBrightness;                              // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectionContrast;                                // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectionColor;                                   // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectionCentreTexture;                           // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectionSize;                                    // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite1_Brightness;                         // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite1_Contrast;                           // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOppositeSize01;                               // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareOppositeColor01;                              // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareOpposite01;                                   // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite2_Brightness;                         // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite2_Contrast;                           // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOppositeSize02;                               // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareOpposite02;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareOppositeColor02;                              // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OppositeFlaresAxisProjection;                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontBrightness01;                            // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontContrast01;                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontSize01;                                  // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontProximityCentre01;                       // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareFrontColor01;                                 // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareFront01;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontBrightness02;                            // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontContrast02;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontSize02;                                  // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontProximityCentre02;                       // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareFrontColor02;                                 // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareFront02;                                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FrontFlaresAxisProjection;                         // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareBrightness01;                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareContrast01;                          // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareSize01;                              // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareProximityCentre01;                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectedFlareColor01;                             // 0x0540(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectedFlare01;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareBrightness02;                        // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareContrast02;                          // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareSize02;                              // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareProximityCentre02;                   // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectedFlareColor02;                             // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectedFlare02;                                  // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalMinorFlareBrightness01;                      // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalMinorFlareContrast01;                        // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalMinorFlareSize01;                            // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareSizeRandom01;                            // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareProximityCentre01;                       // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlobalMinorFlareColor01;                           // 0x05B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalMinorFlareBrightness02;                      // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalMinorFlareContrast02;                        // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalMinorFlareSize02;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareSizeRandom02;                            // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareProximityCentre02;                       // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlobalMinorFlareColor02;                           // 0x05F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare01;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor1_Contrast;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor1_Brightness;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare02;                                      // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalFlareBrightness;                         // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalFlareContrast;                           // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalFlareSize;                               // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AdditionalFlareColor;                              // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               AdditionalFlare;                                   // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        IrisBrightness;                                    // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IrisContrast;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IrisSize;                                          // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IrisProximityCentre;                               // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IrisColor;                                         // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Iris;                                              // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor2_Contrast;                                   // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor2_Brightness;                                 // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare03;                                      // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor3_Contrast;                                   // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor3_Brightness;                                 // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare04;                                      // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor4_Contrast;                                   // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor4_Brightness;                                 // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare05;                                      // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor5_Contrast;                                   // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor5_Brightness;                                 // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare06;                                      // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor6_Contrast;                                   // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor6_Brightness;                                 // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare07;                                      // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor7_Contrast;                                   // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor7_Brightness;                                 // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare08;                                      // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Minor8_Contrast;                                   // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minor8_Brightness;                                 // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         Scale_and_Brightness;                              // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_LensFlare_BP(int32 EntryPoint);
	void InitFlare();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LensFlare_BP_C">();
	}
	static class ALensFlare_BP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALensFlare_BP_C>();
	}
};
static_assert(alignof(ALensFlare_BP_C) == 0x000008, "Wrong alignment on ALensFlare_BP_C");
static_assert(sizeof(ALensFlare_BP_C) == 0x000730, "Wrong size on ALensFlare_BP_C");
static_assert(offsetof(ALensFlare_BP_C, UberGraphFrame) == 0x000290, "Member 'ALensFlare_BP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, LensFlare) == 0x000298, "Member 'ALensFlare_BP_C::LensFlare' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Scene) == 0x0002A0, "Member 'ALensFlare_BP_C::Scene' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, DeltaTime) == 0x0002A8, "Member 'ALensFlare_BP_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareDynamicMI) == 0x0002B0, "Member 'ALensFlare_BP_C::FlareDynamicMI' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareMat) == 0x0002B8, "Member 'ALensFlare_BP_C::FlareMat' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalBrightness) == 0x0002C0, "Member 'ALensFlare_BP_C::GlobalBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GhostsBrightness) == 0x0002C8, "Member 'ALensFlare_BP_C::GhostsBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, UseFadeDistance) == 0x0002D0, "Member 'ALensFlare_BP_C::UseFadeDistance' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FadeDistance) == 0x0002D8, "Member 'ALensFlare_BP_C::FadeDistance' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, UseDistanceBloom) == 0x0002E0, "Member 'ALensFlare_BP_C::UseDistanceBloom' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, IncreasingBloomByDistance) == 0x0002E8, "Member 'ALensFlare_BP_C::IncreasingBloomByDistance' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalColor) == 0x0002F0, "Member 'ALensFlare_BP_C::GlobalColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FadeOutSpeed) == 0x000300, "Member 'ALensFlare_BP_C::FadeOutSpeed' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FadeInSpeed) == 0x000308, "Member 'ALensFlare_BP_C::FadeInSpeed' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, BaseSizeY) == 0x000310, "Member 'ALensFlare_BP_C::BaseSizeY' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, BaseSizeX) == 0x000318, "Member 'ALensFlare_BP_C::BaseSizeX' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlickerIntensity) == 0x000320, "Member 'ALensFlare_BP_C::FlickerIntensity' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlickerTime) == 0x000328, "Member 'ALensFlare_BP_C::FlickerTime' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Luminosity) == 0x000330, "Member 'ALensFlare_BP_C::Luminosity' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Actors_for_ignore_lens_flare_) == 0x000338, "Member 'ALensFlare_BP_C::Actors_for_ignore_lens_flare_' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloBrightness) == 0x000348, "Member 'ALensFlare_BP_C::HaloBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloContrast) == 0x000350, "Member 'ALensFlare_BP_C::HaloContrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloOpacity) == 0x000358, "Member 'ALensFlare_BP_C::HaloOpacity' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloInnerRadius) == 0x000360, "Member 'ALensFlare_BP_C::HaloInnerRadius' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloOuterColor) == 0x000368, "Member 'ALensFlare_BP_C::HaloOuterColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloInnerColor) == 0x000378, "Member 'ALensFlare_BP_C::HaloInnerColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloTexture) == 0x000388, "Member 'ALensFlare_BP_C::HaloTexture' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, CentreFlareBrightness) == 0x000390, "Member 'ALensFlare_BP_C::CentreFlareBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, CentreFlareContrast) == 0x000398, "Member 'ALensFlare_BP_C::CentreFlareContrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, CentreFlareColor) == 0x0003A0, "Member 'ALensFlare_BP_C::CentreFlareColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, CentreFlareTexture) == 0x0003B0, "Member 'ALensFlare_BP_C::CentreFlareTexture' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainFlareBrightness) == 0x0003B8, "Member 'ALensFlare_BP_C::MainFlareBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainFlareContrast) == 0x0003C0, "Member 'ALensFlare_BP_C::MainFlareContrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainFlareInnerRadius) == 0x0003C8, "Member 'ALensFlare_BP_C::MainFlareInnerRadius' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainFlareSize) == 0x0003D0, "Member 'ALensFlare_BP_C::MainFlareSize' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainLensInnerColor) == 0x0003D8, "Member 'ALensFlare_BP_C::MainLensInnerColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainOuterColor) == 0x0003E8, "Member 'ALensFlare_BP_C::MainOuterColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MainFlare) == 0x0003F8, "Member 'ALensFlare_BP_C::MainFlare' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, HaloTextureSize) == 0x000400, "Member 'ALensFlare_BP_C::HaloTextureSize' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, CentreFlareSize) == 0x000408, "Member 'ALensFlare_BP_C::CentreFlareSize' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectionBrightness) == 0x000410, "Member 'ALensFlare_BP_C::ReflectionBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectionContrast) == 0x000418, "Member 'ALensFlare_BP_C::ReflectionContrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectionColor) == 0x000420, "Member 'ALensFlare_BP_C::ReflectionColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectionCentreTexture) == 0x000430, "Member 'ALensFlare_BP_C::ReflectionCentreTexture' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectionSize) == 0x000438, "Member 'ALensFlare_BP_C::ReflectionSize' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOpposite1_Brightness) == 0x000440, "Member 'ALensFlare_BP_C::FlareOpposite1_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOpposite1_Contrast) == 0x000448, "Member 'ALensFlare_BP_C::FlareOpposite1_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOppositeSize01) == 0x000450, "Member 'ALensFlare_BP_C::FlareOppositeSize01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOppositeColor01) == 0x000458, "Member 'ALensFlare_BP_C::FlareOppositeColor01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOpposite01) == 0x000468, "Member 'ALensFlare_BP_C::FlareOpposite01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOpposite2_Brightness) == 0x000470, "Member 'ALensFlare_BP_C::FlareOpposite2_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOpposite2_Contrast) == 0x000478, "Member 'ALensFlare_BP_C::FlareOpposite2_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOppositeSize02) == 0x000480, "Member 'ALensFlare_BP_C::FlareOppositeSize02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOpposite02) == 0x000488, "Member 'ALensFlare_BP_C::FlareOpposite02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareOppositeColor02) == 0x000490, "Member 'ALensFlare_BP_C::FlareOppositeColor02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, OppositeFlaresAxisProjection) == 0x0004A0, "Member 'ALensFlare_BP_C::OppositeFlaresAxisProjection' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontBrightness01) == 0x0004A8, "Member 'ALensFlare_BP_C::FlareFrontBrightness01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontContrast01) == 0x0004B0, "Member 'ALensFlare_BP_C::FlareFrontContrast01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontSize01) == 0x0004B8, "Member 'ALensFlare_BP_C::FlareFrontSize01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontProximityCentre01) == 0x0004C0, "Member 'ALensFlare_BP_C::FlareFrontProximityCentre01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontColor01) == 0x0004C8, "Member 'ALensFlare_BP_C::FlareFrontColor01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFront01) == 0x0004D8, "Member 'ALensFlare_BP_C::FlareFront01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontBrightness02) == 0x0004E0, "Member 'ALensFlare_BP_C::FlareFrontBrightness02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontContrast02) == 0x0004E8, "Member 'ALensFlare_BP_C::FlareFrontContrast02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontSize02) == 0x0004F0, "Member 'ALensFlare_BP_C::FlareFrontSize02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontProximityCentre02) == 0x0004F8, "Member 'ALensFlare_BP_C::FlareFrontProximityCentre02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFrontColor02) == 0x000500, "Member 'ALensFlare_BP_C::FlareFrontColor02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FlareFront02) == 0x000510, "Member 'ALensFlare_BP_C::FlareFront02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, FrontFlaresAxisProjection) == 0x000518, "Member 'ALensFlare_BP_C::FrontFlaresAxisProjection' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareBrightness01) == 0x000520, "Member 'ALensFlare_BP_C::ReflectedFlareBrightness01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareContrast01) == 0x000528, "Member 'ALensFlare_BP_C::ReflectedFlareContrast01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareSize01) == 0x000530, "Member 'ALensFlare_BP_C::ReflectedFlareSize01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareProximityCentre01) == 0x000538, "Member 'ALensFlare_BP_C::ReflectedFlareProximityCentre01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareColor01) == 0x000540, "Member 'ALensFlare_BP_C::ReflectedFlareColor01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlare01) == 0x000550, "Member 'ALensFlare_BP_C::ReflectedFlare01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareBrightness02) == 0x000558, "Member 'ALensFlare_BP_C::ReflectedFlareBrightness02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareContrast02) == 0x000560, "Member 'ALensFlare_BP_C::ReflectedFlareContrast02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareSize02) == 0x000568, "Member 'ALensFlare_BP_C::ReflectedFlareSize02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareProximityCentre02) == 0x000570, "Member 'ALensFlare_BP_C::ReflectedFlareProximityCentre02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlareColor02) == 0x000578, "Member 'ALensFlare_BP_C::ReflectedFlareColor02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, ReflectedFlare02) == 0x000588, "Member 'ALensFlare_BP_C::ReflectedFlare02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareBrightness01) == 0x000590, "Member 'ALensFlare_BP_C::GlobalMinorFlareBrightness01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareContrast01) == 0x000598, "Member 'ALensFlare_BP_C::GlobalMinorFlareContrast01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareSize01) == 0x0005A0, "Member 'ALensFlare_BP_C::GlobalMinorFlareSize01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlareSizeRandom01) == 0x0005A8, "Member 'ALensFlare_BP_C::MinorFlareSizeRandom01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlareProximityCentre01) == 0x0005B0, "Member 'ALensFlare_BP_C::MinorFlareProximityCentre01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareColor01) == 0x0005B8, "Member 'ALensFlare_BP_C::GlobalMinorFlareColor01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareBrightness02) == 0x0005C8, "Member 'ALensFlare_BP_C::GlobalMinorFlareBrightness02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareContrast02) == 0x0005D0, "Member 'ALensFlare_BP_C::GlobalMinorFlareContrast02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareSize02) == 0x0005D8, "Member 'ALensFlare_BP_C::GlobalMinorFlareSize02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlareSizeRandom02) == 0x0005E0, "Member 'ALensFlare_BP_C::MinorFlareSizeRandom02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlareProximityCentre02) == 0x0005E8, "Member 'ALensFlare_BP_C::MinorFlareProximityCentre02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, GlobalMinorFlareColor02) == 0x0005F0, "Member 'ALensFlare_BP_C::GlobalMinorFlareColor02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare01) == 0x000600, "Member 'ALensFlare_BP_C::MinorFlare01' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor1_Contrast) == 0x000608, "Member 'ALensFlare_BP_C::Minor1_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor1_Brightness) == 0x000610, "Member 'ALensFlare_BP_C::Minor1_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare02) == 0x000618, "Member 'ALensFlare_BP_C::MinorFlare02' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, AdditionalFlareBrightness) == 0x000620, "Member 'ALensFlare_BP_C::AdditionalFlareBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, AdditionalFlareContrast) == 0x000628, "Member 'ALensFlare_BP_C::AdditionalFlareContrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, AdditionalFlareSize) == 0x000630, "Member 'ALensFlare_BP_C::AdditionalFlareSize' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, AdditionalFlareColor) == 0x000638, "Member 'ALensFlare_BP_C::AdditionalFlareColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, AdditionalFlare) == 0x000648, "Member 'ALensFlare_BP_C::AdditionalFlare' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, IrisBrightness) == 0x000650, "Member 'ALensFlare_BP_C::IrisBrightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, IrisContrast) == 0x000658, "Member 'ALensFlare_BP_C::IrisContrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, IrisSize) == 0x000660, "Member 'ALensFlare_BP_C::IrisSize' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, IrisProximityCentre) == 0x000668, "Member 'ALensFlare_BP_C::IrisProximityCentre' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, IrisColor) == 0x000670, "Member 'ALensFlare_BP_C::IrisColor' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Iris) == 0x000680, "Member 'ALensFlare_BP_C::Iris' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor2_Contrast) == 0x000688, "Member 'ALensFlare_BP_C::Minor2_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor2_Brightness) == 0x000690, "Member 'ALensFlare_BP_C::Minor2_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare03) == 0x000698, "Member 'ALensFlare_BP_C::MinorFlare03' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor3_Contrast) == 0x0006A0, "Member 'ALensFlare_BP_C::Minor3_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor3_Brightness) == 0x0006A8, "Member 'ALensFlare_BP_C::Minor3_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare04) == 0x0006B0, "Member 'ALensFlare_BP_C::MinorFlare04' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor4_Contrast) == 0x0006B8, "Member 'ALensFlare_BP_C::Minor4_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor4_Brightness) == 0x0006C0, "Member 'ALensFlare_BP_C::Minor4_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare05) == 0x0006C8, "Member 'ALensFlare_BP_C::MinorFlare05' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor5_Contrast) == 0x0006D0, "Member 'ALensFlare_BP_C::Minor5_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor5_Brightness) == 0x0006D8, "Member 'ALensFlare_BP_C::Minor5_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare06) == 0x0006E0, "Member 'ALensFlare_BP_C::MinorFlare06' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor6_Contrast) == 0x0006E8, "Member 'ALensFlare_BP_C::Minor6_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor6_Brightness) == 0x0006F0, "Member 'ALensFlare_BP_C::Minor6_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare07) == 0x0006F8, "Member 'ALensFlare_BP_C::MinorFlare07' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor7_Contrast) == 0x000700, "Member 'ALensFlare_BP_C::Minor7_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor7_Brightness) == 0x000708, "Member 'ALensFlare_BP_C::Minor7_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, MinorFlare08) == 0x000710, "Member 'ALensFlare_BP_C::MinorFlare08' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor8_Contrast) == 0x000718, "Member 'ALensFlare_BP_C::Minor8_Contrast' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Minor8_Brightness) == 0x000720, "Member 'ALensFlare_BP_C::Minor8_Brightness' has a wrong offset!");
static_assert(offsetof(ALensFlare_BP_C, Scale_and_Brightness) == 0x000728, "Member 'ALensFlare_BP_C::Scale_and_Brightness' has a wrong offset!");

}

