#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Zombie

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DismembermentPart_structs.hpp"
#include "DismembermentState_structs.hpp"
#include "Survival_structs.hpp"
#include "Survival_classes.hpp"
#include "E_AttackingArm_structs.hpp"
#include "FItemInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DismembermentMeshCollection_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "VertexPaintDetectionPlugin_structs.hpp"
#include "F_WoundInfo_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "ELootTypes_structs.hpp"
#include "SlotRarity_structs.hpp"
#include "AngleMontage_structs.hpp"
#include "E_ZombieAIState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Zombie.Zombie_C
// 0x0F40 (0x1580 - 0x0640)
class AZombie_C final : public AZombieCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0640(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioCheckerComponent_C*               AudioCheckerComponent;                             // 0x0648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Head;                                              // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIMovementComponent_C*                 AIMovementComponent;                               // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TickIntervalController_C*          BPC_TickIntervalController;                        // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Feet;                                              // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Body;                                              // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Health;                                            // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead;                                              // 0x0680(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDeath;                                           // 0x0688(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MeshType;                                          // 0x0698(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LeftArmBones;                                      // 0x06A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           RightArmBones;                                     // 0x06B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           BodyBones;                                         // 0x06C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DefaultImpulseOnDeath;                             // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletShotRange;                                   // 0x06D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DC[0x4];                                      // 0x06DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOptimized_ABP_Zombie_C*                AnimBP;                                            // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DamageWasDealt;                                    // 0x06E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpottedSurvivor;                                   // 0x06E9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttackOnCooldown;                                  // 0x06EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6EB[0x5];                                      // 0x06EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AttackCooldown;                                    // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AttackTimer;                                       // 0x06F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, TSoftObjectPtr<class UAnimMontage>> DamagedMontages;                                   // 0x0700(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, EDismembermentPart>         BoneMeshLink;                                      // 0x0750(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EDismembermentState                           HeadDismembermentState;                            // 0x07A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDismembermentState                           BodyDismembermentState;                            // 0x07A1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDismembermentState                           FeetDismembermentState;                            // 0x07A2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDismembermentPart                            Dismemberment_Part;                                // 0x07A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A4[0x4];                                      // 0x07A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          Dismemberment_Mesh;                                // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DismembermentInProgress;                           // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B1[0x3];                                      // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   G_HitBoneName;                                     // 0x07B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7BC[0x4];                                      // 0x07BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                G_Hit_Location;                                    // 0x07C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            G_Instigated_By;                                   // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        G_Hit_Angle;                                       // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              WeaponType;                                        // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7E9[0x7];                                      // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDismembermentPart, double>              LimbsDurability;                                   // 0x07F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        ExplosionDismemberDistance;                        // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExplosionDismembermentCounter;                     // 0x0848(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84C[0x4];                                      // 0x084C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Explosion_Bones_to_Dismember;                      // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EDismembermentPart                            DismemberPartBeforeCorrection;                     // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             G_Hit_Info;                                        // 0x0868(0x00E8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FPoseSnapshot                          DismemberSnapshot;                                 // 0x0950(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AfterRagdoll;                                      // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RagdollTimer;                                      // 0x0990(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollIsFaceUp;                                   // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BloodDecalLocation;                                // 0x09A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, TSoftObjectPtr<class UAnimMontage>> MoveAttackMontages;                                // 0x09B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnEndAttack;                                       // 0x0A08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UFMODEvent*>                     DismembermentSounds;                               // 0x0A18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ContinueMovement;                                  // 0x0A28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        HitDecalLifeSpan;                                  // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PoolDecalLifeSpan;                                 // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloodDropDecalLifeSpan;                            // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DecalsHitTimer;                                    // 0x0A50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           HitDecalBones;                                     // 0x0A58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Excluded_Bones;                                    // 0x0A68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AdditiveDamage;                                    // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A79[0x7];                                      // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MoveAfterDamage;                                   // 0x0A80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CoreDamageAnimation;                               // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A91[0x7];                                      // 0x0A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DamageAnimResetTimer;                              // 0x0A98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Attacking;                                         // 0x0AA0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA1[0x7];                                      // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseSnapshot                          DeadBodySnapshot;                                  // 0x0AA8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AZombieDeadBody_C*                      ZombieDeadBodyRef;                                 // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Stunned;                                           // 0x0AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE9[0x7];                                      // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombieController_C*                    ZombieController;                                  // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimMontage>            HeadMontageToPlay;                                 // 0x0AF8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         HelmetDurability;                                  // 0x0B28(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2C[0x4];                                      // 0x0B2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class UNiagaraSystem>>  SparkVFXs;                                         // 0x0B30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ZombieManagerIndex;                                // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B44[0x4];                                      // 0x0B44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombieManager_C*                       ZombieManager;                                     // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZombieScale;                                       // 0x0B50(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RagdollStopTimer;                                  // 0x0B68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeshPosition;                                      // 0x0B70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   Partitioned_Meshes;                                // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsPossessed;                                       // 0x0B98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B99[0x7];                                      // 0x0B99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ZombieManagerNotifyTimer;                          // 0x0BA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpawnDeadBodyTimer;                                // 0x0BA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZombieHomeLocation;                                // 0x0BB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              IdleSoundEvent;                                    // 0x0BC8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              AgressiveSoundEvent;                               // 0x0BF8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              DeathSound;                                        // 0x0C28(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UFMODAudioComponent*                    IdleSoundComp;                                     // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    AgressiveSoundComp;                                // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnReset;                                           // 0x0C68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsChasing;                                         // 0x0C78(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C79[0x7];                                      // 0x0C79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDismembermentMeshCollection           DismembermentMeshesRow;                            // 0x0C80(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              ScreamSound;                                       // 0x0CF0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              DamagedSound;                                      // 0x0D20(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              AttackSound;                                       // 0x0D50(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UFMODEvent>>      WalkStepSounds;                                    // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UFMODEvent>>      SprintStepSounds;                                  // 0x0D90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         MeshTypeDefaultValue;                              // 0x0DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA4[0x4];                                      // 0x0DA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentTarget;                                     // 0x0DA8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSetTargetActor;                                  // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BloodNiagaraActive;                                // 0x0DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC1[0x7];                                      // 0x0DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BloodNiagaraTimer;                                 // 0x0DC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           NiagaraBones;                                      // 0x0DD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnEndScreaming;                                    // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           NavMeshGettingTimer;                               // 0x0DF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 NavDataName;                                       // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class ARecastNavMesh*                         ZombieNavData;                                     // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   StartScreamingKey;                                 // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           DecalsBones;                                       // 0x0E18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnCarShotHear;                                     // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                LimbImpulse;                                       // 0x0E38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EDismembermentPart, double>              ArmoredLimbsDurability;                            // 0x0E50(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EDismembermentPart, double>              WitchLimbsDurability;                              // 0x0EA0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EDismembermentPart, double>              NightLimbsDurability;                              // 0x0EF0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EDismembermentPart, double>              DayLimbsDurability;                                // 0x0F40(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              ZombieDamage;                                      // 0x0F90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DNA_SampleName;                                    // 0x0FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UQuest*>                         LinkedQuests;                                      // 0x0FA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          FullHeadDismemberment;                             // 0x0FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB9[0x7];                                      // 0x0FB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           KillZombieTimer;                                   // 0x0FC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Dead_by_Timer_G;                                   // 0x0FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC9[0x7];                                      // 0x0FC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ShowingTimer;                                      // 0x0FD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultQuestDropChance;                            // 0x0FD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpecialQuestDropChance;                            // 0x0FDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DelayedSMTickTimer;                                // 0x0FE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnChangeAIState;                                   // 0x0FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, TSoftObjectPtr<class UAnimMontage>> StayAttackMontages;                                // 0x0FF8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_Door_C*                             ConnectedDoor;                                     // 0x1048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SinglePlayDamageAnimation;                         // 0x1050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1051[0x7];                                     // 0x1051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartHealth;                                       // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             DismembermentEvent;                                // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultLootDropChance;                             // 0x1068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSleepingZombie;                                  // 0x106C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106D[0x3];                                     // 0x106D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             Item_Info;                                         // 0x1070(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          OneShotSWATAnimation;                              // 0x1290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockSWATDismemberment;                            // 0x1291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1292[0x6];                                     // 0x1292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           AttackingTimer;                                    // 0x1298(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_AttackingArm                                AttackingArm;                                      // 0x12A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A1[0x7];                                     // 0x12A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             HitRegistered;                                     // 0x12A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ATargetPoint*>                   Patrolling_Path;                                   // 0x12B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           CheckPlayerIsNear_Timer;                           // 0x12C8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSoundsLoaded;                                     // 0x12D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12D1[0x7];                                     // 0x12D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, TSoftObjectPtr<class UAnimMontage>> DamagedMontagesWithoutScream;                      // 0x12D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVertexDetectAndPaintFundementalsStruct> HeadWounds;                                        // 0x1328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVertexDetectAndPaintFundementalsStruct> BodyWounds;                                        // 0x1338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVertexDetectAndPaintFundementalsStruct> FeetWounds;                                        // 0x1348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FF_WoundInfo>                   BodyWoundStructs;                                  // 0x1358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bEnableVertexPainting;                             // 0x1368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1369[0x7];                                     // 0x1369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CarWithZombie_C*                    ZombieCarBP;                                       // 0x1370(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RegAgrSoundTimer;                                  // 0x1378(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Day_ZombieLootTable;                               // 0x1380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Night_ZombieLootTable;                             // 0x1388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Witch_ZombieLootTable;                             // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             SWAT_ZombieLootTable;                              // 0x1398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             Soldier_ZombieLootTable;                           // 0x13A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Day_LootChances_1Minus2Minus3;                     // 0x13A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Night_LootChances_1Minus2Minus3;                   // 0x13B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ADropBox_LP_C*                          LootPoingBag;                                      // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              CarDoorOpenSound;                                  // 0x13D0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bPlayingAgressiveSound;                            // 0x1400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1401[0x7];                                     // 0x1401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AttackSuccessCheckDistance;                        // 0x1408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Witch_LootChances_1Minus2Minus3;                   // 0x1410(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 SWAT_LootChances_1Minus2Minus3;                    // 0x1420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           ScreamingPlayingTimer;                             // 0x1430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bSleepingModeOn;                                   // 0x1438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugIsReplicatingMovement;                        // 0x1439(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_143A[0x2];                                     // 0x143A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkMovementTickrate;                              // 0x143C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SprintMovementTickrate;                            // 0x1440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMovement_High_Tickrate;                           // 0x1444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1445[0x3];                                     // 0x1445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Movement_Tickrate_LOD_Multiplier;                  // 0x1448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowMovementTickrate;                               // 0x1450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1454[0x4];                                     // 0x1454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LowerTickrateTimer;                                // 0x1458(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Pure_Net_Update_Frequency;                         // 0x1460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1464[0x4];                                     // 0x1464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Net_Update_Frequency_LOD_Divider;                  // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SavedMeshType;                                     // 0x1470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowNetUpdateFrequency;                             // 0x1474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HighNetUpdateFrequency;                            // 0x1478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugIsReseted;                                    // 0x147C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bJustInitialized;                                  // 0x147D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_147E[0x2];                                     // 0x147E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDismembermentPart, double>              SoldierLimbsDurability;                            // 0x1480(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Soldier_LootChances_1Minus2Minus3;                 // 0x14D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RotationZ_After_Scream;                            // 0x14E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHittedByKnife;                                    // 0x14E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOverlappingWater;                                 // 0x14E5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14E6[0x2];                                     // 0x14E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckDrownTimer;                                   // 0x14E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldStopInWater;                                // 0x14F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14F1[0x7];                                     // 0x14F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaterSurfaceZ;                                     // 0x14F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DrownHeightDifference;                             // 0x1500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Drown;                                             // 0x1508(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1509[0x7];                                     // 0x1509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RagdollStopVelocityLimit;                          // 0x1510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeadDamageMultiplier;                              // 0x1518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsCityZombie;                                     // 0x1520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1521[0x7];                                     // 0x1521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDismembermentPart, double>              ClownLimbsDurability;                              // 0x1528(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             Clown_ZombieLootTable;                             // 0x1578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_Dismember_Emitter(EDismembermentPart DismembermentPart);
	void AddVertexBulletHole(struct FHitResult& HitInfo);
	void Adjust_Server_Movement_Tickrate(bool High_tickrate);
	void AdjustNetUpdateFrequency(float Net_Update_Frequency);
	void AfterDeath();
	void AIInteract(class ABP_Door_C* Door, class UArrowComponent* Arrow);
	void AnimTypeConfiguration();
	void ApplyWoundsAfterDismemberment(class UPrimitiveComponent* MeshComponent, TArray<struct FVertexDetectAndPaintFundementalsStruct>& WoundsArray);
	void ArmoredZombieParams();
	void AttachLootPoint(class AActor* LootPoint);
	void AttackInProgress();
	void AvoidFire();
	void BeforePlayDamageMontage();
	void BeginPlaySetup();
	void BloodNiagaraDeactivated();
	void BndEvt__Zombie_CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__Zombie_CapsuleComponent_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Zombie_CapsuleComponent_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Zombie_Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	struct FVector CalculateDeathImpulse(class AController*& InstigatedBy, double LastDamage, bool DiedByCar, const struct FVector& BodyImpulse);
	void CarHitParticlesAndSound(const struct FVector& HitLocation, const struct FVector& ImpactNormal);
	void ChangeIdleSound();
	void ChangeMeshByDismembermentPart(EDismembermentPart DismembermentPart, class USkeletalMesh* DismembermentMesh);
	void CheckDIsmemberDistance(const struct FVector& ExplosionLocation, bool* CanBeDismembered);
	void CheckDrown();
	bool CheckForHalfHPStunAnimation();
	void CheckIsUnderFloor();
	bool CheckLinkedQuests(class UQuest*& Quest);
	void CheckMeshStopped(double VelocityLimit, bool* MeshStopped);
	void CheckPlayerIsNear();
	void CheckRepairInvisibleZombie();
	void ClearAllTimers();
	void ClearAttackTimer();
	void ClownZombieParams();
	void ContinueMovement__DelegateSignature();
	void CorrectDismembermentPart(EDismembermentPart DismemberPart, EDismembermentPart* DismembermentPart);
	void CouldBeDismembered(EDismembermentPart DismembermentPart, bool* Yes);
	void DamageAnimReset();
	void DayZombieParams();
	void DealDamageToActor(struct FHitResult& HitResult);
	void Decals_Hit_Checker();
	void DecalsLimitter();
	void DecreaseHelmetDurability();
	void DefineAdditiveDamageMontage(class FName BoneName, const struct FVector& HitLocation, int32* MontageType);
	void DefineAngleForMontage(double HitAngle, EAngleMontage* AngleMontage);
	void DefineDismembermentbyBone(class FName BoneName, EDismembermentPart* DismembermentPart, bool* PartFounded);
	void DefineDismemberPartsForExplosion(const struct FVector& ExplosionLocation, TArray<class FName>* BonesToDismember);
	void DelayedDisableSMTick();
	void DetectAllLimbsHit();
	void DiedByMolotov();
	void DisableDismemberedBonesCollision(EDismembermentState DismembermentState);
	void EndDoorAttack();
	void ExecuteUbergraph_Zombie(int32 EntryPoint);
	void ExplosionDismemberment(const struct FVector& ExplosionLocation);
	void FilterQuests(TSet<class UQuest*>& LinkedQuestsSet, EZombieType ZombieType);
	void GenerateLootFromTables(const TArray<class FName>& ItemsToSpawn, TArray<struct FDefaultItemInfo>& OldContainerItems, TArray<struct FDefaultItemInfo>* NewContainerItems);
	void GenerateRandomLootOfType(ELootTypes Type, ESlotRarity LootTier, class FName* ID, bool* Canstack, int32* MaxCountStack, class ATDB_GameMode_C** AsTDB_Game_Mode);
	void Get_Agressive_Montage_Name(double Angle, class FString* SectionName);
	void Get_Degrees_to_Target(const struct FVector& TargetLocation, double* DesiredDegrees);
	void GetAllDecalHitBones();
	bool GetDead();
	class AZombieDeadBody_C* GetDeadBody();
	void GetDestinationToMove(class UNavigationPath* Path, struct FVector* DestinationToMove);
	void GetDIsmemberedLimbBones(TArray<class FName>* DismemberedBones);
	void GetDismembermentMesh(EDismembermentPart DismembermentPart, TSoftObjectPtr<class USkeletalMesh>* DismembermentMesh);
	void GetHeadDismembermentMesh(TSoftObjectPtr<class USkeletalMesh>* Param_Mesh);
	void GetHitAngle(class AController* InstigatedBy, double* HitAngle);
	TArray<class FName> GetItemNamesForLoot(class AController*& InstigatedBy);
	void GetLowerBodyDismembermentMesh(TSoftObjectPtr<class USkeletalMesh>* Param_Mesh);
	void GetNavData();
	void GetPseudoSurfaceTypeByBone(class FName BoneName, EPhysicalSurface* ResultSurface);
	void GetUpperBodyDismembermentMesh(TSoftObjectPtr<class USkeletalMesh>* Param_Mesh);
	void GetWoundedMeshByBone(class FName BoneName, const struct FVertexDetectAndPaintFundementalsStruct& WoundToArray, class USkeletalMeshComponent** WoundedMesh);
	void GetXP(double* XP);
	void HeadDamageDismemberment(bool EnableHeadDismemberment, TSoftObjectPtr<class USkeletalMesh>* Param_Mesh);
	void HeadDamageHandler(class AActor*& DamageCauser, double HitAngle, const struct FVector& HitLocation, class FName BoneName, class AController* InstagatedBy, struct FHitResult& HitResult, double Damage, EBPE_Weapon_Type Param_WeaponType);
	void HideZombie();
	void HitRegistered__DelegateSignature(bool Door);
	void Initialize(int32 Param_MeshType, EZombieType Type, EZombieAnimType AnimType, int32 Param_ZombieManagerIndex, const struct FVector& Location, const struct FRotator& Rotation);
	void InitializeOnBeginPlayClient();
	void InitializeZombie(int32 Param_MeshType, EZombieType Type, EZombieAnimType AnimType, int32 Param_ZombieManagerIndex, const struct FVector& Location, const struct FRotator& Rotation);
	void InitializeZombie_RPC(int32 Param_MeshType, EZombieType Type, EZombieAnimType AnimType, int32 Param_ZombieManagerIndex, const struct FVector& Location, const struct FRotator& Rotation, const TSet<class UQuest*>& Quests, const class ABP_Door_C*& Param_ConnectedDoor, const TArray<class ATargetPoint*>& PatrollingPath, bool Param_bIsCityZombie);
	void InitializeZombieController();
	void IsBandit_(bool* Param_IsBandit_);
	void IsDead_(bool* Param_IsDead_);
	void IsPlayingAttackMontage(bool* IsPlaying_);
	void IsSpecialZombie(bool* IsSpecial);
	void IsZombie_(bool* Param_IsZombie_, class APawn** Zombie);
	void IsZombie__(bool* IsZombie_);
	void KillBuggedZombie();
	void KillByZombieManager(const class AController* InstigatedBy);
	void KillZombie();
	void LoadSoundsFunction();
	void MakeBodyBleeding();
	void MakeNoiseOnScream();
	void MoveAfterDamage__DelegateSignature();
	void Multicast_AttachLootPoint(class AActor* LootPoint);
	void Multicast_CarHitEffects(const struct FVector& HitLocation, const struct FVector& ImpactNormal);
	void Multicast_ClearSoundsOnDrown();
	void Multicast_RegChaseSound();
	void Multicast_ReturnLaggedZombie();
	void Multicast_SetMovementSettings(Survival::EMovementType CPPMovementType, double SprintMaxSpeed, double SprintAcceleration);
	void Multicast_Setup_sounds();
	void MulticastAddVertexBulletHole(const struct FHitResult& HitInfo);
	void MulticastAfterDeath();
	void MulticastDismemberment(const struct FHitResult& HitInfo, EDismembermentPart DismembermentPart, EBPE_Weapon_Type Param_WeaponType, bool Param_FullHeadDismemberment, bool DoubleDismemberment, double Damage);
	void MulticastFullDismemberment(const struct FVector& Param_LimbImpulse);
	void MulticastMuteZombie();
	void MulticastPlayAdditiveDamage(int32 MontageType);
	void MulticastPlayAgressiveMontage(const TSoftObjectPtr<class UAnimMontage>& AgressiveMontageToPlay, double Angle);
	void MulticastPlayDamagedMontage(double AttackAngle, bool Param_OneShotSWATAnimation, bool HitByKnife);
	void MulticastPlayHitSound();
	void MulticastPlayReadyScreamMontage();
	void MulticastStartChasingSound();
	void MulticastStopChasingSound();
	void MulticastZombieDeath(const struct FVector& HitLocation, const struct FVector& DeathImpulse, class FName BoneName, bool DiedByGrenade, bool DiedByCar, bool KilledInHead, bool DeadByTimer);
	void NightZombieParams();
	void On_Completed_Damage_Montage();
	void On_Point_Damage(double Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void OnBlendOut_24581C954244391560E0DD9333B07FE6(class FName NotifyName);
	void OnBlendOut_2BB7CB5D4191C303A5A520B8D98ED5F0(class FName NotifyName);
	void OnBlendOut_3C8CD9D645799EC31D76F6A8A69E3B08(class FName NotifyName);
	void OnBlendOut_519674FD4362099F2E3B8182606E4D28(class FName NotifyName);
	void OnBlendOut_7A74DE324CF2891674024C94AE2E3813(class FName NotifyName);
	void OnBlendOut_81E6BFD74680B821B7A1BA89A7E4B1AD(class FName NotifyName);
	void OnBlendOut_8631FE044983DB50DFEC5FB6BBE69D2A(class FName NotifyName);
	void OnBlendOut_C114BC7346807B7E596B22B90E553AB9(class FName NotifyName);
	void OnBlendOut_D46B79E94C7A53608075F692FA4836E1(class FName NotifyName);
	void OnBlendOut_EC2DF73344E2FD8FE269889A8D65AA2C(class FName NotifyName);
	void OnBlockDoor(bool bLocked);
	void OnCarShotHear__DelegateSignature(class AActor* SenseSourceActor);
	void OnChangeAIState__DelegateSignature(class AZombie_C* Zombie, E_ZombieAIState FromState, E_ZombieAIState ToState);
	void OnCompleted_24581C954244391560E0DD9333B07FE6(class FName NotifyName);
	void OnCompleted_2BB7CB5D4191C303A5A520B8D98ED5F0(class FName NotifyName);
	void OnCompleted_3C8CD9D645799EC31D76F6A8A69E3B08(class FName NotifyName);
	void OnCompleted_519674FD4362099F2E3B8182606E4D28(class FName NotifyName);
	void OnCompleted_7A74DE324CF2891674024C94AE2E3813(class FName NotifyName);
	void OnCompleted_81E6BFD74680B821B7A1BA89A7E4B1AD(class FName NotifyName);
	void OnCompleted_8631FE044983DB50DFEC5FB6BBE69D2A(class FName NotifyName);
	void OnCompleted_C114BC7346807B7E596B22B90E553AB9(class FName NotifyName);
	void OnCompleted_D46B79E94C7A53608075F692FA4836E1(class FName NotifyName);
	void OnCompleted_EC2DF73344E2FD8FE269889A8D65AA2C(class FName NotifyName);
	void OnDamageReaction(double AttackAngle, class FName BoneName, const struct FVector& HitLocation);
	void OnDeath__DelegateSignature();
	void OnEndAttack__DelegateSignature();
	void OnEndScreaming__DelegateSignature();
	void OnEndScreamingFunc();
	void OnInterrupted_24581C954244391560E0DD9333B07FE6(class FName NotifyName);
	void OnInterrupted_2BB7CB5D4191C303A5A520B8D98ED5F0(class FName NotifyName);
	void OnInterrupted_3C8CD9D645799EC31D76F6A8A69E3B08(class FName NotifyName);
	void OnInterrupted_519674FD4362099F2E3B8182606E4D28(class FName NotifyName);
	void OnInterrupted_7A74DE324CF2891674024C94AE2E3813(class FName NotifyName);
	void OnInterrupted_81E6BFD74680B821B7A1BA89A7E4B1AD(class FName NotifyName);
	void OnInterrupted_8631FE044983DB50DFEC5FB6BBE69D2A(class FName NotifyName);
	void OnInterrupted_C114BC7346807B7E596B22B90E553AB9(class FName NotifyName);
	void OnInterrupted_D46B79E94C7A53608075F692FA4836E1(class FName NotifyName);
	void OnInterrupted_EC2DF73344E2FD8FE269889A8D65AA2C(class FName NotifyName);
	void OnLoaded_11D6FA7749B490CE8E1A4AA589CA9047(class UObject* Loaded);
	void OnLoaded_481E9FFB47FE4BE08A627E9D8FFE432F(class UObject* Loaded);
	void OnLoaded_7A871D3C42DF42B6EF8BF382A2CB9822(class UObject* Loaded);
	void OnLoaded_7DF9BE7C436B339D70C702A8A019FE69(class UObject* Loaded);
	void OnLoaded_839E2C0B402628950BCB4C889400C126(class UObject* Loaded);
	void OnLoaded_8A6E506A4A312AE6846B14B2D6124182(class UObject* Loaded);
	void OnLoaded_9D069B3643019F44798A7D8DB754C908(class UObject* Loaded);
	void OnLoaded_B34E310B4038E7659CC67680B2E4A3F3(class UObject* Loaded);
	void OnLoaded_CA29CBE545C16BDD7AC33798DAEDE7DC(class UObject* Loaded);
	void OnLoaded_D25AEA964E5920875498D4BF0EEE3D93(class UObject* Loaded);
	void OnLoaded_DBB4292043DA8186858E4F8829D5273F(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF269100C6BDD3(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF269103814709(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF269180C66D45(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF2691995C9BC1(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF2691B5452EEE(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF2691B9B66843(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF2691C2501003(class UObject* Loaded);
	void OnLoaded_F5D7EA2A48A3AC0C34FF2691FABC5C30(class UObject* Loaded);
	void OnNotifyBegin_24581C954244391560E0DD9333B07FE6(class FName NotifyName);
	void OnNotifyBegin_2BB7CB5D4191C303A5A520B8D98ED5F0(class FName NotifyName);
	void OnNotifyBegin_3C8CD9D645799EC31D76F6A8A69E3B08(class FName NotifyName);
	void OnNotifyBegin_519674FD4362099F2E3B8182606E4D28(class FName NotifyName);
	void OnNotifyBegin_7A74DE324CF2891674024C94AE2E3813(class FName NotifyName);
	void OnNotifyBegin_81E6BFD74680B821B7A1BA89A7E4B1AD(class FName NotifyName);
	void OnNotifyBegin_8631FE044983DB50DFEC5FB6BBE69D2A(class FName NotifyName);
	void OnNotifyBegin_C114BC7346807B7E596B22B90E553AB9(class FName NotifyName);
	void OnNotifyBegin_D46B79E94C7A53608075F692FA4836E1(class FName NotifyName);
	void OnNotifyBegin_EC2DF73344E2FD8FE269889A8D65AA2C(class FName NotifyName);
	void OnNotifyEnd_24581C954244391560E0DD9333B07FE6(class FName NotifyName);
	void OnNotifyEnd_2BB7CB5D4191C303A5A520B8D98ED5F0(class FName NotifyName);
	void OnNotifyEnd_3C8CD9D645799EC31D76F6A8A69E3B08(class FName NotifyName);
	void OnNotifyEnd_519674FD4362099F2E3B8182606E4D28(class FName NotifyName);
	void OnNotifyEnd_7A74DE324CF2891674024C94AE2E3813(class FName NotifyName);
	void OnNotifyEnd_81E6BFD74680B821B7A1BA89A7E4B1AD(class FName NotifyName);
	void OnNotifyEnd_8631FE044983DB50DFEC5FB6BBE69D2A(class FName NotifyName);
	void OnNotifyEnd_C114BC7346807B7E596B22B90E553AB9(class FName NotifyName);
	void OnNotifyEnd_D46B79E94C7A53608075F692FA4836E1(class FName NotifyName);
	void OnNotifyEnd_EC2DF73344E2FD8FE269889A8D65AA2C(class FName NotifyName);
	void OnRadialDamgeDeath(const struct FVector& HitLocation);
	void OnRep_CurrentTarget();
	void OnRep_LootPoingBag();
	void OnReset__DelegateSignature();
	void OnSeenActor(class AActor* SeenActor);
	void OnSetTargetActor__DelegateSignature(class AActor* TargetActor);
	void PlayDeathMontage();
	void PlayDismembermentSound(EDismembermentPart DismemberedLimb);
	void PlayHeadAdditiveDamage(const double HitAngle);
	void PreDamageAnimationPhase(bool IgnoreVelocity, bool HeadShot, bool* Continue);
	void Ragdoll_Updating();
	void RagdollStopChecker();
	void ReceiveBeginPlay();
	void ReceiveParticleData(const TArray<struct FBasicParticleData>& Data, class UNiagaraSystem* NiagaraSystem, const struct FVector& SimulationPositionOffset);
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void RegisterAgressiveSound();
	void RemoveHeadNiagara();
	void RemoveHelmet(const struct FVector& HitLocation);
	void RemoveLeftHandNiagara();
	void RemoveLeftLegNiagara();
	void RemoveRightHandNiagara();
	void RemoveRightLegNiagara();
	void ResetAttack();
	void ResetChangeIdleSound();
	void ResetZombie();
	void ReturnReplicateMovement();
	void RPC_Multicast_AddBlood(const struct FHitResult& Hit);
	void RPC_Multicast_SetWoundsOnNewMesh(class USkeletalMeshComponent* MeshComponent);
	void RPC_ReturnLaggedZombie();
	void RPC_Server_Setup_Sounds();
	void Server_RegChaseSound();
	void Server_ReplicateMovementSettings();
	void ServerApplyDismemberment(class FName BoneName, double Damage, EBPE_Weapon_Type Param_WeaponType, const struct FHitResult& HitInfo, const struct FVector& HitLocation, double HitAngle);
	void ServerFullDismemberment(const struct FVector& BodyImpulse, const struct FVector& Param_LimbImpulse, const class AController*& InstigatedBy);
	void ServerMuteZombie();
	void ServerPlayAdditiveDamage(class FName BoneName, const struct FVector& HitLocation);
	void ServerPlayAgressiveMontage(double Angle);
	void ServerPlayDamagedMontage(double AttackAngle, bool IgnoreVelocity, bool DamageInHead);
	void ServerStartChasingSound();
	void ServerStopChasingSound();
	void ServerTriggerCarZombie(const class AActor* InteractedActor);
	void Set_Loot_Point(class AZombieDeadBodyLootPoint_C* LootPoint);
	void SetCoreMeshes();
	void SetLootPoint_Server(class AZombieDeadBodyLootPoint_C* LootPoint);
	void SetLowMovementTickrate();
	void SetSkeletalMeshesTickEnabled(bool bEnabled);
	void SetupAttackTimer(E_AttackingArm Param_AttackingArm);
	void SetupCheckDrownTimer();
	void SetupSounds();
	void SetZombieTransform(struct FVector& Location, struct FRotator& Rotation);
	void ShowMeshes();
	void SoldierZombieParams();
	void SoundsOnDeath(bool KilledInHead);
	void Spawn_Decal_for_Blood(class FName BoneName);
	void SpawnChunksDecals(TArray<struct FBasicParticleData>& Data);
	void SpawnDeadBody();
	void SpawnDecalUnderLimb(const struct FVector& LimbLocation, const struct FVector& LimbDirectionAdjustment, class UMaterialInterface* DecalToSpawn, int32 DecalMinSize, int32 DecalMaxSize, double DecalLifeSpan, EDrawDebugTrace DrawDebug, class UDecalComponent** SpawnedDecal);
	void SpawnFallBloodDecal(EDismembermentPart DismembermentPart);
	void SpawnHelmetSpark(const struct FHitResult& HitInfo);
	void SpawnLootPoint(TArray<class FName>& ItemsToSpawn);
	void Start_Dismemberment(class FName BoneName, double Damage, EBPE_Weapon_Type Param_WeaponType, const struct FHitResult& HitResult, const struct FVector& HitLocation, double HitAngle, bool* Start);
	void StopAgressiveSound();
	void StopIdleSound();
	void StopStateSounds();
	void TypeConfiguration();
	void UnsetJustInitialized();
	void UpdateLimbDurability(EDismembermentPart DismemberPart, double Damage, bool* PartIsBroken);
	void VertexPaintOnAllMeshes(const struct FVertexPaintAtLocationStruct& InputPin);
	void WitchZombieParams();
	void ZombieAttack_RPC(E_AttackingArm Param_AttackingArm, bool MovingAttack, bool DoorAttack, bool CarAttack);
	void ZombieDeath_RPC(const struct FVector& HitLocation, class FName BoneName, const class AController*& InstigatedBy, bool DiedByGrenade, bool DiedByCar, bool KilledInHead, double LastDamage, const struct FVector& DeathImpulse, bool DeadByTimer);
	void ZombieDeathOnClients(const struct FVector& HitLocation, const struct FVector& DeathImpulse, class FName BoneName, bool DiedByGrenade, bool DiedByCar, bool KilledInHead, bool DeadByTimer);
	void ZombieDeathOnServer(const struct FVector& HitLocation, const struct FVector& DeathImpulse, class FName BoneName, bool DiedByGrenade, bool DiedByCar, bool KilledInHead, class AController*& InstigatedBy, bool DeadByTimer);
	void ZombieManagerNotify();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Zombie_C">();
	}
	static class AZombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZombie_C>();
	}
};
static_assert(alignof(AZombie_C) == 0x000010, "Wrong alignment on AZombie_C");
static_assert(sizeof(AZombie_C) == 0x001580, "Wrong size on AZombie_C");
static_assert(offsetof(AZombie_C, UberGraphFrame) == 0x000640, "Member 'AZombie_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AZombie_C, AudioCheckerComponent) == 0x000648, "Member 'AZombie_C::AudioCheckerComponent' has a wrong offset!");
static_assert(offsetof(AZombie_C, Head) == 0x000650, "Member 'AZombie_C::Head' has a wrong offset!");
static_assert(offsetof(AZombie_C, AIMovementComponent) == 0x000658, "Member 'AZombie_C::AIMovementComponent' has a wrong offset!");
static_assert(offsetof(AZombie_C, BPC_TickIntervalController) == 0x000660, "Member 'AZombie_C::BPC_TickIntervalController' has a wrong offset!");
static_assert(offsetof(AZombie_C, Feet) == 0x000668, "Member 'AZombie_C::Feet' has a wrong offset!");
static_assert(offsetof(AZombie_C, Body) == 0x000670, "Member 'AZombie_C::Body' has a wrong offset!");
static_assert(offsetof(AZombie_C, Health) == 0x000678, "Member 'AZombie_C::Health' has a wrong offset!");
static_assert(offsetof(AZombie_C, Dead) == 0x000680, "Member 'AZombie_C::Dead' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnDeath) == 0x000688, "Member 'AZombie_C::OnDeath' has a wrong offset!");
static_assert(offsetof(AZombie_C, MeshType) == 0x000698, "Member 'AZombie_C::MeshType' has a wrong offset!");
static_assert(offsetof(AZombie_C, LeftArmBones) == 0x0006A0, "Member 'AZombie_C::LeftArmBones' has a wrong offset!");
static_assert(offsetof(AZombie_C, RightArmBones) == 0x0006B0, "Member 'AZombie_C::RightArmBones' has a wrong offset!");
static_assert(offsetof(AZombie_C, BodyBones) == 0x0006C0, "Member 'AZombie_C::BodyBones' has a wrong offset!");
static_assert(offsetof(AZombie_C, DefaultImpulseOnDeath) == 0x0006D0, "Member 'AZombie_C::DefaultImpulseOnDeath' has a wrong offset!");
static_assert(offsetof(AZombie_C, BulletShotRange) == 0x0006D8, "Member 'AZombie_C::BulletShotRange' has a wrong offset!");
static_assert(offsetof(AZombie_C, AnimBP) == 0x0006E0, "Member 'AZombie_C::AnimBP' has a wrong offset!");
static_assert(offsetof(AZombie_C, DamageWasDealt) == 0x0006E8, "Member 'AZombie_C::DamageWasDealt' has a wrong offset!");
static_assert(offsetof(AZombie_C, SpottedSurvivor) == 0x0006E9, "Member 'AZombie_C::SpottedSurvivor' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackOnCooldown) == 0x0006EA, "Member 'AZombie_C::AttackOnCooldown' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackCooldown) == 0x0006F0, "Member 'AZombie_C::AttackCooldown' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackTimer) == 0x0006F8, "Member 'AZombie_C::AttackTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, DamagedMontages) == 0x000700, "Member 'AZombie_C::DamagedMontages' has a wrong offset!");
static_assert(offsetof(AZombie_C, BoneMeshLink) == 0x000750, "Member 'AZombie_C::BoneMeshLink' has a wrong offset!");
static_assert(offsetof(AZombie_C, HeadDismembermentState) == 0x0007A0, "Member 'AZombie_C::HeadDismembermentState' has a wrong offset!");
static_assert(offsetof(AZombie_C, BodyDismembermentState) == 0x0007A1, "Member 'AZombie_C::BodyDismembermentState' has a wrong offset!");
static_assert(offsetof(AZombie_C, FeetDismembermentState) == 0x0007A2, "Member 'AZombie_C::FeetDismembermentState' has a wrong offset!");
static_assert(offsetof(AZombie_C, Dismemberment_Part) == 0x0007A3, "Member 'AZombie_C::Dismemberment_Part' has a wrong offset!");
static_assert(offsetof(AZombie_C, Dismemberment_Mesh) == 0x0007A8, "Member 'AZombie_C::Dismemberment_Mesh' has a wrong offset!");
static_assert(offsetof(AZombie_C, DismembermentInProgress) == 0x0007B0, "Member 'AZombie_C::DismembermentInProgress' has a wrong offset!");
static_assert(offsetof(AZombie_C, G_HitBoneName) == 0x0007B4, "Member 'AZombie_C::G_HitBoneName' has a wrong offset!");
static_assert(offsetof(AZombie_C, G_Hit_Location) == 0x0007C0, "Member 'AZombie_C::G_Hit_Location' has a wrong offset!");
static_assert(offsetof(AZombie_C, G_Instigated_By) == 0x0007D8, "Member 'AZombie_C::G_Instigated_By' has a wrong offset!");
static_assert(offsetof(AZombie_C, G_Hit_Angle) == 0x0007E0, "Member 'AZombie_C::G_Hit_Angle' has a wrong offset!");
static_assert(offsetof(AZombie_C, WeaponType) == 0x0007E8, "Member 'AZombie_C::WeaponType' has a wrong offset!");
static_assert(offsetof(AZombie_C, LimbsDurability) == 0x0007F0, "Member 'AZombie_C::LimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, ExplosionDismemberDistance) == 0x000840, "Member 'AZombie_C::ExplosionDismemberDistance' has a wrong offset!");
static_assert(offsetof(AZombie_C, ExplosionDismembermentCounter) == 0x000848, "Member 'AZombie_C::ExplosionDismembermentCounter' has a wrong offset!");
static_assert(offsetof(AZombie_C, Explosion_Bones_to_Dismember) == 0x000850, "Member 'AZombie_C::Explosion_Bones_to_Dismember' has a wrong offset!");
static_assert(offsetof(AZombie_C, DismemberPartBeforeCorrection) == 0x000860, "Member 'AZombie_C::DismemberPartBeforeCorrection' has a wrong offset!");
static_assert(offsetof(AZombie_C, G_Hit_Info) == 0x000868, "Member 'AZombie_C::G_Hit_Info' has a wrong offset!");
static_assert(offsetof(AZombie_C, DismemberSnapshot) == 0x000950, "Member 'AZombie_C::DismemberSnapshot' has a wrong offset!");
static_assert(offsetof(AZombie_C, AfterRagdoll) == 0x000988, "Member 'AZombie_C::AfterRagdoll' has a wrong offset!");
static_assert(offsetof(AZombie_C, RagdollTimer) == 0x000990, "Member 'AZombie_C::RagdollTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, RagdollIsFaceUp) == 0x000998, "Member 'AZombie_C::RagdollIsFaceUp' has a wrong offset!");
static_assert(offsetof(AZombie_C, BloodDecalLocation) == 0x0009A0, "Member 'AZombie_C::BloodDecalLocation' has a wrong offset!");
static_assert(offsetof(AZombie_C, MoveAttackMontages) == 0x0009B8, "Member 'AZombie_C::MoveAttackMontages' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnEndAttack) == 0x000A08, "Member 'AZombie_C::OnEndAttack' has a wrong offset!");
static_assert(offsetof(AZombie_C, DismembermentSounds) == 0x000A18, "Member 'AZombie_C::DismembermentSounds' has a wrong offset!");
static_assert(offsetof(AZombie_C, ContinueMovement) == 0x000A28, "Member 'AZombie_C::ContinueMovement' has a wrong offset!");
static_assert(offsetof(AZombie_C, HitDecalLifeSpan) == 0x000A38, "Member 'AZombie_C::HitDecalLifeSpan' has a wrong offset!");
static_assert(offsetof(AZombie_C, PoolDecalLifeSpan) == 0x000A40, "Member 'AZombie_C::PoolDecalLifeSpan' has a wrong offset!");
static_assert(offsetof(AZombie_C, BloodDropDecalLifeSpan) == 0x000A48, "Member 'AZombie_C::BloodDropDecalLifeSpan' has a wrong offset!");
static_assert(offsetof(AZombie_C, DecalsHitTimer) == 0x000A50, "Member 'AZombie_C::DecalsHitTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, HitDecalBones) == 0x000A58, "Member 'AZombie_C::HitDecalBones' has a wrong offset!");
static_assert(offsetof(AZombie_C, Excluded_Bones) == 0x000A68, "Member 'AZombie_C::Excluded_Bones' has a wrong offset!");
static_assert(offsetof(AZombie_C, AdditiveDamage) == 0x000A78, "Member 'AZombie_C::AdditiveDamage' has a wrong offset!");
static_assert(offsetof(AZombie_C, MoveAfterDamage) == 0x000A80, "Member 'AZombie_C::MoveAfterDamage' has a wrong offset!");
static_assert(offsetof(AZombie_C, CoreDamageAnimation) == 0x000A90, "Member 'AZombie_C::CoreDamageAnimation' has a wrong offset!");
static_assert(offsetof(AZombie_C, DamageAnimResetTimer) == 0x000A98, "Member 'AZombie_C::DamageAnimResetTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, Attacking) == 0x000AA0, "Member 'AZombie_C::Attacking' has a wrong offset!");
static_assert(offsetof(AZombie_C, DeadBodySnapshot) == 0x000AA8, "Member 'AZombie_C::DeadBodySnapshot' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieDeadBodyRef) == 0x000AE0, "Member 'AZombie_C::ZombieDeadBodyRef' has a wrong offset!");
static_assert(offsetof(AZombie_C, Stunned) == 0x000AE8, "Member 'AZombie_C::Stunned' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieController) == 0x000AF0, "Member 'AZombie_C::ZombieController' has a wrong offset!");
static_assert(offsetof(AZombie_C, HeadMontageToPlay) == 0x000AF8, "Member 'AZombie_C::HeadMontageToPlay' has a wrong offset!");
static_assert(offsetof(AZombie_C, HelmetDurability) == 0x000B28, "Member 'AZombie_C::HelmetDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, SparkVFXs) == 0x000B30, "Member 'AZombie_C::SparkVFXs' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieManagerIndex) == 0x000B40, "Member 'AZombie_C::ZombieManagerIndex' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieManager) == 0x000B48, "Member 'AZombie_C::ZombieManager' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieScale) == 0x000B50, "Member 'AZombie_C::ZombieScale' has a wrong offset!");
static_assert(offsetof(AZombie_C, RagdollStopTimer) == 0x000B68, "Member 'AZombie_C::RagdollStopTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, MeshPosition) == 0x000B70, "Member 'AZombie_C::MeshPosition' has a wrong offset!");
static_assert(offsetof(AZombie_C, Partitioned_Meshes) == 0x000B88, "Member 'AZombie_C::Partitioned_Meshes' has a wrong offset!");
static_assert(offsetof(AZombie_C, IsPossessed) == 0x000B98, "Member 'AZombie_C::IsPossessed' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieManagerNotifyTimer) == 0x000BA0, "Member 'AZombie_C::ZombieManagerNotifyTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, SpawnDeadBodyTimer) == 0x000BA8, "Member 'AZombie_C::SpawnDeadBodyTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieHomeLocation) == 0x000BB0, "Member 'AZombie_C::ZombieHomeLocation' has a wrong offset!");
static_assert(offsetof(AZombie_C, IdleSoundEvent) == 0x000BC8, "Member 'AZombie_C::IdleSoundEvent' has a wrong offset!");
static_assert(offsetof(AZombie_C, AgressiveSoundEvent) == 0x000BF8, "Member 'AZombie_C::AgressiveSoundEvent' has a wrong offset!");
static_assert(offsetof(AZombie_C, DeathSound) == 0x000C28, "Member 'AZombie_C::DeathSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, IdleSoundComp) == 0x000C58, "Member 'AZombie_C::IdleSoundComp' has a wrong offset!");
static_assert(offsetof(AZombie_C, AgressiveSoundComp) == 0x000C60, "Member 'AZombie_C::AgressiveSoundComp' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnReset) == 0x000C68, "Member 'AZombie_C::OnReset' has a wrong offset!");
static_assert(offsetof(AZombie_C, IsChasing) == 0x000C78, "Member 'AZombie_C::IsChasing' has a wrong offset!");
static_assert(offsetof(AZombie_C, DismembermentMeshesRow) == 0x000C80, "Member 'AZombie_C::DismembermentMeshesRow' has a wrong offset!");
static_assert(offsetof(AZombie_C, ScreamSound) == 0x000CF0, "Member 'AZombie_C::ScreamSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, DamagedSound) == 0x000D20, "Member 'AZombie_C::DamagedSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackSound) == 0x000D50, "Member 'AZombie_C::AttackSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, WalkStepSounds) == 0x000D80, "Member 'AZombie_C::WalkStepSounds' has a wrong offset!");
static_assert(offsetof(AZombie_C, SprintStepSounds) == 0x000D90, "Member 'AZombie_C::SprintStepSounds' has a wrong offset!");
static_assert(offsetof(AZombie_C, MeshTypeDefaultValue) == 0x000DA0, "Member 'AZombie_C::MeshTypeDefaultValue' has a wrong offset!");
static_assert(offsetof(AZombie_C, CurrentTarget) == 0x000DA8, "Member 'AZombie_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnSetTargetActor) == 0x000DB0, "Member 'AZombie_C::OnSetTargetActor' has a wrong offset!");
static_assert(offsetof(AZombie_C, BloodNiagaraActive) == 0x000DC0, "Member 'AZombie_C::BloodNiagaraActive' has a wrong offset!");
static_assert(offsetof(AZombie_C, BloodNiagaraTimer) == 0x000DC8, "Member 'AZombie_C::BloodNiagaraTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, NiagaraBones) == 0x000DD0, "Member 'AZombie_C::NiagaraBones' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnEndScreaming) == 0x000DE0, "Member 'AZombie_C::OnEndScreaming' has a wrong offset!");
static_assert(offsetof(AZombie_C, NavMeshGettingTimer) == 0x000DF0, "Member 'AZombie_C::NavMeshGettingTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, NavDataName) == 0x000DF8, "Member 'AZombie_C::NavDataName' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieNavData) == 0x000E08, "Member 'AZombie_C::ZombieNavData' has a wrong offset!");
static_assert(offsetof(AZombie_C, StartScreamingKey) == 0x000E10, "Member 'AZombie_C::StartScreamingKey' has a wrong offset!");
static_assert(offsetof(AZombie_C, DecalsBones) == 0x000E18, "Member 'AZombie_C::DecalsBones' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnCarShotHear) == 0x000E28, "Member 'AZombie_C::OnCarShotHear' has a wrong offset!");
static_assert(offsetof(AZombie_C, LimbImpulse) == 0x000E38, "Member 'AZombie_C::LimbImpulse' has a wrong offset!");
static_assert(offsetof(AZombie_C, ArmoredLimbsDurability) == 0x000E50, "Member 'AZombie_C::ArmoredLimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, WitchLimbsDurability) == 0x000EA0, "Member 'AZombie_C::WitchLimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, NightLimbsDurability) == 0x000EF0, "Member 'AZombie_C::NightLimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, DayLimbsDurability) == 0x000F40, "Member 'AZombie_C::DayLimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieDamage) == 0x000F90, "Member 'AZombie_C::ZombieDamage' has a wrong offset!");
static_assert(offsetof(AZombie_C, DNA_SampleName) == 0x000FA0, "Member 'AZombie_C::DNA_SampleName' has a wrong offset!");
static_assert(offsetof(AZombie_C, LinkedQuests) == 0x000FA8, "Member 'AZombie_C::LinkedQuests' has a wrong offset!");
static_assert(offsetof(AZombie_C, FullHeadDismemberment) == 0x000FB8, "Member 'AZombie_C::FullHeadDismemberment' has a wrong offset!");
static_assert(offsetof(AZombie_C, KillZombieTimer) == 0x000FC0, "Member 'AZombie_C::KillZombieTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, Dead_by_Timer_G) == 0x000FC8, "Member 'AZombie_C::Dead_by_Timer_G' has a wrong offset!");
static_assert(offsetof(AZombie_C, ShowingTimer) == 0x000FD0, "Member 'AZombie_C::ShowingTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, DefaultQuestDropChance) == 0x000FD8, "Member 'AZombie_C::DefaultQuestDropChance' has a wrong offset!");
static_assert(offsetof(AZombie_C, SpecialQuestDropChance) == 0x000FDC, "Member 'AZombie_C::SpecialQuestDropChance' has a wrong offset!");
static_assert(offsetof(AZombie_C, DelayedSMTickTimer) == 0x000FE0, "Member 'AZombie_C::DelayedSMTickTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, OnChangeAIState) == 0x000FE8, "Member 'AZombie_C::OnChangeAIState' has a wrong offset!");
static_assert(offsetof(AZombie_C, StayAttackMontages) == 0x000FF8, "Member 'AZombie_C::StayAttackMontages' has a wrong offset!");
static_assert(offsetof(AZombie_C, ConnectedDoor) == 0x001048, "Member 'AZombie_C::ConnectedDoor' has a wrong offset!");
static_assert(offsetof(AZombie_C, SinglePlayDamageAnimation) == 0x001050, "Member 'AZombie_C::SinglePlayDamageAnimation' has a wrong offset!");
static_assert(offsetof(AZombie_C, StartHealth) == 0x001058, "Member 'AZombie_C::StartHealth' has a wrong offset!");
static_assert(offsetof(AZombie_C, DismembermentEvent) == 0x001060, "Member 'AZombie_C::DismembermentEvent' has a wrong offset!");
static_assert(offsetof(AZombie_C, DefaultLootDropChance) == 0x001068, "Member 'AZombie_C::DefaultLootDropChance' has a wrong offset!");
static_assert(offsetof(AZombie_C, IsSleepingZombie) == 0x00106C, "Member 'AZombie_C::IsSleepingZombie' has a wrong offset!");
static_assert(offsetof(AZombie_C, Item_Info) == 0x001070, "Member 'AZombie_C::Item_Info' has a wrong offset!");
static_assert(offsetof(AZombie_C, OneShotSWATAnimation) == 0x001290, "Member 'AZombie_C::OneShotSWATAnimation' has a wrong offset!");
static_assert(offsetof(AZombie_C, BlockSWATDismemberment) == 0x001291, "Member 'AZombie_C::BlockSWATDismemberment' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackingTimer) == 0x001298, "Member 'AZombie_C::AttackingTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackingArm) == 0x0012A0, "Member 'AZombie_C::AttackingArm' has a wrong offset!");
static_assert(offsetof(AZombie_C, HitRegistered) == 0x0012A8, "Member 'AZombie_C::HitRegistered' has a wrong offset!");
static_assert(offsetof(AZombie_C, Patrolling_Path) == 0x0012B8, "Member 'AZombie_C::Patrolling_Path' has a wrong offset!");
static_assert(offsetof(AZombie_C, CheckPlayerIsNear_Timer) == 0x0012C8, "Member 'AZombie_C::CheckPlayerIsNear_Timer' has a wrong offset!");
static_assert(offsetof(AZombie_C, bSoundsLoaded) == 0x0012D0, "Member 'AZombie_C::bSoundsLoaded' has a wrong offset!");
static_assert(offsetof(AZombie_C, DamagedMontagesWithoutScream) == 0x0012D8, "Member 'AZombie_C::DamagedMontagesWithoutScream' has a wrong offset!");
static_assert(offsetof(AZombie_C, HeadWounds) == 0x001328, "Member 'AZombie_C::HeadWounds' has a wrong offset!");
static_assert(offsetof(AZombie_C, BodyWounds) == 0x001338, "Member 'AZombie_C::BodyWounds' has a wrong offset!");
static_assert(offsetof(AZombie_C, FeetWounds) == 0x001348, "Member 'AZombie_C::FeetWounds' has a wrong offset!");
static_assert(offsetof(AZombie_C, BodyWoundStructs) == 0x001358, "Member 'AZombie_C::BodyWoundStructs' has a wrong offset!");
static_assert(offsetof(AZombie_C, bEnableVertexPainting) == 0x001368, "Member 'AZombie_C::bEnableVertexPainting' has a wrong offset!");
static_assert(offsetof(AZombie_C, ZombieCarBP) == 0x001370, "Member 'AZombie_C::ZombieCarBP' has a wrong offset!");
static_assert(offsetof(AZombie_C, RegAgrSoundTimer) == 0x001378, "Member 'AZombie_C::RegAgrSoundTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, Day_ZombieLootTable) == 0x001380, "Member 'AZombie_C::Day_ZombieLootTable' has a wrong offset!");
static_assert(offsetof(AZombie_C, Night_ZombieLootTable) == 0x001388, "Member 'AZombie_C::Night_ZombieLootTable' has a wrong offset!");
static_assert(offsetof(AZombie_C, Witch_ZombieLootTable) == 0x001390, "Member 'AZombie_C::Witch_ZombieLootTable' has a wrong offset!");
static_assert(offsetof(AZombie_C, SWAT_ZombieLootTable) == 0x001398, "Member 'AZombie_C::SWAT_ZombieLootTable' has a wrong offset!");
static_assert(offsetof(AZombie_C, Soldier_ZombieLootTable) == 0x0013A0, "Member 'AZombie_C::Soldier_ZombieLootTable' has a wrong offset!");
static_assert(offsetof(AZombie_C, Day_LootChances_1Minus2Minus3) == 0x0013A8, "Member 'AZombie_C::Day_LootChances_1Minus2Minus3' has a wrong offset!");
static_assert(offsetof(AZombie_C, Night_LootChances_1Minus2Minus3) == 0x0013B8, "Member 'AZombie_C::Night_LootChances_1Minus2Minus3' has a wrong offset!");
static_assert(offsetof(AZombie_C, LootPoingBag) == 0x0013C8, "Member 'AZombie_C::LootPoingBag' has a wrong offset!");
static_assert(offsetof(AZombie_C, CarDoorOpenSound) == 0x0013D0, "Member 'AZombie_C::CarDoorOpenSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, bPlayingAgressiveSound) == 0x001400, "Member 'AZombie_C::bPlayingAgressiveSound' has a wrong offset!");
static_assert(offsetof(AZombie_C, AttackSuccessCheckDistance) == 0x001408, "Member 'AZombie_C::AttackSuccessCheckDistance' has a wrong offset!");
static_assert(offsetof(AZombie_C, Witch_LootChances_1Minus2Minus3) == 0x001410, "Member 'AZombie_C::Witch_LootChances_1Minus2Minus3' has a wrong offset!");
static_assert(offsetof(AZombie_C, SWAT_LootChances_1Minus2Minus3) == 0x001420, "Member 'AZombie_C::SWAT_LootChances_1Minus2Minus3' has a wrong offset!");
static_assert(offsetof(AZombie_C, ScreamingPlayingTimer) == 0x001430, "Member 'AZombie_C::ScreamingPlayingTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, bSleepingModeOn) == 0x001438, "Member 'AZombie_C::bSleepingModeOn' has a wrong offset!");
static_assert(offsetof(AZombie_C, DebugIsReplicatingMovement) == 0x001439, "Member 'AZombie_C::DebugIsReplicatingMovement' has a wrong offset!");
static_assert(offsetof(AZombie_C, WalkMovementTickrate) == 0x00143C, "Member 'AZombie_C::WalkMovementTickrate' has a wrong offset!");
static_assert(offsetof(AZombie_C, SprintMovementTickrate) == 0x001440, "Member 'AZombie_C::SprintMovementTickrate' has a wrong offset!");
static_assert(offsetof(AZombie_C, bMovement_High_Tickrate) == 0x001444, "Member 'AZombie_C::bMovement_High_Tickrate' has a wrong offset!");
static_assert(offsetof(AZombie_C, Movement_Tickrate_LOD_Multiplier) == 0x001448, "Member 'AZombie_C::Movement_Tickrate_LOD_Multiplier' has a wrong offset!");
static_assert(offsetof(AZombie_C, LowMovementTickrate) == 0x001450, "Member 'AZombie_C::LowMovementTickrate' has a wrong offset!");
static_assert(offsetof(AZombie_C, LowerTickrateTimer) == 0x001458, "Member 'AZombie_C::LowerTickrateTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, Pure_Net_Update_Frequency) == 0x001460, "Member 'AZombie_C::Pure_Net_Update_Frequency' has a wrong offset!");
static_assert(offsetof(AZombie_C, Net_Update_Frequency_LOD_Divider) == 0x001468, "Member 'AZombie_C::Net_Update_Frequency_LOD_Divider' has a wrong offset!");
static_assert(offsetof(AZombie_C, SavedMeshType) == 0x001470, "Member 'AZombie_C::SavedMeshType' has a wrong offset!");
static_assert(offsetof(AZombie_C, LowNetUpdateFrequency) == 0x001474, "Member 'AZombie_C::LowNetUpdateFrequency' has a wrong offset!");
static_assert(offsetof(AZombie_C, HighNetUpdateFrequency) == 0x001478, "Member 'AZombie_C::HighNetUpdateFrequency' has a wrong offset!");
static_assert(offsetof(AZombie_C, DebugIsReseted) == 0x00147C, "Member 'AZombie_C::DebugIsReseted' has a wrong offset!");
static_assert(offsetof(AZombie_C, bJustInitialized) == 0x00147D, "Member 'AZombie_C::bJustInitialized' has a wrong offset!");
static_assert(offsetof(AZombie_C, SoldierLimbsDurability) == 0x001480, "Member 'AZombie_C::SoldierLimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, Soldier_LootChances_1Minus2Minus3) == 0x0014D0, "Member 'AZombie_C::Soldier_LootChances_1Minus2Minus3' has a wrong offset!");
static_assert(offsetof(AZombie_C, RotationZ_After_Scream) == 0x0014E0, "Member 'AZombie_C::RotationZ_After_Scream' has a wrong offset!");
static_assert(offsetof(AZombie_C, bHittedByKnife) == 0x0014E4, "Member 'AZombie_C::bHittedByKnife' has a wrong offset!");
static_assert(offsetof(AZombie_C, bOverlappingWater) == 0x0014E5, "Member 'AZombie_C::bOverlappingWater' has a wrong offset!");
static_assert(offsetof(AZombie_C, CheckDrownTimer) == 0x0014E8, "Member 'AZombie_C::CheckDrownTimer' has a wrong offset!");
static_assert(offsetof(AZombie_C, bShouldStopInWater) == 0x0014F0, "Member 'AZombie_C::bShouldStopInWater' has a wrong offset!");
static_assert(offsetof(AZombie_C, WaterSurfaceZ) == 0x0014F8, "Member 'AZombie_C::WaterSurfaceZ' has a wrong offset!");
static_assert(offsetof(AZombie_C, DrownHeightDifference) == 0x001500, "Member 'AZombie_C::DrownHeightDifference' has a wrong offset!");
static_assert(offsetof(AZombie_C, Drown) == 0x001508, "Member 'AZombie_C::Drown' has a wrong offset!");
static_assert(offsetof(AZombie_C, RagdollStopVelocityLimit) == 0x001510, "Member 'AZombie_C::RagdollStopVelocityLimit' has a wrong offset!");
static_assert(offsetof(AZombie_C, HeadDamageMultiplier) == 0x001518, "Member 'AZombie_C::HeadDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AZombie_C, bIsCityZombie) == 0x001520, "Member 'AZombie_C::bIsCityZombie' has a wrong offset!");
static_assert(offsetof(AZombie_C, ClownLimbsDurability) == 0x001528, "Member 'AZombie_C::ClownLimbsDurability' has a wrong offset!");
static_assert(offsetof(AZombie_C, Clown_ZombieLootTable) == 0x001578, "Member 'AZombie_C::Clown_ZombieLootTable' has a wrong offset!");

}

