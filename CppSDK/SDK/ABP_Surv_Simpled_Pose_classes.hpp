#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Surv_Simpled_Pose

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_Surv_Simpled_Pose_structs.hpp"
#include "CarTipe_structs.hpp"
#include "StanceState_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Surv_Simpled_Pose.ABP_Surv_Simpled_Pose_C
// 0x0810 (0x0B60 - 0x0350)
class UABP_Surv_Simpled_Pose_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Surv_Simpled_Pose::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0020)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0378(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0380(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0388(0x0020)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x03A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x03D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x03F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0420(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0448(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0470(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0498(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x04E0(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_4;                  // 0x0500(0x0070)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_3;                  // 0x0570(0x0070)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_3;                   // 0x05E0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0628(0x0020)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_2;                   // 0x0648(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0690(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x06D8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0720(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_2;                  // 0x0740(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x07B0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x07D0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0818(0x0020)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0838(0x0070)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x08A8(0x0070)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum_1;                   // 0x0918(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0960(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0980(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x09C8(0x0048)()
	struct FAnimNode_BlendListByEnum              AnimGraphNode_BlendListByEnum;                     // 0x0A10(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0A58(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0A78(0x00C8)()
	bool                                          K2Node_PropertyAccess_2;                           // 0x0B40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_1;                           // 0x0B41(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess;                             // 0x0B42(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0B43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceState                                  Stance;                                            // 0x0B44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B45[0x3];                                      // 0x0B45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Direction;                                         // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cond_UsingITems;                                   // 0x0B4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cond_ToAiming;                                     // 0x0B4D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cond_ToSwim;                                       // 0x0B4E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Cond_ToIdle;                                       // 0x0B4F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      CharRef;                                           // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          InTurn;                                            // 0x0B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddCharacterRotation(const struct FRotator& Amount);
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void AnimNotifyTurningInPlace(class UAnimMontage* TurnIPMontage, bool ShouldTurn, bool TurningIP, bool TurningRight);
	void BlueprintInitializeAnimation();
	void BlueprintThreadSafeUpdateAnimation(float DeltaTime);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BPI_CameraShake(class UClass* ShakeClass, bool NeedChangeScale, double Scale);
	void CallEatMesh(class FName ItemType, double DurationAttached, double AnimDelay, double DissappearDelay, double PlayRate);
	void CheckEndEat(bool* Eat_);
	void EndKnockDown();
	void ExecuteUbergraph_ABP_Surv_Simpled_Pose(int32 EntryPoint);
	void GetCameraOffset(struct FVector* PelvisOffset, struct FVector* InterpOffset);
	void GetDriving(bool* IsDriving);
	void GetFireSprayOffset(double* SprayOffset);
	void GetFPPTacticalGripOffset(struct FTransform* GripOffset);
	void GetInteractAnim(class UAnimSequence** Sequence);
	void GetInventoryLayerState(bool* Active_);
	void GetKneltTime(double* Time);
	void GetSurvController(class ASurvPC_C** SurvPC);
	void GetTacticalGripOffset(struct FTransform* GripOffset);
	void GetTacticalGripPoses(struct FS_WeaponGripType* GripPoses);
	void InFlatSurface(bool* Return);
	void IsInTurn(bool* Return);
	void IsJumpPrepare(bool* Return);
	void IsReloading(bool* Param_IsReloading);
	void IsRootRotation(bool* RM);
	void IsSpineMontage(bool* Return);
	void MovementModeChanged(EMovementMode NewParam);
	void NotifyItemUsing();
	void PlayMontage(class UAnimMontage* AnimMontage, bool IsHipfire, bool Reloading, double PlayRate, double StartTime);
	void ResetItemUsingAnim();
	void SetDash();
	void SetDriving(bool InCar, bool Driver, ECarTipe CarTipe, int32 SitIndex, bool* Nothing);
	void SetFireSprayOffset(double SprayOffset);
	void SetItemUsingAnim(class UAnimSequence* Anim, bool SpecialItem, bool CanMove, bool HasStandAnim, bool WepNotHiding);
	void SetJumpPrepare(bool Value, bool* Nothing);
	void SetLeftHandVariant(double Variant, bool* Success);
	void SetLootTarget(const struct FTransform& TargetTransform, bool* Return);
	void SetReloadingState(bool Param_IsReloading);
	void SetReloadState(bool State);
	void SetRubberDirection(double Param_Direction, bool* Nothing);
	void SetSpineMotageBool(bool Value, bool* Nothing);
	void SetThrowableHandPose(class UAnimSequence* HandPose);
	void SetUsableItemSettings(const struct FS_EatConfiguration& ItemSettings);
	void SetWeaponAnims(const struct FS_PlayerWeaponAnim& WeaponAnims, class UAnimMontage* HipFirePoseStand, class UAnimMontage* HipFirePoseCrouch);
	void SetWeaponGripType(const class FString& TacticalGripName);
	void SetWeaponType(EBPE_Weapon_Type WeaponType);
	void StartKnockdown();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Surv_Simpled_Pose_C">();
	}
	static class UABP_Surv_Simpled_Pose_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Surv_Simpled_Pose_C>();
	}
};
static_assert(alignof(UABP_Surv_Simpled_Pose_C) == 0x000010, "Wrong alignment on UABP_Surv_Simpled_Pose_C");
static_assert(sizeof(UABP_Surv_Simpled_Pose_C) == 0x000B60, "Wrong size on UABP_Surv_Simpled_Pose_C");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, UberGraphFrame) == 0x000350, "Member 'UABP_Surv_Simpled_Pose_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, __AnimBlueprintMutables) == 0x000358, "Member 'UABP_Surv_Simpled_Pose_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimBlueprintExtension_PropertyAccess) == 0x000378, "Member 'UABP_Surv_Simpled_Pose_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimBlueprintExtension_Base) == 0x000380, "Member 'UABP_Surv_Simpled_Pose_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_Root) == 0x000388, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_TransitionResult_5) == 0x0003A8, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_TransitionResult_4) == 0x0003D0, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_TransitionResult_3) == 0x0003F8, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_TransitionResult_2) == 0x000420, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_TransitionResult_1) == 0x000448, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_TransitionResult) == 0x000470, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_SequencePlayer_5) == 0x000498, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult_6) == 0x0004E0, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendSpacePlayer_4) == 0x000500, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendSpacePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendSpacePlayer_3) == 0x000570, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendSpacePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendListByEnum_3) == 0x0005E0, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendListByEnum_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult_5) == 0x000628, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendListByEnum_2) == 0x000648, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendListByEnum_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_SequencePlayer_4) == 0x000690, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_SequencePlayer_3) == 0x0006D8, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult_4) == 0x000720, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendSpacePlayer_2) == 0x000740, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendSpacePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult_3) == 0x0007B0, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_SequencePlayer_2) == 0x0007D0, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult_2) == 0x000818, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000838, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendSpacePlayer) == 0x0008A8, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendListByEnum_1) == 0x000918, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendListByEnum_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult_1) == 0x000960, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_SequencePlayer_1) == 0x000980, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_SequencePlayer) == 0x0009C8, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_BlendListByEnum) == 0x000A10, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_BlendListByEnum' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateResult) == 0x000A58, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, AnimGraphNode_StateMachine) == 0x000A78, "Member 'UABP_Surv_Simpled_Pose_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, K2Node_PropertyAccess_2) == 0x000B40, "Member 'UABP_Surv_Simpled_Pose_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, K2Node_PropertyAccess_1) == 0x000B41, "Member 'UABP_Surv_Simpled_Pose_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, K2Node_PropertyAccess) == 0x000B42, "Member 'UABP_Surv_Simpled_Pose_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, IsMoving) == 0x000B43, "Member 'UABP_Surv_Simpled_Pose_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, Stance) == 0x000B44, "Member 'UABP_Surv_Simpled_Pose_C::Stance' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, Direction) == 0x000B48, "Member 'UABP_Surv_Simpled_Pose_C::Direction' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, Cond_UsingITems) == 0x000B4C, "Member 'UABP_Surv_Simpled_Pose_C::Cond_UsingITems' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, Cond_ToAiming) == 0x000B4D, "Member 'UABP_Surv_Simpled_Pose_C::Cond_ToAiming' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, Cond_ToSwim) == 0x000B4E, "Member 'UABP_Surv_Simpled_Pose_C::Cond_ToSwim' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, Cond_ToIdle) == 0x000B4F, "Member 'UABP_Surv_Simpled_Pose_C::Cond_ToIdle' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, CharRef) == 0x000B50, "Member 'UABP_Surv_Simpled_Pose_C::CharRef' has a wrong offset!");
static_assert(offsetof(UABP_Surv_Simpled_Pose_C, InTurn) == 0x000B58, "Member 'UABP_Surv_Simpled_Pose_C::InTurn' has a wrong offset!");

}

