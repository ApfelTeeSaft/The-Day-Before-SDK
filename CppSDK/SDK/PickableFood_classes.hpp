#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PickableFood

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PickableFood.PickableFood_C
// 0x0040 (0x02D0 - 0x0290)
class APickableFood_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPickupComponent_C*                     PickupComponent;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x02B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_PickableFood_C;                               // 0x02B8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsPickable;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Consume();
	void DestroyInteractable();
	void ExecuteUbergraph_PickableFood(int32 EntryPoint);
	void GetActorType(E_ActorType* ActorType);
	void InteractClient(class APawn* Player);
	void IsLocked_(bool* Result);
	void OnBeginInteract(class APawn* Player);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void ReceiveBeginPlay();
	void ResolveOwner(class AActor* NewOwner);
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetCount(int32 Param_Count);
	void SetData(int32 Param_Count, const struct FFItemInfo& ItemInfo);
	void SetInfo(const struct FFItemInfo& Info);
	void SetMesh(const struct FFItemInfo& ItemInfo);
	void SetMeshMulti();
	void SetPickable();
	void SetTutorial3DWidgetVisibility(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PickableFood_C">();
	}
	static class APickableFood_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APickableFood_C>();
	}
};
static_assert(alignof(APickableFood_C) == 0x000008, "Wrong alignment on APickableFood_C");
static_assert(sizeof(APickableFood_C) == 0x0002D0, "Wrong size on APickableFood_C");
static_assert(offsetof(APickableFood_C, UberGraphFrame) == 0x000290, "Member 'APickableFood_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APickableFood_C, PickupComponent) == 0x000298, "Member 'APickableFood_C::PickupComponent' has a wrong offset!");
static_assert(offsetof(APickableFood_C, StaticMesh) == 0x0002A0, "Member 'APickableFood_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(APickableFood_C, DefaultSceneRoot) == 0x0002A8, "Member 'APickableFood_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APickableFood_C, Count) == 0x0002B0, "Member 'APickableFood_C::Count' has a wrong offset!");
static_assert(offsetof(APickableFood_C, Name_PickableFood_C) == 0x0002B8, "Member 'APickableFood_C::Name_PickableFood_C' has a wrong offset!");
static_assert(offsetof(APickableFood_C, IsPickable) == 0x0002C8, "Member 'APickableFood_C::IsPickable' has a wrong offset!");

}

