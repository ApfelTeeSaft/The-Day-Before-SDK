#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlEye

#include "Basic.hpp"

#include "BattlEye_classes.hpp"
#include "BattlEye_parameters.hpp"


namespace SDK
{

// Function BattlEye.BE_GameInstance.GetBEClientVersion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBE_GameInstance::GetBEClientVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameInstance", "GetBEClientVersion");

	Params::BE_GameInstance_GetBEClientVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlEye.BE_GameInstance.GetBEServerVersion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBE_GameInstance::GetBEServerVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameInstance", "GetBEServerVersion");

	Params::BE_GameInstance_GetBEServerVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlEye.BE_GameInstance.InitClient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBE_GameInstance::InitClient()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameInstance", "InitClient");

	Params::BE_GameInstance_InitClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlEye.BE_GameInstance.OnPrintMessageClient
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PMessage                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBE_GameInstance::OnPrintMessageClient(const class FString& PMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameInstance", "OnPrintMessageClient");

	Params::BE_GameInstance_OnPrintMessageClient Parms{};

	Parms.PMessage = std::move(PMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_GameInstance.OnPrintMessageServer
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class FString                           PMessage                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMessageType                            PType                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBE_GameInstance::OnPrintMessageServer(const class FString& PMessage, EMessageType PType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameInstance", "OnPrintMessageServer");

	Params::BE_GameInstance_OnPrintMessageServer Parms{};

	Parms.PMessage = std::move(PMessage);
	Parms.PType = PType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_GameInstance.OnRequestRestartClient
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// ERestartReason                          PReason                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBE_GameInstance::OnRequestRestartClient(ERestartReason PReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameInstance", "OnRequestRestartClient");

	Params::BE_GameInstance_OnRequestRestartClient Parms{};

	Parms.PReason = PReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_GameMode.GetPlayerByPID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PPID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABE_PlayerController*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABE_PlayerController* ABE_GameMode::GetPlayerByPID(int32 PPID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameMode", "GetPlayerByPID");

	Params::BE_GameMode_GetPlayerByPID Parms{};

	Parms.PPID = PPID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BattlEye.BE_GameMode.OnCheckOwnershipResult
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Ownsapp                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PID                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   SteamID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_GameMode::OnCheckOwnershipResult(bool Ownsapp, const class FString& Message, int32 PID, int64 SteamID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameMode", "OnCheckOwnershipResult");

	Params::BE_GameMode_OnCheckOwnershipResult Parms{};

	Parms.Ownsapp = Ownsapp;
	Parms.Message = std::move(Message);
	Parms.PID = PID;
	Parms.SteamID = SteamID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BattlEye.BE_GameMode.OnKickPlayer
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   PPID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PReason                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_GameMode::OnKickPlayer(int32 PPID, const class FString& PReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameMode", "OnKickPlayer");

	Params::BE_GameMode_OnKickPlayer Parms{};

	Parms.PPID = PPID;
	Parms.PReason = std::move(PReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_GameMode.OnReceivePlayerGUID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PPID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   PGUID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_GameMode::OnReceivePlayerGUID(int32 PPID, int64 PGUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_GameMode", "OnReceivePlayerGUID");

	Params::BE_GameMode_OnReceivePlayerGUID Parms{};

	Parms.PPID = PPID;
	Parms.PGUID = PGUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_PlayerController.CheckOwnership
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FString                           PSteamSessionTicket                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_PlayerController::CheckOwnership(const class FString& PSteamSessionTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "CheckOwnership");

	Params::BE_PlayerController_CheckOwnership Parms{};

	Parms.PSteamSessionTicket = std::move(PSteamSessionTicket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_PlayerController.Client_RecieveFromServer
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// TArray<int32>                           PPacketInt                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   PLength                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_PlayerController::Client_RecieveFromServer(const TArray<int32>& PPacketInt, int32 PLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "Client_RecieveFromServer");

	Params::BE_PlayerController_Client_RecieveFromServer Parms{};

	Parms.PPacketInt = std::move(PPacketInt);
	Parms.PLength = PLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_PlayerController.Client_RequestGUID
// (Net, NetReliable, Native, Event, Public, NetClient)

void ABE_PlayerController::Client_RequestGUID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "Client_RequestGUID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_PlayerController.OnSendPacket
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<int32>                           PPacketInt                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   PLength                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_PlayerController::OnSendPacket(const TArray<int32>& PPacketInt, int32 PLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "OnSendPacket");

	Params::BE_PlayerController_OnSendPacket Parms{};

	Parms.PPacketInt = std::move(PPacketInt);
	Parms.PLength = PLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_PlayerController.OnSendSteamSessionTicket
// (Event, Protected, BlueprintEvent)

void ABE_PlayerController::OnSendSteamSessionTicket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "OnSendSteamSessionTicket");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BattlEye.BE_PlayerController.Server_SendGUID
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// int64                                   PGUID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_PlayerController::Server_SendGUID(int64 PGUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "Server_SendGUID");

	Params::BE_PlayerController_Server_SendGUID Parms{};

	Parms.PGUID = PGUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BattlEye.BE_PlayerController.Server_SendToServer
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// TArray<int32>                           PPacketInt                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   PLength                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABE_PlayerController::Server_SendToServer(const TArray<int32>& PPacketInt, int32 PLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BE_PlayerController", "Server_SendToServer");

	Params::BE_PlayerController_Server_SendToServer Parms{};

	Parms.PPacketInt = std::move(PPacketInt);
	Parms.PLength = PLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

