#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vehicle_Hitch

#include "Basic.hpp"

#include "VehicleSystemPlugin_classes.hpp"
#include "Engine_structs.hpp"
#include "HitchTypes_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "HitchNetworkData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Vehicle_Hitch.Vehicle_Hitch_C
// 0x01A0 (0x0440 - 0x02A0)
class UVehicle_Hitch_C final : public UVehicleComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	EHitchTypes                                   Type;                                              // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Initialized;                                       // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHitched;                                         // 0x02AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AB[0x5];                                      // 0x02AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ConnectTypes;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        X_RotationLimit;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y_RotationLimit;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Z_RotationLimit;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HitchAnimationTimer;                               // 0x02D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AnimationLength;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     HitchConstraint;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                HitchHandle;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         ParentVehicle;                                     // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       TowHitch;                                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       TrailerHitch;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             HitchFrame1;                                       // 0x0310(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             HitchFrame2;                                       // 0x0370(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimateFrom;                                       // 0x03D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AnimateTo;                                         // 0x03E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Hitched;                                           // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Unhitched;                                         // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FHitchNetworkData                      HitchNetworkData;                                  // 0x0420(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             HitchedToDestroyed;                                // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ApplyHitchConstraint(class UVehicle_Hitch_C* Param_TowHitch, class UVehicle_Hitch_C* Param_TrailerHitch);
	void ApplyHitchFromNetwork();
	void CheckCompatibility(class UVehicle_Hitch_C* To, bool* IsCompatible);
	void CreateConstraintFrames();
	void CreateHitchConstraint();
	void ExecuteUbergraph_Vehicle_Hitch(int32 EntryPoint);
	void GetHitchedTo(class UVehicle_Hitch_C** HitchedTo);
	void GetHitchedTrailer(class AAVS_Vehicle_C** Trailer);
	void GetHitchedVehicle(class AAVS_Vehicle_C** Vehicle);
	void GetIsHitched(bool* Param_IsHitched);
	void GetOwningVehicle(class AAVS_Vehicle_C** Vehicle);
	void GetVehicleMesh(class UMeshComponent** Mesh);
	void Hitch(class UVehicle_Hitch_C* To, double Param_AnimationLength);
	void HitchAnimationFinished();
	void HitchConstraintBroken(int32 ConstraintIndex);
	void Hitched__DelegateSignature(class UVehicle_Hitch_C* Param_TowHitch, class UVehicle_Hitch_C* Param_TrailerHitch);
	void HitchedToDestroyed__DelegateSignature();
	void HitchedToDestroyed_Event();
	void HitchToOverlapped(double Param_AnimationLength);
	void InitHitch();
	void OnRep_HitchNetwork();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RPC_Server_HitchData(const struct FHitchNetworkData& Param_HitchNetworkData);
	void SetIsHitched(bool Param_IsHitched);
	void SetTowHitch(class UVehicle_Hitch_C* Param_TowHitch);
	void StartHitchAnimation(double Param_AnimationLength);
	void StopHitchAnimation();
	void Unhitch();
	void Unhitched__DelegateSignature();
	void UpdateIsHitched(class UVehicle_Hitch_C* Param_TowHitch, class UVehicle_Hitch_C* Param_TrailerHitch);
	void WakeIfValid();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Vehicle_Hitch_C">();
	}
	static class UVehicle_Hitch_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVehicle_Hitch_C>();
	}
};
static_assert(alignof(UVehicle_Hitch_C) == 0x000010, "Wrong alignment on UVehicle_Hitch_C");
static_assert(sizeof(UVehicle_Hitch_C) == 0x000440, "Wrong size on UVehicle_Hitch_C");
static_assert(offsetof(UVehicle_Hitch_C, UberGraphFrame) == 0x0002A0, "Member 'UVehicle_Hitch_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, Type) == 0x0002A8, "Member 'UVehicle_Hitch_C::Type' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, Initialized) == 0x0002A9, "Member 'UVehicle_Hitch_C::Initialized' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, IsHitched) == 0x0002AA, "Member 'UVehicle_Hitch_C::IsHitched' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, ConnectTypes) == 0x0002B0, "Member 'UVehicle_Hitch_C::ConnectTypes' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, X_RotationLimit) == 0x0002C0, "Member 'UVehicle_Hitch_C::X_RotationLimit' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, Y_RotationLimit) == 0x0002C8, "Member 'UVehicle_Hitch_C::Y_RotationLimit' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, Z_RotationLimit) == 0x0002D0, "Member 'UVehicle_Hitch_C::Z_RotationLimit' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchAnimationTimer) == 0x0002D8, "Member 'UVehicle_Hitch_C::HitchAnimationTimer' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, AnimationLength) == 0x0002E0, "Member 'UVehicle_Hitch_C::AnimationLength' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchConstraint) == 0x0002E8, "Member 'UVehicle_Hitch_C::HitchConstraint' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchHandle) == 0x0002F0, "Member 'UVehicle_Hitch_C::HitchHandle' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, ParentVehicle) == 0x0002F8, "Member 'UVehicle_Hitch_C::ParentVehicle' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, TowHitch) == 0x000300, "Member 'UVehicle_Hitch_C::TowHitch' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, TrailerHitch) == 0x000308, "Member 'UVehicle_Hitch_C::TrailerHitch' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchFrame1) == 0x000310, "Member 'UVehicle_Hitch_C::HitchFrame1' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchFrame2) == 0x000370, "Member 'UVehicle_Hitch_C::HitchFrame2' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, AnimateFrom) == 0x0003D0, "Member 'UVehicle_Hitch_C::AnimateFrom' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, AnimateTo) == 0x0003E8, "Member 'UVehicle_Hitch_C::AnimateTo' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, Hitched) == 0x000400, "Member 'UVehicle_Hitch_C::Hitched' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, Unhitched) == 0x000410, "Member 'UVehicle_Hitch_C::Unhitched' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchNetworkData) == 0x000420, "Member 'UVehicle_Hitch_C::HitchNetworkData' has a wrong offset!");
static_assert(offsetof(UVehicle_Hitch_C, HitchedToDestroyed) == 0x000430, "Member 'UVehicle_Hitch_C::HitchedToDestroyed' has a wrong offset!");

}

