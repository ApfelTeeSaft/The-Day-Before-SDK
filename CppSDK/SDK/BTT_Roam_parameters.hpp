#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Roam

#include "Basic.hpp"

#include "E_DeerState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Survival_structs.hpp"


namespace SDK::Params
{

// Function BTT_Roam.BTT_Roam_C.ExecuteUbergraph_BTT_Roam
// 0x00D8 (0x00D8 - 0x0000)
struct BTT_Roam_C_ExecuteUbergraph_BTT_Roam final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_2;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_3;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_4;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_4;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_5;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_DeerState                                   K2Node_CustomEvent_FromState;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_DeerV2_C*                           K2Node_DynamicCast_AsBP_Deer_V2;                   // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerInRange_ReturnValue;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       K2Node_Select_Default;                             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(E_DeerState FromState)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(E_DeerState FromState)>        K2Node_CreateDelegate_OutputDelegate_2;            // 0x0090(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x00A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam) == 0x000008, "Wrong alignment on BTT_Roam_C_ExecuteUbergraph_BTT_Roam");
static_assert(sizeof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam) == 0x0000D8, "Wrong size on BTT_Roam_C_ExecuteUbergraph_BTT_Roam");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, EntryPoint) == 0x000000, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_int_Variable) == 0x000004, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_byte_Variable) == 0x000018, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_byte_Variable_1) == 0x000019, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_byte_Variable_2) == 0x00001A, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_byte_Variable_3) == 0x00001B, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_byte_Variable_4) == 0x00001C, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_real_Variable) == 0x000020, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_real_Variable_1) == 0x000024, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_real_Variable_2) == 0x000028, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_real_Variable_3) == 0x00002C, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_real_Variable_4) == 0x000030, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, Temp_real_Variable_5) == 0x000034, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_CustomEvent_FromState) == 0x000038, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_CustomEvent_FromState' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_Event_OwnerController) == 0x000040, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_Event_ControlledPawn) == 0x000048, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_DynamicCast_AsBP_Deer_V2) == 0x000050, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_DynamicCast_AsBP_Deer_V2' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, CallFunc_RandomIntegerInRange_ReturnValue) == 0x00005C, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::CallFunc_RandomIntegerInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_Select_Default) == 0x000060, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_CreateDelegate_OutputDelegate_1) == 0x000080, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_CreateDelegate_OutputDelegate_2) == 0x000090, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_CreateDelegate_OutputDelegate_3) == 0x0000A0, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, K2Node_Select_Default_1) == 0x0000B0, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x0000B8, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x0000D0, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x0000D1, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ExecuteUbergraph_BTT_Roam, CallFunc_BooleanAND_ReturnValue) == 0x0000D2, "Member 'BTT_Roam_C_ExecuteUbergraph_BTT_Roam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BTT_Roam.BTT_Roam_C.OnGetScared
// 0x0001 (0x0001 - 0x0000)
struct BTT_Roam_C_OnGetScared final
{
public:
	E_DeerState                                   FromState;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Roam_C_OnGetScared) == 0x000001, "Wrong alignment on BTT_Roam_C_OnGetScared");
static_assert(sizeof(BTT_Roam_C_OnGetScared) == 0x000001, "Wrong size on BTT_Roam_C_OnGetScared");
static_assert(offsetof(BTT_Roam_C_OnGetScared, FromState) == 0x000000, "Member 'BTT_Roam_C_OnGetScared::FromState' has a wrong offset!");

// Function BTT_Roam.BTT_Roam_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_Roam_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          Param_OwnerController;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Roam_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_Roam_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_Roam_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_Roam_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_Roam_C_ReceiveExecuteAI, Param_OwnerController) == 0x000000, "Member 'BTT_Roam_C_ReceiveExecuteAI::Param_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Roam_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_Roam_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

