#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CampStub

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"


namespace SDK::Params
{

// Function BP_CampStub.BP_CampStub_C.ExecuteUbergraph_BP_CampStub
// 0x0018 (0x0018 - 0x0000)
struct BP_CampStub_C_ExecuteUbergraph_BP_CampStub final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CampPart_C*                         K2Node_DynamicCast_AsBP_Camp_Part;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CampStub_C_ExecuteUbergraph_BP_CampStub) == 0x000008, "Wrong alignment on BP_CampStub_C_ExecuteUbergraph_BP_CampStub");
static_assert(sizeof(BP_CampStub_C_ExecuteUbergraph_BP_CampStub) == 0x000018, "Wrong size on BP_CampStub_C_ExecuteUbergraph_BP_CampStub");
static_assert(offsetof(BP_CampStub_C_ExecuteUbergraph_BP_CampStub, EntryPoint) == 0x000000, "Member 'BP_CampStub_C_ExecuteUbergraph_BP_CampStub::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_CampStub_C_ExecuteUbergraph_BP_CampStub, K2Node_DynamicCast_AsBP_Camp_Part) == 0x000008, "Member 'BP_CampStub_C_ExecuteUbergraph_BP_CampStub::K2Node_DynamicCast_AsBP_Camp_Part' has a wrong offset!");
static_assert(offsetof(BP_CampStub_C_ExecuteUbergraph_BP_CampStub, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_CampStub_C_ExecuteUbergraph_BP_CampStub::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_CampStub_C_ExecuteUbergraph_BP_CampStub, CallFunc_Array_Add_ReturnValue) == 0x000014, "Member 'BP_CampStub_C_ExecuteUbergraph_BP_CampStub::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_CampStub.BP_CampStub_C.OnFocused
// 0x0018 (0x0018 - 0x0000)
struct BP_CampStub_C_OnFocused final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_InteractType                                InteractType;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LateTime;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_CampStub_C_OnFocused) == 0x000008, "Wrong alignment on BP_CampStub_C_OnFocused");
static_assert(sizeof(BP_CampStub_C_OnFocused) == 0x000018, "Wrong size on BP_CampStub_C_OnFocused");
static_assert(offsetof(BP_CampStub_C_OnFocused, Player) == 0x000000, "Member 'BP_CampStub_C_OnFocused::Player' has a wrong offset!");
static_assert(offsetof(BP_CampStub_C_OnFocused, InteractType) == 0x000008, "Member 'BP_CampStub_C_OnFocused::InteractType' has a wrong offset!");
static_assert(offsetof(BP_CampStub_C_OnFocused, LateTime) == 0x000010, "Member 'BP_CampStub_C_OnFocused::LateTime' has a wrong offset!");

}

