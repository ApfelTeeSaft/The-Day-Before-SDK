#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PickupInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PickupInterface.PickupInterface_C.GetMuzzleLocation
// 0x0018 (0x0018 - 0x0000)
struct PickupInterface_C_GetMuzzleLocation final
{
public:
	struct FVector                                Muzzle;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickupInterface_C_GetMuzzleLocation) == 0x000008, "Wrong alignment on PickupInterface_C_GetMuzzleLocation");
static_assert(sizeof(PickupInterface_C_GetMuzzleLocation) == 0x000018, "Wrong size on PickupInterface_C_GetMuzzleLocation");
static_assert(offsetof(PickupInterface_C_GetMuzzleLocation, Muzzle) == 0x000000, "Member 'PickupInterface_C_GetMuzzleLocation::Muzzle' has a wrong offset!");

// Function PickupInterface.PickupInterface_C.GetPickupComponent
// 0x0008 (0x0008 - 0x0000)
struct PickupInterface_C_GetPickupComponent final
{
public:
	class UPickupComponent_C*                     PickupCompo;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickupInterface_C_GetPickupComponent) == 0x000008, "Wrong alignment on PickupInterface_C_GetPickupComponent");
static_assert(sizeof(PickupInterface_C_GetPickupComponent) == 0x000008, "Wrong size on PickupInterface_C_GetPickupComponent");
static_assert(offsetof(PickupInterface_C_GetPickupComponent, PickupCompo) == 0x000000, "Member 'PickupInterface_C_GetPickupComponent::PickupCompo' has a wrong offset!");

// Function PickupInterface.PickupInterface_C.GetSkeletalAsset
// 0x0008 (0x0008 - 0x0000)
struct PickupInterface_C_GetSkeletalAsset final
{
public:
	class USkeletalMesh*                          SkelRef;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickupInterface_C_GetSkeletalAsset) == 0x000008, "Wrong alignment on PickupInterface_C_GetSkeletalAsset");
static_assert(sizeof(PickupInterface_C_GetSkeletalAsset) == 0x000008, "Wrong size on PickupInterface_C_GetSkeletalAsset");
static_assert(offsetof(PickupInterface_C_GetSkeletalAsset, SkelRef) == 0x000000, "Member 'PickupInterface_C_GetSkeletalAsset::SkelRef' has a wrong offset!");

// Function PickupInterface.PickupInterface_C.SetEquipped
// 0x0001 (0x0001 - 0x0000)
struct PickupInterface_C_SetEquipped final
{
public:
	bool                                          Equipped;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickupInterface_C_SetEquipped) == 0x000001, "Wrong alignment on PickupInterface_C_SetEquipped");
static_assert(sizeof(PickupInterface_C_SetEquipped) == 0x000001, "Wrong size on PickupInterface_C_SetEquipped");
static_assert(offsetof(PickupInterface_C_SetEquipped, Equipped) == 0x000000, "Member 'PickupInterface_C_SetEquipped::Equipped' has a wrong offset!");

// Function PickupInterface.PickupInterface_C.SetPickupPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct PickupInterface_C_SetPickupPhysicsEnabled final
{
public:
	bool                                          Enable_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickupInterface_C_SetPickupPhysicsEnabled) == 0x000001, "Wrong alignment on PickupInterface_C_SetPickupPhysicsEnabled");
static_assert(sizeof(PickupInterface_C_SetPickupPhysicsEnabled) == 0x000001, "Wrong size on PickupInterface_C_SetPickupPhysicsEnabled");
static_assert(offsetof(PickupInterface_C_SetPickupPhysicsEnabled, Enable_) == 0x000000, "Member 'PickupInterface_C_SetPickupPhysicsEnabled::Enable_' has a wrong offset!");

}

