#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryCollector

#include "Basic.hpp"

#include "InventoryCollector_classes.hpp"
#include "InventoryCollector_parameters.hpp"


namespace SDK
{

// Function InventoryCollector.InventoryCollector_C.CollectInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (Parm, OutParm)
// TArray<struct FFItemInfo>               ContainersData                                         (Parm, OutParm, ContainsInstancedReference)
// TArray<struct FFItemInfo>               ContainerItems                                         (Parm, OutParm, ContainsInstancedReference)
// bool                                    Succes_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryCollector_C::CollectInventory(TArray<class FString>* Data, TArray<struct FFItemInfo>* ContainersData, TArray<struct FFItemInfo>* ContainerItems, bool* Succes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "CollectInventory");

	Params::InventoryCollector_C_CollectInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	if (ContainersData != nullptr)
		*ContainersData = std::move(Parms.ContainersData);

	if (ContainerItems != nullptr)
		*ContainerItems = std::move(Parms.ContainerItems);

	if (Succes_ != nullptr)
		*Succes_ = Parms.Succes_;
}


// Function InventoryCollector.InventoryCollector_C.DebugPlaceInventory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UInventoryCollector_C::DebugPlaceInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "DebugPlaceInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryCollector.InventoryCollector_C.ExecuteUbergraph_InventoryCollector
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryCollector_C::ExecuteUbergraph_InventoryCollector(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "ExecuteUbergraph_InventoryCollector");

	Params::InventoryCollector_C_ExecuteUbergraph_InventoryCollector Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryCollector.InventoryCollector_C.PlaceInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UInventoryCollector_C::PlaceInventory(TArray<class FString>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "PlaceInventory");

	Params::InventoryCollector_C_PlaceInventory Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);
}


// Function InventoryCollector.InventoryCollector_C.ProtectiveToString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UJSI_Slot_C*>              Ref                                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<class FString>                   Str                                                    (Parm, OutParm)

void UInventoryCollector_C::ProtectiveToString(TArray<class UJSI_Slot_C*>& Ref, TArray<class FString>* Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "ProtectiveToString");

	Params::InventoryCollector_C_ProtectiveToString Parms{};

	Parms.Ref = std::move(Ref);

	UObject::ProcessEvent(Func, &Parms);

	Ref = std::move(Parms.Ref);

	if (Str != nullptr)
		*Str = std::move(Parms.Str);
}


// Function InventoryCollector.InventoryCollector_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UInventoryCollector_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryCollector.InventoryCollector_C.StringListToStructArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   StringList                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FDefaultItemInfo>         Result                                                 (Parm, OutParm, ContainsInstancedReference)

void UInventoryCollector_C::StringListToStructArray(TArray<class FString>& StringList, TArray<struct FDefaultItemInfo>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "StringListToStructArray");

	Params::InventoryCollector_C_StringListToStructArray Parms{};

	Parms.StringList = std::move(StringList);

	UObject::ProcessEvent(Func, &Parms);

	StringList = std::move(Parms.StringList);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryCollector.InventoryCollector_C.StructArrayToStringList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FContainerPickupsInfo>    Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<class FString>                   Result                                                 (Parm, OutParm)

void UInventoryCollector_C::StructArrayToStringList(TArray<struct FContainerPickupsInfo>& Data, TArray<class FString>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryCollector_C", "StructArrayToStringList");

	Params::InventoryCollector_C_StructArrayToStringList Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}

}

