#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FGearPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FGearPlugin_structs.hpp"
#include "PhysicsCore_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class FGearPlugin.FGearTelemetryDrawer
// 0x0010 (0x02B0 - 0x02A0)
#pragma pack(push, 0x1)
class alignas(0x10) UFGearTelemetryDrawer : public USceneComponent
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearTelemetryDrawer">();
	}
	static class UFGearTelemetryDrawer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearTelemetryDrawer>();
	}
};
#pragma pack(pop)
static_assert(alignof(UFGearTelemetryDrawer) == 0x000010, "Wrong alignment on UFGearTelemetryDrawer");
static_assert(sizeof(UFGearTelemetryDrawer) == 0x0002B0, "Wrong size on UFGearTelemetryDrawer");

// Class FGearPlugin.FGearEffects
// 0x0120 (0x03D0 - 0x02B0)
class UFGearEffects final : public UFGearTelemetryDrawer
{
public:
	FMulticastInlineDelegateProperty_             OnBrakeStateChanged;                               // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBackFire;                                        // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MLongSlipThreshold;                                // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLatSlipThreshold;                                 // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MEnableTireSmoke;                                  // 0x02D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MEnableSkidmarks;                                  // 0x02D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MSkidmarkMaterial;                                 // 0x02D8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MMaxMarks;                                         // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMarkWidth;                                        // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MGroundOffset;                                     // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMinDistance;                                      // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AFGearSkidmark*>                 MSmarks;                                           // 0x02F0(0x0010)(ZeroConstructor, NoClear, NativeAccessSpecifierPrivate)
	uint8                                         Pad_300[0x10];                                     // 0x0300(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MBaseVolume;                                       // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineVolume;                                     // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSkidVolume;                                       // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             MEngineHigh;                                       // 0x0320(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineHighBasePitch;                              // 0x0328(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineHighPitchScale;                             // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineHighInnerRadius;                            // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineHighFalloffDistance;                        // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        MEngineHighComponent;                              // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundWave*                             MEngineLow;                                        // 0x0340(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineLowBasePitch;                               // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineLowPitchScale;                              // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineLowInnerRadius;                             // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineLowFalloffDistance;                         // 0x0354(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioComponent*                        MEngineLowComponent;                               // 0x0358(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MEnableSkidclip;                                   // 0x0360(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MSkidclipInnerRadius;                              // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSkidclipFalloffDistance;                          // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        MSkidSoundComponent;                               // 0x0370(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBackfireInterval;                                 // 0x0378(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBackfireLimit;                                    // 0x037C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MFireRpmRatio;                                     // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MFireGearChange;                                   // 0x0384(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MFireLimiter;                                      // 0x0388(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFGearPhysicalMaterial*                 MDefaultPhysicalMaterial;                          // 0x0390(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UParticleSystemComponent*>       MSmokes;                                           // 0x0398(0x0010)(ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x28];                                     // 0x03A8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetBaseVolume();
	bool GetEnableSkidmarks();
	float GetEngineVolume();
	float GetSkidVolume();
	void SetBaseVolume(float V);
	void SetEnableSkidmarks(bool E);
	void SetEngineVolume(float V);
	void SetSkidVolume(float V);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearEffects">();
	}
	static class UFGearEffects* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearEffects>();
	}
};
static_assert(alignof(UFGearEffects) == 0x000010, "Wrong alignment on UFGearEffects");
static_assert(sizeof(UFGearEffects) == 0x0003D0, "Wrong size on UFGearEffects");
static_assert(offsetof(UFGearEffects, OnBrakeStateChanged) == 0x0002A8, "Member 'UFGearEffects::OnBrakeStateChanged' has a wrong offset!");
static_assert(offsetof(UFGearEffects, OnBackFire) == 0x0002B8, "Member 'UFGearEffects::OnBackFire' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MLongSlipThreshold) == 0x0002C8, "Member 'UFGearEffects::MLongSlipThreshold' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MLatSlipThreshold) == 0x0002CC, "Member 'UFGearEffects::MLatSlipThreshold' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEnableTireSmoke) == 0x0002D0, "Member 'UFGearEffects::MEnableTireSmoke' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEnableSkidmarks) == 0x0002D1, "Member 'UFGearEffects::MEnableSkidmarks' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSkidmarkMaterial) == 0x0002D8, "Member 'UFGearEffects::MSkidmarkMaterial' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MMaxMarks) == 0x0002E0, "Member 'UFGearEffects::MMaxMarks' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MMarkWidth) == 0x0002E4, "Member 'UFGearEffects::MMarkWidth' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MGroundOffset) == 0x0002E8, "Member 'UFGearEffects::MGroundOffset' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MMinDistance) == 0x0002EC, "Member 'UFGearEffects::MMinDistance' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSmarks) == 0x0002F0, "Member 'UFGearEffects::MSmarks' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MBaseVolume) == 0x000310, "Member 'UFGearEffects::MBaseVolume' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineVolume) == 0x000314, "Member 'UFGearEffects::MEngineVolume' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSkidVolume) == 0x000318, "Member 'UFGearEffects::MSkidVolume' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineHigh) == 0x000320, "Member 'UFGearEffects::MEngineHigh' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineHighBasePitch) == 0x000328, "Member 'UFGearEffects::MEngineHighBasePitch' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineHighPitchScale) == 0x00032C, "Member 'UFGearEffects::MEngineHighPitchScale' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineHighInnerRadius) == 0x000330, "Member 'UFGearEffects::MEngineHighInnerRadius' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineHighFalloffDistance) == 0x000334, "Member 'UFGearEffects::MEngineHighFalloffDistance' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineHighComponent) == 0x000338, "Member 'UFGearEffects::MEngineHighComponent' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineLow) == 0x000340, "Member 'UFGearEffects::MEngineLow' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineLowBasePitch) == 0x000348, "Member 'UFGearEffects::MEngineLowBasePitch' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineLowPitchScale) == 0x00034C, "Member 'UFGearEffects::MEngineLowPitchScale' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineLowInnerRadius) == 0x000350, "Member 'UFGearEffects::MEngineLowInnerRadius' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineLowFalloffDistance) == 0x000354, "Member 'UFGearEffects::MEngineLowFalloffDistance' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEngineLowComponent) == 0x000358, "Member 'UFGearEffects::MEngineLowComponent' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MEnableSkidclip) == 0x000360, "Member 'UFGearEffects::MEnableSkidclip' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSkidclipInnerRadius) == 0x000364, "Member 'UFGearEffects::MSkidclipInnerRadius' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSkidclipFalloffDistance) == 0x000368, "Member 'UFGearEffects::MSkidclipFalloffDistance' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSkidSoundComponent) == 0x000370, "Member 'UFGearEffects::MSkidSoundComponent' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MBackfireInterval) == 0x000378, "Member 'UFGearEffects::MBackfireInterval' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MBackfireLimit) == 0x00037C, "Member 'UFGearEffects::MBackfireLimit' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MFireRpmRatio) == 0x000380, "Member 'UFGearEffects::MFireRpmRatio' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MFireGearChange) == 0x000384, "Member 'UFGearEffects::MFireGearChange' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MFireLimiter) == 0x000388, "Member 'UFGearEffects::MFireLimiter' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MDefaultPhysicalMaterial) == 0x000390, "Member 'UFGearEffects::MDefaultPhysicalMaterial' has a wrong offset!");
static_assert(offsetof(UFGearEffects, MSmokes) == 0x000398, "Member 'UFGearEffects::MSmokes' has a wrong offset!");

// Class FGearPlugin.FGearAeroDynamics
// 0x0030 (0x02E0 - 0x02B0)
class UFGearAeroDynamics final : public UFGearTelemetryDrawer
{
public:
	float                                         MDragCoefficient;                                  // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDownForceCoefficient;                             // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDownForceXOffset;                                 // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B4[0x2C];                                     // 0x02B4(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetDownForceCoefficient();
	float GetDownForceXOffset();
	float GetDragCoefficient();
	void SetDownforceCoefficient(float F);
	void SetDownForceXOffset(float F);
	void SetDragCoefficient(float F);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearAeroDynamics">();
	}
	static class UFGearAeroDynamics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearAeroDynamics>();
	}
};
static_assert(alignof(UFGearAeroDynamics) == 0x000010, "Wrong alignment on UFGearAeroDynamics");
static_assert(sizeof(UFGearAeroDynamics) == 0x0002E0, "Wrong size on UFGearAeroDynamics");
static_assert(offsetof(UFGearAeroDynamics, MDragCoefficient) == 0x0002A8, "Member 'UFGearAeroDynamics::MDragCoefficient' has a wrong offset!");
static_assert(offsetof(UFGearAeroDynamics, MDownForceCoefficient) == 0x0002AC, "Member 'UFGearAeroDynamics::MDownForceCoefficient' has a wrong offset!");
static_assert(offsetof(UFGearAeroDynamics, MDownForceXOffset) == 0x0002B0, "Member 'UFGearAeroDynamics::MDownForceXOffset' has a wrong offset!");

// Class FGearPlugin.FGearAnimInstance
// 0x0010 (0x0360 - 0x0350)
class UFGearAnimInstance : public UAnimInstance
{
public:
	TArray<struct FGearBoneAxle>                  Axles;                                             // 0x0348(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_358[0x8];                                      // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearAnimInstance">();
	}
	static class UFGearAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearAnimInstance>();
	}
};
static_assert(alignof(UFGearAnimInstance) == 0x000010, "Wrong alignment on UFGearAnimInstance");
static_assert(sizeof(UFGearAnimInstance) == 0x000360, "Wrong size on UFGearAnimInstance");
static_assert(offsetof(UFGearAnimInstance, Axles) == 0x000348, "Member 'UFGearAnimInstance::Axles' has a wrong offset!");

// Class FGearPlugin.FGearArcadeAssists
// 0x00A0 (0x0350 - 0x02B0)
class UFGearArcadeAssists final : public UFGearTelemetryDrawer
{
public:
	bool                                          MRecoverAssists;                                   // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MUnderSteerRecoverPower;                           // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MOverSteerRecoverPower;                            // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMinRecoverAssistSpeed;                            // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MFullRecoverAssistSpeed;                           // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MAntirollBars;                                     // 0x02BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MFrontAntiRollPower;                               // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRearAntiRollPower;                                // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MTractionAssist;                                   // 0x02C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C9[0x3];                                      // 0x02C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MTractionAssistRatio;                              // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTractionAssistMaxSpeed;                           // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MDriftAssist;                                      // 0x02D4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MDriftAssistFrontRatio;                            // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDriftAssistRearRatio;                             // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MTorqueSplitter;                                   // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MTorqueSplitterRatio;                              // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTorqueSplitterResponseTime;                       // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MBikeHelper;                                       // 0x02EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MAntiRollSpring;                                   // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDamperSmooth;                                     // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMinLeanSpeed;                                     // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMaxLeanAngle;                                     // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMaxPitchAngle;                                    // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          MLeanInAir;                                        // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_309[0x47];                                     // 0x0309(0x0047)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAntirollBars(bool Enable);
	void SetAntiRollSpring(float V);
	void SetBikeHelper(bool Enable);
	void SetCruiseSpeed(float KmhSpeed, int32 Gear);
	void SetDamperSmooth(float V);
	void SetDriftAssist(bool Enable);
	void SetLeanInAir(bool Enable);
	void SetMaxLeanAngle(float V);
	void SetMaxPitchAngle(float V);
	void SetMinLeanSpeed(float V);
	void SetRecoverAssists(bool Enable);
	void SetTorqueSplitter(bool Enable);
	void SetTractionAssist(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearArcadeAssists">();
	}
	static class UFGearArcadeAssists* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearArcadeAssists>();
	}
};
static_assert(alignof(UFGearArcadeAssists) == 0x000010, "Wrong alignment on UFGearArcadeAssists");
static_assert(sizeof(UFGearArcadeAssists) == 0x000350, "Wrong size on UFGearArcadeAssists");
static_assert(offsetof(UFGearArcadeAssists, MRecoverAssists) == 0x0002A8, "Member 'UFGearArcadeAssists::MRecoverAssists' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MUnderSteerRecoverPower) == 0x0002AC, "Member 'UFGearArcadeAssists::MUnderSteerRecoverPower' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MOverSteerRecoverPower) == 0x0002B0, "Member 'UFGearArcadeAssists::MOverSteerRecoverPower' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MMinRecoverAssistSpeed) == 0x0002B4, "Member 'UFGearArcadeAssists::MMinRecoverAssistSpeed' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MFullRecoverAssistSpeed) == 0x0002B8, "Member 'UFGearArcadeAssists::MFullRecoverAssistSpeed' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MAntirollBars) == 0x0002BC, "Member 'UFGearArcadeAssists::MAntirollBars' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MFrontAntiRollPower) == 0x0002C0, "Member 'UFGearArcadeAssists::MFrontAntiRollPower' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MRearAntiRollPower) == 0x0002C4, "Member 'UFGearArcadeAssists::MRearAntiRollPower' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MTractionAssist) == 0x0002C8, "Member 'UFGearArcadeAssists::MTractionAssist' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MTractionAssistRatio) == 0x0002CC, "Member 'UFGearArcadeAssists::MTractionAssistRatio' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MTractionAssistMaxSpeed) == 0x0002D0, "Member 'UFGearArcadeAssists::MTractionAssistMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MDriftAssist) == 0x0002D4, "Member 'UFGearArcadeAssists::MDriftAssist' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MDriftAssistFrontRatio) == 0x0002D8, "Member 'UFGearArcadeAssists::MDriftAssistFrontRatio' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MDriftAssistRearRatio) == 0x0002DC, "Member 'UFGearArcadeAssists::MDriftAssistRearRatio' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MTorqueSplitter) == 0x0002E0, "Member 'UFGearArcadeAssists::MTorqueSplitter' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MTorqueSplitterRatio) == 0x0002E4, "Member 'UFGearArcadeAssists::MTorqueSplitterRatio' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MTorqueSplitterResponseTime) == 0x0002E8, "Member 'UFGearArcadeAssists::MTorqueSplitterResponseTime' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MBikeHelper) == 0x0002EC, "Member 'UFGearArcadeAssists::MBikeHelper' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MAntiRollSpring) == 0x0002F0, "Member 'UFGearArcadeAssists::MAntiRollSpring' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MDamperSmooth) == 0x0002F4, "Member 'UFGearArcadeAssists::MDamperSmooth' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MMinLeanSpeed) == 0x0002F8, "Member 'UFGearArcadeAssists::MMinLeanSpeed' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MMaxLeanAngle) == 0x0002FC, "Member 'UFGearArcadeAssists::MMaxLeanAngle' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MMaxPitchAngle) == 0x000300, "Member 'UFGearArcadeAssists::MMaxPitchAngle' has a wrong offset!");
static_assert(offsetof(UFGearArcadeAssists, MLeanInAir) == 0x000308, "Member 'UFGearArcadeAssists::MLeanInAir' has a wrong offset!");

// Class FGearPlugin.FGearAutoDrive
// 0x00F0 (0x03A0 - 0x02B0)
class UFGearAutoDrive final : public UFGearTelemetryDrawer
{
public:
	uint8                                         Pad_2A8[0x78];                                     // 0x02A8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          MActive;                                           // 0x0320(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFGearSpline*                           MSpline;                                           // 0x0328(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MStuckResetTime;                                   // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MResetZOffset;                                     // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            MSpeedByAngleCurve;                                // 0x0338(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            MSpeedCoeffCurve;                                  // 0x0340(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteeringDistance;                                 // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBrakingDistance;                                  // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteeringLimit;                                    // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MForwardCheckDistance;                             // 0x0354(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSideCheckDistance;                                // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MCrossCheckDistance;                               // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MAvoidanceDistance;                                // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MDebug;                                            // 0x0364(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MDebugThickness;                                   // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                 MSteeringDebugColor;                               // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                 MBrakingDebugColor;                                // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FColor                                 MAvoidanceDebugColor;                              // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x28];                                     // 0x0378(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentSplineParam();
	bool IsEnabled();
	void SetEnabled(bool B);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearAutoDrive">();
	}
	static class UFGearAutoDrive* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearAutoDrive>();
	}
};
static_assert(alignof(UFGearAutoDrive) == 0x000010, "Wrong alignment on UFGearAutoDrive");
static_assert(sizeof(UFGearAutoDrive) == 0x0003A0, "Wrong size on UFGearAutoDrive");
static_assert(offsetof(UFGearAutoDrive, MActive) == 0x000320, "Member 'UFGearAutoDrive::MActive' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSpline) == 0x000328, "Member 'UFGearAutoDrive::MSpline' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MStuckResetTime) == 0x000330, "Member 'UFGearAutoDrive::MStuckResetTime' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MResetZOffset) == 0x000334, "Member 'UFGearAutoDrive::MResetZOffset' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSpeedByAngleCurve) == 0x000338, "Member 'UFGearAutoDrive::MSpeedByAngleCurve' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSpeedCoeffCurve) == 0x000340, "Member 'UFGearAutoDrive::MSpeedCoeffCurve' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSteeringDistance) == 0x000348, "Member 'UFGearAutoDrive::MSteeringDistance' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MBrakingDistance) == 0x00034C, "Member 'UFGearAutoDrive::MBrakingDistance' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSteeringLimit) == 0x000350, "Member 'UFGearAutoDrive::MSteeringLimit' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MForwardCheckDistance) == 0x000354, "Member 'UFGearAutoDrive::MForwardCheckDistance' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSideCheckDistance) == 0x000358, "Member 'UFGearAutoDrive::MSideCheckDistance' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MCrossCheckDistance) == 0x00035C, "Member 'UFGearAutoDrive::MCrossCheckDistance' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MAvoidanceDistance) == 0x000360, "Member 'UFGearAutoDrive::MAvoidanceDistance' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MDebug) == 0x000364, "Member 'UFGearAutoDrive::MDebug' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MDebugThickness) == 0x000368, "Member 'UFGearAutoDrive::MDebugThickness' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MSteeringDebugColor) == 0x00036C, "Member 'UFGearAutoDrive::MSteeringDebugColor' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MBrakingDebugColor) == 0x000370, "Member 'UFGearAutoDrive::MBrakingDebugColor' has a wrong offset!");
static_assert(offsetof(UFGearAutoDrive, MAvoidanceDebugColor) == 0x000374, "Member 'UFGearAutoDrive::MAvoidanceDebugColor' has a wrong offset!");

// Class FGearPlugin.FGearAxle
// 0x0070 (0x0320 - 0x02B0)
class UFGearAxle final : public UFGearTelemetryDrawer
{
public:
	EFGearDifferentialType                        MDifferentialType;                                 // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A9[0x1F];                                     // 0x02A9(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MDiffStrength;                                     // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTorqueShare;                                      // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMaxSteerAngle;                                    // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MAckermanCoeff;                                    // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MAckermanReferenceIndex;                           // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MHasHandbrake;                                     // 0x02DC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MCamberAngle;                                      // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MToeAngle;                                         // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E8[0x38];                                     // 0x02E8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyWheelOptions();
	float GetAckermanCoeff();
	int32 GetAckermanReferenceIndex();
	float GetCamberAngle();
	float GetCurRpm();
	EFGearDifferentialType GetDifferentialType();
	float GetDiffStrength();
	float GetFeedbackTorque();
	struct FVector GetGlobalCenter();
	int32 GetIndex();
	class UFGearWheel* GetLeftWheel();
	struct FVector GetLocalCenter();
	float GetMaxRpm();
	float GetMaxSteerAngle();
	float GetNormalizedSteering();
	class UFGearWheel* GetRightWheel();
	float GetRPM();
	float GetToeAngle();
	float GetTorqueShare();
	float GetTrackWidth();
	class UFGearWheelOptions* GetWheelOptions();
	float GetWheelRPMToKMH();
	bool HasHandBrake();
	bool HasSteering();
	void SetAckermanCoeff(float F);
	void SetAckermanReferenceIndex(int32 I);
	void SetCamberAngle(float F);
	void SetDifferentialType(EFGearDifferentialType Dt);
	void SetDiffStrength(float F);
	void SetHasHandBrake(bool B);
	void SetLeftWheel(class UFGearWheel* W);
	void SetMaxSteerAngle(float F);
	void SetRightWheel(class UFGearWheel* W);
	void SetTargetSteer(float S);
	void SetToeAngle(float F);
	void SetTorqueShare(float F);
	void SetWheelOptions(class UFGearWheelOptions* Wo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearAxle">();
	}
	static class UFGearAxle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearAxle>();
	}
};
static_assert(alignof(UFGearAxle) == 0x000010, "Wrong alignment on UFGearAxle");
static_assert(sizeof(UFGearAxle) == 0x000320, "Wrong size on UFGearAxle");
static_assert(offsetof(UFGearAxle, MDifferentialType) == 0x0002A8, "Member 'UFGearAxle::MDifferentialType' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MDiffStrength) == 0x0002C8, "Member 'UFGearAxle::MDiffStrength' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MTorqueShare) == 0x0002CC, "Member 'UFGearAxle::MTorqueShare' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MMaxSteerAngle) == 0x0002D0, "Member 'UFGearAxle::MMaxSteerAngle' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MAckermanCoeff) == 0x0002D4, "Member 'UFGearAxle::MAckermanCoeff' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MAckermanReferenceIndex) == 0x0002D8, "Member 'UFGearAxle::MAckermanReferenceIndex' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MHasHandbrake) == 0x0002DC, "Member 'UFGearAxle::MHasHandbrake' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MCamberAngle) == 0x0002E0, "Member 'UFGearAxle::MCamberAngle' has a wrong offset!");
static_assert(offsetof(UFGearAxle, MToeAngle) == 0x0002E4, "Member 'UFGearAxle::MToeAngle' has a wrong offset!");

// Class FGearPlugin.FGearCustomCollision
// 0x0010 (0x0630 - 0x0620)
class UFGearCustomCollision final : public UStaticMeshComponent
{
public:
	bool                                          MOverrideChannel;                                  // 0x0620(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECollisionChannel                             MChannel;                                          // 0x0621(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_622[0xE];                                      // 0x0622(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearCustomCollision">();
	}
	static class UFGearCustomCollision* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearCustomCollision>();
	}
};
static_assert(alignof(UFGearCustomCollision) == 0x000010, "Wrong alignment on UFGearCustomCollision");
static_assert(sizeof(UFGearCustomCollision) == 0x000630, "Wrong size on UFGearCustomCollision");
static_assert(offsetof(UFGearCustomCollision, MOverrideChannel) == 0x000620, "Member 'UFGearCustomCollision::MOverrideChannel' has a wrong offset!");
static_assert(offsetof(UFGearCustomCollision, MChannel) == 0x000621, "Member 'UFGearCustomCollision::MChannel' has a wrong offset!");

// Class FGearPlugin.FGearEngine
// 0x0040 (0x02F0 - 0x02B0)
class UFGearEngine final : public UFGearTelemetryDrawer
{
public:
	class UCurveFloat*                            MTorqueCurve;                                      // 0x02A8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTorqueScale;                                      // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MFrictionTorque;                                   // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MIdleRpm;                                          // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLimitRpm;                                         // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLimiterTime;                                      // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MEngineInertia;                                    // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C8[0x28];                                     // 0x02C8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CalculateMaxPower(float* MaxPower, float* MaxPowerRpm);
	float GetEngineInertia();
	float GetFrictionTorque();
	float GetIdleRpm();
	float GetLimiterTime();
	float GetLimitRpm();
	float GetRPM();
	float GetRpmRatio();
	float GetThrottle();
	float GetTorque();
	class UCurveFloat* GetTorqueCurve();
	float GetTorqueScale();
	bool IsLimiterOn();
	bool IsRunning();
	void ResetRpm();
	void SetEngineInertia(float F);
	void SetFrictionTorque(float F);
	void SetIdleRpm(float F);
	void SetLimiter(float L);
	void SetLimiterTime(float F);
	void SetLimitRpm(float F);
	void SetRpm(float F);
	void SetRunning(bool B);
	void SetThrottle(float Pedal);
	void SetTorqueCurve(class UCurveFloat* Curve);
	void SetTorqueScale(float F);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearEngine">();
	}
	static class UFGearEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearEngine>();
	}
};
static_assert(alignof(UFGearEngine) == 0x000010, "Wrong alignment on UFGearEngine");
static_assert(sizeof(UFGearEngine) == 0x0002F0, "Wrong size on UFGearEngine");
static_assert(offsetof(UFGearEngine, MTorqueCurve) == 0x0002A8, "Member 'UFGearEngine::MTorqueCurve' has a wrong offset!");
static_assert(offsetof(UFGearEngine, MTorqueScale) == 0x0002B0, "Member 'UFGearEngine::MTorqueScale' has a wrong offset!");
static_assert(offsetof(UFGearEngine, MFrictionTorque) == 0x0002B4, "Member 'UFGearEngine::MFrictionTorque' has a wrong offset!");
static_assert(offsetof(UFGearEngine, MIdleRpm) == 0x0002B8, "Member 'UFGearEngine::MIdleRpm' has a wrong offset!");
static_assert(offsetof(UFGearEngine, MLimitRpm) == 0x0002BC, "Member 'UFGearEngine::MLimitRpm' has a wrong offset!");
static_assert(offsetof(UFGearEngine, MLimiterTime) == 0x0002C0, "Member 'UFGearEngine::MLimiterTime' has a wrong offset!");
static_assert(offsetof(UFGearEngine, MEngineInertia) == 0x0002C4, "Member 'UFGearEngine::MEngineInertia' has a wrong offset!");

// Class FGearPlugin.FGearOrbitCamera
// 0x0040 (0x02F0 - 0x02B0)
class UFGearOrbitCamera final : public UFGearTelemetryDrawer
{
public:
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          MDriftMode;                                        // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MFreeze;                                           // 0x02B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MSpring;                                           // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDistance;                                         // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTargetZOffset;                                    // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTiltAngle;                                        // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C4[0x2C];                                     // 0x02C4(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InjectMouseDX(float Mx);
	void InjectMouseDY(float My);
	void InjectMouseDZ(float Mz);
	void SetDistance(float D);
	void SetDriftMode(bool Dm);
	void SetFreeze(bool F);
	void SetOrbitMode(bool Orbit);
	void SetRotationOffset(float Angle);
	void SetSpring(float S);
	void SetTargetZOffset(float Z);
	void SetTiltAngle(float T);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearOrbitCamera">();
	}
	static class UFGearOrbitCamera* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearOrbitCamera>();
	}
};
static_assert(alignof(UFGearOrbitCamera) == 0x000010, "Wrong alignment on UFGearOrbitCamera");
static_assert(sizeof(UFGearOrbitCamera) == 0x0002F0, "Wrong size on UFGearOrbitCamera");
static_assert(offsetof(UFGearOrbitCamera, MDriftMode) == 0x0002B0, "Member 'UFGearOrbitCamera::MDriftMode' has a wrong offset!");
static_assert(offsetof(UFGearOrbitCamera, MFreeze) == 0x0002B1, "Member 'UFGearOrbitCamera::MFreeze' has a wrong offset!");
static_assert(offsetof(UFGearOrbitCamera, MSpring) == 0x0002B4, "Member 'UFGearOrbitCamera::MSpring' has a wrong offset!");
static_assert(offsetof(UFGearOrbitCamera, MDistance) == 0x0002B8, "Member 'UFGearOrbitCamera::MDistance' has a wrong offset!");
static_assert(offsetof(UFGearOrbitCamera, MTargetZOffset) == 0x0002BC, "Member 'UFGearOrbitCamera::MTargetZOffset' has a wrong offset!");
static_assert(offsetof(UFGearOrbitCamera, MTiltAngle) == 0x0002C0, "Member 'UFGearOrbitCamera::MTiltAngle' has a wrong offset!");

// Class FGearPlugin.FGearPhysicalMaterial
// 0x0020 (0x00A0 - 0x0080)
class UFGearPhysicalMaterial final : public UPhysicalMaterial
{
public:
	bool                                          MReceiveSkidmark;                                  // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MFriction;                                         // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MRoughness;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        MSmokeParticle;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             MSkidClip;                                         // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearPhysicalMaterial">();
	}
	static class UFGearPhysicalMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearPhysicalMaterial>();
	}
};
static_assert(alignof(UFGearPhysicalMaterial) == 0x000008, "Wrong alignment on UFGearPhysicalMaterial");
static_assert(sizeof(UFGearPhysicalMaterial) == 0x0000A0, "Wrong size on UFGearPhysicalMaterial");
static_assert(offsetof(UFGearPhysicalMaterial, MReceiveSkidmark) == 0x000080, "Member 'UFGearPhysicalMaterial::MReceiveSkidmark' has a wrong offset!");
static_assert(offsetof(UFGearPhysicalMaterial, MFriction) == 0x000084, "Member 'UFGearPhysicalMaterial::MFriction' has a wrong offset!");
static_assert(offsetof(UFGearPhysicalMaterial, MRoughness) == 0x000088, "Member 'UFGearPhysicalMaterial::MRoughness' has a wrong offset!");
static_assert(offsetof(UFGearPhysicalMaterial, MSmokeParticle) == 0x000090, "Member 'UFGearPhysicalMaterial::MSmokeParticle' has a wrong offset!");
static_assert(offsetof(UFGearPhysicalMaterial, MSkidClip) == 0x000098, "Member 'UFGearPhysicalMaterial::MSkidClip' has a wrong offset!");

// Class FGearPlugin.FGearReplication
// 0x0270 (0x0520 - 0x02B0)
class UFGearReplication final : public UFGearTelemetryDrawer
{
public:
	bool                                          MEnabled;                                          // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MClientAuthority;                                  // 0x02A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MInputSendRate;                                    // 0x02AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MInputBufferSize;                                  // 0x02AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MStateReplication;                                 // 0x02AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MClientPrediction;                                 // 0x02AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MStateSendRate;                                    // 0x02AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2AF[0x1];                                      // 0x02AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MServerTime;                                       // 0x02B0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B4[0x1C];                                     // 0x02B4(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFGearInputState                       MLastInput;                                        // 0x02D0(0x001C)(Net, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MServerGear;                                       // 0x02F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F4[0x22C];                                    // 0x02F4(0x022C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientReceiveState(float Time, const struct FVector& Pos, const struct FQuat& Rot, const struct FVector& Vel, const struct FVector& Avel);
	bool IsEnabled();
	void OnPossessed_Client();
	void OnUnPossessed_Client();
	void ServerReceiveInputs(const struct FGearInputStateBuffer& Inputs);
	void ServerReceiveState(float Time, const struct FVector& Pos, const struct FQuat& Rot, const struct FVector& Vel, const struct FVector& Avel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearReplication">();
	}
	static class UFGearReplication* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearReplication>();
	}
};
static_assert(alignof(UFGearReplication) == 0x000010, "Wrong alignment on UFGearReplication");
static_assert(sizeof(UFGearReplication) == 0x000520, "Wrong size on UFGearReplication");
static_assert(offsetof(UFGearReplication, MEnabled) == 0x0002A8, "Member 'UFGearReplication::MEnabled' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MClientAuthority) == 0x0002A9, "Member 'UFGearReplication::MClientAuthority' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MInputSendRate) == 0x0002AA, "Member 'UFGearReplication::MInputSendRate' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MInputBufferSize) == 0x0002AB, "Member 'UFGearReplication::MInputBufferSize' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MStateReplication) == 0x0002AC, "Member 'UFGearReplication::MStateReplication' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MClientPrediction) == 0x0002AD, "Member 'UFGearReplication::MClientPrediction' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MStateSendRate) == 0x0002AE, "Member 'UFGearReplication::MStateSendRate' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MServerTime) == 0x0002B0, "Member 'UFGearReplication::MServerTime' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MLastInput) == 0x0002D0, "Member 'UFGearReplication::MLastInput' has a wrong offset!");
static_assert(offsetof(UFGearReplication, MServerGear) == 0x0002F0, "Member 'UFGearReplication::MServerGear' has a wrong offset!");

// Class FGearPlugin.FGearRewindReplay
// 0x0038 (0x02C8 - 0x0290)
class AFGearRewindReplay final : public AActor
{
public:
	TArray<class AFGearVehicle*>                  MVehicleList;                                      // 0x0290(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         MStateSize;                                        // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MRewindPause;                                      // 0x02A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MReplayPause;                                      // 0x02A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A6[0x22];                                     // 0x02A6(0x0022)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetProgressValue();
	EFGearRewindReplayState GetState();
	void Play();
	void Replay(bool ResetIndex);
	void Rewind(bool ResetIndex);
	void SetReplayFrames(int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearRewindReplay">();
	}
	static class AFGearRewindReplay* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFGearRewindReplay>();
	}
};
static_assert(alignof(AFGearRewindReplay) == 0x000008, "Wrong alignment on AFGearRewindReplay");
static_assert(sizeof(AFGearRewindReplay) == 0x0002C8, "Wrong size on AFGearRewindReplay");
static_assert(offsetof(AFGearRewindReplay, MVehicleList) == 0x000290, "Member 'AFGearRewindReplay::MVehicleList' has a wrong offset!");
static_assert(offsetof(AFGearRewindReplay, MStateSize) == 0x0002A0, "Member 'AFGearRewindReplay::MStateSize' has a wrong offset!");
static_assert(offsetof(AFGearRewindReplay, MRewindPause) == 0x0002A4, "Member 'AFGearRewindReplay::MRewindPause' has a wrong offset!");
static_assert(offsetof(AFGearRewindReplay, MReplayPause) == 0x0002A5, "Member 'AFGearRewindReplay::MReplayPause' has a wrong offset!");

// Class FGearPlugin.FGearSettings
// 0x0008 (0x0040 - 0x0038)
class UFGearSettings final : public UDeveloperSettings
{
public:
	bool                                          MOverrideReplication;                              // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MEnabled;                                          // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MClientAuthority;                                  // 0x003A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MInputSendRate;                                    // 0x003B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MInputBufferSize;                                  // 0x003C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MStateReplication;                                 // 0x003D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MClientPrediction;                                 // 0x003E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MStateSendRate;                                    // 0x003F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearSettings">();
	}
	static class UFGearSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearSettings>();
	}
};
static_assert(alignof(UFGearSettings) == 0x000008, "Wrong alignment on UFGearSettings");
static_assert(sizeof(UFGearSettings) == 0x000040, "Wrong size on UFGearSettings");
static_assert(offsetof(UFGearSettings, MOverrideReplication) == 0x000038, "Member 'UFGearSettings::MOverrideReplication' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MEnabled) == 0x000039, "Member 'UFGearSettings::MEnabled' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MClientAuthority) == 0x00003A, "Member 'UFGearSettings::MClientAuthority' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MInputSendRate) == 0x00003B, "Member 'UFGearSettings::MInputSendRate' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MInputBufferSize) == 0x00003C, "Member 'UFGearSettings::MInputBufferSize' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MStateReplication) == 0x00003D, "Member 'UFGearSettings::MStateReplication' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MClientPrediction) == 0x00003E, "Member 'UFGearSettings::MClientPrediction' has a wrong offset!");
static_assert(offsetof(UFGearSettings, MStateSendRate) == 0x00003F, "Member 'UFGearSettings::MStateSendRate' has a wrong offset!");

// Class FGearPlugin.FGearSkeletalMeshComponent
// 0x0010 (0x0FE0 - 0x0FD0)
class UFGearSkeletalMeshComponent final : public USkeletalMeshComponent
{
public:
	FMulticastInlineDelegateProperty_             OnSubstepTick;                                     // 0x0FD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearSkeletalMeshComponent">();
	}
	static class UFGearSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearSkeletalMeshComponent>();
	}
};
static_assert(alignof(UFGearSkeletalMeshComponent) == 0x000010, "Wrong alignment on UFGearSkeletalMeshComponent");
static_assert(sizeof(UFGearSkeletalMeshComponent) == 0x000FE0, "Wrong size on UFGearSkeletalMeshComponent");
static_assert(offsetof(UFGearSkeletalMeshComponent, OnSubstepTick) == 0x000FD0, "Member 'UFGearSkeletalMeshComponent::OnSubstepTick' has a wrong offset!");

// Class FGearPlugin.FGearSkidmark
// 0x0090 (0x0320 - 0x0290)
class AFGearSkidmark final : public AActor
{
public:
	uint8                                         Pad_290[0x90];                                     // 0x0290(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearSkidmark">();
	}
	static class AFGearSkidmark* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFGearSkidmark>();
	}
};
static_assert(alignof(AFGearSkidmark) == 0x000008, "Wrong alignment on AFGearSkidmark");
static_assert(sizeof(AFGearSkidmark) == 0x000320, "Wrong size on AFGearSkidmark");

// Class FGearPlugin.FGearSpline
// 0x0018 (0x02A8 - 0x0290)
class AFGearSpline final : public AActor
{
public:
	class USplineComponent*                       MSplineComp;                                       // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MDebug;                                            // 0x0298(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 MDebugColor;                                       // 0x029C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDebugThickness;                                   // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MDebugIterator;                                    // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	float GetClosestParam(const struct FVector& P);
	struct FVector GetDirection(float P);
	struct FVector GetPoint(float P);
	class USplineComponent* GetSpline();
	struct FVector GetTangent(float P);
	struct FVector MoveParam(float* P, float Distance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearSpline">();
	}
	static class AFGearSpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFGearSpline>();
	}
};
static_assert(alignof(AFGearSpline) == 0x000008, "Wrong alignment on AFGearSpline");
static_assert(sizeof(AFGearSpline) == 0x0002A8, "Wrong size on AFGearSpline");
static_assert(offsetof(AFGearSpline, MSplineComp) == 0x000290, "Member 'AFGearSpline::MSplineComp' has a wrong offset!");
static_assert(offsetof(AFGearSpline, MDebug) == 0x000298, "Member 'AFGearSpline::MDebug' has a wrong offset!");
static_assert(offsetof(AFGearSpline, MDebugColor) == 0x00029C, "Member 'AFGearSpline::MDebugColor' has a wrong offset!");
static_assert(offsetof(AFGearSpline, MDebugThickness) == 0x0002A0, "Member 'AFGearSpline::MDebugThickness' has a wrong offset!");
static_assert(offsetof(AFGearSpline, MDebugIterator) == 0x0002A4, "Member 'AFGearSpline::MDebugIterator' has a wrong offset!");

// Class FGearPlugin.FGearStandardInput
// 0x0130 (0x03E0 - 0x02B0)
class UFGearStandardInput final : public UFGearTelemetryDrawer
{
public:
	bool                                          MEnabled;                                          // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MCombinedAxis;                                     // 0x02A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFGearControllerType                          MControllerType;                                   // 0x02AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFGearShifterType                             MShifterType;                                      // 0x02AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MVerticalAxis;                                     // 0x02AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MHorizontalAxis;                                   // 0x02B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MThrottleAxis;                                     // 0x02BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MBrakeAxis;                                        // 0x02C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MLeftAxis;                                         // 0x02CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MRightAxis;                                        // 0x02D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MClutchAxis;                                       // 0x02DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MHandbrakeAxis;                                    // 0x02E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShiftAxis;                                        // 0x02EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShift1Axis;                                       // 0x02F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShift2Axis;                                       // 0x02FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShift3Axis;                                       // 0x0304(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShift4Axis;                                       // 0x030C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShift5Axis;                                       // 0x0314(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShift6Axis;                                       // 0x031C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   MShiftRAxis;                                       // 0x0324(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteerSensivity;                                   // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            MSteerSpeedCurve;                                  // 0x0330(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            MSteerLimitCurve;                                  // 0x0338(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteerInputGravity;                                // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteerRange;                                       // 0x0344(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteerDeadzone;                                    // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteeringAssist;                                   // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSteeringAssistThresholdAngle;                     // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MThrottleSensivity;                                // 0x0354(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MThrottleRange;                                    // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MThrottleDeadzone;                                 // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBrakingSensivity;                                 // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBrakingRange;                                     // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBrakingDeadzone;                                  // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MClutchSensivity;                                  // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MClutchRange;                                      // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MClutchDeadzone;                                   // 0x0374(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        MInputComp;                                        // 0x0380(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_388[0x58];                                     // 0x0388(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FName GetBrakeAxis();
	float GetBrakingDeadzone();
	float GetBrakingRange();
	float GetBrakingSensivity();
	class FName GetClutchAxis();
	float GetClutchDeadzone();
	float GetClutchRange();
	float GetClutchSensivity();
	bool GetCombinedAxis();
	EFGearControllerType GetControllerType();
	class FName GetHandbrakeAxis();
	class FName GetHorizontalAxis();
	class FName GetLeftAxis();
	class FName GetRightAxis();
	class FName GetShift1Axis();
	class FName GetShift2Axis();
	class FName GetShift3Axis();
	class FName GetShift4Axis();
	class FName GetShift5Axis();
	class FName GetShift6Axis();
	class FName GetShiftAxis();
	EFGearShifterType GetShifterType();
	class FName GetShiftRAxis();
	float GetSteerDeadzone();
	float GetSteeringAssist();
	float GetSteeringAssistThresholdAngle();
	float GetSteerInputGravity();
	class UCurveFloat* GetSteerLimitCurve();
	float GetSteerRange();
	float GetSteerSensivity();
	class UCurveFloat* GetSteerSpeedCurve();
	class FName GetThrottleAxis();
	float GetThrottleDeadzone();
	float GetThrottleRange();
	float GetThrottleSensivity();
	class FName GetVerticalAxis();
	bool IsEnabled();
	bool IsSteeringAssistActive();
	void ResetInputs();
	void SetBrakeAxis(class FName S);
	void SetBrakingDeadzone(float F);
	void SetBrakingRange(float F);
	void SetBrakingSensivity(float F);
	void SetClutchAxis(class FName S);
	void SetClutchDeadzone(float F);
	void SetClutchRange(float F);
	void SetClutchSensivity(float F);
	void SetCombinedAxis(bool B);
	void SetControllerType(EFGearControllerType Ct);
	void SetEnabled(bool Enable, bool ResetInputs);
	void SetHandbrakeAxis(class FName S);
	void SetHorizontalAxis(class FName S);
	void SetInputs(float Throttle, float Brake, float Steer, float Clutch, int32 Gear, bool Hb);
	void SetLeftAxis(class FName S);
	void SetReadInputs(bool B);
	void SetRightAxis(class FName S);
	void SetShift1Axis(class FName S);
	void SetShift2Axis(class FName S);
	void SetShift3Axis(class FName S);
	void SetShift4Axis(class FName S);
	void SetShift5Axis(class FName S);
	void SetShift6Axis(class FName S);
	void SetShiftAxis(class FName S);
	void SetShifterType(EFGearShifterType St);
	void SetShiftRAxis(class FName S);
	void SetStartGridMode(bool B);
	void SetSteerDeadzone(float F);
	void SetSteeringAssist(float F);
	void SetSteeringAssistThresholdAngle(float F);
	void SetSteerInputGravity(float F);
	void SetSteerRange(float F);
	void SetSteerSensivity(float F);
	void SetThrottleAxis(class FName S);
	void SetThrottleDeadzone(float F);
	void SetThrottleRange(float F);
	void SetThrottleSensivity(float F);
	void SetVerticalAxis(class FName S);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearStandardInput">();
	}
	static class UFGearStandardInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearStandardInput>();
	}
};
static_assert(alignof(UFGearStandardInput) == 0x000010, "Wrong alignment on UFGearStandardInput");
static_assert(sizeof(UFGearStandardInput) == 0x0003E0, "Wrong size on UFGearStandardInput");
static_assert(offsetof(UFGearStandardInput, MEnabled) == 0x0002A8, "Member 'UFGearStandardInput::MEnabled' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MCombinedAxis) == 0x0002A9, "Member 'UFGearStandardInput::MCombinedAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MControllerType) == 0x0002AA, "Member 'UFGearStandardInput::MControllerType' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShifterType) == 0x0002AB, "Member 'UFGearStandardInput::MShifterType' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MVerticalAxis) == 0x0002AC, "Member 'UFGearStandardInput::MVerticalAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MHorizontalAxis) == 0x0002B4, "Member 'UFGearStandardInput::MHorizontalAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MThrottleAxis) == 0x0002BC, "Member 'UFGearStandardInput::MThrottleAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MBrakeAxis) == 0x0002C4, "Member 'UFGearStandardInput::MBrakeAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MLeftAxis) == 0x0002CC, "Member 'UFGearStandardInput::MLeftAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MRightAxis) == 0x0002D4, "Member 'UFGearStandardInput::MRightAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MClutchAxis) == 0x0002DC, "Member 'UFGearStandardInput::MClutchAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MHandbrakeAxis) == 0x0002E4, "Member 'UFGearStandardInput::MHandbrakeAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShiftAxis) == 0x0002EC, "Member 'UFGearStandardInput::MShiftAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShift1Axis) == 0x0002F4, "Member 'UFGearStandardInput::MShift1Axis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShift2Axis) == 0x0002FC, "Member 'UFGearStandardInput::MShift2Axis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShift3Axis) == 0x000304, "Member 'UFGearStandardInput::MShift3Axis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShift4Axis) == 0x00030C, "Member 'UFGearStandardInput::MShift4Axis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShift5Axis) == 0x000314, "Member 'UFGearStandardInput::MShift5Axis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShift6Axis) == 0x00031C, "Member 'UFGearStandardInput::MShift6Axis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MShiftRAxis) == 0x000324, "Member 'UFGearStandardInput::MShiftRAxis' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteerSensivity) == 0x00032C, "Member 'UFGearStandardInput::MSteerSensivity' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteerSpeedCurve) == 0x000330, "Member 'UFGearStandardInput::MSteerSpeedCurve' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteerLimitCurve) == 0x000338, "Member 'UFGearStandardInput::MSteerLimitCurve' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteerInputGravity) == 0x000340, "Member 'UFGearStandardInput::MSteerInputGravity' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteerRange) == 0x000344, "Member 'UFGearStandardInput::MSteerRange' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteerDeadzone) == 0x000348, "Member 'UFGearStandardInput::MSteerDeadzone' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteeringAssist) == 0x00034C, "Member 'UFGearStandardInput::MSteeringAssist' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MSteeringAssistThresholdAngle) == 0x000350, "Member 'UFGearStandardInput::MSteeringAssistThresholdAngle' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MThrottleSensivity) == 0x000354, "Member 'UFGearStandardInput::MThrottleSensivity' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MThrottleRange) == 0x000358, "Member 'UFGearStandardInput::MThrottleRange' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MThrottleDeadzone) == 0x00035C, "Member 'UFGearStandardInput::MThrottleDeadzone' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MBrakingSensivity) == 0x000360, "Member 'UFGearStandardInput::MBrakingSensivity' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MBrakingRange) == 0x000364, "Member 'UFGearStandardInput::MBrakingRange' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MBrakingDeadzone) == 0x000368, "Member 'UFGearStandardInput::MBrakingDeadzone' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MClutchSensivity) == 0x00036C, "Member 'UFGearStandardInput::MClutchSensivity' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MClutchRange) == 0x000370, "Member 'UFGearStandardInput::MClutchRange' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MClutchDeadzone) == 0x000374, "Member 'UFGearStandardInput::MClutchDeadzone' has a wrong offset!");
static_assert(offsetof(UFGearStandardInput, MInputComp) == 0x000380, "Member 'UFGearStandardInput::MInputComp' has a wrong offset!");

// Class FGearPlugin.FGearSuspensionConstraint
// 0x0020 (0x02D0 - 0x02B0)
class UFGearSuspensionConstraint final : public UFGearTelemetryDrawer
{
public:
	bool                                          MIsEnabled;                                        // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicsConstraintComponent*>    MJTS;                                              // 0x02B0(0x0010)(ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x10];                                     // 0x02C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnabled(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearSuspensionConstraint">();
	}
	static class UFGearSuspensionConstraint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearSuspensionConstraint>();
	}
};
static_assert(alignof(UFGearSuspensionConstraint) == 0x000010, "Wrong alignment on UFGearSuspensionConstraint");
static_assert(sizeof(UFGearSuspensionConstraint) == 0x0002D0, "Wrong size on UFGearSuspensionConstraint");
static_assert(offsetof(UFGearSuspensionConstraint, MIsEnabled) == 0x0002A8, "Member 'UFGearSuspensionConstraint::MIsEnabled' has a wrong offset!");
static_assert(offsetof(UFGearSuspensionConstraint, MJTS) == 0x0002B0, "Member 'UFGearSuspensionConstraint::MJTS' has a wrong offset!");

// Class FGearPlugin.FGearTire
// 0x0150 (0x0178 - 0x0028)
class UFGearTire : public UObject
{
public:
	struct FRuntimeFloatCurve                     MLngCurve;                                         // 0x0028(0x0088)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FRuntimeFloatCurve                     MLatCurve;                                         // 0x00B0(0x0088)(Edit, EditConst, Protected, NativeAccessSpecifierProtected)
	EFGearForceCombineMode                        MCombineMode;                                      // 0x0138(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MReferenceLoad;                                    // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MReferenceTirePressure;                            // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MForceSymmetry;                                    // 0x0144(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_145[0x33];                                     // 0x0145(0x0033)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearTire">();
	}
	static class UFGearTire* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearTire>();
	}
};
static_assert(alignof(UFGearTire) == 0x000008, "Wrong alignment on UFGearTire");
static_assert(sizeof(UFGearTire) == 0x000178, "Wrong size on UFGearTire");
static_assert(offsetof(UFGearTire, MLngCurve) == 0x000028, "Member 'UFGearTire::MLngCurve' has a wrong offset!");
static_assert(offsetof(UFGearTire, MLatCurve) == 0x0000B0, "Member 'UFGearTire::MLatCurve' has a wrong offset!");
static_assert(offsetof(UFGearTire, MCombineMode) == 0x000138, "Member 'UFGearTire::MCombineMode' has a wrong offset!");
static_assert(offsetof(UFGearTire, MReferenceLoad) == 0x00013C, "Member 'UFGearTire::MReferenceLoad' has a wrong offset!");
static_assert(offsetof(UFGearTire, MReferenceTirePressure) == 0x000140, "Member 'UFGearTire::MReferenceTirePressure' has a wrong offset!");
static_assert(offsetof(UFGearTire, MForceSymmetry) == 0x000144, "Member 'UFGearTire::MForceSymmetry' has a wrong offset!");

// Class FGearPlugin.FGearTire96
// 0x00D0 (0x0248 - 0x0178)
class UFGearTire96 final : public UFGearTire
{
public:
	float                                         MNominalLoad;                                      // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PCX1;                                              // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDX1;                                              // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDX2;                                              // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX1;                                              // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX2;                                              // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX3;                                              // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX4;                                              // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKX1;                                              // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKX2;                                              // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKX3;                                              // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHX1;                                              // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHX2;                                              // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVX1;                                              // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVX2;                                              // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PCY1;                                              // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDY1;                                              // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDY2;                                              // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDY3;                                              // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY1;                                              // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY2;                                              // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY3;                                              // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY4;                                              // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY1;                                              // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY2;                                              // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY3;                                              // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHY1;                                              // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHY2;                                              // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHY3;                                              // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY1;                                              // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY2;                                              // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY3;                                              // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY4;                                              // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBX1;                                              // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBX2;                                              // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RCX1;                                              // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REX1;                                              // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REX2;                                              // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RHX1;                                              // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY1;                                              // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY2;                                              // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY3;                                              // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RCY1;                                              // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REY1;                                              // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REY2;                                              // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RHY1;                                              // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY1;                                              // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY2;                                              // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY3;                                              // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY4;                                              // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY5;                                              // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY6;                                              // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearTire96">();
	}
	static class UFGearTire96* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearTire96>();
	}
};
static_assert(alignof(UFGearTire96) == 0x000008, "Wrong alignment on UFGearTire96");
static_assert(sizeof(UFGearTire96) == 0x000248, "Wrong size on UFGearTire96");
static_assert(offsetof(UFGearTire96, MNominalLoad) == 0x000178, "Member 'UFGearTire96::MNominalLoad' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PCX1) == 0x00017C, "Member 'UFGearTire96::PCX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PDX1) == 0x000180, "Member 'UFGearTire96::PDX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PDX2) == 0x000184, "Member 'UFGearTire96::PDX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEX1) == 0x000188, "Member 'UFGearTire96::PEX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEX2) == 0x00018C, "Member 'UFGearTire96::PEX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEX3) == 0x000190, "Member 'UFGearTire96::PEX3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEX4) == 0x000194, "Member 'UFGearTire96::PEX4' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PKX1) == 0x000198, "Member 'UFGearTire96::PKX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PKX2) == 0x00019C, "Member 'UFGearTire96::PKX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PKX3) == 0x0001A0, "Member 'UFGearTire96::PKX3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PHX1) == 0x0001A4, "Member 'UFGearTire96::PHX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PHX2) == 0x0001A8, "Member 'UFGearTire96::PHX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PVX1) == 0x0001AC, "Member 'UFGearTire96::PVX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PVX2) == 0x0001B0, "Member 'UFGearTire96::PVX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PCY1) == 0x0001B4, "Member 'UFGearTire96::PCY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PDY1) == 0x0001B8, "Member 'UFGearTire96::PDY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PDY2) == 0x0001BC, "Member 'UFGearTire96::PDY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PDY3) == 0x0001C0, "Member 'UFGearTire96::PDY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEY1) == 0x0001C4, "Member 'UFGearTire96::PEY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEY2) == 0x0001C8, "Member 'UFGearTire96::PEY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEY3) == 0x0001CC, "Member 'UFGearTire96::PEY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PEY4) == 0x0001D0, "Member 'UFGearTire96::PEY4' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PKY1) == 0x0001D4, "Member 'UFGearTire96::PKY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PKY2) == 0x0001D8, "Member 'UFGearTire96::PKY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PKY3) == 0x0001DC, "Member 'UFGearTire96::PKY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PHY1) == 0x0001E0, "Member 'UFGearTire96::PHY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PHY2) == 0x0001E4, "Member 'UFGearTire96::PHY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PHY3) == 0x0001E8, "Member 'UFGearTire96::PHY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PVY1) == 0x0001EC, "Member 'UFGearTire96::PVY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PVY2) == 0x0001F0, "Member 'UFGearTire96::PVY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PVY3) == 0x0001F4, "Member 'UFGearTire96::PVY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, PVY4) == 0x0001F8, "Member 'UFGearTire96::PVY4' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RBX1) == 0x0001FC, "Member 'UFGearTire96::RBX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RBX2) == 0x000200, "Member 'UFGearTire96::RBX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RCX1) == 0x000204, "Member 'UFGearTire96::RCX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, REX1) == 0x000208, "Member 'UFGearTire96::REX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, REX2) == 0x00020C, "Member 'UFGearTire96::REX2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RHX1) == 0x000210, "Member 'UFGearTire96::RHX1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RBY1) == 0x000214, "Member 'UFGearTire96::RBY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RBY2) == 0x000218, "Member 'UFGearTire96::RBY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RBY3) == 0x00021C, "Member 'UFGearTire96::RBY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RCY1) == 0x000220, "Member 'UFGearTire96::RCY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, REY1) == 0x000224, "Member 'UFGearTire96::REY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, REY2) == 0x000228, "Member 'UFGearTire96::REY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RHY1) == 0x00022C, "Member 'UFGearTire96::RHY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RVY1) == 0x000230, "Member 'UFGearTire96::RVY1' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RVY2) == 0x000234, "Member 'UFGearTire96::RVY2' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RVY3) == 0x000238, "Member 'UFGearTire96::RVY3' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RVY4) == 0x00023C, "Member 'UFGearTire96::RVY4' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RVY5) == 0x000240, "Member 'UFGearTire96::RVY5' has a wrong offset!");
static_assert(offsetof(UFGearTire96, RVY6) == 0x000244, "Member 'UFGearTire96::RVY6' has a wrong offset!");

// Class FGearPlugin.FGearTireMF61
// 0x0200 (0x0378 - 0x0178)
class UFGearTireMF61 final : public UFGearTire
{
public:
	float                                         MNominalLoad;                                      // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MNominalPressure;                                  // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PCX1;                                              // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDX1;                                              // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDX2;                                              // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDX3;                                              // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX1;                                              // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX2;                                              // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX3;                                              // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEX4;                                              // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKX1;                                              // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKX2;                                              // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKX3;                                              // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHX1;                                              // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHX2;                                              // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVX1;                                              // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVX2;                                              // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPX1;                                              // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPX2;                                              // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPX3;                                              // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPX4;                                              // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PCY1;                                              // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDY1;                                              // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDY2;                                              // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PDY3;                                              // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY1;                                              // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY2;                                              // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY3;                                              // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY4;                                              // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PEY5;                                              // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY1;                                              // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY2;                                              // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY3;                                              // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY4;                                              // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY5;                                              // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY6;                                              // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PKY7;                                              // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHY1;                                              // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PHY2;                                              // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY1;                                              // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY2;                                              // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY3;                                              // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PVY4;                                              // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPY1;                                              // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPY2;                                              // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPY3;                                              // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPY4;                                              // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPY5;                                              // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBX1;                                              // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBX2;                                              // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBX3;                                              // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RCX1;                                              // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REX1;                                              // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REX2;                                              // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RHX1;                                              // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY1;                                              // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY2;                                              // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY3;                                              // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RBY4;                                              // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RCY1;                                              // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REY1;                                              // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         REY2;                                              // 0x026C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RHY1;                                              // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RHY2;                                              // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY1;                                              // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY2;                                              // 0x027C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY3;                                              // 0x0280(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY4;                                              // 0x0284(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY5;                                              // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RVY6;                                              // 0x028C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX1;                                              // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX2;                                              // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX3;                                              // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX4;                                              // 0x029C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX5;                                              // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX6;                                              // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX7;                                              // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX8;                                              // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX9;                                              // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX10;                                             // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX11;                                             // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX12;                                             // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX13;                                             // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSX14;                                             // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPMX1;                                             // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY1;                                              // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY2;                                              // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY3;                                              // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY4;                                              // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY5;                                              // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY6;                                              // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY7;                                              // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QSY8;                                              // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VREF;                                              // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ1;                                              // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ2;                                              // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ3;                                              // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ4;                                              // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ5;                                              // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ9;                                              // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QBZ10;                                             // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QCZ1;                                              // 0x030C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ1;                                              // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ2;                                              // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ3;                                              // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ4;                                              // 0x031C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ6;                                              // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ7;                                              // 0x0324(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ8;                                              // 0x0328(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ9;                                              // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ10;                                             // 0x0330(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QDZ11;                                             // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QEZ1;                                              // 0x0338(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QEZ2;                                              // 0x033C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QEZ3;                                              // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QEZ4;                                              // 0x0344(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QEZ5;                                              // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QHZ1;                                              // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QHZ2;                                              // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QHZ3;                                              // 0x0354(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         QHZ4;                                              // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPZ1;                                              // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PPZ2;                                              // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SSZ1;                                              // 0x0364(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SSZ2;                                              // 0x0368(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SSZ3;                                              // 0x036C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SSZ4;                                              // 0x0370(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearTireMF61">();
	}
	static class UFGearTireMF61* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearTireMF61>();
	}
};
static_assert(alignof(UFGearTireMF61) == 0x000008, "Wrong alignment on UFGearTireMF61");
static_assert(sizeof(UFGearTireMF61) == 0x000378, "Wrong size on UFGearTireMF61");
static_assert(offsetof(UFGearTireMF61, MNominalLoad) == 0x000178, "Member 'UFGearTireMF61::MNominalLoad' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, MNominalPressure) == 0x00017C, "Member 'UFGearTireMF61::MNominalPressure' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PCX1) == 0x000180, "Member 'UFGearTireMF61::PCX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PDX1) == 0x000184, "Member 'UFGearTireMF61::PDX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PDX2) == 0x000188, "Member 'UFGearTireMF61::PDX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PDX3) == 0x00018C, "Member 'UFGearTireMF61::PDX3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEX1) == 0x000190, "Member 'UFGearTireMF61::PEX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEX2) == 0x000194, "Member 'UFGearTireMF61::PEX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEX3) == 0x000198, "Member 'UFGearTireMF61::PEX3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEX4) == 0x00019C, "Member 'UFGearTireMF61::PEX4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKX1) == 0x0001A0, "Member 'UFGearTireMF61::PKX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKX2) == 0x0001A4, "Member 'UFGearTireMF61::PKX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKX3) == 0x0001A8, "Member 'UFGearTireMF61::PKX3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PHX1) == 0x0001AC, "Member 'UFGearTireMF61::PHX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PHX2) == 0x0001B0, "Member 'UFGearTireMF61::PHX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PVX1) == 0x0001B4, "Member 'UFGearTireMF61::PVX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PVX2) == 0x0001B8, "Member 'UFGearTireMF61::PVX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPX1) == 0x0001BC, "Member 'UFGearTireMF61::PPX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPX2) == 0x0001C0, "Member 'UFGearTireMF61::PPX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPX3) == 0x0001C4, "Member 'UFGearTireMF61::PPX3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPX4) == 0x0001C8, "Member 'UFGearTireMF61::PPX4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PCY1) == 0x0001CC, "Member 'UFGearTireMF61::PCY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PDY1) == 0x0001D0, "Member 'UFGearTireMF61::PDY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PDY2) == 0x0001D4, "Member 'UFGearTireMF61::PDY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PDY3) == 0x0001D8, "Member 'UFGearTireMF61::PDY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEY1) == 0x0001DC, "Member 'UFGearTireMF61::PEY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEY2) == 0x0001E0, "Member 'UFGearTireMF61::PEY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEY3) == 0x0001E4, "Member 'UFGearTireMF61::PEY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEY4) == 0x0001E8, "Member 'UFGearTireMF61::PEY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PEY5) == 0x0001EC, "Member 'UFGearTireMF61::PEY5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY1) == 0x0001F0, "Member 'UFGearTireMF61::PKY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY2) == 0x0001F4, "Member 'UFGearTireMF61::PKY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY3) == 0x0001F8, "Member 'UFGearTireMF61::PKY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY4) == 0x0001FC, "Member 'UFGearTireMF61::PKY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY5) == 0x000200, "Member 'UFGearTireMF61::PKY5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY6) == 0x000204, "Member 'UFGearTireMF61::PKY6' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PKY7) == 0x000208, "Member 'UFGearTireMF61::PKY7' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PHY1) == 0x00020C, "Member 'UFGearTireMF61::PHY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PHY2) == 0x000210, "Member 'UFGearTireMF61::PHY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PVY1) == 0x000214, "Member 'UFGearTireMF61::PVY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PVY2) == 0x000218, "Member 'UFGearTireMF61::PVY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PVY3) == 0x00021C, "Member 'UFGearTireMF61::PVY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PVY4) == 0x000220, "Member 'UFGearTireMF61::PVY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPY1) == 0x000224, "Member 'UFGearTireMF61::PPY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPY2) == 0x000228, "Member 'UFGearTireMF61::PPY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPY3) == 0x00022C, "Member 'UFGearTireMF61::PPY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPY4) == 0x000230, "Member 'UFGearTireMF61::PPY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPY5) == 0x000234, "Member 'UFGearTireMF61::PPY5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBX1) == 0x000238, "Member 'UFGearTireMF61::RBX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBX2) == 0x00023C, "Member 'UFGearTireMF61::RBX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBX3) == 0x000240, "Member 'UFGearTireMF61::RBX3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RCX1) == 0x000244, "Member 'UFGearTireMF61::RCX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, REX1) == 0x000248, "Member 'UFGearTireMF61::REX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, REX2) == 0x00024C, "Member 'UFGearTireMF61::REX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RHX1) == 0x000250, "Member 'UFGearTireMF61::RHX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBY1) == 0x000254, "Member 'UFGearTireMF61::RBY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBY2) == 0x000258, "Member 'UFGearTireMF61::RBY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBY3) == 0x00025C, "Member 'UFGearTireMF61::RBY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RBY4) == 0x000260, "Member 'UFGearTireMF61::RBY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RCY1) == 0x000264, "Member 'UFGearTireMF61::RCY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, REY1) == 0x000268, "Member 'UFGearTireMF61::REY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, REY2) == 0x00026C, "Member 'UFGearTireMF61::REY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RHY1) == 0x000270, "Member 'UFGearTireMF61::RHY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RHY2) == 0x000274, "Member 'UFGearTireMF61::RHY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RVY1) == 0x000278, "Member 'UFGearTireMF61::RVY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RVY2) == 0x00027C, "Member 'UFGearTireMF61::RVY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RVY3) == 0x000280, "Member 'UFGearTireMF61::RVY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RVY4) == 0x000284, "Member 'UFGearTireMF61::RVY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RVY5) == 0x000288, "Member 'UFGearTireMF61::RVY5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, RVY6) == 0x00028C, "Member 'UFGearTireMF61::RVY6' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX1) == 0x000290, "Member 'UFGearTireMF61::QSX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX2) == 0x000294, "Member 'UFGearTireMF61::QSX2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX3) == 0x000298, "Member 'UFGearTireMF61::QSX3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX4) == 0x00029C, "Member 'UFGearTireMF61::QSX4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX5) == 0x0002A0, "Member 'UFGearTireMF61::QSX5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX6) == 0x0002A4, "Member 'UFGearTireMF61::QSX6' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX7) == 0x0002A8, "Member 'UFGearTireMF61::QSX7' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX8) == 0x0002AC, "Member 'UFGearTireMF61::QSX8' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX9) == 0x0002B0, "Member 'UFGearTireMF61::QSX9' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX10) == 0x0002B4, "Member 'UFGearTireMF61::QSX10' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX11) == 0x0002B8, "Member 'UFGearTireMF61::QSX11' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX12) == 0x0002BC, "Member 'UFGearTireMF61::QSX12' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX13) == 0x0002C0, "Member 'UFGearTireMF61::QSX13' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSX14) == 0x0002C4, "Member 'UFGearTireMF61::QSX14' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPMX1) == 0x0002C8, "Member 'UFGearTireMF61::PPMX1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY1) == 0x0002CC, "Member 'UFGearTireMF61::QSY1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY2) == 0x0002D0, "Member 'UFGearTireMF61::QSY2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY3) == 0x0002D4, "Member 'UFGearTireMF61::QSY3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY4) == 0x0002D8, "Member 'UFGearTireMF61::QSY4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY5) == 0x0002DC, "Member 'UFGearTireMF61::QSY5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY6) == 0x0002E0, "Member 'UFGearTireMF61::QSY6' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY7) == 0x0002E4, "Member 'UFGearTireMF61::QSY7' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QSY8) == 0x0002E8, "Member 'UFGearTireMF61::QSY8' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, VREF) == 0x0002EC, "Member 'UFGearTireMF61::VREF' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ1) == 0x0002F0, "Member 'UFGearTireMF61::QBZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ2) == 0x0002F4, "Member 'UFGearTireMF61::QBZ2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ3) == 0x0002F8, "Member 'UFGearTireMF61::QBZ3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ4) == 0x0002FC, "Member 'UFGearTireMF61::QBZ4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ5) == 0x000300, "Member 'UFGearTireMF61::QBZ5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ9) == 0x000304, "Member 'UFGearTireMF61::QBZ9' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QBZ10) == 0x000308, "Member 'UFGearTireMF61::QBZ10' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QCZ1) == 0x00030C, "Member 'UFGearTireMF61::QCZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ1) == 0x000310, "Member 'UFGearTireMF61::QDZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ2) == 0x000314, "Member 'UFGearTireMF61::QDZ2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ3) == 0x000318, "Member 'UFGearTireMF61::QDZ3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ4) == 0x00031C, "Member 'UFGearTireMF61::QDZ4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ6) == 0x000320, "Member 'UFGearTireMF61::QDZ6' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ7) == 0x000324, "Member 'UFGearTireMF61::QDZ7' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ8) == 0x000328, "Member 'UFGearTireMF61::QDZ8' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ9) == 0x00032C, "Member 'UFGearTireMF61::QDZ9' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ10) == 0x000330, "Member 'UFGearTireMF61::QDZ10' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QDZ11) == 0x000334, "Member 'UFGearTireMF61::QDZ11' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QEZ1) == 0x000338, "Member 'UFGearTireMF61::QEZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QEZ2) == 0x00033C, "Member 'UFGearTireMF61::QEZ2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QEZ3) == 0x000340, "Member 'UFGearTireMF61::QEZ3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QEZ4) == 0x000344, "Member 'UFGearTireMF61::QEZ4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QEZ5) == 0x000348, "Member 'UFGearTireMF61::QEZ5' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QHZ1) == 0x00034C, "Member 'UFGearTireMF61::QHZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QHZ2) == 0x000350, "Member 'UFGearTireMF61::QHZ2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QHZ3) == 0x000354, "Member 'UFGearTireMF61::QHZ3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, QHZ4) == 0x000358, "Member 'UFGearTireMF61::QHZ4' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPZ1) == 0x00035C, "Member 'UFGearTireMF61::PPZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, PPZ2) == 0x000360, "Member 'UFGearTireMF61::PPZ2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, SSZ1) == 0x000364, "Member 'UFGearTireMF61::SSZ1' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, SSZ2) == 0x000368, "Member 'UFGearTireMF61::SSZ2' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, SSZ3) == 0x00036C, "Member 'UFGearTireMF61::SSZ3' has a wrong offset!");
static_assert(offsetof(UFGearTireMF61, SSZ4) == 0x000370, "Member 'UFGearTireMF61::SSZ4' has a wrong offset!");

// Class FGearPlugin.FGearTireSimple
// 0x0020 (0x0198 - 0x0178)
class UFGearTireSimple final : public UFGearTire
{
public:
	float                                         Lnb;                                               // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Lnc;                                               // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Lnd;                                               // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Lne;                                               // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Ltb;                                               // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Ltc;                                               // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Ltd;                                               // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Lte;                                               // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearTireSimple">();
	}
	static class UFGearTireSimple* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearTireSimple>();
	}
};
static_assert(alignof(UFGearTireSimple) == 0x000008, "Wrong alignment on UFGearTireSimple");
static_assert(sizeof(UFGearTireSimple) == 0x000198, "Wrong size on UFGearTireSimple");
static_assert(offsetof(UFGearTireSimple, Lnb) == 0x000178, "Member 'UFGearTireSimple::Lnb' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Lnc) == 0x00017C, "Member 'UFGearTireSimple::Lnc' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Lnd) == 0x000180, "Member 'UFGearTireSimple::Lnd' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Lne) == 0x000184, "Member 'UFGearTireSimple::Lne' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Ltb) == 0x000188, "Member 'UFGearTireSimple::Ltb' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Ltc) == 0x00018C, "Member 'UFGearTireSimple::Ltc' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Ltd) == 0x000190, "Member 'UFGearTireSimple::Ltd' has a wrong offset!");
static_assert(offsetof(UFGearTireSimple, Lte) == 0x000194, "Member 'UFGearTireSimple::Lte' has a wrong offset!");

// Class FGearPlugin.FGearTransmission
// 0x0080 (0x0330 - 0x02B0)
class UFGearTransmission final : public UFGearTelemetryDrawer
{
public:
	FMulticastInlineDelegateProperty_             OnGearChanged;                                     // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          MAutoChange;                                       // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MAutoReverse;                                      // 0x02B9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MAutoClutch;                                       // 0x02BA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2BB[0x1];                                      // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MChangeTime;                                       // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MGearUpRatio;                                      // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MGearDownRatio;                                    // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MClutchTime;                                       // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MClutchScale;                                      // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            MCluthEngagement;                                  // 0x02D0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<float>                                 MGearRatios;                                       // 0x02D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         MFinalGearRatio;                                   // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2EC[0x44];                                     // 0x02EC(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GearDown(bool SkipN);
	void GearUp(bool SkipN);
	float GetChangeTime();
	float GetClutchPower();
	float GetClutchScale();
	float GetClutchTime();
	class UCurveFloat* GetCluthEngagementCurve();
	int32 GetCurGear();
	float GetFinalGearRatio();
	int32 GetGearCount();
	float GetGearDownRatio();
	float GetGearMaxSpeed(int32 Gear);
	float GetGearRatio(int32 Gear);
	float GetGearUpRatio();
	int32 GetMaxGear();
	TArray<float> GetMaxSpeeds();
	float GetTransmissionRatio();
	bool IsAutoChange();
	bool IsAutoClutch();
	bool IsAutoReverse();
	bool IsChanging();
	void RefreshParameters();
	void SetAutoChange(bool B);
	void SetAutoClutch(bool B);
	void SetAutoReverse(bool B);
	void SetChangeTime(float T);
	void SetClutchScale(float Cs);
	void SetClutchState(float Cs);
	void SetClutchTime(float T);
	void SetCurrentGear(int32 Gear, bool Force);
	void SetFinalGearRatio(float F);
	void SetGearCount(int32 Size);
	void SetGearDownRatio(float F);
	void SetGearRatio(int32 Gear, float Ratio);
	void SetGearUpRatio(float F);
	void SetPauseTime(float F);
	void SetThrottleState(int32 Ts);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearTransmission">();
	}
	static class UFGearTransmission* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearTransmission>();
	}
};
static_assert(alignof(UFGearTransmission) == 0x000010, "Wrong alignment on UFGearTransmission");
static_assert(sizeof(UFGearTransmission) == 0x000330, "Wrong size on UFGearTransmission");
static_assert(offsetof(UFGearTransmission, OnGearChanged) == 0x0002A8, "Member 'UFGearTransmission::OnGearChanged' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MAutoChange) == 0x0002B8, "Member 'UFGearTransmission::MAutoChange' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MAutoReverse) == 0x0002B9, "Member 'UFGearTransmission::MAutoReverse' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MAutoClutch) == 0x0002BA, "Member 'UFGearTransmission::MAutoClutch' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MChangeTime) == 0x0002BC, "Member 'UFGearTransmission::MChangeTime' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MGearUpRatio) == 0x0002C0, "Member 'UFGearTransmission::MGearUpRatio' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MGearDownRatio) == 0x0002C4, "Member 'UFGearTransmission::MGearDownRatio' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MClutchTime) == 0x0002C8, "Member 'UFGearTransmission::MClutchTime' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MClutchScale) == 0x0002CC, "Member 'UFGearTransmission::MClutchScale' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MCluthEngagement) == 0x0002D0, "Member 'UFGearTransmission::MCluthEngagement' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MGearRatios) == 0x0002D8, "Member 'UFGearTransmission::MGearRatios' has a wrong offset!");
static_assert(offsetof(UFGearTransmission, MFinalGearRatio) == 0x0002E8, "Member 'UFGearTransmission::MFinalGearRatio' has a wrong offset!");

// Class FGearPlugin.FGearVehicle
// 0x0338 (0x0650 - 0x0318)
class alignas(0x10) AFGearVehicle : public APawn
{
public:
	class UFGearEngine*                           MEngine;                                           // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearTransmission*                     MTransmission;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearStandardInput*                    MStandardInput;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearAeroDynamics*                     MAeroDynamics;                                     // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearOrbitCamera*                      MOrbitCamera;                                      // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearArcadeAssists*                    MArcadeAssists;                                    // 0x0340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearSuspensionConstraint*             MSuspensionConstraint;                             // 0x0348(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearAxle*                             MAxle0;                                            // 0x0350(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearWheelOptions*                     MWheelOptions0;                                    // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearWheel*                            MWheelLeft0;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearWheel*                            MWheelRight0;                                      // 0x0368(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearAxle*                             MAxle1;                                            // 0x0370(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearWheelOptions*                     MWheelOptions1;                                    // 0x0378(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearWheel*                            MWheelLeft1;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearWheel*                            MWheelRight1;                                      // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearReplication*                      MReplication;                                      // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearSkeletalMeshComponent*            MMesh;                                             // 0x0398(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearAnimInstance*                     MAnimation;                                        // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MUpdateRate;                                       // 0x03A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMass;                                             // 0x03AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                MInertiaScale;                                     // 0x03B0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                MCenterofMass;                                     // 0x03C8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MCustomGravity;                                    // 0x03E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MGravity;                                          // 0x03E8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFGearQueryType                               MQueryType;                                        // 0x0400(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MRays;                                             // 0x0404(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MLateralRays;                                      // 0x0408(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFGearQueryMobilityType                       MQueryMobilityType;                                // 0x040C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECollisionChannel                             MTraceChannel;                                     // 0x040D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         MIgnoreMask;                                       // 0x040E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MTraceComplex;                                     // 0x040F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMesh*                            MConvexAsset;                                      // 0x0410(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFGearUpDirection                             MConvexUp;                                         // 0x0418(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               MConvexRotation;                                   // 0x0420(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          MConvexVisible;                                    // 0x0438(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            MDefaultCylinderAsset;                             // 0x0440(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MHandBrakePower;                                   // 0x0448(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRollingResistanceCoeff;                           // 0x044C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MStickyTireSpeed;                                  // 0x0450(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MReactionScale;                                    // 0x0454(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MAllowReverse;                                     // 0x0458(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MDetectGround;                                     // 0x0459(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_45A[0x2];                                      // 0x045A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MHardContactScale;                                 // 0x045C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MRelaxationDownforce;                              // 0x0460(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          MTirePenetration;                                  // 0x0461(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_462[0x2];                                      // 0x0462(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGearTelemetryOptions                  MTelemetry;                                        // 0x0464(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            MBrakeEngagement;                                  // 0x0480(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MABS;                                              // 0x0488(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MASR;                                              // 0x048C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MUnderSteerAssist;                                 // 0x0490(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMinUnderSteerAngle;                               // 0x0494(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MOverSteerAssist;                                  // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMinOverSteerAngle;                                // 0x049C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MFrontAntiRollPower;                               // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRearAntiRollPower;                                // 0x04A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x1A8];                                    // 0x04A8(0x01A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientPrepareTelemetry();
	float GetABS();
	bool GetABSActive();
	class UFGearAeroDynamics* GetAeroDynamics();
	bool GetAllowReverse();
	class UFGearAnimInstance* GetAnim();
	float GetASR();
	bool GetASRActive();
	class UFGearAxle* GetAxle(int32 I);
	int32 GetAxleCount();
	float GetAxleDistance(int32 Axle1, int32 Axle2);
	struct FVector GetCenterOfMass();
	bool GetDetectGround();
	class UFGearEngine* GetEngine();
	bool GetESPActive();
	struct FVector GetForwardDir();
	float GetForwardSpeed();
	float GetHandbrakePower();
	float GetHardContactScale();
	uint8 GetIgnoreMask();
	struct FVector GetInertiaScale();
	float GetKMHSpeed();
	int32 GetLateralRayCount();
	struct FVector GetLocalInertiaTensor();
	float GetMass();
	float GetMassPerWheel();
	float GetMaxSteeringAngle();
	float GetMaxWheelKMHSpeed();
	float GetMaxWheelRPMToKMH();
	class UFGearSkeletalMeshComponent* GetMesh();
	float GetMinWheelKMHSpeed();
	struct FVector GetMyVelocity();
	float GetNormalizedSteering();
	struct FVector GetPosition();
	EFGearQueryMobilityType GetQueryMobilityType();
	EFGearQueryType GetQueryType();
	int32 GetRayCount();
	bool GetRelaxationDownforce();
	float GetRightSpeed();
	float GetRollingResistanceCoeff();
	struct FQuat GetRotation();
	float GetSimCoeff();
	class UFGearStandardInput* GetStandardInput();
	float GetSteerDeltaAngle(bool Front);
	bool GetTirePenetration();
	ECollisionChannel GetTraceChannel();
	bool GetTraceComplex();
	class UFGearTransmission* GetTransmission();
	int32 GetUpdateRate();
	struct FVector GetUpDir();
	struct FVector GetVelocityDir();
	float GetVelocitySize();
	int32 GetWheelCount();
	float GetWheelSpeedLimitKMH();
	bool IsHandbrakeOn();
	bool IsOverSteering();
	bool IsUnderSteering();
	void LoadState(const struct FFGearVehicleState& State);
	void OnSimulatedPhysicsChanged(bool IsEnabled);
	void OverrideInputTick();
	void Reset(const struct FVector& Position, const struct FRotator& Rotation);
	void SaveState(struct FFGearVehicleState* State);
	void ServerReset(const struct FVector& Position, const struct FQuat& Rotation);
	void SetABS(float F);
	void SetAllowReverse(bool Allow);
	void SetASR(float F);
	void SetBraking(float BrakeInput, bool Handbrake);
	void SetCenterOfMassOffset(const struct FVector& Com);
	void SetDetectGround(bool B);
	void SetFrontAntiRollPower(float F);
	void SetGravity(const struct FVector& Gravity);
	void SetHandbrakePower(float F);
	void SetHardContactScale(float F);
	void SetIgnoreMask(uint8 F);
	void SetInertiaScale(const struct FVector& Iscale);
	void SetLateralRayCount(int32 Ct);
	void SetMass(float Mass);
	void SetMinOverSteerAngle(float F);
	void SetMinUnderSteerAngle(float F);
	void SetOverSteerAssist(float F);
	void SetQueryMobilityType(EFGearQueryMobilityType T);
	void SetQueryType(EFGearQueryType T);
	void SetRayCount(int32 Ct);
	void SetReactionForceScale(float F);
	void SetRearAntiRollPower(float F);
	void SetRelaxationDownforce(bool B);
	void SetRollingResistanceCoeff(float F);
	void SetSteering(float SteerInput);
	void SetStickyTireSpeed(float F);
	void SetStickyTireState(float F);
	void SetTirePenetration(bool B);
	void SetTraceChannel(ECollisionChannel L);
	void SetTraceComplex(bool B);
	void SetUnderSteerAssist(float F);
	void SetUpdateInputs(bool B);
	void SetUpdateRate(int32 I);
	void SetUseCustomGravity(bool Use);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearVehicle">();
	}
	static class AFGearVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFGearVehicle>();
	}
};
static_assert(alignof(AFGearVehicle) == 0x000010, "Wrong alignment on AFGearVehicle");
static_assert(sizeof(AFGearVehicle) == 0x000650, "Wrong size on AFGearVehicle");
static_assert(offsetof(AFGearVehicle, MEngine) == 0x000318, "Member 'AFGearVehicle::MEngine' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MTransmission) == 0x000320, "Member 'AFGearVehicle::MTransmission' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MStandardInput) == 0x000328, "Member 'AFGearVehicle::MStandardInput' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MAeroDynamics) == 0x000330, "Member 'AFGearVehicle::MAeroDynamics' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MOrbitCamera) == 0x000338, "Member 'AFGearVehicle::MOrbitCamera' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MArcadeAssists) == 0x000340, "Member 'AFGearVehicle::MArcadeAssists' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MSuspensionConstraint) == 0x000348, "Member 'AFGearVehicle::MSuspensionConstraint' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MAxle0) == 0x000350, "Member 'AFGearVehicle::MAxle0' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MWheelOptions0) == 0x000358, "Member 'AFGearVehicle::MWheelOptions0' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MWheelLeft0) == 0x000360, "Member 'AFGearVehicle::MWheelLeft0' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MWheelRight0) == 0x000368, "Member 'AFGearVehicle::MWheelRight0' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MAxle1) == 0x000370, "Member 'AFGearVehicle::MAxle1' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MWheelOptions1) == 0x000378, "Member 'AFGearVehicle::MWheelOptions1' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MWheelLeft1) == 0x000380, "Member 'AFGearVehicle::MWheelLeft1' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MWheelRight1) == 0x000388, "Member 'AFGearVehicle::MWheelRight1' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MReplication) == 0x000390, "Member 'AFGearVehicle::MReplication' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MMesh) == 0x000398, "Member 'AFGearVehicle::MMesh' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MAnimation) == 0x0003A0, "Member 'AFGearVehicle::MAnimation' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MUpdateRate) == 0x0003A8, "Member 'AFGearVehicle::MUpdateRate' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MMass) == 0x0003AC, "Member 'AFGearVehicle::MMass' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MInertiaScale) == 0x0003B0, "Member 'AFGearVehicle::MInertiaScale' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MCenterofMass) == 0x0003C8, "Member 'AFGearVehicle::MCenterofMass' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MCustomGravity) == 0x0003E0, "Member 'AFGearVehicle::MCustomGravity' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MGravity) == 0x0003E8, "Member 'AFGearVehicle::MGravity' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MQueryType) == 0x000400, "Member 'AFGearVehicle::MQueryType' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MRays) == 0x000404, "Member 'AFGearVehicle::MRays' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MLateralRays) == 0x000408, "Member 'AFGearVehicle::MLateralRays' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MQueryMobilityType) == 0x00040C, "Member 'AFGearVehicle::MQueryMobilityType' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MTraceChannel) == 0x00040D, "Member 'AFGearVehicle::MTraceChannel' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MIgnoreMask) == 0x00040E, "Member 'AFGearVehicle::MIgnoreMask' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MTraceComplex) == 0x00040F, "Member 'AFGearVehicle::MTraceComplex' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MConvexAsset) == 0x000410, "Member 'AFGearVehicle::MConvexAsset' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MConvexUp) == 0x000418, "Member 'AFGearVehicle::MConvexUp' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MConvexRotation) == 0x000420, "Member 'AFGearVehicle::MConvexRotation' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MConvexVisible) == 0x000438, "Member 'AFGearVehicle::MConvexVisible' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MDefaultCylinderAsset) == 0x000440, "Member 'AFGearVehicle::MDefaultCylinderAsset' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MHandBrakePower) == 0x000448, "Member 'AFGearVehicle::MHandBrakePower' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MRollingResistanceCoeff) == 0x00044C, "Member 'AFGearVehicle::MRollingResistanceCoeff' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MStickyTireSpeed) == 0x000450, "Member 'AFGearVehicle::MStickyTireSpeed' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MReactionScale) == 0x000454, "Member 'AFGearVehicle::MReactionScale' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MAllowReverse) == 0x000458, "Member 'AFGearVehicle::MAllowReverse' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MDetectGround) == 0x000459, "Member 'AFGearVehicle::MDetectGround' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MHardContactScale) == 0x00045C, "Member 'AFGearVehicle::MHardContactScale' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MRelaxationDownforce) == 0x000460, "Member 'AFGearVehicle::MRelaxationDownforce' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MTirePenetration) == 0x000461, "Member 'AFGearVehicle::MTirePenetration' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MTelemetry) == 0x000464, "Member 'AFGearVehicle::MTelemetry' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MBrakeEngagement) == 0x000480, "Member 'AFGearVehicle::MBrakeEngagement' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MABS) == 0x000488, "Member 'AFGearVehicle::MABS' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MASR) == 0x00048C, "Member 'AFGearVehicle::MASR' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MUnderSteerAssist) == 0x000490, "Member 'AFGearVehicle::MUnderSteerAssist' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MMinUnderSteerAngle) == 0x000494, "Member 'AFGearVehicle::MMinUnderSteerAngle' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MOverSteerAssist) == 0x000498, "Member 'AFGearVehicle::MOverSteerAssist' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MMinOverSteerAngle) == 0x00049C, "Member 'AFGearVehicle::MMinOverSteerAngle' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MFrontAntiRollPower) == 0x0004A0, "Member 'AFGearVehicle::MFrontAntiRollPower' has a wrong offset!");
static_assert(offsetof(AFGearVehicle, MRearAntiRollPower) == 0x0004A4, "Member 'AFGearVehicle::MRearAntiRollPower' has a wrong offset!");

// Class FGearPlugin.FGearWheel
// 0x0320 (0x05D0 - 0x02B0)
class UFGearWheel final : public UFGearTelemetryDrawer
{
public:
	bool                                          MIsActive;                                         // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFGearWheelSide                               MSide;                                             // 0x02A9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2AA[0x2];                                      // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MBoneName;                                         // 0x02AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MConvexShape;                                      // 0x02B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C0[0x310];                                    // 0x02C0(0x0310)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurrentSteer();
	struct FVector GetGlobalForward();
	struct FVector GetGlobalRight();
	float GetPitch();
	void SetAlignScale(float F);
	void SetBoneName(const class FString& NewName);
	void SetBrakeTorque(float F);
	void SetBraking(float B);
	void SetCompressionDamper(float F);
	void SetCurrentSteer(float S);
	void SetEnable(bool B);
	void SetFrictionFactor(float F);
	void SetLatFriction(float F);
	void SetLatScale(float F);
	void SetLngFriction(float F);
	void SetLngScale(float F);
	void SetMass(float F);
	void SetOverturnScale(float F);
	void SetPressure(float F);
	void SetRadius(float F);
	void SetRelaxationDamper(float F);
	void SetRimOffset(float F);
	void SetRollScale(float F);
	void SetSpeed(float S);
	void SetSpringCoeff(float F);
	void SetSuspensionDownTravel(float F);
	void SetSuspensionPreload(float F);
	void SetSuspensionSpring(float F);
	void SetSuspensionUpTravel(float F);
	void SetWheelSide(EFGearWheelSide S);
	void SetWidth(float F);

	class UFGearAxle* GetAxle() const;
	float GetBraking() const;
	struct FVector GetCombinedTorque() const;
	float GetCurrentLoad() const;
	float GetFeedbackTorque() const;
	float GetFrictionFactor() const;
	struct FVector GetHubPosition() const;
	float GetKMHSpeed() const;
	struct FVector GetLateralForce() const;
	float GetLateralSlip() const;
	struct FVector GetLocalHubPosition() const;
	struct FVector GetLongitudinalForce() const;
	float GetLongitudinalSlip() const;
	float GetPressure() const;
	float GetRadius() const;
	struct FHitResult GetRayHit() const;
	float GetRPM() const;
	float GetSlipAngle() const;
	float GetSlipRatio() const;
	float GetSpeed() const;
	float GetSuspensionCompressedLength() const;
	float GetSuspensionCompressRatio() const;
	float GetSuspensionSpring() const;
	float GetSuspensionTotalLength() const;
	float GetWheelRPMToKMH() const;
	EFGearWheelSide GetWheelSide() const;
	bool HasContact() const;
	bool HasDrive() const;
	bool IsABSActive() const;
	bool IsASRActive() const;
	bool IsEnable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearWheel">();
	}
	static class UFGearWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearWheel>();
	}
};
static_assert(alignof(UFGearWheel) == 0x000010, "Wrong alignment on UFGearWheel");
static_assert(sizeof(UFGearWheel) == 0x0005D0, "Wrong size on UFGearWheel");
static_assert(offsetof(UFGearWheel, MIsActive) == 0x0002A8, "Member 'UFGearWheel::MIsActive' has a wrong offset!");
static_assert(offsetof(UFGearWheel, MSide) == 0x0002A9, "Member 'UFGearWheel::MSide' has a wrong offset!");
static_assert(offsetof(UFGearWheel, MBoneName) == 0x0002AC, "Member 'UFGearWheel::MBoneName' has a wrong offset!");
static_assert(offsetof(UFGearWheel, MConvexShape) == 0x0002B8, "Member 'UFGearWheel::MConvexShape' has a wrong offset!");

// Class FGearPlugin.FGearWheelOptions
// 0x0060 (0x0310 - 0x02B0)
class UFGearWheelOptions final : public UFGearTelemetryDrawer
{
public:
	TSubclassOf<class UFGearTire>                 MTireModelClass;                                   // 0x02A8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFGearTire*                             MTireModel;                                        // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLateralFriction;                                  // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLongitudinalFriction;                             // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLateralScale;                                     // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MLongitudinalScale;                                // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MOverturnScale;                                    // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRollMomentScale;                                  // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSelfAlignScale;                                   // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MTirePressure;                                     // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRadius;                                           // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MWidth;                                            // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRimOffset;                                        // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MCastOffset;                                       // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MMass;                                             // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MBrakeTorque;                                      // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSuspensionUpTravel;                               // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSuspensionDownTravel;                             // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSuspensionSpring;                                 // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MCompressionDamper;                                // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MRelaxationDamper;                                 // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MSuspensionPreload;                                // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBrakeTorque(float F);
	void SetCastOffset(float F);
	void SetCompressionDamper(float F);
	void SetLateralFriction(float F);
	void SetLateralScale(float F);
	void SetLongitudinalFriction(float F);
	void SetLongitudinalScale(float F);
	void SetMass(float F);
	void SetOverturnScale(float F);
	void SetRadius(float F);
	void SetRelaxationDamper(float F);
	void SetRimOffset(float F);
	void SetRollMomentScale(float F);
	void SetSelfAlignScale(float F);
	void SetSuspensionDownTravel(float F);
	void SetSuspensionPreload(float F);
	void SetSuspensionSpring(float F);
	void SetSuspensionUpTravel(float F);
	void SetTireModel(class UFGearTire* T);
	void SetTirePressure(float F);
	void SetWidth(float F);

	float GetBrakeTorque() const;
	float GetCastOffset() const;
	float GetCompressionDamper() const;
	float GetLateralFriction() const;
	float GetLateralScale() const;
	float GetLongitudinalFriction() const;
	float GetLongitudinalScale() const;
	float GetMass() const;
	float GetOverturnScale() const;
	float GetRadius() const;
	float GetRelaxationDamper() const;
	float GetRimOffset() const;
	float GetRollMomentScale() const;
	float GetSelfAlignScale() const;
	float GetSuspensionDownTravel() const;
	float GetSuspensionPreload() const;
	float GetSuspensionSpring() const;
	float GetSuspensionUpTravel() const;
	class UFGearTire* GetTireModel() const;
	float GetTirePressure() const;
	float GetWidth() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FGearWheelOptions">();
	}
	static class UFGearWheelOptions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFGearWheelOptions>();
	}
};
static_assert(alignof(UFGearWheelOptions) == 0x000010, "Wrong alignment on UFGearWheelOptions");
static_assert(sizeof(UFGearWheelOptions) == 0x000310, "Wrong size on UFGearWheelOptions");
static_assert(offsetof(UFGearWheelOptions, MTireModelClass) == 0x0002A8, "Member 'UFGearWheelOptions::MTireModelClass' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MTireModel) == 0x0002B0, "Member 'UFGearWheelOptions::MTireModel' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MLateralFriction) == 0x0002B8, "Member 'UFGearWheelOptions::MLateralFriction' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MLongitudinalFriction) == 0x0002BC, "Member 'UFGearWheelOptions::MLongitudinalFriction' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MLateralScale) == 0x0002C0, "Member 'UFGearWheelOptions::MLateralScale' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MLongitudinalScale) == 0x0002C4, "Member 'UFGearWheelOptions::MLongitudinalScale' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MOverturnScale) == 0x0002C8, "Member 'UFGearWheelOptions::MOverturnScale' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MRollMomentScale) == 0x0002CC, "Member 'UFGearWheelOptions::MRollMomentScale' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MSelfAlignScale) == 0x0002D0, "Member 'UFGearWheelOptions::MSelfAlignScale' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MTirePressure) == 0x0002D4, "Member 'UFGearWheelOptions::MTirePressure' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MRadius) == 0x0002D8, "Member 'UFGearWheelOptions::MRadius' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MWidth) == 0x0002DC, "Member 'UFGearWheelOptions::MWidth' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MRimOffset) == 0x0002E0, "Member 'UFGearWheelOptions::MRimOffset' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MCastOffset) == 0x0002E4, "Member 'UFGearWheelOptions::MCastOffset' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MMass) == 0x0002E8, "Member 'UFGearWheelOptions::MMass' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MBrakeTorque) == 0x0002EC, "Member 'UFGearWheelOptions::MBrakeTorque' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MSuspensionUpTravel) == 0x0002F0, "Member 'UFGearWheelOptions::MSuspensionUpTravel' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MSuspensionDownTravel) == 0x0002F4, "Member 'UFGearWheelOptions::MSuspensionDownTravel' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MSuspensionSpring) == 0x0002F8, "Member 'UFGearWheelOptions::MSuspensionSpring' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MCompressionDamper) == 0x0002FC, "Member 'UFGearWheelOptions::MCompressionDamper' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MRelaxationDamper) == 0x000300, "Member 'UFGearWheelOptions::MRelaxationDamper' has a wrong offset!");
static_assert(offsetof(UFGearWheelOptions, MSuspensionPreload) == 0x000304, "Member 'UFGearWheelOptions::MSuspensionPreload' has a wrong offset!");

}

