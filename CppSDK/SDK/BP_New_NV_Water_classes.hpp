#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_New_NV_Water

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "E_Shapes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_New_NV_Water.BP_New_NV_Water_C
// 0x01A0 (0x0430 - 0x0290)
class ABP_New_NV_Water_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Plane;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WaterSurface;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WaterVolume;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              Water_Material;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Water_Material_Instance;                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RefreshMaterial;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Water_Scale_X;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Scale_Y;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Opacity;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Shore_Opacity;                             // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Scale_Z;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UV_Tiling;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Fog_Height;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Color;                                        // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Deep_Color;                                        // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Shallow_Color;                                     // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Water_Fog_Density;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wave_Speed;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roughness;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Depth_Power;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      Sun;                                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class AWindDirectionalSource*                 WindActor;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        SunHeight;                                         // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      WaterColorCurve;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WaterFoamFX;                                       // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WaterRippleFX;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              RippleMaterial;                                    // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mat_Ripple_Inst;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              InteractionSound;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowIdleEffect;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IdleEffectIntervall;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WaterFoamFX_Idle;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WaterRippleFX_Idle;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mat_Ripple_Idle_Inst;                              // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundCue*                              IdleActorSound;                                    // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              IdleRippleMaterial;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    SurfaceMeshes;                                     // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    VolumeMeshes;                                      // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_Shapes                                      Shape;                                             // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           IdleCheckTimer;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateTimer;                                       // 0x0408(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RefreshGenerateTime;                               // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWorking;                                         // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     WaterSFX_1;                                        // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     WaterSFX_2;                                        // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void BndEvt__WaterVolume_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__WaterVolume_K2Node_ComponentBoundEvent_17_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CheckForIdleActors();
	void ExecuteUbergraph_BP_New_NV_Water(int32 EntryPoint);
	void Generate_Effects__Actors_(const struct FVector& Location, double Velocity, double Modifier);
	void Initial_Water_Creation();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Setup_Shape();
	void Show_Idle_Effects__Actors_(const struct FVector& Location);
	void StartIdleCheck();
	void Update_Water_Surface();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_New_NV_Water_C">();
	}
	static class ABP_New_NV_Water_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_New_NV_Water_C>();
	}
};
static_assert(alignof(ABP_New_NV_Water_C) == 0x000008, "Wrong alignment on ABP_New_NV_Water_C");
static_assert(sizeof(ABP_New_NV_Water_C) == 0x000430, "Wrong size on ABP_New_NV_Water_C");
static_assert(offsetof(ABP_New_NV_Water_C, UberGraphFrame) == 0x000290, "Member 'ABP_New_NV_Water_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Plane) == 0x000298, "Member 'ABP_New_NV_Water_C::Plane' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterSurface) == 0x0002A0, "Member 'ABP_New_NV_Water_C::WaterSurface' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterVolume) == 0x0002A8, "Member 'ABP_New_NV_Water_C::WaterVolume' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_New_NV_Water_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Material) == 0x0002B8, "Member 'ABP_New_NV_Water_C::Water_Material' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Material_Instance) == 0x0002C0, "Member 'ABP_New_NV_Water_C::Water_Material_Instance' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, RefreshMaterial) == 0x0002C8, "Member 'ABP_New_NV_Water_C::RefreshMaterial' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Scale_X) == 0x0002D0, "Member 'ABP_New_NV_Water_C::Water_Scale_X' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Scale_Y) == 0x0002D8, "Member 'ABP_New_NV_Water_C::Water_Scale_Y' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Base_Opacity) == 0x0002E0, "Member 'ABP_New_NV_Water_C::Base_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Minimum_Shore_Opacity) == 0x0002E8, "Member 'ABP_New_NV_Water_C::Minimum_Shore_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Scale_Z) == 0x0002F0, "Member 'ABP_New_NV_Water_C::Water_Scale_Z' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, UV_Tiling) == 0x0002F8, "Member 'ABP_New_NV_Water_C::UV_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Fog_Height) == 0x000300, "Member 'ABP_New_NV_Water_C::Water_Fog_Height' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Base_Color) == 0x000308, "Member 'ABP_New_NV_Water_C::Base_Color' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Deep_Color) == 0x000318, "Member 'ABP_New_NV_Water_C::Deep_Color' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Shallow_Color) == 0x000328, "Member 'ABP_New_NV_Water_C::Shallow_Color' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Water_Fog_Density) == 0x000338, "Member 'ABP_New_NV_Water_C::Water_Fog_Density' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Wave_Speed) == 0x000340, "Member 'ABP_New_NV_Water_C::Wave_Speed' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Roughness) == 0x000348, "Member 'ABP_New_NV_Water_C::Roughness' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Depth_Power) == 0x000350, "Member 'ABP_New_NV_Water_C::Depth_Power' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Sun) == 0x000358, "Member 'ABP_New_NV_Water_C::Sun' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WindActor) == 0x000360, "Member 'ABP_New_NV_Water_C::WindActor' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, SunHeight) == 0x000368, "Member 'ABP_New_NV_Water_C::SunHeight' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterColorCurve) == 0x000370, "Member 'ABP_New_NV_Water_C::WaterColorCurve' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterFoamFX) == 0x000378, "Member 'ABP_New_NV_Water_C::WaterFoamFX' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterRippleFX) == 0x000380, "Member 'ABP_New_NV_Water_C::WaterRippleFX' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, RippleMaterial) == 0x000388, "Member 'ABP_New_NV_Water_C::RippleMaterial' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Mat_Ripple_Inst) == 0x000390, "Member 'ABP_New_NV_Water_C::Mat_Ripple_Inst' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, InteractionSound) == 0x000398, "Member 'ABP_New_NV_Water_C::InteractionSound' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, AllowIdleEffect) == 0x0003A0, "Member 'ABP_New_NV_Water_C::AllowIdleEffect' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, IdleEffectIntervall) == 0x0003A8, "Member 'ABP_New_NV_Water_C::IdleEffectIntervall' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterFoamFX_Idle) == 0x0003B0, "Member 'ABP_New_NV_Water_C::WaterFoamFX_Idle' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterRippleFX_Idle) == 0x0003B8, "Member 'ABP_New_NV_Water_C::WaterRippleFX_Idle' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Mat_Ripple_Idle_Inst) == 0x0003C0, "Member 'ABP_New_NV_Water_C::Mat_Ripple_Idle_Inst' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, IdleActorSound) == 0x0003C8, "Member 'ABP_New_NV_Water_C::IdleActorSound' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, IdleRippleMaterial) == 0x0003D0, "Member 'ABP_New_NV_Water_C::IdleRippleMaterial' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, SurfaceMeshes) == 0x0003D8, "Member 'ABP_New_NV_Water_C::SurfaceMeshes' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, VolumeMeshes) == 0x0003E8, "Member 'ABP_New_NV_Water_C::VolumeMeshes' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, Shape) == 0x0003F8, "Member 'ABP_New_NV_Water_C::Shape' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, IdleCheckTimer) == 0x000400, "Member 'ABP_New_NV_Water_C::IdleCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, UpdateTimer) == 0x000408, "Member 'ABP_New_NV_Water_C::UpdateTimer' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, RefreshGenerateTime) == 0x000410, "Member 'ABP_New_NV_Water_C::RefreshGenerateTime' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, IsWorking) == 0x000418, "Member 'ABP_New_NV_Water_C::IsWorking' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterSFX_1) == 0x000420, "Member 'ABP_New_NV_Water_C::WaterSFX_1' has a wrong offset!");
static_assert(offsetof(ABP_New_NV_Water_C, WaterSFX_2) == 0x000428, "Member 'ABP_New_NV_Water_C::WaterSFX_2' has a wrong offset!");

}

