#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TeleportCar

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TeleportCar.BP_TeleportCar_C
// 0x0100 (0x0390 - 0x0290)
class ABP_TeleportCar_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        PointToInteract;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExitAnimationRoot;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Reset;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_by_reset;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvPC_C*                              Current_PC;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerSpawnPoint_C*>         Regions;                                           // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	double                                        Angle;                                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartTeleport;                                     // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrevLineTraceResult;                               // 0x02E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractingAnimation;                              // 0x02EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EB[0x5];                                      // 0x02EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerCutsceneComponent_C*             CutsceneEnded;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      SurvChar;                                          // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_DoorTeleport_C*                     DoorTeleport;                                      // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABP_PlayerSpawnPoint_C*>         CarSpawners;                                       // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ABP_PlayerSpawnPoint_C*, int32>    SPPlayer;                                          // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PartyTeleport;                                     // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MyCarRef;                                          // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UStaticMesh*                            My_Mesh;                                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AAVS_VehicleMaster_C*                   CarObjRef;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APS_TDB_C*                              Driver;                                            // 0x0388(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void AreSquadMembersReady(bool* Bool, bool* IsSquadMember);
	void DestroyInteractable();
	void ExecuteUbergraph_BP_TeleportCar(int32 EntryPoint);
	void FocusOver(class UUIW_PlayerMain_C* Param_FocusOver);
	void GetActorType(E_ActorType* ActorType);
	void GroupTeleport();
	bool IsInViewport();
	void IsLocked_(bool* Result);
	bool IsPartyMember();
	bool IsSomethingOnA_Way();
	void On_Black_Screen_Opened();
	void OnBeginInteract(class APawn* Player);
	void OnCutsceneEnded();
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void Reset();
	void Reset_Timer();
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void ShowFadeIn(bool Showed);
	void StartTeleportSquad();
	void UserConstructionScript();
	void World();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TeleportCar_C">();
	}
	static class ABP_TeleportCar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TeleportCar_C>();
	}
};
static_assert(alignof(ABP_TeleportCar_C) == 0x000008, "Wrong alignment on ABP_TeleportCar_C");
static_assert(sizeof(ABP_TeleportCar_C) == 0x000390, "Wrong size on ABP_TeleportCar_C");
static_assert(offsetof(ABP_TeleportCar_C, UberGraphFrame) == 0x000290, "Member 'ABP_TeleportCar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, PointToInteract) == 0x000298, "Member 'ABP_TeleportCar_C::PointToInteract' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, ExitAnimationRoot) == 0x0002A0, "Member 'ABP_TeleportCar_C::ExitAnimationRoot' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, StaticMesh) == 0x0002A8, "Member 'ABP_TeleportCar_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Scene) == 0x0002B0, "Member 'ABP_TeleportCar_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Has_Reset) == 0x0002B8, "Member 'ABP_TeleportCar_C::Has_Reset' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Timer_by_reset) == 0x0002C0, "Member 'ABP_TeleportCar_C::Timer_by_reset' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Current_PC) == 0x0002C8, "Member 'ABP_TeleportCar_C::Current_PC' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Regions) == 0x0002D0, "Member 'ABP_TeleportCar_C::Regions' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Angle) == 0x0002E0, "Member 'ABP_TeleportCar_C::Angle' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, StartTeleport) == 0x0002E8, "Member 'ABP_TeleportCar_C::StartTeleport' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, PrevLineTraceResult) == 0x0002E9, "Member 'ABP_TeleportCar_C::PrevLineTraceResult' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, InteractingAnimation) == 0x0002EA, "Member 'ABP_TeleportCar_C::InteractingAnimation' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, CutsceneEnded) == 0x0002F0, "Member 'ABP_TeleportCar_C::CutsceneEnded' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, SurvChar) == 0x0002F8, "Member 'ABP_TeleportCar_C::SurvChar' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, DoorTeleport) == 0x000300, "Member 'ABP_TeleportCar_C::DoorTeleport' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, CarSpawners) == 0x000308, "Member 'ABP_TeleportCar_C::CarSpawners' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, SPPlayer) == 0x000318, "Member 'ABP_TeleportCar_C::SPPlayer' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, PartyTeleport) == 0x000368, "Member 'ABP_TeleportCar_C::PartyTeleport' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, MyCarRef) == 0x000370, "Member 'ABP_TeleportCar_C::MyCarRef' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, My_Mesh) == 0x000378, "Member 'ABP_TeleportCar_C::My_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, CarObjRef) == 0x000380, "Member 'ABP_TeleportCar_C::CarObjRef' has a wrong offset!");
static_assert(offsetof(ABP_TeleportCar_C, Driver) == 0x000388, "Member 'ABP_TeleportCar_C::Driver' has a wrong offset!");

}

