#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameHUD

#include "Basic.hpp"

#include "E_NewLocation_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "InfoType_structs.hpp"
#include "WE_UIMode_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MarkType_structs.hpp"
#include "E_NotificationType_structs.hpp"


namespace SDK::Params
{

// Function BPI_GameHUD.BPI_GameHUD_C.AddMark
// 0x0040 (0x0040 - 0x0000)
struct BPI_GameHUD_C_AddMark final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorRef;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Quest;                                             // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowByLocation;                                    // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMarkType                                     Type;                                              // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Mark_C*                              WMark;                                             // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_AddMark) == 0x000008, "Wrong alignment on BPI_GameHUD_C_AddMark");
static_assert(sizeof(BPI_GameHUD_C_AddMark) == 0x000040, "Wrong size on BPI_GameHUD_C_AddMark");
static_assert(offsetof(BPI_GameHUD_C_AddMark, Key) == 0x000000, "Member 'BPI_GameHUD_C_AddMark::Key' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, ActorRef) == 0x000008, "Member 'BPI_GameHUD_C_AddMark::ActorRef' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, Quest) == 0x000010, "Member 'BPI_GameHUD_C_AddMark::Quest' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, ShowByLocation) == 0x000011, "Member 'BPI_GameHUD_C_AddMark::ShowByLocation' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, Location) == 0x000018, "Member 'BPI_GameHUD_C_AddMark::Location' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, Type) == 0x000030, "Member 'BPI_GameHUD_C_AddMark::Type' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, Success) == 0x000031, "Member 'BPI_GameHUD_C_AddMark::Success' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddMark, WMark) == 0x000038, "Member 'BPI_GameHUD_C_AddMark::WMark' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.AddNewNotification
// 0x0040 (0x0040 - 0x0000)
struct BPI_GameHUD_C_AddNewNotification final
{
public:
	E_NotificationType                            NotificationType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   Body;                                              // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Success;                                           // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_AddNewNotification) == 0x000008, "Wrong alignment on BPI_GameHUD_C_AddNewNotification");
static_assert(sizeof(BPI_GameHUD_C_AddNewNotification) == 0x000040, "Wrong size on BPI_GameHUD_C_AddNewNotification");
static_assert(offsetof(BPI_GameHUD_C_AddNewNotification, NotificationType) == 0x000000, "Member 'BPI_GameHUD_C_AddNewNotification::NotificationType' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddNewNotification, Title) == 0x000008, "Member 'BPI_GameHUD_C_AddNewNotification::Title' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddNewNotification, Body) == 0x000020, "Member 'BPI_GameHUD_C_AddNewNotification::Body' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_AddNewNotification, Success) == 0x000038, "Member 'BPI_GameHUD_C_AddNewNotification::Success' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.BannerNewLocation
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_BannerNewLocation final
{
public:
	E_NewLocation                                 Location;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_BannerNewLocation) == 0x000001, "Wrong alignment on BPI_GameHUD_C_BannerNewLocation");
static_assert(sizeof(BPI_GameHUD_C_BannerNewLocation) == 0x000001, "Wrong size on BPI_GameHUD_C_BannerNewLocation");
static_assert(offsetof(BPI_GameHUD_C_BannerNewLocation, Location) == 0x000000, "Member 'BPI_GameHUD_C_BannerNewLocation::Location' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.CanEnterVehicle
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_CanEnterVehicle final
{
public:
	bool                                          bCan;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeatIndex;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_CanEnterVehicle) == 0x000004, "Wrong alignment on BPI_GameHUD_C_CanEnterVehicle");
static_assert(sizeof(BPI_GameHUD_C_CanEnterVehicle) == 0x000008, "Wrong size on BPI_GameHUD_C_CanEnterVehicle");
static_assert(offsetof(BPI_GameHUD_C_CanEnterVehicle, bCan) == 0x000000, "Member 'BPI_GameHUD_C_CanEnterVehicle::bCan' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_CanEnterVehicle, SeatIndex) == 0x000004, "Member 'BPI_GameHUD_C_CanEnterVehicle::SeatIndex' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetDeathScreen (Widget)
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetDeathScreen__Widget_ final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetDeathScreen__Widget_) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetDeathScreen__Widget_");
static_assert(sizeof(BPI_GameHUD_C_GetDeathScreen__Widget_) == 0x000008, "Wrong size on BPI_GameHUD_C_GetDeathScreen__Widget_");
static_assert(offsetof(BPI_GameHUD_C_GetDeathScreen__Widget_, Widget) == 0x000000, "Member 'BPI_GameHUD_C_GetDeathScreen__Widget_::Widget' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetDefaultUIMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_GetDefaultUIMode final
{
public:
	EWE_UIMode                                    ReturnedMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetDefaultUIMode) == 0x000001, "Wrong alignment on BPI_GameHUD_C_GetDefaultUIMode");
static_assert(sizeof(BPI_GameHUD_C_GetDefaultUIMode) == 0x000001, "Wrong size on BPI_GameHUD_C_GetDefaultUIMode");
static_assert(offsetof(BPI_GameHUD_C_GetDefaultUIMode, ReturnedMode) == 0x000000, "Member 'BPI_GameHUD_C_GetDefaultUIMode::ReturnedMode' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetDragInventoryItemsAllowed
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_GetDragInventoryItemsAllowed final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetDragInventoryItemsAllowed) == 0x000001, "Wrong alignment on BPI_GameHUD_C_GetDragInventoryItemsAllowed");
static_assert(sizeof(BPI_GameHUD_C_GetDragInventoryItemsAllowed) == 0x000001, "Wrong size on BPI_GameHUD_C_GetDragInventoryItemsAllowed");
static_assert(offsetof(BPI_GameHUD_C_GetDragInventoryItemsAllowed, Enabled) == 0x000000, "Member 'BPI_GameHUD_C_GetDragInventoryItemsAllowed::Enabled' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetFurnitureCatalogRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetFurnitureCatalogRef final
{
public:
	class UWBP_FurnitureShopButtons_C*            FurnitureShopButtons;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetFurnitureCatalogRef) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetFurnitureCatalogRef");
static_assert(sizeof(BPI_GameHUD_C_GetFurnitureCatalogRef) == 0x000008, "Wrong size on BPI_GameHUD_C_GetFurnitureCatalogRef");
static_assert(offsetof(BPI_GameHUD_C_GetFurnitureCatalogRef, FurnitureShopButtons) == 0x000000, "Member 'BPI_GameHUD_C_GetFurnitureCatalogRef::FurnitureShopButtons' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetGUI
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetGUI final
{
public:
	class UUIW_PlayerMain_C*                      GUI;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetGUI) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetGUI");
static_assert(sizeof(BPI_GameHUD_C_GetGUI) == 0x000008, "Wrong size on BPI_GameHUD_C_GetGUI");
static_assert(offsetof(BPI_GameHUD_C_GetGUI, GUI) == 0x000000, "Member 'BPI_GameHUD_C_GetGUI::GUI' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetGUIHidden
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_GetGUIHidden final
{
public:
	bool                                          Hidden;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetGUIHidden) == 0x000001, "Wrong alignment on BPI_GameHUD_C_GetGUIHidden");
static_assert(sizeof(BPI_GameHUD_C_GetGUIHidden) == 0x000001, "Wrong size on BPI_GameHUD_C_GetGUIHidden");
static_assert(offsetof(BPI_GameHUD_C_GetGUIHidden, Hidden) == 0x000000, "Member 'BPI_GameHUD_C_GetGUIHidden::Hidden' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetInventoryTutorial
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_GetInventoryTutorial final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetInventoryTutorial) == 0x000001, "Wrong alignment on BPI_GameHUD_C_GetInventoryTutorial");
static_assert(sizeof(BPI_GameHUD_C_GetInventoryTutorial) == 0x000001, "Wrong size on BPI_GameHUD_C_GetInventoryTutorial");
static_assert(offsetof(BPI_GameHUD_C_GetInventoryTutorial, Enabled) == 0x000000, "Member 'BPI_GameHUD_C_GetInventoryTutorial::Enabled' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetInventoryWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetInventoryWidget final
{
public:
	class UMPInGameInventory_C*                   Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetInventoryWidget) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetInventoryWidget");
static_assert(sizeof(BPI_GameHUD_C_GetInventoryWidget) == 0x000008, "Wrong size on BPI_GameHUD_C_GetInventoryWidget");
static_assert(offsetof(BPI_GameHUD_C_GetInventoryWidget, Widget) == 0x000000, "Member 'BPI_GameHUD_C_GetInventoryWidget::Widget' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetItemInfoWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetItemInfoWidget final
{
public:
	class UW_ItemInfo_C*                          Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetItemInfoWidget) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetItemInfoWidget");
static_assert(sizeof(BPI_GameHUD_C_GetItemInfoWidget) == 0x000008, "Wrong size on BPI_GameHUD_C_GetItemInfoWidget");
static_assert(offsetof(BPI_GameHUD_C_GetItemInfoWidget, Widget) == 0x000000, "Member 'BPI_GameHUD_C_GetItemInfoWidget::Widget' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetTutorialRewardWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetTutorialRewardWidget final
{
public:
	class UWBP_TutorialItemReward_C*              Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetTutorialRewardWidget) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetTutorialRewardWidget");
static_assert(sizeof(BPI_GameHUD_C_GetTutorialRewardWidget) == 0x000008, "Wrong size on BPI_GameHUD_C_GetTutorialRewardWidget");
static_assert(offsetof(BPI_GameHUD_C_GetTutorialRewardWidget, Widget) == 0x000000, "Member 'BPI_GameHUD_C_GetTutorialRewardWidget::Widget' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetTutorialSlidesWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetTutorialSlidesWidget final
{
public:
	class UWBP_SlidesTutorial_C*                  Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetTutorialSlidesWidget) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetTutorialSlidesWidget");
static_assert(sizeof(BPI_GameHUD_C_GetTutorialSlidesWidget) == 0x000008, "Wrong size on BPI_GameHUD_C_GetTutorialSlidesWidget");
static_assert(offsetof(BPI_GameHUD_C_GetTutorialSlidesWidget, Widget) == 0x000000, "Member 'BPI_GameHUD_C_GetTutorialSlidesWidget::Widget' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetUIMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_GetUIMode final
{
public:
	EWE_UIMode                                    ReturnedMode;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetUIMode) == 0x000001, "Wrong alignment on BPI_GameHUD_C_GetUIMode");
static_assert(sizeof(BPI_GameHUD_C_GetUIMode) == 0x000001, "Wrong size on BPI_GameHUD_C_GetUIMode");
static_assert(offsetof(BPI_GameHUD_C_GetUIMode, ReturnedMode) == 0x000000, "Member 'BPI_GameHUD_C_GetUIMode::ReturnedMode' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetVehicleInteract
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_GetVehicleInteract final
{
public:
	bool                                          Interact;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetVehicleInteract) == 0x000001, "Wrong alignment on BPI_GameHUD_C_GetVehicleInteract");
static_assert(sizeof(BPI_GameHUD_C_GetVehicleInteract) == 0x000001, "Wrong size on BPI_GameHUD_C_GetVehicleInteract");
static_assert(offsetof(BPI_GameHUD_C_GetVehicleInteract, Interact) == 0x000000, "Member 'BPI_GameHUD_C_GetVehicleInteract::Interact' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.GetWorkBenchWidgetRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_GetWorkBenchWidgetRef final
{
public:
	class UWBP_Workbench_C*                       WorkbenchWidgetRef;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_GetWorkBenchWidgetRef) == 0x000008, "Wrong alignment on BPI_GameHUD_C_GetWorkBenchWidgetRef");
static_assert(sizeof(BPI_GameHUD_C_GetWorkBenchWidgetRef) == 0x000008, "Wrong size on BPI_GameHUD_C_GetWorkBenchWidgetRef");
static_assert(offsetof(BPI_GameHUD_C_GetWorkBenchWidgetRef, WorkbenchWidgetRef) == 0x000000, "Member 'BPI_GameHUD_C_GetWorkBenchWidgetRef::WorkbenchWidgetRef' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.IsShopWidgetOpen
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_IsShopWidgetOpen final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_IsShopWidgetOpen) == 0x000001, "Wrong alignment on BPI_GameHUD_C_IsShopWidgetOpen");
static_assert(sizeof(BPI_GameHUD_C_IsShopWidgetOpen) == 0x000001, "Wrong size on BPI_GameHUD_C_IsShopWidgetOpen");
static_assert(offsetof(BPI_GameHUD_C_IsShopWidgetOpen, IsOpen) == 0x000000, "Member 'BPI_GameHUD_C_IsShopWidgetOpen::IsOpen' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.IsStashWidgetOpen
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_IsStashWidgetOpen final
{
public:
	bool                                          IsStashOpen;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_IsStashWidgetOpen) == 0x000001, "Wrong alignment on BPI_GameHUD_C_IsStashWidgetOpen");
static_assert(sizeof(BPI_GameHUD_C_IsStashWidgetOpen) == 0x000001, "Wrong size on BPI_GameHUD_C_IsStashWidgetOpen");
static_assert(offsetof(BPI_GameHUD_C_IsStashWidgetOpen, IsStashOpen) == 0x000000, "Member 'BPI_GameHUD_C_IsStashWidgetOpen::IsStashOpen' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ItemTypeToText
// 0x0020 (0x0020 - 0x0000)
struct BPI_GameHUD_C_ItemTypeToText final
{
public:
	EInfoType                                     ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Text;                                              // 0x0008(0x0018)(Parm, OutParm)
};
static_assert(alignof(BPI_GameHUD_C_ItemTypeToText) == 0x000008, "Wrong alignment on BPI_GameHUD_C_ItemTypeToText");
static_assert(sizeof(BPI_GameHUD_C_ItemTypeToText) == 0x000020, "Wrong size on BPI_GameHUD_C_ItemTypeToText");
static_assert(offsetof(BPI_GameHUD_C_ItemTypeToText, ItemType) == 0x000000, "Member 'BPI_GameHUD_C_ItemTypeToText::ItemType' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_ItemTypeToText, Text) == 0x000008, "Member 'BPI_GameHUD_C_ItemTypeToText::Text' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.NotifyNewLocation
// 0x0038 (0x0038 - 0x0000)
struct BPI_GameHUD_C_NotifyNewLocation final
{
public:
	class FText                                   RegionName;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   LocationName;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          IsCity;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_NotifyNewLocation) == 0x000008, "Wrong alignment on BPI_GameHUD_C_NotifyNewLocation");
static_assert(sizeof(BPI_GameHUD_C_NotifyNewLocation) == 0x000038, "Wrong size on BPI_GameHUD_C_NotifyNewLocation");
static_assert(offsetof(BPI_GameHUD_C_NotifyNewLocation, RegionName) == 0x000000, "Member 'BPI_GameHUD_C_NotifyNewLocation::RegionName' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_NotifyNewLocation, LocationName) == 0x000018, "Member 'BPI_GameHUD_C_NotifyNewLocation::LocationName' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_NotifyNewLocation, IsCity) == 0x000030, "Member 'BPI_GameHUD_C_NotifyNewLocation::IsCity' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.RemoveInputHintByStage
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameHUD_C_RemoveInputHintByStage final
{
public:
	class FString                                 _Stage;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_RemoveInputHintByStage) == 0x000008, "Wrong alignment on BPI_GameHUD_C_RemoveInputHintByStage");
static_assert(sizeof(BPI_GameHUD_C_RemoveInputHintByStage) == 0x000010, "Wrong size on BPI_GameHUD_C_RemoveInputHintByStage");
static_assert(offsetof(BPI_GameHUD_C_RemoveInputHintByStage, _Stage) == 0x000000, "Member 'BPI_GameHUD_C_RemoveInputHintByStage::_Stage' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.RemoveMark
// 0x000C (0x000C - 0x0000)
struct BPI_GameHUD_C_RemoveMark final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_RemoveMark) == 0x000004, "Wrong alignment on BPI_GameHUD_C_RemoveMark");
static_assert(sizeof(BPI_GameHUD_C_RemoveMark) == 0x00000C, "Wrong size on BPI_GameHUD_C_RemoveMark");
static_assert(offsetof(BPI_GameHUD_C_RemoveMark, Key) == 0x000000, "Member 'BPI_GameHUD_C_RemoveMark::Key' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_RemoveMark, Success) == 0x000008, "Member 'BPI_GameHUD_C_RemoveMark::Success' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.RemoveNotification
// 0x0002 (0x0002 - 0x0000)
struct BPI_GameHUD_C_RemoveNotification final
{
public:
	E_NotificationType                            NotificationType;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_RemoveNotification) == 0x000001, "Wrong alignment on BPI_GameHUD_C_RemoveNotification");
static_assert(sizeof(BPI_GameHUD_C_RemoveNotification) == 0x000002, "Wrong size on BPI_GameHUD_C_RemoveNotification");
static_assert(offsetof(BPI_GameHUD_C_RemoveNotification, NotificationType) == 0x000000, "Member 'BPI_GameHUD_C_RemoveNotification::NotificationType' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_RemoveNotification, Success) == 0x000001, "Member 'BPI_GameHUD_C_RemoveNotification::Success' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetAllowDragInventoryItems
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SetAllowDragInventoryItems final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetAllowDragInventoryItems) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SetAllowDragInventoryItems");
static_assert(sizeof(BPI_GameHUD_C_SetAllowDragInventoryItems) == 0x000001, "Wrong size on BPI_GameHUD_C_SetAllowDragInventoryItems");
static_assert(offsetof(BPI_GameHUD_C_SetAllowDragInventoryItems, Enable) == 0x000000, "Member 'BPI_GameHUD_C_SetAllowDragInventoryItems::Enable' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetDragWidget
// 0x0010 (0x0010 - 0x0000)
struct BPI_GameHUD_C_SetDragWidget final
{
public:
	class UDragWidget_C*                          Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetDragWidget) == 0x000008, "Wrong alignment on BPI_GameHUD_C_SetDragWidget");
static_assert(sizeof(BPI_GameHUD_C_SetDragWidget) == 0x000010, "Wrong size on BPI_GameHUD_C_SetDragWidget");
static_assert(offsetof(BPI_GameHUD_C_SetDragWidget, Widget) == 0x000000, "Member 'BPI_GameHUD_C_SetDragWidget::Widget' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_SetDragWidget, Success) == 0x000008, "Member 'BPI_GameHUD_C_SetDragWidget::Success' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetFurnitureCatalogRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_SetFurnitureCatalogRef final
{
public:
	class UWBP_FurnitureShopButtons_C*            FurnitureCatalog;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetFurnitureCatalogRef) == 0x000008, "Wrong alignment on BPI_GameHUD_C_SetFurnitureCatalogRef");
static_assert(sizeof(BPI_GameHUD_C_SetFurnitureCatalogRef) == 0x000008, "Wrong size on BPI_GameHUD_C_SetFurnitureCatalogRef");
static_assert(offsetof(BPI_GameHUD_C_SetFurnitureCatalogRef, FurnitureCatalog) == 0x000000, "Member 'BPI_GameHUD_C_SetFurnitureCatalogRef::FurnitureCatalog' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetInventoryTutorial
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SetInventoryTutorial final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetInventoryTutorial) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SetInventoryTutorial");
static_assert(sizeof(BPI_GameHUD_C_SetInventoryTutorial) == 0x000001, "Wrong size on BPI_GameHUD_C_SetInventoryTutorial");
static_assert(offsetof(BPI_GameHUD_C_SetInventoryTutorial, Enabled) == 0x000000, "Member 'BPI_GameHUD_C_SetInventoryTutorial::Enabled' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetKilledByInfo
// 0x0048 (0x0048 - 0x0000)
struct BPI_GameHUD_C_SetKilledByInfo final
{
public:
	TSoftObjectPtr<class UPaperSprite>            WeaponIcon;                                        // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class FString                                 Nickname;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetKilledByInfo) == 0x000008, "Wrong alignment on BPI_GameHUD_C_SetKilledByInfo");
static_assert(sizeof(BPI_GameHUD_C_SetKilledByInfo) == 0x000048, "Wrong size on BPI_GameHUD_C_SetKilledByInfo");
static_assert(offsetof(BPI_GameHUD_C_SetKilledByInfo, WeaponIcon) == 0x000000, "Member 'BPI_GameHUD_C_SetKilledByInfo::WeaponIcon' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_SetKilledByInfo, Nickname) == 0x000030, "Member 'BPI_GameHUD_C_SetKilledByInfo::Nickname' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_SetKilledByInfo, IsValid) == 0x000040, "Member 'BPI_GameHUD_C_SetKilledByInfo::IsValid' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetShopOpen
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SetShopOpen final
{
public:
	bool                                          In_Is_Open;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetShopOpen) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SetShopOpen");
static_assert(sizeof(BPI_GameHUD_C_SetShopOpen) == 0x000001, "Wrong size on BPI_GameHUD_C_SetShopOpen");
static_assert(offsetof(BPI_GameHUD_C_SetShopOpen, In_Is_Open) == 0x000000, "Member 'BPI_GameHUD_C_SetShopOpen::In_Is_Open' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetStashOpen
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SetStashOpen final
{
public:
	bool                                          InIsOpen;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetStashOpen) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SetStashOpen");
static_assert(sizeof(BPI_GameHUD_C_SetStashOpen) == 0x000001, "Wrong size on BPI_GameHUD_C_SetStashOpen");
static_assert(offsetof(BPI_GameHUD_C_SetStashOpen, InIsOpen) == 0x000000, "Member 'BPI_GameHUD_C_SetStashOpen::InIsOpen' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetUIMode
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SetUIMode final
{
public:
	EWE_UIMode                                    NewMode;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetUIMode) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SetUIMode");
static_assert(sizeof(BPI_GameHUD_C_SetUIMode) == 0x000001, "Wrong size on BPI_GameHUD_C_SetUIMode");
static_assert(offsetof(BPI_GameHUD_C_SetUIMode, NewMode) == 0x000000, "Member 'BPI_GameHUD_C_SetUIMode::NewMode' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetVehicleInteract
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SetVehicleInteract final
{
public:
	bool                                          VehicleInteract;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetVehicleInteract) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SetVehicleInteract");
static_assert(sizeof(BPI_GameHUD_C_SetVehicleInteract) == 0x000001, "Wrong size on BPI_GameHUD_C_SetVehicleInteract");
static_assert(offsetof(BPI_GameHUD_C_SetVehicleInteract, VehicleInteract) == 0x000000, "Member 'BPI_GameHUD_C_SetVehicleInteract::VehicleInteract' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SetWorkbenchWidgetRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_SetWorkbenchWidgetRef final
{
public:
	class UWBP_Workbench_C*                       WorkbenchWidgetRef;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SetWorkbenchWidgetRef) == 0x000008, "Wrong alignment on BPI_GameHUD_C_SetWorkbenchWidgetRef");
static_assert(sizeof(BPI_GameHUD_C_SetWorkbenchWidgetRef) == 0x000008, "Wrong size on BPI_GameHUD_C_SetWorkbenchWidgetRef");
static_assert(offsetof(BPI_GameHUD_C_SetWorkbenchWidgetRef, WorkbenchWidgetRef) == 0x000000, "Member 'BPI_GameHUD_C_SetWorkbenchWidgetRef::WorkbenchWidgetRef' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ShowBinocularsOverlay
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_ShowBinocularsOverlay final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_ShowBinocularsOverlay) == 0x000001, "Wrong alignment on BPI_GameHUD_C_ShowBinocularsOverlay");
static_assert(sizeof(BPI_GameHUD_C_ShowBinocularsOverlay) == 0x000001, "Wrong size on BPI_GameHUD_C_ShowBinocularsOverlay");
static_assert(offsetof(BPI_GameHUD_C_ShowBinocularsOverlay, Show) == 0x000000, "Member 'BPI_GameHUD_C_ShowBinocularsOverlay::Show' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ShowBleedingHint
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_ShowBleedingHint final
{
public:
	class AActor*                                 RagActor;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_ShowBleedingHint) == 0x000008, "Wrong alignment on BPI_GameHUD_C_ShowBleedingHint");
static_assert(sizeof(BPI_GameHUD_C_ShowBleedingHint) == 0x000008, "Wrong size on BPI_GameHUD_C_ShowBleedingHint");
static_assert(offsetof(BPI_GameHUD_C_ShowBleedingHint, RagActor) == 0x000000, "Member 'BPI_GameHUD_C_ShowBleedingHint::RagActor' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ShowColdHint
// 0x0008 (0x0008 - 0x0000)
struct BPI_GameHUD_C_ShowColdHint final
{
public:
	class AActor*                                 Cold_Actor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_ShowColdHint) == 0x000008, "Wrong alignment on BPI_GameHUD_C_ShowColdHint");
static_assert(sizeof(BPI_GameHUD_C_ShowColdHint) == 0x000008, "Wrong size on BPI_GameHUD_C_ShowColdHint");
static_assert(offsetof(BPI_GameHUD_C_ShowColdHint, Cold_Actor) == 0x000000, "Member 'BPI_GameHUD_C_ShowColdHint::Cold_Actor' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ShowFirstRaidHint
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_ShowFirstRaidHint final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_ShowFirstRaidHint) == 0x000001, "Wrong alignment on BPI_GameHUD_C_ShowFirstRaidHint");
static_assert(sizeof(BPI_GameHUD_C_ShowFirstRaidHint) == 0x000001, "Wrong size on BPI_GameHUD_C_ShowFirstRaidHint");
static_assert(offsetof(BPI_GameHUD_C_ShowFirstRaidHint, Show) == 0x000000, "Member 'BPI_GameHUD_C_ShowFirstRaidHint::Show' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ShowRadialInteraction
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameHUD_C_ShowRadialInteraction final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_ActorType                                   ObjectType;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_ShowRadialInteraction) == 0x000008, "Wrong alignment on BPI_GameHUD_C_ShowRadialInteraction");
static_assert(sizeof(BPI_GameHUD_C_ShowRadialInteraction) == 0x000018, "Wrong size on BPI_GameHUD_C_ShowRadialInteraction");
static_assert(offsetof(BPI_GameHUD_C_ShowRadialInteraction, Show) == 0x000000, "Member 'BPI_GameHUD_C_ShowRadialInteraction::Show' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_ShowRadialInteraction, Object) == 0x000008, "Member 'BPI_GameHUD_C_ShowRadialInteraction::Object' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_ShowRadialInteraction, ObjectType) == 0x000010, "Member 'BPI_GameHUD_C_ShowRadialInteraction::ObjectType' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.ShowTutorial3DWidget
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_ShowTutorial3DWidget final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_ShowTutorial3DWidget) == 0x000001, "Wrong alignment on BPI_GameHUD_C_ShowTutorial3DWidget");
static_assert(sizeof(BPI_GameHUD_C_ShowTutorial3DWidget) == 0x000001, "Wrong size on BPI_GameHUD_C_ShowTutorial3DWidget");
static_assert(offsetof(BPI_GameHUD_C_ShowTutorial3DWidget, Show) == 0x000000, "Member 'BPI_GameHUD_C_ShowTutorial3DWidget::Show' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SurrenderButtonPressed
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_SurrenderButtonPressed final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SurrenderButtonPressed) == 0x000001, "Wrong alignment on BPI_GameHUD_C_SurrenderButtonPressed");
static_assert(sizeof(BPI_GameHUD_C_SurrenderButtonPressed) == 0x000001, "Wrong size on BPI_GameHUD_C_SurrenderButtonPressed");
static_assert(offsetof(BPI_GameHUD_C_SurrenderButtonPressed, Pressed) == 0x000000, "Member 'BPI_GameHUD_C_SurrenderButtonPressed::Pressed' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SurrenderRevive
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameHUD_C_SurrenderRevive final
{
public:
	bool                                          Revive;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SurrenderRevive) == 0x000008, "Wrong alignment on BPI_GameHUD_C_SurrenderRevive");
static_assert(sizeof(BPI_GameHUD_C_SurrenderRevive) == 0x000018, "Wrong size on BPI_GameHUD_C_SurrenderRevive");
static_assert(offsetof(BPI_GameHUD_C_SurrenderRevive, Revive) == 0x000000, "Member 'BPI_GameHUD_C_SurrenderRevive::Revive' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_SurrenderRevive, PlayerName) == 0x000008, "Member 'BPI_GameHUD_C_SurrenderRevive::PlayerName' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.SurrenderShow
// 0x0018 (0x0018 - 0x0000)
struct BPI_GameHUD_C_SurrenderShow final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KillerName;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_SurrenderShow) == 0x000008, "Wrong alignment on BPI_GameHUD_C_SurrenderShow");
static_assert(sizeof(BPI_GameHUD_C_SurrenderShow) == 0x000018, "Wrong size on BPI_GameHUD_C_SurrenderShow");
static_assert(offsetof(BPI_GameHUD_C_SurrenderShow, Show) == 0x000000, "Member 'BPI_GameHUD_C_SurrenderShow::Show' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_SurrenderShow, KillerName) == 0x000008, "Member 'BPI_GameHUD_C_SurrenderShow::KillerName' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.UpdateInventorySlotsAvailableForDismanle
// 0x0002 (0x0002 - 0x0000)
struct BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle final
{
public:
	bool                                          Check;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle) == 0x000001, "Wrong alignment on BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle");
static_assert(sizeof(BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle) == 0x000002, "Wrong size on BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle");
static_assert(offsetof(BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle, Check) == 0x000000, "Member 'BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle::Check' has a wrong offset!");
static_assert(offsetof(BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle, Enable) == 0x000001, "Member 'BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle::Enable' has a wrong offset!");

// Function BPI_GameHUD.BPI_GameHUD_C.UpdateInventorySlotsAvaliableForSell
// 0x0001 (0x0001 - 0x0000)
struct BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell final
{
public:
	bool                                          bCheck;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell) == 0x000001, "Wrong alignment on BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell");
static_assert(sizeof(BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell) == 0x000001, "Wrong size on BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell");
static_assert(offsetof(BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell, bCheck) == 0x000000, "Member 'BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell::bCheck' has a wrong offset!");

}

