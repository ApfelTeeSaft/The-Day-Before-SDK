#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Weaponry

#include "Basic.hpp"

#include "BPE_Weapon_Type_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_Weaponry.BPI_Weaponry_C.WP_Aiming
// 0x0001 (0x0001 - 0x0000)
struct BPI_Weaponry_C_WP_Aiming final
{
public:
	bool                                          Aim;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_Aiming) == 0x000001, "Wrong alignment on BPI_Weaponry_C_WP_Aiming");
static_assert(sizeof(BPI_Weaponry_C_WP_Aiming) == 0x000001, "Wrong size on BPI_Weaponry_C_WP_Aiming");
static_assert(offsetof(BPI_Weaponry_C_WP_Aiming, Aim) == 0x000000, "Member 'BPI_Weaponry_C_WP_Aiming::Aim' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_Anim_Weapon_Equiped
// 0x0008 (0x0008 - 0x0000)
struct BPI_Weaponry_C_WP_Anim_Weapon_Equiped final
{
public:
	class ABP_Weapon_C*                           NewParam;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_Anim_Weapon_Equiped) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_Anim_Weapon_Equiped");
static_assert(sizeof(BPI_Weaponry_C_WP_Anim_Weapon_Equiped) == 0x000008, "Wrong size on BPI_Weaponry_C_WP_Anim_Weapon_Equiped");
static_assert(offsetof(BPI_Weaponry_C_WP_Anim_Weapon_Equiped, NewParam) == 0x000000, "Member 'BPI_Weaponry_C_WP_Anim_Weapon_Equiped::NewParam' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_EquipWeapon
// 0x0008 (0x0008 - 0x0000)
struct BPI_Weaponry_C_WP_EquipWeapon final
{
public:
	class FName                                   WeaponName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_EquipWeapon) == 0x000004, "Wrong alignment on BPI_Weaponry_C_WP_EquipWeapon");
static_assert(sizeof(BPI_Weaponry_C_WP_EquipWeapon) == 0x000008, "Wrong size on BPI_Weaponry_C_WP_EquipWeapon");
static_assert(offsetof(BPI_Weaponry_C_WP_EquipWeapon, WeaponName) == 0x000000, "Member 'BPI_Weaponry_C_WP_EquipWeapon::WeaponName' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetAimCamera
// 0x0008 (0x0008 - 0x0000)
struct BPI_Weaponry_C_WP_GetAimCamera final
{
public:
	class UCameraComponent*                       Camera;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_GetAimCamera) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_GetAimCamera");
static_assert(sizeof(BPI_Weaponry_C_WP_GetAimCamera) == 0x000008, "Wrong size on BPI_Weaponry_C_WP_GetAimCamera");
static_assert(offsetof(BPI_Weaponry_C_WP_GetAimCamera, Camera) == 0x000000, "Member 'BPI_Weaponry_C_WP_GetAimCamera::Camera' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetLefHandEffectorTransform
// 0x0070 (0x0070 - 0x0000)
struct BPI_Weaponry_C_WP_GetLefHandEffectorTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEffector;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_GetLefHandEffectorTransform) == 0x000010, "Wrong alignment on BPI_Weaponry_C_WP_GetLefHandEffectorTransform");
static_assert(sizeof(BPI_Weaponry_C_WP_GetLefHandEffectorTransform) == 0x000070, "Wrong size on BPI_Weaponry_C_WP_GetLefHandEffectorTransform");
static_assert(offsetof(BPI_Weaponry_C_WP_GetLefHandEffectorTransform, Transform) == 0x000000, "Member 'BPI_Weaponry_C_WP_GetLefHandEffectorTransform::Transform' has a wrong offset!");
static_assert(offsetof(BPI_Weaponry_C_WP_GetLefHandEffectorTransform, HasEffector) == 0x000060, "Member 'BPI_Weaponry_C_WP_GetLefHandEffectorTransform::HasEffector' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetRotationInput
// 0x0010 (0x0010 - 0x0000)
struct BPI_Weaponry_C_WP_GetRotationInput final
{
public:
	struct FVector2D                              NewParam;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_GetRotationInput) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_GetRotationInput");
static_assert(sizeof(BPI_Weaponry_C_WP_GetRotationInput) == 0x000010, "Wrong size on BPI_Weaponry_C_WP_GetRotationInput");
static_assert(offsetof(BPI_Weaponry_C_WP_GetRotationInput, NewParam) == 0x000000, "Member 'BPI_Weaponry_C_WP_GetRotationInput::NewParam' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetShootDirection
// 0x0018 (0x0018 - 0x0000)
struct BPI_Weaponry_C_WP_GetShootDirection final
{
public:
	struct FVector                                ShootDirection;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_GetShootDirection) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_GetShootDirection");
static_assert(sizeof(BPI_Weaponry_C_WP_GetShootDirection) == 0x000018, "Wrong size on BPI_Weaponry_C_WP_GetShootDirection");
static_assert(offsetof(BPI_Weaponry_C_WP_GetShootDirection, ShootDirection) == 0x000000, "Member 'BPI_Weaponry_C_WP_GetShootDirection::ShootDirection' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct BPI_Weaponry_C_WP_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkinnedMesh;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_GetSkeletalMesh) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_GetSkeletalMesh");
static_assert(sizeof(BPI_Weaponry_C_WP_GetSkeletalMesh) == 0x000010, "Wrong size on BPI_Weaponry_C_WP_GetSkeletalMesh");
static_assert(offsetof(BPI_Weaponry_C_WP_GetSkeletalMesh, SkinnedMesh) == 0x000000, "Member 'BPI_Weaponry_C_WP_GetSkeletalMesh::SkinnedMesh' has a wrong offset!");
static_assert(offsetof(BPI_Weaponry_C_WP_GetSkeletalMesh, Success) == 0x000008, "Member 'BPI_Weaponry_C_WP_GetSkeletalMesh::Success' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetWeaponType
// 0x0001 (0x0001 - 0x0000)
struct BPI_Weaponry_C_WP_GetWeaponType final
{
public:
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_GetWeaponType) == 0x000001, "Wrong alignment on BPI_Weaponry_C_WP_GetWeaponType");
static_assert(sizeof(BPI_Weaponry_C_WP_GetWeaponType) == 0x000001, "Wrong size on BPI_Weaponry_C_WP_GetWeaponType");
static_assert(offsetof(BPI_Weaponry_C_WP_GetWeaponType, WeaponType) == 0x000000, "Member 'BPI_Weaponry_C_WP_GetWeaponType::WeaponType' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_HasWeaponOrBroken
// 0x0001 (0x0001 - 0x0000)
struct BPI_Weaponry_C_WP_HasWeaponOrBroken final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_HasWeaponOrBroken) == 0x000001, "Wrong alignment on BPI_Weaponry_C_WP_HasWeaponOrBroken");
static_assert(sizeof(BPI_Weaponry_C_WP_HasWeaponOrBroken) == 0x000001, "Wrong size on BPI_Weaponry_C_WP_HasWeaponOrBroken");
static_assert(offsetof(BPI_Weaponry_C_WP_HasWeaponOrBroken, Value) == 0x000000, "Member 'BPI_Weaponry_C_WP_HasWeaponOrBroken::Value' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_MeleeActivation
// 0x0001 (0x0001 - 0x0000)
struct BPI_Weaponry_C_WP_MeleeActivation final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_MeleeActivation) == 0x000001, "Wrong alignment on BPI_Weaponry_C_WP_MeleeActivation");
static_assert(sizeof(BPI_Weaponry_C_WP_MeleeActivation) == 0x000001, "Wrong size on BPI_Weaponry_C_WP_MeleeActivation");
static_assert(offsetof(BPI_Weaponry_C_WP_MeleeActivation, State) == 0x000000, "Member 'BPI_Weaponry_C_WP_MeleeActivation::State' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_PlayGunTail
// 0x0008 (0x0008 - 0x0000)
struct BPI_Weaponry_C_WP_PlayGunTail final
{
public:
	class UFMODEvent*                             TailSound;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_PlayGunTail) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_PlayGunTail");
static_assert(sizeof(BPI_Weaponry_C_WP_PlayGunTail) == 0x000008, "Wrong size on BPI_Weaponry_C_WP_PlayGunTail");
static_assert(offsetof(BPI_Weaponry_C_WP_PlayGunTail, TailSound) == 0x000000, "Member 'BPI_Weaponry_C_WP_PlayGunTail::TailSound' has a wrong offset!");

// Function BPI_Weaponry.BPI_Weaponry_C.WP_SetRecoilPower
// 0x0008 (0x0008 - 0x0000)
struct BPI_Weaponry_C_WP_SetRecoilPower final
{
public:
	double                                        RecoilPower;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_Weaponry_C_WP_SetRecoilPower) == 0x000008, "Wrong alignment on BPI_Weaponry_C_WP_SetRecoilPower");
static_assert(sizeof(BPI_Weaponry_C_WP_SetRecoilPower) == 0x000008, "Wrong size on BPI_Weaponry_C_WP_SetRecoilPower");
static_assert(offsetof(BPI_Weaponry_C_WP_SetRecoilPower, RecoilPower) == 0x000000, "Member 'BPI_Weaponry_C_WP_SetRecoilPower::RecoilPower' has a wrong offset!");

}

