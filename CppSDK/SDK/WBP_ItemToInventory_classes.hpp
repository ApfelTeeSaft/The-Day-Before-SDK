#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ItemToInventory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FItemInfo_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_classes.hpp"
#include "Slate_structs.hpp"
#include "EDismantleType_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_ItemToInventory.WBP_ItemToInventory_C
// 0x03A8 (0x0628 - 0x0280)
class UWBP_ItemToInventory_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHorizontalBox*                         HorizontalBox_Pockets;                             // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_Backpack;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_Items;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_backpack;                                  // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMG_LabelText_C*                       UMG_LabelText;                                     // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMG_LabelText_C*                       UMG_LabelText_1;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMG_LabelText_C*                       UMG_LabelText_2;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Backpack;                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Content;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CraftErrorMessage_C*               WBP_CraftErrorMessage;                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ItemInteractionInfo_C*             WBP_WorkbenchCraftInfo;                            // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_ItemInteractionContainerEntry_C*   SelectedEntry;                                     // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CraftedItemInfo;                                   // 0x02E8(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ProcessFinished;                                   // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EntrySelected;                                     // 0x0518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UWBP_ItemInteractionContainerEntry_C*> EntryList;                                         // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             InventoryUpdated;                                  // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UseMoney;                                          // 0x0548(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Action;                                            // 0x0550(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	class FText                                   Processing;                                        // 0x0568(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	class FText                                   Error_No_Free_Space;                               // 0x0580(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	class FText                                   Resource_Label;                                    // 0x0598(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             OnCreateCountChanged;                              // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bLimitedItems;                                     // 0x05C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5C1[0x7];                                      // 0x05C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HeaderText;                                        // 0x05C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ExposeOnSpawn)
	FMulticastInlineDelegateProperty_             OnProcessStarted;                                  // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UFMODEvent*                             SoundEvent_ActionStart;                            // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bPlaySwapAnimation;                                // 0x05F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F9[0x7];                                      // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     ProcessSound;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             OnInstantCreateRequest;                            // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSetButtonEnable;                                 // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Add_Entry_Item(const struct FFItemInfo& ItemInfo, class UWBP_ItemInteractionContainerEntry_C** OutputPin);
	void BndEvt__WBP_ItemToInventory_WBP_WorkbenchCraftInfo_K2Node_ComponentBoundEvent_0_OnCountChanged__DelegateSignature(int32 Count);
	void BndEvt__WBP_ItemToInventory_WBP_WorkbenchCraftInfo_K2Node_ComponentBoundEvent_1_OnParentNavigation__DelegateSignature();
	void BndEvt__WBP_ItemToInventory_WBP_WorkbenchCraftInfo_K2Node_ComponentBoundEvent_3_ActionButtonPressed__DelegateSignature();
	void BndEvt__WBP_ItemToInventory_WBP_WorkbenchCraftInfo_K2Node_ComponentBoundEvent_4_ProcessFinished__DelegateSignature();
	void ButtonHovered(class UWBP_ItemInteractionContainerEntry_C* Ref);
	void ButtonPressed();
	void ButtonSelected(class UWBP_ItemInteractionContainerEntry_C* ItemWidgetRef);
	void ButtonUnhovered(class UWBP_ItemInteractionContainerEntry_C* Ref);
	void CalculateSellPrice(const struct FFItemInfo& Item, int32* Price);
	void CheckCanIncrease(int32 Count);
	void CheckFreeSpaceToAddItem(bool* HaveFreeSpace);
	void CheckFreeSpaceToDismantleItems(bool* Return);
	void ClearEntries();
	void Construct();
	void CreateItem();
	class UWidget* CustomNavigation_InfoRight(EUINavigation Param_Navigation);
	class UWidget* CustomNavigation_InventoryLeft(EUINavigation Param_Navigation);
	class UWidget* CustomNavigation_ItemsRight(EUINavigation Param_Navigation);
	void EntrySelected__DelegateSignature();
	void ExecuteUbergraph_WBP_ItemToInventory(int32 EntryPoint);
	void FinalizeInit();
	void Finished_497DCE5A4B680D7DE0007CA35FF7F849();
	void Finished_586A4EE647726B3111384B8B8A26AF8B();
	void GetListOfItems(TArray<class UWBP_ItemInteractionContainerEntry_C*>* Param_EntryList);
	void GetSelectedEntry(class UWBP_ItemInteractionContainerEntry_C** Param_SelectedEntry);
	void Init();
	void InstantCreate(class UWBP_ItemInteractionContainerEntry_C* ItemWidgetRef);
	void InventoryUpdate();
	void InventoryUpdated__DelegateSignature();
	void LockItemsListScroll(bool Lock);
	void OnCreateCountChanged__DelegateSignature(int32 Count);
	void OnInstantCreateRequest__DelegateSignature();
	void OnProcessStarted__DelegateSignature(const struct FFItemInfo& Info);
	void OnSetButtonEnable__DelegateSignature(bool Enable);
	void PreConstruct(bool IsDesignTime);
	void ProcessFinished__DelegateSignature(const struct FFItemInfo& ItemInfo);
	void RemoveEntryByIndex(int32 Param_Index);
	void RemoveEntryByUID(int32 Uid);
	void UnbindInventoryUpdate();
	void Update_Required_Resouces(const TMap<EDismantleType, int32>& ResourcesAvailable, const TMap<EDismantleType, int32>& ResourcesRequired, bool CanCreate);
	void UpdateEntryByIndex(int32 Param_Index, const struct FFItemInfo& Item);
	void UpdateEntryByUID(int32 Uid, const struct FFItemInfo& Item);
	void UpdateResources();
	void ValidateItemInfoCount(int32* Count);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_ItemToInventory_C">();
	}
	static class UWBP_ItemToInventory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_ItemToInventory_C>();
	}
};
static_assert(alignof(UWBP_ItemToInventory_C) == 0x000008, "Wrong alignment on UWBP_ItemToInventory_C");
static_assert(sizeof(UWBP_ItemToInventory_C) == 0x000628, "Wrong size on UWBP_ItemToInventory_C");
static_assert(offsetof(UWBP_ItemToInventory_C, UberGraphFrame) == 0x000280, "Member 'UWBP_ItemToInventory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, HorizontalBox_Pockets) == 0x000288, "Member 'UWBP_ItemToInventory_C::HorizontalBox_Pockets' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, ScrollBox_Backpack) == 0x000290, "Member 'UWBP_ItemToInventory_C::ScrollBox_Backpack' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, ScrollBox_Items) == 0x000298, "Member 'UWBP_ItemToInventory_C::ScrollBox_Items' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, SizeBox_backpack) == 0x0002A0, "Member 'UWBP_ItemToInventory_C::SizeBox_backpack' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, UMG_LabelText) == 0x0002A8, "Member 'UWBP_ItemToInventory_C::UMG_LabelText' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, UMG_LabelText_1) == 0x0002B0, "Member 'UWBP_ItemToInventory_C::UMG_LabelText_1' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, UMG_LabelText_2) == 0x0002B8, "Member 'UWBP_ItemToInventory_C::UMG_LabelText_2' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, VerticalBox_Backpack) == 0x0002C0, "Member 'UWBP_ItemToInventory_C::VerticalBox_Backpack' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, VerticalBox_Content) == 0x0002C8, "Member 'UWBP_ItemToInventory_C::VerticalBox_Content' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, WBP_CraftErrorMessage) == 0x0002D0, "Member 'UWBP_ItemToInventory_C::WBP_CraftErrorMessage' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, WBP_WorkbenchCraftInfo) == 0x0002D8, "Member 'UWBP_ItemToInventory_C::WBP_WorkbenchCraftInfo' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, SelectedEntry) == 0x0002E0, "Member 'UWBP_ItemToInventory_C::SelectedEntry' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, CraftedItemInfo) == 0x0002E8, "Member 'UWBP_ItemToInventory_C::CraftedItemInfo' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, ProcessFinished) == 0x000508, "Member 'UWBP_ItemToInventory_C::ProcessFinished' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, EntrySelected) == 0x000518, "Member 'UWBP_ItemToInventory_C::EntrySelected' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, EntryList) == 0x000528, "Member 'UWBP_ItemToInventory_C::EntryList' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, InventoryUpdated) == 0x000538, "Member 'UWBP_ItemToInventory_C::InventoryUpdated' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, UseMoney) == 0x000548, "Member 'UWBP_ItemToInventory_C::UseMoney' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, Action) == 0x000550, "Member 'UWBP_ItemToInventory_C::Action' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, Processing) == 0x000568, "Member 'UWBP_ItemToInventory_C::Processing' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, Error_No_Free_Space) == 0x000580, "Member 'UWBP_ItemToInventory_C::Error_No_Free_Space' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, Resource_Label) == 0x000598, "Member 'UWBP_ItemToInventory_C::Resource_Label' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, OnCreateCountChanged) == 0x0005B0, "Member 'UWBP_ItemToInventory_C::OnCreateCountChanged' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, bLimitedItems) == 0x0005C0, "Member 'UWBP_ItemToInventory_C::bLimitedItems' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, HeaderText) == 0x0005C8, "Member 'UWBP_ItemToInventory_C::HeaderText' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, OnProcessStarted) == 0x0005E0, "Member 'UWBP_ItemToInventory_C::OnProcessStarted' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, SoundEvent_ActionStart) == 0x0005F0, "Member 'UWBP_ItemToInventory_C::SoundEvent_ActionStart' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, bPlaySwapAnimation) == 0x0005F8, "Member 'UWBP_ItemToInventory_C::bPlaySwapAnimation' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, ProcessSound) == 0x000600, "Member 'UWBP_ItemToInventory_C::ProcessSound' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, OnInstantCreateRequest) == 0x000608, "Member 'UWBP_ItemToInventory_C::OnInstantCreateRequest' has a wrong offset!");
static_assert(offsetof(UWBP_ItemToInventory_C, OnSetButtonEnable) == 0x000618, "Member 'UWBP_ItemToInventory_C::OnSetButtonEnable' has a wrong offset!");

}

