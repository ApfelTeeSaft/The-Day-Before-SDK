#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CampingBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CampingBase.BP_CampingBase_C
// 0x0098 (0x0328 - 0x0290)
class ABP_CampingBase_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene1;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene4;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene3;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene2;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Points;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CampingBound;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Meshes;                                            // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMaterialInterface*>             DefaultMaterials;                                  // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstanceDynamic*>       StateMaterials;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBuilt;                                           // 0x0300(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCanRemoved;                                      // 0x0301(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302[0x6];                                      // 0x0302(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Box;                                               // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsBuildable;                                       // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BuildCampTrailer();
	void BuildingStateUpd();
	void CampingBuildingState();
	void CampingBuilt();
	void CampingBuiltV2();
	void ChangeToDefaultMaterials();
	void ChangeToStateMaterials();
	void CheckForSurface(bool* CanBePlaced);
	void ExecuteUbergraph_BP_CampingBase(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RemoveSelf();
	void SetCampBuildingState(bool CanBuildCamping);
	void SetCollisionResponse(bool CollisionEnabled);
	void StoreAllMaterials();
	void StoreAllMeshes();
	void UpdateLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CampingBase_C">();
	}
	static class ABP_CampingBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CampingBase_C>();
	}
};
static_assert(alignof(ABP_CampingBase_C) == 0x000008, "Wrong alignment on ABP_CampingBase_C");
static_assert(sizeof(ABP_CampingBase_C) == 0x000328, "Wrong size on ABP_CampingBase_C");
static_assert(offsetof(ABP_CampingBase_C, UberGraphFrame) == 0x000290, "Member 'ABP_CampingBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Scene1) == 0x000298, "Member 'ABP_CampingBase_C::Scene1' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Scene4) == 0x0002A0, "Member 'ABP_CampingBase_C::Scene4' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Scene3) == 0x0002A8, "Member 'ABP_CampingBase_C::Scene3' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Scene2) == 0x0002B0, "Member 'ABP_CampingBase_C::Scene2' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Points) == 0x0002B8, "Member 'ABP_CampingBase_C::Points' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, CampingBound) == 0x0002C0, "Member 'ABP_CampingBase_C::CampingBound' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Root) == 0x0002C8, "Member 'ABP_CampingBase_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Meshes) == 0x0002D0, "Member 'ABP_CampingBase_C::Meshes' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, DefaultMaterials) == 0x0002E0, "Member 'ABP_CampingBase_C::DefaultMaterials' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, StateMaterials) == 0x0002F0, "Member 'ABP_CampingBase_C::StateMaterials' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, IsBuilt) == 0x000300, "Member 'ABP_CampingBase_C::IsBuilt' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, IsCanRemoved) == 0x000301, "Member 'ABP_CampingBase_C::IsCanRemoved' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, Box) == 0x000308, "Member 'ABP_CampingBase_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, IgnoreActors) == 0x000310, "Member 'ABP_CampingBase_C::IgnoreActors' has a wrong offset!");
static_assert(offsetof(ABP_CampingBase_C, IsBuildable) == 0x000320, "Member 'ABP_CampingBase_C::IsBuildable' has a wrong offset!");

}

