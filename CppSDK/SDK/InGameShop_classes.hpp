#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InGameShop

#include "Basic.hpp"

#include "ServerSlotInfoArray_structs.hpp"
#include "Engine_structs.hpp"
#include "ContainerPickupsInfo_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "InventoryStash_classes.hpp"
#include "E_NPCState_structs.hpp"
#include "E_ShopType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_InteractType_structs.hpp"
#include "E_NPCIdle_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass InGameShop.InGameShop_C
// 0x01E0 (0x09B0 - 0x07D0)
class AInGameShop_C final : public AInventoryStash_C
{
public:
	uint8                                         Pad_7C3[0x5];                                      // 0x07C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_InGameShop_C;                       // 0x07C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Sphere_0;                                          // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       CameraDialogue;                                    // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_0;                                             // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UADSDialoguePartecipantComponent*       ADSDialoguePartecipant;                            // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Body;                                              // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Helmet;                                            // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon;                                            // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair;                                              // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Backpack;                                          // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Pants;                                             // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh1;                                     // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ShopZone;                                          // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FContainerPickupsInfo>          ShopContainers;                                    // 0x0830(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<struct FContainerPickupsInfo>          ShopItems;                                         // 0x0840(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<struct FServerSlotInfoArray>           ShopContainerSlotDataS;                            // 0x0850(0x0010)(Edit, BlueprintVisible, Net)
	class UJSIContainer_C*                        ShopContainer;                                     // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ShopItemsGenerated;                                // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShopDataRequested;                                 // 0x0869(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_86A[0x2];                                      // 0x086A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShopContNoC;                                       // 0x086C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShopContNoR;                                       // 0x0870(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPContainerWidget_C*                   ShopMPContainerWidget;                             // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Open;                                              // 0x0880(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpeningMessageSent;                                // 0x0881(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_882[0x6];                                      // 0x0882(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    SirenSound;                                        // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    RadioMessage;                                      // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class ABunkerTeleport_C*>              Doors;                                             // 0x0898(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate)
	int32                                         MaxNumberOfDoors;                                  // 0x08A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AC[0x4];                                      // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             OpeningMessageSound;                               // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             OpeningSound;                                      // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             OpenedSignalSound;                                 // 0x08C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ClosingSound;                                      // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ListOfShopItems;                                   // 0x08D0(0x0010)(Edit, BlueprintVisible, Net)
	int32                                         NTimeBefore;                                       // 0x08E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClosingMessageSent;                                // 0x08E4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E5[0x3];                                      // 0x08E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             ClosingMessageSound;                               // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         OpeningTime;                                       // 0x08F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ClosingTime;                                       // 0x08F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NPCState                                    AnimState_0;                                       // 0x08F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F9[0x7];                                      // 0x08F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        T1;                                                // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Dialogue_C*                          DialogueW;                                         // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInteracted;                                      // 0x0910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_911[0x7];                                      // 0x0911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_V2_C*                   InteractingPawn;                                   // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_ShopType                                    ShopType;                                          // 0x0920(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_921[0x7];                                      // 0x0921(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULegacyCameraShake*                     ShakeInstance;                                     // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFreeItemBuyed;                                   // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_931[0xF];                                      // 0x0931(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraLoc;                                         // 0x0940(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShopFOV;                                           // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FOV;                                               // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Add_Shop_Items_to_Widget();
	void AddDoor(const class ABunkerTeleport_C*& NewItem);
	void BlindAddNewItemToContainer(const struct FVector2D& SlotVector, int32 ItemUID, int32 ToContainerUID, bool Shop, bool* Added, int32* ToSlotIndex, int32* UniqueId);
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BuildContainerSlotData(int32 NumOfColumns, int32 NumOfRows, int32 ContainerUID, bool Shop);
	void CloseShop();
	void CompleteQuest(int32 QuestIndex, int32 ObjectiveIndex);
	void Cs();
	void ExecuteUbergraph_InGameShop(int32 EntryPoint);
	void GenerateContainerItems(const struct FS_LootChanceModifier& LootChanceMod, TArray<struct FDefaultItemInfo>* Items);
	void GenerateShopItems();
	void GeneretaShopItemsForEachShop(class UDataTable* Table);
	void Get_Shop_Replicated_Data(struct FMpContentRep* Data);
	void GetSlotDataArrIndexByUID(int32 Uid, bool Shop, int32* Param_Index);
	void MPCFindItem(int32 ContainerUID, int32 ItemUID, bool IsContainer_, bool Shop, bool* Found, struct FContainerPickupsInfo* ItemInfo, int32* Param_Index);
	void MPCRemoveItem(int32 Uid, bool IsContainer_, bool Shop, bool* Removed);
	void MultiPlayCMSSound();
	void MultiPlayCSSound();
	void MultiPlayOMSound();
	void MultiPlayOSSound();
	void NewFunction_0_0();
	void OM();
	void OnChangeContent();
	void OnRep_OpenedSignalSound();
	void OpenAll();
	void OpenServ();
	void OpenShop();
	void OS();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void RequestMoveItem(int32 ToSlotIndex, int32 ItemUID, int32 ToContainerUID, bool Rotated_, bool IsContainer, bool CallMCEvent_, bool Shop, bool* Moved);
	void ResetDoors(bool IsActive);
	void SetActiveDoors();
	void SetDialogueCamera(bool Condition);
	void SetShopView(bool Condition);
	class UMPContainerWidget_C* SetShopWidget();
	void Shop_Cont_to_Full(const struct FMpContentRep& Content, TArray<struct FContainerPickupsInfo>* Containers, TArray<struct FContainerPickupsInfo>* Param_ContainerItems);
	void Timer(bool On);
	void TransferMPCDataToChar(const struct FContainerPickupsInfo& ContainerInfo, int32 ContainerIndex, bool Shop, int32 ItemsLeft, bool* Success, TArray<struct FContainerPickupsInfo>* ContainerDataResult, TArray<struct FContainerPickupsInfo>* ContainerItemsResult);
	void GetActorType(E_ActorType* ActorType);
	void MultiCallCloseLootPoint();
	void MultiCallOpenLootPoint();
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnLocalInteract(class APawn* Player);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"InGameShop_C">();
	}
	static class AInGameShop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInGameShop_C>();
	}
};
static_assert(alignof(AInGameShop_C) == 0x000010, "Wrong alignment on AInGameShop_C");
static_assert(sizeof(AInGameShop_C) == 0x0009B0, "Wrong size on AInGameShop_C");
static_assert(offsetof(AInGameShop_C, UberGraphFrame_InGameShop_C) == 0x0007C8, "Member 'AInGameShop_C::UberGraphFrame_InGameShop_C' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Sphere_0) == 0x0007D0, "Member 'AInGameShop_C::Sphere_0' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, CameraDialogue) == 0x0007D8, "Member 'AInGameShop_C::CameraDialogue' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Box_0) == 0x0007E0, "Member 'AInGameShop_C::Box_0' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ADSDialoguePartecipant) == 0x0007E8, "Member 'AInGameShop_C::ADSDialoguePartecipant' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Body) == 0x0007F0, "Member 'AInGameShop_C::Body' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Helmet) == 0x0007F8, "Member 'AInGameShop_C::Helmet' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Weapon) == 0x000800, "Member 'AInGameShop_C::Weapon' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Hair) == 0x000808, "Member 'AInGameShop_C::Hair' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Backpack) == 0x000810, "Member 'AInGameShop_C::Backpack' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Pants) == 0x000818, "Member 'AInGameShop_C::Pants' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, SkeletalMesh1) == 0x000820, "Member 'AInGameShop_C::SkeletalMesh1' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopZone) == 0x000828, "Member 'AInGameShop_C::ShopZone' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopContainers) == 0x000830, "Member 'AInGameShop_C::ShopContainers' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopItems) == 0x000840, "Member 'AInGameShop_C::ShopItems' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopContainerSlotDataS) == 0x000850, "Member 'AInGameShop_C::ShopContainerSlotDataS' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopContainer) == 0x000860, "Member 'AInGameShop_C::ShopContainer' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopItemsGenerated) == 0x000868, "Member 'AInGameShop_C::ShopItemsGenerated' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopDataRequested) == 0x000869, "Member 'AInGameShop_C::ShopDataRequested' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopContNoC) == 0x00086C, "Member 'AInGameShop_C::ShopContNoC' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopContNoR) == 0x000870, "Member 'AInGameShop_C::ShopContNoR' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopMPContainerWidget) == 0x000878, "Member 'AInGameShop_C::ShopMPContainerWidget' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Open) == 0x000880, "Member 'AInGameShop_C::Open' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, OpeningMessageSent) == 0x000881, "Member 'AInGameShop_C::OpeningMessageSent' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, SirenSound) == 0x000888, "Member 'AInGameShop_C::SirenSound' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, RadioMessage) == 0x000890, "Member 'AInGameShop_C::RadioMessage' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, Doors) == 0x000898, "Member 'AInGameShop_C::Doors' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, MaxNumberOfDoors) == 0x0008A8, "Member 'AInGameShop_C::MaxNumberOfDoors' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, OpeningMessageSound) == 0x0008B0, "Member 'AInGameShop_C::OpeningMessageSound' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, OpeningSound) == 0x0008B8, "Member 'AInGameShop_C::OpeningSound' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, OpenedSignalSound) == 0x0008C0, "Member 'AInGameShop_C::OpenedSignalSound' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ClosingSound) == 0x0008C8, "Member 'AInGameShop_C::ClosingSound' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ListOfShopItems) == 0x0008D0, "Member 'AInGameShop_C::ListOfShopItems' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, NTimeBefore) == 0x0008E0, "Member 'AInGameShop_C::NTimeBefore' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ClosingMessageSent) == 0x0008E4, "Member 'AInGameShop_C::ClosingMessageSent' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ClosingMessageSound) == 0x0008E8, "Member 'AInGameShop_C::ClosingMessageSound' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, OpeningTime) == 0x0008F0, "Member 'AInGameShop_C::OpeningTime' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ClosingTime) == 0x0008F4, "Member 'AInGameShop_C::ClosingTime' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, AnimState_0) == 0x0008F8, "Member 'AInGameShop_C::AnimState_0' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, T1) == 0x000900, "Member 'AInGameShop_C::T1' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, DialogueW) == 0x000908, "Member 'AInGameShop_C::DialogueW' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, IsInteracted) == 0x000910, "Member 'AInGameShop_C::IsInteracted' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, InteractingPawn) == 0x000918, "Member 'AInGameShop_C::InteractingPawn' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopType) == 0x000920, "Member 'AInGameShop_C::ShopType' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShakeInstance) == 0x000928, "Member 'AInGameShop_C::ShakeInstance' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, IsFreeItemBuyed) == 0x000930, "Member 'AInGameShop_C::IsFreeItemBuyed' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, CameraLoc) == 0x000940, "Member 'AInGameShop_C::CameraLoc' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, ShopFOV) == 0x0009A0, "Member 'AInGameShop_C::ShopFOV' has a wrong offset!");
static_assert(offsetof(AInGameShop_C, FOV) == 0x0009A8, "Member 'AInGameShop_C::FOV' has a wrong offset!");

}

