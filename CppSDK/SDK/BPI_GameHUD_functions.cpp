#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameHUD

#include "Basic.hpp"

#include "BPI_GameHUD_classes.hpp"
#include "BPI_GameHUD_parameters.hpp"


namespace SDK
{

// Function BPI_GameHUD.BPI_GameHUD_C.AddMark
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ActorRef                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowByLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMarkType                               Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_Mark_C*                        WMark                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::AddMark(class FName Key, class AActor* ActorRef, bool Quest, bool ShowByLocation, const struct FVector& Location, EMarkType Type, bool* Success, class UW_Mark_C** WMark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "AddMark");

	Params::BPI_GameHUD_C_AddMark Parms{};

	Parms.Key = Key;
	Parms.ActorRef = ActorRef;
	Parms.Quest = Quest;
	Parms.ShowByLocation = ShowByLocation;
	Parms.Location = std::move(Location);
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (WMark != nullptr)
		*WMark = Parms.WMark;
}


// Function BPI_GameHUD.BPI_GameHUD_C.AddNewNotification
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NotificationType                      NotificationType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Body                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::AddNewNotification(E_NotificationType NotificationType, const class FText& Title, const class FText& Body, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "AddNewNotification");

	Params::BPI_GameHUD_C_AddNewNotification Parms{};

	Parms.NotificationType = NotificationType;
	Parms.Title = std::move(Title);
	Parms.Body = std::move(Body);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_GameHUD.BPI_GameHUD_C.BannerNewLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NewLocation                           Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::BannerNewLocation(E_NewLocation Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "BannerNewLocation");

	Params::BPI_GameHUD_C_BannerNewLocation Parms{};

	Parms.Location = Location;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.CanEnterVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCan                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SeatIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::CanEnterVehicle(bool bCan, int32 SeatIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "CanEnterVehicle");

	Params::BPI_GameHUD_C_CanEnterVehicle Parms{};

	Parms.bCan = bCan;
	Parms.SeatIndex = SeatIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetDeathScreen (Widget)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetDeathScreen__Widget_(class UWidget** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetDeathScreen (Widget)");

	Params::BPI_GameHUD_C_GetDeathScreen__Widget_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetDefaultUIMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWE_UIMode                              ReturnedMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetDefaultUIMode(EWE_UIMode* ReturnedMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetDefaultUIMode");

	Params::BPI_GameHUD_C_GetDefaultUIMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnedMode != nullptr)
		*ReturnedMode = Parms.ReturnedMode;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetDragInventoryItemsAllowed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetDragInventoryItemsAllowed(bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetDragInventoryItemsAllowed");

	Params::BPI_GameHUD_C_GetDragInventoryItemsAllowed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetFurnitureCatalogRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_FurnitureShopButtons_C*      FurnitureShopButtons                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetFurnitureCatalogRef(class UWBP_FurnitureShopButtons_C** FurnitureShopButtons)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetFurnitureCatalogRef");

	Params::BPI_GameHUD_C_GetFurnitureCatalogRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FurnitureShopButtons != nullptr)
		*FurnitureShopButtons = Parms.FurnitureShopButtons;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetGUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUIW_PlayerMain_C*                GUI                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetGUI(class UUIW_PlayerMain_C** GUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetGUI");

	Params::BPI_GameHUD_C_GetGUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GUI != nullptr)
		*GUI = Parms.GUI;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetGUIHidden
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetGUIHidden(bool* Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetGUIHidden");

	Params::BPI_GameHUD_C_GetGUIHidden Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hidden != nullptr)
		*Hidden = Parms.Hidden;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetInventoryTutorial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetInventoryTutorial(bool* Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetInventoryTutorial");

	Params::BPI_GameHUD_C_GetInventoryTutorial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetInventoryWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMPInGameInventory_C*             Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetInventoryWidget(class UMPInGameInventory_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetInventoryWidget");

	Params::BPI_GameHUD_C_GetInventoryWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetItemInfoWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_ItemInfo_C*                    Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetItemInfoWidget(class UW_ItemInfo_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetItemInfoWidget");

	Params::BPI_GameHUD_C_GetItemInfoWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetTutorialRewardWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_TutorialItemReward_C*        Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetTutorialRewardWidget(class UWBP_TutorialItemReward_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetTutorialRewardWidget");

	Params::BPI_GameHUD_C_GetTutorialRewardWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetTutorialSlidesWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_SlidesTutorial_C*            Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetTutorialSlidesWidget(class UWBP_SlidesTutorial_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetTutorialSlidesWidget");

	Params::BPI_GameHUD_C_GetTutorialSlidesWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetUIMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWE_UIMode                              ReturnedMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetUIMode(EWE_UIMode* ReturnedMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetUIMode");

	Params::BPI_GameHUD_C_GetUIMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnedMode != nullptr)
		*ReturnedMode = Parms.ReturnedMode;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetVehicleInteract
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Interact                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetVehicleInteract(bool* Interact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetVehicleInteract");

	Params::BPI_GameHUD_C_GetVehicleInteract Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Interact != nullptr)
		*Interact = Parms.Interact;
}


// Function BPI_GameHUD.BPI_GameHUD_C.GetWorkBenchWidgetRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_Workbench_C*                 WorkbenchWidgetRef                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::GetWorkBenchWidgetRef(class UWBP_Workbench_C** WorkbenchWidgetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "GetWorkBenchWidgetRef");

	Params::BPI_GameHUD_C_GetWorkBenchWidgetRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WorkbenchWidgetRef != nullptr)
		*WorkbenchWidgetRef = Parms.WorkbenchWidgetRef;
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideAlarmSystem
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideAlarmSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideAlarmSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideAllUI
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideAllUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideAllUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideAttackHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideAttackHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideAttackHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideBandageUsingHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideBandageUsingHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideBandageUsingHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideBannerNewLocation
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideBannerNewLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideBannerNewLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideBleedingHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideBleedingHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideBleedingHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideChoosePoint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideChoosePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideChoosePoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideCraftHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideCraftHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideCraftHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideDoorHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideDoorHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideDoorHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideInventoryItemHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideInventoryItemHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideInventoryItemHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideMacheteHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideMacheteHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideMacheteHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideNewLocNotification
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideNewLocNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideNewLocNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideWakingUpWidget
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideWakingUpWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideWakingUpWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.HideWaterUsingHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::HideWaterUsingHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "HideWaterUsingHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.IsShopWidgetOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOpen                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::IsShopWidgetOpen(bool* IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "IsShopWidgetOpen");

	Params::BPI_GameHUD_C_IsShopWidgetOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOpen != nullptr)
		*IsOpen = Parms.IsOpen;
}


// Function BPI_GameHUD.BPI_GameHUD_C.IsStashWidgetOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStashOpen                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::IsStashWidgetOpen(bool* IsStashOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "IsStashWidgetOpen");

	Params::BPI_GameHUD_C_IsStashWidgetOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStashOpen != nullptr)
		*IsStashOpen = Parms.IsStashOpen;
}


// Function BPI_GameHUD.BPI_GameHUD_C.ItemTypeToText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInfoType                               ItemType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (Parm, OutParm)

void IBPI_GameHUD_C::ItemTypeToText(EInfoType ItemType, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ItemTypeToText");

	Params::BPI_GameHUD_C_ItemTypeToText Parms{};

	Parms.ItemType = ItemType;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BPI_GameHUD.BPI_GameHUD_C.Notify_BrokenWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::Notify_BrokenWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "Notify_BrokenWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.Notify_UndamagedWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::Notify_UndamagedWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "Notify_UndamagedWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.NotifyNewLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             RegionName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             LocationName                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsCity                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::NotifyNewLocation(const class FText& RegionName, const class FText& LocationName, bool IsCity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "NotifyNewLocation");

	Params::BPI_GameHUD_C_NotifyNewLocation Parms{};

	Parms.RegionName = std::move(RegionName);
	Parms.LocationName = std::move(LocationName);
	Parms.IsCity = IsCity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.RemoveInputHintByStage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           _Stage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::RemoveInputHintByStage(const class FString& _Stage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "RemoveInputHintByStage");

	Params::BPI_GameHUD_C_RemoveInputHintByStage Parms{};

	Parms._Stage = std::move(_Stage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.RemoveMark
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::RemoveMark(class FName Key, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "RemoveMark");

	Params::BPI_GameHUD_C_RemoveMark Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_GameHUD.BPI_GameHUD_C.RemoveNotification
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NotificationType                      NotificationType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::RemoveNotification(E_NotificationType NotificationType, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "RemoveNotification");

	Params::BPI_GameHUD_C_RemoveNotification Parms{};

	Parms.NotificationType = NotificationType;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_GameHUD.BPI_GameHUD_C.ResetUIModeToDefault
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ResetUIModeToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ResetUIModeToDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetAllowDragInventoryItems
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetAllowDragInventoryItems(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetAllowDragInventoryItems");

	Params::BPI_GameHUD_C_SetAllowDragInventoryItems Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetDragWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDragWidget_C*                    Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetDragWidget(class UDragWidget_C* Widget, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetDragWidget");

	Params::BPI_GameHUD_C_SetDragWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetFurnitureCatalogRef
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_FurnitureShopButtons_C*      FurnitureCatalog                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetFurnitureCatalogRef(class UWBP_FurnitureShopButtons_C* FurnitureCatalog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetFurnitureCatalogRef");

	Params::BPI_GameHUD_C_SetFurnitureCatalogRef Parms{};

	Parms.FurnitureCatalog = FurnitureCatalog;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetInventoryTutorial
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetInventoryTutorial(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetInventoryTutorial");

	Params::BPI_GameHUD_C_SetInventoryTutorial Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetKilledByInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UPaperSprite>      WeaponIcon                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FString                           Nickname                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetKilledByInfo(TSoftObjectPtr<class UPaperSprite> WeaponIcon, const class FString& Nickname, bool IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetKilledByInfo");

	Params::BPI_GameHUD_C_SetKilledByInfo Parms{};

	Parms.WeaponIcon = WeaponIcon;
	Parms.Nickname = std::move(Nickname);
	Parms.IsValid = IsValid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetShopOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In_Is_Open                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetShopOpen(bool In_Is_Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetShopOpen");

	Params::BPI_GameHUD_C_SetShopOpen Parms{};

	Parms.In_Is_Open = In_Is_Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetStashOpen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsOpen                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetStashOpen(bool InIsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetStashOpen");

	Params::BPI_GameHUD_C_SetStashOpen Parms{};

	Parms.InIsOpen = InIsOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetUIMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWE_UIMode                              NewMode                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetUIMode(EWE_UIMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetUIMode");

	Params::BPI_GameHUD_C_SetUIMode Parms{};

	Parms.NewMode = NewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetVehicleInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VehicleInteract                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetVehicleInteract(bool VehicleInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetVehicleInteract");

	Params::BPI_GameHUD_C_SetVehicleInteract Parms{};

	Parms.VehicleInteract = VehicleInteract;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SetWorkbenchWidgetRef
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_Workbench_C*                 WorkbenchWidgetRef                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SetWorkbenchWidgetRef(class UWBP_Workbench_C* WorkbenchWidgetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SetWorkbenchWidgetRef");

	Params::BPI_GameHUD_C_SetWorkbenchWidgetRef Parms{};

	Parms.WorkbenchWidgetRef = WorkbenchWidgetRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowAlarmSystem
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowAlarmSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowAlarmSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowAllUI
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowAllUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowAllUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowAttackHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowAttackHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowAttackHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowBandageUsingHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowBandageUsingHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowBandageUsingHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowBinocularsHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowBinocularsHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowBinocularsHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowBinocularsOverlay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::ShowBinocularsOverlay(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowBinocularsOverlay");

	Params::BPI_GameHUD_C_ShowBinocularsOverlay Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowBleedingHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           RagActor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::ShowBleedingHint(class AActor* RagActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowBleedingHint");

	Params::BPI_GameHUD_C_ShowBleedingHint Parms{};

	Parms.RagActor = RagActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowChoosePoint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowChoosePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowChoosePoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowColdHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Cold_Actor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::ShowColdHint(class AActor* Cold_Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowColdHint");

	Params::BPI_GameHUD_C_ShowColdHint Parms{};

	Parms.Cold_Actor = Cold_Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowCraftHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowCraftHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowCraftHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowDoorHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowDoorHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowDoorHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowFirstRaidHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::ShowFirstRaidHint(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowFirstRaidHint");

	Params::BPI_GameHUD_C_ShowFirstRaidHint Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowFoodUsingHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowFoodUsingHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowFoodUsingHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowHPHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowHPHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowHPHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowHungerHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowHungerHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowHungerHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowInventoryHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowInventoryHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowInventoryHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowLastDoorHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowLastDoorHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowLastDoorHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowMacheteHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowMacheteHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowMacheteHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowRadialInteraction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_ActorType                             ObjectType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::ShowRadialInteraction(bool Show, class UObject* Object, E_ActorType ObjectType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowRadialInteraction");

	Params::BPI_GameHUD_C_ShowRadialInteraction Parms{};

	Parms.Show = Show;
	Parms.Object = Object;
	Parms.ObjectType = ObjectType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowThirstHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowThirstHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowThirstHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowTutorial3DWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::ShowTutorial3DWidget(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowTutorial3DWidget");

	Params::BPI_GameHUD_C_ShowTutorial3DWidget Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowWakingUpWidget
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowWakingUpWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowWakingUpWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.ShowWaterUsingHint
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::ShowWaterUsingHint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "ShowWaterUsingHint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SurrenderButtonPressed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Pressed                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SurrenderButtonPressed(bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SurrenderButtonPressed");

	Params::BPI_GameHUD_C_SurrenderButtonPressed Parms{};

	Parms.Pressed = Pressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SurrenderRevive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Revive                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SurrenderRevive(bool Revive, const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SurrenderRevive");

	Params::BPI_GameHUD_C_SurrenderRevive Parms{};

	Parms.Revive = Revive;
	Parms.PlayerName = std::move(PlayerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.SurrenderShow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           KillerName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::SurrenderShow(bool Show, const class FString& KillerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "SurrenderShow");

	Params::BPI_GameHUD_C_SurrenderShow Parms{};

	Parms.Show = Show;
	Parms.KillerName = std::move(KillerName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.UpdateInventorySlotsAvailableForDismanle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Check                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::UpdateInventorySlotsAvailableForDismanle(bool Check, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "UpdateInventorySlotsAvailableForDismanle");

	Params::BPI_GameHUD_C_UpdateInventorySlotsAvailableForDismanle Parms{};

	Parms.Check = Check;
	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.UpdateInventorySlotsAvaliableForSell
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bCheck                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_GameHUD_C::UpdateInventorySlotsAvaliableForSell(bool bCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "UpdateInventorySlotsAvaliableForSell");

	Params::BPI_GameHUD_C_UpdateInventorySlotsAvaliableForSell Parms{};

	Parms.bCheck = bCheck;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_GameHUD.BPI_GameHUD_C.WorkRPStartTimer
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_GameHUD_C::WorkRPStartTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_GameHUD_C", "WorkRPStartTimer");

	UObject::ProcessEvent(Func, nullptr);
}

}

