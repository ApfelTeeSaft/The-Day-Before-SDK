#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ColorCell

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FMODStudio_structs.hpp"


namespace SDK::Params
{

// Function W_ColorCell.W_ColorCell_C.Change Material Param Color
// 0x0080 (0x0080 - 0x0000)
struct W_ColorCell_C_Change_Material_Param_Color final
{
public:
	TArray<class USkeletalMeshComponent*>         Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Value;                                             // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0048(0x0010)(ReferenceParm)
	class UMaterialInterface*                     CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ColorCell_C_Change_Material_Param_Color) == 0x000008, "Wrong alignment on W_ColorCell_C_Change_Material_Param_Color");
static_assert(sizeof(W_ColorCell_C_Change_Material_Param_Color) == 0x000080, "Wrong size on W_ColorCell_C_Change_Material_Param_Color");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, Array) == 0x000000, "Member 'W_ColorCell_C_Change_Material_Param_Color::Array' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, ParameterName) == 0x000010, "Member 'W_ColorCell_C_Change_Material_Param_Color::ParameterName' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, Value) == 0x000018, "Member 'W_ColorCell_C_Change_Material_Param_Color::Value' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'W_ColorCell_C_Change_Material_Param_Color::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, Temp_int_Array_Index_Variable) == 0x000038, "Member 'W_ColorCell_C_Change_Material_Param_Color::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'W_ColorCell_C_Change_Material_Param_Color::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Array_Get_Item) == 0x000040, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_GetMaterials_ReturnValue) == 0x000048, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Array_Length_ReturnValue_1) == 0x000060, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000068, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, Temp_int_Loop_Counter_Variable_1) == 0x000070, "Member 'W_ColorCell_C_Change_Material_Param_Color::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Less_IntInt_ReturnValue_1) == 0x000074, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_Change_Material_Param_Color, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'W_ColorCell_C_Change_Material_Param_Color::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function W_ColorCell.W_ColorCell_C.CheckBlackSkinMp
// 0x0001 (0x0001 - 0x0000)
struct W_ColorCell_C_CheckBlackSkinMp final
{
public:
	bool                                          IsBlack_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ColorCell_C_CheckBlackSkinMp) == 0x000001, "Wrong alignment on W_ColorCell_C_CheckBlackSkinMp");
static_assert(sizeof(W_ColorCell_C_CheckBlackSkinMp) == 0x000001, "Wrong size on W_ColorCell_C_CheckBlackSkinMp");
static_assert(offsetof(W_ColorCell_C_CheckBlackSkinMp, IsBlack_) == 0x000000, "Member 'W_ColorCell_C_CheckBlackSkinMp::IsBlack_' has a wrong offset!");

// Function W_ColorCell.W_ColorCell_C.ExecuteUbergraph_W_ColorCell
// 0x0030 (0x0030 - 0x0000)
struct W_ColorCell_C_ExecuteUbergraph_W_ColorCell final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     CallFunc_PlayEvent2D_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_CreateCharacter_C*                  CallFunc_GetActorOfClass_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell) == 0x000008, "Wrong alignment on W_ColorCell_C_ExecuteUbergraph_W_ColorCell");
static_assert(sizeof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell) == 0x000030, "Wrong size on W_ColorCell_C_ExecuteUbergraph_W_ColorCell");
static_assert(offsetof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell, EntryPoint) == 0x000000, "Member 'W_ColorCell_C_ExecuteUbergraph_W_ColorCell::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell, CallFunc_PlayEvent2D_ReturnValue) == 0x000008, "Member 'W_ColorCell_C_ExecuteUbergraph_W_ColorCell::CallFunc_PlayEvent2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000010, "Member 'W_ColorCell_C_ExecuteUbergraph_W_ColorCell::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell, CallFunc_PlayAnimation_ReturnValue) == 0x000020, "Member 'W_ColorCell_C_ExecuteUbergraph_W_ColorCell::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_ExecuteUbergraph_W_ColorCell, CallFunc_GetActorOfClass_ReturnValue) == 0x000028, "Member 'W_ColorCell_C_ExecuteUbergraph_W_ColorCell::CallFunc_GetActorOfClass_ReturnValue' has a wrong offset!");

// Function W_ColorCell.W_ColorCell_C.EyeColorFunc
// 0x00B0 (0x00B0 - 0x0000)
struct W_ColorCell_C_EyeColorFunc final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Param_EyeColor;                                    // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_1;                   // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_2;                   // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_3;                   // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_4;                   // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_5;                   // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_6;                   // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_7;                   // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor_8;                   // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ColorCell_C_EyeColorFunc) == 0x000004, "Wrong alignment on W_ColorCell_C_EyeColorFunc");
static_assert(sizeof(W_ColorCell_C_EyeColorFunc) == 0x0000B0, "Wrong size on W_ColorCell_C_EyeColorFunc");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, Param_Index) == 0x000000, "Member 'W_ColorCell_C_EyeColorFunc::Param_Index' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, Param_EyeColor) == 0x000004, "Member 'W_ColorCell_C_EyeColorFunc::Param_EyeColor' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor) == 0x000014, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000025, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000026, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000027, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000028, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x000029, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x00002A, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x00002B, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x00002C, "Member 'W_ColorCell_C_EyeColorFunc::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_1) == 0x000030, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_1' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_2) == 0x000040, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_2' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_3) == 0x000050, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_3' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_4) == 0x000060, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_4' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_5) == 0x000070, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_5' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_6) == 0x000080, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_6' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_7) == 0x000090, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_7' has a wrong offset!");
static_assert(offsetof(W_ColorCell_C_EyeColorFunc, K2Node_MakeStruct_LinearColor_8) == 0x0000A0, "Member 'W_ColorCell_C_EyeColorFunc::K2Node_MakeStruct_LinearColor_8' has a wrong offset!");

// Function W_ColorCell.W_ColorCell_C.PressedButton_ColorCell_ED__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature final
{
public:
	class UW_ColorCell_C*                         Param_CellActivated;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature) == 0x000008, "Wrong alignment on W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature");
static_assert(sizeof(W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature) == 0x000008, "Wrong size on W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature");
static_assert(offsetof(W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature, Param_CellActivated) == 0x000000, "Member 'W_ColorCell_C_PressedButton_ColorCell_ED__DelegateSignature::Param_CellActivated' has a wrong offset!");

}

