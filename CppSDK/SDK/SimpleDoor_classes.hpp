#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleDoor

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "SimpleDoorState_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SimpleDoor.SimpleDoor_C
// 0x0188 (0x0418 - 0x0290)
class ASimpleDoor_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            MaterialBillboard1;                                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Indicator;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube3;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DoorContainer;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ESimpleDoorState                              State;                                             // 0x02C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClosedLocation;                                    // 0x02D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OpenedLocation;                                    // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Offset;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpAlpha;                                         // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               IndicatorMaterial;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 DisabledColor;                                     // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPower;                                          // 0x0324(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractText;                                      // 0x0328(0x0018)(Edit, BlueprintVisible)
	struct FColor                                 LockedColor;                                       // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 UnlockedColor;                                     // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               IndicatorDisabledTexture;                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               IndicatorLockedTexture;                            // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               IndicatorUnlockedTexture;                          // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IDoorListener_C>       DoorListener;                                      // 0x0360(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADoorEventHandlerActor_C*               DoorEventHandlerActor;                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          HasSimpleTrigger;                                  // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SimpleTrigger;                                     // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 LockedText;                                        // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FindPasswordText;                                  // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 DoorUnlockedText;                                  // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 RestorePowerText;                                  // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 NoReactionText;                                    // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 ControllingRemotelyText;                           // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 FindKeyText;                                       // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	TArray<class ADoorEventHandlerActor_C*>       DoorEventHandlerActors;                            // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          HideBillboard;                                     // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Close();
	void DestroyInteractable();
	void Disable();
	void DisableBillboad();
	void Enable();
	void EnableBillboard();
	void EnableWithIndicatorTexture(class UTexture* IndicatorTexture);
	void ExecuteUbergraph_SimpleDoor(int32 EntryPoint);
	void GeneratorEnabledClientSide(class ASurvivalPlayer_C* Player);
	void GetActorType(E_ActorType* ActorType);
	void InteractClientSide(const class FString& Text);
	void InteractClientSideV2(const class FString& Text);
	void IsLocked_(bool* Result);
	void OnBeginInteract(class APawn* Player);
	void OnCloseDoorOnClient();
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnGeneratorEnabled(class ASurvivalPlayer_C* Player);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnOpenDoorOnClient();
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void Open();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetListener(TScriptInterface<class IDoorListener_C> Listener);
	void SetPointLightColor(const struct FColor& Color);
	void SetState(ESimpleDoorState Param_State);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void ShowSimpleText(const class FString& Text);
	void SubscribeToGenerator(class AElectricityGenerator_C* Generator);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SimpleDoor_C">();
	}
	static class ASimpleDoor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASimpleDoor_C>();
	}
};
static_assert(alignof(ASimpleDoor_C) == 0x000008, "Wrong alignment on ASimpleDoor_C");
static_assert(sizeof(ASimpleDoor_C) == 0x000418, "Wrong size on ASimpleDoor_C");
static_assert(offsetof(ASimpleDoor_C, UberGraphFrame) == 0x000290, "Member 'ASimpleDoor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, MaterialBillboard1) == 0x000298, "Member 'ASimpleDoor_C::MaterialBillboard1' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, PointLight) == 0x0002A0, "Member 'ASimpleDoor_C::PointLight' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, Indicator) == 0x0002A8, "Member 'ASimpleDoor_C::Indicator' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, Cube3) == 0x0002B0, "Member 'ASimpleDoor_C::Cube3' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DoorContainer) == 0x0002B8, "Member 'ASimpleDoor_C::DoorContainer' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DefaultSceneRoot) == 0x0002C0, "Member 'ASimpleDoor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, State) == 0x0002C8, "Member 'ASimpleDoor_C::State' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, ClosedLocation) == 0x0002D0, "Member 'ASimpleDoor_C::ClosedLocation' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, OpenedLocation) == 0x0002E8, "Member 'ASimpleDoor_C::OpenedLocation' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, Offset) == 0x000300, "Member 'ASimpleDoor_C::Offset' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, Speed) == 0x000308, "Member 'ASimpleDoor_C::Speed' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, LerpAlpha) == 0x000310, "Member 'ASimpleDoor_C::LerpAlpha' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, IndicatorMaterial) == 0x000318, "Member 'ASimpleDoor_C::IndicatorMaterial' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DisabledColor) == 0x000320, "Member 'ASimpleDoor_C::DisabledColor' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, HasPower) == 0x000324, "Member 'ASimpleDoor_C::HasPower' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, InteractText) == 0x000328, "Member 'ASimpleDoor_C::InteractText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, LockedColor) == 0x000340, "Member 'ASimpleDoor_C::LockedColor' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, UnlockedColor) == 0x000344, "Member 'ASimpleDoor_C::UnlockedColor' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, IndicatorDisabledTexture) == 0x000348, "Member 'ASimpleDoor_C::IndicatorDisabledTexture' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, IndicatorLockedTexture) == 0x000350, "Member 'ASimpleDoor_C::IndicatorLockedTexture' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, IndicatorUnlockedTexture) == 0x000358, "Member 'ASimpleDoor_C::IndicatorUnlockedTexture' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DoorListener) == 0x000360, "Member 'ASimpleDoor_C::DoorListener' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DoorEventHandlerActor) == 0x000370, "Member 'ASimpleDoor_C::DoorEventHandlerActor' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, HasSimpleTrigger) == 0x000378, "Member 'ASimpleDoor_C::HasSimpleTrigger' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, SimpleTrigger) == 0x000380, "Member 'ASimpleDoor_C::SimpleTrigger' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, LockedText) == 0x000390, "Member 'ASimpleDoor_C::LockedText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, FindPasswordText) == 0x0003A0, "Member 'ASimpleDoor_C::FindPasswordText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DoorUnlockedText) == 0x0003B0, "Member 'ASimpleDoor_C::DoorUnlockedText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, RestorePowerText) == 0x0003C0, "Member 'ASimpleDoor_C::RestorePowerText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, NoReactionText) == 0x0003D0, "Member 'ASimpleDoor_C::NoReactionText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, ControllingRemotelyText) == 0x0003E0, "Member 'ASimpleDoor_C::ControllingRemotelyText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, FindKeyText) == 0x0003F0, "Member 'ASimpleDoor_C::FindKeyText' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, DoorEventHandlerActors) == 0x000400, "Member 'ASimpleDoor_C::DoorEventHandlerActors' has a wrong offset!");
static_assert(offsetof(ASimpleDoor_C, HideBillboard) == 0x000410, "Member 'ASimpleDoor_C::HideBillboard' has a wrong offset!");

}

