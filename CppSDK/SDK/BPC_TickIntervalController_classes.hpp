#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_TickIntervalController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_TickIntervalController.BPC_TickIntervalController_C
// 0x0060 (0x0100 - 0x00A0)
class UBPC_TickIntervalController_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsWorking;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         SkeletalMeshes;                                    // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          ChangeOwnerTick;                                   // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeAllComponentsTick;                           // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChangeSkeletalTick;                                // 0x00CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      LODs;                                              // 0x00D0(0x0010)(Edit, BlueprintVisible)
	int32                                         CurrentLOD;                                        // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActiveLOD;                                         // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UActorComponent*>                ActorComponents;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPC_TickIntervalController(int32 EntryPoint);
	void GetCurrentLODValue(double* LODValue);
	double GetDistanceToCamera();
	bool NeedChangeLOD_();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_TickIntervalController_C">();
	}
	static class UBPC_TickIntervalController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_TickIntervalController_C>();
	}
};
static_assert(alignof(UBPC_TickIntervalController_C) == 0x000008, "Wrong alignment on UBPC_TickIntervalController_C");
static_assert(sizeof(UBPC_TickIntervalController_C) == 0x000100, "Wrong size on UBPC_TickIntervalController_C");
static_assert(offsetof(UBPC_TickIntervalController_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_TickIntervalController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, IsWorking) == 0x0000A8, "Member 'UBPC_TickIntervalController_C::IsWorking' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, Owner) == 0x0000B0, "Member 'UBPC_TickIntervalController_C::Owner' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, SkeletalMeshes) == 0x0000B8, "Member 'UBPC_TickIntervalController_C::SkeletalMeshes' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, ChangeOwnerTick) == 0x0000C8, "Member 'UBPC_TickIntervalController_C::ChangeOwnerTick' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, ChangeAllComponentsTick) == 0x0000C9, "Member 'UBPC_TickIntervalController_C::ChangeAllComponentsTick' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, ChangeSkeletalTick) == 0x0000CA, "Member 'UBPC_TickIntervalController_C::ChangeSkeletalTick' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, LODs) == 0x0000D0, "Member 'UBPC_TickIntervalController_C::LODs' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, CurrentLOD) == 0x0000E0, "Member 'UBPC_TickIntervalController_C::CurrentLOD' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, ActiveLOD) == 0x0000E4, "Member 'UBPC_TickIntervalController_C::ActiveLOD' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, ActorComponents) == 0x0000E8, "Member 'UBPC_TickIntervalController_C::ActorComponents' has a wrong offset!");
static_assert(offsetof(UBPC_TickIntervalController_C, CharMoveComp) == 0x0000F8, "Member 'UBPC_TickIntervalController_C::CharMoveComp' has a wrong offset!");

}

