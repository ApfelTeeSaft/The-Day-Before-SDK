#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Window.BP_Window_C
// 0x0058 (0x02E8 - 0x0290)
class ABP_Window_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          TriggerBox;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WindowFrame;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBroken_;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Health;                                            // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            BrokenFrame;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Interier_Toggler_C*                 Toggler;                                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        GlassBreakParticles;                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FXIsPlayed;                                        // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__TriggerBox_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ExecuteUbergraph_BP_Window(int32 EntryPoint);
	void OnRep_IsBroken_();
	void PlayFX(const struct FVector& PlayerForward);
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void WindowDamaged(double Damage);
	void WindowOverlapped(class AActor* Player, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Window_C">();
	}
	static class ABP_Window_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Window_C>();
	}
};
static_assert(alignof(ABP_Window_C) == 0x000008, "Wrong alignment on ABP_Window_C");
static_assert(sizeof(ABP_Window_C) == 0x0002E8, "Wrong size on ABP_Window_C");
static_assert(offsetof(ABP_Window_C, UberGraphFrame) == 0x000290, "Member 'ABP_Window_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, TriggerBox) == 0x000298, "Member 'ABP_Window_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, Arrow) == 0x0002A0, "Member 'ABP_Window_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, WindowFrame) == 0x0002A8, "Member 'ABP_Window_C::WindowFrame' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_Window_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, IsBroken_) == 0x0002B8, "Member 'ABP_Window_C::IsBroken_' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, Health) == 0x0002C0, "Member 'ABP_Window_C::Health' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, BrokenFrame) == 0x0002C8, "Member 'ABP_Window_C::BrokenFrame' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, Toggler) == 0x0002D0, "Member 'ABP_Window_C::Toggler' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, GlassBreakParticles) == 0x0002D8, "Member 'ABP_Window_C::GlassBreakParticles' has a wrong offset!");
static_assert(offsetof(ABP_Window_C, FXIsPlayed) == 0x0002E0, "Member 'ABP_Window_C::FXIsPlayed' has a wrong offset!");

}

