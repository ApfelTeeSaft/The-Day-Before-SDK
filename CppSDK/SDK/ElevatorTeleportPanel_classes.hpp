#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ElevatorTeleportPanel

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ElevatorTeleportPanelState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ElevatorTeleportPanel.ElevatorTeleportPanel_C
// 0x00B0 (0x0340 - 0x0290)
class AElevatorTeleportPanel_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube5;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AElevatorTeleportV2_C*                  Elevator;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	ElevatorTeleportPanelState                    State;                                             // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ProcessingRequestTimeout;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpentTimeSinceProcessingRequest;                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IdleColor;                                         // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ProcessingColor;                                   // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MovingColor;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OpenedColor;                                       // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ErrorColor;                                        // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovingTimeout;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpentTimeSinceMoving;                              // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DestroyInteractable();
	void ExecuteUbergraph_ElevatorTeleportPanel(int32 EntryPoint);
	void GetActorType(E_ActorType* ActorType);
	void HandleRequest();
	void IsLocked_(bool* Result);
	void Lock();
	void OnBeginInteract(class APawn* Player);
	void OnError();
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnIdle();
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnMoving();
	void OnOpened();
	void OnProcesingRequest();
	void OnRequestProcessed();
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void PlayButtonSound();
	void ProcessMovingState(double DeltaTime);
	void ProcessRequestState(double DeltaTime);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetIndicatorColor(const struct FLinearColor& Color);
	void SetState(ElevatorTeleportPanelState Param_State);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void Unlock();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ElevatorTeleportPanel_C">();
	}
	static class AElevatorTeleportPanel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AElevatorTeleportPanel_C>();
	}
};
static_assert(alignof(AElevatorTeleportPanel_C) == 0x000008, "Wrong alignment on AElevatorTeleportPanel_C");
static_assert(sizeof(AElevatorTeleportPanel_C) == 0x000340, "Wrong size on AElevatorTeleportPanel_C");
static_assert(offsetof(AElevatorTeleportPanel_C, UberGraphFrame) == 0x000290, "Member 'AElevatorTeleportPanel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, StaticMesh) == 0x000298, "Member 'AElevatorTeleportPanel_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, PointLight) == 0x0002A0, "Member 'AElevatorTeleportPanel_C::PointLight' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, Cube5) == 0x0002A8, "Member 'AElevatorTeleportPanel_C::Cube5' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, DefaultSceneRoot) == 0x0002B0, "Member 'AElevatorTeleportPanel_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, Elevator) == 0x0002B8, "Member 'AElevatorTeleportPanel_C::Elevator' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, State) == 0x0002C0, "Member 'AElevatorTeleportPanel_C::State' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, ProcessingRequestTimeout) == 0x0002C8, "Member 'AElevatorTeleportPanel_C::ProcessingRequestTimeout' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, SpentTimeSinceProcessingRequest) == 0x0002D0, "Member 'AElevatorTeleportPanel_C::SpentTimeSinceProcessingRequest' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, IdleColor) == 0x0002D8, "Member 'AElevatorTeleportPanel_C::IdleColor' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, ProcessingColor) == 0x0002E8, "Member 'AElevatorTeleportPanel_C::ProcessingColor' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, MovingColor) == 0x0002F8, "Member 'AElevatorTeleportPanel_C::MovingColor' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, OpenedColor) == 0x000308, "Member 'AElevatorTeleportPanel_C::OpenedColor' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, ErrorColor) == 0x000318, "Member 'AElevatorTeleportPanel_C::ErrorColor' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, MovingTimeout) == 0x000328, "Member 'AElevatorTeleportPanel_C::MovingTimeout' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, SpentTimeSinceMoving) == 0x000330, "Member 'AElevatorTeleportPanel_C::SpentTimeSinceMoving' has a wrong offset!");
static_assert(offsetof(AElevatorTeleportPanel_C, Locked) == 0x000338, "Member 'AElevatorTeleportPanel_C::Locked' has a wrong offset!");

}

