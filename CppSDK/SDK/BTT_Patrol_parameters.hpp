#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_Patrol

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Survival_structs.hpp"


namespace SDK::Params
{

// Function BTT_Patrol.BTT_Patrol_C.ExecuteUbergraph_BTT_Patrol
// 0x0058 (0x0058 - 0x0000)
struct BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController_1;                    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn_1;                     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AZombie_C*                              K2Node_DynamicCast_AsZombie;                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol) == 0x000008, "Wrong alignment on BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol");
static_assert(sizeof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol) == 0x000058, "Wrong size on BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, EntryPoint) == 0x000000, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_Event_OwnerController_1) == 0x000018, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_Event_OwnerController_1' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_Event_ControlledPawn_1) == 0x000020, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_Event_ControlledPawn_1' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_DynamicCast_AsZombie) == 0x000028, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_DynamicCast_AsZombie' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_Event_OwnerController) == 0x000038, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_Event_ControlledPawn) == 0x000040, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol, K2Node_CreateDelegate_OutputDelegate_1) == 0x000048, "Member 'BTT_Patrol_C_ExecuteUbergraph_BTT_Patrol::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BTT_Patrol.BTT_Patrol_C.OnExecuteAI
// 0x0050 (0x0050 - 0x0000)
struct BTT_Patrol_C_OnExecuteAI final
{
public:
	EZombieType                                   Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_5;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_6;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_7;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZombieType                                   Temp_byte_Variable_8;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_9;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_10;                             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_11;                             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_12;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_13;                             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_14;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Temp_byte_Variable_15;                             // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZombieType                                   CallFunc_GetCPPZombieType_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EZombieType                                   CallFunc_GetCPPZombieType_ReturnValue_1;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       K2Node_Select_Default_1;                           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentPathPointLocation_CurrentPathPointLocation; // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_Degrees_to_Target_DesiredDegrees;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Patrol_C_OnExecuteAI) == 0x000008, "Wrong alignment on BTT_Patrol_C_OnExecuteAI");
static_assert(sizeof(BTT_Patrol_C_OnExecuteAI) == 0x000050, "Wrong size on BTT_Patrol_C_OnExecuteAI");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable) == 0x000000, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_1) == 0x000001, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_2) == 0x000002, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_3) == 0x000003, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_4) == 0x000004, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_5) == 0x000005, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_6) == 0x000006, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_7) == 0x000007, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_8) == 0x000008, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_9) == 0x000009, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_10) == 0x00000A, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_10' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_11) == 0x00000B, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_11' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_12) == 0x00000C, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_12' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_13) == 0x00000D, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_13' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_14) == 0x00000E, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_14' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, Temp_byte_Variable_15) == 0x00000F, "Member 'BTT_Patrol_C_OnExecuteAI::Temp_byte_Variable_15' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, CallFunc_GetCPPZombieType_ReturnValue) == 0x000010, "Member 'BTT_Patrol_C_OnExecuteAI::CallFunc_GetCPPZombieType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, CallFunc_GetCPPZombieType_ReturnValue_1) == 0x000011, "Member 'BTT_Patrol_C_OnExecuteAI::CallFunc_GetCPPZombieType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, K2Node_Select_Default) == 0x000012, "Member 'BTT_Patrol_C_OnExecuteAI::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, K2Node_Select_Default_1) == 0x000013, "Member 'BTT_Patrol_C_OnExecuteAI::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, CallFunc_GetCurrentPathPointLocation_CurrentPathPointLocation) == 0x000018, "Member 'BTT_Patrol_C_OnExecuteAI::CallFunc_GetCurrentPathPointLocation_CurrentPathPointLocation' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, CallFunc_Get_Degrees_to_Target_DesiredDegrees) == 0x000030, "Member 'BTT_Patrol_C_OnExecuteAI::CallFunc_Get_Degrees_to_Target_DesiredDegrees' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_OnExecuteAI, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000038, "Member 'BTT_Patrol_C_OnExecuteAI::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");

// Function BTT_Patrol.BTT_Patrol_C.OnReachTarget
// 0x0010 (0x0010 - 0x0000)
struct BTT_Patrol_C_OnReachTarget final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Patrol_C_OnReachTarget) == 0x000004, "Wrong alignment on BTT_Patrol_C_OnReachTarget");
static_assert(sizeof(BTT_Patrol_C_OnReachTarget) == 0x000010, "Wrong size on BTT_Patrol_C_OnReachTarget");
static_assert(offsetof(BTT_Patrol_C_OnReachTarget, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BTT_Patrol_C_OnReachTarget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BTT_Patrol.BTT_Patrol_C.ReceiveAbortAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_Patrol_C_ReceiveAbortAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Patrol_C_ReceiveAbortAI) == 0x000008, "Wrong alignment on BTT_Patrol_C_ReceiveAbortAI");
static_assert(sizeof(BTT_Patrol_C_ReceiveAbortAI) == 0x000010, "Wrong size on BTT_Patrol_C_ReceiveAbortAI");
static_assert(offsetof(BTT_Patrol_C_ReceiveAbortAI, OwnerController) == 0x000000, "Member 'BTT_Patrol_C_ReceiveAbortAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ReceiveAbortAI, ControlledPawn) == 0x000008, "Member 'BTT_Patrol_C_ReceiveAbortAI::ControlledPawn' has a wrong offset!");

// Function BTT_Patrol.BTT_Patrol_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_Patrol_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_Patrol_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_Patrol_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_Patrol_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_Patrol_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_Patrol_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_Patrol_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_Patrol_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_Patrol_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

