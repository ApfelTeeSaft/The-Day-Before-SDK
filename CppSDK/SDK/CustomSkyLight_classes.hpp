#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CustomSkyLight

#include "Basic.hpp"

#include "SettingCSLStruct_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DirectionalLightCSLStruct_structs.hpp"
#include "SkyAtmosphereCSLStruct_structs.hpp"
#include "DayCycleState_structs.hpp"
#include "FogCSLStruct_structs.hpp"
#include "BackgroundCloudsCSLStruct_structs.hpp"
#include "DayCycleSettingsCSLStruct_structs.hpp"
#include "Survival_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CustomSkyLight.CustomSkyLight_C
// 0x2330 (0x25C0 - 0x0290)
class ACustomSkyLight_C final : public ATDB_CustomSkyLight
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDirectionalLightComponent*             SunLight;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sky;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     New_Sky_Material;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Sky_Material;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          New_Sky;                                           // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HashVal;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Year;                                              // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Month;                                             // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Day;                                               // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SolarTime;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDaylightSavingTime;                             // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DSTStartMonth;                                     // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DSTStartDay;                                       // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DSTEndMonth;                                       // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DSTEndDay;                                         // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DSTSwitchHour;                                     // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Latitude;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Longitude;                                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeZone;                                          // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NorthOffset;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Elevation;                                         // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CorrectedElevation;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Azimuth;                                           // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DEBUGTime;                                         // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ServerSolarTime;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartHeight;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Transition_Time;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MorningTimeInMinutes;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DayTimeInMinutes;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EveningTimeInMinutes;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightTimeInMinutes;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MorningLightLerpSeconds;                           // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DayLightLerpSeconds;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EveningLightLerpSeconds;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightLightLerpSeconds;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunAngle;                                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightLenght;                                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonAngle;                                         // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonState;                                         // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonColor;                                         // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonBrightness;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunSize;                                           // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SkyMaterial;                                       // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        StarMaxOpacity;                                    // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StarSpeed;                                         // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SunLightIntensity;                                 // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunLightColor;                                     // 0x041C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MoonLightIntensity;                                // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MoonLightColor;                                    // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SunUseTemperature;                                 // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunTemperature;                                    // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoonUseTemperature;                                // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonTemperature;                                   // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkyLightIntensity;                                 // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SkyLightColor;                                     // 0x0454(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Density;                                       // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseVolumetricFog;                                  // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSkylightSpecificSettings;                       // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFogSpecificSettings;                            // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDayCycleSettings;                               // 0x046B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MorningEndsAtSunHeight;                            // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MorningLightIntensity;                             // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MorningLightColor;                                 // 0x0474(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MorningUseTemperature;                             // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MorningTemperature;                                // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EveningStartsAtSunHeight;                          // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EveningLightIntensity;                             // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EveningLightColor;                                 // 0x0494(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EveningUseTemperature;                             // 0x04A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A5[0x3];                                      // 0x04A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EveningTemperature;                                // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectionalLightCSLStruct             SunDirectionalLightSettings;                       // 0x04B0(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DaySkyLightIntensity;                              // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectionalLightCSLStruct             MoonDirectionalLightSettings;                      // 0x04F0(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NightSkyLightIntensity;                            // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectionalLightCSLStruct             MorningDirectionalLightSettings;                   // 0x0530(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MorningSkyLightIntensity;                          // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectionalLightCSLStruct             EveningDirectionalLightSettings;                   // 0x0570(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EveningSkyLightIntensity;                          // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DaySkyLightColor;                                  // 0x05AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NightSkyLightColor;                                // 0x05BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MorningSkyLightColor;                              // 0x05CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EveningSkyLightColor;                              // 0x05DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EC[0x4];                                      // 0x05EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           DayCubemap;                                        // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           NightCubemap;                                      // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           EveningCubemap;                                    // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           MorningCubemap;                                    // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                MorningSkyAtmosphereSettings;                      // 0x0610(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                EveningSkyAtmosphereSettings;                      // 0x0690(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FogHeightFalloff;                                  // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StartTime;                                         // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonElevation;                                     // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonCorrectedElevation;                            // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonAzimuth;                                       // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                NightSkyAtmosphereSettings;                        // 0x0738(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSkyAtmosphereCSLStruct                DaySkyAtmosphereSettings;                          // 0x07B8(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                TimePoints;                                        // 0x0838(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EDayCycleState                                DayCycleState;                                     // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Alpha;                                             // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PrevAlpha;                                         // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InsideHouse;                                       // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LightingController_C*               LightingController;                                // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LightingOffset;                                    // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delta_Time;                                        // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87C[0x4];                                      // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DEBUGTime1;                                        // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DEBUGTime2;                                        // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightAlpha;                                        // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHub;                                             // 0x0898(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopTime;                                          // 0x0899(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89A[0x6];                                      // 0x089A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_V2_C*                   As_Survival_Player_V2;                             // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SolarTimeStep;                                     // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimeStepReady;                                     // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B1[0x3];                                      // 0x08B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Second;                                            // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Scattering;                             // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Default_Volumetric_Scattering_Intensity;       // 0x08C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Moon_DefaultVolumetric_Scattering_Intensity;       // 0x08C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VolumetricDefaulltReady;                           // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           HouseBoxCubemap;                                   // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CubemapInterpolationAlpha;                         // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Loaded;                                            // 0x08E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Loading_Screen;                                 // 0x08E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sky_Visibility;                                    // 0x08E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E3[0x5];                                      // 0x08E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Destination_Cubemap;                               // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CubemapInterpolationAlphaPrev;                     // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CubeMapInterpolationSuccess;                       // 0x08F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CubeMapInterpolationStarted;                       // 0x08F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayMode;                                          // 0x08FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimeQuick;                                         // 0x08FB(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGS_TDB_C*                              As_GS_TDB;                                         // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        PrevTime;                                          // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Realtime;                                          // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              DateTime;                                          // 0x0918(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MorningLightAngle;                                 // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DayLightAngle;                                     // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EveningLightAngle;                                 // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NightLightAngle;                                   // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChosenTime;                                        // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          DayFogSettings;                                    // 0x0948(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          NightFogSettings;                                  // 0x0980(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          MorningFogSettings;                                // 0x09B8(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFogCSLStruct                          EveningFogSettings;                                // 0x09F0(0x0038)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      NightToMorning;                                    // 0x0A28(0x0188)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      MorningToDay;                                      // 0x0BB0(0x0188)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      DayToEvening;                                      // 0x0D38(0x0188)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      EveningToNight;                                    // 0x0EC0(0x0188)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      MorningSettings;                                   // 0x1048(0x0188)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      DaySettings;                                       // 0x11D0(0x0188)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      EveningSettings;                                   // 0x1358(0x0188)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSettingCSLStruct                      NightSettings;                                     // 0x14E0(0x0188)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SuperAlpha;                                        // 0x1668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SunIsDone;                                         // 0x1670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1671[0x7];                                     // 0x1671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               PrevSunRot;                                        // 0x1678(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         RotAlpha;                                          // 0x1690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1694[0x4];                                     // 0x1694(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBackgroundCloudsCSLStruct             DayCloudsSettings;                                 // 0x1698(0x0050)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             NightCloudsSettings;                               // 0x16E8(0x0050)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             EveningCloudsSettings;                             // 0x1738(0x0050)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBackgroundCloudsCSLStruct             MorningCloudsSettings;                             // 0x1788(0x0050)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSourceAngle;                                // 0x17D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17DC[0x4];                                     // 0x17DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSettingCSLStruct                      InsideSettings;                                    // 0x17E0(0x0188)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        InsideAlpha;                                       // 0x1968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDayCycleSettingsCSLStruct             InsideFullSettings;                                // 0x1970(0x0C48)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentHouseBox;                                   // 0x25B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ApplySettings();
	void AzimuthCalc(double DeltaTime);
	void BackCloudsSettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To);
	void CalculateAlpha(double InterpTime);
	void CalculateInsideSettings();
	void ChangeDayCycleState(EDayCycleState NewState);
	void CheckDayTime();
	void CheckVolumetricScattering();
	void DayCycle();
	double DenormalizeTime(double Time);
	void EditorSettings(bool Editor_, bool NewHidden);
	void ExecuteUbergraph_CustomSkyLight(int32 EntryPoint);
	void FogSettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To);
	void GetCurrentSolarTime(double* Result);
	void GetHMSFromSolarTime(double Param_SolarTime, int32* Hour, int32* Minute, int32* Param_Second);
	void GetTimeInterp(double* MaxAlpha);
	void GSTimeTick();
	void IsDST(bool DSTEnable, int32 Param_DSTStartMonth, int32 Param_DSTStartDay, int32 Param_DSTEndMonth, int32 Param_DSTEndDay, int32 Param_DSTSwitchHour, bool* Param_IsDST);
	void LerpBackgroundClouds(const struct FBackgroundCloudsCSLStruct& From, const struct FBackgroundCloudsCSLStruct& To, double Param_Alpha, struct FBackgroundCloudsCSLStruct* Result);
	void LerpDirectionalLightSettings(const struct FDirectionalLightCSLStruct& From, const struct FDirectionalLightCSLStruct& To, double Param_Alpha, struct FDirectionalLightCSLStruct* Result);
	void LerpFogSettings(const struct FFogCSLStruct& From, const struct FFogCSLStruct& To, double Param_Alpha, struct FFogCSLStruct* Result);
	void LerpSkyAtmosphereSettings(const struct FSkyAtmosphereCSLStruct& From, const struct FSkyAtmosphereCSLStruct& To, double Param_Alpha, struct FSkyAtmosphereCSLStruct* Result);
	void LightSettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To);
	double NormalizeTime(double Time);
	void OneSettingToAnother(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& To, struct FSettingCSLStruct* Result);
	void OnRep_ServerSolarTime();
	void PostProcessAndSkyLight(bool ShouldBeVisible_);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RotAlphaReady();
	void RotAlphaReset();
	void SetBackCloudsSettings(const struct FBackgroundCloudsCSLStruct& TargetFogSettings, const struct FBackgroundCloudsCSLStruct& PrevFogSettings);
	void SetCubemapWithInterpolation(class UTextureCube* DestinationCubemap, bool* Success);
	void SetFogSettings(const struct FFogCSLStruct& TargetFogSettings, const struct FFogCSLStruct& PrevFogSettings);
	void SetNextStateTime();
	void SetQuickSettings();
	void SetSkyAtmosphere(const struct FSkyAtmosphereCSLStruct& SkyAtmosphereStruct, const struct FSkyAtmosphereCSLStruct& PrevAtmosphere);
	void SetSkyLightSettings(double TargetIntensity, const struct FLinearColor& TargetLightColor, double PrevIntensity, const struct FLinearColor& PrevLightColor, class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap);
	void Sky_Set_Up(bool IsNight);
	void SkySettingsTransition(const struct FSettingCSLStruct& From, const struct FSettingCSLStruct& Transition, const struct FSettingCSLStruct& To);
	void SunSetSettings(double TargetIntencity, const struct FLinearColor& TargetLightColor, double TargetTemperature, bool UseTemperature, double PrevIntencity, const struct FLinearColor& PrevLightColor, double PrevTemperature, const struct FDirectionalLightCSLStruct& PrevDirectionalLightSettings, const struct FDirectionalLightCSLStruct& NewDirectionalLightSettings);
	void SunTimerInterp(bool Server);
	void TimeStep();
	void TimeTick();
	void UpdateSun();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CustomSkyLight_C">();
	}
	static class ACustomSkyLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACustomSkyLight_C>();
	}
};
static_assert(alignof(ACustomSkyLight_C) == 0x000008, "Wrong alignment on ACustomSkyLight_C");
static_assert(sizeof(ACustomSkyLight_C) == 0x0025C0, "Wrong size on ACustomSkyLight_C");
static_assert(offsetof(ACustomSkyLight_C, UberGraphFrame) == 0x000290, "Member 'ACustomSkyLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunLight) == 0x000298, "Member 'ACustomSkyLight_C::SunLight' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Sky) == 0x0002A0, "Member 'ACustomSkyLight_C::Sky' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, HeightFog) == 0x0002A8, "Member 'ACustomSkyLight_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, VolumetricCloud) == 0x0002B0, "Member 'ACustomSkyLight_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SkyAtmosphere) == 0x0002B8, "Member 'ACustomSkyLight_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SkyLight) == 0x0002C0, "Member 'ACustomSkyLight_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DefaultSceneRoot) == 0x0002C8, "Member 'ACustomSkyLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, New_Sky_Material) == 0x0002D0, "Member 'ACustomSkyLight_C::New_Sky_Material' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Sky_Material) == 0x0002D8, "Member 'ACustomSkyLight_C::Sky_Material' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, New_Sky) == 0x0002E0, "Member 'ACustomSkyLight_C::New_Sky' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, HashVal) == 0x0002E8, "Member 'ACustomSkyLight_C::HashVal' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Year) == 0x0002F0, "Member 'ACustomSkyLight_C::Year' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Month) == 0x0002F4, "Member 'ACustomSkyLight_C::Month' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Day) == 0x0002F8, "Member 'ACustomSkyLight_C::Day' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SolarTime) == 0x000300, "Member 'ACustomSkyLight_C::SolarTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, UseDaylightSavingTime) == 0x000308, "Member 'ACustomSkyLight_C::UseDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DSTStartMonth) == 0x00030C, "Member 'ACustomSkyLight_C::DSTStartMonth' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DSTStartDay) == 0x000310, "Member 'ACustomSkyLight_C::DSTStartDay' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DSTEndMonth) == 0x000314, "Member 'ACustomSkyLight_C::DSTEndMonth' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DSTEndDay) == 0x000318, "Member 'ACustomSkyLight_C::DSTEndDay' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DSTSwitchHour) == 0x00031C, "Member 'ACustomSkyLight_C::DSTSwitchHour' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Latitude) == 0x000320, "Member 'ACustomSkyLight_C::Latitude' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Longitude) == 0x000328, "Member 'ACustomSkyLight_C::Longitude' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, TimeZone) == 0x000330, "Member 'ACustomSkyLight_C::TimeZone' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NorthOffset) == 0x000338, "Member 'ACustomSkyLight_C::NorthOffset' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Elevation) == 0x000340, "Member 'ACustomSkyLight_C::Elevation' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, CorrectedElevation) == 0x000348, "Member 'ACustomSkyLight_C::CorrectedElevation' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Azimuth) == 0x000350, "Member 'ACustomSkyLight_C::Azimuth' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DEBUGTime) == 0x000358, "Member 'ACustomSkyLight_C::DEBUGTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, ServerSolarTime) == 0x000360, "Member 'ACustomSkyLight_C::ServerSolarTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, StartHeight) == 0x000368, "Member 'ACustomSkyLight_C::StartHeight' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Transition_Time) == 0x000370, "Member 'ACustomSkyLight_C::Transition_Time' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningTimeInMinutes) == 0x000378, "Member 'ACustomSkyLight_C::MorningTimeInMinutes' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayTimeInMinutes) == 0x000380, "Member 'ACustomSkyLight_C::DayTimeInMinutes' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningTimeInMinutes) == 0x000388, "Member 'ACustomSkyLight_C::EveningTimeInMinutes' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightTimeInMinutes) == 0x000390, "Member 'ACustomSkyLight_C::NightTimeInMinutes' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningLightLerpSeconds) == 0x000398, "Member 'ACustomSkyLight_C::MorningLightLerpSeconds' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayLightLerpSeconds) == 0x0003A0, "Member 'ACustomSkyLight_C::DayLightLerpSeconds' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningLightLerpSeconds) == 0x0003A8, "Member 'ACustomSkyLight_C::EveningLightLerpSeconds' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightLightLerpSeconds) == 0x0003B0, "Member 'ACustomSkyLight_C::NightLightLerpSeconds' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunAngle) == 0x0003B8, "Member 'ACustomSkyLight_C::SunAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightLenght) == 0x0003C0, "Member 'ACustomSkyLight_C::NightLenght' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonAngle) == 0x0003C8, "Member 'ACustomSkyLight_C::MoonAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonState) == 0x0003D0, "Member 'ACustomSkyLight_C::MoonState' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonColor) == 0x0003E0, "Member 'ACustomSkyLight_C::MoonColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonBrightness) == 0x0003F0, "Member 'ACustomSkyLight_C::MoonBrightness' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunSize) == 0x0003F8, "Member 'ACustomSkyLight_C::SunSize' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SkyMaterial) == 0x000400, "Member 'ACustomSkyLight_C::SkyMaterial' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, StarMaxOpacity) == 0x000408, "Member 'ACustomSkyLight_C::StarMaxOpacity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, StarSpeed) == 0x000410, "Member 'ACustomSkyLight_C::StarSpeed' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunLightIntensity) == 0x000418, "Member 'ACustomSkyLight_C::SunLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunLightColor) == 0x00041C, "Member 'ACustomSkyLight_C::SunLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonLightIntensity) == 0x00042C, "Member 'ACustomSkyLight_C::MoonLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonLightColor) == 0x000430, "Member 'ACustomSkyLight_C::MoonLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunUseTemperature) == 0x000440, "Member 'ACustomSkyLight_C::SunUseTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunTemperature) == 0x000444, "Member 'ACustomSkyLight_C::SunTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonUseTemperature) == 0x000448, "Member 'ACustomSkyLight_C::MoonUseTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonTemperature) == 0x00044C, "Member 'ACustomSkyLight_C::MoonTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SkyLightIntensity) == 0x000450, "Member 'ACustomSkyLight_C::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SkyLightColor) == 0x000454, "Member 'ACustomSkyLight_C::SkyLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Fog_Density) == 0x000464, "Member 'ACustomSkyLight_C::Fog_Density' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, UseVolumetricFog) == 0x000468, "Member 'ACustomSkyLight_C::UseVolumetricFog' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, UseSkylightSpecificSettings) == 0x000469, "Member 'ACustomSkyLight_C::UseSkylightSpecificSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, UseFogSpecificSettings) == 0x00046A, "Member 'ACustomSkyLight_C::UseFogSpecificSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, UseDayCycleSettings) == 0x00046B, "Member 'ACustomSkyLight_C::UseDayCycleSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningEndsAtSunHeight) == 0x00046C, "Member 'ACustomSkyLight_C::MorningEndsAtSunHeight' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningLightIntensity) == 0x000470, "Member 'ACustomSkyLight_C::MorningLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningLightColor) == 0x000474, "Member 'ACustomSkyLight_C::MorningLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningUseTemperature) == 0x000484, "Member 'ACustomSkyLight_C::MorningUseTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningTemperature) == 0x000488, "Member 'ACustomSkyLight_C::MorningTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningStartsAtSunHeight) == 0x00048C, "Member 'ACustomSkyLight_C::EveningStartsAtSunHeight' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningLightIntensity) == 0x000490, "Member 'ACustomSkyLight_C::EveningLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningLightColor) == 0x000494, "Member 'ACustomSkyLight_C::EveningLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningUseTemperature) == 0x0004A4, "Member 'ACustomSkyLight_C::EveningUseTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningTemperature) == 0x0004A8, "Member 'ACustomSkyLight_C::EveningTemperature' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunDirectionalLightSettings) == 0x0004B0, "Member 'ACustomSkyLight_C::SunDirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DaySkyLightIntensity) == 0x0004E8, "Member 'ACustomSkyLight_C::DaySkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonDirectionalLightSettings) == 0x0004F0, "Member 'ACustomSkyLight_C::MoonDirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightSkyLightIntensity) == 0x000528, "Member 'ACustomSkyLight_C::NightSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningDirectionalLightSettings) == 0x000530, "Member 'ACustomSkyLight_C::MorningDirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningSkyLightIntensity) == 0x000568, "Member 'ACustomSkyLight_C::MorningSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningDirectionalLightSettings) == 0x000570, "Member 'ACustomSkyLight_C::EveningDirectionalLightSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningSkyLightIntensity) == 0x0005A8, "Member 'ACustomSkyLight_C::EveningSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DaySkyLightColor) == 0x0005AC, "Member 'ACustomSkyLight_C::DaySkyLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightSkyLightColor) == 0x0005BC, "Member 'ACustomSkyLight_C::NightSkyLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningSkyLightColor) == 0x0005CC, "Member 'ACustomSkyLight_C::MorningSkyLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningSkyLightColor) == 0x0005DC, "Member 'ACustomSkyLight_C::EveningSkyLightColor' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayCubemap) == 0x0005F0, "Member 'ACustomSkyLight_C::DayCubemap' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightCubemap) == 0x0005F8, "Member 'ACustomSkyLight_C::NightCubemap' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningCubemap) == 0x000600, "Member 'ACustomSkyLight_C::EveningCubemap' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningCubemap) == 0x000608, "Member 'ACustomSkyLight_C::MorningCubemap' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningSkyAtmosphereSettings) == 0x000610, "Member 'ACustomSkyLight_C::MorningSkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningSkyAtmosphereSettings) == 0x000690, "Member 'ACustomSkyLight_C::EveningSkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, FogHeightFalloff) == 0x000710, "Member 'ACustomSkyLight_C::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, StartTime) == 0x000718, "Member 'ACustomSkyLight_C::StartTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonElevation) == 0x000720, "Member 'ACustomSkyLight_C::MoonElevation' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonCorrectedElevation) == 0x000728, "Member 'ACustomSkyLight_C::MoonCorrectedElevation' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MoonAzimuth) == 0x000730, "Member 'ACustomSkyLight_C::MoonAzimuth' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightSkyAtmosphereSettings) == 0x000738, "Member 'ACustomSkyLight_C::NightSkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DaySkyAtmosphereSettings) == 0x0007B8, "Member 'ACustomSkyLight_C::DaySkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, TimePoints) == 0x000838, "Member 'ACustomSkyLight_C::TimePoints' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayCycleState) == 0x000848, "Member 'ACustomSkyLight_C::DayCycleState' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Alpha) == 0x000850, "Member 'ACustomSkyLight_C::Alpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, PrevAlpha) == 0x000858, "Member 'ACustomSkyLight_C::PrevAlpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, InsideHouse) == 0x000860, "Member 'ACustomSkyLight_C::InsideHouse' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, LightingController) == 0x000868, "Member 'ACustomSkyLight_C::LightingController' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, LightingOffset) == 0x000870, "Member 'ACustomSkyLight_C::LightingOffset' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Delta_Time) == 0x000878, "Member 'ACustomSkyLight_C::Delta_Time' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DEBUGTime1) == 0x000880, "Member 'ACustomSkyLight_C::DEBUGTime1' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DEBUGTime2) == 0x000888, "Member 'ACustomSkyLight_C::DEBUGTime2' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightAlpha) == 0x000890, "Member 'ACustomSkyLight_C::NightAlpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, InHub) == 0x000898, "Member 'ACustomSkyLight_C::InHub' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, StopTime) == 0x000899, "Member 'ACustomSkyLight_C::StopTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, As_Survival_Player_V2) == 0x0008A0, "Member 'ACustomSkyLight_C::As_Survival_Player_V2' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SolarTimeStep) == 0x0008A8, "Member 'ACustomSkyLight_C::SolarTimeStep' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, TimeStepReady) == 0x0008B0, "Member 'ACustomSkyLight_C::TimeStepReady' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Second) == 0x0008B4, "Member 'ACustomSkyLight_C::Second' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Volumetric_Scattering) == 0x0008B8, "Member 'ACustomSkyLight_C::Volumetric_Scattering' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Sun_Default_Volumetric_Scattering_Intensity) == 0x0008C0, "Member 'ACustomSkyLight_C::Sun_Default_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Moon_DefaultVolumetric_Scattering_Intensity) == 0x0008C4, "Member 'ACustomSkyLight_C::Moon_DefaultVolumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, VolumetricDefaulltReady) == 0x0008C8, "Member 'ACustomSkyLight_C::VolumetricDefaulltReady' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, HouseBoxCubemap) == 0x0008D0, "Member 'ACustomSkyLight_C::HouseBoxCubemap' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, CubemapInterpolationAlpha) == 0x0008D8, "Member 'ACustomSkyLight_C::CubemapInterpolationAlpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Loaded) == 0x0008E0, "Member 'ACustomSkyLight_C::Loaded' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Is_Loading_Screen) == 0x0008E1, "Member 'ACustomSkyLight_C::Is_Loading_Screen' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Sky_Visibility) == 0x0008E2, "Member 'ACustomSkyLight_C::Sky_Visibility' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Destination_Cubemap) == 0x0008E8, "Member 'ACustomSkyLight_C::Destination_Cubemap' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, CubemapInterpolationAlphaPrev) == 0x0008F0, "Member 'ACustomSkyLight_C::CubemapInterpolationAlphaPrev' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, CubeMapInterpolationSuccess) == 0x0008F8, "Member 'ACustomSkyLight_C::CubeMapInterpolationSuccess' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, CubeMapInterpolationStarted) == 0x0008F9, "Member 'ACustomSkyLight_C::CubeMapInterpolationStarted' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, PlayMode) == 0x0008FA, "Member 'ACustomSkyLight_C::PlayMode' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, TimeQuick) == 0x0008FB, "Member 'ACustomSkyLight_C::TimeQuick' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, As_GS_TDB) == 0x000900, "Member 'ACustomSkyLight_C::As_GS_TDB' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, PrevTime) == 0x000908, "Member 'ACustomSkyLight_C::PrevTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, Realtime) == 0x000910, "Member 'ACustomSkyLight_C::Realtime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DateTime) == 0x000918, "Member 'ACustomSkyLight_C::DateTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningLightAngle) == 0x000920, "Member 'ACustomSkyLight_C::MorningLightAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayLightAngle) == 0x000928, "Member 'ACustomSkyLight_C::DayLightAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningLightAngle) == 0x000930, "Member 'ACustomSkyLight_C::EveningLightAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightLightAngle) == 0x000938, "Member 'ACustomSkyLight_C::NightLightAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, ChosenTime) == 0x000940, "Member 'ACustomSkyLight_C::ChosenTime' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayFogSettings) == 0x000948, "Member 'ACustomSkyLight_C::DayFogSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightFogSettings) == 0x000980, "Member 'ACustomSkyLight_C::NightFogSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningFogSettings) == 0x0009B8, "Member 'ACustomSkyLight_C::MorningFogSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningFogSettings) == 0x0009F0, "Member 'ACustomSkyLight_C::EveningFogSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightToMorning) == 0x000A28, "Member 'ACustomSkyLight_C::NightToMorning' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningToDay) == 0x000BB0, "Member 'ACustomSkyLight_C::MorningToDay' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayToEvening) == 0x000D38, "Member 'ACustomSkyLight_C::DayToEvening' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningToNight) == 0x000EC0, "Member 'ACustomSkyLight_C::EveningToNight' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningSettings) == 0x001048, "Member 'ACustomSkyLight_C::MorningSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DaySettings) == 0x0011D0, "Member 'ACustomSkyLight_C::DaySettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningSettings) == 0x001358, "Member 'ACustomSkyLight_C::EveningSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightSettings) == 0x0014E0, "Member 'ACustomSkyLight_C::NightSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SuperAlpha) == 0x001668, "Member 'ACustomSkyLight_C::SuperAlpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, SunIsDone) == 0x001670, "Member 'ACustomSkyLight_C::SunIsDone' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, PrevSunRot) == 0x001678, "Member 'ACustomSkyLight_C::PrevSunRot' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, RotAlpha) == 0x001690, "Member 'ACustomSkyLight_C::RotAlpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DayCloudsSettings) == 0x001698, "Member 'ACustomSkyLight_C::DayCloudsSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, NightCloudsSettings) == 0x0016E8, "Member 'ACustomSkyLight_C::NightCloudsSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, EveningCloudsSettings) == 0x001738, "Member 'ACustomSkyLight_C::EveningCloudsSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, MorningCloudsSettings) == 0x001788, "Member 'ACustomSkyLight_C::MorningCloudsSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, DefaultSourceAngle) == 0x0017D8, "Member 'ACustomSkyLight_C::DefaultSourceAngle' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, InsideSettings) == 0x0017E0, "Member 'ACustomSkyLight_C::InsideSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, InsideAlpha) == 0x001968, "Member 'ACustomSkyLight_C::InsideAlpha' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, InsideFullSettings) == 0x001970, "Member 'ACustomSkyLight_C::InsideFullSettings' has a wrong offset!");
static_assert(offsetof(ACustomSkyLight_C, CurrentHouseBox) == 0x0025B8, "Member 'ACustomSkyLight_C::CurrentHouseBox' has a wrong offset!");

}

