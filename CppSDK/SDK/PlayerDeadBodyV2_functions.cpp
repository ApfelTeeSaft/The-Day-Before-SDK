#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerDeadBodyV2

#include "Basic.hpp"

#include "PlayerDeadBodyV2_classes.hpp"
#include "PlayerDeadBodyV2_parameters.hpp"


namespace SDK
{

// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ActivateDeadBody
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FDropItemEntry>           DroppedItems                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FVector                          HitVector                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OnDeathVelocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    RadialDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Animed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::ActivateDeadBody(const TArray<struct FDropItemEntry>& DroppedItems, const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Param_Player, class APawn* Killer, bool RadialDamage, bool Animed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ActivateDeadBody");

	Params::PlayerDeadBodyV2_C_ActivateDeadBody Parms{};

	Parms.DroppedItems = std::move(DroppedItems);
	Parms.HitVector = std::move(HitVector);
	Parms.OnDeathVelocity = std::move(OnDeathVelocity);
	Parms.HitBoneName = HitBoneName;
	Parms.Param_Player = Param_Player;
	Parms.Killer = Killer;
	Parms.RadialDamage = RadialDamage;
	Parms.Animed = Animed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ApplyPhysics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitVector                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OnDeathVelocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    RadialDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::ApplyPhysics(const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Killer, bool RadialDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ApplyPhysics");

	Params::PlayerDeadBodyV2_C_ApplyPhysics Parms{};

	Parms.HitVector = std::move(HitVector);
	Parms.OnDeathVelocity = std::move(OnDeathVelocity);
	Parms.HitBoneName = HitBoneName;
	Parms.Killer = Killer;
	Parms.RadialDamage = RadialDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ApplyWaterFloatForce
// (Public, BlueprintCallable, BlueprintEvent)

void APlayerDeadBodyV2_C::ApplyWaterFloatForce()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ApplyWaterFloatForce");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void APlayerDeadBodyV2_C::BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::PlayerDeadBodyV2_C_BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::PlayerDeadBodyV2_C_BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.BodyWaterForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             InSocketName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::BodyWaterForce(class FName InSocketName, double Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "BodyWaterForce");

	Params::PlayerDeadBodyV2_C_BodyWaterForce Parms{};

	Parms.InSocketName = InSocketName;
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.CopyMaterials
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           TargetMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::CopyMaterials(class USkeletalMeshComponent* TargetMesh, class USkeletalMesh* NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "CopyMaterials");

	Params::PlayerDeadBodyV2_C_CopyMaterials Parms{};

	Parms.TargetMesh = TargetMesh;
	Parms.NewMesh = NewMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.CopyMeshes
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::CopyMeshes(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "CopyMeshes");

	Params::PlayerDeadBodyV2_C_CopyMeshes Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.CopySkeletal
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           TargetSkeletal                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USkeletalMeshComponent*           NewSkeletal                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::CopySkeletal(class USkeletalMeshComponent* TargetSkeletal, class USkeletalMeshComponent* NewSkeletal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "CopySkeletal");

	Params::PlayerDeadBodyV2_C_CopySkeletal Parms{};

	Parms.TargetSkeletal = TargetSkeletal;
	Parms.NewSkeletal = NewSkeletal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.CopySkeletals
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USkeletalMeshComponent*>   TargetSkeletal                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<class USkeletalMeshComponent*>   NewSkeletal                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void APlayerDeadBodyV2_C::CopySkeletals(TArray<class USkeletalMeshComponent*>& TargetSkeletal, TArray<class USkeletalMeshComponent*>& NewSkeletal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "CopySkeletals");

	Params::PlayerDeadBodyV2_C_CopySkeletals Parms{};

	Parms.TargetSkeletal = std::move(TargetSkeletal);
	Parms.NewSkeletal = std::move(NewSkeletal);

	UObject::ProcessEvent(Func, &Parms);

	TargetSkeletal = std::move(Parms.TargetSkeletal);
	NewSkeletal = std::move(Parms.NewSkeletal);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.Create Loot
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FDropItemEntry>           DroppedItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::Create_Loot(TArray<struct FDropItemEntry>& DroppedItems, class APawn* Param_Player, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "Create Loot");

	Params::PlayerDeadBodyV2_C_Create_Loot Parms{};

	Parms.DroppedItems = std::move(DroppedItems);
	Parms.Param_Player = Param_Player;
	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	DroppedItems = std::move(Parms.DroppedItems);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.CreateDropBox
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::CreateDropBox(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "CreateDropBox");

	Params::PlayerDeadBodyV2_C_CreateDropBox Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.DelayedPhysics
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          HitVector                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OnDeathVelocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    RadialDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Animed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::DelayedPhysics(const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Killer, bool RadialDamage, bool Animed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "DelayedPhysics");

	Params::PlayerDeadBodyV2_C_DelayedPhysics Parms{};

	Parms.HitVector = std::move(HitVector);
	Parms.OnDeathVelocity = std::move(OnDeathVelocity);
	Parms.HitBoneName = HitBoneName;
	Parms.Killer = Killer;
	Parms.RadialDamage = RadialDamage;
	Parms.Animed = Animed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.DestroyBody
// (Private, BlueprintCallable, BlueprintEvent)

void APlayerDeadBodyV2_C::DestroyBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "DestroyBody");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.Die
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FDropItemEntry>           DroppedItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FVector                          HitVector                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          OnDeathVelocity                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    RadialDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Animed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::Die(TArray<struct FDropItemEntry>& DroppedItems, const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Param_Player, class APawn* Killer, bool RadialDamage, bool Animed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "Die");

	Params::PlayerDeadBodyV2_C_Die Parms{};

	Parms.DroppedItems = std::move(DroppedItems);
	Parms.HitVector = std::move(HitVector);
	Parms.OnDeathVelocity = std::move(OnDeathVelocity);
	Parms.HitBoneName = HitBoneName;
	Parms.Param_Player = Param_Player;
	Parms.Killer = Killer;
	Parms.RadialDamage = RadialDamage;
	Parms.Animed = Animed;

	UObject::ProcessEvent(Func, &Parms);

	DroppedItems = std::move(Parms.DroppedItems);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.Enable SMTicks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::Enable_SMTicks(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "Enable SMTicks");

	Params::PlayerDeadBodyV2_C_Enable_SMTicks Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ExecuteUbergraph_PlayerDeadBodyV2
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::ExecuteUbergraph_PlayerDeadBodyV2(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ExecuteUbergraph_PlayerDeadBodyV2");

	Params::PlayerDeadBodyV2_C_ExecuteUbergraph_PlayerDeadBodyV2 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.GetBoneName (Pelvis)
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             BoneName                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::GetBoneName__Pelvis_(class FName* BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "GetBoneName (Pelvis)");

	Params::PlayerDeadBodyV2_C_GetBoneName__Pelvis_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BoneName != nullptr)
		*BoneName = Parms.BoneName;
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.GetImpulse
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Impulse                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::GetImpulse(class APawn* Killer, double* Impulse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "GetImpulse");

	Params::PlayerDeadBodyV2_C_GetImpulse Parms{};

	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);

	if (Impulse != nullptr)
		*Impulse = Parms.Impulse;
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.LimitPhysicsVelocity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Velocity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ResultVelocity                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::LimitPhysicsVelocity(const struct FVector& Velocity, struct FVector* ResultVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "LimitPhysicsVelocity");

	Params::PlayerDeadBodyV2_C_LimitPhysicsVelocity Parms{};

	Parms.Velocity = std::move(Velocity);

	UObject::ProcessEvent(Func, &Parms);

	if (ResultVelocity != nullptr)
		*ResultVelocity = std::move(Parms.ResultVelocity);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.OnEnvTypeChanged
// (BlueprintCallable, BlueprintEvent)

void APlayerDeadBodyV2_C::OnEnvTypeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "OnEnvTypeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.OnStateChanged
// (BlueprintCallable, BlueprintEvent)

void APlayerDeadBodyV2_C::OnStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "OnStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.OnToggleDeadBodyTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::OnToggleDeadBodyTimer(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "OnToggleDeadBodyTimer");

	Params::PlayerDeadBodyV2_C_OnToggleDeadBodyTimer Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.Phase Shift
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::Phase_Shift(class AActor* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "Phase Shift");

	Params::PlayerDeadBodyV2_C_Phase_Shift Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.PhysicsCorrection
// (Public, BlueprintCallable, BlueprintEvent)

void APlayerDeadBodyV2_C::PhysicsCorrection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "PhysicsCorrection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void APlayerDeadBodyV2_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void APlayerDeadBodyV2_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "ReceiveTick");

	Params::PlayerDeadBodyV2_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.SetCurrentEnvType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDeadBodyEnvType                        NewEnvType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::SetCurrentEnvType(EDeadBodyEnvType NewEnvType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "SetCurrentEnvType");

	Params::PlayerDeadBodyV2_C_SetCurrentEnvType Parms{};

	Parms.NewEnvType = NewEnvType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.SetCurrentState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDeadBodyState                          NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::SetCurrentState(EDeadBodyState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "SetCurrentState");

	Params::PlayerDeadBodyV2_C_SetCurrentState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.TakeOffClothes
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::TakeOffClothes(class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "TakeOffClothes");

	Params::PlayerDeadBodyV2_C_TakeOffClothes Parms{};

	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.TakeOffClothesMulti
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::TakeOffClothesMulti(class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "TakeOffClothesMulti");

	Params::PlayerDeadBodyV2_C_TakeOffClothesMulti Parms{};

	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.UpdateMeshView
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           EquipmentSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USkeletalMesh*                    NewMesh                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UMaterial*                        NewMaterial                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void APlayerDeadBodyV2_C::UpdateMeshView(class USkeletalMeshComponent* EquipmentSlot, class USkeletalMesh* NewMesh, class UMaterial* NewMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "UpdateMeshView");

	Params::PlayerDeadBodyV2_C_UpdateMeshView Parms{};

	Parms.EquipmentSlot = EquipmentSlot;
	Parms.NewMesh = NewMesh;
	Parms.NewMaterial = NewMaterial;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerDeadBodyV2.PlayerDeadBodyV2_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void APlayerDeadBodyV2_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerDeadBodyV2_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

