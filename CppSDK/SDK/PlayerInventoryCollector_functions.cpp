#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerInventoryCollector

#include "Basic.hpp"

#include "PlayerInventoryCollector_classes.hpp"
#include "PlayerInventoryCollector_parameters.hpp"


namespace SDK
{

// Function PlayerInventoryCollector.PlayerInventoryCollector_C.AddCustomMoney
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MCount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerInventoryCollector_C::AddCustomMoney(int32 MCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInventoryCollector_C", "AddCustomMoney");

	Params::PlayerInventoryCollector_C_AddCustomMoney Parms{};

	Parms.MCount = MCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerInventoryCollector.PlayerInventoryCollector_C.CollectInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (Parm, OutParm)
// TArray<struct FFItemInfo>               ContainersData                                         (Parm, OutParm, ContainsInstancedReference)
// TArray<struct FFItemInfo>               ContainerItems                                         (Parm, OutParm, ContainsInstancedReference)
// bool                                    Succes_                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerInventoryCollector_C::CollectInventory(TArray<class FString>* Data, TArray<struct FFItemInfo>* ContainersData, TArray<struct FFItemInfo>* ContainerItems, bool* Succes_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInventoryCollector_C", "CollectInventory");

	Params::PlayerInventoryCollector_C_CollectInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);

	if (ContainersData != nullptr)
		*ContainersData = std::move(Parms.ContainersData);

	if (ContainerItems != nullptr)
		*ContainerItems = std::move(Parms.ContainerItems);

	if (Succes_ != nullptr)
		*Succes_ = Parms.Succes_;
}


// Function PlayerInventoryCollector.PlayerInventoryCollector_C.ExecuteUbergraph_PlayerInventoryCollector
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPlayerInventoryCollector_C::ExecuteUbergraph_PlayerInventoryCollector(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInventoryCollector_C", "ExecuteUbergraph_PlayerInventoryCollector");

	Params::PlayerInventoryCollector_C_ExecuteUbergraph_PlayerInventoryCollector Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function PlayerInventoryCollector.PlayerInventoryCollector_C.LoadSavedItemInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SourceString                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FFItemInfo                       FItemInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// struct FFItemInfo                       UpdatedFItemInfo                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UPlayerInventoryCollector_C::LoadSavedItemInfo(const class FString& SourceString, const struct FFItemInfo& FItemInfo, struct FFItemInfo* UpdatedFItemInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInventoryCollector_C", "LoadSavedItemInfo");

	Params::PlayerInventoryCollector_C_LoadSavedItemInfo Parms{};

	Parms.SourceString = std::move(SourceString);
	Parms.FItemInfo = std::move(FItemInfo);

	UObject::ProcessEvent(Func, &Parms);

	if (UpdatedFItemInfo != nullptr)
		*UpdatedFItemInfo = std::move(Parms.UpdatedFItemInfo);
}


// Function PlayerInventoryCollector.PlayerInventoryCollector_C.NewFunction
// (Public, BlueprintCallable, BlueprintEvent)

void UPlayerInventoryCollector_C::NewFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInventoryCollector_C", "NewFunction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function PlayerInventoryCollector.PlayerInventoryCollector_C.PlaceInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UPlayerInventoryCollector_C::PlaceInventory(TArray<class FString>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerInventoryCollector_C", "PlaceInventory");

	Params::PlayerInventoryCollector_C_PlaceInventory Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);
}

}

