#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RB_Vehicle

#include "Basic.hpp"

#include "E_ActorType_structs.hpp"
#include "Engine_structs.hpp"
#include "E_InteractType_structs.hpp"
#include "E_SitsType_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "CarHit_structs.hpp"
#include "S_VehicleSit_structs.hpp"
#include "InputCore_structs.hpp"
#include "S_VehicleState_structs.hpp"
#include "DropItemEntry_structs.hpp"


namespace SDK::Params
{

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.AntiRoll
// 0x0100 (0x0100 - 0x0000)
struct BP_RB_Vehicle_C_AntiRoll final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_AntiRoll) == 0x000010, "Wrong alignment on BP_RB_Vehicle_C_AntiRoll");
static_assert(sizeof(BP_RB_Vehicle_C_AntiRoll) == 0x000100, "Wrong size on BP_RB_Vehicle_C_AntiRoll");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_BooleanAND_ReturnValue) == 0x000078, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_InverseTransformDirection_ReturnValue) == 0x000080, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_BooleanAND_ReturnValue_1) == 0x000098, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_BreakVector_X) == 0x0000A0, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_BreakVector_Y) == 0x0000A8, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_BooleanAND_ReturnValue_2) == 0x0000B8, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_AntiRoll, CallFunc_TransformDirection_ReturnValue) == 0x0000E8, "Member 'BP_RB_Vehicle_C_AntiRoll::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BlockWheel
// 0x0050 (0x0050 - 0x0000)
struct BP_RB_Vehicle_C_BlockWheel final
{
public:
	class UPhysicsConstraintComponent*            WheelConstraint;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsHandbraking;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBroken;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_BlockWheel) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BlockWheel");
static_assert(sizeof(BP_RB_Vehicle_C_BlockWheel) == 0x000050, "Wrong size on BP_RB_Vehicle_C_BlockWheel");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, WheelConstraint) == 0x000000, "Member 'BP_RB_Vehicle_C_BlockWheel::WheelConstraint' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, Param_IsHandbraking) == 0x000008, "Member 'BP_RB_Vehicle_C_BlockWheel::Param_IsHandbraking' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, IsBroken) == 0x000009, "Member 'BP_RB_Vehicle_C_BlockWheel::IsBroken' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, Temp_real_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_BlockWheel::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, CallFunc_BooleanOR_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_BlockWheel::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_BlockWheel::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, Temp_bool_Variable) == 0x000038, "Member 'BP_RB_Vehicle_C_BlockWheel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, K2Node_Select_Default) == 0x000040, "Member 'BP_RB_Vehicle_C_BlockWheel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BlockWheel, CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast) == 0x000048, "Member 'BP_RB_Vehicle_C_BlockWheel::CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0030(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature) == 0x000118, "Wrong size on BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature, Param_Hit) == 0x000030, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature::Param_Hit' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CalculateRPM
// 0x0058 (0x0058 - 0x0000)
struct BP_RB_Vehicle_C_CalculateRPM final
{
public:
	double                                        SelectedInput;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetInputAxisValue_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIdleRPM_IdleReached;                    // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_IncreaseRPM_NewRPM;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DecreaseRPM_NewRPM;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Option_1_ImplicitCast;               // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_CalculateRPM) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_CalculateRPM");
static_assert(sizeof(BP_RB_Vehicle_C_CalculateRPM) == 0x000058, "Wrong size on BP_RB_Vehicle_C_CalculateRPM");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, SelectedInput) == 0x000000, "Member 'BP_RB_Vehicle_C_CalculateRPM::SelectedInput' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, Temp_bool_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_CalculateRPM::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, Temp_real_Variable) == 0x000018, "Member 'BP_RB_Vehicle_C_CalculateRPM::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_GetInputAxisValue_ReturnValue) == 0x000024, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_GetInputAxisValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_Not_PreBool_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, K2Node_Select_Default) == 0x000030, "Member 'BP_RB_Vehicle_C_CalculateRPM::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_Not_PreBool_ReturnValue_1) == 0x000038, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_BooleanAND_ReturnValue_1) == 0x000039, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_IsIdleRPM_IdleReached) == 0x00003A, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_IsIdleRPM_IdleReached' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_IncreaseRPM_NewRPM) == 0x000040, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_IncreaseRPM_NewRPM' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, CallFunc_DecreaseRPM_NewRPM) == 0x000048, "Member 'BP_RB_Vehicle_C_CalculateRPM::CallFunc_DecreaseRPM_NewRPM' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CalculateRPM, K2Node_Select_Option_1_ImplicitCast) == 0x000050, "Member 'BP_RB_Vehicle_C_CalculateRPM::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ChangeSit
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_ChangeSit final
{
public:
	int32                                         SitIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ChangeSit) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ChangeSit");
static_assert(sizeof(BP_RB_Vehicle_C_ChangeSit) == 0x000010, "Wrong size on BP_RB_Vehicle_C_ChangeSit");
static_assert(offsetof(BP_RB_Vehicle_C_ChangeSit, SitIndex) == 0x000000, "Member 'BP_RB_Vehicle_C_ChangeSit::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ChangeSit, Player) == 0x000008, "Member 'BP_RB_Vehicle_C_ChangeSit::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ChangeViewTargetWithDelay
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_ChangeViewTargetWithDelay final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  NewViewTarget;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ChangeViewTargetWithDelay) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ChangeViewTargetWithDelay");
static_assert(sizeof(BP_RB_Vehicle_C_ChangeViewTargetWithDelay) == 0x000010, "Wrong size on BP_RB_Vehicle_C_ChangeViewTargetWithDelay");
static_assert(offsetof(BP_RB_Vehicle_C_ChangeViewTargetWithDelay, Delay) == 0x000000, "Member 'BP_RB_Vehicle_C_ChangeViewTargetWithDelay::Delay' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ChangeViewTargetWithDelay, NewViewTarget) == 0x000008, "Member 'BP_RB_Vehicle_C_ChangeViewTargetWithDelay::NewViewTarget' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CheckAndSetPlayRadio
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_CheckAndSetPlayRadio final
{
public:
	bool                                          NewPlay;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PassengerPlayerController;                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_CheckAndSetPlayRadio) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_CheckAndSetPlayRadio");
static_assert(sizeof(BP_RB_Vehicle_C_CheckAndSetPlayRadio) == 0x000010, "Wrong size on BP_RB_Vehicle_C_CheckAndSetPlayRadio");
static_assert(offsetof(BP_RB_Vehicle_C_CheckAndSetPlayRadio, NewPlay) == 0x000000, "Member 'BP_RB_Vehicle_C_CheckAndSetPlayRadio::NewPlay' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckAndSetPlayRadio, PassengerPlayerController) == 0x000008, "Member 'BP_RB_Vehicle_C_CheckAndSetPlayRadio::PassengerPlayerController' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CheckPlayerSit
// 0x00D0 (0x00D0 - 0x0000)
struct BP_RB_Vehicle_C_CheckPlayerSit final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CanEnterVehicle;                                   // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SitIndex;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempSitIndex;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0020(0x0010)(ConstParm, ReferenceParm)
	E_SitsType                                    Temp_byte_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ConstParm, ReferenceParm)
	E_SitsType                                    Temp_byte_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x008C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_CapsuleOverlapActors_OutActors;           // 0x00B8(0x0010)(ReferenceParm)
	bool                                          CallFunc_CapsuleOverlapActors_ReturnValue;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_CapsuleOverlapActors_Radius_ImplicitCast; // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_CheckPlayerSit) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_CheckPlayerSit");
static_assert(sizeof(BP_RB_Vehicle_C_CheckPlayerSit) == 0x0000D0, "Wrong size on BP_RB_Vehicle_C_CheckPlayerSit");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CanEnterVehicle) == 0x000008, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CanEnterVehicle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, SitIndex) == 0x00000C, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, TempSitIndex) == 0x000010, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::TempSitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_bool_Variable) == 0x000014, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_int_Variable) == 0x000018, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_object_Variable) == 0x000020, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_byte_Variable) == 0x000030, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_int_Variable_1) == 0x000034, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_int_Variable_2) == 0x000038, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_int_Variable_3) == 0x00003C, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_bool_Variable_1) == 0x000040, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000042, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_int_Variable_4) == 0x000044, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_real_Variable) == 0x000048, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_real_Variable_1) == 0x000058, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_real_Variable_2) == 0x000060, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, K2Node_MakeArray_Array) == 0x000068, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, Temp_byte_Variable_1) == 0x000078, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, K2Node_Select_Default) == 0x00007C, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, K2Node_Select_Default_1) == 0x000080, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, K2Node_Select_Default_2) == 0x000088, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_Array_Get_Item) == 0x00008C, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000094, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_GetSocketLocation_ReturnValue) == 0x000098, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_BooleanAND_ReturnValue) == 0x0000B0, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_CapsuleOverlapActors_OutActors) == 0x0000B8, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_CapsuleOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_CapsuleOverlapActors_ReturnValue) == 0x0000C8, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_CapsuleOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_Array_Contains_ReturnValue) == 0x0000C9, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CheckPlayerSit, CallFunc_CapsuleOverlapActors_Radius_ImplicitCast) == 0x0000CC, "Member 'BP_RB_Vehicle_C_CheckPlayerSit::CallFunc_CapsuleOverlapActors_Radius_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ClientDiedInCar
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_ClientDiedInCar final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ClientDiedInCar) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ClientDiedInCar");
static_assert(sizeof(BP_RB_Vehicle_C_ClientDiedInCar) == 0x000008, "Wrong size on BP_RB_Vehicle_C_ClientDiedInCar");
static_assert(offsetof(BP_RB_Vehicle_C_ClientDiedInCar, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ClientDiedInCar::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ClientsSideEnterVehicleAsDriver
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      PlayerRef;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver");
static_assert(sizeof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver) == 0x000010, "Wrong size on BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver");
static_assert(offsetof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver, PlayerRef) == 0x000008, "Member 'BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver::PlayerRef' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ClientsSideEnterVehicleAsPassenger
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      PlayerRef;                                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger");
static_assert(sizeof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger) == 0x000018, "Wrong size on BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger");
static_assert(offsetof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger, SitIndex) == 0x000008, "Member 'BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger, PlayerRef) == 0x000010, "Member 'BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger::PlayerRef' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CloseCarUpgradeMenu
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_CloseCarUpgradeMenu final
{
public:
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUpgradeScreen_Success;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_CloseCarUpgradeMenu) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_CloseCarUpgradeMenu");
static_assert(sizeof(BP_RB_Vehicle_C_CloseCarUpgradeMenu) == 0x000020, "Wrong size on BP_RB_Vehicle_C_CloseCarUpgradeMenu");
static_assert(offsetof(BP_RB_Vehicle_C_CloseCarUpgradeMenu, CallFunc_GetPlayerController_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_CloseCarUpgradeMenu::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CloseCarUpgradeMenu, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000008, "Member 'BP_RB_Vehicle_C_CloseCarUpgradeMenu::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CloseCarUpgradeMenu, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_RB_Vehicle_C_CloseCarUpgradeMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_CloseCarUpgradeMenu, CallFunc_SetUpgradeScreen_Success) == 0x000019, "Member 'BP_RB_Vehicle_C_CloseCarUpgradeMenu::CallFunc_SetUpgradeScreen_Success' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DamageToPassengers
// 0x0078 (0x0078 - 0x0000)
struct BP_RB_Vehicle_C_DamageToPassengers final
{
public:
	double                                        PureDamage;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Damage;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_VehicleSit                          CallFunc_Array_Get_Item;                           // 0x0038(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyDamage_BaseDamage_ImplicitCast;      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DamageToPassengers) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DamageToPassengers");
static_assert(sizeof(BP_RB_Vehicle_C_DamageToPassengers) == 0x000078, "Wrong size on BP_RB_Vehicle_C_DamageToPassengers");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, PureDamage) == 0x000000, "Member 'BP_RB_Vehicle_C_DamageToPassengers::PureDamage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, Damage) == 0x000008, "Member 'BP_RB_Vehicle_C_DamageToPassengers::Damage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, Temp_real_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_DamageToPassengers::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_RB_Vehicle_C_DamageToPassengers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_RB_Vehicle_C_DamageToPassengers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, Temp_real_Variable_1) == 0x000028, "Member 'BP_RB_Vehicle_C_DamageToPassengers::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, Temp_bool_Variable) == 0x000030, "Member 'BP_RB_Vehicle_C_DamageToPassengers::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_ApplyDamage_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, K2Node_Select_Default) == 0x000050, "Member 'BP_RB_Vehicle_C_DamageToPassengers::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DamageToPassengers, CallFunc_ApplyDamage_BaseDamage_ImplicitCast) == 0x000070, "Member 'BP_RB_Vehicle_C_DamageToPassengers::CallFunc_ApplyDamage_BaseDamage_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DampingSupport
// 0x0088 (0x0088 - 0x0000)
struct BP_RB_Vehicle_C_DampingSupport final
{
public:
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DetectRoadSurface_IsRoad;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DampingSupport) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DampingSupport");
static_assert(sizeof(BP_RB_Vehicle_C_DampingSupport) == 0x000088, "Wrong size on BP_RB_Vehicle_C_DampingSupport");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_IsLocallyControlled_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_DetectRoadSurface_IsRoad) == 0x000028, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_DetectRoadSurface_IsRoad' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_BreakRotator_Roll) == 0x00002C, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_BreakRotator_Pitch) == 0x000030, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_BreakRotator_Yaw) == 0x000034, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_MakeRotator_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_BreakRotator_Roll_1) == 0x000068, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_BreakRotator_Pitch_1) == 0x00006C, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_BreakRotator_Yaw_1) == 0x000070, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_MapRangeClamped_ReturnValue) == 0x000078, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingSupport, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000080, "Member 'BP_RB_Vehicle_C_DampingSupport::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DampingVehicle
// 0x0088 (0x0088 - 0x0000)
struct BP_RB_Vehicle_C_DampingVehicle final
{
public:
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast; // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DampingVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DampingVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_DampingVehicle) == 0x000088, "Wrong size on BP_RB_Vehicle_C_DampingVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_bool_Has_Been_Initd_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_bool_IsClosed_Variable) == 0x000001, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_bool_Has_Been_Initd_Variable_1) == 0x000010, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_int_Array_Index_Variable_1) == 0x00001C, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, Temp_bool_IsClosed_Variable_1) == 0x000020, "Member 'BP_RB_Vehicle_C_DampingVehicle::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Array_Length_ReturnValue_1) == 0x000040, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_GetVelocity_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_VSize_ReturnValue) == 0x000078, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingVehicle, CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast) == 0x000084, "Member 'BP_RB_Vehicle_C_DampingVehicle::CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DampingWheels
// 0x0060 (0x0060 - 0x0000)
struct BP_RB_Vehicle_C_DampingWheels final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetSupportBySurface_Support;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDampingBySurface_Damping;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDamping_InDamping_ImplicitCast;  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DampingWheels) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DampingWheels");
static_assert(sizeof(BP_RB_Vehicle_C_DampingWheels) == 0x000060, "Wrong size on BP_RB_Vehicle_C_DampingWheels");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, Temp_bool_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_DampingWheels::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, Temp_real_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_DampingWheels::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_DampingWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_RB_Vehicle_C_DampingWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_GetSupportBySurface_Support) == 0x000028, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_GetSupportBySurface_Support' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_GetDampingBySurface_Damping) == 0x000030, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_GetDampingBySurface_Damping' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, K2Node_Select_Default) == 0x000050, "Member 'BP_RB_Vehicle_C_DampingWheels::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DampingWheels, CallFunc_SetLinearDamping_InDamping_ImplicitCast) == 0x000058, "Member 'BP_RB_Vehicle_C_DampingWheels::CallFunc_SetLinearDamping_InDamping_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DecreaseDurability
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_DecreaseDurability final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoralePercentage;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DecreaseDurability) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DecreaseDurability");
static_assert(sizeof(BP_RB_Vehicle_C_DecreaseDurability) == 0x000010, "Wrong size on BP_RB_Vehicle_C_DecreaseDurability");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseDurability, Value) == 0x000000, "Member 'BP_RB_Vehicle_C_DecreaseDurability::Value' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseDurability, MoralePercentage) == 0x000008, "Member 'BP_RB_Vehicle_C_DecreaseDurability::MoralePercentage' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DecreaseRPM
// 0x0030 (0x0030 - 0x0000)
struct BP_RB_Vehicle_C_DecreaseRPM final
{
public:
	double                                        NewRPM;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DecreaseRPM) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DecreaseRPM");
static_assert(sizeof(BP_RB_Vehicle_C_DecreaseRPM) == 0x000030, "Wrong size on BP_RB_Vehicle_C_DecreaseRPM");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPM, NewRPM) == 0x000000, "Member 'BP_RB_Vehicle_C_DecreaseRPM::NewRPM' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPM, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_DecreaseRPM::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPM, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_DecreaseRPM::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPM, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_DecreaseRPM::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPM, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_DecreaseRPM::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPM, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'BP_RB_Vehicle_C_DecreaseRPM::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DecreaseRPMAfterHit
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_DecreaseRPMAfterHit final
{
public:
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DecreaseRPMAfterHit) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DecreaseRPMAfterHit");
static_assert(sizeof(BP_RB_Vehicle_C_DecreaseRPMAfterHit) == 0x000010, "Wrong size on BP_RB_Vehicle_C_DecreaseRPMAfterHit");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPMAfterHit, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_DecreaseRPMAfterHit::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DecreaseRPMAfterHit, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_DecreaseRPMAfterHit::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Destruction
// 0x0460 (0x0460 - 0x0000)
struct BP_RB_Vehicle_C_Destruction final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          NeedDamage;                                        // 0x00E8(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue;         // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue_1;       // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0260(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x02E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentScale_ReturnValue_2;       // 0x0300(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318[0x8];                                      // 0x0318(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0320(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0380(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_1;        // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_2;    // 0x0390(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x03A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x03C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_2;        // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0433(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x0435(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x0436(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_8;    // 0x0437(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_9;    // 0x0438(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_10;   // 0x0439(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_11;   // 0x043A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_12;   // 0x043B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_13;   // 0x043C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_14;   // 0x043D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x043E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_15;   // 0x043F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_16;   // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0442(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_17;   // 0x0443(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x0445(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0446(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x0447(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x0449(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_18;   // 0x044A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x044B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_19;   // 0x044C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_10;                 // 0x044D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_20;   // 0x044E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_11;                 // 0x044F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_12;                 // 0x0450(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_13;                 // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_14;                 // 0x0452(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_15;                 // 0x0453(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_16;                 // 0x0454(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_21;   // 0x0455(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_456[0x2];                                      // 0x0456(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_2;     // 0x0458(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Destruction) == 0x000010, "Wrong alignment on BP_RB_Vehicle_C_Destruction");
static_assert(sizeof(BP_RB_Vehicle_C_Destruction) == 0x000460, "Wrong size on BP_RB_Vehicle_C_Destruction");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, Hit) == 0x000000, "Member 'BP_RB_Vehicle_C_Destruction::Hit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, NeedDamage) == 0x0000E8, "Member 'BP_RB_Vehicle_C_Destruction::NeedDamage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_GetVelocity_ReturnValue) == 0x0000F0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_bBlockingHit) == 0x000108, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_bInitialOverlap) == 0x000109, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_Time) == 0x00010C, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_Distance) == 0x000110, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_Location) == 0x000118, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_ImpactPoint) == 0x000130, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_Normal) == 0x000148, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_ImpactNormal) == 0x000160, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_PhysMat) == 0x000178, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_HitActor) == 0x000180, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_HitComponent) == 0x000188, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_HitBoneName) == 0x000190, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_BoneName) == 0x000198, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_HitItem) == 0x0001A0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_ElementIndex) == 0x0001A4, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_FaceIndex) == 0x0001A8, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_TraceStart) == 0x0001B0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BreakHitResult_TraceEnd) == 0x0001C8, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x0001E0, "Member 'BP_RB_Vehicle_C_Destruction::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, K2Node_DynamicCast_bSuccess) == 0x0001E8, "Member 'BP_RB_Vehicle_C_Destruction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_PlayEventAttached_ReturnValue) == 0x0001F0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentScale_ReturnValue) == 0x0001F8, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentScale_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000210, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000228, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentScale_ReturnValue_1) == 0x000240, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentScale_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_MakeTransform_ReturnValue) == 0x000260, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0002C0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_PlayEventAtLocation_ReturnValue) == 0x0002C8, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x0002D0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0002E8, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentScale_ReturnValue_2) == 0x000300, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentScale_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_MakeTransform_ReturnValue_1) == 0x000320, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000380, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_PlayEventAtLocation_ReturnValue_1) == 0x000388, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_PlayEventAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentRotation_ReturnValue_2) == 0x000390, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentRotation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0003A8, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_MakeTransform_ReturnValue_2) == 0x0003C0, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000420, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_PlayEventAtLocation_ReturnValue_2) == 0x000428, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_PlayEventAtLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000430, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000431, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000432, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000433, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000434, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x000435, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x000436, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_8) == 0x000437, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_9) == 0x000438, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_10) == 0x000439, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_11) == 0x00043A, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_12) == 0x00043B, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_13) == 0x00043C, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_14) == 0x00043D, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue) == 0x00043E, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_15) == 0x00043F, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_1) == 0x000440, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_16) == 0x000441, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_2) == 0x000442, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_17) == 0x000443, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_3) == 0x000444, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_4) == 0x000445, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_5) == 0x000446, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_6) == 0x000447, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_7) == 0x000448, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_8) == 0x000449, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_18) == 0x00044A, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_9) == 0x00044B, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_19) == 0x00044C, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_10) == 0x00044D, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_20) == 0x00044E, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_11) == 0x00044F, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_12) == 0x000450, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_13) == 0x000451, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_14) == 0x000452, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_15) == 0x000453, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_BooleanOR_ReturnValue_16) == 0x000454, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_BooleanOR_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_EqualEqual_ObjectObject_ReturnValue_21) == 0x000455, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_EqualEqual_ObjectObject_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Destruction, CallFunc_SpawnEmitterAtLocation_ReturnValue_2) == 0x000458, "Member 'BP_RB_Vehicle_C_Destruction::CallFunc_SpawnEmitterAtLocation_ReturnValue_2' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DetectAirAndSurface
// 0x0268 (0x0268 - 0x0000)
struct BP_RB_Vehicle_C_DetectAirAndSurface final
{
public:
	bool                                          InAir;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0028(0x0010)(ConstParm, ReferenceParm)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00A8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_193[0x1];                                      // 0x0193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0210(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DetectAirAndSurface) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DetectAirAndSurface");
static_assert(sizeof(BP_RB_Vehicle_C_DetectAirAndSurface) == 0x000268, "Wrong size on BP_RB_Vehicle_C_DetectAirAndSurface");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, InAir) == 0x000000, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::InAir' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_GetUpVector_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, Temp_object_Variable) == 0x000028, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Array_Get_Item) == 0x000060, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_GetSocketLocation_ReturnValue) == 0x000070, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_Add_VectorVector_ReturnValue) == 0x000090, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_LineTraceSingle_OutHit) == 0x0000A8, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_LineTraceSingle_ReturnValue) == 0x000190, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_bBlockingHit) == 0x000191, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_bInitialOverlap) == 0x000192, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_Time) == 0x000194, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_Distance) == 0x000198, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_Location) == 0x0001A0, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_ImpactPoint) == 0x0001B8, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_Normal) == 0x0001D0, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_ImpactNormal) == 0x0001E8, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_PhysMat) == 0x000200, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_HitActor) == 0x000208, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_HitComponent) == 0x000210, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_HitBoneName) == 0x000218, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_BoneName) == 0x000220, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_HitItem) == 0x000228, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_ElementIndex) == 0x00022C, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_FaceIndex) == 0x000230, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_TraceStart) == 0x000238, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectAirAndSurface, CallFunc_BreakHitResult_TraceEnd) == 0x000250, "Member 'BP_RB_Vehicle_C_DetectAirAndSurface::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DetectPuncturedObject
// 0x0028 (0x0028 - 0x0000)
struct BP_RB_Vehicle_C_DetectPuncturedObject final
{
public:
	int32                                         WheelIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BurbWire_C*                         K2Node_DynamicCast_AsBP_Burb_Wire;                 // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DetectPuncturedObject) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_DetectPuncturedObject");
static_assert(sizeof(BP_RB_Vehicle_C_DetectPuncturedObject) == 0x000028, "Wrong size on BP_RB_Vehicle_C_DetectPuncturedObject");
static_assert(offsetof(BP_RB_Vehicle_C_DetectPuncturedObject, WheelIndex) == 0x000000, "Member 'BP_RB_Vehicle_C_DetectPuncturedObject::WheelIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectPuncturedObject, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_DetectPuncturedObject::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectPuncturedObject, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_DetectPuncturedObject::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectPuncturedObject, Temp_bool_Variable) == 0x000011, "Member 'BP_RB_Vehicle_C_DetectPuncturedObject::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectPuncturedObject, K2Node_DynamicCast_AsBP_Burb_Wire) == 0x000018, "Member 'BP_RB_Vehicle_C_DetectPuncturedObject::K2Node_DynamicCast_AsBP_Burb_Wire' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectPuncturedObject, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_RB_Vehicle_C_DetectPuncturedObject::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DetectRoadSurface
// 0x001C (0x001C - 0x0000)
struct BP_RB_Vehicle_C_DetectRoadSurface final
{
public:
	bool                                          IsRoad;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_Array_Get_Item;                           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_DetectRoadSurface) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_DetectRoadSurface");
static_assert(sizeof(BP_RB_Vehicle_C_DetectRoadSurface) == 0x00001C, "Wrong size on BP_RB_Vehicle_C_DetectRoadSurface");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, IsRoad) == 0x000000, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::IsRoad' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_Array_Get_Item) == 0x000014, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_Less_IntInt_ReturnValue) == 0x000015, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000016, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000017, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_DetectRoadSurface, CallFunc_BooleanOR_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_DetectRoadSurface::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EngineStartFX
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_EngineStartFX final
{
public:
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_EngineStartFX) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_EngineStartFX");
static_assert(sizeof(BP_RB_Vehicle_C_EngineStartFX) == 0x000010, "Wrong size on BP_RB_Vehicle_C_EngineStartFX");
static_assert(offsetof(BP_RB_Vehicle_C_EngineStartFX, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_EngineStartFX::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_EngineStartFX, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000008, "Member 'BP_RB_Vehicle_C_EngineStartFX::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EngineTurnOff
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_EngineTurnOff final
{
public:
	bool                                          IsCrash;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_EngineTurnOff) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_EngineTurnOff");
static_assert(sizeof(BP_RB_Vehicle_C_EngineTurnOff) == 0x000001, "Wrong size on BP_RB_Vehicle_C_EngineTurnOff");
static_assert(offsetof(BP_RB_Vehicle_C_EngineTurnOff, IsCrash) == 0x000000, "Member 'BP_RB_Vehicle_C_EngineTurnOff::IsCrash' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EnterVehicle
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_EnterVehicle final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_EnterVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_EnterVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_EnterVehicle) == 0x000010, "Wrong size on BP_RB_Vehicle_C_EnterVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_EnterVehicle, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_EnterVehicle::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_EnterVehicle, SitIndex) == 0x000008, "Member 'BP_RB_Vehicle_C_EnterVehicle::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_EnterVehicle, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_RB_Vehicle_C_EnterVehicle::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_EnterVehicle, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_RB_Vehicle_C_EnterVehicle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_EnterVehicle, CallFunc_BooleanAND_ReturnValue) == 0x00000E, "Member 'BP_RB_Vehicle_C_EnterVehicle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_EnterVehicle, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000F, "Member 'BP_RB_Vehicle_C_EnterVehicle::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExecuteUbergraph_BP_RB_Vehicle
// 0x1110 (0x1110 - 0x0000)
struct BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0028(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UNavigationSystemV1*                    CallFunc_GetNavigationSystem_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationSystemV1*                    CallFunc_GetNavigationSystem_ReturnValue_1;        // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x012B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlled_ReturnValue;                 // 0x012C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x012D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x012E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x012F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue_1;                   // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsControlled_ReturnValue_1;               // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0133(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0135(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0136(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0137(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player_8;                             // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_7;                             // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_6;                             // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_5;                             // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_4;                             // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_3;                             // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_2;                             // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_1;                             // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible_1;                            // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible;                              // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsReverse;                      // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A3[0x5];                                      // 0x01A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue_1;          // 0x01B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BA[0x6];                                      // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2[0x2];                                      // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EB[0x1];                                      // 0x01EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x01F8(0x0018)(HasGetValueTypeHash)
	class UNavigationSystemV1*                    CallFunc_GetNavigationSystem_ReturnValue_2;        // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class ASurvivalPlayer_C* Player)> K2Node_CreateDelegate_OutputDelegate;              // 0x021C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22E[0x2];                                      // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0230(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0248(0x0018)(HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_TabsWindow_C*                        CallFunc_GetTabsWidget_Widget;                     // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player_1;            // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationSystemV1*                    CallFunc_GetNavigationSystem_ReturnValue_3;        // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_CustomEvent_Player_10;                      // 0x02A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Player_9;                       // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_SitIndex;                       // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_CustomEvent_Player_8;                       // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Player_7;                       // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player_2;            // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player;                               // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SitIndex;                             // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_SkipAnimation;                        // 0x02EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ED[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player_3;            // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewBroken_1;                    // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA[0x2];                                      // 0x02FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_WheelIndex_1;                   // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewBroken;                      // 0x0301(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_WheelIndex;                     // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0308(0x0018)(HasGetValueTypeHash)
	struct FS_VehicleState                        K2Node_CustomEvent_VehicleState;                   // 0x0320(0x0038)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0358(0x0018)(HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent; // 0x0370(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0378(0x0018)(HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Index;                          // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Item_Is_Busy;                   // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_CustomEvent_Item_Sitter;                    // 0x0398(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_VehicleSit                          K2Node_MakeStruct_S_VehicleSit;                    // 0x03A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsCrash;                        // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B5[0x3];                                      // 0x03B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Damage;                               // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x03C0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x03D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Damage_1;                       // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Damage;                         // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_LevelName_1;                    // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Player_6;                       // 0x03F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_LevelName;                      // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_Player_5;                       // 0x0408(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0410(0x0018)(HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_6;  // 0x0428(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_7;           // 0x0430(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_7;            // 0x0438(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_6;       // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_6;           // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_445[0x3];                                      // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_6;          // 0x0448(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0530(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0531(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_532[0x2];                                      // 0x0532(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0538(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0540(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0558(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0570(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0588(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x05A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x05A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x05B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x05B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x05C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x05CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x05D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x05F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0608(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0610(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_MakeHitResult_ReturnValue;                // 0x0630(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_OverlapOtherActor_NeedDamage;             // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_719[0x7];                                      // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0720(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0738(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0750(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_2;                // 0x0768(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_3;                // 0x0780(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0798(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x07A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x07A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A9[0x7];                                      // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x07B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x07B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_IsEmpty;                          // 0x07C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_CustomEvent_Player_4;                       // 0x07C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_CustomEvent_Player_3;                       // 0x07D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_CustomEvent_Player_2;                       // 0x07D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_CustomEvent_Player_1;                       // 0x07E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDropItemEntry>                 CallFunc_GetAllItemsToDrop_Result;                 // 0x07E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class ASurvivalPlayer_C*                      K2Node_CustomEvent_Player;                         // 0x07F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0800(0x0018)(HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0818(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x0828(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue_2;          // 0x0838(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0840(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_1;                // 0x0848(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_TabsWindow_C*                        CallFunc_GetTabsWidget_Widget_1;                   // 0x0860(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0868(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_6;           // 0x0870(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_6;            // 0x0878(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0880(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x0898(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_SubstepDeltaTime;                     // 0x0980(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_984[0x4];                                      // 0x0984(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0988(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0990(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x09A0(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_IsEmpty_1;                        // 0x09B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x09B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9BA[0x6];                                      // 0x09BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeArray_Array;                            // 0x09C0(0x0010)(ReferenceParm)
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent_1; // 0x09D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x09D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x09E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E1[0x7];                                      // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x09E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x09F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_2;                      // 0x0A10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0A18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_VehicleState                        K2Node_MakeStruct_S_VehicleState;                  // 0x0A20(0x0038)(HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select_Default_1;                           // 0x0A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A59[0x7];                                      // 0x0A59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_5;  // 0x0A60(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_5;           // 0x0A68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_5;            // 0x0A70(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_5;       // 0x0A78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_5;           // 0x0A7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7D[0x3];                                      // 0x0A7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_5;          // 0x0A80(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_4;                // 0x0B68(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_VehicleState                        K2Node_MakeStruct_S_VehicleState_1;                // 0x0B80(0x0038)(HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Delay;                          // 0x0BB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_NewViewTarget;                  // 0x0BC0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0BC8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0BD0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0BD8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0BE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0BE1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE2[0x6];                                      // 0x0BE2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_4;  // 0x0BE8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_4;           // 0x0BF0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_4;            // 0x0BF8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_4;       // 0x0C00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_4;           // 0x0C04(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C05[0x3];                                      // 0x0C05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_4;          // 0x0C08(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0CF0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0D08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x0D10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D11[0x7];                                      // 0x0D11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player_4;            // 0x0D18(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0D20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D21[0x7];                                      // 0x0D21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0D28(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0D40(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyPointDamage_ReturnValue;             // 0x0D58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5C[0x4];                                      // 0x0D5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0D60(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0D68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0D70(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0D78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_3;           // 0x0D7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D7D[0x3];                                      // 0x0D7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_3;          // 0x0D80(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x0E68(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0E70(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0E78(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x0E80(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_2;           // 0x0E84(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E85[0x3];                                      // 0x0E85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_2;          // 0x0E88(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0F70(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0F78(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0F80(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0F88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0F8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F8D[0x3];                                      // 0x0F8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0F90(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x1078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x1080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetBrakeInput_AxisValue_ImplicitCast;     // 0x1088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetThrottleInput_AxisValue_ImplicitCast;  // 0x1090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetSteeringInput_AxisValue_ImplicitCast;  // 0x1098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ServerCallDecreaseDurability_Damage_ImplicitCast; // 0x10A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x10A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x10AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x10B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast; // 0x10B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_A_ImplicitCast_1;                    // 0x10C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1; // 0x10C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast; // 0x10D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast_1; // 0x10D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_RPM_10_3F2580A548A184B71FD7C2B8611CE49A_ImplicitCast; // 0x10D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10DC[0x4];                                     // 0x10DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 K2Node_MakeStruct_WheelPitches_11_22E73BEB4F3C88842B868FA2A84EE05F_ImplicitCast; // 0x10E0(0x0010)(ReferenceParm)
	float                                         K2Node_MakeStruct_SteeringAngle_15_4D29189E4AE5CBAF6E0776B9316C319C_ImplicitCast; // 0x10F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_2;            // 0x10F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_RPM_10_3F2580A548A184B71FD7C2B8611CE49A_ImplicitCast_1; // 0x10F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_3;            // 0x10FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_RPM_ImplicitCast;               // 0x1100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_RPM_ImplicitCast_1;             // 0x1108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle");
static_assert(sizeof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle) == 0x001110, "Wrong size on BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, EntryPoint) == 0x000000, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep) == 0x000024, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult) == 0x000028, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetNavigationSystem_ReturnValue) == 0x000110, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetNavigationSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsValid_ReturnValue) == 0x000118, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_Has_Been_Initd_Variable) == 0x000119, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetNavigationSystem_ReturnValue_1) == 0x000120, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetNavigationSystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_byte_Variable) == 0x000128, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsValid_ReturnValue_1) == 0x000129, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsLocallyControlled_ReturnValue) == 0x00012A, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsServer_ReturnValue) == 0x00012B, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsControlled_ReturnValue) == 0x00012C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x00012D, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Not_PreBool_ReturnValue) == 0x00012E, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BooleanAND_ReturnValue) == 0x00012F, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsServer_ReturnValue_1) == 0x000130, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsControlled_ReturnValue_1) == 0x000131, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_byte_Variable_1) == 0x000132, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Not_PreBool_ReturnValue_1) == 0x000133, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BooleanAND_ReturnValue_1) == 0x000134, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_Variable) == 0x000135, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_IsClosed_Variable) == 0x000136, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BooleanOR_ReturnValue) == 0x000137, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetVelocity_ReturnValue) == 0x000138, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsSurvival_Player) == 0x000150, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x000159, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_8) == 0x000160, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_7) == 0x000168, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_6) == 0x000170, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_5) == 0x000178, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_4) == 0x000180, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_3) == 0x000188, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_2) == 0x000190, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player_1) == 0x000198, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Visible_1) == 0x0001A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Visible_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Visible) == 0x0001A1, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Visible' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_IsReverse) == 0x0001A2, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_IsReverse' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_PlayEventAttached_ReturnValue) == 0x0001A8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_PlayEventAttached_ReturnValue_1) == 0x0001B0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_PlayEventAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BooleanOR_ReturnValue_1) == 0x0001B9, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0001C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x0001C8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Array_LastIndex_ReturnValue) == 0x0001CC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Less_IntInt_ReturnValue) == 0x0001D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Greater_IntInt_ReturnValue) == 0x0001D1, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Add_IntInt_ReturnValue) == 0x0001D4, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0001E0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Not_PreBool_ReturnValue_2) == 0x0001E8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0001E9, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BooleanAND_ReturnValue_2) == 0x0001EA, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputAxisEvent_AxisValue_4) == 0x0001EC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputAxisEvent_AxisValue_3) == 0x0001F0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputAxisEvent_AxisValue_2) == 0x0001F4, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key) == 0x0001F8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetNavigationSystem_ReturnValue_2) == 0x000210, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetNavigationSystem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsValid_ReturnValue_2) == 0x000218, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CreateDelegate_OutputDelegate) == 0x00021C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Not_PreBool_ReturnValue_3) == 0x00022C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BooleanAND_ReturnValue_3) == 0x00022D, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CreateDelegate_OutputDelegate_1) == 0x000230, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetPlayerController_ReturnValue) == 0x000240, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key_1) == 0x000248, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000260, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_1) == 0x000270, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetTabsWidget_Widget) == 0x000278, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetTabsWidget_Widget' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsSurvival_Player_1) == 0x000280, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsSurvival_Player_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_2) == 0x000288, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetNavigationSystem_ReturnValue_3) == 0x000290, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetNavigationSystem_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsValid_ReturnValue_3) == 0x000298, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputAxisEvent_AxisValue_1) == 0x00029C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputAxisEvent_AxisValue) == 0x0002A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_10) == 0x0002A8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_9) == 0x0002B0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_SitIndex) == 0x0002B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_8) == 0x0002C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_7) == 0x0002C8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsSurvival_Player_2) == 0x0002D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsSurvival_Player_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_3) == 0x0002D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Player) == 0x0002E0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_SitIndex) == 0x0002E8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_SkipAnimation) == 0x0002EC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_SkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsSurvival_Player_3) == 0x0002F0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsSurvival_Player_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_4) == 0x0002F8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_NewBroken_1) == 0x0002F9, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_NewBroken_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_WheelIndex_1) == 0x0002FC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_WheelIndex_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Not_PreBool_ReturnValue_4) == 0x000300, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_NewBroken) == 0x000301, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_NewBroken' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_WheelIndex) == 0x000304, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_WheelIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key_2) == 0x000308, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_VehicleState) == 0x000320, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_VehicleState' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputKeyEvent_Key) == 0x000358, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_PlayEventWithOcclusion_FMODAudioComponent) == 0x000370, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_PlayEventWithOcclusion_FMODAudioComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key_3) == 0x000378, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Index) == 0x000390, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Index' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Item_Is_Busy) == 0x000394, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Item_Is_Busy' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Item_Sitter) == 0x000398, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Item_Sitter' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_S_VehicleSit) == 0x0003A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_S_VehicleSit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_DeltaSeconds) == 0x0003B0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_IsCrash) == 0x0003B4, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_IsCrash' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_Damage) == 0x0003B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_DamageType) == 0x0003C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_InstigatedBy) == 0x0003C8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_DamageCauser) == 0x0003D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Damage_1) == 0x0003D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Damage_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0003E0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Damage) == 0x0003E8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Damage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_LevelName_1) == 0x0003F0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_LevelName_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_6) == 0x0003F8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_LevelName) == 0x000400, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_LevelName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_5) == 0x000408, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_struct_Variable) == 0x000410, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent_6) == 0x000428, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_7) == 0x000430, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_7) == 0x000438, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex_6) == 0x000440, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep_6) == 0x000444, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult_6) == 0x000448, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_bBlockingHit) == 0x000530, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_bInitialOverlap) == 0x000531, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_Time) == 0x000534, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_Distance) == 0x000538, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_Location) == 0x000540, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_ImpactPoint) == 0x000558, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_Normal) == 0x000570, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_ImpactNormal) == 0x000588, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_PhysMat) == 0x0005A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_HitActor) == 0x0005A8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_HitComponent) == 0x0005B0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_HitBoneName) == 0x0005B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_BoneName) == 0x0005C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_HitItem) == 0x0005C8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_ElementIndex) == 0x0005CC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_FaceIndex) == 0x0005D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_TraceStart) == 0x0005D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_BreakHitResult_TraceEnd) == 0x0005F0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetObjectClass_ReturnValue) == 0x000608, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000610, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000628, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_MakeHitResult_ReturnValue) == 0x000630, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_MakeHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_OverlapOtherActor_NeedDamage) == 0x000718, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_OverlapOtherActor_NeedDamage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetVelocity_ReturnValue_1) == 0x000720, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000738, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key_4) == 0x000750, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetVelocity_ReturnValue_2) == 0x000768, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetVelocity_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetVelocity_ReturnValue_3) == 0x000780, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetVelocity_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_VSize_ReturnValue) == 0x000798, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_VSize_ReturnValue_1) == 0x0007A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x0007A8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0007B0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_FClamp_ReturnValue) == 0x0007B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsEmpty_IsEmpty) == 0x0007C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsEmpty_IsEmpty' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_4) == 0x0007C8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_3) == 0x0007D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_2) == 0x0007D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player_1) == 0x0007E0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetAllItemsToDrop_Result) == 0x0007E8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetAllItemsToDrop_Result' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Player) == 0x0007F8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key_5) == 0x000800, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000818, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x000828, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_PlayEventAttached_ReturnValue_2) == 0x000838, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_PlayEventAttached_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetPlayerController_ReturnValue_1) == 0x000840, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsBPI_Surv_PC_1) == 0x000848, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsBPI_Surv_PC_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_5) == 0x000858, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetTabsWidget_Widget_1) == 0x000860, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetTabsWidget_Widget_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_HitComponent) == 0x000868, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_6) == 0x000870, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_6) == 0x000878, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000880, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_Hit) == 0x000898, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Event_SubstepDeltaTime) == 0x000980, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Event_SubstepDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_K2_SetTimer_ReturnValue) == 0x000988, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Lerp_ReturnValue) == 0x000990, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Lerp_ReturnValue_1) == 0x000998, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_InputActionEvent_Key_6) == 0x0009A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_IsEmpty_IsEmpty_1) == 0x0009B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_IsEmpty_IsEmpty_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Not_PreBool_ReturnValue_5) == 0x0009B9, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeArray_Array) == 0x0009C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_PlayEventWithOcclusion_FMODAudioComponent_1) == 0x0009D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_PlayEventWithOcclusion_FMODAudioComponent_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_RandomFloatInRange_ReturnValue) == 0x0009D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_Variable_1) == 0x0009E0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0009E8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_Has_Been_Initd_Variable_1) == 0x0009F0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Select_Default) == 0x0009F8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_VSize_ReturnValue_2) == 0x000A10, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000A18, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_S_VehicleState) == 0x000A20, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_S_VehicleState' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_Select_Default_1) == 0x000A58, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent_5) == 0x000A60, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_5) == 0x000A68, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_5) == 0x000A70, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex_5) == 0x000A78, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep_5) == 0x000A7C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult_5) == 0x000A80, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetVelocity_ReturnValue_4) == 0x000B68, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetVelocity_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_S_VehicleState_1) == 0x000B80, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_S_VehicleState_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_Delay) == 0x000BB8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_Delay' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_CustomEvent_NewViewTarget) == 0x000BC0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_CustomEvent_NewViewTarget' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000BC8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_GetController_ReturnValue) == 0x000BD0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsPlayer_Controller) == 0x000BD8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_6) == 0x000BE0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, Temp_bool_IsClosed_Variable_1) == 0x000BE1, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent_4) == 0x000BE8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_4) == 0x000BF0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_4) == 0x000BF8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex_4) == 0x000C00, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep_4) == 0x000C04, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult_4) == 0x000C08, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000CF0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsCharacter) == 0x000D08, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_7) == 0x000D10, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_AsSurvival_Player_4) == 0x000D18, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_AsSurvival_Player_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_DynamicCast_bSuccess_8) == 0x000D20, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000D28, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000D40, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_ApplyPointDamage_ReturnValue) == 0x000D58, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_ApplyPointDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000D60, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000D68, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000D70, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000D78, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep_3) == 0x000D7C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult_3) == 0x000D80, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x000E68, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000E70, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000E78, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x000E80, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep_2) == 0x000E84, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult_2) == 0x000E88, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000F70, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000F78, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000F80, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000F88, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000F8C, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000F90, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Lerp_Alpha_ImplicitCast) == 0x001078, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x001080, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_SetBrakeInput_AxisValue_ImplicitCast) == 0x001088, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_SetBrakeInput_AxisValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_SetThrottleInput_AxisValue_ImplicitCast) == 0x001090, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_SetThrottleInput_AxisValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_SetSteeringInput_AxisValue_ImplicitCast) == 0x001098, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_SetSteeringInput_AxisValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_ServerCallDecreaseDurability_Damage_ImplicitCast) == 0x0010A0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_ServerCallDecreaseDurability_Damage_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Delay_Duration_ImplicitCast) == 0x0010A8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Delay_Duration_ImplicitCast_1) == 0x0010AC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Lerp_A_ImplicitCast) == 0x0010B0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast) == 0x0010B8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Lerp_A_ImplicitCast_1) == 0x0010C0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Lerp_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1) == 0x0010C8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast) == 0x0010D0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast_1) == 0x0010D4, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_SetFieldOfView_InFieldOfView_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_RPM_10_3F2580A548A184B71FD7C2B8611CE49A_ImplicitCast) == 0x0010D8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_RPM_10_3F2580A548A184B71FD7C2B8611CE49A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_WheelPitches_11_22E73BEB4F3C88842B868FA2A84EE05F_ImplicitCast) == 0x0010E0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_WheelPitches_11_22E73BEB4F3C88842B868FA2A84EE05F_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_SteeringAngle_15_4D29189E4AE5CBAF6E0776B9316C319C_ImplicitCast) == 0x0010F0, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_SteeringAngle_15_4D29189E4AE5CBAF6E0776B9316C319C_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Delay_Duration_ImplicitCast_2) == 0x0010F4, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Delay_Duration_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_MakeStruct_RPM_10_3F2580A548A184B71FD7C2B8611CE49A_ImplicitCast_1) == 0x0010F8, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_MakeStruct_RPM_10_3F2580A548A184B71FD7C2B8611CE49A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, CallFunc_Delay_Duration_ImplicitCast_3) == 0x0010FC, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::CallFunc_Delay_Duration_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_VariableSet_RPM_ImplicitCast) == 0x001100, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_VariableSet_RPM_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle, K2Node_VariableSet_RPM_ImplicitCast_1) == 0x001108, "Member 'BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle::K2Node_VariableSet_RPM_ImplicitCast_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExitAsDriver
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_ExitAsDriver final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CorrectExitLocation;                               // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ExitAsDriver) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ExitAsDriver");
static_assert(sizeof(BP_RB_Vehicle_C_ExitAsDriver) == 0x000010, "Wrong size on BP_RB_Vehicle_C_ExitAsDriver");
static_assert(offsetof(BP_RB_Vehicle_C_ExitAsDriver, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ExitAsDriver::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExitAsDriver, CorrectExitLocation) == 0x000008, "Member 'BP_RB_Vehicle_C_ExitAsDriver::CorrectExitLocation' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExitAsPassenger
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_ExitAsPassenger final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CorrectLocation;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ExitAsPassenger) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ExitAsPassenger");
static_assert(sizeof(BP_RB_Vehicle_C_ExitAsPassenger) == 0x000010, "Wrong size on BP_RB_Vehicle_C_ExitAsPassenger");
static_assert(offsetof(BP_RB_Vehicle_C_ExitAsPassenger, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ExitAsPassenger::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ExitAsPassenger, CorrectLocation) == 0x000008, "Member 'BP_RB_Vehicle_C_ExitAsPassenger::CorrectLocation' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExitVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_ExitVehicle final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ExitVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ExitVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_ExitVehicle) == 0x000008, "Wrong size on BP_RB_Vehicle_C_ExitVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_ExitVehicle, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ExitVehicle::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.FuelOrDurabilityEnded
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_FuelOrDurabilityEnded final
{
public:
	bool                                          IsCrash;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_FuelOrDurabilityEnded) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_FuelOrDurabilityEnded");
static_assert(sizeof(BP_RB_Vehicle_C_FuelOrDurabilityEnded) == 0x000001, "Wrong size on BP_RB_Vehicle_C_FuelOrDurabilityEnded");
static_assert(offsetof(BP_RB_Vehicle_C_FuelOrDurabilityEnded, IsCrash) == 0x000000, "Member 'BP_RB_Vehicle_C_FuelOrDurabilityEnded::IsCrash' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetAccelerating
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_GetAccelerating final
{
public:
	bool                                          Param_IsAccelerating;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetAccelerating) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_GetAccelerating");
static_assert(sizeof(BP_RB_Vehicle_C_GetAccelerating) == 0x000001, "Wrong size on BP_RB_Vehicle_C_GetAccelerating");
static_assert(offsetof(BP_RB_Vehicle_C_GetAccelerating, Param_IsAccelerating) == 0x000000, "Member 'BP_RB_Vehicle_C_GetAccelerating::Param_IsAccelerating' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetActorType
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_GetActorType final
{
public:
	E_ActorType                                   ActorType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetActorType) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_GetActorType");
static_assert(sizeof(BP_RB_Vehicle_C_GetActorType) == 0x000001, "Wrong size on BP_RB_Vehicle_C_GetActorType");
static_assert(offsetof(BP_RB_Vehicle_C_GetActorType, ActorType) == 0x000000, "Member 'BP_RB_Vehicle_C_GetActorType::ActorType' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetCarStatsComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_GetCarStatsComponent final
{
public:
	class UBPC_CarStatsComponent_C*               CarStats;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetCarStatsComponent) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetCarStatsComponent");
static_assert(sizeof(BP_RB_Vehicle_C_GetCarStatsComponent) == 0x000008, "Wrong size on BP_RB_Vehicle_C_GetCarStatsComponent");
static_assert(offsetof(BP_RB_Vehicle_C_GetCarStatsComponent, CarStats) == 0x000000, "Member 'BP_RB_Vehicle_C_GetCarStatsComponent::CarStats' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetDampingBySurface
// 0x0110 (0x0110 - 0x0000)
struct BP_RB_Vehicle_C_GetDampingBySurface final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Damping;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_10;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_11;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_12;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_13;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_14;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_15;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_16;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_17;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_18;                             // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_19;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_20;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_21;                             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_22;                             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_23;                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_24;                             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_25;                             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_26;                             // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_27;                             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_28;                             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_29;                             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetDampingBySurface) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetDampingBySurface");
static_assert(sizeof(BP_RB_Vehicle_C_GetDampingBySurface) == 0x000110, "Wrong size on BP_RB_Vehicle_C_GetDampingBySurface");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, SurfaceType) == 0x000000, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::SurfaceType' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Damping) == 0x000008, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Damping' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_byte_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable) == 0x000018, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_1) == 0x000020, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_2) == 0x000028, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_3) == 0x000030, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_4) == 0x000038, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_5) == 0x000040, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_6) == 0x000048, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_7) == 0x000050, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_8) == 0x000058, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_9) == 0x000060, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_10) == 0x000068, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_11) == 0x000070, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_12) == 0x000078, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_13) == 0x000080, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_14) == 0x000088, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_15) == 0x000090, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_16) == 0x000098, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_17) == 0x0000A0, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_18) == 0x0000A8, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_19) == 0x0000B0, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_20) == 0x0000B8, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_21) == 0x0000C0, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_22) == 0x0000C8, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_23) == 0x0000D0, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_24) == 0x0000D8, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_25) == 0x0000E0, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_26) == 0x0000E8, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_27) == 0x0000F0, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_28) == 0x0000F8, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, Temp_real_Variable_29) == 0x000100, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::Temp_real_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetDampingBySurface, K2Node_Select_Default) == 0x000108, "Member 'BP_RB_Vehicle_C_GetDampingBySurface::K2Node_Select_Default' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetDriver
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_GetDriver final
{
public:
	class APawn*                                  Driver;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetDriver) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetDriver");
static_assert(sizeof(BP_RB_Vehicle_C_GetDriver) == 0x000008, "Wrong size on BP_RB_Vehicle_C_GetDriver");
static_assert(offsetof(BP_RB_Vehicle_C_GetDriver, Driver) == 0x000000, "Member 'BP_RB_Vehicle_C_GetDriver::Driver' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetEngineStarted
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_GetEngineStarted final
{
public:
	bool                                          Param_EngineStarted;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetEngineStarted) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_GetEngineStarted");
static_assert(sizeof(BP_RB_Vehicle_C_GetEngineStarted) == 0x000001, "Wrong size on BP_RB_Vehicle_C_GetEngineStarted");
static_assert(offsetof(BP_RB_Vehicle_C_GetEngineStarted, Param_EngineStarted) == 0x000000, "Member 'BP_RB_Vehicle_C_GetEngineStarted::Param_EngineStarted' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetExitPoint
// 0x0130 (0x0130 - 0x0000)
struct BP_RB_Vehicle_C_GetExitPoint final
{
public:
	int32                                         SitIndex;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CorrectLocation;                                   // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0040(0x0010)(ReferenceParm)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0050(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_SphereOverlapActors_OutActors;            // 0x0108(0x0010)(ReferenceParm)
	bool                                          CallFunc_SphereOverlapActors_ReturnValue;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetExitPoint) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetExitPoint");
static_assert(sizeof(BP_RB_Vehicle_C_GetExitPoint) == 0x000130, "Wrong size on BP_RB_Vehicle_C_GetExitPoint");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, SitIndex) == 0x000000, "Member 'BP_RB_Vehicle_C_GetExitPoint::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, Location) == 0x000008, "Member 'BP_RB_Vehicle_C_GetExitPoint::Location' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CorrectLocation) == 0x000020, "Member 'BP_RB_Vehicle_C_GetExitPoint::CorrectLocation' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, ActorsToIgnore) == 0x000028, "Member 'BP_RB_Vehicle_C_GetExitPoint::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_GetAttachedActors_OutActors) == 0x000040, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, K2Node_MakeArray_Array) == 0x000050, "Member 'BP_RB_Vehicle_C_GetExitPoint::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_GetComponentBounds_Origin) == 0x000060, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_GetComponentBounds_BoxExtent) == 0x000078, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_GetComponentBounds_SphereRadius) == 0x000090, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_GetSocketLocation_ReturnValue) == 0x000098, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_MakeVector_ReturnValue) == 0x0000B0, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_Add_VectorVector_ReturnValue) == 0x0000C8, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'BP_RB_Vehicle_C_GetExitPoint::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_GetSocketLocation_ReturnValue_1) == 0x0000F0, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_SphereOverlapActors_OutActors) == 0x000108, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_SphereOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_SphereOverlapActors_ReturnValue) == 0x000118, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_SphereOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_Array_Length_ReturnValue) == 0x00011C, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000120, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetExitPoint, CallFunc_MakeVector_Z_ImplicitCast) == 0x000128, "Member 'BP_RB_Vehicle_C_GetExitPoint::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetPassengers
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_GetPassengers final
{
public:
	class APawn*                                  PassengerFL;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PassengerBL;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  PassengerBR;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetPassengers) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetPassengers");
static_assert(sizeof(BP_RB_Vehicle_C_GetPassengers) == 0x000018, "Wrong size on BP_RB_Vehicle_C_GetPassengers");
static_assert(offsetof(BP_RB_Vehicle_C_GetPassengers, PassengerFL) == 0x000000, "Member 'BP_RB_Vehicle_C_GetPassengers::PassengerFL' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetPassengers, PassengerBL) == 0x000008, "Member 'BP_RB_Vehicle_C_GetPassengers::PassengerBL' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetPassengers, PassengerBR) == 0x000010, "Member 'BP_RB_Vehicle_C_GetPassengers::PassengerBR' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetRiseRPM
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_GetRiseRPM final
{
public:
	double                                        Param_RPM;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetRiseRPM) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetRiseRPM");
static_assert(sizeof(BP_RB_Vehicle_C_GetRiseRPM) == 0x000020, "Wrong size on BP_RB_Vehicle_C_GetRiseRPM");
static_assert(offsetof(BP_RB_Vehicle_C_GetRiseRPM, Param_RPM) == 0x000000, "Member 'BP_RB_Vehicle_C_GetRiseRPM::Param_RPM' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetRiseRPM, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_GetRiseRPM::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetRiseRPM, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_GetRiseRPM::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetRiseRPM, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x000018, "Member 'BP_RB_Vehicle_C_GetRiseRPM::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetSteering
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_GetSteering final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetSteering) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetSteering");
static_assert(sizeof(BP_RB_Vehicle_C_GetSteering) == 0x000008, "Wrong size on BP_RB_Vehicle_C_GetSteering");
static_assert(offsetof(BP_RB_Vehicle_C_GetSteering, Angle) == 0x000000, "Member 'BP_RB_Vehicle_C_GetSteering::Angle' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetSupportBySurface
// 0x0120 (0x0120 - 0x0000)
struct BP_RB_Vehicle_C_GetSupportBySurface final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Support;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_10;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_11;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_12;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_13;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_14;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_15;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetSupportBySurface) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetSupportBySurface");
static_assert(sizeof(BP_RB_Vehicle_C_GetSupportBySurface) == 0x000120, "Wrong size on BP_RB_Vehicle_C_GetSupportBySurface");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, SurfaceType) == 0x000000, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::SurfaceType' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Support) == 0x000008, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Support' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_byte_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable) == 0x000018, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_1) == 0x000020, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_2) == 0x000028, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_3) == 0x000030, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_4) == 0x000038, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_5) == 0x000040, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_6) == 0x000048, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_7) == 0x000050, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_8) == 0x000058, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_9) == 0x000060, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_10) == 0x000068, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_11) == 0x000070, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_12) == 0x000078, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_13) == 0x000080, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_14) == 0x000088, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, Temp_real_Variable_15) == 0x000090, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::Temp_real_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, K2Node_Select_Default) == 0x000098, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000A8, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_BreakRotator_Roll) == 0x0000C0, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_BreakRotator_Pitch) == 0x0000C4, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_BreakRotator_Yaw) == 0x0000C8, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_MakeRotator_ReturnValue) == 0x0000D0, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000E8, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_BreakRotator_Roll_1) == 0x000100, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_BreakRotator_Pitch_1) == 0x000104, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_BreakRotator_Yaw_1) == 0x000108, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_MapRangeClamped_ReturnValue) == 0x000110, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetSupportBySurface, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000118, "Member 'BP_RB_Vehicle_C_GetSupportBySurface::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.getTorque
// 0x0030 (0x0030 - 0x0000)
struct BP_RB_Vehicle_C_GetTorque final
{
public:
	double                                        Force;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetTorque) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetTorque");
static_assert(sizeof(BP_RB_Vehicle_C_GetTorque) == 0x000030, "Wrong size on BP_RB_Vehicle_C_GetTorque");
static_assert(offsetof(BP_RB_Vehicle_C_GetTorque, Force) == 0x000000, "Member 'BP_RB_Vehicle_C_GetTorque::Force' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetTorque, CallFunc_GetFloatValue_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_GetTorque::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetTorque, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_GetTorque::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetTorque, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'BP_RB_Vehicle_C_GetTorque::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetTorque, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000020, "Member 'BP_RB_Vehicle_C_GetTorque::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetTorque, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000028, "Member 'BP_RB_Vehicle_C_GetTorque::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetVehicleBody
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_GetVehicleBody final
{
public:
	class USkeletalMeshComponent*                 Body;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetVehicleBody) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetVehicleBody");
static_assert(sizeof(BP_RB_Vehicle_C_GetVehicleBody) == 0x000008, "Wrong size on BP_RB_Vehicle_C_GetVehicleBody");
static_assert(offsetof(BP_RB_Vehicle_C_GetVehicleBody, Body) == 0x000000, "Member 'BP_RB_Vehicle_C_GetVehicleBody::Body' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetWheelPitches
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_GetWheelPitches final
{
public:
	TArray<double>                                Pitches;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_RB_Vehicle_C_GetWheelPitches) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetWheelPitches");
static_assert(sizeof(BP_RB_Vehicle_C_GetWheelPitches) == 0x000010, "Wrong size on BP_RB_Vehicle_C_GetWheelPitches");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheelPitches, Pitches) == 0x000000, "Member 'BP_RB_Vehicle_C_GetWheelPitches::Pitches' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetWheels
// 0x0030 (0x0030 - 0x0000)
struct BP_RB_Vehicle_C_GetWheels final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       LF;                                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RF;                                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LB;                                                // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RB;                                                // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_GetWheels) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_GetWheels");
static_assert(sizeof(BP_RB_Vehicle_C_GetWheels) == 0x000030, "Wrong size on BP_RB_Vehicle_C_GetWheels");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheels, IsValid) == 0x000000, "Member 'BP_RB_Vehicle_C_GetWheels::IsValid' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheels, LF) == 0x000008, "Member 'BP_RB_Vehicle_C_GetWheels::LF' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheels, RF) == 0x000010, "Member 'BP_RB_Vehicle_C_GetWheels::RF' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheels, LB) == 0x000018, "Member 'BP_RB_Vehicle_C_GetWheels::LB' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheels, RB) == 0x000020, "Member 'BP_RB_Vehicle_C_GetWheels::RB' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_GetWheels, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_GetWheels::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HandlePlayerEvents
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_HandlePlayerEvents final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_HandlePlayerEvents) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_HandlePlayerEvents");
static_assert(sizeof(BP_RB_Vehicle_C_HandlePlayerEvents) == 0x000008, "Wrong size on BP_RB_Vehicle_C_HandlePlayerEvents");
static_assert(offsetof(BP_RB_Vehicle_C_HandlePlayerEvents, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_HandlePlayerEvents::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HasDriver
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_HasDriver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_HasDriver) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_HasDriver");
static_assert(sizeof(BP_RB_Vehicle_C_HasDriver) == 0x000001, "Wrong size on BP_RB_Vehicle_C_HasDriver");
static_assert(offsetof(BP_RB_Vehicle_C_HasDriver, ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_HasDriver::ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.hit
// 0x0670 (0x0670 - 0x0000)
struct BP_RB_Vehicle_C_Hit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Param_Hit;                                         // 0x0030(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class FName                                   Temp_name_Variable;                                // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x01E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_8;                              // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_9;                              // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_10;                             // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_11;                             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_12;                             // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_13;                             // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_14;                             // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_15;                             // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_16;                             // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_17;                             // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_18;                             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_19;                             // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_20;                             // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_21;                             // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_22;                             // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_23;                             // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_24;                             // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_25;                             // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_26;                             // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_27;                             // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_28;                             // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_29;                             // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_30;                             // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_31;                             // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_32;                             // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_33;                             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_34;                             // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_35;                             // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_36;                             // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_37;                             // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_38;                             // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_39;                             // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_40;                             // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_41;                             // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_42;                             // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_43;                             // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_44;                             // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0358(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0359(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x035A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x035B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCarHit                                CallFunc_GetDataTableRowFromName_OutRow;           // 0x0360(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_399[0x3];                                      // 0x0399(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default;                             // 0x039C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCarHit                                CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x03A8(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x03F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0408(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0418(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue_1;         // 0x0420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System;              // 0x0428(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        K2Node_DynamicCast_AsParticle_System_1;            // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0441(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0448(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0460(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0478(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0488(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RB_Vehicle_C*                       K2Node_DynamicCast_AsBP_RB_Vehicle;                // 0x04D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DA[0x6];                                      // 0x04DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             Temp_object_Variable;                              // 0x04E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_1;                            // 0x04E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             K2Node_Select_Default_3;                           // 0x04F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit_1;            // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap_1;         // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FA[0x2];                                      // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time_1;                    // 0x04FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance_1;                // 0x0500(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location_1;                // 0x0508(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint_1;             // 0x0520(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal_1;                  // 0x0538(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal_1;            // 0x0550(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat_1;                 // 0x0568(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor_1;                // 0x0570(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent_1;            // 0x0578(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName_1;             // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName_1;                // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem_1;                 // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex_1;            // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex_1;               // 0x0598(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart_1;              // 0x05A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd_1;                // 0x05B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RotatorFromAxisAndAngle_ReturnValue;      // 0x05D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E8[0x8];                                      // 0x05E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x05F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0650(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0660(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Hit) == 0x000010, "Wrong alignment on BP_RB_Vehicle_C_Hit");
static_assert(sizeof(BP_RB_Vehicle_C_Hit) == 0x000670, "Wrong size on BP_RB_Vehicle_C_Hit");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, HitComponent) == 0x000000, "Member 'BP_RB_Vehicle_C_Hit::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, OtherActor) == 0x000008, "Member 'BP_RB_Vehicle_C_Hit::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, OtherComp) == 0x000010, "Member 'BP_RB_Vehicle_C_Hit::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, NormalImpulse) == 0x000018, "Member 'BP_RB_Vehicle_C_Hit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Param_Hit) == 0x000030, "Member 'BP_RB_Vehicle_C_Hit::Param_Hit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable) == 0x000118, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_bBlockingHit) == 0x000120, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_bInitialOverlap) == 0x000121, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Location) == 0x000130, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_ImpactPoint) == 0x000148, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Normal) == 0x000160, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_ImpactNormal) == 0x000178, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_PhysMat) == 0x000190, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitActor) == 0x000198, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitComponent) == 0x0001A0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitBoneName) == 0x0001A8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_BoneName) == 0x0001B0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitItem) == 0x0001B8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_ElementIndex) == 0x0001BC, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_FaceIndex) == 0x0001C0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_TraceStart) == 0x0001C8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_TraceEnd) == 0x0001E0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_1) == 0x0001F8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_2) == 0x000200, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_3) == 0x000208, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_4) == 0x000210, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_5) == 0x000218, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_6) == 0x000220, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_7) == 0x000228, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_8) == 0x000230, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_9) == 0x000238, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_10) == 0x000240, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_11) == 0x000248, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_12) == 0x000250, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_13) == 0x000258, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_14) == 0x000260, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_15) == 0x000268, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_16) == 0x000270, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_17) == 0x000278, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_17' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_18) == 0x000280, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_18' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_19) == 0x000288, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_19' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_20) == 0x000290, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_20' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_21) == 0x000298, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_21' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_22) == 0x0002A0, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_22' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_23) == 0x0002A8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_23' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_24) == 0x0002B0, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_24' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_25) == 0x0002B8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_25' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_26) == 0x0002C0, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_26' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_27) == 0x0002C8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_27' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_28) == 0x0002D0, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_28' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_29) == 0x0002D8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_29' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_30) == 0x0002E0, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_30' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_31) == 0x0002E8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_31' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_32) == 0x0002F0, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_32' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_33) == 0x0002F8, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_33' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_34) == 0x000300, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_34' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_35) == 0x000308, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_35' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_36) == 0x000310, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_36' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_37) == 0x000318, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_37' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_38) == 0x000320, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_38' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_39) == 0x000328, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_39' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_40) == 0x000330, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_40' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_41) == 0x000338, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_41' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_42) == 0x000340, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_42' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_43) == 0x000348, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_43' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_name_Variable_44) == 0x000350, "Member 'BP_RB_Vehicle_C_Hit::Temp_name_Variable_44' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_bool_Variable) == 0x000358, "Member 'BP_RB_Vehicle_C_Hit::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_bool_Variable_1) == 0x000359, "Member 'BP_RB_Vehicle_C_Hit::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_byte_Variable) == 0x00035A, "Member 'BP_RB_Vehicle_C_Hit::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_bool_Variable_2) == 0x00035B, "Member 'BP_RB_Vehicle_C_Hit::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_GetDataTableRowFromName_OutRow) == 0x000360, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000398, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_Select_Default) == 0x00039C, "Member 'BP_RB_Vehicle_C_Hit::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x0003A8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x0003E0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_Conv_NameToString_ReturnValue) == 0x0003E8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_Concat_StrStr_ReturnValue) == 0x0003F8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000408, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000418, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_LoadAsset_Blocking_ReturnValue_1) == 0x000420, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_LoadAsset_Blocking_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_AsParticle_System) == 0x000428, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_AsParticle_System' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_bSuccess) == 0x000430, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_AsParticle_System_1) == 0x000438, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_AsParticle_System_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_bSuccess_1) == 0x000440, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_IsLocallyControlled_ReturnValue) == 0x000441, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_GetVelocity_ReturnValue) == 0x000448, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_Select_Default_1) == 0x000460, "Member 'BP_RB_Vehicle_C_Hit::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_VSize_ReturnValue) == 0x000478, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000480, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000481, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_GetVelocity_ReturnValue_1) == 0x000488, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_Select_Default_2) == 0x0004A0, "Member 'BP_RB_Vehicle_C_Hit::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_AsPawn) == 0x0004B8, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_bSuccess_2) == 0x0004C0, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_VSize_ReturnValue_1) == 0x0004C8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_AsBP_RB_Vehicle) == 0x0004D0, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_AsBP_RB_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_DynamicCast_bSuccess_3) == 0x0004D8, "Member 'BP_RB_Vehicle_C_Hit::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0004D9, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_object_Variable) == 0x0004E0, "Member 'BP_RB_Vehicle_C_Hit::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, Temp_object_Variable_1) == 0x0004E8, "Member 'BP_RB_Vehicle_C_Hit::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, K2Node_Select_Default_3) == 0x0004F0, "Member 'BP_RB_Vehicle_C_Hit::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_bBlockingHit_1) == 0x0004F8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_bBlockingHit_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_bInitialOverlap_1) == 0x0004F9, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_bInitialOverlap_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Time_1) == 0x0004FC, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Time_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Distance_1) == 0x000500, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Distance_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Location_1) == 0x000508, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Location_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_ImpactPoint_1) == 0x000520, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_ImpactPoint_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_Normal_1) == 0x000538, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_Normal_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_ImpactNormal_1) == 0x000550, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_ImpactNormal_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_PhysMat_1) == 0x000568, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_PhysMat_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitActor_1) == 0x000570, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitActor_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitComponent_1) == 0x000578, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitComponent_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitBoneName_1) == 0x000580, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitBoneName_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_BoneName_1) == 0x000588, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_BoneName_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_HitItem_1) == 0x000590, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_HitItem_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_ElementIndex_1) == 0x000594, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_ElementIndex_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_FaceIndex_1) == 0x000598, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_FaceIndex_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_TraceStart_1) == 0x0005A0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_TraceStart_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_BreakHitResult_TraceEnd_1) == 0x0005B8, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_BreakHitResult_TraceEnd_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_RotatorFromAxisAndAngle_ReturnValue) == 0x0005D0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_RotatorFromAxisAndAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_MakeTransform_ReturnValue) == 0x0005F0, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000650, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_PlayEventAtLocation_ReturnValue) == 0x000658, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Hit, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000660, "Member 'BP_RB_Vehicle_C_Hit::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitCamShake
// 0x0048 (0x0048 - 0x0000)
struct BP_RB_Vehicle_C_HitCamShake final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             CallFunc_GetCollisionObjectType_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       CallFunc_StartCameraShake_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       CallFunc_StartCameraShake_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_RB_Vehicle_C*                       K2Node_DynamicCast_AsBP_RB_Vehicle;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_HitCamShake) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_HitCamShake");
static_assert(sizeof(BP_RB_Vehicle_C_HitCamShake) == 0x000048, "Wrong size on BP_RB_Vehicle_C_HitCamShake");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, OtherActor) == 0x000000, "Member 'BP_RB_Vehicle_C_HitCamShake::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, OtherComp) == 0x000008, "Member 'BP_RB_Vehicle_C_HitCamShake::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_HitCamShake::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, CallFunc_GetCollisionObjectType_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_HitCamShake::CallFunc_GetCollisionObjectType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, CallFunc_StartCameraShake_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_HitCamShake::CallFunc_StartCameraShake_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'BP_RB_Vehicle_C_HitCamShake::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, CallFunc_StartCameraShake_ReturnValue_1) == 0x000030, "Member 'BP_RB_Vehicle_C_HitCamShake::CallFunc_StartCameraShake_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, K2Node_DynamicCast_AsBP_RB_Vehicle) == 0x000038, "Member 'BP_RB_Vehicle_C_HitCamShake::K2Node_DynamicCast_AsBP_RB_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCamShake, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_RB_Vehicle_C_HitCamShake::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitCollisionTransform
// 0x0318 (0x0318 - 0x0000)
struct BP_RB_Vehicle_C_HitCollisionTransform final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0008(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0108(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                K2Node_Select_Default;                             // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_2;  // 0x0228(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0311(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_HitCollisionTransform) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_HitCollisionTransform");
static_assert(sizeof(BP_RB_Vehicle_C_HitCollisionTransform) == 0x000318, "Wrong size on BP_RB_Vehicle_C_HitCollisionTransform");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_IsClosed_Variable) == 0x000001, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_Has_Been_Initd_Variable) == 0x000002, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_Has_Been_Initd_Variable_1) == 0x000003, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_IsLocallyControlled_ReturnValue) == 0x000004, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_Has_Been_Initd_Variable_2) == 0x000005, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_IsClosed_Variable_1) == 0x000006, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, Temp_bool_IsClosed_Variable_2) == 0x000007, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000008, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_GetVelocity_ReturnValue) == 0x0000F0, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000108, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, K2Node_Select_Default) == 0x0001F0, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_GetActorForwardVector_ReturnValue) == 0x000208, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_Dot_VectorVector_ReturnValue) == 0x000220, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_K2_SetRelativeLocation_SweepHitResult_2) == 0x000228, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_K2_SetRelativeLocation_SweepHitResult_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000310, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitCollisionTransform, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000311, "Member 'BP_RB_Vehicle_C_HitCollisionTransform::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitDeform
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_HitDeform final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_HitDeform) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_HitDeform");
static_assert(sizeof(BP_RB_Vehicle_C_HitDeform) == 0x000018, "Wrong size on BP_RB_Vehicle_C_HitDeform");
static_assert(offsetof(BP_RB_Vehicle_C_HitDeform, Location) == 0x000000, "Member 'BP_RB_Vehicle_C_HitDeform::Location' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitWorld
// 0x0050 (0x0050 - 0x0000)
struct BP_RB_Vehicle_C_HitWorld final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_RB_Vehicle_C*                       K2Node_DynamicCast_AsBP_RB_Vehicle;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_HitWorld) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_HitWorld");
static_assert(sizeof(BP_RB_Vehicle_C_HitWorld) == 0x000050, "Wrong size on BP_RB_Vehicle_C_HitWorld");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, OtherActor) == 0x000000, "Member 'BP_RB_Vehicle_C_HitWorld::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, CallFunc_GetVelocity_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_HitWorld::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, K2Node_DynamicCast_AsPawn) == 0x000020, "Member 'BP_RB_Vehicle_C_HitWorld::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_RB_Vehicle_C_HitWorld::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_HitWorld::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, K2Node_DynamicCast_AsBP_RB_Vehicle) == 0x000038, "Member 'BP_RB_Vehicle_C_HitWorld::K2Node_DynamicCast_AsBP_RB_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_RB_Vehicle_C_HitWorld::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_HitWorld, CallFunc_MapRangeClamped_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_HitWorld::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IncreaseDurability
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_IncreaseDurability final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IncreaseDurability) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_IncreaseDurability");
static_assert(sizeof(BP_RB_Vehicle_C_IncreaseDurability) == 0x000018, "Wrong size on BP_RB_Vehicle_C_IncreaseDurability");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseDurability, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_IncreaseDurability::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseDurability, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_RB_Vehicle_C_IncreaseDurability::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseDurability, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_IncreaseDurability::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseDurability, Temp_bool_Variable) == 0x00000C, "Member 'BP_RB_Vehicle_C_IncreaseDurability::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseDurability, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_IncreaseDurability::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseDurability, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'BP_RB_Vehicle_C_IncreaseDurability::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IncreaseFuel
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_IncreaseFuel final
{
public:
	class ABP_Canister_C*                         Canister;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NeedFuelAmount_Value;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IncreaseFuel) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_IncreaseFuel");
static_assert(sizeof(BP_RB_Vehicle_C_IncreaseFuel) == 0x000020, "Wrong size on BP_RB_Vehicle_C_IncreaseFuel");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseFuel, Canister) == 0x000000, "Member 'BP_RB_Vehicle_C_IncreaseFuel::Canister' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseFuel, CallFunc_NeedFuelAmount_Value) == 0x000008, "Member 'BP_RB_Vehicle_C_IncreaseFuel::CallFunc_NeedFuelAmount_Value' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseFuel, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_IncreaseFuel::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseFuel, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_IncreaseFuel::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IncreaseRPM
// 0x0048 (0x0048 - 0x0000)
struct BP_RB_Vehicle_C_IncreaseRPM final
{
public:
	double                                        Input;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewRPM;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetRiseRPM_RPM;                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IncreaseRPM) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_IncreaseRPM");
static_assert(sizeof(BP_RB_Vehicle_C_IncreaseRPM) == 0x000048, "Wrong size on BP_RB_Vehicle_C_IncreaseRPM");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, Input) == 0x000000, "Member 'BP_RB_Vehicle_C_IncreaseRPM::Input' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, NewRPM) == 0x000008, "Member 'BP_RB_Vehicle_C_IncreaseRPM::NewRPM' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_GetRiseRPM_RPM) == 0x000018, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_GetRiseRPM_RPM' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IncreaseRPM, CallFunc_FClamp_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_IncreaseRPM::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InitLight
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_InitLight final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InitLight) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InitLight");
static_assert(sizeof(BP_RB_Vehicle_C_InitLight) == 0x000010, "Wrong size on BP_RB_Vehicle_C_InitLight");
static_assert(offsetof(BP_RB_Vehicle_C_InitLight, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InitLight::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_InitLight, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000008, "Member 'BP_RB_Vehicle_C_InitLight::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InitValues
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InitValues final
{
public:
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ALevelStreamer_C*                       CallFunc_GetStreamer_Streamer;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_DefaultFOV_ImplicitCast;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InitValues) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InitValues");
static_assert(sizeof(BP_RB_Vehicle_C_InitValues) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InitValues");
static_assert(offsetof(BP_RB_Vehicle_C_InitValues, CallFunc_GetAnimInstance_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InitValues::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_InitValues, CallFunc_GetStreamer_Streamer) == 0x000008, "Member 'BP_RB_Vehicle_C_InitValues::CallFunc_GetStreamer_Streamer' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_InitValues, K2Node_VariableSet_DefaultFOV_ImplicitCast) == 0x000010, "Member 'BP_RB_Vehicle_C_InitValues::K2Node_VariableSet_DefaultFOV_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InitWheels
// 0x0038 (0x0038 - 0x0000)
struct BP_RB_Vehicle_C_InitWheels final
{
public:
	double                                        NewLocalVar_0;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USphereComponent*>               K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    K2Node_MakeArray_Array_1;                          // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UPhysicsConstraintComponent*>    K2Node_MakeArray_Array_2;                          // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_RB_Vehicle_C_InitWheels) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InitWheels");
static_assert(sizeof(BP_RB_Vehicle_C_InitWheels) == 0x000038, "Wrong size on BP_RB_Vehicle_C_InitWheels");
static_assert(offsetof(BP_RB_Vehicle_C_InitWheels, NewLocalVar_0) == 0x000000, "Member 'BP_RB_Vehicle_C_InitWheels::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_InitWheels, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_RB_Vehicle_C_InitWheels::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_InitWheels, K2Node_MakeArray_Array_1) == 0x000018, "Member 'BP_RB_Vehicle_C_InitWheels::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_InitWheels, K2Node_MakeArray_Array_2) == 0x000028, "Member 'BP_RB_Vehicle_C_InitWheels::K2Node_MakeArray_Array_2' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_Handbrake_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_Handbrake_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_LeftShift_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_OpenInventory_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_TurnEngine_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_TurnLights_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Interact_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_Brake_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2");
static_assert(sizeof(BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2");
static_assert(offsetof(BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0");
static_assert(sizeof(BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0");
static_assert(offsetof(BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_3
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3");
static_assert(sizeof(BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3) == 0x000004, "Wrong size on BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3");
static_assert(offsetof(BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3::AxisValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5");
static_assert(sizeof(BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5) == 0x000004, "Wrong size on BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5");
static_assert(offsetof(BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5::AxisValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2");
static_assert(sizeof(BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2");
static_assert(offsetof(BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsEmpty
// 0x0005 (0x0005 - 0x0000)
struct BP_RB_Vehicle_C_IsEmpty final
{
public:
	bool                                          Param_IsEmpty;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IsEmpty) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_IsEmpty");
static_assert(sizeof(BP_RB_Vehicle_C_IsEmpty) == 0x000005, "Wrong size on BP_RB_Vehicle_C_IsEmpty");
static_assert(offsetof(BP_RB_Vehicle_C_IsEmpty, Param_IsEmpty) == 0x000000, "Member 'BP_RB_Vehicle_C_IsEmpty::Param_IsEmpty' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsEmpty, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_RB_Vehicle_C_IsEmpty::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsEmpty, CallFunc_BooleanOR_ReturnValue_1) == 0x000002, "Member 'BP_RB_Vehicle_C_IsEmpty::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsEmpty, CallFunc_BooleanOR_ReturnValue_2) == 0x000003, "Member 'BP_RB_Vehicle_C_IsEmpty::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsEmpty, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'BP_RB_Vehicle_C_IsEmpty::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsIdleRPM
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_IsIdleRPM final
{
public:
	bool                                          IdleReached;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IsIdleRPM) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_IsIdleRPM");
static_assert(sizeof(BP_RB_Vehicle_C_IsIdleRPM) == 0x000020, "Wrong size on BP_RB_Vehicle_C_IsIdleRPM");
static_assert(offsetof(BP_RB_Vehicle_C_IsIdleRPM, IdleReached) == 0x000000, "Member 'BP_RB_Vehicle_C_IsIdleRPM::IdleReached' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsIdleRPM, Temp_bool_Variable) == 0x000001, "Member 'BP_RB_Vehicle_C_IsIdleRPM::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsIdleRPM, Temp_real_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_IsIdleRPM::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsIdleRPM, K2Node_Select_Default) == 0x000010, "Member 'BP_RB_Vehicle_C_IsIdleRPM::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_IsIdleRPM, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_IsIdleRPM::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsLocked?
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_IsLocked_ final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IsLocked_) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_IsLocked_");
static_assert(sizeof(BP_RB_Vehicle_C_IsLocked_) == 0x000001, "Wrong size on BP_RB_Vehicle_C_IsLocked_");
static_assert(offsetof(BP_RB_Vehicle_C_IsLocked_, Result) == 0x000000, "Member 'BP_RB_Vehicle_C_IsLocked_::Result' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsVehicle
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_IsVehicle final
{
public:
	bool                                          Param_IsVehicle;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_IsVehicle) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_IsVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_IsVehicle) == 0x000001, "Wrong size on BP_RB_Vehicle_C_IsVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_IsVehicle, Param_IsVehicle) == 0x000000, "Member 'BP_RB_Vehicle_C_IsVehicle::Param_IsVehicle' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MagneticForce
// 0x0068 (0x0068 - 0x0000)
struct BP_RB_Vehicle_C_MagneticForce final
{
public:
	class USphereComponent*                       Wheel;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MagneticForce) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_MagneticForce");
static_assert(sizeof(BP_RB_Vehicle_C_MagneticForce) == 0x000068, "Wrong size on BP_RB_Vehicle_C_MagneticForce");
static_assert(offsetof(BP_RB_Vehicle_C_MagneticForce, Wheel) == 0x000000, "Member 'BP_RB_Vehicle_C_MagneticForce::Wheel' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_MagneticForce, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_MagneticForce::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_MagneticForce, CallFunc_GetUpVector_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_MagneticForce::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_MagneticForce, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_MagneticForce::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_MagneticForce, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000050, "Member 'BP_RB_Vehicle_C_MagneticForce::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallDecreaseDurability
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_MultiCallDecreaseDurability final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MultiCallDecreaseDurability) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_MultiCallDecreaseDurability");
static_assert(sizeof(BP_RB_Vehicle_C_MultiCallDecreaseDurability) == 0x000008, "Wrong size on BP_RB_Vehicle_C_MultiCallDecreaseDurability");
static_assert(offsetof(BP_RB_Vehicle_C_MultiCallDecreaseDurability, Damage) == 0x000000, "Member 'BP_RB_Vehicle_C_MultiCallDecreaseDurability::Damage' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MulticallEnterVehicleAsDriver
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver");
static_assert(sizeof(BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver) == 0x000008, "Wrong size on BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver");
static_assert(offsetof(BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MulticallEnterVehicleAsPassenger
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger");
static_assert(sizeof(BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger) == 0x000010, "Wrong size on BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger");
static_assert(offsetof(BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger, SitIndex) == 0x000008, "Member 'BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger::SitIndex' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallExitVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_MultiCallExitVehicle final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MultiCallExitVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_MultiCallExitVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_MultiCallExitVehicle) == 0x000008, "Wrong size on BP_RB_Vehicle_C_MultiCallExitVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_MultiCallExitVehicle, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_MultiCallExitVehicle::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallSerWheelBroken
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_MultiCallSerWheelBroken final
{
public:
	bool                                          NewBroken;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MultiCallSerWheelBroken) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_MultiCallSerWheelBroken");
static_assert(sizeof(BP_RB_Vehicle_C_MultiCallSerWheelBroken) == 0x000008, "Wrong size on BP_RB_Vehicle_C_MultiCallSerWheelBroken");
static_assert(offsetof(BP_RB_Vehicle_C_MultiCallSerWheelBroken, NewBroken) == 0x000000, "Member 'BP_RB_Vehicle_C_MultiCallSerWheelBroken::NewBroken' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_MultiCallSerWheelBroken, WheelIndex) == 0x000004, "Member 'BP_RB_Vehicle_C_MultiCallSerWheelBroken::WheelIndex' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiClientDied
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_MultiClientDied final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_MultiClientDied) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_MultiClientDied");
static_assert(sizeof(BP_RB_Vehicle_C_MultiClientDied) == 0x000008, "Wrong size on BP_RB_Vehicle_C_MultiClientDied");
static_assert(offsetof(BP_RB_Vehicle_C_MultiClientDied, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_MultiClientDied::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Noise
// 0x0028 (0x0028 - 0x0000)
struct BP_RB_Vehicle_C_Noise final
{
public:
	bool                                          CallFunc_IsEmpty_IsEmpty;                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Noise) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_Noise");
static_assert(sizeof(BP_RB_Vehicle_C_Noise) == 0x000028, "Wrong size on BP_RB_Vehicle_C_Noise");
static_assert(offsetof(BP_RB_Vehicle_C_Noise, CallFunc_IsEmpty_IsEmpty) == 0x000000, "Member 'BP_RB_Vehicle_C_Noise::CallFunc_IsEmpty_IsEmpty' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Noise, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_Noise::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Noise, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_Noise::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.NotifyQuestEvent
// 0x0030 (0x0030 - 0x0000)
struct BP_RB_Vehicle_C_NotifyQuestEvent final
{
public:
	class FString                                 QuestEvent;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_NotifyQuestEvent) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_NotifyQuestEvent");
static_assert(sizeof(BP_RB_Vehicle_C_NotifyQuestEvent) == 0x000030, "Wrong size on BP_RB_Vehicle_C_NotifyQuestEvent");
static_assert(offsetof(BP_RB_Vehicle_C_NotifyQuestEvent, QuestEvent) == 0x000000, "Member 'BP_RB_Vehicle_C_NotifyQuestEvent::QuestEvent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_NotifyQuestEvent, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_NotifyQuestEvent::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_NotifyQuestEvent, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000018, "Member 'BP_RB_Vehicle_C_NotifyQuestEvent::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_NotifyQuestEvent, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_RB_Vehicle_C_NotifyQuestEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnBeginInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnBeginInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnBeginInteract");
static_assert(sizeof(BP_RB_Vehicle_C_OnBeginInteract) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnBeginInteract");
static_assert(offsetof(BP_RB_Vehicle_C_OnBeginInteract, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnBeginInteract::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnFocused
// 0x0038 (0x0038 - 0x0000)
struct BP_RB_Vehicle_C_OnFocused final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HighlightActor;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        HighlightActorComponent;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_InteractType                                InteractType;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LateTime;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckPlayerSit_CanEnterVehicle;           // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckPlayerSit_SitIndex;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnFocused) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnFocused");
static_assert(sizeof(BP_RB_Vehicle_C_OnFocused) == 0x000038, "Wrong size on BP_RB_Vehicle_C_OnFocused");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnFocused::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, HighlightActor) == 0x000008, "Member 'BP_RB_Vehicle_C_OnFocused::HighlightActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, HighlightActorComponent) == 0x000010, "Member 'BP_RB_Vehicle_C_OnFocused::HighlightActorComponent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, InteractType) == 0x000018, "Member 'BP_RB_Vehicle_C_OnFocused::InteractType' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, LateTime) == 0x000020, "Member 'BP_RB_Vehicle_C_OnFocused::LateTime' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, K2Node_DynamicCast_AsSurvival_Player) == 0x000028, "Member 'BP_RB_Vehicle_C_OnFocused::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_RB_Vehicle_C_OnFocused::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, CallFunc_CheckPlayerSit_CanEnterVehicle) == 0x000031, "Member 'BP_RB_Vehicle_C_OnFocused::CallFunc_CheckPlayerSit_CanEnterVehicle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnFocused, CallFunc_CheckPlayerSit_SitIndex) == 0x000034, "Member 'BP_RB_Vehicle_C_OnFocused::CallFunc_CheckPlayerSit_SitIndex' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnInteract) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnInteract");
static_assert(sizeof(BP_RB_Vehicle_C_OnInteract) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnInteract");
static_assert(offsetof(BP_RB_Vehicle_C_OnInteract, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnInteract::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteract2
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnInteract2 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnInteract2) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnInteract2");
static_assert(sizeof(BP_RB_Vehicle_C_OnInteract2) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnInteract2");
static_assert(offsetof(BP_RB_Vehicle_C_OnInteract2, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnInteract2::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteract3
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnInteract3 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnInteract3) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnInteract3");
static_assert(sizeof(BP_RB_Vehicle_C_OnInteract3) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnInteract3");
static_assert(offsetof(BP_RB_Vehicle_C_OnInteract3, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnInteract3::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteractVehicle
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_OnInteractVehicle final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnInteractVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnInteractVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_OnInteractVehicle) == 0x000010, "Wrong size on BP_RB_Vehicle_C_OnInteractVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_OnInteractVehicle, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnInteractVehicle::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnInteractVehicle, SitIndex) == 0x000008, "Member 'BP_RB_Vehicle_C_OnInteractVehicle::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnInteractVehicle, SkipAnimation) == 0x00000C, "Member 'BP_RB_Vehicle_C_OnInteractVehicle::SkipAnimation' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_OnLevelLoaded final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnLevelLoaded) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnLevelLoaded");
static_assert(sizeof(BP_RB_Vehicle_C_OnLevelLoaded) == 0x000010, "Wrong size on BP_RB_Vehicle_C_OnLevelLoaded");
static_assert(offsetof(BP_RB_Vehicle_C_OnLevelLoaded, LevelName) == 0x000000, "Member 'BP_RB_Vehicle_C_OnLevelLoaded::LevelName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnLevelLoaded, Player) == 0x000008, "Member 'BP_RB_Vehicle_C_OnLevelLoaded::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLevelUnloaded
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_OnLevelUnloaded final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnLevelUnloaded) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnLevelUnloaded");
static_assert(sizeof(BP_RB_Vehicle_C_OnLevelUnloaded) == 0x000010, "Wrong size on BP_RB_Vehicle_C_OnLevelUnloaded");
static_assert(offsetof(BP_RB_Vehicle_C_OnLevelUnloaded, LevelName) == 0x000000, "Member 'BP_RB_Vehicle_C_OnLevelUnloaded::LevelName' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnLevelUnloaded, Player) == 0x000008, "Member 'BP_RB_Vehicle_C_OnLevelUnloaded::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLocalInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnLocalInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnLocalInteract) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnLocalInteract");
static_assert(sizeof(BP_RB_Vehicle_C_OnLocalInteract) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnLocalInteract");
static_assert(offsetof(BP_RB_Vehicle_C_OnLocalInteract, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnLocalInteract::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLostFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnLostFocus final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnLostFocus) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnLostFocus");
static_assert(sizeof(BP_RB_Vehicle_C_OnLostFocus) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnLostFocus");
static_assert(offsetof(BP_RB_Vehicle_C_OnLostFocus, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnLostFocus::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnRep_EngineStarted
// 0x0028 (0x0028 - 0x0000)
struct BP_RB_Vehicle_C_OnRep_EngineStarted final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalController_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnRep_EngineStarted) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnRep_EngineStarted");
static_assert(sizeof(BP_RB_Vehicle_C_OnRep_EngineStarted) == 0x000028, "Wrong size on BP_RB_Vehicle_C_OnRep_EngineStarted");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, Temp_int_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, K2Node_DynamicCast_AsPlayer_Controller) == 0x000018, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_EngineStarted, CallFunc_IsLocalController_ReturnValue) == 0x000021, "Member 'BP_RB_Vehicle_C_OnRep_EngineStarted::CallFunc_IsLocalController_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnRep_IsDriving
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_OnRep_IsDriving final
{
public:
	class UNavigationSystemV1*                    CallFunc_GetNavigationSystem_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationSystemV1*                    CallFunc_GetNavigationSystem_ReturnValue_1;        // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnRep_IsDriving) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnRep_IsDriving");
static_assert(sizeof(BP_RB_Vehicle_C_OnRep_IsDriving) == 0x000020, "Wrong size on BP_RB_Vehicle_C_OnRep_IsDriving");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_IsDriving, CallFunc_GetNavigationSystem_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_OnRep_IsDriving::CallFunc_GetNavigationSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_IsDriving, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_OnRep_IsDriving::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_IsDriving, CallFunc_GetNavigationSystem_ReturnValue_1) == 0x000010, "Member 'BP_RB_Vehicle_C_OnRep_IsDriving::CallFunc_GetNavigationSystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_IsDriving, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_RB_Vehicle_C_OnRep_IsDriving::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_IsDriving, CallFunc_IsLocallyControlled_ReturnValue) == 0x000019, "Member 'BP_RB_Vehicle_C_OnRep_IsDriving::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnRep_VehicleState
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_OnRep_VehicleState final
{
public:
	double                                        K2Node_VariableSet_RPM_ImplicitCast;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                K2Node_VariableSet_WheelPitches_ImplicitCast;      // 0x0008(0x0010)(ReferenceParm)
	double                                        K2Node_VariableSet_SteeringAngle_ImplicitCast;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnRep_VehicleState) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnRep_VehicleState");
static_assert(sizeof(BP_RB_Vehicle_C_OnRep_VehicleState) == 0x000020, "Wrong size on BP_RB_Vehicle_C_OnRep_VehicleState");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_VehicleState, K2Node_VariableSet_RPM_ImplicitCast) == 0x000000, "Member 'BP_RB_Vehicle_C_OnRep_VehicleState::K2Node_VariableSet_RPM_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_VehicleState, K2Node_VariableSet_WheelPitches_ImplicitCast) == 0x000008, "Member 'BP_RB_Vehicle_C_OnRep_VehicleState::K2Node_VariableSet_WheelPitches_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OnRep_VehicleState, K2Node_VariableSet_SteeringAngle_ImplicitCast) == 0x000018, "Member 'BP_RB_Vehicle_C_OnRep_VehicleState::K2Node_VariableSet_SteeringAngle_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnSeen
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnSeen final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnSeen) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnSeen");
static_assert(sizeof(BP_RB_Vehicle_C_OnSeen) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnSeen");
static_assert(offsetof(BP_RB_Vehicle_C_OnSeen, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnSeen::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnStopInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_OnStopInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OnStopInteract) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OnStopInteract");
static_assert(sizeof(BP_RB_Vehicle_C_OnStopInteract) == 0x000008, "Wrong size on BP_RB_Vehicle_C_OnStopInteract");
static_assert(offsetof(BP_RB_Vehicle_C_OnStopInteract, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_OnStopInteract::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OpenCarUpgradeMenu
// 0x0058 (0x0058 - 0x0000)
struct BP_RB_Vehicle_C_OpenCarUpgradeMenu final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_1;                // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_TabsWindow_C*                        CallFunc_GetTabsWidget_Widget;                     // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUpgradeScreen_Success;                 // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OpenCarUpgradeMenu) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OpenCarUpgradeMenu");
static_assert(sizeof(BP_RB_Vehicle_C_OpenCarUpgradeMenu) == 0x000058, "Wrong size on BP_RB_Vehicle_C_OpenCarUpgradeMenu");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000018, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, K2Node_DynamicCast_AsBPI_Surv_PC_1) == 0x000030, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::K2Node_DynamicCast_AsBPI_Surv_PC_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, CallFunc_GetTabsWidget_Widget) == 0x000048, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::CallFunc_GetTabsWidget_Widget' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OpenCarUpgradeMenu, CallFunc_SetUpgradeScreen_Success) == 0x000050, "Member 'BP_RB_Vehicle_C_OpenCarUpgradeMenu::CallFunc_SetUpgradeScreen_Success' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OverlapOtherActor
// 0x0148 (0x0148 - 0x0000)
struct BP_RB_Vehicle_C_OverlapOtherActor final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             SweepResult;                                       // 0x0008(0x00E8)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          NeedDamage;                                        // 0x00F0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Destruction_NeedDamage;                   // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0112(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0113(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UZombieCarHit_C*                        CallFunc_Create_ReturnValue;                       // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyPointDamage_ReturnValue;             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OverlapOtherActor) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OverlapOtherActor");
static_assert(sizeof(BP_RB_Vehicle_C_OverlapOtherActor) == 0x000148, "Wrong size on BP_RB_Vehicle_C_OverlapOtherActor");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, Other) == 0x000000, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::Other' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, SweepResult) == 0x000008, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::SweepResult' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, NeedDamage) == 0x0000F0, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::NeedDamage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_Destruction_NeedDamage) == 0x0000F1, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_Destruction_NeedDamage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, K2Node_DynamicCast_AsCharacter) == 0x0000F8, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, K2Node_DynamicCast_bSuccess) == 0x000100, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, K2Node_DynamicCast_AsSurvival_Player) == 0x000108, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000111, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_IsValid_ReturnValue) == 0x000112, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_IsLocallyControlled_ReturnValue) == 0x000113, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000118, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_Create_ReturnValue) == 0x000130, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_GetController_ReturnValue) == 0x000138, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapOtherActor, CallFunc_ApplyPointDamage_ReturnValue) == 0x000140, "Member 'BP_RB_Vehicle_C_OverlapOtherActor::CallFunc_ApplyPointDamage_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OverlapRadialForce
// 0x0050 (0x0050 - 0x0000)
struct BP_RB_Vehicle_C_OverlapRadialForce final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_OverlapRadialForce) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_OverlapRadialForce");
static_assert(sizeof(BP_RB_Vehicle_C_OverlapRadialForce) == 0x000050, "Wrong size on BP_RB_Vehicle_C_OverlapRadialForce");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, OtherActor) == 0x000000, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, Temp_bool_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, CallFunc_GetVelocity_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, CallFunc_IsLocallyControlled_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, CallFunc_VSize_ReturnValue_1) == 0x000038, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, K2Node_Select_Default) == 0x000040, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_OverlapRadialForce, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_OverlapRadialForce::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PhysicsTick
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_PhysicsTick final
{
public:
	float                                         SubstepDeltaTime;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_PhysicsTick) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_PhysicsTick");
static_assert(sizeof(BP_RB_Vehicle_C_PhysicsTick) == 0x000004, "Wrong size on BP_RB_Vehicle_C_PhysicsTick");
static_assert(offsetof(BP_RB_Vehicle_C_PhysicsTick, SubstepDeltaTime) == 0x000000, "Member 'BP_RB_Vehicle_C_PhysicsTick::SubstepDeltaTime' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioByTag
// 0x00D0 (0x00D0 - 0x0000)
struct BP_RB_Vehicle_C_PlayAudioByTag final
{
public:
	TArray<class FName>                           Param_Tags;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Event;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ForceDelta;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RB_Vehicle_C_PlayAudioByTag) == 0x000010, "Wrong alignment on BP_RB_Vehicle_C_PlayAudioByTag");
static_assert(sizeof(BP_RB_Vehicle_C_PlayAudioByTag) == 0x0000D0, "Wrong size on BP_RB_Vehicle_C_PlayAudioByTag");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, Param_Tags) == 0x000000, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::Param_Tags' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, Location) == 0x000010, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::Location' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, Event) == 0x000028, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::Event' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, ForceDelta) == 0x000030, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::ForceDelta' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, Temp_bool_True_if_break_was_hit_Variable) == 0x00003C, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, Temp_int_Array_Index_Variable) == 0x000040, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_Array_Get_Item) == 0x000044, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, K2Node_SwitchName_CmpSuccess) == 0x00004C, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_Not_PreBool_ReturnValue) == 0x00004D, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_BooleanAND_ReturnValue) == 0x00005C, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_MakeTransform_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioByTag, CallFunc_PlayEventAtLocation_ReturnValue) == 0x0000C0, "Member 'BP_RB_Vehicle_C_PlayAudioByTag::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioEnterVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_PlayAudioEnterVehicle final
{
public:
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_PlayAudioEnterVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_PlayAudioEnterVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_PlayAudioEnterVehicle) == 0x000008, "Wrong size on BP_RB_Vehicle_C_PlayAudioEnterVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioEnterVehicle, CallFunc_PlayEventAttached_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_PlayAudioEnterVehicle::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioExitVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_PlayAudioExitVehicle final
{
public:
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_PlayAudioExitVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_PlayAudioExitVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_PlayAudioExitVehicle) == 0x000008, "Wrong size on BP_RB_Vehicle_C_PlayAudioExitVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioExitVehicle, CallFunc_PlayEventAttached_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_PlayAudioExitVehicle::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioHandbrake
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_PlayAudioHandbrake final
{
public:
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_PlayAudioHandbrake) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_PlayAudioHandbrake");
static_assert(sizeof(BP_RB_Vehicle_C_PlayAudioHandbrake) == 0x000008, "Wrong size on BP_RB_Vehicle_C_PlayAudioHandbrake");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioHandbrake, CallFunc_PlayEventAttached_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_PlayAudioHandbrake::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioStopEngine
// 0x0028 (0x0028 - 0x0000)
struct BP_RB_Vehicle_C_PlayAudioStopEngine final
{
public:
	bool                                          IsCrash;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CallFunc_PlayEventWithOcclusion_FMODAudioComponent; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_PlayAudioStopEngine) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_PlayAudioStopEngine");
static_assert(sizeof(BP_RB_Vehicle_C_PlayAudioStopEngine) == 0x000028, "Wrong size on BP_RB_Vehicle_C_PlayAudioStopEngine");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioStopEngine, IsCrash) == 0x000000, "Member 'BP_RB_Vehicle_C_PlayAudioStopEngine::IsCrash' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioStopEngine, Temp_bool_Variable) == 0x000001, "Member 'BP_RB_Vehicle_C_PlayAudioStopEngine::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioStopEngine, Temp_object_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_PlayAudioStopEngine::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioStopEngine, Temp_object_Variable_1) == 0x000010, "Member 'BP_RB_Vehicle_C_PlayAudioStopEngine::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioStopEngine, K2Node_Select_Default) == 0x000018, "Member 'BP_RB_Vehicle_C_PlayAudioStopEngine::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_PlayAudioStopEngine, CallFunc_PlayEventWithOcclusion_FMODAudioComponent) == 0x000020, "Member 'BP_RB_Vehicle_C_PlayAudioStopEngine::CallFunc_PlayEventWithOcclusion_FMODAudioComponent' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayerHealthEnded
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_PlayerHealthEnded final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_PlayerHealthEnded) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_PlayerHealthEnded");
static_assert(sizeof(BP_RB_Vehicle_C_PlayerHealthEnded) == 0x000008, "Wrong size on BP_RB_Vehicle_C_PlayerHealthEnded");
static_assert(offsetof(BP_RB_Vehicle_C_PlayerHealthEnded, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_PlayerHealthEnded::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ReceiveAnyDamage
// 0x0020 (0x0020 - 0x0000)
struct BP_RB_Vehicle_C_ReceiveAnyDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ReceiveAnyDamage) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ReceiveAnyDamage");
static_assert(sizeof(BP_RB_Vehicle_C_ReceiveAnyDamage) == 0x000020, "Wrong size on BP_RB_Vehicle_C_ReceiveAnyDamage");
static_assert(offsetof(BP_RB_Vehicle_C_ReceiveAnyDamage, Damage) == 0x000000, "Member 'BP_RB_Vehicle_C_ReceiveAnyDamage::Damage' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ReceiveAnyDamage, DamageType) == 0x000008, "Member 'BP_RB_Vehicle_C_ReceiveAnyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ReceiveAnyDamage, InstigatedBy) == 0x000010, "Member 'BP_RB_Vehicle_C_ReceiveAnyDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ReceiveAnyDamage, DamageCauser) == 0x000018, "Member 'BP_RB_Vehicle_C_ReceiveAnyDamage::DamageCauser' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_RB_Vehicle_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_ReceiveTick");
static_assert(sizeof(BP_RB_Vehicle_C_ReceiveTick) == 0x000004, "Wrong size on BP_RB_Vehicle_C_ReceiveTick");
static_assert(offsetof(BP_RB_Vehicle_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_RB_Vehicle_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Reverse
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_Reverse final
{
public:
	bool                                          IsReverse;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Reverse) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_Reverse");
static_assert(sizeof(BP_RB_Vehicle_C_Reverse) == 0x000001, "Wrong size on BP_RB_Vehicle_C_Reverse");
static_assert(offsetof(BP_RB_Vehicle_C_Reverse, IsReverse) == 0x000000, "Member 'BP_RB_Vehicle_C_Reverse::IsReverse' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallDecreaseDurability
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_ServerCallDecreaseDurability final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerCallDecreaseDurability) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ServerCallDecreaseDurability");
static_assert(sizeof(BP_RB_Vehicle_C_ServerCallDecreaseDurability) == 0x000008, "Wrong size on BP_RB_Vehicle_C_ServerCallDecreaseDurability");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallDecreaseDurability, Damage) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerCallDecreaseDurability::Damage' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallExitVehicle
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_ServerCallExitVehicle final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerCallExitVehicle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ServerCallExitVehicle");
static_assert(sizeof(BP_RB_Vehicle_C_ServerCallExitVehicle) == 0x000008, "Wrong size on BP_RB_Vehicle_C_ServerCallExitVehicle");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallExitVehicle, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerCallExitVehicle::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallSendVehicleState
// 0x0038 (0x0038 - 0x0000)
struct BP_RB_Vehicle_C_ServerCallSendVehicleState final
{
public:
	struct FS_VehicleState                        Param_VehicleState;                                // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerCallSendVehicleState) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ServerCallSendVehicleState");
static_assert(sizeof(BP_RB_Vehicle_C_ServerCallSendVehicleState) == 0x000038, "Wrong size on BP_RB_Vehicle_C_ServerCallSendVehicleState");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallSendVehicleState, Param_VehicleState) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerCallSendVehicleState::Param_VehicleState' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallSetVehicleSit
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_ServerCallSetVehicleSit final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Item_Is_Busy;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Item_Sitter;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerCallSetVehicleSit) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ServerCallSetVehicleSit");
static_assert(sizeof(BP_RB_Vehicle_C_ServerCallSetVehicleSit) == 0x000010, "Wrong size on BP_RB_Vehicle_C_ServerCallSetVehicleSit");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallSetVehicleSit, Param_Index) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerCallSetVehicleSit::Param_Index' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallSetVehicleSit, Item_Is_Busy) == 0x000004, "Member 'BP_RB_Vehicle_C_ServerCallSetVehicleSit::Item_Is_Busy' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallSetVehicleSit, Item_Sitter) == 0x000008, "Member 'BP_RB_Vehicle_C_ServerCallSetVehicleSit::Item_Sitter' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallSetWheelBroken
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_ServerCallSetWheelBroken final
{
public:
	bool                                          NewBroken;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerCallSetWheelBroken) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_ServerCallSetWheelBroken");
static_assert(sizeof(BP_RB_Vehicle_C_ServerCallSetWheelBroken) == 0x000008, "Wrong size on BP_RB_Vehicle_C_ServerCallSetWheelBroken");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallSetWheelBroken, NewBroken) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerCallSetWheelBroken::NewBroken' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerCallSetWheelBroken, WheelIndex) == 0x000004, "Member 'BP_RB_Vehicle_C_ServerCallSetWheelBroken::WheelIndex' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerSideEnterVehicleAsDriver
// 0x0030 (0x0030 - 0x0000)
struct BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      K2Node_DynamicCast_AsPlayer_Controller;            // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver");
static_assert(sizeof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver) == 0x000030, "Wrong size on BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver, K2Node_DynamicCast_AsSurvival_Player) == 0x000008, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver, CallFunc_GetController_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver, K2Node_DynamicCast_AsPlayer_Controller) == 0x000020, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver::K2Node_DynamicCast_AsPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerSideEnterVehicleAsPassenger
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger");
static_assert(sizeof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger) == 0x000018, "Wrong size on BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger, K2Node_DynamicCast_AsSurvival_Player) == 0x000008, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Set3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_Set3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Set3DWidgetVisibility) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_Set3DWidgetVisibility");
static_assert(sizeof(BP_RB_Vehicle_C_Set3DWidgetVisibility) == 0x000001, "Wrong size on BP_RB_Vehicle_C_Set3DWidgetVisibility");
static_assert(offsetof(BP_RB_Vehicle_C_Set3DWidgetVisibility, Visible) == 0x000000, "Member 'BP_RB_Vehicle_C_Set3DWidgetVisibility::Visible' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetBackLightIntencity
// 0x000C (0x000C - 0x0000)
struct BP_RB_Vehicle_C_SetBackLightIntencity final
{
public:
	bool                                          IsBrake;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetBackLightIntencity) == 0x000004, "Wrong alignment on BP_RB_Vehicle_C_SetBackLightIntencity");
static_assert(sizeof(BP_RB_Vehicle_C_SetBackLightIntencity) == 0x00000C, "Wrong size on BP_RB_Vehicle_C_SetBackLightIntencity");
static_assert(offsetof(BP_RB_Vehicle_C_SetBackLightIntencity, IsBrake) == 0x000000, "Member 'BP_RB_Vehicle_C_SetBackLightIntencity::IsBrake' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetBackLightIntencity, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000004, "Member 'BP_RB_Vehicle_C_SetBackLightIntencity::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetBackLightIntencity, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x000008, "Member 'BP_RB_Vehicle_C_SetBackLightIntencity::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetBrakeInput
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_SetBrakeInput final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetBrakeInput) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SetBrakeInput");
static_assert(sizeof(BP_RB_Vehicle_C_SetBrakeInput) == 0x000010, "Wrong size on BP_RB_Vehicle_C_SetBrakeInput");
static_assert(offsetof(BP_RB_Vehicle_C_SetBrakeInput, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_SetBrakeInput::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetBrakeInput, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_SetBrakeInput::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetBrakeInput, CallFunc_Greater_IntInt_ReturnValue) == 0x000009, "Member 'BP_RB_Vehicle_C_SetBrakeInput::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetBrakeInput, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00000A, "Member 'BP_RB_Vehicle_C_SetBrakeInput::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetEnablePhysics
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_SetEnablePhysics final
{
public:
	bool                                          NewEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetEnablePhysics) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_SetEnablePhysics");
static_assert(sizeof(BP_RB_Vehicle_C_SetEnablePhysics) == 0x000001, "Wrong size on BP_RB_Vehicle_C_SetEnablePhysics");
static_assert(offsetof(BP_RB_Vehicle_C_SetEnablePhysics, NewEnabled) == 0x000000, "Member 'BP_RB_Vehicle_C_SetEnablePhysics::NewEnabled' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetEnablePhysicsComponents
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_SetEnablePhysicsComponents final
{
public:
	bool                                          bSimulate;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetEnablePhysicsComponents) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_SetEnablePhysicsComponents");
static_assert(sizeof(BP_RB_Vehicle_C_SetEnablePhysicsComponents) == 0x000001, "Wrong size on BP_RB_Vehicle_C_SetEnablePhysicsComponents");
static_assert(offsetof(BP_RB_Vehicle_C_SetEnablePhysicsComponents, bSimulate) == 0x000000, "Member 'BP_RB_Vehicle_C_SetEnablePhysicsComponents::bSimulate' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetHandbrakeInput
// 0x0048 (0x0048 - 0x0000)
struct BP_RB_Vehicle_C_SetHandbrakeInput final
{
public:
	bool                                          IsHandbrake;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetHandbrakeInput) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SetHandbrakeInput");
static_assert(sizeof(BP_RB_Vehicle_C_SetHandbrakeInput) == 0x000048, "Wrong size on BP_RB_Vehicle_C_SetHandbrakeInput");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, IsHandbrake) == 0x000000, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::IsHandbrake' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_GetVelocity_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_BooleanAND_ReturnValue) == 0x000045, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetHandbrakeInput, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000046, "Member 'BP_RB_Vehicle_C_SetHandbrakeInput::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetSteeringInput
// 0x0068 (0x0068 - 0x0000)
struct BP_RB_Vehicle_C_SetSteeringInput final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SteeringWheel_Angle;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SteeringWheelToZero_Angle;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetSteeringInput) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SetSteeringInput");
static_assert(sizeof(BP_RB_Vehicle_C_SetSteeringInput) == 0x000068, "Wrong size on BP_RB_Vehicle_C_SetSteeringInput");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_SetSteeringInput::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_SteeringWheel_Angle) == 0x000008, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_SteeringWheel_Angle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_RB_Vehicle_C_SetSteeringInput::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_RB_Vehicle_C_SetSteeringInput::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_IsLocallyControlled_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_SteeringWheelToZero_Angle) == 0x000028, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_SteeringWheelToZero_Angle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetSteeringInput, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000060, "Member 'BP_RB_Vehicle_C_SetSteeringInput::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetThrottleInput
// 0x0010 (0x0010 - 0x0000)
struct BP_RB_Vehicle_C_SetThrottleInput final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetThrottleInput) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SetThrottleInput");
static_assert(sizeof(BP_RB_Vehicle_C_SetThrottleInput) == 0x000010, "Wrong size on BP_RB_Vehicle_C_SetThrottleInput");
static_assert(offsetof(BP_RB_Vehicle_C_SetThrottleInput, AxisValue) == 0x000000, "Member 'BP_RB_Vehicle_C_SetThrottleInput::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetThrottleInput, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_SetThrottleInput::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetTick
// 0x0028 (0x0028 - 0x0000)
struct BP_RB_Vehicle_C_SetTick final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetComponentTickInterval_TickInterval_ImplicitCast; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetTick) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SetTick");
static_assert(sizeof(BP_RB_Vehicle_C_SetTick) == 0x000028, "Wrong size on BP_RB_Vehicle_C_SetTick");
static_assert(offsetof(BP_RB_Vehicle_C_SetTick, bEnabled) == 0x000000, "Member 'BP_RB_Vehicle_C_SetTick::bEnabled' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetTick, Temp_bool_Variable) == 0x000001, "Member 'BP_RB_Vehicle_C_SetTick::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetTick, Temp_real_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_SetTick::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetTick, Temp_real_Variable_1) == 0x000010, "Member 'BP_RB_Vehicle_C_SetTick::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetTick, K2Node_Select_Default) == 0x000018, "Member 'BP_RB_Vehicle_C_SetTick::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetTick, CallFunc_SetComponentTickInterval_TickInterval_ImplicitCast) == 0x000020, "Member 'BP_RB_Vehicle_C_SetTick::CallFunc_SetComponentTickInterval_TickInterval_ImplicitCast' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetTutorial3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility");
static_assert(sizeof(BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong size on BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility");
static_assert(offsetof(BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility, Visible) == 0x000000, "Member 'BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility::Visible' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetWheelBroken
// 0x0100 (0x0100 - 0x0000)
struct BP_RB_Vehicle_C_SetWheelBroken final
{
public:
	bool                                          NewBroken;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WheelIndex;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_VehicleAnimator_C>  K2Node_DynamicCast_AsI_Vehicle_Animator;           // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_VehicleAnimator_C>  K2Node_DynamicCast_AsI_Vehicle_Animator_1;         // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_VehicleAnimator_C>  K2Node_DynamicCast_AsI_Vehicle_Animator_2;         // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_VehicleAnimator_C>  K2Node_DynamicCast_AsI_Vehicle_Animator_3;         // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CallFunc_Array_Get_Item;                           // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SetWheelBroken) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SetWheelBroken");
static_assert(sizeof(BP_RB_Vehicle_C_SetWheelBroken) == 0x000100, "Wrong size on BP_RB_Vehicle_C_SetWheelBroken");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, NewBroken) == 0x000000, "Member 'BP_RB_Vehicle_C_SetWheelBroken::NewBroken' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, WheelIndex) == 0x000004, "Member 'BP_RB_Vehicle_C_SetWheelBroken::WheelIndex' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, Temp_bool_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_SetWheelBroken::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, Temp_struct_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_SetWheelBroken::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, Temp_struct_Variable_1) == 0x000028, "Member 'BP_RB_Vehicle_C_SetWheelBroken::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, Temp_bool_Variable_1) == 0x000040, "Member 'BP_RB_Vehicle_C_SetWheelBroken::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, Temp_real_Variable) == 0x000048, "Member 'BP_RB_Vehicle_C_SetWheelBroken::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, Temp_real_Variable_1) == 0x000050, "Member 'BP_RB_Vehicle_C_SetWheelBroken::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_AsI_Vehicle_Animator) == 0x000058, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_AsI_Vehicle_Animator' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_AsI_Vehicle_Animator_1) == 0x000070, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_AsI_Vehicle_Animator_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_Select_Default) == 0x000088, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_AsI_Vehicle_Animator_2) == 0x000090, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_AsI_Vehicle_Animator_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_bSuccess_2) == 0x0000A0, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_AsI_Vehicle_Animator_3) == 0x0000A8, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_AsI_Vehicle_Animator_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_DynamicCast_bSuccess_3) == 0x0000B8, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_SwitchInteger_CmpSuccess) == 0x0000B9, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'BP_RB_Vehicle_C_SetWheelBroken::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000C8, "Member 'BP_RB_Vehicle_C_SetWheelBroken::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0000E0, "Member 'BP_RB_Vehicle_C_SetWheelBroken::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SetWheelBroken, K2Node_Select_Default_1) == 0x0000E8, "Member 'BP_RB_Vehicle_C_SetWheelBroken::K2Node_Select_Default_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ShowWidgets
// 0x00C8 (0x00C8 - 0x0000)
struct BP_RB_Vehicle_C_ShowWidgets final
{
public:
	bool                                          CanEnterVehicle;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_HasCanister_HasCanister;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0030(0x0018)()
	bool                                          CallFunc_IsFullDurability_IsFull;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetStat_Value;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue_1;          // 0x0060(0x0018)()
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0090(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x6];                                       // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0098(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_BoxOverlapActors_OutActors;               // 0x00B0(0x0010)(ReferenceParm)
	bool                                          CallFunc_BoxOverlapActors_ReturnValue;             // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_ShowWidgets) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_ShowWidgets");
static_assert(sizeof(BP_RB_Vehicle_C_ShowWidgets) == 0x0000C8, "Wrong size on BP_RB_Vehicle_C_ShowWidgets");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CanEnterVehicle) == 0x000000, "Member 'BP_RB_Vehicle_C_ShowWidgets::CanEnterVehicle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, Player) == 0x000008, "Member 'BP_RB_Vehicle_C_ShowWidgets::Player' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_RB_Vehicle_C_ShowWidgets::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_HasCanister_HasCanister) == 0x000020, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_HasCanister_HasCanister' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_IsFullDurability_IsFull) == 0x000048, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_IsFullDurability_IsFull' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_GetStat_Value) == 0x000050, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_GetStat_Value' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000058, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Conv_DoubleToText_ReturnValue_1) == 0x000060, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Conv_DoubleToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000078, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, Temp_bool_Variable) == 0x000090, "Member 'BP_RB_Vehicle_C_ShowWidgets::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Array_Contains_ReturnValue) == 0x000091, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, Temp_object_Variable) == 0x000098, "Member 'BP_RB_Vehicle_C_ShowWidgets::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Not_PreBool_ReturnValue) == 0x0000A8, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_BoxOverlapActors_OutActors) == 0x0000B0, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_BoxOverlapActors_OutActors' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_BoxOverlapActors_ReturnValue) == 0x0000C0, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_BoxOverlapActors_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_BooleanAND_ReturnValue) == 0x0000C1, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_Array_Contains_ReturnValue_1) == 0x0000C2, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_ShowWidgets, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C3, "Member 'BP_RB_Vehicle_C_ShowWidgets::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SteeringWheel
// 0x0030 (0x0030 - 0x0000)
struct BP_RB_Vehicle_C_SteeringWheel final
{
public:
	double                                        Input;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SteeringWheel) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SteeringWheel");
static_assert(sizeof(BP_RB_Vehicle_C_SteeringWheel) == 0x000030, "Wrong size on BP_RB_Vehicle_C_SteeringWheel");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheel, Input) == 0x000000, "Member 'BP_RB_Vehicle_C_SteeringWheel::Input' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheel, Angle) == 0x000008, "Member 'BP_RB_Vehicle_C_SteeringWheel::Angle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheel, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_SteeringWheel::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheel, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_SteeringWheel::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheel, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_SteeringWheel::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheel, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_SteeringWheel::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SteeringWheelToZero
// 0x0018 (0x0018 - 0x0000)
struct BP_RB_Vehicle_C_SteeringWheelToZero final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SteeringWheelToZero) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SteeringWheelToZero");
static_assert(sizeof(BP_RB_Vehicle_C_SteeringWheelToZero) == 0x000018, "Wrong size on BP_RB_Vehicle_C_SteeringWheelToZero");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheelToZero, Angle) == 0x000000, "Member 'BP_RB_Vehicle_C_SteeringWheelToZero::Angle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheelToZero, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_SteeringWheelToZero::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SteeringWheelToZero, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_SteeringWheelToZero::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.StoreConstraintForces
// 0x0058 (0x0058 - 0x0000)
struct BP_RB_Vehicle_C_StoreConstraintForces final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetConstraintForce_OutLinearForce;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetConstraintForce_OutAngularForce;       // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_StoreConstraintForces) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_StoreConstraintForces");
static_assert(sizeof(BP_RB_Vehicle_C_StoreConstraintForces) == 0x000058, "Wrong size on BP_RB_Vehicle_C_StoreConstraintForces");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_GetConstraintForce_OutLinearForce) == 0x000020, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_GetConstraintForce_OutLinearForce' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_GetConstraintForce_OutAngularForce) == 0x000038, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_GetConstraintForce_OutAngularForce' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_StoreConstraintForces, CallFunc_VSize_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_StoreConstraintForces::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SwingingBody
// 0x0078 (0x0078 - 0x0000)
struct BP_RB_Vehicle_C_SwingingBody final
{
public:
	double                                        CallFunc_GetSteering_Angle;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_SwingingBody) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_SwingingBody");
static_assert(sizeof(BP_RB_Vehicle_C_SwingingBody) == 0x000078, "Wrong size on BP_RB_Vehicle_C_SwingingBody");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_GetSteering_Angle) == 0x000000, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_GetSteering_Angle' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_IsLocallyControlled_ReturnValue) == 0x000009, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_RandomFloatInRange_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_GetVelocity_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_VSize_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_MapRangeClamped_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_MakeVector_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_Not_PreBool_ReturnValue) == 0x000070, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000071, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_BooleanAND_ReturnValue) == 0x000072, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_SwingingBody, CallFunc_BooleanAND_ReturnValue_1) == 0x000073, "Member 'BP_RB_Vehicle_C_SwingingBody::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Throttle
// 0x00F0 (0x00F0 - 0x0000)
struct BP_RB_Vehicle_C_Throttle final
{
public:
	double                                        Input;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTorque_Force;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Throttle) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_Throttle");
static_assert(sizeof(BP_RB_Vehicle_C_Throttle) == 0x0000F0, "Wrong size on BP_RB_Vehicle_C_Throttle");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Input) == 0x000000, "Member 'BP_RB_Vehicle_C_Throttle::Input' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_real_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_Throttle::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_bool_Variable) == 0x000010, "Member 'BP_RB_Vehicle_C_Throttle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_real_Variable_1) == 0x000018, "Member 'BP_RB_Vehicle_C_Throttle::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_real_Variable_2) == 0x000020, "Member 'BP_RB_Vehicle_C_Throttle::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_RB_Vehicle_C_Throttle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_RB_Vehicle_C_Throttle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, Temp_bool_Variable_1) == 0x000034, "Member 'BP_RB_Vehicle_C_Throttle::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Abs_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, K2Node_Select_Default) == 0x000040, "Member 'BP_RB_Vehicle_C_Throttle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_BooleanAND_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000049, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_SelectFloat_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, K2Node_Select_Default_1) == 0x000058, "Member 'BP_RB_Vehicle_C_Throttle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_GetRightVector_ReturnValue) == 0x000078, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000090, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000A0, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_GetTorque_Force) == 0x0000B0, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_GetTorque_Force' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B8, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000C0, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Throttle, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000D8, "Member 'BP_RB_Vehicle_C_Throttle::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.TurnBackLight
// 0x0002 (0x0002 - 0x0000)
struct BP_RB_Vehicle_C_TurnBackLight final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_TurnBackLight) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_TurnBackLight");
static_assert(sizeof(BP_RB_Vehicle_C_TurnBackLight) == 0x000002, "Wrong size on BP_RB_Vehicle_C_TurnBackLight");
static_assert(offsetof(BP_RB_Vehicle_C_TurnBackLight, Enable) == 0x000000, "Member 'BP_RB_Vehicle_C_TurnBackLight::Enable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_TurnBackLight, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000001, "Member 'BP_RB_Vehicle_C_TurnBackLight::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.TurnFrontLight
// 0x0002 (0x0002 - 0x0000)
struct BP_RB_Vehicle_C_TurnFrontLight final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_TurnFrontLight) == 0x000001, "Wrong alignment on BP_RB_Vehicle_C_TurnFrontLight");
static_assert(sizeof(BP_RB_Vehicle_C_TurnFrontLight) == 0x000002, "Wrong size on BP_RB_Vehicle_C_TurnFrontLight");
static_assert(offsetof(BP_RB_Vehicle_C_TurnFrontLight, Enable) == 0x000000, "Member 'BP_RB_Vehicle_C_TurnFrontLight::Enable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_TurnFrontLight, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000001, "Member 'BP_RB_Vehicle_C_TurnFrontLight::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UnhandleClientEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_RB_Vehicle_C_UnhandleClientEvent final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UnhandleClientEvent) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_UnhandleClientEvent");
static_assert(sizeof(BP_RB_Vehicle_C_UnhandleClientEvent) == 0x000008, "Wrong size on BP_RB_Vehicle_C_UnhandleClientEvent");
static_assert(offsetof(BP_RB_Vehicle_C_UnhandleClientEvent, Player) == 0x000000, "Member 'BP_RB_Vehicle_C_UnhandleClientEvent::Player' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Unroll
// 0x0068 (0x0068 - 0x0000)
struct BP_RB_Vehicle_C_Unroll final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Down_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Unroll) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_Unroll");
static_assert(sizeof(BP_RB_Vehicle_C_Unroll) == 0x000068, "Wrong size on BP_RB_Vehicle_C_Unroll");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_Vector_Down_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_Vector_Down_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_GetActorUpVector_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_Dot_VectorVector_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unroll, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_Unroll::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Unrolling
// 0x0070 (0x0070 - 0x0000)
struct BP_RB_Vehicle_C_Unrolling final
{
public:
	struct FVector                                CallFunc_Vector_Down_ReturnValue;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorUpVector_ReturnValue;             // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Unrolling) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_Unrolling");
static_assert(sizeof(BP_RB_Vehicle_C_Unrolling) == 0x000070, "Wrong size on BP_RB_Vehicle_C_Unrolling");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_Vector_Down_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_Vector_Down_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_GetActorUpVector_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_GetActorUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_Dot_VectorVector_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_Not_PreBool_ReturnValue) == 0x000039, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_GetForwardVector_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Unrolling, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000058, "Member 'BP_RB_Vehicle_C_Unrolling::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Update Audio Engine Wheel Speed
// 0x0168 (0x0168 - 0x0000)
struct BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed final
{
public:
	double                                        Temp_real_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_10;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_11;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_12;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_13;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_14;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_6;           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue_1;          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_7;           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue_2;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_8;           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue_3;          // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue_4;          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast;          // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast_1;        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast_2;        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed");
static_assert(sizeof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed) == 0x000168, "Wrong size on BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_1) == 0x000008, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_2) == 0x000010, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_3) == 0x000018, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_4) == 0x000020, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_5) == 0x000028, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_6) == 0x000030, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_7) == 0x000038, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_8) == 0x000040, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_9) == 0x000048, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_10) == 0x000050, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_11) == 0x000058, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_12) == 0x000060, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_13) == 0x000068, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_real_Variable_14) == 0x000070, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_real_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, Temp_byte_Variable) == 0x000078, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000080, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000090, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000098, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x0000A8, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Abs_ReturnValue) == 0x0000B0, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x0000B8, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x0000C0, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_GetVelocity_ReturnValue) == 0x0000D0, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_VSize_ReturnValue) == 0x0000E8, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_MapRangeClamped_ReturnValue) == 0x0000F0, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_MakeLiteralDouble_ReturnValue) == 0x0000F8, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_6) == 0x000100, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_MakeLiteralDouble_ReturnValue_1) == 0x000108, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_MakeLiteralDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_7) == 0x000110, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_MakeLiteralDouble_ReturnValue_2) == 0x000118, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_MakeLiteralDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Add_DoubleDouble_ReturnValue_8) == 0x000120, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Add_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_MakeLiteralDouble_ReturnValue_3) == 0x000128, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_MakeLiteralDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000130, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_MakeLiteralDouble_ReturnValue_4) == 0x000138, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_MakeLiteralDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_Abs_ReturnValue_1) == 0x000140, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000148, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, K2Node_Select_Default) == 0x000150, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_SetParameter_Value_ImplicitCast) == 0x000158, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_SetParameter_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_SetParameter_Value_ImplicitCast_1) == 0x00015C, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_SetParameter_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed, CallFunc_SetParameter_Value_ImplicitCast_2) == 0x000160, "Member 'BP_RB_Vehicle_C_Update_Audio_Engine_Wheel_Speed::CallFunc_SetParameter_Value_ImplicitCast_2' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateAudioEngine
// 0x0138 (0x0138 - 0x0000)
struct BP_RB_Vehicle_C_UpdateAudioEngine final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPI_ReturnValue;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_1;                           // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_2;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetStat_Value;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_3;                           // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_4;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast;          // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast_1;        // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast_2;        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetParameter_Value_ImplicitCast_3;        // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UpdateAudioEngine) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_UpdateAudioEngine");
static_assert(sizeof(BP_RB_Vehicle_C_UpdateAudioEngine) == 0x000138, "Wrong size on BP_RB_Vehicle_C_UpdateAudioEngine");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, Temp_bool_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, Temp_bool_Variable_1) == 0x000001, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, Temp_bool_Variable_2) == 0x000002, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, Temp_real_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, Temp_bool_Variable_3) == 0x000010, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_GetPI_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_GetVelocity_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_IsLocallyControlled_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_GetVelocity_ReturnValue_1) == 0x000050, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x000068, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, K2Node_Select_Default) == 0x000070, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_VSize_ReturnValue) == 0x000088, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_MapRangeClamped_ReturnValue) == 0x000090, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, Temp_bool_Variable_4) == 0x000098, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_VSize_ReturnValue_1) == 0x0000B8, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000C0, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_MapRangeClamped_ReturnValue_1) == 0x0000D0, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, K2Node_Select_Default_2) == 0x0000D8, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000E0, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_GetStat_Value) == 0x0000E8, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_GetStat_Value' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_MapRangeClamped_ReturnValue_2) == 0x0000F0, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, K2Node_Select_Default_3) == 0x0000F8, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_MapRangeClamped_ReturnValue_3) == 0x000100, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000108, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000110, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, K2Node_Select_Default_4) == 0x000118, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_FInterpTo_ReturnValue) == 0x000120, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_SetParameter_Value_ImplicitCast) == 0x000128, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_SetParameter_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_SetParameter_Value_ImplicitCast_1) == 0x00012C, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_SetParameter_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_SetParameter_Value_ImplicitCast_2) == 0x000130, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_SetParameter_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioEngine, CallFunc_SetParameter_Value_ImplicitCast_3) == 0x000134, "Member 'BP_RB_Vehicle_C_UpdateAudioEngine::CallFunc_SetParameter_Value_ImplicitCast_3' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateAudioSuspension
// 0x0058 (0x0058 - 0x0000)
struct BP_RB_Vehicle_C_UpdateAudioSuspension final
{
public:
	double                                        ForceDelta;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_PlayEventAttached_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UpdateAudioSuspension) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_UpdateAudioSuspension");
static_assert(sizeof(BP_RB_Vehicle_C_UpdateAudioSuspension) == 0x000058, "Wrong size on BP_RB_Vehicle_C_UpdateAudioSuspension");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, ForceDelta) == 0x000000, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::ForceDelta' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_PlayEventAttached_ReturnValue) == 0x000028, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_PlayEventAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Abs_ReturnValue) == 0x000048, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateAudioSuspension, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_RB_Vehicle_C_UpdateAudioSuspension::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateExhaust
// 0x0040 (0x0040 - 0x0000)
struct BP_RB_Vehicle_C_UpdateExhaust final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast_1;      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UpdateExhaust) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_UpdateExhaust");
static_assert(sizeof(BP_RB_Vehicle_C_UpdateExhaust) == 0x000040, "Wrong size on BP_RB_Vehicle_C_UpdateExhaust");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_IsLocallyControlled_ReturnValue) == 0x000018, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_VSize_ReturnValue_1) == 0x000028, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_GetFloatValue_ReturnValue) == 0x000030, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_GetFloatValue_ReturnValue_1) == 0x000034, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000038, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateExhaust, CallFunc_GetFloatValue_InTime_ImplicitCast_1) == 0x00003C, "Member 'BP_RB_Vehicle_C_UpdateExhaust::CallFunc_GetFloatValue_InTime_ImplicitCast_1' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdatePhysics
// 0x00C0 (0x00C0 - 0x0000)
struct BP_RB_Vehicle_C_UpdatePhysics final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UpdatePhysics) == 0x000010, "Wrong alignment on BP_RB_Vehicle_C_UpdatePhysics");
static_assert(sizeof(BP_RB_Vehicle_C_UpdatePhysics) == 0x0000C0, "Wrong size on BP_RB_Vehicle_C_UpdatePhysics");
static_assert(offsetof(BP_RB_Vehicle_C_UpdatePhysics, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'BP_RB_Vehicle_C_UpdatePhysics::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdatePhysics, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x000060, "Member 'BP_RB_Vehicle_C_UpdatePhysics::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdatePhysics, CallFunc_InverseTransformDirection_ReturnValue) == 0x000078, "Member 'BP_RB_Vehicle_C_UpdatePhysics::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdatePhysics, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000090, "Member 'BP_RB_Vehicle_C_UpdatePhysics::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdatePhysics, CallFunc_TransformDirection_ReturnValue) == 0x0000A8, "Member 'BP_RB_Vehicle_C_UpdatePhysics::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateWheelPitches
// 0x01A0 (0x01A0 - 0x0000)
struct BP_RB_Vehicle_C_UpdateWheelPitches final
{
public:
	double                                        Temp_real_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_10;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_11;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_12;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_13;                             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_14;                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_15;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue_1;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_16;                             // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00C0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CallFunc_Array_Get_Item;                           // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInRadians_ReturnValue; // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UpdateWheelPitches) == 0x000010, "Wrong alignment on BP_RB_Vehicle_C_UpdateWheelPitches");
static_assert(sizeof(BP_RB_Vehicle_C_UpdateWheelPitches) == 0x0001A0, "Wrong size on BP_RB_Vehicle_C_UpdateWheelPitches");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_1) == 0x000008, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_2) == 0x000010, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_3) == 0x000018, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_4) == 0x000020, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_5) == 0x000028, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_6) == 0x000030, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_7) == 0x000038, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_8) == 0x000040, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_9) == 0x000048, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_10) == 0x000050, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_11) == 0x000058, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_12) == 0x000060, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_13) == 0x000068, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_14) == 0x000070, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_14' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_15) == 0x000078, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_15' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_int_Array_Index_Variable) == 0x000080, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Add_IntInt_ReturnValue) == 0x000088, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_byte_Variable) == 0x00008C, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_MakeLiteralDouble_ReturnValue) == 0x000090, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_MakeLiteralDouble_ReturnValue_1) == 0x000098, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_MakeLiteralDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_real_Variable_16) == 0x0000A0, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_real_Variable_16' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, Temp_bool_Variable) == 0x0000A8, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, K2Node_Select_Default) == 0x0000B0, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, K2Node_Select_Default_1) == 0x0000B8, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_GetTransform_ReturnValue) == 0x0000C0, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Array_Length_ReturnValue) == 0x000120, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Array_Get_Item) == 0x000128, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_GetPhysicsAngularVelocityInRadians_ReturnValue) == 0x000138, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_GetPhysicsAngularVelocityInRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_InverseTransformDirection_ReturnValue) == 0x000150, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_BreakVector_X) == 0x000168, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_BreakVector_Y) == 0x000170, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_BreakVector_Z) == 0x000178, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000180, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000188, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UpdateWheelPitches, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000190, "Member 'BP_RB_Vehicle_C_UpdateWheelPitches::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UserConstructionScript
// 0x0248 (0x0248 - 0x0000)
struct BP_RB_Vehicle_C_UserConstructionScript final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0020(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class USkeletalMesh*                          CallFunc_GetSkeletalMesh_DEPRECATED_ReturnValue;   // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBoxSphereBounds                       CallFunc_GetBounds_ReturnValue;                    // 0x0110(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakBoxSphereBounds_Origin;              // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakBoxSphereBounds_BoxExtent;           // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakBoxSphereBounds_SphereRadius;        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicsConstraintComponent*>    K2Node_MakeArray_Array;                            // 0x0188(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item;                           // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorFloat_ReturnValue;              // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UPhysicsConstraintComponent*>    K2Node_MakeArray_Array_1;                          // 0x01D8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPhysicsConstraintComponent*            CallFunc_Array_Get_Item_1;                         // 0x01E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FA[0x2];                                      // 0x01FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Radius_ImplicitCast;            // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularSwing1Limit_Swing1LimitAngle_ImplicitCast; // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDriveParams_VelocityStrength_ImplicitCast; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDriveParams_PositionStrength_ImplicitCast; // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearZLimit_LimitSize_ImplicitCast;   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast; // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_RB_Vehicle_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_RB_Vehicle_C_UserConstructionScript");
static_assert(sizeof(BP_RB_Vehicle_C_UserConstructionScript) == 0x000248, "Wrong size on BP_RB_Vehicle_C_UserConstructionScript");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_RB_Vehicle_C_UserConstructionScript::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_RB_Vehicle_C_UserConstructionScript::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_RB_Vehicle_C_UserConstructionScript::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000020, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_GetSkeletalMesh_DEPRECATED_ReturnValue) == 0x000108, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_GetSkeletalMesh_DEPRECATED_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_GetBounds_ReturnValue) == 0x000110, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_GetBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_BreakBoxSphereBounds_Origin) == 0x000148, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_BreakBoxSphereBounds_Origin' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_BreakBoxSphereBounds_BoxExtent) == 0x000160, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_BreakBoxSphereBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_BreakBoxSphereBounds_SphereRadius) == 0x000178, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_BreakBoxSphereBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000180, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000188, "Member 'BP_RB_Vehicle_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x000198, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x0001A0, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0001A8, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Add_VectorFloat_ReturnValue) == 0x0001C0, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Add_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, K2Node_MakeArray_Array_1) == 0x0001D8, "Member 'BP_RB_Vehicle_C_UserConstructionScript::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Array_Get_Item_1) == 0x0001E8, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_1) == 0x0001F0, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_1) == 0x0001F4, "Member 'BP_RB_Vehicle_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue) == 0x0001F8, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001F9, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001FC, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000200, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000208, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x000220, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000228, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, K2Node_VariableSet_Radius_ImplicitCast) == 0x000230, "Member 'BP_RB_Vehicle_C_UserConstructionScript::K2Node_VariableSet_Radius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_SetAngularSwing1Limit_Swing1LimitAngle_ImplicitCast) == 0x000234, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_SetAngularSwing1Limit_Swing1LimitAngle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_SetLinearDriveParams_VelocityStrength_ImplicitCast) == 0x000238, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_SetLinearDriveParams_VelocityStrength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_SetLinearDriveParams_PositionStrength_ImplicitCast) == 0x00023C, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_SetLinearDriveParams_PositionStrength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_SetLinearZLimit_LimitSize_ImplicitCast) == 0x000240, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_SetLinearZLimit_LimitSize_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_RB_Vehicle_C_UserConstructionScript, CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast) == 0x000244, "Member 'BP_RB_Vehicle_C_UserConstructionScript::CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast' has a wrong offset!");

}

