#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Vehicle

#include "Basic.hpp"

#include "I_Vehicle_classes.hpp"
#include "I_Vehicle_parameters.hpp"


namespace SDK
{

// Function I_Vehicle.I_Vehicle_C.ExitVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreSpeedLimits                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::ExitVehicle(class AActor* Player, bool SkipAnimation, bool SkipExitOnLocation, bool IgnoreSpeedLimits, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "ExitVehicle");

	Params::I_Vehicle_C_ExitVehicle Parms{};

	Parms.Player = Player;
	Parms.SkipAnimation = SkipAnimation;
	Parms.SkipExitOnLocation = SkipExitOnLocation;
	Parms.IgnoreSpeedLimits = IgnoreSpeedLimits;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function I_Vehicle.I_Vehicle_C.FillGas
// (Public, BlueprintCallable, BlueprintEvent)

void II_Vehicle_C::FillGas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "FillGas");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_Vehicle.I_Vehicle_C.GetBoostInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BoostTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BoostCooldownTime                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetBoostInfo(double* BoostTime, double* BoostCooldownTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetBoostInfo");

	Params::I_Vehicle_C_GetBoostInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BoostTime != nullptr)
		*BoostTime = Parms.BoostTime;

	if (BoostCooldownTime != nullptr)
		*BoostCooldownTime = Parms.BoostCooldownTime;
}


// Function I_Vehicle.I_Vehicle_C.GetCarStatsComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CarStatsComponent_C*         CarStats                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetCarStatsComponent(class UBPC_CarStatsComponent_C** CarStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetCarStatsComponent");

	Params::I_Vehicle_C_GetCarStatsComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CarStats != nullptr)
		*CarStats = Parms.CarStats;
}


// Function I_Vehicle.I_Vehicle_C.GetDriver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Driver                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             NewParam                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetDriver(class APawn** Driver, class ASurvivalPlayer_V2_C** NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetDriver");

	Params::I_Vehicle_C_GetDriver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Driver != nullptr)
		*Driver = Parms.Driver;

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function I_Vehicle.I_Vehicle_C.GetEngineStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Started                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetEngineStarted(bool* Started)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetEngineStarted");

	Params::I_Vehicle_C_GetEngineStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Started != nullptr)
		*Started = Parms.Started;
}


// Function I_Vehicle.I_Vehicle_C.GetIsAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAccelerating                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetIsAccelerating(bool* IsAccelerating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetIsAccelerating");

	Params::I_Vehicle_C_GetIsAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAccelerating != nullptr)
		*IsAccelerating = Parms.IsAccelerating;
}


// Function I_Vehicle.I_Vehicle_C.GetPassengers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PassengerFL                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PassengerBL                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PassengerBR                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetPassengers(class APawn** PassengerFL, class APawn** PassengerBL, class APawn** PassengerBR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetPassengers");

	Params::I_Vehicle_C_GetPassengers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PassengerFL != nullptr)
		*PassengerFL = Parms.PassengerFL;

	if (PassengerBL != nullptr)
		*PassengerBL = Parms.PassengerBL;

	if (PassengerBR != nullptr)
		*PassengerBR = Parms.PassengerBR;
}


// Function I_Vehicle.I_Vehicle_C.GetSteering
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetSteering(double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetSteering");

	Params::I_Vehicle_C_GetSteering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function I_Vehicle.I_Vehicle_C.GetVehicleBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Body                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetVehicleBody(class USkeletalMeshComponent** Body)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetVehicleBody");

	Params::I_Vehicle_C_GetVehicleBody Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Body != nullptr)
		*Body = Parms.Body;
}


// Function I_Vehicle.I_Vehicle_C.GetWheelPitches
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<double>                          Pitches                                                (Parm, OutParm)

void II_Vehicle_C::GetWheelPitches(TArray<double>* Pitches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetWheelPitches");

	Params::I_Vehicle_C_GetWheelPitches Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pitches != nullptr)
		*Pitches = std::move(Parms.Pitches);
}


// Function I_Vehicle.I_Vehicle_C.GetWheels
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 LF                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 RF                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 LB                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 RB                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::GetWheels(bool* IsValid, class USphereComponent** LF, class USphereComponent** RF, class USphereComponent** LB, class USphereComponent** RB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "GetWheels");

	Params::I_Vehicle_C_GetWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (LF != nullptr)
		*LF = Parms.LF;

	if (RF != nullptr)
		*RF = Parms.RF;

	if (LB != nullptr)
		*LB = Parms.LB;

	if (RB != nullptr)
		*RB = Parms.RB;
}


// Function I_Vehicle.I_Vehicle_C.HasDriver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool II_Vehicle_C::HasDriver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "HasDriver");

	Params::I_Vehicle_C_HasDriver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function I_Vehicle.I_Vehicle_C.IsVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVehicle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::IsVehicle(bool* Param_IsVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "IsVehicle");

	Params::I_Vehicle_C_IsVehicle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsVehicle != nullptr)
		*Param_IsVehicle = Parms.Param_IsVehicle;
}


// Function I_Vehicle.I_Vehicle_C.OnLevelLoaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::OnLevelLoaded(class FName Level, class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "OnLevelLoaded");

	Params::I_Vehicle_C_OnLevelLoaded Parms{};

	Parms.Level = Level;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_Vehicle.I_Vehicle_C.OnLevelUnloaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::OnLevelUnloaded(class FName Level, class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "OnLevelUnloaded");

	Params::I_Vehicle_C_OnLevelUnloaded Parms{};

	Parms.Level = Level;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function I_Vehicle.I_Vehicle_C.Repair
// (Public, BlueprintCallable, BlueprintEvent)

void II_Vehicle_C::Repair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "Repair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function I_Vehicle.I_Vehicle_C.SetBoost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewBoost                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::SetBoost(bool NewBoost, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "SetBoost");

	Params::I_Vehicle_C_SetBoost Parms{};

	Parms.NewBoost = NewBoost;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function I_Vehicle.I_Vehicle_C.SwitchSits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DesireSitIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void II_Vehicle_C::SwitchSits(int32 DesireSitIndex, class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("I_Vehicle_C", "SwitchSits");

	Params::I_Vehicle_C_SwitchSits Parms{};

	Parms.DesireSitIndex = DesireSitIndex;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}

}

