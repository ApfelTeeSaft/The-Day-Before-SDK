#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVS_VehicleMaster

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "S_VehicleSit_structs.hpp"
#include "E_SitsType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CarTipe_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "FGearPlugin_classes.hpp"
#include "StatType_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "BPE_AmmoClass_structs.hpp"
#include "Survival_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AVS_VehicleMaster.AVS_VehicleMaster_C
// 0x09A0 (0x0FF0 - 0x0650)
#pragma pack(push, 0x1)
class alignas(0x10) AAVS_VehicleMaster_C : public AFGearVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0650(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          RoofCollision;                                     // 0x0658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder_FR;                                       // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylynder_FL;                                       // 0x0668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder_BR;                                       // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder_BL;                                       // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1_FL;                                        // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          FiveWheelDetection;                                // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BackwardZombieKillBox;                             // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ForwardZombieKillBox;                              // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBuoyancyComponent*                     Buoyancy;                                          // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Background_Plane;                                  // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USmoothSync*                            SmoothSync;                                        // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere3_FR;                                        // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere2_BR;                                        // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_BL;                                         // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WheelCollision;                                    // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FixAndFill;                                        // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GasPos;                                            // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DeadPlace;                                         // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EnginePos;                                         // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DestroyedCar;                                      // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassengerOut_FR;                                   // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassengerOut_BR;                                   // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassengerOut_BL;                                   // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassengerIn_BR;                                    // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassengerIn_BL;                                    // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PassengerIn_FR;                                    // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DriverOut;                                         // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DriverIn;                                          // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Animation;                                         // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MainMesh;                                          // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Tire1;                                             // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Tire3;                                             // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Tire2;                                             // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Tire4;                                             // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TireVFX;                                           // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExhaustHolder1;                                    // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightR;                                            // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightL;                                            // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   BackLightR;                                        // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   BackLightL;                                        // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lights;                                            // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NiagaraExplosion;                                  // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ExhaustHolder;                                     // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VFX;                                               // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODAudioWheelsLoop;                               // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODAudioEngineLoop;                               // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SFX;                                               // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_CarStatsComponent_C*               BPC_CarStatsComponent;                             // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HUD_Interact;                                      // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera1;                                           // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UATPCCameraComponent*                   ATPCCamera;                                        // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_6_RotationControll_5F2E6D18420419FA2D7BBB833EF90FBB; // 0x0808(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_6__Direction_5F2E6D18420419FA2D7BBB833EF90FBB; // 0x080C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_80D[0x3];                                      // 0x080D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_6;                                        // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_SpeedFading_A50CC48C49B7EF70A4DD95AE64BE7F7D; // 0x0818(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_A50CC48C49B7EF70A4DD95AE64BE7F7D; // 0x081C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81D[0x3];                                      // 0x081D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_SpeedDrown_18D5FE734F4F85C3E07EF9AFACFAFF00; // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_DrownCurve_18D5FE734F4F85C3E07EF9AFACFAFF00; // 0x082C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_18D5FE734F4F85C3E07EF9AFACFAFF00; // 0x0830(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_831[0x7];                                      // 0x0831(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_NewTrack_0_239375CC48E79347A27786BB91854B20; // 0x0840(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_239375CC48E79347A27786BB91854B20; // 0x0844(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_845[0x3];                                      // 0x0845(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_VehicleSit>                  Sits;                                              // 0x0850(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify)
	TArray<class FName>                           SitSocketNames;                                    // 0x0860(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFMODEvent*                             EnterVehicleEvent;                                 // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           DoorBoneNames;                                     // 0x0878(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsDriving;                                         // 0x0888(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              Exhaust_Loop_NS;                                   // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ASurvivalPlayer_C*>              PlayersInCar;                                      // 0x08A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class FName>                           SeatAnimSocketNames;                               // 0x08B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFMODEvent*                             ExitVehicleEvent;                                  // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          EngineStarted;                                     // 0x08C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	E_SitsType                                    SitsType;                                          // 0x08C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8CA[0x6];                                      // 0x08CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                Exhaust_Holder;                                    // 0x08D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UVehicleSetup_HUD_C*                    DebugHud;                                          // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ExhaustCurve;                                      // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UNiagaraSystem*>            TireFX;                                            // 0x08F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           TireFX_BonesNames;                                 // 0x0940(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              NS_Tires;                                          // 0x0950(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UDebug_FX_widget_C*                     DebugFXvidget;                                     // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRate;                                         // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRate_ST;                                      // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRate_ST2;                                     // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRate_ST3;                                     // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnRate_ST4;                                     // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_97C[0x4];                                      // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDamping_PDA_AVS_C*                     Damping_DA;                                        // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      _PlayerToKill;                                     // 0x0988(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                StatickMesh;                                       // 0x0990(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UNiagaraSystem*                         NS_StartExhaust;                                   // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_LoopExhaust;                                    // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ActualPosition;                                    // 0x09B0(0x0060)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             StartLerpPosition;                                 // 0x0A10(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartLerp;                                         // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A71[0x3];                                      // 0x0A71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LerpAlpha;                                         // 0x0A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CarIndex;                                          // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7C[0x4];                                      // 0x0A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_V2_C*                   CarOwner;                                          // 0x0A80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAnimMontage*                           DriverIn_Montage;                                  // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        IgnoreCollisionSpeed;                              // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             SecAlarmEvent_Fmod;                                // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_V2_C*                   CurrentOwner;                                      // 0x0AA0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         StealingAfterTime;                                 // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAC[0x4];                                      // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StealAfterTimer;                                   // 0x0AB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarOpenFrontLeftDoor_Montage;                      // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarOpenFrontRightDoor_Montage;                     // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarOpenBackLeftDoor_Montage;                       // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarOpenBackRightDoor_Montage;                      // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Dooropen;                                          // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Doorclose;                                         // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             EngineStartFail;                                   // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             StartEngineSfx;                                    // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             StopEngineSfx;                                     // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                DefWheelRadius;                                    // 0x0B00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  IsOnFlatWheels;                                    // 0x0B10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        AlarmTimer;                                        // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    HandbrakeSFX;                                      // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieKillSpeed;                                   // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieMinBodyImpulseMultiplier;                    // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieDismembermentSpeed;                          // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieMinLimbImpulseMultiplier;                    // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieMaxBodyImpulseMultiplier;                    // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZombieMaxLimbImpulseMultiplier;                    // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZImpulseAdjustment;                                // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        KillPlayerSpeed;                                   // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Flat_Wheel_Number;                                 // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B74[0x4];                                      // 0x0B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerSpawnPoint_C*>         Regions;                                           // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	class ASurvPC_C*                              Interacting_PC;                                    // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          StartTeleport;                                     // 0x0B90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B91[0x7];                                      // 0x0B91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_BlackScreen_C*                       Black_Screen;                                      // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InGarage;                                          // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             TiresBlow_SFX;                                     // 0x0BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DriverOutMontage;                                  // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               LFWheel_Particle;                                  // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               RFWheel_Particle;                                  // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerSpawnPoint_C*>         CarSpawners;                                       // 0x0BC8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ABP_PlayerSpawnPoint_C*, int32>    SPPlayer;                                          // 0x0BD8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PartyTeleport;                                     // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipGetOutAnimation;                               // 0x0C29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipGetInAnimation;                                // 0x0C2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimationPlayed;                                   // 0x0C2B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2C[0x4];                                      // 0x0C2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            KochkaDampingCurve;                                // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               KuzovRotation;                                     // 0x0C38(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ASurvivalPlayer_V2_C*                   TeleportingPlayer;                                 // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BlowingTiresTtime;                                 // 0x0C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlockInputs;                                      // 0x0C59(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5A[0x6];                                      // 0x0C5A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Passenger_FR_InMontage;                            // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Passenger_BL_InMontage;                            // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Passenger_BR_InMontage;                            // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Passenger_FR_OutMontage;                           // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Passenger_BL_OutMontage;                           // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Passenger_BR_OutMontage;                           // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarCloseFrontLeftDoor_Montage;                     // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarCloseFrontRightDoor_Montage;                    // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarCloseBackLeftDoor_Montage;                      // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CarCloseBackRightDoor_Montage;                     // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Idle_FR_Passenger;                                 // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Idle_BL_Passenger;                                 // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Idle_BR_Passenger;                                 // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Idle_Driver;                                       // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                DestroyedMesh;                                     // 0x0CD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         AnimationSpeed;                                    // 0x0CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepPhysicsOn;                                     // 0x0CE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE5[0x3];                                      // 0x0CE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EngineNoiseTimer;                                  // 0x0CE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Destroy_SFX;                                       // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchCoolDown;                                    // 0x0CF8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF9[0x7];                                      // 0x0CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFGearWheel*>                    AllWheels_arr;                                     // 0x0D00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class FName>                           WheelBoneName;                                     // 0x0D10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNiagaraComponent*>              ParticlesForRenderTargetMud;                       // 0x0D20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                DestroyedLinearImpulse;                            // 0x0D30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestroyedAngularImpulse;                           // 0x0D48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             HandbrakeOn_SFX;                                   // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TochedWaterLevel_Z;                                // 0x0D68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UnderWaterTimer;                                   // 0x0D80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemPassenger_FR_InMontage;                         // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemPassenger_BL_InMontage;                         // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemPassenger_BR_InMontage;                         // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemPassenger_FR_OutMontage;                        // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemPassenger_BL_OutMontage;                        // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemPassenger_BR_OutMontage;                        // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemDriverIn_Montage;                               // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FemDriverOutMontage;                               // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALandscape*                             LandscapeReference;                                // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Player;                                            // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      As_Survival_Player;                                // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CanExitSpeed;                                      // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ALandscapeProxy*>                LandscapeProxyReference;                           // 0x0DE8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ASurvivalPlayer_C*>              PlayersInCar_ebaniKostil;                          // 0x0E00(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<bool>                                  AntiKrutitsia;                                     // 0x0E10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UStaticMeshComponent*                   KuzowMesh;                                         // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FrontLight_DMI;                                    // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BackLightDMI;                                      // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TouchWater;                                        // 0x0E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E39[0x7];                                      // 0x0E39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DrownCurve;                                        // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DrownInitialVelocityAfter;                         // 0x0E48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeshUnderWater;                                    // 0x0E60(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E61[0x7];                                      // 0x0E61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UnderwaterDrowingCarTimer;                         // 0x0E68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VehicleUpVecor;                                    // 0x0E70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DifferenceInWaterLevel;                            // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DifferenceInWaterToDie;                            // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    StealAlarmSiren;                                   // 0x0E98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CarAlarmactive;                                    // 0x0EA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OwnerDeadOrDestroyed;                              // 0x0EA1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarTipe                                      Car_Tipe;                                          // 0x0EA2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA3[0x1];                                      // 0x0EA3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Base_DamageOnHit;                                  // 0x0EA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeAfterExplode;                                  // 0x0EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EAC[0x4];                                      // 0x0EAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SelfDestroyTimer;                                  // 0x0EB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToExplode;                                     // 0x0EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EBC[0x4];                                      // 0x0EBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Dirt_DMI;                                          // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DirtOpacity_DMI;                                   // 0x0EC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ECC[0x4];                                      // 0x0ECC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirtGainSpeed;                                     // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DirtLoseSpeed;                                     // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       Dirt_DMI_Array;                                    // 0x0EE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UMaterialInstance*>              DirtMats_arr;                                      // 0x0EF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMeshComponent*>           Door;                                              // 0x0F00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          InitialStart;                                      // 0x0F10(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F11[0x7];                                      // 0x0F11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rear_DefLongitudinalFriction;                      // 0x0F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Front_DefLongitudinalFriction;                     // 0x0F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_LaterallFriction;                            // 0x0F28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_LaterallFriction;                             // 0x0F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_Fx_LateralScale;                              // 0x0F30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_Fx_LateralScale;                             // 0x0F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_Fy_LongitudinalScale;                        // 0x0F38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_Fy_LongitudinalScale;                         // 0x0F3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_Def_Fy_LongitudinalScale;                     // 0x0F40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_Def_Fy_LongitudinalScale;                    // 0x0F44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_Def_Fx_LateralScale;                         // 0x0F48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_DefLateralFriction;                          // 0x0F4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_DefLateralFriction;                           // 0x0F50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_Def_Fx_LateralScale;                          // 0x0F54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rear_LongitudinalFriction;                         // 0x0F58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Front_LongitudinalFriction;                        // 0x0F5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Overlapping_Actors;                                // 0x0F60(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               Wheel_DMI;                                         // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZombieHitLocation;                                 // 0x0F78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ZombieHitNormal;                                   // 0x0F90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           KillZombieZeroSpeedTimer;                          // 0x0FA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 OwnerSteamId;                                      // 0x0FB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          DontFckngMove;                                     // 0x0FC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC1[0x7];                                      // 0x0FC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    WaterWheelFMOD;                                    // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TouchingWater;                                     // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD1[0x7];                                      // 0x0FD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           EmergencySocket;                                   // 0x0FD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ActivateNiagaraExplosion();
	void Add_Impulse_On_Destroy();
	void AfterExitSurv(class AActor* Surv);
	void AfterStealReturnToOwner();
	void AllowStabilizeVehicle(bool* Allow);
	void AnySitsEmpty(bool* Zaebis1, int32* EmptyIndex1);
	void AnyWheelHasContact(bool* HasContact);
	void AttachDoorToBone();
	void AttachDoorToMainMesh();
	void BindOnSurvDeathAndDestroy(class ASurvivalPlayer_V2_C* Surv);
	void BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_7_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_8_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__AVS_VehicleMaster_Cylinder_BL_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_Cylinder_BR_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_Cylinder_FR_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_Cylynder_FL_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__AVS_VehicleMaster_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_Sphere2_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_Sphere3_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__AVS_VehicleMaster_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalculateFlat_Wheel_Number(int32* FlatWheelNumber);
	void CaptureCarTrail();
	void Car_StatDecodeAndSet(class ASurvivalPlayer_V2_C* CarsOwner);
	void CarIsEmpty(bool* Empty);
	void ChangeViewTargetWithDelay(double Delay, class APawn* NewViewTarget, bool Exit);
	void Check_Player_Neer_Engine(class ASurvivalPlayer_C* Param_Player, bool* PlayerNeerEngine);
	void Check_Player_Neer_Gas(class ASurvivalPlayer_C* Param_Player, bool* PlayerNeerGas);
	void CheckForUnderWater();
	void CheckForWheelNotTouckWhileUnderWater();
	void CheckOneSits(int32 Dimension_1, const TArray<class AActor*>& ActorsToIgnore, TArray<class FName>& SocketArray, bool* bLock);
	void CheckPlayerSits(class ASurvivalPlayer_C* Param_Player, bool* CanEnter, int32* SitIndex);
	void CheckZombieKill(class UObject* Object, const struct FHitResult& Hit);
	void CheckZombieZeroSpeedKill();
	void ChekIfStillOverlapWater(const TArray<class AActor*>& TargetArray, bool* StillOverlap);
	void ChekIfStillUnderWater(bool* StillUnderWater);
	void ClientsEnterVehicleAsDriver(class ASurvivalPlayer_C* Param_Player);
	void ClientsEnterVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, int32 SitIndex);
	void ClientsExitVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation);
	void ClientsExitVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation);
	void CodeCarsStat(TArray<double>& Fuel, TArray<double>& Durability, TArray<class FString>* Stats);
	void CompareSteamIdtoOwner(const class FString& SteamID, class ASurvivalPlayer_V2_C* SurvRef);
	void DEBUG_SetFXSpawnRate(float Param_SpawnRate, float Param_SpawnRate_ST, float Param_SpawnRate_ST2, float Param_SpawnRate_ST3, float Param_SpawnRate_ST4);
	void DebugtraceMulti(const struct FVector& NewParam);
	void Destroy_Car_when_Nosurv_InRange_Of(TArray<class ASurvivalPlayer_C*>& Array, double Radius);
	void DestroyInteractable();
	void DestroySelfWhenTimerOut();
	void DestroyWithSave();
	void DoorAnimation(int32 SitIndex, bool Open);
	void DriverGetInCar(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation);
	void DriverGetOutCar(class ASurvivalPlayer_C* Param_Player, int32 SitIndex, bool SkipAnimation, bool SkipExitOnLocation);
	void DurabilityEnd();
	void EncodeCarsStat(TArray<class FString>& Stats, TArray<double>* Fuel, TArray<double>* Durability);
	void ENDFCKNGDELAY();
	void EngineTurnOff();
	void EngineTurnOn();
	void EnterVehicle(class ASurvivalPlayer_C* Param_Player, int32 SitIndex, bool FromRancho);
	void ExecuteUbergraph_AVS_VehicleMaster(int32 EntryPoint);
	void ExitCarOnInterrupt(int32 SitIndex, class AActor* Param_Player);
	void ExitVehicle(class AActor* Param_Player, bool SkipAnimation, bool SkipExitOnLocation, bool IgnoreSpeedLimits, bool* Success);
	void FCKNGDELAY(float Duration);
	void FillGas();
	void FixAllWheels();
	void Flashlight();
	void FlatWheelEnable(int32 WheelIndex, int32 Param_CarIndex);
	void FuelEnd();
	void GetActorType(E_ActorType* ActorType);
	void GetBoostInfo(double* BoostTime, double* BoostCooldownTime);
	void GetCarStatsComponent(class UBPC_CarStatsComponent_C** CarStats);
	void GetCarTipe(ECarTipe* CarTipe);
	void GetCurrentSpeed(float* CurrentSpeedKMH);
	void GetDriver(class APawn** Driver, class ASurvivalPlayer_V2_C** NewParam);
	void GetEngineStarted(bool* Started);
	void GetExitPoint(int32 SitIndex, class AActor* Param_Player, struct FVector* Location, bool* CorrectLocation, bool* YouCantExit);
	void GetIsAccelerating(bool* IsAccelerating);
	void GetOutAllPlayersInCar();
	void GetPassengers(class APawn** PassengerFL, class APawn** PassengerBL, class APawn** PassengerBR);
	void GetSteering(double* Angle);
	void GetSurfaceAmplitudeMultiplier(EPhysicalSurface SurfaceType, float* PhysMatMultiplier);
	void GetSurfaceDelayMultiplier(EPhysicalSurface SurfaceType, float* PhysMatMultiplier);
	void GetTireVFX(EPhysicalSurface Param_Index, class UNiagaraSystem** NiagaraFX, bool* Succes);
	void GetVehicleBody(class USkeletalMeshComponent** Body);
	void GetWheelPitches(TArray<double>* Pitches);
	void GetWheels(bool* IsValid, class USphereComponent** LF, class USphereComponent** RF, class USphereComponent** LB, class USphereComponent** RB);
	bool HasCorrectExitRotation();
	bool HasDriver();
	void InpActEvt_TurnEngine_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_TurnLights_K2Node_InputActionEvent_0(const struct FKey& Key);
	void Interact_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_HandbrakeAxis_K2Node_InputAxisEvent_0(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_2(float AxisValue);
	bool IsInViewport();
	void IsLocked_(bool* Result);
	bool IsPartyMember();
	void IsPlayerOwner_OrTeamMate(class APawn* Param_Player, bool* Teammate);
	bool IsUnderWater(double WaterZlevel);
	void IsVehicle(bool* Param_IsVehicle);
	void KillAllPrint(TArray<class ASurvivalPlayer_C*>& InputPin);
	void KillPlayersAndDropOut();
	void KillUnderWater();
	void LinearDampingFromFlatTires(double InputPin, class UDamping_PDA_AVS_C* DampingDA, int32 FlatWheelsNumber, double* OutputPin);
	void MakeSpeedDependentNoise();
	void Multi_ChangeCollisionWithDelay(double Delay, ECollisionChannel Channel, ECollisionResponse NewResponse);
	void Multi_CollisionInCar();
	void Multi_EnableSmoothSync(class ASurvivalPlayer_C* Target, bool NewEnable);
	void Multi_FixAllWheels();
	void Multi_FlatWheelsEnable(int32 WheelIndex);
	void Multi_HitZombieSFX(const struct FVector& Location_Location);
	void Multi_PhysicsToggle(bool NewEnable);
	void Multi_ResetCameraPos(class ASurvivalPlayer_C* Surv);
	void Multi_ResetSurvRotation(int32 SitIndex, class ASurvivalPlayer_C* SurvivalPlayer);
	void Multi_RPClocation(const struct FVector& Location);
	void Multi_SetPassengerCameraMode(class ASurvivalPlayer_C* Surv);
	void Multi_SetReplication(bool Replicate);
	void Multi_SetSurvIdleAnimation(class ASurvivalPlayer_C* SurvivalPlayer, bool InCar, bool Driver, int32 SitIndex);
	void Multi_TurnLight(bool Visibility);
	void Multi_Uncrouch(class ASurvivalPlayer_V2_C* Target);
	void MultiCallDecreaseDurability(double Damage);
	void MulticallEnterVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool FromRancho);
	void MulticallEnterVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, int32 SitIndex);
	void MultiCallExitVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation);
	void MultiCallExitVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation);
	void Multo_SetReplicateMovement(class AActor* Target, bool bInReplicateMovement);
	void OnBeginInteract(class APawn* Param_Player);
	void OnBlendOut_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName);
	void OnCompleted_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName);
	void OnDeath();
	void OnDestroy(class AActor* DestroyedActor);
	void OCar();
	void OnFocused(class APawn* Param_Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Param_Player);
	void OnInteract2(class APawn* Param_Player);
	void OnInteract3(class APawn* Param_Player);
	void OnInteractVehicle(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation);
	void OnInterrupted_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName);
	void OnLevelLoaded(class FName Level, class AActor* Param_Player);
	void OnLevelUnloaded(class FName Level, class AActor* Param_Player);
	void OnLocalInteract(class APawn* Param_Player);
	void OnLostFocus(class APawn* Param_Player);
	void OnNotifyBegin_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName);
	void OnNotifyEnd_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName);
	void OnRep_bBlockInputs();
	void OnRep_EngineStarted();
	void OnRep_IsDriving();
	void OnRep_Sits();
	void OnSeen(class APawn* Param_Player);
	void OnSimulatedPhysicsChanged(bool IsEnabled);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Param_Player);
	void OwnerDeathOrDestroy(bool Param_OwnerDeadOrDestroyed);
	void PassengerGetInCar(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation);
	void PassengerGetOutCar(class ASurvivalPlayer_C* Param_Player, int32 SitIndex, bool SkipAnimation, bool SkipExitOnLocation);
	void PlayDriverIdleAnim(class ASurvivalPlayer_C* Surv);
	void PlayPassengerIdleAnim(class ASurvivalPlayer_C* Surv, int32 SitIndex);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemovePlayerFromCarOnLogOut(const class ASurvivalPlayer_C*& Surv);
	void Repair();
	void ReroutePlayerIndex(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation, class APawn** Surv, int32* NewSitIndex, bool* SkipAnim, bool* Allow_);
	void ResetDoOnce_TogglePhysics();
	void ResetOnMud();
	void ResetOnOther();
	void ResetWaterOverlap();
	void Run_Lockpicking();
	void RunSetAnimFromCar(class ASurvivalPlayer_C* Target, bool InCar, bool Driver, ECarTipe CarTipe, int32 SitIndex);
	void Serv_ApplyDamage(float BaseDamage);
	void Serv_BlockInputs(bool Param_bBlockInputs);
	void Serv_CollisionInCar();
	void Serv_FlatWheelsEnable(int32 WheelIndex);
	void Serv_PhysicsToggle(bool NewEnable);
	void Serv_ResetCameraPos(class ASurvivalPlayer_C* Surv);
	void Serv_RPClocation(const struct FTransform& Location);
	void Serv_SetReplication(bool Replicate);
	void Serv_SwitchSits(int32 DesireSitIndex, class AActor* Param_Player);
	void Serv_TakenDamage(class ASurvivalPlayer_C* Surv, double Damage, bool DontAnimate, bool EffectDamage, bool HungerDamage);
	void Serv_ToggleSwitchSitsCD(bool Param_SwitchCoolDown, float Duration);
	void Serv_TurnLight(bool Visibility);
	void ServerCallExitVehicle(class AActor* Param_Player, bool SkipAnimation);
	void ServerCallSetEngineStarted(bool Param_EngineStarted);
	void ServerEnterVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool FromRancho);
	void ServerEnterVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, int32 SitIndex);
	void ServerExitVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation);
	void ServerExitVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation);
	void Set3DWidgetVisibility(bool Visible);
	void SetActorToPelvisLocation(class ASurvivalPlayer_C* PlayerToKill);
	void SetBoost(bool NewBoost, bool* Success);
	void SetCarDestroyed();
	void SetHighlightedCarWithDelay(float Delay, class ASurvivalPlayer_C* Surv);
	void SetPhysicsAfterDelay(double Delay, bool NewEnable);
	void SetStatBeforeSave(class ASurvivalPlayer_C* Param_CarOwner, double Fuel, double Durablility, int32 Param_CarIndex, TArray<class FString>* Stats);
	void SetStatInArray(TArray<double>& FuelStat, TArray<double>& DurabilityStat, double Fuel, double Durablility, int32 Param_CarIndex, TArray<double>* FuelStats, TArray<double>* DurabilityStats);
	void SetStealAfterTimer();
	void SetSurvIdleAnimation(class ASurvivalPlayer_C* SurvivalPlayer, bool InCar, bool Driver, int32 SitIndex);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void SetupCarNoiseTimer(bool Enable);
	void SetVariablesOnExplode();
	void SetVehicleSit(int32 Param_Index, bool Item_Is_Busy, class APawn* Item_Sitter);
	void Show_Hide_All_Mesh(bool Hide);
	void ShowHideDestroyed_Mesh(bool Hide);
	void ShowWidgets(bool CanEnter, class ASurvivalPlayer_C* Param_Player);
	class UNiagaraComponent* SpawnNiagaraFX(class USceneComponent* SkeletalMesh, class UNiagaraSystem* SystemTemplate, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation);
	void StabilizeVehicleUpdate();
	void StartCaptureCarTrail();
	void StartDrowingVehicle();
	void StartSelfDestroyTimer();
	void StealCar(class APawn* CarStealer);
	void StopCaptureCarTrail();
	void SurvPlayerLogOut(class ASurvivalPlayer_C* SurvivalPlayer);
	void SurvResetRelativePos();
	void SwitchSits(int32 DesireSitIndex, class AActor* Param_Player);
	void TakedDamageClient(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* Killer, bool IsRadialDamage, bool IsFireDamage, double DistanceToExplosion, class AActor* DamageCauser, bool StaminaDecrease, bool Zombie_, EBPE_AmmoClass AmmoClass, EUNegativeEffectDamageType NegativeEffectDamageType);
	void TakedDamageServer(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* Killer, bool IsRadialDamage, bool IsFireDamage, double DistanceToExplosion, class AActor* DamageCauser, bool StaminaDecrease, bool Zombie_, EBPE_AmmoClass AmmoClass, EUNegativeEffectDamageType NegativeEffectDamageType);
	void Teleporting_Logic(class UClass** CarClass, struct FTransform* CarTrans);
	void TeleportInteract(class APawn* Param_Player);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline_6__FinishedFunc();
	void Timeline_6__UpdateFunc();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void TurnEngine();
	void UnbindsCarOwner();
	void UserConstructionScript();
	EPhysicalSurface WheelLastTouchSurface(class UFGearWheel* Wheel);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AVS_VehicleMaster_C">();
	}
	static class AAVS_VehicleMaster_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAVS_VehicleMaster_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(AAVS_VehicleMaster_C) == 0x000010, "Wrong alignment on AAVS_VehicleMaster_C");
static_assert(sizeof(AAVS_VehicleMaster_C) == 0x000FF0, "Wrong size on AAVS_VehicleMaster_C");
static_assert(offsetof(AAVS_VehicleMaster_C, UberGraphFrame) == 0x000650, "Member 'AAVS_VehicleMaster_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, RoofCollision) == 0x000658, "Member 'AAVS_VehicleMaster_C::RoofCollision' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Cylinder_FR) == 0x000660, "Member 'AAVS_VehicleMaster_C::Cylinder_FR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Cylynder_FL) == 0x000668, "Member 'AAVS_VehicleMaster_C::Cylynder_FL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Cylinder_BR) == 0x000670, "Member 'AAVS_VehicleMaster_C::Cylinder_BR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Cylinder_BL) == 0x000678, "Member 'AAVS_VehicleMaster_C::Cylinder_BL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Sphere1_FL) == 0x000680, "Member 'AAVS_VehicleMaster_C::Sphere1_FL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FiveWheelDetection) == 0x000688, "Member 'AAVS_VehicleMaster_C::FiveWheelDetection' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, BackwardZombieKillBox) == 0x000690, "Member 'AAVS_VehicleMaster_C::BackwardZombieKillBox' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ForwardZombieKillBox) == 0x000698, "Member 'AAVS_VehicleMaster_C::ForwardZombieKillBox' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Buoyancy) == 0x0006A0, "Member 'AAVS_VehicleMaster_C::Buoyancy' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SceneCaptureComponent2D) == 0x0006A8, "Member 'AAVS_VehicleMaster_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Background_Plane) == 0x0006B0, "Member 'AAVS_VehicleMaster_C::Background_Plane' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SmoothSync) == 0x0006B8, "Member 'AAVS_VehicleMaster_C::SmoothSync' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Sphere3_FR) == 0x0006C0, "Member 'AAVS_VehicleMaster_C::Sphere3_FR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Sphere2_BR) == 0x0006C8, "Member 'AAVS_VehicleMaster_C::Sphere2_BR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Sphere_BL) == 0x0006D0, "Member 'AAVS_VehicleMaster_C::Sphere_BL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, WheelCollision) == 0x0006D8, "Member 'AAVS_VehicleMaster_C::WheelCollision' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FixAndFill) == 0x0006E0, "Member 'AAVS_VehicleMaster_C::FixAndFill' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, GasPos) == 0x0006E8, "Member 'AAVS_VehicleMaster_C::GasPos' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DeadPlace) == 0x0006F0, "Member 'AAVS_VehicleMaster_C::DeadPlace' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, EnginePos) == 0x0006F8, "Member 'AAVS_VehicleMaster_C::EnginePos' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, AIPerceptionStimuliSource) == 0x000700, "Member 'AAVS_VehicleMaster_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DestroyedCar) == 0x000708, "Member 'AAVS_VehicleMaster_C::DestroyedCar' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PassengerOut_FR) == 0x000710, "Member 'AAVS_VehicleMaster_C::PassengerOut_FR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PassengerOut_BR) == 0x000718, "Member 'AAVS_VehicleMaster_C::PassengerOut_BR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PassengerOut_BL) == 0x000720, "Member 'AAVS_VehicleMaster_C::PassengerOut_BL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PassengerIn_BR) == 0x000728, "Member 'AAVS_VehicleMaster_C::PassengerIn_BR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PassengerIn_BL) == 0x000730, "Member 'AAVS_VehicleMaster_C::PassengerIn_BL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PassengerIn_FR) == 0x000738, "Member 'AAVS_VehicleMaster_C::PassengerIn_FR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DriverOut) == 0x000740, "Member 'AAVS_VehicleMaster_C::DriverOut' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DriverIn) == 0x000748, "Member 'AAVS_VehicleMaster_C::DriverIn' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Animation) == 0x000750, "Member 'AAVS_VehicleMaster_C::Animation' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, MainMesh) == 0x000758, "Member 'AAVS_VehicleMaster_C::MainMesh' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Tire1) == 0x000760, "Member 'AAVS_VehicleMaster_C::Tire1' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Tire3) == 0x000768, "Member 'AAVS_VehicleMaster_C::Tire3' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Tire2) == 0x000770, "Member 'AAVS_VehicleMaster_C::Tire2' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Tire4) == 0x000778, "Member 'AAVS_VehicleMaster_C::Tire4' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TireVFX) == 0x000780, "Member 'AAVS_VehicleMaster_C::TireVFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ExhaustHolder1) == 0x000788, "Member 'AAVS_VehicleMaster_C::ExhaustHolder1' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, LightR) == 0x000790, "Member 'AAVS_VehicleMaster_C::LightR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, LightL) == 0x000798, "Member 'AAVS_VehicleMaster_C::LightL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, BackLightR) == 0x0007A0, "Member 'AAVS_VehicleMaster_C::BackLightR' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, BackLightL) == 0x0007A8, "Member 'AAVS_VehicleMaster_C::BackLightL' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Lights) == 0x0007B0, "Member 'AAVS_VehicleMaster_C::Lights' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, NiagaraExplosion) == 0x0007B8, "Member 'AAVS_VehicleMaster_C::NiagaraExplosion' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ExhaustHolder) == 0x0007C0, "Member 'AAVS_VehicleMaster_C::ExhaustHolder' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, VFX) == 0x0007C8, "Member 'AAVS_VehicleMaster_C::VFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FMODAudioWheelsLoop) == 0x0007D0, "Member 'AAVS_VehicleMaster_C::FMODAudioWheelsLoop' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FMODAudioEngineLoop) == 0x0007D8, "Member 'AAVS_VehicleMaster_C::FMODAudioEngineLoop' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SFX) == 0x0007E0, "Member 'AAVS_VehicleMaster_C::SFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, BPC_CarStatsComponent) == 0x0007E8, "Member 'AAVS_VehicleMaster_C::BPC_CarStatsComponent' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, HUD_Interact) == 0x0007F0, "Member 'AAVS_VehicleMaster_C::HUD_Interact' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Camera1) == 0x0007F8, "Member 'AAVS_VehicleMaster_C::Camera1' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ATPCCamera) == 0x000800, "Member 'AAVS_VehicleMaster_C::ATPCCamera' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_6_RotationControll_5F2E6D18420419FA2D7BBB833EF90FBB) == 0x000808, "Member 'AAVS_VehicleMaster_C::Timeline_6_RotationControll_5F2E6D18420419FA2D7BBB833EF90FBB' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_6__Direction_5F2E6D18420419FA2D7BBB833EF90FBB) == 0x00080C, "Member 'AAVS_VehicleMaster_C::Timeline_6__Direction_5F2E6D18420419FA2D7BBB833EF90FBB' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_6) == 0x000810, "Member 'AAVS_VehicleMaster_C::Timeline_6' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_5_SpeedFading_A50CC48C49B7EF70A4DD95AE64BE7F7D) == 0x000818, "Member 'AAVS_VehicleMaster_C::Timeline_5_SpeedFading_A50CC48C49B7EF70A4DD95AE64BE7F7D' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_5__Direction_A50CC48C49B7EF70A4DD95AE64BE7F7D) == 0x00081C, "Member 'AAVS_VehicleMaster_C::Timeline_5__Direction_A50CC48C49B7EF70A4DD95AE64BE7F7D' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_5) == 0x000820, "Member 'AAVS_VehicleMaster_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_0_SpeedDrown_18D5FE734F4F85C3E07EF9AFACFAFF00) == 0x000828, "Member 'AAVS_VehicleMaster_C::Timeline_0_SpeedDrown_18D5FE734F4F85C3E07EF9AFACFAFF00' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_0_DrownCurve_18D5FE734F4F85C3E07EF9AFACFAFF00) == 0x00082C, "Member 'AAVS_VehicleMaster_C::Timeline_0_DrownCurve_18D5FE734F4F85C3E07EF9AFACFAFF00' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_0__Direction_18D5FE734F4F85C3E07EF9AFACFAFF00) == 0x000830, "Member 'AAVS_VehicleMaster_C::Timeline_0__Direction_18D5FE734F4F85C3E07EF9AFACFAFF00' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_0) == 0x000838, "Member 'AAVS_VehicleMaster_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline_NewTrack_0_239375CC48E79347A27786BB91854B20) == 0x000840, "Member 'AAVS_VehicleMaster_C::Timeline_NewTrack_0_239375CC48E79347A27786BB91854B20' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline__Direction_239375CC48E79347A27786BB91854B20) == 0x000844, "Member 'AAVS_VehicleMaster_C::Timeline__Direction_239375CC48E79347A27786BB91854B20' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Timeline) == 0x000848, "Member 'AAVS_VehicleMaster_C::Timeline' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Sits) == 0x000850, "Member 'AAVS_VehicleMaster_C::Sits' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SitSocketNames) == 0x000860, "Member 'AAVS_VehicleMaster_C::SitSocketNames' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, EnterVehicleEvent) == 0x000870, "Member 'AAVS_VehicleMaster_C::EnterVehicleEvent' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DoorBoneNames) == 0x000878, "Member 'AAVS_VehicleMaster_C::DoorBoneNames' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, IsDriving) == 0x000888, "Member 'AAVS_VehicleMaster_C::IsDriving' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Exhaust_Loop_NS) == 0x000890, "Member 'AAVS_VehicleMaster_C::Exhaust_Loop_NS' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PlayersInCar) == 0x0008A0, "Member 'AAVS_VehicleMaster_C::PlayersInCar' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SeatAnimSocketNames) == 0x0008B0, "Member 'AAVS_VehicleMaster_C::SeatAnimSocketNames' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ExitVehicleEvent) == 0x0008C0, "Member 'AAVS_VehicleMaster_C::ExitVehicleEvent' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, EngineStarted) == 0x0008C8, "Member 'AAVS_VehicleMaster_C::EngineStarted' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SitsType) == 0x0008C9, "Member 'AAVS_VehicleMaster_C::SitsType' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Exhaust_Holder) == 0x0008D0, "Member 'AAVS_VehicleMaster_C::Exhaust_Holder' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DebugHud) == 0x0008E0, "Member 'AAVS_VehicleMaster_C::DebugHud' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ExhaustCurve) == 0x0008E8, "Member 'AAVS_VehicleMaster_C::ExhaustCurve' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TireFX) == 0x0008F0, "Member 'AAVS_VehicleMaster_C::TireFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TireFX_BonesNames) == 0x000940, "Member 'AAVS_VehicleMaster_C::TireFX_BonesNames' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, NS_Tires) == 0x000950, "Member 'AAVS_VehicleMaster_C::NS_Tires' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DebugFXvidget) == 0x000960, "Member 'AAVS_VehicleMaster_C::DebugFXvidget' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SpawnRate) == 0x000968, "Member 'AAVS_VehicleMaster_C::SpawnRate' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SpawnRate_ST) == 0x00096C, "Member 'AAVS_VehicleMaster_C::SpawnRate_ST' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SpawnRate_ST2) == 0x000970, "Member 'AAVS_VehicleMaster_C::SpawnRate_ST2' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SpawnRate_ST3) == 0x000974, "Member 'AAVS_VehicleMaster_C::SpawnRate_ST3' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SpawnRate_ST4) == 0x000978, "Member 'AAVS_VehicleMaster_C::SpawnRate_ST4' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Damping_DA) == 0x000980, "Member 'AAVS_VehicleMaster_C::Damping_DA' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, _PlayerToKill) == 0x000988, "Member 'AAVS_VehicleMaster_C::_PlayerToKill' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StatickMesh) == 0x000990, "Member 'AAVS_VehicleMaster_C::StatickMesh' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, NS_StartExhaust) == 0x0009A0, "Member 'AAVS_VehicleMaster_C::NS_StartExhaust' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, NS_LoopExhaust) == 0x0009A8, "Member 'AAVS_VehicleMaster_C::NS_LoopExhaust' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ActualPosition) == 0x0009B0, "Member 'AAVS_VehicleMaster_C::ActualPosition' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StartLerpPosition) == 0x000A10, "Member 'AAVS_VehicleMaster_C::StartLerpPosition' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StartLerp) == 0x000A70, "Member 'AAVS_VehicleMaster_C::StartLerp' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, LerpAlpha) == 0x000A74, "Member 'AAVS_VehicleMaster_C::LerpAlpha' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarIndex) == 0x000A78, "Member 'AAVS_VehicleMaster_C::CarIndex' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarOwner) == 0x000A80, "Member 'AAVS_VehicleMaster_C::CarOwner' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DriverIn_Montage) == 0x000A88, "Member 'AAVS_VehicleMaster_C::DriverIn_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, IgnoreCollisionSpeed) == 0x000A90, "Member 'AAVS_VehicleMaster_C::IgnoreCollisionSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SecAlarmEvent_Fmod) == 0x000A98, "Member 'AAVS_VehicleMaster_C::SecAlarmEvent_Fmod' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CurrentOwner) == 0x000AA0, "Member 'AAVS_VehicleMaster_C::CurrentOwner' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StealingAfterTime) == 0x000AA8, "Member 'AAVS_VehicleMaster_C::StealingAfterTime' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StealAfterTimer) == 0x000AB0, "Member 'AAVS_VehicleMaster_C::StealAfterTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarOpenFrontLeftDoor_Montage) == 0x000AB8, "Member 'AAVS_VehicleMaster_C::CarOpenFrontLeftDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarOpenFrontRightDoor_Montage) == 0x000AC0, "Member 'AAVS_VehicleMaster_C::CarOpenFrontRightDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarOpenBackLeftDoor_Montage) == 0x000AC8, "Member 'AAVS_VehicleMaster_C::CarOpenBackLeftDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarOpenBackRightDoor_Montage) == 0x000AD0, "Member 'AAVS_VehicleMaster_C::CarOpenBackRightDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Dooropen) == 0x000AD8, "Member 'AAVS_VehicleMaster_C::Dooropen' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Doorclose) == 0x000AE0, "Member 'AAVS_VehicleMaster_C::Doorclose' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, EngineStartFail) == 0x000AE8, "Member 'AAVS_VehicleMaster_C::EngineStartFail' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StartEngineSfx) == 0x000AF0, "Member 'AAVS_VehicleMaster_C::StartEngineSfx' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StopEngineSfx) == 0x000AF8, "Member 'AAVS_VehicleMaster_C::StopEngineSfx' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DefWheelRadius) == 0x000B00, "Member 'AAVS_VehicleMaster_C::DefWheelRadius' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, IsOnFlatWheels) == 0x000B10, "Member 'AAVS_VehicleMaster_C::IsOnFlatWheels' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, AlarmTimer) == 0x000B20, "Member 'AAVS_VehicleMaster_C::AlarmTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, HandbrakeSFX) == 0x000B28, "Member 'AAVS_VehicleMaster_C::HandbrakeSFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieKillSpeed) == 0x000B30, "Member 'AAVS_VehicleMaster_C::ZombieKillSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieMinBodyImpulseMultiplier) == 0x000B38, "Member 'AAVS_VehicleMaster_C::ZombieMinBodyImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieDismembermentSpeed) == 0x000B40, "Member 'AAVS_VehicleMaster_C::ZombieDismembermentSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieMinLimbImpulseMultiplier) == 0x000B48, "Member 'AAVS_VehicleMaster_C::ZombieMinLimbImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieMaxBodyImpulseMultiplier) == 0x000B50, "Member 'AAVS_VehicleMaster_C::ZombieMaxBodyImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieMaxLimbImpulseMultiplier) == 0x000B58, "Member 'AAVS_VehicleMaster_C::ZombieMaxLimbImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZImpulseAdjustment) == 0x000B60, "Member 'AAVS_VehicleMaster_C::ZImpulseAdjustment' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, KillPlayerSpeed) == 0x000B68, "Member 'AAVS_VehicleMaster_C::KillPlayerSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Flat_Wheel_Number) == 0x000B70, "Member 'AAVS_VehicleMaster_C::Flat_Wheel_Number' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Regions) == 0x000B78, "Member 'AAVS_VehicleMaster_C::Regions' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Interacting_PC) == 0x000B88, "Member 'AAVS_VehicleMaster_C::Interacting_PC' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StartTeleport) == 0x000B90, "Member 'AAVS_VehicleMaster_C::StartTeleport' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Black_Screen) == 0x000B98, "Member 'AAVS_VehicleMaster_C::Black_Screen' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, InGarage) == 0x000BA0, "Member 'AAVS_VehicleMaster_C::InGarage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TiresBlow_SFX) == 0x000BA8, "Member 'AAVS_VehicleMaster_C::TiresBlow_SFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DriverOutMontage) == 0x000BB0, "Member 'AAVS_VehicleMaster_C::DriverOutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, LFWheel_Particle) == 0x000BB8, "Member 'AAVS_VehicleMaster_C::LFWheel_Particle' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, RFWheel_Particle) == 0x000BC0, "Member 'AAVS_VehicleMaster_C::RFWheel_Particle' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarSpawners) == 0x000BC8, "Member 'AAVS_VehicleMaster_C::CarSpawners' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SPPlayer) == 0x000BD8, "Member 'AAVS_VehicleMaster_C::SPPlayer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PartyTeleport) == 0x000C28, "Member 'AAVS_VehicleMaster_C::PartyTeleport' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SkipGetOutAnimation) == 0x000C29, "Member 'AAVS_VehicleMaster_C::SkipGetOutAnimation' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SkipGetInAnimation) == 0x000C2A, "Member 'AAVS_VehicleMaster_C::SkipGetInAnimation' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, AnimationPlayed) == 0x000C2B, "Member 'AAVS_VehicleMaster_C::AnimationPlayed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, KochkaDampingCurve) == 0x000C30, "Member 'AAVS_VehicleMaster_C::KochkaDampingCurve' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, KuzovRotation) == 0x000C38, "Member 'AAVS_VehicleMaster_C::KuzovRotation' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TeleportingPlayer) == 0x000C50, "Member 'AAVS_VehicleMaster_C::TeleportingPlayer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, BlowingTiresTtime) == 0x000C58, "Member 'AAVS_VehicleMaster_C::BlowingTiresTtime' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, bBlockInputs) == 0x000C59, "Member 'AAVS_VehicleMaster_C::bBlockInputs' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Passenger_FR_InMontage) == 0x000C60, "Member 'AAVS_VehicleMaster_C::Passenger_FR_InMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Passenger_BL_InMontage) == 0x000C68, "Member 'AAVS_VehicleMaster_C::Passenger_BL_InMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Passenger_BR_InMontage) == 0x000C70, "Member 'AAVS_VehicleMaster_C::Passenger_BR_InMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Passenger_FR_OutMontage) == 0x000C78, "Member 'AAVS_VehicleMaster_C::Passenger_FR_OutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Passenger_BL_OutMontage) == 0x000C80, "Member 'AAVS_VehicleMaster_C::Passenger_BL_OutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Passenger_BR_OutMontage) == 0x000C88, "Member 'AAVS_VehicleMaster_C::Passenger_BR_OutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarCloseFrontLeftDoor_Montage) == 0x000C90, "Member 'AAVS_VehicleMaster_C::CarCloseFrontLeftDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarCloseFrontRightDoor_Montage) == 0x000C98, "Member 'AAVS_VehicleMaster_C::CarCloseFrontRightDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarCloseBackLeftDoor_Montage) == 0x000CA0, "Member 'AAVS_VehicleMaster_C::CarCloseBackLeftDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarCloseBackRightDoor_Montage) == 0x000CA8, "Member 'AAVS_VehicleMaster_C::CarCloseBackRightDoor_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Idle_FR_Passenger) == 0x000CB0, "Member 'AAVS_VehicleMaster_C::Idle_FR_Passenger' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Idle_BL_Passenger) == 0x000CB8, "Member 'AAVS_VehicleMaster_C::Idle_BL_Passenger' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Idle_BR_Passenger) == 0x000CC0, "Member 'AAVS_VehicleMaster_C::Idle_BR_Passenger' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Idle_Driver) == 0x000CC8, "Member 'AAVS_VehicleMaster_C::Idle_Driver' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DestroyedMesh) == 0x000CD0, "Member 'AAVS_VehicleMaster_C::DestroyedMesh' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, AnimationSpeed) == 0x000CE0, "Member 'AAVS_VehicleMaster_C::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, KeepPhysicsOn) == 0x000CE4, "Member 'AAVS_VehicleMaster_C::KeepPhysicsOn' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, EngineNoiseTimer) == 0x000CE8, "Member 'AAVS_VehicleMaster_C::EngineNoiseTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Destroy_SFX) == 0x000CF0, "Member 'AAVS_VehicleMaster_C::Destroy_SFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SwitchCoolDown) == 0x000CF8, "Member 'AAVS_VehicleMaster_C::SwitchCoolDown' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, AllWheels_arr) == 0x000D00, "Member 'AAVS_VehicleMaster_C::AllWheels_arr' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, WheelBoneName) == 0x000D10, "Member 'AAVS_VehicleMaster_C::WheelBoneName' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ParticlesForRenderTargetMud) == 0x000D20, "Member 'AAVS_VehicleMaster_C::ParticlesForRenderTargetMud' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DestroyedLinearImpulse) == 0x000D30, "Member 'AAVS_VehicleMaster_C::DestroyedLinearImpulse' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DestroyedAngularImpulse) == 0x000D48, "Member 'AAVS_VehicleMaster_C::DestroyedAngularImpulse' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, HandbrakeOn_SFX) == 0x000D60, "Member 'AAVS_VehicleMaster_C::HandbrakeOn_SFX' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TochedWaterLevel_Z) == 0x000D68, "Member 'AAVS_VehicleMaster_C::TochedWaterLevel_Z' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, UnderWaterTimer) == 0x000D80, "Member 'AAVS_VehicleMaster_C::UnderWaterTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemPassenger_FR_InMontage) == 0x000D88, "Member 'AAVS_VehicleMaster_C::FemPassenger_FR_InMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemPassenger_BL_InMontage) == 0x000D90, "Member 'AAVS_VehicleMaster_C::FemPassenger_BL_InMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemPassenger_BR_InMontage) == 0x000D98, "Member 'AAVS_VehicleMaster_C::FemPassenger_BR_InMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemPassenger_FR_OutMontage) == 0x000DA0, "Member 'AAVS_VehicleMaster_C::FemPassenger_FR_OutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemPassenger_BL_OutMontage) == 0x000DA8, "Member 'AAVS_VehicleMaster_C::FemPassenger_BL_OutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemPassenger_BR_OutMontage) == 0x000DB0, "Member 'AAVS_VehicleMaster_C::FemPassenger_BR_OutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemDriverIn_Montage) == 0x000DB8, "Member 'AAVS_VehicleMaster_C::FemDriverIn_Montage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FemDriverOutMontage) == 0x000DC0, "Member 'AAVS_VehicleMaster_C::FemDriverOutMontage' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, LandscapeReference) == 0x000DC8, "Member 'AAVS_VehicleMaster_C::LandscapeReference' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Player) == 0x000DD0, "Member 'AAVS_VehicleMaster_C::Player' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, As_Survival_Player) == 0x000DD8, "Member 'AAVS_VehicleMaster_C::As_Survival_Player' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CanExitSpeed) == 0x000DE0, "Member 'AAVS_VehicleMaster_C::CanExitSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, LandscapeProxyReference) == 0x000DE8, "Member 'AAVS_VehicleMaster_C::LandscapeProxyReference' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, RenderTarget) == 0x000DF8, "Member 'AAVS_VehicleMaster_C::RenderTarget' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, PlayersInCar_ebaniKostil) == 0x000E00, "Member 'AAVS_VehicleMaster_C::PlayersInCar_ebaniKostil' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, AntiKrutitsia) == 0x000E10, "Member 'AAVS_VehicleMaster_C::AntiKrutitsia' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, KuzowMesh) == 0x000E20, "Member 'AAVS_VehicleMaster_C::KuzowMesh' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, FrontLight_DMI) == 0x000E28, "Member 'AAVS_VehicleMaster_C::FrontLight_DMI' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, BackLightDMI) == 0x000E30, "Member 'AAVS_VehicleMaster_C::BackLightDMI' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TouchWater) == 0x000E38, "Member 'AAVS_VehicleMaster_C::TouchWater' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DrownCurve) == 0x000E40, "Member 'AAVS_VehicleMaster_C::DrownCurve' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DrownInitialVelocityAfter) == 0x000E48, "Member 'AAVS_VehicleMaster_C::DrownInitialVelocityAfter' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, MeshUnderWater) == 0x000E60, "Member 'AAVS_VehicleMaster_C::MeshUnderWater' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, UnderwaterDrowingCarTimer) == 0x000E68, "Member 'AAVS_VehicleMaster_C::UnderwaterDrowingCarTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, VehicleUpVecor) == 0x000E70, "Member 'AAVS_VehicleMaster_C::VehicleUpVecor' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DifferenceInWaterLevel) == 0x000E88, "Member 'AAVS_VehicleMaster_C::DifferenceInWaterLevel' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DifferenceInWaterToDie) == 0x000E90, "Member 'AAVS_VehicleMaster_C::DifferenceInWaterToDie' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, StealAlarmSiren) == 0x000E98, "Member 'AAVS_VehicleMaster_C::StealAlarmSiren' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, CarAlarmactive) == 0x000EA0, "Member 'AAVS_VehicleMaster_C::CarAlarmactive' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, OwnerDeadOrDestroyed) == 0x000EA1, "Member 'AAVS_VehicleMaster_C::OwnerDeadOrDestroyed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Car_Tipe) == 0x000EA2, "Member 'AAVS_VehicleMaster_C::Car_Tipe' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Base_DamageOnHit) == 0x000EA4, "Member 'AAVS_VehicleMaster_C::Base_DamageOnHit' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TimeAfterExplode) == 0x000EA8, "Member 'AAVS_VehicleMaster_C::TimeAfterExplode' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, SelfDestroyTimer) == 0x000EB0, "Member 'AAVS_VehicleMaster_C::SelfDestroyTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TimeToExplode) == 0x000EB8, "Member 'AAVS_VehicleMaster_C::TimeToExplode' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Dirt_DMI) == 0x000EC0, "Member 'AAVS_VehicleMaster_C::Dirt_DMI' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DirtOpacity_DMI) == 0x000EC8, "Member 'AAVS_VehicleMaster_C::DirtOpacity_DMI' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DirtGainSpeed) == 0x000ED0, "Member 'AAVS_VehicleMaster_C::DirtGainSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DirtLoseSpeed) == 0x000ED8, "Member 'AAVS_VehicleMaster_C::DirtLoseSpeed' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Dirt_DMI_Array) == 0x000EE0, "Member 'AAVS_VehicleMaster_C::Dirt_DMI_Array' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DirtMats_arr) == 0x000EF0, "Member 'AAVS_VehicleMaster_C::DirtMats_arr' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Door) == 0x000F00, "Member 'AAVS_VehicleMaster_C::Door' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, InitialStart) == 0x000F10, "Member 'AAVS_VehicleMaster_C::InitialStart' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_DefLongitudinalFriction) == 0x000F18, "Member 'AAVS_VehicleMaster_C::Rear_DefLongitudinalFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_DefLongitudinalFriction) == 0x000F20, "Member 'AAVS_VehicleMaster_C::Front_DefLongitudinalFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_LaterallFriction) == 0x000F28, "Member 'AAVS_VehicleMaster_C::Front_LaterallFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_LaterallFriction) == 0x000F2C, "Member 'AAVS_VehicleMaster_C::Rear_LaterallFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_Fx_LateralScale) == 0x000F30, "Member 'AAVS_VehicleMaster_C::Rear_Fx_LateralScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_Fx_LateralScale) == 0x000F34, "Member 'AAVS_VehicleMaster_C::Front_Fx_LateralScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_Fy_LongitudinalScale) == 0x000F38, "Member 'AAVS_VehicleMaster_C::Front_Fy_LongitudinalScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_Fy_LongitudinalScale) == 0x000F3C, "Member 'AAVS_VehicleMaster_C::Rear_Fy_LongitudinalScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_Def_Fy_LongitudinalScale) == 0x000F40, "Member 'AAVS_VehicleMaster_C::Rear_Def_Fy_LongitudinalScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_Def_Fy_LongitudinalScale) == 0x000F44, "Member 'AAVS_VehicleMaster_C::Front_Def_Fy_LongitudinalScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_Def_Fx_LateralScale) == 0x000F48, "Member 'AAVS_VehicleMaster_C::Front_Def_Fx_LateralScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_DefLateralFriction) == 0x000F4C, "Member 'AAVS_VehicleMaster_C::Front_DefLateralFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_DefLateralFriction) == 0x000F50, "Member 'AAVS_VehicleMaster_C::Rear_DefLateralFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_Def_Fx_LateralScale) == 0x000F54, "Member 'AAVS_VehicleMaster_C::Rear_Def_Fx_LateralScale' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Rear_LongitudinalFriction) == 0x000F58, "Member 'AAVS_VehicleMaster_C::Rear_LongitudinalFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Front_LongitudinalFriction) == 0x000F5C, "Member 'AAVS_VehicleMaster_C::Front_LongitudinalFriction' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Overlapping_Actors) == 0x000F60, "Member 'AAVS_VehicleMaster_C::Overlapping_Actors' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, Wheel_DMI) == 0x000F70, "Member 'AAVS_VehicleMaster_C::Wheel_DMI' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieHitLocation) == 0x000F78, "Member 'AAVS_VehicleMaster_C::ZombieHitLocation' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, ZombieHitNormal) == 0x000F90, "Member 'AAVS_VehicleMaster_C::ZombieHitNormal' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, KillZombieZeroSpeedTimer) == 0x000FA8, "Member 'AAVS_VehicleMaster_C::KillZombieZeroSpeedTimer' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, OwnerSteamId) == 0x000FB0, "Member 'AAVS_VehicleMaster_C::OwnerSteamId' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, DontFckngMove) == 0x000FC0, "Member 'AAVS_VehicleMaster_C::DontFckngMove' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, WaterWheelFMOD) == 0x000FC8, "Member 'AAVS_VehicleMaster_C::WaterWheelFMOD' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, TouchingWater) == 0x000FD0, "Member 'AAVS_VehicleMaster_C::TouchingWater' has a wrong offset!");
static_assert(offsetof(AAVS_VehicleMaster_C, EmergencySocket) == 0x000FD8, "Member 'AAVS_VehicleMaster_C::EmergencySocket' has a wrong offset!");

}

