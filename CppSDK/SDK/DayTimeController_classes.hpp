#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DayTimeController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass DayTimeController.DayTimeController_C
// 0x0178 (0x0408 - 0x0290)
class ADayTimeController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        TimeOfDay;                                         // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeOffset;                                        // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SecInHour;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SunDiskRotator;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_Sky_SphereCustom_C*                 SkySphere;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ASkyLight*                              SkyLight;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNight;                                           // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LightRotator;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        LightState;                                        // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  Fog;                                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ADirectionalLight*                      ActualLight;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class APointLight*                            CouldsPointLight;                                  // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class AStaticMeshActor*>               Clouds_MI_HDRCloud_1;                              // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class AStaticMeshActor*>               Clouds_MI_HDRCloud_2;                              // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class UCurveFloat*                            BloomScaleCurve;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            OcclusionDepthCurve;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SunLightIntensityCurve;                            // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            LightIntensityCurve;                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      LightColorCurve;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      BloomTintCurve;                                    // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      SunLightCurve;                                     // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogDensityCurve;                                   // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FogStartDistanceCurve;                             // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      FogColorCurve;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SunBrightnessCurve;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             NightBegin;                                        // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DayBegin;                                          // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveLinearColor*                      SkyScatterCurve;                                   // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      GroundScatterCurve;                                // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      CloundTint;                                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      CloundPointLightColorCurve;                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_HDR_Cloud_1;                                    // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_HDR_Cloud_2;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MainPlayerInBunker;                                // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SkyLightScale;                                     // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EntranceTimer;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SkyLightIntensity;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ExitTimer;                                         // 0x03E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentForestAmb;                                  // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentBunkerAmb;                                  // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LightIntensity;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BunekerEntranceUpdate();
	void BunkerEntered(class ASurvivalPlayer_C* Survival, const struct FVector& EnterPoint);
	void BunkerExit(class ASurvivalPlayer_C* Survival, const struct FVector& ExitPoint);
	void BunkerExitTick();
	void CalculateTime(double Delta);
	void ClearTimers();
	void DayBegin__DelegateSignature();
	void ExecuteUbergraph_DayTimeController(int32 EntryPoint);
	void NightBegin__DelegateSignature();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UpdateSun();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DayTimeController_C">();
	}
	static class ADayTimeController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADayTimeController_C>();
	}
};
static_assert(alignof(ADayTimeController_C) == 0x000008, "Wrong alignment on ADayTimeController_C");
static_assert(sizeof(ADayTimeController_C) == 0x000408, "Wrong size on ADayTimeController_C");
static_assert(offsetof(ADayTimeController_C, UberGraphFrame) == 0x000290, "Member 'ADayTimeController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, DefaultSceneRoot) == 0x000298, "Member 'ADayTimeController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, TimeOfDay) == 0x0002A0, "Member 'ADayTimeController_C::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, TimeOffset) == 0x0002A8, "Member 'ADayTimeController_C::TimeOffset' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SecInHour) == 0x0002B0, "Member 'ADayTimeController_C::SecInHour' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SunDiskRotator) == 0x0002B8, "Member 'ADayTimeController_C::SunDiskRotator' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SkySphere) == 0x0002C0, "Member 'ADayTimeController_C::SkySphere' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SkyLight) == 0x0002C8, "Member 'ADayTimeController_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, IsNight) == 0x0002D0, "Member 'ADayTimeController_C::IsNight' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, LightRotator) == 0x0002D8, "Member 'ADayTimeController_C::LightRotator' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, LightState) == 0x0002E0, "Member 'ADayTimeController_C::LightState' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, Fog) == 0x0002E8, "Member 'ADayTimeController_C::Fog' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, ActualLight) == 0x0002F0, "Member 'ADayTimeController_C::ActualLight' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, CouldsPointLight) == 0x0002F8, "Member 'ADayTimeController_C::CouldsPointLight' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, Clouds_MI_HDRCloud_1) == 0x000300, "Member 'ADayTimeController_C::Clouds_MI_HDRCloud_1' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, Clouds_MI_HDRCloud_2) == 0x000310, "Member 'ADayTimeController_C::Clouds_MI_HDRCloud_2' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, BloomScaleCurve) == 0x000320, "Member 'ADayTimeController_C::BloomScaleCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, OcclusionDepthCurve) == 0x000328, "Member 'ADayTimeController_C::OcclusionDepthCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SunLightIntensityCurve) == 0x000330, "Member 'ADayTimeController_C::SunLightIntensityCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, LightIntensityCurve) == 0x000338, "Member 'ADayTimeController_C::LightIntensityCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, LightColorCurve) == 0x000340, "Member 'ADayTimeController_C::LightColorCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, BloomTintCurve) == 0x000348, "Member 'ADayTimeController_C::BloomTintCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SunLightCurve) == 0x000350, "Member 'ADayTimeController_C::SunLightCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, FogDensityCurve) == 0x000358, "Member 'ADayTimeController_C::FogDensityCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, FogStartDistanceCurve) == 0x000360, "Member 'ADayTimeController_C::FogStartDistanceCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, FogColorCurve) == 0x000368, "Member 'ADayTimeController_C::FogColorCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SunBrightnessCurve) == 0x000370, "Member 'ADayTimeController_C::SunBrightnessCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, NightBegin) == 0x000378, "Member 'ADayTimeController_C::NightBegin' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, DayBegin) == 0x000388, "Member 'ADayTimeController_C::DayBegin' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SkyScatterCurve) == 0x000398, "Member 'ADayTimeController_C::SkyScatterCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, GroundScatterCurve) == 0x0003A0, "Member 'ADayTimeController_C::GroundScatterCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, CloundTint) == 0x0003A8, "Member 'ADayTimeController_C::CloundTint' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, CloundPointLightColorCurve) == 0x0003B0, "Member 'ADayTimeController_C::CloundPointLightColorCurve' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, MI_HDR_Cloud_1) == 0x0003B8, "Member 'ADayTimeController_C::MI_HDR_Cloud_1' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, MI_HDR_Cloud_2) == 0x0003C0, "Member 'ADayTimeController_C::MI_HDR_Cloud_2' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, MainPlayerInBunker) == 0x0003C8, "Member 'ADayTimeController_C::MainPlayerInBunker' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SkyLightScale) == 0x0003D0, "Member 'ADayTimeController_C::SkyLightScale' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, EntranceTimer) == 0x0003D8, "Member 'ADayTimeController_C::EntranceTimer' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, SkyLightIntensity) == 0x0003E0, "Member 'ADayTimeController_C::SkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, ExitTimer) == 0x0003E8, "Member 'ADayTimeController_C::ExitTimer' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, CurrentForestAmb) == 0x0003F0, "Member 'ADayTimeController_C::CurrentForestAmb' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, CurrentBunkerAmb) == 0x0003F8, "Member 'ADayTimeController_C::CurrentBunkerAmb' has a wrong offset!");
static_assert(offsetof(ADayTimeController_C, LightIntensity) == 0x000400, "Member 'ADayTimeController_C::LightIntensity' has a wrong offset!");

}

