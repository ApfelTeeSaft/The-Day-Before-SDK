#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvivalPlayer_Test

#include "Basic.hpp"

#include "SurvivalPlayer_Test_classes.hpp"
#include "SurvivalPlayer_Test_parameters.hpp"


namespace SDK
{

// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.AfterClimbInputCheck__FinishedFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::AfterClimbInputCheck__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "AfterClimbInputCheck__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.AfterClimbInputCheck__UpdateFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::AfterClimbInputCheck__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "AfterClimbInputCheck__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.AnotherPlayerLeaveSquad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APS_TDB_C*                        LeavePS                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::AnotherPlayerLeaveSquad(class APS_TDB_C* LeavePS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "AnotherPlayerLeaveSquad");

	Params::SurvivalPlayer_Test_C_AnotherPlayerLeaveSquad Parms{};

	Parms.LeavePS = LeavePS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ASurvivalPlayer_Test_C::BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::SurvivalPlayer_Test_C_BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");

	Params::SurvivalPlayer_Test_C_BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CalculateBSh
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CalculateBSh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CalculateBSh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CancelTeleport
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CancelTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CancelTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CancelTelepOwning
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CancelTelepOwning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CancelTelepOwning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CantMovePrint
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CantMovePrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CantMovePrint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CapsuleHasRoomCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HeightOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RadiusOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasRoom                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, bool* HasRoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CapsuleHasRoomCheck");

	Params::SurvivalPlayer_Test_C_CapsuleHasRoomCheck Parms{};

	Parms.Capsule = Capsule;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.HeightOffset = HeightOffset;
	Parms.RadiusOffset = RadiusOffset;

	UObject::ProcessEvent(Func, &Parms);

	if (HasRoom != nullptr)
		*HasRoom = Parms.HasRoom;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ChatPreviewBeginOverlap__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Other_Actor_Ref                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ChatPreviewBeginOverlap__DelegateSignature(class AActor* Other_Actor_Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ChatPreviewBeginOverlap__DelegateSignature");

	Params::SurvivalPlayer_Test_C_ChatPreviewBeginOverlap__DelegateSignature Parms{};

	Parms.Other_Actor_Ref = Other_Actor_Ref;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ChatPreviewEndOverlap__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Other_Actor_Ref                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ChatPreviewEndOverlap__DelegateSignature(class AActor* Other_Actor_Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ChatPreviewEndOverlap__DelegateSignature");

	Params::SurvivalPlayer_Test_C_ChatPreviewEndOverlap__DelegateSignature Parms{};

	Parms.Other_Actor_Ref = Other_Actor_Ref;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CheckForClimb
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CheckForClimb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CheckForClimb");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CheckHB
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CheckHB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CheckHB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CHeckHouseBox
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CHeckHouseBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CHeckHouseBox");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CheckNamesTick
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CheckNamesTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CheckNamesTick");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CheckNamesTickAlternative
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::CheckNamesTickAlternative()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CheckNamesTickAlternative");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Vault                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbCheck(bool* Vault)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbCheck");

	Params::SurvivalPlayer_Test_C_ClimbCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Vault != nullptr)
		*Vault = Parms.Vault;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbPlayRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  PlayRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbPlayRate(double* PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbPlayRate");

	Params::SurvivalPlayer_Test_C_ClimbPlayRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayRate != nullptr)
		*PlayRate = Parms.PlayRate;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ClimbHeight                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FComponentAndTransform           ClimbLedgeWS                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EClimbType                              ClimbType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Param_ClimbStartTransform                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbStart(double ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType ClimbType, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform, double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbStart");

	Params::SurvivalPlayer_Test_C_ClimbStart Parms{};

	Parms.ClimbHeight = ClimbHeight;
	Parms.ClimbLedgeWS = std::move(ClimbLedgeWS);
	Parms.ClimbType = ClimbType;
	Parms.In = In;
	Parms.Width = Width;
	Parms.Move = Move;
	Parms.Param_ClimbStartTransform = std::move(Param_ClimbStartTransform);
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbStartMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ClimbHeight                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FComponentAndTransform           ClimbLedgeWS                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EClimbType                              ClimbType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Param_ClimbStartTransform                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbStartMulti(double ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType ClimbType, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform, double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbStartMulti");

	Params::SurvivalPlayer_Test_C_ClimbStartMulti Parms{};

	Parms.ClimbHeight = ClimbHeight;
	Parms.ClimbLedgeWS = std::move(ClimbLedgeWS);
	Parms.ClimbType = ClimbType;
	Parms.In = In;
	Parms.Width = Width;
	Parms.Move = Move;
	Parms.Param_ClimbStartTransform = std::move(Param_ClimbStartTransform);
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbStartServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ClimbHeight                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FComponentAndTransform           ClimbLedgeWS                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EClimbType                              ClimbType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Param_ClimbStartTransform                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbStartServ(double ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType ClimbType, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform, double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbStartServ");

	Params::SurvivalPlayer_Test_C_ClimbStartServ Parms{};

	Parms.ClimbHeight = ClimbHeight;
	Parms.ClimbLedgeWS = std::move(ClimbLedgeWS);
	Parms.ClimbType = ClimbType;
	Parms.In = In;
	Parms.Width = Width;
	Parms.Move = Move;
	Parms.Param_ClimbStartTransform = std::move(Param_ClimbStartTransform);
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbTimeline__FinishedFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::ClimbTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbTimeline__UpdateFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::ClimbTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbUpdate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BlendIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Break                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbUpdate(double BlendIn, bool* Break)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbUpdate");

	Params::SurvivalPlayer_Test_C_ClimbUpdate Parms{};

	Parms.BlendIn = BlendIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Break != nullptr)
		*Break = Parms.Break;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbWindowStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_WindowLoc                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactNormal                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbWindowStart(const struct FVector& Param_WindowLoc, const struct FVector& ImpactNormal, double Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbWindowStart");

	Params::SurvivalPlayer_Test_C_ClimbWindowStart Parms{};

	Parms.Param_WindowLoc = std::move(Param_WindowLoc);
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbWindowStartMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_WindowLoc                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactNormal                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbWindowStartMulti(const struct FVector& Param_WindowLoc, const struct FVector& ImpactNormal, double Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbWindowStartMulti");

	Params::SurvivalPlayer_Test_C_ClimbWindowStartMulti Parms{};

	Parms.Param_WindowLoc = std::move(Param_WindowLoc);
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbWindowStartServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Param_WindowLoc                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ImpactNormal                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbWindowStartServ(const struct FVector& Param_WindowLoc, const struct FVector& ImpactNormal, double Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbWindowStartServ");

	Params::SurvivalPlayer_Test_C_ClimbWindowStartServ Parms{};

	Parms.Param_WindowLoc = std::move(Param_WindowLoc);
	Parms.ImpactNormal = std::move(ImpactNormal);
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbWindowTimeline__FinishedFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::ClimbWindowTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbWindowTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbWindowTimeline__UpdateFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::ClimbWindowTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbWindowTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ClimbWindowUpdate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BlendIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Break                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ClimbWindowUpdate(double BlendIn, bool* Break)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ClimbWindowUpdate");

	Params::SurvivalPlayer_Test_C_ClimbWindowUpdate Parms{};

	Parms.BlendIn = BlendIn;

	UObject::ProcessEvent(Func, &Parms);

	if (Break != nullptr)
		*Break = Parms.Break;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CreateItemCustomRoomMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Change                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Remove                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBuildingInfo_Struct             InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerRoomBP_C*                  RoomRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::CreateItemCustomRoomMulti(class FName RowName, bool Change, bool Remove, const struct FTransform& Transform, const struct FBuildingInfo_Struct& InputPin, int32 ID, class APlayerRoomBP_C* RoomRef, TSoftClassPtr<class UClass> Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CreateItemCustomRoomMulti");

	Params::SurvivalPlayer_Test_C_CreateItemCustomRoomMulti Parms{};

	Parms.RowName = RowName;
	Parms.Change = Change;
	Parms.Remove = Remove;
	Parms.Transform = std::move(Transform);
	Parms.InputPin = std::move(InputPin);
	Parms.ID = ID;
	Parms.RoomRef = RoomRef;
	Parms.Param_Class = Param_Class;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CreateItemInCustomRoomServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             Param_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Change                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Destroy                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             DT_RowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBuildingInfo_Struct             Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::CreateItemInCustomRoomServer(TSoftClassPtr<class UClass> Param_Class, const struct FTransform& Transform, bool Change, bool Destroy, int32 ItemId, class FName DT_RowName, const struct FBuildingInfo_Struct& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CreateItemInCustomRoomServer");

	Params::SurvivalPlayer_Test_C_CreateItemInCustomRoomServer Parms{};

	Parms.Param_Class = Param_Class;
	Parms.Transform = std::move(Transform);
	Parms.Change = Change;
	Parms.Destroy = Destroy;
	Parms.ItemId = ItemId;
	Parms.DT_RowName = DT_RowName;
	Parms.Info = std::move(Info);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CreateMatArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   Self2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FMaterialArray                   MatArray1                                              (Parm, OutParm, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::CreateMatArray(class UMeshComponent* Self2, struct FMaterialArray* MatArray1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CreateMatArray");

	Params::SurvivalPlayer_Test_C_CreateMatArray Parms{};

	Parms.Self2 = Self2;

	UObject::ProcessEvent(Func, &Parms);

	if (MatArray1 != nullptr)
		*MatArray1 = std::move(Parms.MatArray1);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CStat
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Stat_type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::CStat(const class FString& Stat_type, double Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CStat");

	Params::SurvivalPlayer_Test_C_CStat Parms{};

	Parms.Stat_type = std::move(Stat_type);
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.CustomRoomCollision
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerRoomBP_C*                  RoomRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::CustomRoomCollision(class APlayerRoomBP_C* RoomRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "CustomRoomCollision");

	Params::SurvivalPlayer_Test_C_CustomRoomCollision Parms{};

	Parms.RoomRef = RoomRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DashCancel
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::DashCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DashCancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DashTimeline__FinishedFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::DashTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DashTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DashTimeline__UpdateFunc
// (BlueprintEvent)

void ASurvivalPlayer_Test_C::DashTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DashTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DebugFGear
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::DebugFGear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DebugFGear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DEBUGNextTime
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::DEBUGNextTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DEBUGNextTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DEBUGTeleportMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::DEBUGTeleportMulti(const struct FVector& Location, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DEBUGTeleportMulti");

	Params::SurvivalPlayer_Test_C_DEBUGTeleportMulti Parms{};

	Parms.Location = std::move(Location);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DEBUGTeleportServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Force                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::DEBUGTeleportServer(const struct FVector& Location, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DEBUGTeleportServer");

	Params::SurvivalPlayer_Test_C_DEBUGTeleportServer Parms{};

	Parms.Location = std::move(Location);
	Parms.Force = Force;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DEBUGTimlapseMode
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::DEBUGTimlapseMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DEBUGTimlapseMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DestroyCarServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::DestroyCarServ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DestroyCarServ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.DestroyVehicle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAVS_VehicleMaster_C*             CarRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::DestroyVehicle(class AAVS_VehicleMaster_C* CarRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "DestroyVehicle");

	Params::SurvivalPlayer_Test_C_DestroyVehicle Parms{};

	Parms.CarRef = CarRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.EnableSnowMask
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_LetSnow                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::EnableSnowMask(bool Param_LetSnow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "EnableSnowMask");

	Params::SurvivalPlayer_Test_C_EnableSnowMask Parms{};

	Parms.Param_LetSnow = Param_LetSnow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.EnterCarOnTeleport
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::EnterCarOnTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "EnterCarOnTeleport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.EnterRoom
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Enter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Char                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    AsGuest                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           RoomName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::EnterRoom(bool Param_Enter, class ASurvivalPlayer_V2_C* Param_Char, bool AsGuest, class ASurvivalPlayer_V2_C* Param_Owner, const class FString& RoomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "EnterRoom");

	Params::SurvivalPlayer_Test_C_EnterRoom Parms{};

	Parms.Param_Enter = Param_Enter;
	Parms.Param_Char = Param_Char;
	Parms.AsGuest = AsGuest;
	Parms.Param_Owner = Param_Owner;
	Parms.RoomName = std::move(RoomName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ExecuteUbergraph_SurvivalPlayer_Test
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ExecuteUbergraph_SurvivalPlayer_Test(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ExecuteUbergraph_SurvivalPlayer_Test");

	Params::SurvivalPlayer_Test_C_ExecuteUbergraph_SurvivalPlayer_Test Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ExitSwitcher
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On_                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ExitSwitcher(bool On_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ExitSwitcher");

	Params::SurvivalPlayer_Test_C_ExitSwitcher Parms{};

	Parms.On_ = On_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ExitSwitcherServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    On_                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ExitSwitcherServer(bool On_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ExitSwitcherServer");

	Params::SurvivalPlayer_Test_C_ExitSwitcherServer Parms{};

	Parms.On_ = On_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.FindEquipMeshes
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::FindEquipMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "FindEquipMeshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.FindEquippableMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USkinnedMeshComponent*            Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FEquipmentData                   Out_Row                                                (Parm, OutParm, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::FindEquippableMesh(class USkinnedMeshComponent* Target, struct FEquipmentData* Out_Row)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "FindEquippableMesh");

	Params::SurvivalPlayer_Test_C_FindEquippableMesh Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Row != nullptr)
		*Out_Row = std::move(Parms.Out_Row);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetCapsuleBaseLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ASurvivalPlayer_Test_C::GetCapsuleBaseLocation(double ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetCapsuleBaseLocation");

	Params::SurvivalPlayer_Test_C_GetCapsuleBaseLocation Parms{};

	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetClimbAsset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EClimbType                              ClimbType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FClimbAsset                      Value                                                  (Parm, OutParm, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::GetClimbAsset(EClimbType ClimbType, bool In, bool Move, double Height, struct FClimbAsset* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetClimbAsset");

	Params::SurvivalPlayer_Test_C_GetClimbAsset Parms{};

	Parms.ClimbType = ClimbType;
	Parms.In = In;
	Parms.Move = Move;
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = std::move(Parms.Value);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::GetDamage(class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetDamage");

	Params::SurvivalPlayer_Test_C_GetDamage Parms{};

	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetNameWidgetComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidgetComponent*                 PlayerNameComponent                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UWBP_PlayerName3DWidget_C*        Param_PlayerNameWidget                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::GetNameWidgetComponent(class UWidgetComponent** PlayerNameComponent, class UWBP_PlayerName3DWidget_C** Param_PlayerNameWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetNameWidgetComponent");

	Params::SurvivalPlayer_Test_C_GetNameWidgetComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerNameComponent != nullptr)
		*PlayerNameComponent = Parms.PlayerNameComponent;

	if (Param_PlayerNameWidget != nullptr)
		*Param_PlayerNameWidget = Parms.Param_PlayerNameWidget;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetPivotTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform ASurvivalPlayer_Test_C::GetPivotTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetPivotTarget");

	Params::SurvivalPlayer_Test_C_GetPivotTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetTraceParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceOrigin                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TraceRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery                         NewParam1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::GetTraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* NewParam1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetTraceParams");

	Params::SurvivalPlayer_Test_C_GetTraceParams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceOrigin != nullptr)
		*TraceOrigin = std::move(Parms.TraceOrigin);

	if (TraceRadius != nullptr)
		*TraceRadius = Parms.TraceRadius;

	if (NewParam1 != nullptr)
		*NewParam1 = Parms.NewParam1;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GetWindowClimbAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_WindowClimb                   WindowClimbAsset                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::GetWindowClimbAsset(double Height, struct FS_WindowClimb* WindowClimbAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GetWindowClimbAsset");

	Params::SurvivalPlayer_Test_C_GetWindowClimbAsset Parms{};

	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);

	if (WindowClimbAsset != nullptr)
		*WindowClimbAsset = std::move(Parms.WindowClimbAsset);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.GiveCarRefToSquad
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CarRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::GiveCarRefToSquad(class AActor* CarRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "GiveCarRefToSquad");

	Params::SurvivalPlayer_Test_C_GiveCarRefToSquad Parms{};

	Parms.CarRef = CarRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.HidePlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_PlayerHided                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::HidePlayer(bool Param_PlayerHided)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "HidePlayer");

	Params::SurvivalPlayer_Test_C_HidePlayer Parms{};

	Parms.Param_PlayerHided = Param_PlayerHided;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.HouseEnter
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::HouseEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "HouseEnter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.HouseExit
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::HouseExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "HouseExit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Immortal
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::Immortal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Immortal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Init House Box
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::Init_House_Box()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Init House Box");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.InitLocalPlayer
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::InitLocalPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "InitLocalPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.InitNameWidget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::InitNameWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "InitNameWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.InpActEvt_Ctrl_F_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::InpActEvt_Ctrl_F_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "InpActEvt_Ctrl_F_K2Node_InputKeyEvent_0");

	Params::SurvivalPlayer_Test_C_InpActEvt_Ctrl_F_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.InpAxisEvt_InclineAxis_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::InpAxisEvt_InclineAxis_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "InpAxisEvt_InclineAxis_K2Node_InputAxisEvent_0");

	Params::SurvivalPlayer_Test_C_InpAxisEvt_InclineAxis_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.InvokeDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::InvokeDamage(class AActor* DamageCauser, class AActor* DamageTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "InvokeDamage");

	Params::SurvivalPlayer_Test_C_InvokeDamage Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.InvokeDamageServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::InvokeDamageServ(class AActor* DamageCauser, class AActor* DamageTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "InvokeDamageServ");

	Params::SurvivalPlayer_Test_C_InvokeDamageServ Parms{};

	Parms.DamageCauser = DamageCauser;
	Parms.DamageTarget = DamageTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ItemDropRequest
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSI_Slot_C*                      ItemRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FFItemInfo                       Param_ItemInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  Container                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ItemDropRequest(class UJSI_Slot_C* ItemRef, const struct FFItemInfo& Param_ItemInfo, int32 Count, class UJSIContainer_C* Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ItemDropRequest");

	Params::SurvivalPlayer_Test_C_ItemDropRequest Parms{};

	Parms.ItemRef = ItemRef;
	Parms.Param_ItemInfo = std::move(Param_ItemInfo);
	Parms.Count = Count;
	Parms.Container = Container;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "K2_OnMovementModeChanged");

	Params::SurvivalPlayer_Test_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.KnockedDown
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Killer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::KnockedDown(class APawn* Param_Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "KnockedDown");

	Params::SurvivalPlayer_Test_C_KnockedDown Parms{};

	Parms.Param_Killer = Param_Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.LightRotation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Yaw                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Pitch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::LightRotation(double Param_Yaw, double Param_Pitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "LightRotation");

	Params::SurvivalPlayer_Test_C_LightRotation Parms{};

	Parms.Param_Yaw = Param_Yaw;
	Parms.Param_Pitch = Param_Pitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.LocalAcceptInviteToHome
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::LocalAcceptInviteToHome()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "LocalAcceptInviteToHome");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.LocationAnnul
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::LocationAnnul()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "LocationAnnul");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.LootPointResetServerDEBUG
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::LootPointResetServerDEBUG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "LootPointResetServerDEBUG");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.LootSpeedTrain
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Passed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::LootSpeedTrain(bool* Passed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "LootSpeedTrain");

	Params::SurvivalPlayer_Test_C_LootSpeedTrain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Passed != nullptr)
		*Passed = Parms.Passed;
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.MakeCarMissing
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CarName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Bought                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::MakeCarMissing(const class FString& CarName, bool Bought)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "MakeCarMissing");

	Params::SurvivalPlayer_Test_C_MakeCarMissing Parms{};

	Parms.CarName = std::move(CarName);
	Parms.Bought = Bought;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.MakeCarMissingServ
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Car                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::MakeCarMissingServ(const class FString& Car, bool Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "MakeCarMissingServ");

	Params::SurvivalPlayer_Test_C_MakeCarMissingServ Parms{};

	Parms.Car = std::move(Car);
	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ManualBeginPlay
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ManualBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ManualBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.MultiDeathRagdoll
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HitAngle                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::MultiDeathRagdoll(double HitAngle, const struct FVector& HitLocation, class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "MultiDeathRagdoll");

	Params::SurvivalPlayer_Test_C_MultiDeathRagdoll Parms{};

	Parms.HitAngle = HitAngle;
	Parms.HitLocation = std::move(HitLocation);
	Parms.BoneName = BoneName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.MultiLocationSync
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::MultiLocationSync(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "MultiLocationSync");

	Params::SurvivalPlayer_Test_C_MultiLocationSync Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.MultiQEXplode
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::MultiQEXplode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "MultiQEXplode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnCraftProcessEnded
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnCraftProcessEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnCraftProcessEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnCraftProcessStarted
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnCraftProcessStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnCraftProcessStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnCraftWIndowClosed
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnCraftWIndowClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnCraftWIndowClosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnCraftWindowOpened
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnCraftWindowOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnCraftWindowOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnEvaquated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnEvaquated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnEvaquated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnEvaquatedServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnEvaquatedServ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnEvaquatedServ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnHideDeathScreen
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EWE_NewDeathScreenState                 NewScreenState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::OnHideDeathScreen(EWE_NewDeathScreenState NewScreenState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnHideDeathScreen");

	Params::SurvivalPlayer_Test_C_OnHideDeathScreen Parms{};

	Parms.NewScreenState = NewScreenState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnRep_IsLoading
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnRep_IsLoading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnRep_IsLoading");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnRep_Phase
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnRep_Phase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnRep_Phase");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnRoomEnteredDisp__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnRoomEnteredDisp__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnRoomEnteredDisp__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnStandRotation
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnStandRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnStandRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.OnStartTeleporting
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::OnStartTeleporting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "OnStartTeleporting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Phase Print Func
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::Phase_Print_Func()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Phase Print Func");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Pick Point Func
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerSpawnPoint_C*>   Param_RandomRegions                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Param_ToHub_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithCar                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::Pick_Point_Func(TArray<class ABP_PlayerSpawnPoint_C*>& Param_RandomRegions, bool Param_ToHub_, bool WithCar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Pick Point Func");

	Params::SurvivalPlayer_Test_C_Pick_Point_Func Parms{};

	Parms.Param_RandomRegions = std::move(Param_RandomRegions);
	Parms.Param_ToHub_ = Param_ToHub_;
	Parms.WithCar = WithCar;

	UObject::ProcessEvent(Func, &Parms);

	Param_RandomRegions = std::move(Parms.Param_RandomRegions);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.PickSpawnPointLocal
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerSpawnPoint_C*>   SP_Array                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ToHub                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithCar                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::PickSpawnPointLocal(const TArray<class ABP_PlayerSpawnPoint_C*>& SP_Array, const bool ToHub, bool WithCar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "PickSpawnPointLocal");

	Params::SurvivalPlayer_Test_C_PickSpawnPointLocal Parms{};

	Parms.SP_Array = std::move(SP_Array);
	Parms.ToHub = ToHub;
	Parms.WithCar = WithCar;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.PickSpawnPointServ
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerSpawnPoint_C*>   SP_Array                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ToHub                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithCar                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::PickSpawnPointServ(TArray<class ABP_PlayerSpawnPoint_C*>& SP_Array, bool ToHub, bool WithCar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "PickSpawnPointServ");

	Params::SurvivalPlayer_Test_C_PickSpawnPointServ Parms{};

	Parms.SP_Array = std::move(SP_Array);
	Parms.ToHub = ToHub;
	Parms.WithCar = WithCar;

	UObject::ProcessEvent(Func, &Parms);

	SP_Array = std::move(Parms.SP_Array);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.PossesTestChar
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::PossesTestChar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "PossesTestChar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ProjectileOptimization
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ProjectileOptimization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ProjectileOptimization");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASurvivalPlayer_Test_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ReceiveDebugFGear
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           DebugMessage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ReceiveDebugFGear(const class FString& DebugMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ReceiveDebugFGear");

	Params::SurvivalPlayer_Test_C_ReceiveDebugFGear Parms{};

	Parms.DebugMessage = std::move(DebugMessage);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void ASurvivalPlayer_Test_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ReceiveEndPlay");

	Params::SurvivalPlayer_Test_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ReceiveTick");

	Params::SurvivalPlayer_Test_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ReInitHouse
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_HouseName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ReInitHouse(const class FString& Param_HouseName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ReInitHouse");

	Params::SurvivalPlayer_Test_C_ReInitHouse Parms{};

	Parms.Param_HouseName = std::move(Param_HouseName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RemoveNamePlayers
// (Private, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::RemoveNamePlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RemoveNamePlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RenderMarker
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::RenderMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RenderMarker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RoomEnteredMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerRoomBP_C*                  Room                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Char                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_As_Guest                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::RoomEnteredMulti(class APlayerRoomBP_C* Room, class ASurvivalPlayer_V2_C* Param_Char, class ASurvivalPlayer_V2_C* Param_Owner, bool Param_As_Guest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RoomEnteredMulti");

	Params::SurvivalPlayer_Test_C_RoomEnteredMulti Parms{};

	Parms.Room = Room;
	Parms.Param_Char = Param_Char;
	Parms.Param_Owner = Param_Owner;
	Parms.Param_As_Guest = Param_As_Guest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RoomEnteredServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerRoomBP_C*                  Room                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Char                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_As_Guest                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::RoomEnteredServ(class APlayerRoomBP_C* Room, class ASurvivalPlayer_V2_C* Param_Char, class ASurvivalPlayer_V2_C* Param_Owner, bool Param_As_Guest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RoomEnteredServ");

	Params::SurvivalPlayer_Test_C_RoomEnteredServ Parms{};

	Parms.Room = Room;
	Parms.Param_Char = Param_Char;
	Parms.Param_Owner = Param_Owner;
	Parms.Param_As_Guest = Param_As_Guest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RoomInsides
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerRoomBP_C*                  Room                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FPlayerRoomItemsStructure        Info                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::RoomInsides(class APlayerRoomBP_C* Room, const struct FPlayerRoomItemsStructure& Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RoomInsides");

	Params::SurvivalPlayer_Test_C_RoomInsides Parms{};

	Parms.Room = Room;
	Parms.Info = std::move(Info);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RoomMulti
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerRoomBP_C*                  RoomRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_Enter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Char                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    AsGuest                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::RoomMulti(class APlayerRoomBP_C* RoomRef, bool Param_Enter, class ASurvivalPlayer_V2_C* Param_Char, bool AsGuest, class ASurvivalPlayer_V2_C* Param_Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RoomMulti");

	Params::SurvivalPlayer_Test_C_RoomMulti Parms{};

	Parms.RoomRef = RoomRef;
	Parms.Param_Enter = Param_Enter;
	Parms.Param_Char = Param_Char;
	Parms.AsGuest = AsGuest;
	Parms.Param_Owner = Param_Owner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RoomServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_Enter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Char                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    AsGuest                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             Param_Owner                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           RoomName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::RoomServer(bool Param_Enter, class ASurvivalPlayer_V2_C* Param_Char, bool AsGuest, class ASurvivalPlayer_V2_C* Param_Owner, const class FString& RoomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RoomServer");

	Params::SurvivalPlayer_Test_C_RoomServer Parms{};

	Parms.Param_Enter = Param_Enter;
	Parms.Param_Char = Param_Char;
	Parms.AsGuest = AsGuest;
	Parms.Param_Owner = Param_Owner;
	Parms.RoomName = std::move(RoomName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.RunFadelocal
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::RunFadelocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "RunFadelocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SelfDamage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SelfDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SelfDamage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ServAcceptInviteToHome
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ServAcceptInviteToHome()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ServAcceptInviteToHome");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ServerChangeWorldOffset
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ServerChangeWorldOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ServerChangeWorldOffset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ServerKnockOutDoor
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Door_C*                       Door                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ServerKnockOutDoor(class ABP_Door_C* Door)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ServerKnockOutDoor");

	Params::SurvivalPlayer_Test_C_ServerKnockOutDoor Parms{};

	Parms.Door = Door;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ServerLocationSync
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ServerLocationSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ServerLocationSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ServerTest
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ServerTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ServerTest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Set User Name In Widget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UserName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::Set_User_Name_In_Widget(const class FString& UserName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Set User Name In Widget");

	Params::SurvivalPlayer_Test_C_Set_User_Name_In_Widget Parms{};

	Parms.UserName = std::move(UserName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Set3DWidgetPlayerName
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Ref                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::Set3DWidgetPlayerName(class AActor* Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Set3DWidgetPlayerName");

	Params::SurvivalPlayer_Test_C_Set3DWidgetPlayerName Parms{};

	Parms.Ref = Ref;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetAnimInstClassForServer
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SetAnimInstClassForServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetAnimInstClassForServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetBlizzard
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBlizzard                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetBlizzard(bool IsBlizzard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetBlizzard");

	Params::SurvivalPlayer_Test_C_SetBlizzard Parms{};

	Parms.IsBlizzard = IsBlizzard;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetClimbCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EClimbType                              ClimbType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetClimbCamera(EClimbType ClimbType, bool In, double Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetClimbCamera");

	Params::SurvivalPlayer_Test_C_SetClimbCamera Parms{};

	Parms.ClimbType = ClimbType;
	Parms.In = In;
	Parms.Height = Height;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetCraftState
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// ECraftState                             State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetCraftState(ECraftState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetCraftState");

	Params::SurvivalPlayer_Test_C_SetCraftState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetCraftStateServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECraftState                             Param_CraftState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetCraftStateServ(ECraftState Param_CraftState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetCraftStateServ");

	Params::SurvivalPlayer_Test_C_SetCraftStateServ Parms{};

	Parms.Param_CraftState = Param_CraftState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetCurrentAliases_Serv
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_CurrentAliases                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetCurrentAliases_Serv(const class FString& Param_CurrentAliases)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetCurrentAliases_Serv");

	Params::SurvivalPlayer_Test_C_SetCurrentAliases_Serv Parms{};

	Parms.Param_CurrentAliases = std::move(Param_CurrentAliases);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetEquipTier
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SetEquipTier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetEquipTier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetPlayerIsLoading
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    True_                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetPlayerIsLoading(bool True_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetPlayerIsLoading");

	Params::SurvivalPlayer_Test_C_SetPlayerIsLoading Parms{};

	Parms.True_ = True_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetSnowMask
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SetSnowMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetSnowMask");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetStaminaUse
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StaminaUse                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetStaminaUse(bool StaminaUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetStaminaUse");

	Params::SurvivalPlayer_Test_C_SetStaminaUse Parms{};

	Parms.StaminaUse = StaminaUse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetStance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStanceState                            NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetStance(EStanceState NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetStance");

	Params::SurvivalPlayer_Test_C_SetStance Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetStatCutscene
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStatType                               Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Value                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetStatCutscene(const EStatType Key, const double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetStatCutscene");

	Params::SurvivalPlayer_Test_C_SetStatCutscene Parms{};

	Parms.Key = Key;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetVisiblePlayerName
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetVisiblePlayerName(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetVisiblePlayerName");

	Params::SurvivalPlayer_Test_C_SetVisiblePlayerName Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetWeaponAmmoCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentAmmo                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxAmmo                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetWeaponAmmoCount(int32 CurrentAmmo, int32 MaxAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetWeaponAmmoCount");

	Params::SurvivalPlayer_Test_C_SetWeaponAmmoCount Parms{};

	Parms.CurrentAmmo = CurrentAmmo;
	Parms.MaxAmmo = MaxAmmo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetWeaponAmmoVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetWeaponAmmoVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetWeaponAmmoVisibility");

	Params::SurvivalPlayer_Test_C_SetWeaponAmmoVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SetWeaponType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBPE_Weapon_Type                        Param_WeaponType                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SetWeaponType(EBPE_Weapon_Type Param_WeaponType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SetWeaponType");

	Params::SurvivalPlayer_Test_C_SetWeaponType Parms{};

	Parms.Param_WeaponType = Param_WeaponType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ShowFadeIn
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Showed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::ShowFadeIn(bool Showed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ShowFadeIn");

	Params::SurvivalPlayer_Test_C_ShowFadeIn Parms{};

	Parms.Showed = Showed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SnowMaskControl
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SnowMaskControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SnowMaskControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SPANCR
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SPANCR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SPANCR");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnCar
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnCar(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnCar");

	Params::SurvivalPlayer_Test_C_SpawnCar Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnCarAndEnter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CarRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Trans                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnlyEnter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnCarAndEnter(class UClass* CarRef, const struct FTransform& Trans, bool OnlyEnter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnCarAndEnter");

	Params::SurvivalPlayer_Test_C_SpawnCarAndEnter Parms{};

	Parms.CarRef = CarRef;
	Parms.Trans = std::move(Trans);
	Parms.OnlyEnter = OnlyEnter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnCarAndEnterServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CarRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Trans                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnCarAndEnterServ(class UClass* CarRef, const struct FTransform& Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnCarAndEnterServ");

	Params::SurvivalPlayer_Test_C_SpawnCarAndEnterServ Parms{};

	Parms.CarRef = CarRef;
	Parms.Trans = std::move(Trans);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnCheatBox
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnCheatBox(int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnCheatBox");

	Params::SurvivalPlayer_Test_C_SpawnCheatBox Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnCheatChest
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnCheatChest(const struct FVector& Spawn_Transform_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnCheatChest");

	Params::SurvivalPlayer_Test_C_SpawnCheatChest Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnDodgeServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnDodgeServ(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnDodgeServ");

	Params::SurvivalPlayer_Test_C_SpawnDodgeServ Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnLightBox
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnLightBox(const struct FVector& Spawn_Transform_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnLightBox");

	Params::SurvivalPlayer_Test_C_SpawnLightBox Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SpawnWorkbench
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SpawnWorkbench(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SpawnWorkbench");

	Params::SurvivalPlayer_Test_C_SpawnWorkbench Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SquadIdChanges
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::SquadIdChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SquadIdChanges");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.StartTelepFromCar
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAVS_VehicleMaster_C*             Car                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawnPoint_C*>   Param_Regions                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ASurvivalPlayer_Test_C::StartTelepFromCar(class AAVS_VehicleMaster_C* Car, const TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "StartTelepFromCar");

	Params::SurvivalPlayer_Test_C_StartTelepFromCar Parms{};

	Parms.Car = Car;
	Parms.Param_Regions = std::move(Param_Regions);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.StartTelepFromCarOwn
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAVS_VehicleMaster_C*             Param_Car_Ref                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawnPoint_C*>   Param_Regions                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ASurvivalPlayer_Test_C::StartTelepFromCarOwn(class AAVS_VehicleMaster_C* Param_Car_Ref, TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "StartTelepFromCarOwn");

	Params::SurvivalPlayer_Test_C_StartTelepFromCarOwn Parms{};

	Parms.Param_Car_Ref = Param_Car_Ref;
	Parms.Param_Regions = std::move(Param_Regions);

	UObject::ProcessEvent(Func, &Parms);

	Param_Regions = std::move(Parms.Param_Regions);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.StartTelepLocal
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::StartTelepLocal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "StartTelepLocal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.StartTeleporting
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::StartTeleporting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "StartTeleporting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.StartTelepServ
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::StartTelepServ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "StartTelepServ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.SurvGrassSound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFMODEvent*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   SoundDelay                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::SurvGrassSound(class UFMODEvent* Sound, float SoundDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "SurvGrassSound");

	Params::SurvivalPlayer_Test_C_SurvGrassSound Parms{};

	Parms.Sound = Sound;
	Parms.SoundDelay = SoundDelay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.Teleporting
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Timer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AAVS_VehicleMaster_C*             CarRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawnPoint_C*>   Param_Regions                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bIsWithoutBackpack                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoBackpackTeleporter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NightWarning                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DayWarning                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::Teleporting(double Timer, class AAVS_VehicleMaster_C* CarRef, const TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions, bool bIsWithoutBackpack, bool NoBackpackTeleporter, bool NightWarning, bool DayWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "Teleporting");

	Params::SurvivalPlayer_Test_C_Teleporting Parms{};

	Parms.Timer = Timer;
	Parms.CarRef = CarRef;
	Parms.Param_Regions = std::move(Param_Regions);
	Parms.bIsWithoutBackpack = bIsWithoutBackpack;
	Parms.NoBackpackTeleporter = NoBackpackTeleporter;
	Parms.NightWarning = NightWarning;
	Parms.DayWarning = DayWarning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.TeleportingLogic
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::TeleportingLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "TeleportingLogic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.TeleportingOwning
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Timer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AAVS_VehicleMaster_C*             CarRef                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawnPoint_C*>   Param_Regions                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bIsWithoutBackpack                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoBackpackTeleporter                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NightWarning                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DayWarning                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::TeleportingOwning(double Timer, class AAVS_VehicleMaster_C* CarRef, const TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions, bool bIsWithoutBackpack, bool NoBackpackTeleporter, bool NightWarning, bool DayWarning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "TeleportingOwning");

	Params::SurvivalPlayer_Test_C_TeleportingOwning Parms{};

	Parms.Timer = Timer;
	Parms.CarRef = CarRef;
	Parms.Param_Regions = std::move(Param_Regions);
	Parms.bIsWithoutBackpack = bIsWithoutBackpack;
	Parms.NoBackpackTeleporter = NoBackpackTeleporter;
	Parms.NightWarning = NightWarning;
	Parms.DayWarning = DayWarning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ThrowGrande
// (BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ThrowGrande()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ThrowGrande");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.ToggleCutsceneCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::ToggleCutsceneCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "ToggleCutsceneCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.TpStart
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ASurvivalPlayer_Test_C::TpStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "TpStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SurvivalPlayer_Test.SurvivalPlayer_Test_C.WindowClimbCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanWindowClimb                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASurvivalPlayer_Test_C::WindowClimbCheck(bool* CanWindowClimb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivalPlayer_Test_C", "WindowClimbCheck");

	Params::SurvivalPlayer_Test_C_WindowClimbCheck Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanWindowClimb != nullptr)
		*CanWindowClimb = Parms.CanWindowClimb;
}

}

