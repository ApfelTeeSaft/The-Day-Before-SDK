#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ControlMapping

#include "Basic.hpp"

#include "Enum_ControlDrivenBy_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "InputCore_structs.hpp"
#include "Survival_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ControlMapping.W_ControlMapping_C
// 0x0198 (0x0420 - 0x0288)
class UW_ControlMapping_C final : public UControlValue
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       ChangeKeyAnim_Keyboard;                            // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ChangeKeyAnim_Gamepad;                             // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Deselect_Anim;                                     // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Select_Anim;                                       // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover_Anim;                                        // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button_DoScroll;                                   // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG_Gamepad;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG_KeyBoard;                                 // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Default;                                     // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hover_Gamepad;                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hover_KeyBoard;                              // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hovered;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Select_Gamepad;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Select_KeyBoard;                             // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Selected;                                    // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      Input_GamepadKey;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInputKeySelector*                      Input_KeyboardKey;                                 // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Name_W_ControlMapping_C;                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_KeyIcon_C*                         WBP_KeyIcon_Gamepad;                               // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_KeyIcon_C*                         WBP_KeyIcon_Keyboard;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   DisplayText;                                       // 0x0330(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly)
	Enum_ControlDrivenBy                          ControlKind;                                       // 0x0348(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MappingName;                                       // 0x034C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActionMappingIndex;                                // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputChord                            LastKeyChanged;                                    // 0x0358(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputChord                            LastKeySelected;                                   // 0x0378(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FInputAxisKeyMapping                   OldMapping;                                        // 0x0398(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bIsRowSelected;                                    // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsRowHovered;                                     // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C2[0x6];                                      // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ParentSettingsMenu;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          KeyboardKeyChanging;                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GamepadKeyChanging;                                // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D2[0x6];                                      // 0x03D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ValueChanged;                                      // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bAxisMappingPositive;                              // 0x03E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnKeyChanging;                                     // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIgnoreAxisDirection;                              // 0x0400(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_401[0x3];                                      // 0x0401(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActionMappingIndex_Gamepad;                        // 0x0404(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   UnbindKey;                                         // 0x0408(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature();
	void BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_2_OnIsSelectingKeyChanged__DelegateSignature();
	void BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_3_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void Construct();
	void DeselectRow();
	void ExecuteUbergraph_W_ControlMapping(int32 EntryPoint);
	void GetIsDefaultValue(bool* Default);
	void GetMappingName(class FName* Param_MappingName);
	void GetSettingName(class FName* SettingName);
	void HoverRow();
	void Init();
	void IsRowHovered(bool* Param_IsHovered);
	void IsRowSelected(bool* IsSelected);
	void IsSelectingKeyChanged();
	void KeySelected(const struct FInputChord& Selected_Key);
	void OnKeyChanging__DelegateSignature(bool Changing);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void PlayChangeKeyAnimation(bool IsKeyboard, EUMGSequencePlayMode PlayMode);
	void PreConstruct(bool IsDesignTime);
	void RebindKey(const struct FInputChord& Key, bool IsKeyboardKey);
	void ResetControls();
	void SelectRow();
	void SetDefault();
	void SetHovered();
	void SetParentSettingsWidget(class UUserWidget* SettingsWidgetRef);
	void SetSelected();
	void UnhoverRow();
	void UpdateKeyIcon(const struct FKey& Key, bool Shift, bool Ctrl, bool Alt, bool Cmd);
	void ValueChanged__DelegateSignature(const struct FInputChord& NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ControlMapping_C">();
	}
	static class UW_ControlMapping_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ControlMapping_C>();
	}
};
static_assert(alignof(UW_ControlMapping_C) == 0x000008, "Wrong alignment on UW_ControlMapping_C");
static_assert(sizeof(UW_ControlMapping_C) == 0x000420, "Wrong size on UW_ControlMapping_C");
static_assert(offsetof(UW_ControlMapping_C, UberGraphFrame) == 0x000288, "Member 'UW_ControlMapping_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ChangeKeyAnim_Keyboard) == 0x000290, "Member 'UW_ControlMapping_C::ChangeKeyAnim_Keyboard' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ChangeKeyAnim_Gamepad) == 0x000298, "Member 'UW_ControlMapping_C::ChangeKeyAnim_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Deselect_Anim) == 0x0002A0, "Member 'UW_ControlMapping_C::Deselect_Anim' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Select_Anim) == 0x0002A8, "Member 'UW_ControlMapping_C::Select_Anim' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Hover_Anim) == 0x0002B0, "Member 'UW_ControlMapping_C::Hover_Anim' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Button_DoScroll) == 0x0002B8, "Member 'UW_ControlMapping_C::Button_DoScroll' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_BG_Gamepad) == 0x0002C0, "Member 'UW_ControlMapping_C::Image_BG_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_BG_KeyBoard) == 0x0002C8, "Member 'UW_ControlMapping_C::Image_BG_KeyBoard' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Default) == 0x0002D0, "Member 'UW_ControlMapping_C::Image_Default' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Hover_Gamepad) == 0x0002D8, "Member 'UW_ControlMapping_C::Image_Hover_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Hover_KeyBoard) == 0x0002E0, "Member 'UW_ControlMapping_C::Image_Hover_KeyBoard' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Hovered) == 0x0002E8, "Member 'UW_ControlMapping_C::Image_Hovered' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Select_Gamepad) == 0x0002F0, "Member 'UW_ControlMapping_C::Image_Select_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Select_KeyBoard) == 0x0002F8, "Member 'UW_ControlMapping_C::Image_Select_KeyBoard' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Image_Selected) == 0x000300, "Member 'UW_ControlMapping_C::Image_Selected' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Input_GamepadKey) == 0x000308, "Member 'UW_ControlMapping_C::Input_GamepadKey' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Input_KeyboardKey) == 0x000310, "Member 'UW_ControlMapping_C::Input_KeyboardKey' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, Name_W_ControlMapping_C) == 0x000318, "Member 'UW_ControlMapping_C::Name_W_ControlMapping_C' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, WBP_KeyIcon_Gamepad) == 0x000320, "Member 'UW_ControlMapping_C::WBP_KeyIcon_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, WBP_KeyIcon_Keyboard) == 0x000328, "Member 'UW_ControlMapping_C::WBP_KeyIcon_Keyboard' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, DisplayText) == 0x000330, "Member 'UW_ControlMapping_C::DisplayText' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ControlKind) == 0x000348, "Member 'UW_ControlMapping_C::ControlKind' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, MappingName) == 0x00034C, "Member 'UW_ControlMapping_C::MappingName' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ActionMappingIndex) == 0x000354, "Member 'UW_ControlMapping_C::ActionMappingIndex' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, LastKeyChanged) == 0x000358, "Member 'UW_ControlMapping_C::LastKeyChanged' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, LastKeySelected) == 0x000378, "Member 'UW_ControlMapping_C::LastKeySelected' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, OldMapping) == 0x000398, "Member 'UW_ControlMapping_C::OldMapping' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, bIsRowSelected) == 0x0003C0, "Member 'UW_ControlMapping_C::bIsRowSelected' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, bIsRowHovered) == 0x0003C1, "Member 'UW_ControlMapping_C::bIsRowHovered' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ParentSettingsMenu) == 0x0003C8, "Member 'UW_ControlMapping_C::ParentSettingsMenu' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, KeyboardKeyChanging) == 0x0003D0, "Member 'UW_ControlMapping_C::KeyboardKeyChanging' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, GamepadKeyChanging) == 0x0003D1, "Member 'UW_ControlMapping_C::GamepadKeyChanging' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ValueChanged) == 0x0003D8, "Member 'UW_ControlMapping_C::ValueChanged' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, bAxisMappingPositive) == 0x0003E8, "Member 'UW_ControlMapping_C::bAxisMappingPositive' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, OnKeyChanging) == 0x0003F0, "Member 'UW_ControlMapping_C::OnKeyChanging' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, bIgnoreAxisDirection) == 0x000400, "Member 'UW_ControlMapping_C::bIgnoreAxisDirection' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, ActionMappingIndex_Gamepad) == 0x000404, "Member 'UW_ControlMapping_C::ActionMappingIndex_Gamepad' has a wrong offset!");
static_assert(offsetof(UW_ControlMapping_C, UnbindKey) == 0x000408, "Member 'UW_ControlMapping_C::UnbindKey' has a wrong offset!");

}

