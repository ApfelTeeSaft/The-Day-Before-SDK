#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FP_Hands_Rig_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass FP_Hands_Rig_CtrlRig.FP_Hands_Rig_CtrlRig_C
// 0x00D8 (0x04D0 - 0x03F8)
class UFP_Hands_Rig_CtrlRig_C final : public UControlRig
{
public:
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetHandRTransform;                              // 0x0400(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RollValue;                                         // 0x0460(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                RollPivotLocation;                                 // 0x0478(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RightHandAlpha;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InclineRotation;                                   // 0x0498(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Tilt;                                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ElbowLoc;                                          // 0x04B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FP_Hands_Rig_CtrlRig_C">();
	}
	static class UFP_Hands_Rig_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFP_Hands_Rig_CtrlRig_C>();
	}
};
static_assert(alignof(UFP_Hands_Rig_CtrlRig_C) == 0x000010, "Wrong alignment on UFP_Hands_Rig_CtrlRig_C");
static_assert(sizeof(UFP_Hands_Rig_CtrlRig_C) == 0x0004D0, "Wrong size on UFP_Hands_Rig_CtrlRig_C");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, OffsetHandRTransform) == 0x000400, "Member 'UFP_Hands_Rig_CtrlRig_C::OffsetHandRTransform' has a wrong offset!");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, RollValue) == 0x000460, "Member 'UFP_Hands_Rig_CtrlRig_C::RollValue' has a wrong offset!");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, RollPivotLocation) == 0x000478, "Member 'UFP_Hands_Rig_CtrlRig_C::RollPivotLocation' has a wrong offset!");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, RightHandAlpha) == 0x000490, "Member 'UFP_Hands_Rig_CtrlRig_C::RightHandAlpha' has a wrong offset!");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, InclineRotation) == 0x000498, "Member 'UFP_Hands_Rig_CtrlRig_C::InclineRotation' has a wrong offset!");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, Tilt) == 0x0004B0, "Member 'UFP_Hands_Rig_CtrlRig_C::Tilt' has a wrong offset!");
static_assert(offsetof(UFP_Hands_Rig_CtrlRig_C, ElbowLoc) == 0x0004B8, "Member 'UFP_Hands_Rig_CtrlRig_C::ElbowLoc' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass FP_Hands_Rig_CtrlRig.RigVMMemory_Literal
// 0x0248 (0x0270 - 0x0028)
class FP_Hands_Rig_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	class FName                                   RigVMModel___SetControlRotator_1_Control__Const;   // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___SetControlRotator_1_Weight__Const;    // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___SetControlRotator_1_Space__Const;     // 0x0034(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___RigUnit_SetRelativeTransformForItem_2_Child__Const; // 0x0038(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetRelativeTransformForItem_2_Parent__Const; // 0x0044(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetRelativeTransformForItem_2_bParentInitial__Const; // 0x0050(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___RigUnit_GetRelativeTransformForItem_Parent__Const; // 0x0054(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetRelativeTransformForItem_2_bPropagateToChildren__Const; // 0x0060(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x0064(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_SetTransform_Space__Const;    // 0x0070(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___GetTransform_Item__Const;             // 0x0074(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_Item__Const;   // 0x0080(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_2_Item__Const;           // 0x008C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetRelativeTransformForItem_Parent__Const; // 0x0098(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetRelativeTransformForItem_Parent__Const; // 0x00A4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   RigVMModel___SetControlRotator_Control__Const;     // 0x00B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_1_1_1_Item__Const; // 0x00B8(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0xC];                                       // 0x00C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_1_1_Value__Const; // 0x00D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_ItemA__Const;  // 0x0130(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_Item__Const;           // 0x013C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_PrimaryAxis__Const; // 0x0148(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_SecondaryAxis__Const; // 0x0160(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Multiply_B__Const;                    // 0x0178(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EControlRigVectorKind                         RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const; // 0x0180(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const; // 0x0184(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_StretchStartRatio__Const; // 0x0190(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_StretchMaximumRatio__Const; // 0x0194(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_ItemALength__Const; // 0x0198(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TwoBoneIKSimple_DebugSettings RigVMModel___TwoBoneIKSimplePerItem_DebugSettings__Const; // 0x01A0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const; // 0x0210(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const; // 0x021C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const; // 0x0228(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const; // 0x0238(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const; // 0x0250(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass FP_Hands_Rig_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class FP_Hands_Rig_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<FP_Hands_Rig_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on FP_Hands_Rig_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal) == 0x000270, "Wrong size on FP_Hands_Rig_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___SetControlRotator_1_Control__Const) == 0x000028, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___SetControlRotator_1_Control__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___SetControlRotator_1_Weight__Const) == 0x000030, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___SetControlRotator_1_Weight__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___SetControlRotator_1_Space__Const) == 0x000034, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___SetControlRotator_1_Space__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRelativeTransformForItem_2_Child__Const) == 0x000038, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRelativeTransformForItem_2_Child__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRelativeTransformForItem_2_Parent__Const) == 0x000044, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRelativeTransformForItem_2_Parent__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRelativeTransformForItem_2_bParentInitial__Const) == 0x000050, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRelativeTransformForItem_2_bParentInitial__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_GetRelativeTransformForItem_Parent__Const) == 0x000054, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_GetRelativeTransformForItem_Parent__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRelativeTransformForItem_2_bPropagateToChildren__Const) == 0x000060, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRelativeTransformForItem_2_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x000064, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Space__Const) == 0x000070, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___GetTransform_Item__Const) == 0x000074, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_Item__Const) == 0x000080, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___GetTransform_2_Item__Const) == 0x00008C, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___GetTransform_2_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRelativeTransformForItem_Parent__Const) == 0x000098, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRelativeTransformForItem_Parent__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___GetRelativeTransformForItem_Parent__Const) == 0x0000A4, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___GetRelativeTransformForItem_Parent__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___SetControlRotator_Control__Const) == 0x0000B0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___SetControlRotator_Control__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_1_1_Item__Const) == 0x0000B8, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_1_1_1_Value__Const) == 0x0000D0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_1_1_1_Value__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_ItemA__Const) == 0x000130, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_ItemA__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___GetTransform_1_Item__Const) == 0x00013C, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___GetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PrimaryAxis__Const) == 0x000148, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PrimaryAxis__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_SecondaryAxis__Const) == 0x000160, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_SecondaryAxis__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___Multiply_B__Const) == 0x000178, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___Multiply_B__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const) == 0x000180, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const) == 0x000184, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_StretchStartRatio__Const) == 0x000190, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_StretchStartRatio__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_StretchMaximumRatio__Const) == 0x000194, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_StretchMaximumRatio__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_ItemALength__Const) == 0x000198, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_ItemALength__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_DebugSettings__Const) == 0x0001A0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const) == 0x000210, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const) == 0x00021C, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const) == 0x000228, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const) == 0x000238, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const) == 0x000250, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass FP_Hands_Rig_CtrlRig.RigVMMemory_Work
// 0x0728 (0x0750 - 0x0028)
class FP_Hands_Rig_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	TArray<struct FCachedRigElement>              RigVMModel___SetControlRotator_1_CachedControlIndex; // 0x0028(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetRelativeTransformForItem_RelativeTransform; // 0x0040(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeTransformForItem_CachedChild; // 0x00A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetRelativeTransformForItem_CachedParent; // 0x00B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_2_CachedChild; // 0x00C0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_2_CachedParent; // 0x00D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_Transform;               // 0x00E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_CachedIndex;             // 0x0140(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x0150(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_Transform;             // 0x0160(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_CachedIndex;           // 0x01C0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_CachedIndex;   // 0x01D0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetRelativeTransformForItem_RelativeTransform; // 0x01E0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetRelativeTransformForItem_CachedChild; // 0x0240(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___GetRelativeTransformForItem_CachedParent; // 0x0250(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_CachedChild; // 0x0260(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_CachedParent; // 0x0270(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetRelativeTransformForItem_1_RelativeTransform; // 0x0280(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetRelativeTransformForItem_1_CachedChild; // 0x02E0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___GetRelativeTransformForItem_1_CachedParent; // 0x02F0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_1_CachedChild; // 0x0300(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_1_CachedParent; // 0x0310(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTranslation_CachedIndex;   // 0x0320(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___SetControlRotator_CachedControlIndex; // 0x0330(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_3_Transform;             // 0x0340(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_3_CachedIndex;           // 0x03A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_2_CachedIndex;   // 0x03B0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_2_1_Transform;           // 0x03C0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_2_1_CachedIndex;         // 0x0420(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_1_CachedIndex; // 0x0430(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_SetTransform_1_1_1_Value__IO; // 0x0440(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_1_1_1_CachedIndex; // 0x04A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_Transform;             // 0x04B0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_CachedIndex;           // 0x0510(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___Add_Result;                           // 0x0520(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_528[0x8];                                      // 0x0528(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x0530(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x0590(0x0010)(Edit, EditConst, NonTransactional)
	double                                        RigVMModel___Add_A;                                // 0x05A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___Multiply_Result;                      // 0x05A8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_PoleVector__IO; // 0x05B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex; // 0x05C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex; // 0x05D8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex; // 0x05E8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex; // 0x05F8(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_608[0x8];                                      // 0x0608(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_1_1_Transform;           // 0x0610(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_1_CachedIndex;         // 0x0670(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0680(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x06E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_PoleVector;  // 0x06F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_1_Weight;      // 0x0708(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex; // 0x0710(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex; // 0x0720(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex; // 0x0730(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex; // 0x0740(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass FP_Hands_Rig_CtrlRig.RigVMMemory_Work", true>();
	}
	static class FP_Hands_Rig_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<FP_Hands_Rig_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on FP_Hands_Rig_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work) == 0x000750, "Wrong size on FP_Hands_Rig_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___SetControlRotator_1_CachedControlIndex) == 0x000028, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___SetControlRotator_1_CachedControlIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetRelativeTransformForItem_RelativeTransform) == 0x000040, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetRelativeTransformForItem_RelativeTransform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetRelativeTransformForItem_CachedChild) == 0x0000A0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetRelativeTransformForItem_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetRelativeTransformForItem_CachedParent) == 0x0000B0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetRelativeTransformForItem_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_2_CachedChild) == 0x0000C0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_2_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_2_CachedParent) == 0x0000D0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_2_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_Transform) == 0x0000E0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_CachedIndex) == 0x000140, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x000150, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_2_Transform) == 0x000160, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_2_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_2_CachedIndex) == 0x0001C0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_CachedIndex) == 0x0001D0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetRelativeTransformForItem_RelativeTransform) == 0x0001E0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetRelativeTransformForItem_RelativeTransform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetRelativeTransformForItem_CachedChild) == 0x000240, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetRelativeTransformForItem_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetRelativeTransformForItem_CachedParent) == 0x000250, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetRelativeTransformForItem_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_CachedChild) == 0x000260, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_CachedParent) == 0x000270, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetRelativeTransformForItem_1_RelativeTransform) == 0x000280, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetRelativeTransformForItem_1_RelativeTransform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetRelativeTransformForItem_1_CachedChild) == 0x0002E0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetRelativeTransformForItem_1_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetRelativeTransformForItem_1_CachedParent) == 0x0002F0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetRelativeTransformForItem_1_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_1_CachedChild) == 0x000300, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_1_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_1_CachedParent) == 0x000310, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_1_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTranslation_CachedIndex) == 0x000320, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTranslation_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___SetControlRotator_CachedControlIndex) == 0x000330, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___SetControlRotator_CachedControlIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_3_Transform) == 0x000340, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_3_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_3_CachedIndex) == 0x0003A0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_3_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_2_CachedIndex) == 0x0003B0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_2_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_2_1_Transform) == 0x0003C0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_2_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_2_1_CachedIndex) == 0x000420, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_2_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_1_CachedIndex) == 0x000430, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_1_1_Value__IO) == 0x000440, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_1_1_Value__IO' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_1_1_1_CachedIndex) == 0x0004A0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_1_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_Transform) == 0x0004B0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_CachedIndex) == 0x000510, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___Add_Result) == 0x000520, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___Add_Result' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x000530, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x000590, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___Add_A) == 0x0005A0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___Add_A' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___Multiply_Result) == 0x0005A8, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___Multiply_Result' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_PoleVector__IO) == 0x0005B0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_PoleVector__IO' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex) == 0x0005C8, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex) == 0x0005D8, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex) == 0x0005E8, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex) == 0x0005F8, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_1_Transform) == 0x000610, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_1_CachedIndex) == 0x000670, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000680, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0006E0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_PoleVector) == 0x0006F0, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_PoleVector' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_Weight) == 0x000708, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_Weight' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex) == 0x000710, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex) == 0x000720, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex) == 0x000730, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(FP_Hands_Rig_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex) == 0x000740, "Member 'FP_Hands_Rig_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex' has a wrong offset!");

}

