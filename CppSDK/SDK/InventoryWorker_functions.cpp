#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InventoryWorker

#include "Basic.hpp"

#include "InventoryWorker_classes.hpp"
#include "InventoryWorker_parameters.hpp"


namespace SDK
{

// Function InventoryWorker.InventoryWorker_C.AddGuideItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryWorker_C::AddGuideItems(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "AddGuideItems");

	Params::InventoryWorker_C_AddGuideItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function InventoryWorker.InventoryWorker_C.AddMoney
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryWorker_C::AddMoney(int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "AddMoney");

	Params::InventoryWorker_C_AddMoney Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.ApplyDefaultInventory
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   CustomList                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UInventoryWorker_C::ApplyDefaultInventory(const TArray<class FString>& CustomList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ApplyDefaultInventory");

	Params::InventoryWorker_C_ApplyDefaultInventory Parms{};

	Parms.CustomList = std::move(CustomList);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.ApplyInventory
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UInventoryWorker_C::ApplyInventory(const TArray<class FString>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ApplyInventory");

	Params::InventoryWorker_C_ApplyInventory Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.ClearInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::ClearInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ClearInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.Collect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UInventoryWorker_C::Collect(const class FString& Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "Collect");

	Params::InventoryWorker_C_Collect Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.CollectAndPush
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::CollectAndPush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "CollectAndPush");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.CollectInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::CollectInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "CollectInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.CollectVirtualInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::CollectVirtualInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "CollectVirtualInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.Convert To Json Object
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UTDBJsonObject*                   Json                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UInventoryWorker_C::Convert_To_Json_Object(TArray<class FString>& Data, class UTDBJsonObject** Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "Convert To Json Object");

	Params::InventoryWorker_C_Convert_To_Json_Object Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);

	if (Json != nullptr)
		*Json = Parms.Json;
}


// Function InventoryWorker.InventoryWorker_C.ConvertFromJsonToList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTDBJsonObject*                   Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Result                                                 (Parm, OutParm)

void UInventoryWorker_C::ConvertFromJsonToList(class UTDBJsonObject* Json, TArray<class FString>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ConvertFromJsonToList");

	Params::InventoryWorker_C_ConvertFromJsonToList Parms{};

	Parms.Json = Json;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryWorker.InventoryWorker_C.DataPrinter
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::DataPrinter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "DataPrinter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.DebugFetch
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::DebugFetch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "DebugFetch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.DebugPushInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::DebugPushInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "DebugPushInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.DebugTest
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::DebugTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "DebugTest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.ExecuteUbergraph_InventoryWorker
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryWorker_C::ExecuteUbergraph_InventoryWorker(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ExecuteUbergraph_InventoryWorker");

	Params::InventoryWorker_C_ExecuteUbergraph_InventoryWorker Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.FetchBaseInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::FetchBaseInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "FetchBaseInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.FetchInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::FetchInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "FetchInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.FetchVirtualInventory
// (BlueprintCallable, BlueprintEvent)

void UInventoryWorker_C::FetchVirtualInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "FetchVirtualInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function InventoryWorker.InventoryWorker_C.GetDefaultItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Param_Outer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Param_Pants                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Data                                                   (Parm, OutParm)

void UInventoryWorker_C::GetDefaultItems(const class FString& Param_Outer, const class FString& Param_Pants, TArray<class FString>* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "GetDefaultItems");

	Params::InventoryWorker_C_GetDefaultItems Parms{};

	Parms.Param_Outer = std::move(Param_Outer);
	Parms.Param_Pants = std::move(Param_Pants);

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function InventoryWorker.InventoryWorker_C.ItemsSort
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   StringArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FString>                   Array                                                  (Parm, OutParm)

void UInventoryWorker_C::ItemsSort(TArray<class FString>& StringArray, TArray<class FString>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ItemsSort");

	Params::InventoryWorker_C_ItemsSort Parms{};

	Parms.StringArray = std::move(StringArray);

	UObject::ProcessEvent(Func, &Parms);

	StringArray = std::move(Parms.StringArray);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function InventoryWorker.InventoryWorker_C.JSONToList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FString>                   Result                                                 (Parm, OutParm)

void UInventoryWorker_C::JSONToList(const class FString& Json, TArray<class FString>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "JSONToList");

	Params::InventoryWorker_C_JSONToList Parms{};

	Parms.Json = std::move(Json);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryWorker.InventoryWorker_C.MakeSingleJSONString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Result                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UInventoryWorker_C::MakeSingleJSONString(TArray<class FString>& Data, class FString* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "MakeSingleJSONString");

	Params::InventoryWorker_C_MakeSingleJSONString Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);

	Data = std::move(Parms.Data);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function InventoryWorker.InventoryWorker_C.ParseResponse
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTDBJsonObject*                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UInventoryWorker_C::ParseResponse(class UTDBJsonObject* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "ParseResponse");

	Params::InventoryWorker_C_ParseResponse Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.PlaceInventoryIntoList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   List                                                   (Parm, OutParm)

void UInventoryWorker_C::PlaceInventoryIntoList(class ASurvivalPlayer_C* Player, TArray<class FString>* List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "PlaceInventoryIntoList");

	Params::InventoryWorker_C_PlaceInventoryIntoList Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (List != nullptr)
		*List = std::move(Parms.List);
}


// Function InventoryWorker.InventoryWorker_C.PushInventory
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTDBJsonObject*                   Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   StrAr                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UInventoryWorker_C::PushInventory(class UTDBJsonObject* Json, const TArray<class FString>& StrAr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "PushInventory");

	Params::InventoryWorker_C_PushInventory Parms{};

	Parms.Json = Json;
	Parms.StrAr = std::move(StrAr);

	UObject::ProcessEvent(Func, &Parms);
}


// Function InventoryWorker.InventoryWorker_C.StartGuideItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Out                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Pan                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UInventoryWorker_C::StartGuideItems(const class FString& Out, const class FString& Pan, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InventoryWorker_C", "StartGuideItems");

	Params::InventoryWorker_C_StartGuideItems Parms{};

	Parms.Out = std::move(Out);
	Parms.Pan = std::move(Pan);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

