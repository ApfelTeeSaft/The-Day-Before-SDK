#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvInterface

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function SurvInterface.SurvInterface_C.AddCharacterRotation
// 0x0018 (0x0018 - 0x0000)
struct SurvInterface_C_AddCharacterRotation final
{
public:
	struct FRotator                               Amount;                                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SurvInterface_C_AddCharacterRotation) == 0x000008, "Wrong alignment on SurvInterface_C_AddCharacterRotation");
static_assert(sizeof(SurvInterface_C_AddCharacterRotation) == 0x000018, "Wrong size on SurvInterface_C_AddCharacterRotation");
static_assert(offsetof(SurvInterface_C_AddCharacterRotation, Amount) == 0x000000, "Member 'SurvInterface_C_AddCharacterRotation::Amount' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.AnimNotifyTurningInPlace
// 0x0010 (0x0010 - 0x0000)
struct SurvInterface_C_AnimNotifyTurningInPlace final
{
public:
	class UAnimMontage*                           TurnIPMontage;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTurn;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurningIP;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TurningRight;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_AnimNotifyTurningInPlace) == 0x000008, "Wrong alignment on SurvInterface_C_AnimNotifyTurningInPlace");
static_assert(sizeof(SurvInterface_C_AnimNotifyTurningInPlace) == 0x000010, "Wrong size on SurvInterface_C_AnimNotifyTurningInPlace");
static_assert(offsetof(SurvInterface_C_AnimNotifyTurningInPlace, TurnIPMontage) == 0x000000, "Member 'SurvInterface_C_AnimNotifyTurningInPlace::TurnIPMontage' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_AnimNotifyTurningInPlace, ShouldTurn) == 0x000008, "Member 'SurvInterface_C_AnimNotifyTurningInPlace::ShouldTurn' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_AnimNotifyTurningInPlace, TurningIP) == 0x000009, "Member 'SurvInterface_C_AnimNotifyTurningInPlace::TurningIP' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_AnimNotifyTurningInPlace, TurningRight) == 0x00000A, "Member 'SurvInterface_C_AnimNotifyTurningInPlace::TurningRight' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.BPI_CameraShake
// 0x0018 (0x0018 - 0x0000)
struct SurvInterface_C_BPI_CameraShake final
{
public:
	class UClass*                                 ShakeClass;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedChangeScale;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Scale;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_BPI_CameraShake) == 0x000008, "Wrong alignment on SurvInterface_C_BPI_CameraShake");
static_assert(sizeof(SurvInterface_C_BPI_CameraShake) == 0x000018, "Wrong size on SurvInterface_C_BPI_CameraShake");
static_assert(offsetof(SurvInterface_C_BPI_CameraShake, ShakeClass) == 0x000000, "Member 'SurvInterface_C_BPI_CameraShake::ShakeClass' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_BPI_CameraShake, NeedChangeScale) == 0x000008, "Member 'SurvInterface_C_BPI_CameraShake::NeedChangeScale' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_BPI_CameraShake, Scale) == 0x000010, "Member 'SurvInterface_C_BPI_CameraShake::Scale' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.CallEatMesh
// 0x0028 (0x0028 - 0x0000)
struct SurvInterface_C_CallEatMesh final
{
public:
	class FName                                   ItemType;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DurationAttached;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimDelay;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DissappearDelay;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayRate;                                          // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_CallEatMesh) == 0x000008, "Wrong alignment on SurvInterface_C_CallEatMesh");
static_assert(sizeof(SurvInterface_C_CallEatMesh) == 0x000028, "Wrong size on SurvInterface_C_CallEatMesh");
static_assert(offsetof(SurvInterface_C_CallEatMesh, ItemType) == 0x000000, "Member 'SurvInterface_C_CallEatMesh::ItemType' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_CallEatMesh, DurationAttached) == 0x000008, "Member 'SurvInterface_C_CallEatMesh::DurationAttached' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_CallEatMesh, AnimDelay) == 0x000010, "Member 'SurvInterface_C_CallEatMesh::AnimDelay' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_CallEatMesh, DissappearDelay) == 0x000018, "Member 'SurvInterface_C_CallEatMesh::DissappearDelay' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_CallEatMesh, PlayRate) == 0x000020, "Member 'SurvInterface_C_CallEatMesh::PlayRate' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.CheckEndEat
// 0x0001 (0x0001 - 0x0000)
struct SurvInterface_C_CheckEndEat final
{
public:
	bool                                          Eat_;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_CheckEndEat) == 0x000001, "Wrong alignment on SurvInterface_C_CheckEndEat");
static_assert(sizeof(SurvInterface_C_CheckEndEat) == 0x000001, "Wrong size on SurvInterface_C_CheckEndEat");
static_assert(offsetof(SurvInterface_C_CheckEndEat, Eat_) == 0x000000, "Member 'SurvInterface_C_CheckEndEat::Eat_' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.GetCameraOffset
// 0x0030 (0x0030 - 0x0000)
struct SurvInterface_C_GetCameraOffset final
{
public:
	struct FVector                                PelvisOffset;                                      // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InterpOffset;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_GetCameraOffset) == 0x000008, "Wrong alignment on SurvInterface_C_GetCameraOffset");
static_assert(sizeof(SurvInterface_C_GetCameraOffset) == 0x000030, "Wrong size on SurvInterface_C_GetCameraOffset");
static_assert(offsetof(SurvInterface_C_GetCameraOffset, PelvisOffset) == 0x000000, "Member 'SurvInterface_C_GetCameraOffset::PelvisOffset' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_GetCameraOffset, InterpOffset) == 0x000018, "Member 'SurvInterface_C_GetCameraOffset::InterpOffset' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.GetSurvController
// 0x0008 (0x0008 - 0x0000)
struct SurvInterface_C_GetSurvController final
{
public:
	class ASurvPC_C*                              SurvPC;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_GetSurvController) == 0x000008, "Wrong alignment on SurvInterface_C_GetSurvController");
static_assert(sizeof(SurvInterface_C_GetSurvController) == 0x000008, "Wrong size on SurvInterface_C_GetSurvController");
static_assert(offsetof(SurvInterface_C_GetSurvController, SurvPC) == 0x000000, "Member 'SurvInterface_C_GetSurvController::SurvPC' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.MovementModeChanged
// 0x0001 (0x0001 - 0x0000)
struct SurvInterface_C_MovementModeChanged final
{
public:
	EMovementMode                                 NewParam;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_MovementModeChanged) == 0x000001, "Wrong alignment on SurvInterface_C_MovementModeChanged");
static_assert(sizeof(SurvInterface_C_MovementModeChanged) == 0x000001, "Wrong size on SurvInterface_C_MovementModeChanged");
static_assert(offsetof(SurvInterface_C_MovementModeChanged, NewParam) == 0x000000, "Member 'SurvInterface_C_MovementModeChanged::NewParam' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.PlayMontage
// 0x0020 (0x0020 - 0x0000)
struct SurvInterface_C_PlayMontage final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHipfire;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reloading;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayRate;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StartTime;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_PlayMontage) == 0x000008, "Wrong alignment on SurvInterface_C_PlayMontage");
static_assert(sizeof(SurvInterface_C_PlayMontage) == 0x000020, "Wrong size on SurvInterface_C_PlayMontage");
static_assert(offsetof(SurvInterface_C_PlayMontage, AnimMontage) == 0x000000, "Member 'SurvInterface_C_PlayMontage::AnimMontage' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_PlayMontage, IsHipfire) == 0x000008, "Member 'SurvInterface_C_PlayMontage::IsHipfire' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_PlayMontage, Reloading) == 0x000009, "Member 'SurvInterface_C_PlayMontage::Reloading' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_PlayMontage, PlayRate) == 0x000010, "Member 'SurvInterface_C_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_PlayMontage, StartTime) == 0x000018, "Member 'SurvInterface_C_PlayMontage::StartTime' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.SetItemUsingAnim
// 0x0010 (0x0010 - 0x0000)
struct SurvInterface_C_SetItemUsingAnim final
{
public:
	class UAnimSequence*                          Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialItem;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasStandAnim;                                      // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WepNotHiding;                                      // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_SetItemUsingAnim) == 0x000008, "Wrong alignment on SurvInterface_C_SetItemUsingAnim");
static_assert(sizeof(SurvInterface_C_SetItemUsingAnim) == 0x000010, "Wrong size on SurvInterface_C_SetItemUsingAnim");
static_assert(offsetof(SurvInterface_C_SetItemUsingAnim, Anim) == 0x000000, "Member 'SurvInterface_C_SetItemUsingAnim::Anim' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_SetItemUsingAnim, SpecialItem) == 0x000008, "Member 'SurvInterface_C_SetItemUsingAnim::SpecialItem' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_SetItemUsingAnim, CanMove) == 0x000009, "Member 'SurvInterface_C_SetItemUsingAnim::CanMove' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_SetItemUsingAnim, HasStandAnim) == 0x00000A, "Member 'SurvInterface_C_SetItemUsingAnim::HasStandAnim' has a wrong offset!");
static_assert(offsetof(SurvInterface_C_SetItemUsingAnim, WepNotHiding) == 0x00000B, "Member 'SurvInterface_C_SetItemUsingAnim::WepNotHiding' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.SetReloadState
// 0x0001 (0x0001 - 0x0000)
struct SurvInterface_C_SetReloadState final
{
public:
	bool                                          State;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_SetReloadState) == 0x000001, "Wrong alignment on SurvInterface_C_SetReloadState");
static_assert(sizeof(SurvInterface_C_SetReloadState) == 0x000001, "Wrong size on SurvInterface_C_SetReloadState");
static_assert(offsetof(SurvInterface_C_SetReloadState, State) == 0x000000, "Member 'SurvInterface_C_SetReloadState::State' has a wrong offset!");

// Function SurvInterface.SurvInterface_C.SetWeaponType
// 0x0001 (0x0001 - 0x0000)
struct SurvInterface_C_SetWeaponType final
{
public:
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SurvInterface_C_SetWeaponType) == 0x000001, "Wrong alignment on SurvInterface_C_SetWeaponType");
static_assert(sizeof(SurvInterface_C_SetWeaponType) == 0x000001, "Wrong size on SurvInterface_C_SetWeaponType");
static_assert(offsetof(SurvInterface_C_SetWeaponType, WeaponType) == 0x000000, "Member 'SurvInterface_C_SetWeaponType::WeaponType' has a wrong offset!");

}

