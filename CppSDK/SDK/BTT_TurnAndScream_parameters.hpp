#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_TurnAndScream

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BTT_TurnAndScream.BTT_TurnAndScream_C.ExecuteUbergraph_BTT_TurnAndScream
// 0x0040 (0x0040 - 0x0000)
struct BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDamaged_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDegreesForKey_Degrees;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AZombie_C*                              K2Node_DynamicCast_AsZombie;                       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream) == 0x000008, "Wrong alignment on BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream");
static_assert(sizeof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream) == 0x000040, "Wrong size on BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, EntryPoint) == 0x000000, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::EntryPoint' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, CallFunc_GetDamaged_ReturnValue) == 0x000004, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::CallFunc_GetDamaged_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, CallFunc_GetDegreesForKey_Degrees) == 0x000008, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::CallFunc_GetDegreesForKey_Degrees' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, K2Node_Event_OwnerController) == 0x000020, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, K2Node_Event_ControlledPawn) == 0x000028, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, K2Node_DynamicCast_AsZombie) == 0x000030, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::K2Node_DynamicCast_AsZombie' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BTT_TurnAndScream.BTT_TurnAndScream_C.GetDegreesForKey
// 0x0060 (0x0060 - 0x0000)
struct BTT_TurnAndScream_C_GetDegreesForKey final
{
public:
	double                                        Degrees;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetBlackboardValueAsVector_ReturnValue;   // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_Degrees_to_Target_DesiredDegrees;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetBlackboardValueAsActor_ReturnValue_1;  // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_Degrees_to_Target_DesiredDegrees_1;   // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_TurnAndScream_C_GetDegreesForKey) == 0x000008, "Wrong alignment on BTT_TurnAndScream_C_GetDegreesForKey");
static_assert(sizeof(BTT_TurnAndScream_C_GetDegreesForKey) == 0x000060, "Wrong size on BTT_TurnAndScream_C_GetDegreesForKey");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, Degrees) == 0x000000, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::Degrees' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_GetBlackboardValueAsVector_ReturnValue) == 0x000008, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_GetBlackboardValueAsVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_GetBlackboardValueAsActor_ReturnValue) == 0x000020, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_GetBlackboardValueAsActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_Get_Degrees_to_Target_DesiredDegrees) == 0x000028, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_Get_Degrees_to_Target_DesiredDegrees' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_GetBlackboardValueAsActor_ReturnValue_1) == 0x000048, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_GetBlackboardValueAsActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_Get_Degrees_to_Target_DesiredDegrees_1) == 0x000050, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_Get_Degrees_to_Target_DesiredDegrees_1' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_GetDegreesForKey, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'BTT_TurnAndScream_C_GetDegreesForKey::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BTT_TurnAndScream.BTT_TurnAndScream_C.OnEndScreaming
// 0x0010 (0x0010 - 0x0000)
struct BTT_TurnAndScream_C_OnEndScreaming final
{
public:
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_TurnAndScream_C_OnEndScreaming) == 0x000004, "Wrong alignment on BTT_TurnAndScream_C_OnEndScreaming");
static_assert(sizeof(BTT_TurnAndScream_C_OnEndScreaming) == 0x000010, "Wrong size on BTT_TurnAndScream_C_OnEndScreaming");
static_assert(offsetof(BTT_TurnAndScream_C_OnEndScreaming, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BTT_TurnAndScream_C_OnEndScreaming::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BTT_TurnAndScream.BTT_TurnAndScream_C.ReceiveExecuteAI
// 0x0010 (0x0010 - 0x0000)
struct BTT_TurnAndScream_C_ReceiveExecuteAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BTT_TurnAndScream_C_ReceiveExecuteAI) == 0x000008, "Wrong alignment on BTT_TurnAndScream_C_ReceiveExecuteAI");
static_assert(sizeof(BTT_TurnAndScream_C_ReceiveExecuteAI) == 0x000010, "Wrong size on BTT_TurnAndScream_C_ReceiveExecuteAI");
static_assert(offsetof(BTT_TurnAndScream_C_ReceiveExecuteAI, OwnerController) == 0x000000, "Member 'BTT_TurnAndScream_C_ReceiveExecuteAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BTT_TurnAndScream_C_ReceiveExecuteAI, ControlledPawn) == 0x000008, "Member 'BTT_TurnAndScream_C_ReceiveExecuteAI::ControlledPawn' has a wrong offset!");

}

