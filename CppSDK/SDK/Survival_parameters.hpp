#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Survival

#include "Basic.hpp"

#include "Survival_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Survival.BP_AnimUROComponent.SetMeshCustomURO
// 0x0010 (0x0010 - 0x0000)
struct BP_AnimUROComponent_SetMeshCustomURO final
{
public:
	class USkinnedMeshComponent*                  MeshToURO;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UroLevel;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BP_AnimUROComponent_SetMeshCustomURO) == 0x000008, "Wrong alignment on BP_AnimUROComponent_SetMeshCustomURO");
static_assert(sizeof(BP_AnimUROComponent_SetMeshCustomURO) == 0x000010, "Wrong size on BP_AnimUROComponent_SetMeshCustomURO");
static_assert(offsetof(BP_AnimUROComponent_SetMeshCustomURO, MeshToURO) == 0x000000, "Member 'BP_AnimUROComponent_SetMeshCustomURO::MeshToURO' has a wrong offset!");
static_assert(offsetof(BP_AnimUROComponent_SetMeshCustomURO, UroLevel) == 0x000008, "Member 'BP_AnimUROComponent_SetMeshCustomURO::UroLevel' has a wrong offset!");

// Function Survival.BP_AnimUROComponent.SetMeshURO
// 0x0008 (0x0008 - 0x0000)
struct BP_AnimUROComponent_SetMeshURO final
{
public:
	class USkinnedMeshComponent*                  MeshToURO;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BP_AnimUROComponent_SetMeshURO) == 0x000008, "Wrong alignment on BP_AnimUROComponent_SetMeshURO");
static_assert(sizeof(BP_AnimUROComponent_SetMeshURO) == 0x000008, "Wrong size on BP_AnimUROComponent_SetMeshURO");
static_assert(offsetof(BP_AnimUROComponent_SetMeshURO, MeshToURO) == 0x000000, "Member 'BP_AnimUROComponent_SetMeshURO::MeshToURO' has a wrong offset!");

// Function Survival.ZombieCharacter.GetAgressive
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_GetAgressive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetAgressive) == 0x000001, "Wrong alignment on ZombieCharacter_GetAgressive");
static_assert(sizeof(ZombieCharacter_GetAgressive) == 0x000001, "Wrong size on ZombieCharacter_GetAgressive");
static_assert(offsetof(ZombieCharacter_GetAgressive, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetAgressive::ReturnValue' has a wrong offset!");

// Function Survival.ZombieCharacter.GetBackToIdle
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_GetBackToIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetBackToIdle) == 0x000001, "Wrong alignment on ZombieCharacter_GetBackToIdle");
static_assert(sizeof(ZombieCharacter_GetBackToIdle) == 0x000001, "Wrong size on ZombieCharacter_GetBackToIdle");
static_assert(offsetof(ZombieCharacter_GetBackToIdle, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetBackToIdle::ReturnValue' has a wrong offset!");

// Function Survival.ZombieCharacter.GetCPPZombieType
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_GetCPPZombieType final
{
public:
	EZombieType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetCPPZombieType) == 0x000001, "Wrong alignment on ZombieCharacter_GetCPPZombieType");
static_assert(sizeof(ZombieCharacter_GetCPPZombieType) == 0x000001, "Wrong size on ZombieCharacter_GetCPPZombieType");
static_assert(offsetof(ZombieCharacter_GetCPPZombieType, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetCPPZombieType::ReturnValue' has a wrong offset!");

// Function Survival.ZombieCharacter.GetDamaged
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_GetDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetDamaged) == 0x000001, "Wrong alignment on ZombieCharacter_GetDamaged");
static_assert(sizeof(ZombieCharacter_GetDamaged) == 0x000001, "Wrong size on ZombieCharacter_GetDamaged");
static_assert(offsetof(ZombieCharacter_GetDamaged, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetDamaged::ReturnValue' has a wrong offset!");

// Function Survival.ZombieCharacter.GetZombieAnimType
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_GetZombieAnimType final
{
public:
	EZombieAnimType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_GetZombieAnimType) == 0x000001, "Wrong alignment on ZombieCharacter_GetZombieAnimType");
static_assert(sizeof(ZombieCharacter_GetZombieAnimType) == 0x000001, "Wrong size on ZombieCharacter_GetZombieAnimType");
static_assert(offsetof(ZombieCharacter_GetZombieAnimType, ReturnValue) == 0x000000, "Member 'ZombieCharacter_GetZombieAnimType::ReturnValue' has a wrong offset!");

// Function Survival.ZombieCharacter.SetAgressive
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_SetAgressive final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_SetAgressive) == 0x000001, "Wrong alignment on ZombieCharacter_SetAgressive");
static_assert(sizeof(ZombieCharacter_SetAgressive) == 0x000001, "Wrong size on ZombieCharacter_SetAgressive");
static_assert(offsetof(ZombieCharacter_SetAgressive, NewValue) == 0x000000, "Member 'ZombieCharacter_SetAgressive::NewValue' has a wrong offset!");

// Function Survival.ZombieCharacter.SetBackToIdle
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_SetBackToIdle final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_SetBackToIdle) == 0x000001, "Wrong alignment on ZombieCharacter_SetBackToIdle");
static_assert(sizeof(ZombieCharacter_SetBackToIdle) == 0x000001, "Wrong size on ZombieCharacter_SetBackToIdle");
static_assert(offsetof(ZombieCharacter_SetBackToIdle, NewValue) == 0x000000, "Member 'ZombieCharacter_SetBackToIdle::NewValue' has a wrong offset!");

// Function Survival.ZombieCharacter.SetCPPZombieType
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_SetCPPZombieType final
{
public:
	EZombieType                                   NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_SetCPPZombieType) == 0x000001, "Wrong alignment on ZombieCharacter_SetCPPZombieType");
static_assert(sizeof(ZombieCharacter_SetCPPZombieType) == 0x000001, "Wrong size on ZombieCharacter_SetCPPZombieType");
static_assert(offsetof(ZombieCharacter_SetCPPZombieType, NewValue) == 0x000000, "Member 'ZombieCharacter_SetCPPZombieType::NewValue' has a wrong offset!");

// Function Survival.ZombieCharacter.SetDamaged
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_SetDamaged final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_SetDamaged) == 0x000001, "Wrong alignment on ZombieCharacter_SetDamaged");
static_assert(sizeof(ZombieCharacter_SetDamaged) == 0x000001, "Wrong size on ZombieCharacter_SetDamaged");
static_assert(offsetof(ZombieCharacter_SetDamaged, NewValue) == 0x000000, "Member 'ZombieCharacter_SetDamaged::NewValue' has a wrong offset!");

// Function Survival.ZombieCharacter.SetZombieAnimType
// 0x0001 (0x0001 - 0x0000)
struct ZombieCharacter_SetZombieAnimType final
{
public:
	EZombieAnimType                               NewZombieAnimType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombieCharacter_SetZombieAnimType) == 0x000001, "Wrong alignment on ZombieCharacter_SetZombieAnimType");
static_assert(sizeof(ZombieCharacter_SetZombieAnimType) == 0x000001, "Wrong size on ZombieCharacter_SetZombieAnimType");
static_assert(offsetof(ZombieCharacter_SetZombieAnimType, NewZombieAnimType) == 0x000000, "Member 'ZombieCharacter_SetZombieAnimType::NewZombieAnimType' has a wrong offset!");

// Function Survival.AdditionalEditorFunctions.GetViewportCamera
// 0x0018 (0x0018 - 0x0000)
struct AdditionalEditorFunctions_GetViewportCamera final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdditionalEditorFunctions_GetViewportCamera) == 0x000008, "Wrong alignment on AdditionalEditorFunctions_GetViewportCamera");
static_assert(sizeof(AdditionalEditorFunctions_GetViewportCamera) == 0x000018, "Wrong size on AdditionalEditorFunctions_GetViewportCamera");
static_assert(offsetof(AdditionalEditorFunctions_GetViewportCamera, ReturnValue) == 0x000000, "Member 'AdditionalEditorFunctions_GetViewportCamera::ReturnValue' has a wrong offset!");

// Function Survival.AdditionalEditorFunctions.IsWithEditor
// 0x0001 (0x0001 - 0x0000)
struct AdditionalEditorFunctions_IsWithEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AdditionalEditorFunctions_IsWithEditor) == 0x000001, "Wrong alignment on AdditionalEditorFunctions_IsWithEditor");
static_assert(sizeof(AdditionalEditorFunctions_IsWithEditor) == 0x000001, "Wrong size on AdditionalEditorFunctions_IsWithEditor");
static_assert(offsetof(AdditionalEditorFunctions_IsWithEditor, ReturnValue) == 0x000000, "Member 'AdditionalEditorFunctions_IsWithEditor::ReturnValue' has a wrong offset!");

// Function Survival.AIControllerTeam.SetCrowdSimulationState
// 0x0008 (0x0008 - 0x0000)
struct AIControllerTeam_SetCrowdSimulationState final
{
public:
	class UCrowdFollowingComponent*               CrowdFollowingComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerTeam_SetCrowdSimulationState) == 0x000008, "Wrong alignment on AIControllerTeam_SetCrowdSimulationState");
static_assert(sizeof(AIControllerTeam_SetCrowdSimulationState) == 0x000008, "Wrong size on AIControllerTeam_SetCrowdSimulationState");
static_assert(offsetof(AIControllerTeam_SetCrowdSimulationState, CrowdFollowingComponent) == 0x000000, "Member 'AIControllerTeam_SetCrowdSimulationState::CrowdFollowingComponent' has a wrong offset!");

// Function Survival.AIControllerTeam.GetActorPerceptionViewpoint
// 0x0030 (0x0030 - 0x0000)
struct AIControllerTeam_GetActorPerceptionViewpoint final
{
public:
	struct FVector                                Out_Location;                                      // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Out_Rotation;                                      // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIControllerTeam_GetActorPerceptionViewpoint) == 0x000008, "Wrong alignment on AIControllerTeam_GetActorPerceptionViewpoint");
static_assert(sizeof(AIControllerTeam_GetActorPerceptionViewpoint) == 0x000030, "Wrong size on AIControllerTeam_GetActorPerceptionViewpoint");
static_assert(offsetof(AIControllerTeam_GetActorPerceptionViewpoint, Out_Location) == 0x000000, "Member 'AIControllerTeam_GetActorPerceptionViewpoint::Out_Location' has a wrong offset!");
static_assert(offsetof(AIControllerTeam_GetActorPerceptionViewpoint, Out_Rotation) == 0x000018, "Member 'AIControllerTeam_GetActorPerceptionViewpoint::Out_Rotation' has a wrong offset!");

// Function Survival.AIMoveComp.GetCPPAnimationAngle
// 0x0004 (0x0004 - 0x0000)
struct AIMoveComp_GetCPPAnimationAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_GetCPPAnimationAngle) == 0x000004, "Wrong alignment on AIMoveComp_GetCPPAnimationAngle");
static_assert(sizeof(AIMoveComp_GetCPPAnimationAngle) == 0x000004, "Wrong size on AIMoveComp_GetCPPAnimationAngle");
static_assert(offsetof(AIMoveComp_GetCPPAnimationAngle, ReturnValue) == 0x000000, "Member 'AIMoveComp_GetCPPAnimationAngle::ReturnValue' has a wrong offset!");

// Function Survival.AIMoveComp.GetCPPIsStopping
// 0x0001 (0x0001 - 0x0000)
struct AIMoveComp_GetCPPIsStopping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_GetCPPIsStopping) == 0x000001, "Wrong alignment on AIMoveComp_GetCPPIsStopping");
static_assert(sizeof(AIMoveComp_GetCPPIsStopping) == 0x000001, "Wrong size on AIMoveComp_GetCPPIsStopping");
static_assert(offsetof(AIMoveComp_GetCPPIsStopping, ReturnValue) == 0x000000, "Member 'AIMoveComp_GetCPPIsStopping::ReturnValue' has a wrong offset!");

// Function Survival.AIMoveComp.GetCPPMovementType
// 0x0001 (0x0001 - 0x0000)
struct AIMoveComp_GetCPPMovementType final
{
public:
	Survival::EMovementType                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_GetCPPMovementType) == 0x000001, "Wrong alignment on AIMoveComp_GetCPPMovementType");
static_assert(sizeof(AIMoveComp_GetCPPMovementType) == 0x000001, "Wrong size on AIMoveComp_GetCPPMovementType");
static_assert(offsetof(AIMoveComp_GetCPPMovementType, ReturnValue) == 0x000000, "Member 'AIMoveComp_GetCPPMovementType::ReturnValue' has a wrong offset!");

// Function Survival.AIMoveComp.GetCPPVelocityFromAnimation
// 0x0001 (0x0001 - 0x0000)
struct AIMoveComp_GetCPPVelocityFromAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_GetCPPVelocityFromAnimation) == 0x000001, "Wrong alignment on AIMoveComp_GetCPPVelocityFromAnimation");
static_assert(sizeof(AIMoveComp_GetCPPVelocityFromAnimation) == 0x000001, "Wrong size on AIMoveComp_GetCPPVelocityFromAnimation");
static_assert(offsetof(AIMoveComp_GetCPPVelocityFromAnimation, ReturnValue) == 0x000000, "Member 'AIMoveComp_GetCPPVelocityFromAnimation::ReturnValue' has a wrong offset!");

// Function Survival.AIMoveComp.GetCPPVelocityValue
// 0x0004 (0x0004 - 0x0000)
struct AIMoveComp_GetCPPVelocityValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_GetCPPVelocityValue) == 0x000004, "Wrong alignment on AIMoveComp_GetCPPVelocityValue");
static_assert(sizeof(AIMoveComp_GetCPPVelocityValue) == 0x000004, "Wrong size on AIMoveComp_GetCPPVelocityValue");
static_assert(offsetof(AIMoveComp_GetCPPVelocityValue, ReturnValue) == 0x000000, "Member 'AIMoveComp_GetCPPVelocityValue::ReturnValue' has a wrong offset!");

// Function Survival.AIMoveComp.SetCPPAnimationAngle
// 0x0004 (0x0004 - 0x0000)
struct AIMoveComp_SetCPPAnimationAngle final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_SetCPPAnimationAngle) == 0x000004, "Wrong alignment on AIMoveComp_SetCPPAnimationAngle");
static_assert(sizeof(AIMoveComp_SetCPPAnimationAngle) == 0x000004, "Wrong size on AIMoveComp_SetCPPAnimationAngle");
static_assert(offsetof(AIMoveComp_SetCPPAnimationAngle, NewValue) == 0x000000, "Member 'AIMoveComp_SetCPPAnimationAngle::NewValue' has a wrong offset!");

// Function Survival.AIMoveComp.SetCPPIsStopping
// 0x0001 (0x0001 - 0x0000)
struct AIMoveComp_SetCPPIsStopping final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_SetCPPIsStopping) == 0x000001, "Wrong alignment on AIMoveComp_SetCPPIsStopping");
static_assert(sizeof(AIMoveComp_SetCPPIsStopping) == 0x000001, "Wrong size on AIMoveComp_SetCPPIsStopping");
static_assert(offsetof(AIMoveComp_SetCPPIsStopping, NewValue) == 0x000000, "Member 'AIMoveComp_SetCPPIsStopping::NewValue' has a wrong offset!");

// Function Survival.AIMoveComp.SetCPPMovementType
// 0x0001 (0x0001 - 0x0000)
struct AIMoveComp_SetCPPMovementType final
{
public:
	Survival::EMovementType                       NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_SetCPPMovementType) == 0x000001, "Wrong alignment on AIMoveComp_SetCPPMovementType");
static_assert(sizeof(AIMoveComp_SetCPPMovementType) == 0x000001, "Wrong size on AIMoveComp_SetCPPMovementType");
static_assert(offsetof(AIMoveComp_SetCPPMovementType, NewValue) == 0x000000, "Member 'AIMoveComp_SetCPPMovementType::NewValue' has a wrong offset!");

// Function Survival.AIMoveComp.SetCPPVelocityFromAnimation
// 0x0001 (0x0001 - 0x0000)
struct AIMoveComp_SetCPPVelocityFromAnimation final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_SetCPPVelocityFromAnimation) == 0x000001, "Wrong alignment on AIMoveComp_SetCPPVelocityFromAnimation");
static_assert(sizeof(AIMoveComp_SetCPPVelocityFromAnimation) == 0x000001, "Wrong size on AIMoveComp_SetCPPVelocityFromAnimation");
static_assert(offsetof(AIMoveComp_SetCPPVelocityFromAnimation, NewValue) == 0x000000, "Member 'AIMoveComp_SetCPPVelocityFromAnimation::NewValue' has a wrong offset!");

// Function Survival.AIMoveComp.SetCPPVelocityValue
// 0x0004 (0x0004 - 0x0000)
struct AIMoveComp_SetCPPVelocityValue final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveComp_SetCPPVelocityValue) == 0x000004, "Wrong alignment on AIMoveComp_SetCPPVelocityValue");
static_assert(sizeof(AIMoveComp_SetCPPVelocityValue) == 0x000004, "Wrong size on AIMoveComp_SetCPPVelocityValue");
static_assert(offsetof(AIMoveComp_SetCPPVelocityValue, NewValue) == 0x000000, "Member 'AIMoveComp_SetCPPVelocityValue::NewValue' has a wrong offset!");

// Function Survival.BFL_Loop.ArraySortInt
// 0x0028 (0x0028 - 0x0000)
struct BFL_Loop_ArraySortInt final
{
public:
	TArray<int32>                                 Arrayname;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          FromEnd;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFL_Loop_ArraySortInt) == 0x000008, "Wrong alignment on BFL_Loop_ArraySortInt");
static_assert(sizeof(BFL_Loop_ArraySortInt) == 0x000028, "Wrong size on BFL_Loop_ArraySortInt");
static_assert(offsetof(BFL_Loop_ArraySortInt, Arrayname) == 0x000000, "Member 'BFL_Loop_ArraySortInt::Arrayname' has a wrong offset!");
static_assert(offsetof(BFL_Loop_ArraySortInt, FromEnd) == 0x000010, "Member 'BFL_Loop_ArraySortInt::FromEnd' has a wrong offset!");
static_assert(offsetof(BFL_Loop_ArraySortInt, ReturnValue) == 0x000018, "Member 'BFL_Loop_ArraySortInt::ReturnValue' has a wrong offset!");

// Function Survival.BFL_Loop.MapSortByValue
// 0x00A8 (0x00A8 - 0x0000)
struct BFL_Loop_MapSortByValue final
{
public:
	TMap<class UObject*, int32>                   Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	bool                                          FromEnd;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UObject*, int32>                   ReturnValue;                                       // 0x0058(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFL_Loop_MapSortByValue) == 0x000008, "Wrong alignment on BFL_Loop_MapSortByValue");
static_assert(sizeof(BFL_Loop_MapSortByValue) == 0x0000A8, "Wrong size on BFL_Loop_MapSortByValue");
static_assert(offsetof(BFL_Loop_MapSortByValue, Map) == 0x000000, "Member 'BFL_Loop_MapSortByValue::Map' has a wrong offset!");
static_assert(offsetof(BFL_Loop_MapSortByValue, FromEnd) == 0x000050, "Member 'BFL_Loop_MapSortByValue::FromEnd' has a wrong offset!");
static_assert(offsetof(BFL_Loop_MapSortByValue, ReturnValue) == 0x000058, "Member 'BFL_Loop_MapSortByValue::ReturnValue' has a wrong offset!");

// Function Survival.BFL_Loop.StringMapSortByInt
// 0x00A8 (0x00A8 - 0x0000)
struct BFL_Loop_StringMapSortByInt final
{
public:
	TMap<class FString, int32>                    Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	bool                                          FromEnd;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    ReturnValue;                                       // 0x0058(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFL_Loop_StringMapSortByInt) == 0x000008, "Wrong alignment on BFL_Loop_StringMapSortByInt");
static_assert(sizeof(BFL_Loop_StringMapSortByInt) == 0x0000A8, "Wrong size on BFL_Loop_StringMapSortByInt");
static_assert(offsetof(BFL_Loop_StringMapSortByInt, Map) == 0x000000, "Member 'BFL_Loop_StringMapSortByInt::Map' has a wrong offset!");
static_assert(offsetof(BFL_Loop_StringMapSortByInt, FromEnd) == 0x000050, "Member 'BFL_Loop_StringMapSortByInt::FromEnd' has a wrong offset!");
static_assert(offsetof(BFL_Loop_StringMapSortByInt, ReturnValue) == 0x000058, "Member 'BFL_Loop_StringMapSortByInt::ReturnValue' has a wrong offset!");

// Function Survival.RnnrSetVar.SetBoolByName
// 0x0020 (0x0020 - 0x0000)
struct RnnrSetVar_SetBoolByName final
{
public:
	class UObject*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VarName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewValue;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RnnrSetVar_SetBoolByName) == 0x000008, "Wrong alignment on RnnrSetVar_SetBoolByName");
static_assert(sizeof(RnnrSetVar_SetBoolByName) == 0x000020, "Wrong size on RnnrSetVar_SetBoolByName");
static_assert(offsetof(RnnrSetVar_SetBoolByName, Target) == 0x000000, "Member 'RnnrSetVar_SetBoolByName::Target' has a wrong offset!");
static_assert(offsetof(RnnrSetVar_SetBoolByName, VarName) == 0x000008, "Member 'RnnrSetVar_SetBoolByName::VarName' has a wrong offset!");
static_assert(offsetof(RnnrSetVar_SetBoolByName, NewValue) == 0x000010, "Member 'RnnrSetVar_SetBoolByName::NewValue' has a wrong offset!");
static_assert(offsetof(RnnrSetVar_SetBoolByName, ReturnValue) == 0x000018, "Member 'RnnrSetVar_SetBoolByName::ReturnValue' has a wrong offset!");

// Function Survival.RnnrSetVar.SetVolumetricTranslucentShadow
// 0x0010 (0x0010 - 0x0000)
struct RnnrSetVar_SetVolumetricTranslucentShadow final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewValue;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RnnrSetVar_SetVolumetricTranslucentShadow) == 0x000008, "Wrong alignment on RnnrSetVar_SetVolumetricTranslucentShadow");
static_assert(sizeof(RnnrSetVar_SetVolumetricTranslucentShadow) == 0x000010, "Wrong size on RnnrSetVar_SetVolumetricTranslucentShadow");
static_assert(offsetof(RnnrSetVar_SetVolumetricTranslucentShadow, Target) == 0x000000, "Member 'RnnrSetVar_SetVolumetricTranslucentShadow::Target' has a wrong offset!");
static_assert(offsetof(RnnrSetVar_SetVolumetricTranslucentShadow, NewValue) == 0x000008, "Member 'RnnrSetVar_SetVolumetricTranslucentShadow::NewValue' has a wrong offset!");

// Function Survival.CharacterHeadStim.CalculateVariablesCPP
// 0x0004 (0x0004 - 0x0000)
struct CharacterHeadStim_CalculateVariablesCPP final
{
public:
	float                                         _DeltaTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHeadStim_CalculateVariablesCPP) == 0x000004, "Wrong alignment on CharacterHeadStim_CalculateVariablesCPP");
static_assert(sizeof(CharacterHeadStim_CalculateVariablesCPP) == 0x000004, "Wrong size on CharacterHeadStim_CalculateVariablesCPP");
static_assert(offsetof(CharacterHeadStim_CalculateVariablesCPP, _DeltaTime) == 0x000000, "Member 'CharacterHeadStim_CalculateVariablesCPP::_DeltaTime' has a wrong offset!");

// Function Survival.CharacterHeadStim.MainLineTrace
// 0x00F0 (0x00F0 - 0x0000)
struct CharacterHeadStim_MainLineTrace final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Debug;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             ReturnValue;                                       // 0x0008(0x00E8)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHeadStim_MainLineTrace) == 0x000008, "Wrong alignment on CharacterHeadStim_MainLineTrace");
static_assert(sizeof(CharacterHeadStim_MainLineTrace) == 0x0000F0, "Wrong size on CharacterHeadStim_MainLineTrace");
static_assert(offsetof(CharacterHeadStim_MainLineTrace, Distance) == 0x000000, "Member 'CharacterHeadStim_MainLineTrace::Distance' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_MainLineTrace, Debug) == 0x000004, "Member 'CharacterHeadStim_MainLineTrace::Debug' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_MainLineTrace, ReturnValue) == 0x000008, "Member 'CharacterHeadStim_MainLineTrace::ReturnValue' has a wrong offset!");

// Function Survival.CharacterHeadStim.NegativeEffectCalculate
// 0x0028 (0x0028 - 0x0000)
struct CharacterHeadStim_NegativeEffectCalculate final
{
public:
	EUNegativeEffectDamageType                    _negativeEffectDamageType;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _health;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _boneName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _bleedChanceMultiplier;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _armor;                                            // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EUNegativeEffectType>                  ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHeadStim_NegativeEffectCalculate) == 0x000008, "Wrong alignment on CharacterHeadStim_NegativeEffectCalculate");
static_assert(sizeof(CharacterHeadStim_NegativeEffectCalculate) == 0x000028, "Wrong size on CharacterHeadStim_NegativeEffectCalculate");
static_assert(offsetof(CharacterHeadStim_NegativeEffectCalculate, _negativeEffectDamageType) == 0x000000, "Member 'CharacterHeadStim_NegativeEffectCalculate::_negativeEffectDamageType' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_NegativeEffectCalculate, _health) == 0x000004, "Member 'CharacterHeadStim_NegativeEffectCalculate::_health' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_NegativeEffectCalculate, _boneName) == 0x000008, "Member 'CharacterHeadStim_NegativeEffectCalculate::_boneName' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_NegativeEffectCalculate, _bleedChanceMultiplier) == 0x000010, "Member 'CharacterHeadStim_NegativeEffectCalculate::_bleedChanceMultiplier' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_NegativeEffectCalculate, _armor) == 0x000014, "Member 'CharacterHeadStim_NegativeEffectCalculate::_armor' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_NegativeEffectCalculate, ReturnValue) == 0x000018, "Member 'CharacterHeadStim_NegativeEffectCalculate::ReturnValue' has a wrong offset!");

// Function Survival.CharacterHeadStim.OnSignificance
// 0x0003 (0x0003 - 0x0000)
struct CharacterHeadStim_OnSignificance final
{
public:
	ESignificanceLevel                            OldSignificance;                                   // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESignificanceLevel                            Significance;                                      // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFinal;                                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHeadStim_OnSignificance) == 0x000001, "Wrong alignment on CharacterHeadStim_OnSignificance");
static_assert(sizeof(CharacterHeadStim_OnSignificance) == 0x000003, "Wrong size on CharacterHeadStim_OnSignificance");
static_assert(offsetof(CharacterHeadStim_OnSignificance, OldSignificance) == 0x000000, "Member 'CharacterHeadStim_OnSignificance::OldSignificance' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_OnSignificance, Significance) == 0x000001, "Member 'CharacterHeadStim_OnSignificance::Significance' has a wrong offset!");
static_assert(offsetof(CharacterHeadStim_OnSignificance, bFinal) == 0x000002, "Member 'CharacterHeadStim_OnSignificance::bFinal' has a wrong offset!");

// Function Survival.CharacterHeadStim.GetLookAtLocation
// 0x0018 (0x0018 - 0x0000)
struct CharacterHeadStim_GetLookAtLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHeadStim_GetLookAtLocation) == 0x000008, "Wrong alignment on CharacterHeadStim_GetLookAtLocation");
static_assert(sizeof(CharacterHeadStim_GetLookAtLocation) == 0x000018, "Wrong size on CharacterHeadStim_GetLookAtLocation");
static_assert(offsetof(CharacterHeadStim_GetLookAtLocation, ReturnValue) == 0x000000, "Member 'CharacterHeadStim_GetLookAtLocation::ReturnValue' has a wrong offset!");

// Function Survival.FL_SteamHelper.GetSteamAuthenticateUserTicket
// 0x0010 (0x0010 - 0x0000)
struct FL_SteamHelper_GetSteamAuthenticateUserTicket final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FL_SteamHelper_GetSteamAuthenticateUserTicket) == 0x000008, "Wrong alignment on FL_SteamHelper_GetSteamAuthenticateUserTicket");
static_assert(sizeof(FL_SteamHelper_GetSteamAuthenticateUserTicket) == 0x000010, "Wrong size on FL_SteamHelper_GetSteamAuthenticateUserTicket");
static_assert(offsetof(FL_SteamHelper_GetSteamAuthenticateUserTicket, ReturnValue) == 0x000000, "Member 'FL_SteamHelper_GetSteamAuthenticateUserTicket::ReturnValue' has a wrong offset!");

// Function Survival.FL_SteamHelper.GetSteamUserCountryCode
// 0x0010 (0x0010 - 0x0000)
struct FL_SteamHelper_GetSteamUserCountryCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FL_SteamHelper_GetSteamUserCountryCode) == 0x000008, "Wrong alignment on FL_SteamHelper_GetSteamUserCountryCode");
static_assert(sizeof(FL_SteamHelper_GetSteamUserCountryCode) == 0x000010, "Wrong size on FL_SteamHelper_GetSteamUserCountryCode");
static_assert(offsetof(FL_SteamHelper_GetSteamUserCountryCode, ReturnValue) == 0x000000, "Member 'FL_SteamHelper_GetSteamUserCountryCode::ReturnValue' has a wrong offset!");

// Function Survival.FL_SteamHelper.GetSteamUserIDString
// 0x0010 (0x0010 - 0x0000)
struct FL_SteamHelper_GetSteamUserIDString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FL_SteamHelper_GetSteamUserIDString) == 0x000008, "Wrong alignment on FL_SteamHelper_GetSteamUserIDString");
static_assert(sizeof(FL_SteamHelper_GetSteamUserIDString) == 0x000010, "Wrong size on FL_SteamHelper_GetSteamUserIDString");
static_assert(offsetof(FL_SteamHelper_GetSteamUserIDString, ReturnValue) == 0x000000, "Member 'FL_SteamHelper_GetSteamUserIDString::ReturnValue' has a wrong offset!");

// Function Survival.GameHUD.SetUI
// 0x0001 (0x0001 - 0x0000)
struct GameHUD_SetUI final
{
public:
	EUIType                                       Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameHUD_SetUI) == 0x000001, "Wrong alignment on GameHUD_SetUI");
static_assert(sizeof(GameHUD_SetUI) == 0x000001, "Wrong size on GameHUD_SetUI");
static_assert(offsetof(GameHUD_SetUI, Type) == 0x000000, "Member 'GameHUD_SetUI::Type' has a wrong offset!");

// Function Survival.GoreComponent.TransformHitLocationToSkeletonRelative
// 0x0040 (0x0040 - 0x0000)
struct GoreComponent_TransformHitLocationToSkeletonRelative final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USkeletalMeshComponent*           Mesh;                                              // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0020(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoreComponent_TransformHitLocationToSkeletonRelative) == 0x000008, "Wrong alignment on GoreComponent_TransformHitLocationToSkeletonRelative");
static_assert(sizeof(GoreComponent_TransformHitLocationToSkeletonRelative) == 0x000040, "Wrong size on GoreComponent_TransformHitLocationToSkeletonRelative");
static_assert(offsetof(GoreComponent_TransformHitLocationToSkeletonRelative, HitLocation) == 0x000000, "Member 'GoreComponent_TransformHitLocationToSkeletonRelative::HitLocation' has a wrong offset!");
static_assert(offsetof(GoreComponent_TransformHitLocationToSkeletonRelative, Mesh) == 0x000018, "Member 'GoreComponent_TransformHitLocationToSkeletonRelative::Mesh' has a wrong offset!");
static_assert(offsetof(GoreComponent_TransformHitLocationToSkeletonRelative, BoneName) == 0x000020, "Member 'GoreComponent_TransformHitLocationToSkeletonRelative::BoneName' has a wrong offset!");
static_assert(offsetof(GoreComponent_TransformHitLocationToSkeletonRelative, ReturnValue) == 0x000028, "Member 'GoreComponent_TransformHitLocationToSkeletonRelative::ReturnValue' has a wrong offset!");

// Function Survival.GoreComponent.CriticalDamaged
// 0x0001 (0x0001 - 0x0000)
struct GoreComponent_CriticalDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoreComponent_CriticalDamaged) == 0x000001, "Wrong alignment on GoreComponent_CriticalDamaged");
static_assert(sizeof(GoreComponent_CriticalDamaged) == 0x000001, "Wrong size on GoreComponent_CriticalDamaged");
static_assert(offsetof(GoreComponent_CriticalDamaged, ReturnValue) == 0x000000, "Member 'GoreComponent_CriticalDamaged::ReturnValue' has a wrong offset!");

// Function Survival.GoreComponent.DestroyLimb
// 0x0020 (0x0020 - 0x0000)
struct GoreComponent_DestroyLimb final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoreComponent_DestroyLimb) == 0x000008, "Wrong alignment on GoreComponent_DestroyLimb");
static_assert(sizeof(GoreComponent_DestroyLimb) == 0x000020, "Wrong size on GoreComponent_DestroyLimb");
static_assert(offsetof(GoreComponent_DestroyLimb, BoneName) == 0x000000, "Member 'GoreComponent_DestroyLimb::BoneName' has a wrong offset!");
static_assert(offsetof(GoreComponent_DestroyLimb, HitLocation) == 0x000008, "Member 'GoreComponent_DestroyLimb::HitLocation' has a wrong offset!");

// Function Survival.GoreComponent.SetOwnerMesh
// 0x0008 (0x0008 - 0x0000)
struct GoreComponent_SetOwnerMesh final
{
public:
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GoreComponent_SetOwnerMesh) == 0x000008, "Wrong alignment on GoreComponent_SetOwnerMesh");
static_assert(sizeof(GoreComponent_SetOwnerMesh) == 0x000008, "Wrong size on GoreComponent_SetOwnerMesh");
static_assert(offsetof(GoreComponent_SetOwnerMesh, Mesh) == 0x000000, "Member 'GoreComponent_SetOwnerMesh::Mesh' has a wrong offset!");

// Function Survival.PathToAnimal.AddAnimalStep
// 0x0028 (0x0028 - 0x0000)
struct PathToAnimal_AddAnimalStep final
{
public:
	struct FAnimalSteps                           Steps;                                             // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnedSteps;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PathToAnimal_AddAnimalStep) == 0x000008, "Wrong alignment on PathToAnimal_AddAnimalStep");
static_assert(sizeof(PathToAnimal_AddAnimalStep) == 0x000028, "Wrong size on PathToAnimal_AddAnimalStep");
static_assert(offsetof(PathToAnimal_AddAnimalStep, Steps) == 0x000000, "Member 'PathToAnimal_AddAnimalStep::Steps' has a wrong offset!");
static_assert(offsetof(PathToAnimal_AddAnimalStep, Actor) == 0x000010, "Member 'PathToAnimal_AddAnimalStep::Actor' has a wrong offset!");
static_assert(offsetof(PathToAnimal_AddAnimalStep, ReturnedSteps) == 0x000018, "Member 'PathToAnimal_AddAnimalStep::ReturnedSteps' has a wrong offset!");

// Function Survival.ProjectileBullet.CalcVelocity
// 0x0018 (0x0018 - 0x0000)
struct ProjectileBullet_CalcVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileBullet_CalcVelocity) == 0x000008, "Wrong alignment on ProjectileBullet_CalcVelocity");
static_assert(sizeof(ProjectileBullet_CalcVelocity) == 0x000018, "Wrong size on ProjectileBullet_CalcVelocity");
static_assert(offsetof(ProjectileBullet_CalcVelocity, ReturnValue) == 0x000000, "Member 'ProjectileBullet_CalcVelocity::ReturnValue' has a wrong offset!");

// Function Survival.ProjectileBullet.InitBullet
// 0x0010 (0x0010 - 0x0000)
struct ProjectileBullet_InitBullet final
{
public:
	float                                         bulletSpeedMultiplier;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bulletSlowCoef;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bulletSpeed;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bulletSpeedFinal;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileBullet_InitBullet) == 0x000004, "Wrong alignment on ProjectileBullet_InitBullet");
static_assert(sizeof(ProjectileBullet_InitBullet) == 0x000010, "Wrong size on ProjectileBullet_InitBullet");
static_assert(offsetof(ProjectileBullet_InitBullet, bulletSpeedMultiplier) == 0x000000, "Member 'ProjectileBullet_InitBullet::bulletSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ProjectileBullet_InitBullet, bulletSlowCoef) == 0x000004, "Member 'ProjectileBullet_InitBullet::bulletSlowCoef' has a wrong offset!");
static_assert(offsetof(ProjectileBullet_InitBullet, bulletSpeed) == 0x000008, "Member 'ProjectileBullet_InitBullet::bulletSpeed' has a wrong offset!");
static_assert(offsetof(ProjectileBullet_InitBullet, bulletSpeedFinal) == 0x00000C, "Member 'ProjectileBullet_InitBullet::bulletSpeedFinal' has a wrong offset!");

// Function Survival.ProjectileBullet.InitBulletParam
// 0x0008 (0x0008 - 0x0000)
struct ProjectileBullet_InitBulletParam final
{
public:
	float                                         FMass;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FTrueCaliber;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileBullet_InitBulletParam) == 0x000004, "Wrong alignment on ProjectileBullet_InitBulletParam");
static_assert(sizeof(ProjectileBullet_InitBulletParam) == 0x000008, "Wrong size on ProjectileBullet_InitBulletParam");
static_assert(offsetof(ProjectileBullet_InitBulletParam, FMass) == 0x000000, "Member 'ProjectileBullet_InitBulletParam::FMass' has a wrong offset!");
static_assert(offsetof(ProjectileBullet_InitBulletParam, FTrueCaliber) == 0x000004, "Member 'ProjectileBullet_InitBulletParam::FTrueCaliber' has a wrong offset!");

// Function Survival.ProjectileBullet.ProjectileOnceTime
// 0x0004 (0x0004 - 0x0000)
struct ProjectileBullet_ProjectileOnceTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileBullet_ProjectileOnceTime) == 0x000004, "Wrong alignment on ProjectileBullet_ProjectileOnceTime");
static_assert(sizeof(ProjectileBullet_ProjectileOnceTime) == 0x000004, "Wrong size on ProjectileBullet_ProjectileOnceTime");
static_assert(offsetof(ProjectileBullet_ProjectileOnceTime, ReturnValue) == 0x000000, "Member 'ProjectileBullet_ProjectileOnceTime::ReturnValue' has a wrong offset!");

// Function Survival.RBVehicle.PhysicsTick
// 0x0004 (0x0004 - 0x0000)
struct RBVehicle_PhysicsTick final
{
public:
	float                                         SubstepDeltaTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVehicle_PhysicsTick) == 0x000004, "Wrong alignment on RBVehicle_PhysicsTick");
static_assert(sizeof(RBVehicle_PhysicsTick) == 0x000004, "Wrong size on RBVehicle_PhysicsTick");
static_assert(offsetof(RBVehicle_PhysicsTick, SubstepDeltaTime) == 0x000000, "Member 'RBVehicle_PhysicsTick::SubstepDeltaTime' has a wrong offset!");

// Function Survival.RBVehicle.UpdateLastMove
// 0x0004 (0x0004 - 0x0000)
struct RBVehicle_UpdateLastMove final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RBVehicle_UpdateLastMove) == 0x000004, "Wrong alignment on RBVehicle_UpdateLastMove");
static_assert(sizeof(RBVehicle_UpdateLastMove) == 0x000004, "Wrong size on RBVehicle_UpdateLastMove");
static_assert(offsetof(RBVehicle_UpdateLastMove, DeltaTime) == 0x000000, "Member 'RBVehicle_UpdateLastMove::DeltaTime' has a wrong offset!");

// Function Survival.SmoothSync.ClientSendsTransformToServer
// 0x0010 (0x0010 - 0x0000)
struct SmoothSync_ClientSendsTransformToServer final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_ClientSendsTransformToServer) == 0x000008, "Wrong alignment on SmoothSync_ClientSendsTransformToServer");
static_assert(sizeof(SmoothSync_ClientSendsTransformToServer) == 0x000010, "Wrong size on SmoothSync_ClientSendsTransformToServer");
static_assert(offsetof(SmoothSync_ClientSendsTransformToServer, Value) == 0x000000, "Member 'SmoothSync_ClientSendsTransformToServer::Value' has a wrong offset!");

// Function Survival.SmoothSync.enableSmoothSync
// 0x0001 (0x0001 - 0x0000)
struct SmoothSync_EnableSmoothSync final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_EnableSmoothSync) == 0x000001, "Wrong alignment on SmoothSync_EnableSmoothSync");
static_assert(sizeof(SmoothSync_EnableSmoothSync) == 0x000001, "Wrong size on SmoothSync_EnableSmoothSync");
static_assert(offsetof(SmoothSync_EnableSmoothSync, Enable) == 0x000000, "Member 'SmoothSync_EnableSmoothSync::Enable' has a wrong offset!");

// Function Survival.SmoothSync.ServerSendsTransformToEveryone
// 0x0010 (0x0010 - 0x0000)
struct SmoothSync_ServerSendsTransformToEveryone final
{
public:
	TArray<uint8>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_ServerSendsTransformToEveryone) == 0x000008, "Wrong alignment on SmoothSync_ServerSendsTransformToEveryone");
static_assert(sizeof(SmoothSync_ServerSendsTransformToEveryone) == 0x000010, "Wrong size on SmoothSync_ServerSendsTransformToEveryone");
static_assert(offsetof(SmoothSync_ServerSendsTransformToEveryone, Value) == 0x000000, "Member 'SmoothSync_ServerSendsTransformToEveryone::Value' has a wrong offset!");

// Function Survival.SmoothSync.setSceneComponentToSync
// 0x0008 (0x0008 - 0x0000)
struct SmoothSync_SetSceneComponentToSync final
{
public:
	class USceneComponent*                        TheComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_SetSceneComponentToSync) == 0x000008, "Wrong alignment on SmoothSync_SetSceneComponentToSync");
static_assert(sizeof(SmoothSync_SetSceneComponentToSync) == 0x000008, "Wrong size on SmoothSync_SetSceneComponentToSync");
static_assert(offsetof(SmoothSync_SetSceneComponentToSync, TheComponent) == 0x000000, "Member 'SmoothSync_SetSceneComponentToSync::TheComponent' has a wrong offset!");

// Function Survival.SmoothSync.SmoothSyncEnableClientToServer
// 0x0001 (0x0001 - 0x0000)
struct SmoothSync_SmoothSyncEnableClientToServer final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_SmoothSyncEnableClientToServer) == 0x000001, "Wrong alignment on SmoothSync_SmoothSyncEnableClientToServer");
static_assert(sizeof(SmoothSync_SmoothSyncEnableClientToServer) == 0x000001, "Wrong size on SmoothSync_SmoothSyncEnableClientToServer");
static_assert(offsetof(SmoothSync_SmoothSyncEnableClientToServer, Enable) == 0x000000, "Member 'SmoothSync_SmoothSyncEnableClientToServer::Enable' has a wrong offset!");

// Function Survival.SmoothSync.SmoothSyncEnableServerToClients
// 0x0001 (0x0001 - 0x0000)
struct SmoothSync_SmoothSyncEnableServerToClients final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_SmoothSyncEnableServerToClients) == 0x000001, "Wrong alignment on SmoothSync_SmoothSyncEnableServerToClients");
static_assert(sizeof(SmoothSync_SmoothSyncEnableServerToClients) == 0x000001, "Wrong size on SmoothSync_SmoothSyncEnableServerToClients");
static_assert(offsetof(SmoothSync_SmoothSyncEnableServerToClients, Enable) == 0x000000, "Member 'SmoothSync_SmoothSyncEnableServerToClients::Enable' has a wrong offset!");

// Function Survival.SmoothSync.SmoothSyncTeleportClientToServer
// 0x0028 (0x0028 - 0x0000)
struct SmoothSync_SmoothSyncTeleportClientToServer final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Scale;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempOwnerTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_SmoothSyncTeleportClientToServer) == 0x000004, "Wrong alignment on SmoothSync_SmoothSyncTeleportClientToServer");
static_assert(sizeof(SmoothSync_SmoothSyncTeleportClientToServer) == 0x000028, "Wrong size on SmoothSync_SmoothSyncTeleportClientToServer");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportClientToServer, Position) == 0x000000, "Member 'SmoothSync_SmoothSyncTeleportClientToServer::Position' has a wrong offset!");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportClientToServer, Rotation) == 0x00000C, "Member 'SmoothSync_SmoothSyncTeleportClientToServer::Rotation' has a wrong offset!");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportClientToServer, Scale) == 0x000018, "Member 'SmoothSync_SmoothSyncTeleportClientToServer::Scale' has a wrong offset!");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportClientToServer, TempOwnerTime) == 0x000024, "Member 'SmoothSync_SmoothSyncTeleportClientToServer::TempOwnerTime' has a wrong offset!");

// Function Survival.SmoothSync.SmoothSyncTeleportServerToClients
// 0x0028 (0x0028 - 0x0000)
struct SmoothSync_SmoothSyncTeleportServerToClients final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Rotation;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector3f                              Scale;                                             // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempOwnerTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmoothSync_SmoothSyncTeleportServerToClients) == 0x000004, "Wrong alignment on SmoothSync_SmoothSyncTeleportServerToClients");
static_assert(sizeof(SmoothSync_SmoothSyncTeleportServerToClients) == 0x000028, "Wrong size on SmoothSync_SmoothSyncTeleportServerToClients");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportServerToClients, Position) == 0x000000, "Member 'SmoothSync_SmoothSyncTeleportServerToClients::Position' has a wrong offset!");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportServerToClients, Rotation) == 0x00000C, "Member 'SmoothSync_SmoothSyncTeleportServerToClients::Rotation' has a wrong offset!");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportServerToClients, Scale) == 0x000018, "Member 'SmoothSync_SmoothSyncTeleportServerToClients::Scale' has a wrong offset!");
static_assert(offsetof(SmoothSync_SmoothSyncTeleportServerToClients, TempOwnerTime) == 0x000024, "Member 'SmoothSync_SmoothSyncTeleportServerToClients::TempOwnerTime' has a wrong offset!");

// Function Survival.SurvCameraFOVObject.SwitchReloadingFOV
// 0x0001 (0x0001 - 0x0000)
struct SurvCameraFOVObject_SwitchReloadingFOV final
{
public:
	bool                                          IsReloadingFOV;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvCameraFOVObject_SwitchReloadingFOV) == 0x000001, "Wrong alignment on SurvCameraFOVObject_SwitchReloadingFOV");
static_assert(sizeof(SurvCameraFOVObject_SwitchReloadingFOV) == 0x000001, "Wrong size on SurvCameraFOVObject_SwitchReloadingFOV");
static_assert(offsetof(SurvCameraFOVObject_SwitchReloadingFOV, IsReloadingFOV) == 0x000000, "Member 'SurvCameraFOVObject_SwitchReloadingFOV::IsReloadingFOV' has a wrong offset!");

// Function Survival.SurvCameraLocationObject.CameraOverrideSocket
// 0x0020 (0x0020 - 0x0000)
struct SurvCameraLocationObject_CameraOverrideSocket final
{
public:
	struct FVector                                OffsetVector;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvCameraLocationObject_CameraOverrideSocket) == 0x000008, "Wrong alignment on SurvCameraLocationObject_CameraOverrideSocket");
static_assert(sizeof(SurvCameraLocationObject_CameraOverrideSocket) == 0x000020, "Wrong size on SurvCameraLocationObject_CameraOverrideSocket");
static_assert(offsetof(SurvCameraLocationObject_CameraOverrideSocket, OffsetVector) == 0x000000, "Member 'SurvCameraLocationObject_CameraOverrideSocket::OffsetVector' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CameraOverrideSocket, bReset) == 0x000018, "Member 'SurvCameraLocationObject_CameraOverrideSocket::bReset' has a wrong offset!");

// Function Survival.SurvCameraLocationObject.CameraOverrideTarget
// 0x0020 (0x0020 - 0x0000)
struct SurvCameraLocationObject_CameraOverrideTarget final
{
public:
	struct FVector                                OffsetVector;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReset;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvCameraLocationObject_CameraOverrideTarget) == 0x000008, "Wrong alignment on SurvCameraLocationObject_CameraOverrideTarget");
static_assert(sizeof(SurvCameraLocationObject_CameraOverrideTarget) == 0x000020, "Wrong size on SurvCameraLocationObject_CameraOverrideTarget");
static_assert(offsetof(SurvCameraLocationObject_CameraOverrideTarget, OffsetVector) == 0x000000, "Member 'SurvCameraLocationObject_CameraOverrideTarget::OffsetVector' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CameraOverrideTarget, bReset) == 0x000018, "Member 'SurvCameraLocationObject_CameraOverrideTarget::bReset' has a wrong offset!");

// Function Survival.SurvCameraLocationObject.CameraOverrideTickBlock
// 0x0001 (0x0001 - 0x0000)
struct SurvCameraLocationObject_CameraOverrideTickBlock final
{
public:
	bool                                          bBlock;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvCameraLocationObject_CameraOverrideTickBlock) == 0x000001, "Wrong alignment on SurvCameraLocationObject_CameraOverrideTickBlock");
static_assert(sizeof(SurvCameraLocationObject_CameraOverrideTickBlock) == 0x000001, "Wrong size on SurvCameraLocationObject_CameraOverrideTickBlock");
static_assert(offsetof(SurvCameraLocationObject_CameraOverrideTickBlock, bBlock) == 0x000000, "Member 'SurvCameraLocationObject_CameraOverrideTickBlock::bBlock' has a wrong offset!");

// Function Survival.SurvCameraLocationObject.CustomLerp
// 0x0030 (0x0030 - 0x0000)
struct SurvCameraLocationObject_CustomLerp final
{
public:
	struct FVector                                StartSocketVector;                                 // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LerpLenght;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CustomLerpOffset;                                  // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   LerpType;                                          // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          X;                                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Y;                                                 // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Z;                                                 // 0x002A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvCameraLocationObject_CustomLerp) == 0x000008, "Wrong alignment on SurvCameraLocationObject_CustomLerp");
static_assert(sizeof(SurvCameraLocationObject_CustomLerp) == 0x000030, "Wrong size on SurvCameraLocationObject_CustomLerp");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, StartSocketVector) == 0x000000, "Member 'SurvCameraLocationObject_CustomLerp::StartSocketVector' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, LerpLenght) == 0x000018, "Member 'SurvCameraLocationObject_CustomLerp::LerpLenght' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, CustomLerpOffset) == 0x00001C, "Member 'SurvCameraLocationObject_CustomLerp::CustomLerpOffset' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, LerpType) == 0x00001D, "Member 'SurvCameraLocationObject_CustomLerp::LerpType' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, BlendExp) == 0x000020, "Member 'SurvCameraLocationObject_CustomLerp::BlendExp' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, Steps) == 0x000024, "Member 'SurvCameraLocationObject_CustomLerp::Steps' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, X) == 0x000028, "Member 'SurvCameraLocationObject_CustomLerp::X' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, Y) == 0x000029, "Member 'SurvCameraLocationObject_CustomLerp::Y' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_CustomLerp, Z) == 0x00002A, "Member 'SurvCameraLocationObject_CustomLerp::Z' has a wrong offset!");

// Function Survival.SurvCameraLocationObject.GetCurrentSocketVector
// 0x0008 (0x0008 - 0x0000)
struct SurvCameraLocationObject_GetCurrentSocketVector final
{
public:
	class UCurveVector*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvCameraLocationObject_GetCurrentSocketVector) == 0x000008, "Wrong alignment on SurvCameraLocationObject_GetCurrentSocketVector");
static_assert(sizeof(SurvCameraLocationObject_GetCurrentSocketVector) == 0x000008, "Wrong size on SurvCameraLocationObject_GetCurrentSocketVector");
static_assert(offsetof(SurvCameraLocationObject_GetCurrentSocketVector, ReturnValue) == 0x000000, "Member 'SurvCameraLocationObject_GetCurrentSocketVector::ReturnValue' has a wrong offset!");

// Function Survival.SurvCameraLocationObject.SetSocketAdditionalOffset
// 0x0020 (0x0020 - 0x0000)
struct SurvCameraLocationObject_SetSocketAdditionalOffset final
{
public:
	struct FVector                                OffsetVector;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bInterpSpeed;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvCameraLocationObject_SetSocketAdditionalOffset) == 0x000008, "Wrong alignment on SurvCameraLocationObject_SetSocketAdditionalOffset");
static_assert(sizeof(SurvCameraLocationObject_SetSocketAdditionalOffset) == 0x000020, "Wrong size on SurvCameraLocationObject_SetSocketAdditionalOffset");
static_assert(offsetof(SurvCameraLocationObject_SetSocketAdditionalOffset, OffsetVector) == 0x000000, "Member 'SurvCameraLocationObject_SetSocketAdditionalOffset::OffsetVector' has a wrong offset!");
static_assert(offsetof(SurvCameraLocationObject_SetSocketAdditionalOffset, bInterpSpeed) == 0x000018, "Member 'SurvCameraLocationObject_SetSocketAdditionalOffset::bInterpSpeed' has a wrong offset!");

// Function Survival.SurvivalGameInstance.GetShadersRemaining
// 0x0008 (0x0008 - 0x0000)
struct SurvivalGameInstance_GetShadersRemaining final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_GetShadersRemaining) == 0x000008, "Wrong alignment on SurvivalGameInstance_GetShadersRemaining");
static_assert(sizeof(SurvivalGameInstance_GetShadersRemaining) == 0x000008, "Wrong size on SurvivalGameInstance_GetShadersRemaining");
static_assert(offsetof(SurvivalGameInstance_GetShadersRemaining, ReturnValue) == 0x000000, "Member 'SurvivalGameInstance_GetShadersRemaining::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameInstance.FadeScreen
// 0x0018 (0x0018 - 0x0000)
struct SurvivalGameInstance_FadeScreen final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToFade;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ToColor;                                           // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_FadeScreen) == 0x000004, "Wrong alignment on SurvivalGameInstance_FadeScreen");
static_assert(sizeof(SurvivalGameInstance_FadeScreen) == 0x000018, "Wrong size on SurvivalGameInstance_FadeScreen");
static_assert(offsetof(SurvivalGameInstance_FadeScreen, Duration) == 0x000000, "Member 'SurvivalGameInstance_FadeScreen::Duration' has a wrong offset!");
static_assert(offsetof(SurvivalGameInstance_FadeScreen, bToFade) == 0x000004, "Member 'SurvivalGameInstance_FadeScreen::bToFade' has a wrong offset!");
static_assert(offsetof(SurvivalGameInstance_FadeScreen, ToColor) == 0x000008, "Member 'SurvivalGameInstance_FadeScreen::ToColor' has a wrong offset!");

// Function Survival.SurvivalGameInstance.GetGPUAMD
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameInstance_GetGPUAMD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_GetGPUAMD) == 0x000001, "Wrong alignment on SurvivalGameInstance_GetGPUAMD");
static_assert(sizeof(SurvivalGameInstance_GetGPUAMD) == 0x000001, "Wrong size on SurvivalGameInstance_GetGPUAMD");
static_assert(offsetof(SurvivalGameInstance_GetGPUAMD, ReturnValue) == 0x000000, "Member 'SurvivalGameInstance_GetGPUAMD::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameInstance.GetGPUBrandName
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameInstance_GetGPUBrandName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_GetGPUBrandName) == 0x000008, "Wrong alignment on SurvivalGameInstance_GetGPUBrandName");
static_assert(sizeof(SurvivalGameInstance_GetGPUBrandName) == 0x000010, "Wrong size on SurvivalGameInstance_GetGPUBrandName");
static_assert(offsetof(SurvivalGameInstance_GetGPUBrandName, ReturnValue) == 0x000000, "Member 'SurvivalGameInstance_GetGPUBrandName::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameInstance.GetGPUNVidia
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameInstance_GetGPUNVidia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_GetGPUNVidia) == 0x000001, "Wrong alignment on SurvivalGameInstance_GetGPUNVidia");
static_assert(sizeof(SurvivalGameInstance_GetGPUNVidia) == 0x000001, "Wrong size on SurvivalGameInstance_GetGPUNVidia");
static_assert(offsetof(SurvivalGameInstance_GetGPUNVidia, ReturnValue) == 0x000000, "Member 'SurvivalGameInstance_GetGPUNVidia::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameInstance.SetBatchMode
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameInstance_SetBatchMode final
{
public:
	int32                                         batchMode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_SetBatchMode) == 0x000004, "Wrong alignment on SurvivalGameInstance_SetBatchMode");
static_assert(sizeof(SurvivalGameInstance_SetBatchMode) == 0x000004, "Wrong size on SurvivalGameInstance_SetBatchMode");
static_assert(offsetof(SurvivalGameInstance_SetBatchMode, batchMode) == 0x000000, "Member 'SurvivalGameInstance_SetBatchMode::batchMode' has a wrong offset!");

// Function Survival.SurvivalGameInstance.UpdateSteamSessionTicket
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameInstance_UpdateSteamSessionTicket final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameInstance_UpdateSteamSessionTicket) == 0x000008, "Wrong alignment on SurvivalGameInstance_UpdateSteamSessionTicket");
static_assert(sizeof(SurvivalGameInstance_UpdateSteamSessionTicket) == 0x000010, "Wrong size on SurvivalGameInstance_UpdateSteamSessionTicket");
static_assert(offsetof(SurvivalGameInstance_UpdateSteamSessionTicket, ReturnValue) == 0x000000, "Member 'SurvivalGameInstance_UpdateSteamSessionTicket::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameMode.GetAllPlayerController
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameMode_GetAllPlayerController final
{
public:
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameMode_GetAllPlayerController) == 0x000008, "Wrong alignment on SurvivalGameMode_GetAllPlayerController");
static_assert(sizeof(SurvivalGameMode_GetAllPlayerController) == 0x000010, "Wrong size on SurvivalGameMode_GetAllPlayerController");
static_assert(offsetof(SurvivalGameMode_GetAllPlayerController, ReturnValue) == 0x000000, "Member 'SurvivalGameMode_GetAllPlayerController::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameMode.KickPlayerCustom
// 0x0028 (0x0028 - 0x0000)
struct SurvivalGameMode_KickPlayerCustom final
{
public:
	class APlayerController*                      TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   KickReason;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivalGameMode_KickPlayerCustom) == 0x000008, "Wrong alignment on SurvivalGameMode_KickPlayerCustom");
static_assert(sizeof(SurvivalGameMode_KickPlayerCustom) == 0x000028, "Wrong size on SurvivalGameMode_KickPlayerCustom");
static_assert(offsetof(SurvivalGameMode_KickPlayerCustom, TargetPlayer) == 0x000000, "Member 'SurvivalGameMode_KickPlayerCustom::TargetPlayer' has a wrong offset!");
static_assert(offsetof(SurvivalGameMode_KickPlayerCustom, KickReason) == 0x000008, "Member 'SurvivalGameMode_KickPlayerCustom::KickReason' has a wrong offset!");
static_assert(offsetof(SurvivalGameMode_KickPlayerCustom, ReturnValue) == 0x000020, "Member 'SurvivalGameMode_KickPlayerCustom::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.ApplyFullscreenMode
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_ApplyFullscreenMode final
{
public:
	bool                                          bCheckForCommandLineOverrides;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_ApplyFullscreenMode) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_ApplyFullscreenMode");
static_assert(sizeof(SurvivalGameUserSettings_ApplyFullscreenMode) == 0x000001, "Wrong size on SurvivalGameUserSettings_ApplyFullscreenMode");
static_assert(offsetof(SurvivalGameUserSettings_ApplyFullscreenMode, bCheckForCommandLineOverrides) == 0x000000, "Member 'SurvivalGameUserSettings_ApplyFullscreenMode::bCheckForCommandLineOverrides' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetAllowGameData
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetAllowGameData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetAllowGameData) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetAllowGameData");
static_assert(sizeof(SurvivalGameUserSettings_GetAllowGameData) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetAllowGameData");
static_assert(offsetof(SurvivalGameUserSettings_GetAllowGameData, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetAllowGameData::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetCustomShadowQuality
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetCustomShadowQuality final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetCustomShadowQuality) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetCustomShadowQuality");
static_assert(sizeof(SurvivalGameUserSettings_GetCustomShadowQuality) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetCustomShadowQuality");
static_assert(offsetof(SurvivalGameUserSettings_GetCustomShadowQuality, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetCustomShadowQuality::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetDialogVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetDialogVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetDialogVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetDialogVolume");
static_assert(sizeof(SurvivalGameUserSettings_GetDialogVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetDialogVolume");
static_assert(offsetof(SurvivalGameUserSettings_GetDialogVolume, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetDialogVolume::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetDLSS
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetDLSS final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetDLSS) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetDLSS");
static_assert(sizeof(SurvivalGameUserSettings_GetDLSS) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetDLSS");
static_assert(offsetof(SurvivalGameUserSettings_GetDLSS, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetDLSS::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetEffectsVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetEffectsVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetEffectsVolume");
static_assert(sizeof(SurvivalGameUserSettings_GetEffectsVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetEffectsVolume");
static_assert(offsetof(SurvivalGameUserSettings_GetEffectsVolume, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetEffectsVolume::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetFrameGeneration
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetFrameGeneration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetFrameGeneration) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetFrameGeneration");
static_assert(sizeof(SurvivalGameUserSettings_GetFrameGeneration) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetFrameGeneration");
static_assert(offsetof(SurvivalGameUserSettings_GetFrameGeneration, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetFrameGeneration::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetFSR2
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetFSR2 final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetFSR2) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetFSR2");
static_assert(sizeof(SurvivalGameUserSettings_GetFSR2) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetFSR2");
static_assert(offsetof(SurvivalGameUserSettings_GetFSR2, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetFSR2::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetGlobalIllumination
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetGlobalIllumination final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetGlobalIllumination) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetGlobalIllumination");
static_assert(sizeof(SurvivalGameUserSettings_GetGlobalIllumination) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetGlobalIllumination");
static_assert(offsetof(SurvivalGameUserSettings_GetGlobalIllumination, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetGlobalIllumination::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetMasterVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetMasterVolume");
static_assert(sizeof(SurvivalGameUserSettings_GetMasterVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetMasterVolume");
static_assert(offsetof(SurvivalGameUserSettings_GetMasterVolume, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetMonitorIndex
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetMonitorIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetMonitorIndex) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetMonitorIndex");
static_assert(sizeof(SurvivalGameUserSettings_GetMonitorIndex) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetMonitorIndex");
static_assert(offsetof(SurvivalGameUserSettings_GetMonitorIndex, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetMonitorIndex::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetMouseInverse
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetMouseInverse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetMouseInverse) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetMouseInverse");
static_assert(sizeof(SurvivalGameUserSettings_GetMouseInverse) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetMouseInverse");
static_assert(offsetof(SurvivalGameUserSettings_GetMouseInverse, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetMouseInverse::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetMouseSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetMouseSensitivity) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetMouseSensitivity");
static_assert(sizeof(SurvivalGameUserSettings_GetMouseSensitivity) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetMouseSensitivity");
static_assert(offsetof(SurvivalGameUserSettings_GetMouseSensitivity, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetMouseSensitivity::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetMusicVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetMusicVolume");
static_assert(sizeof(SurvivalGameUserSettings_GetMusicVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetMusicVolume");
static_assert(offsetof(SurvivalGameUserSettings_GetMusicVolume, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetNIS
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetNIS final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetNIS) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetNIS");
static_assert(sizeof(SurvivalGameUserSettings_GetNIS) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetNIS");
static_assert(offsetof(SurvivalGameUserSettings_GetNIS, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetNIS::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetRayTracing
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetRayTracing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetRayTracing) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetRayTracing");
static_assert(sizeof(SurvivalGameUserSettings_GetRayTracing) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetRayTracing");
static_assert(offsetof(SurvivalGameUserSettings_GetRayTracing, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetRayTracing::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetReflection
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetReflection final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetReflection) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetReflection");
static_assert(sizeof(SurvivalGameUserSettings_GetReflection) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetReflection");
static_assert(offsetof(SurvivalGameUserSettings_GetReflection, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetReflection::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetReflexMode
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetReflexMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetReflexMode) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetReflexMode");
static_assert(sizeof(SurvivalGameUserSettings_GetReflexMode) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetReflexMode");
static_assert(offsetof(SurvivalGameUserSettings_GetReflexMode, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetReflexMode::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetTextChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetTextChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetTextChatEnabled) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetTextChatEnabled");
static_assert(sizeof(SurvivalGameUserSettings_GetTextChatEnabled) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetTextChatEnabled");
static_assert(offsetof(SurvivalGameUserSettings_GetTextChatEnabled, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetTextChatEnabled::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetTextCulture
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameUserSettings_GetTextCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetTextCulture) == 0x000008, "Wrong alignment on SurvivalGameUserSettings_GetTextCulture");
static_assert(sizeof(SurvivalGameUserSettings_GetTextCulture) == 0x000010, "Wrong size on SurvivalGameUserSettings_GetTextCulture");
static_assert(offsetof(SurvivalGameUserSettings_GetTextCulture, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetTextCulture::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetUserRenderingAPI
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetUserRenderingAPI final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetUserRenderingAPI) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetUserRenderingAPI");
static_assert(sizeof(SurvivalGameUserSettings_GetUserRenderingAPI) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetUserRenderingAPI");
static_assert(offsetof(SurvivalGameUserSettings_GetUserRenderingAPI, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetUserRenderingAPI::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetVoiceChatEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetVoiceChatEnabled) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetVoiceChatEnabled");
static_assert(sizeof(SurvivalGameUserSettings_GetVoiceChatEnabled) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetVoiceChatEnabled");
static_assert(offsetof(SurvivalGameUserSettings_GetVoiceChatEnabled, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetVoiceChatEnabled::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_GetVoiceChatVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetVoiceChatVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_GetVoiceChatVolume");
static_assert(sizeof(SurvivalGameUserSettings_GetVoiceChatVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_GetVoiceChatVolume");
static_assert(offsetof(SurvivalGameUserSettings_GetVoiceChatVolume, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetVoiceChatVolume::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetVoiceCulture
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameUserSettings_GetVoiceCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetVoiceCulture) == 0x000008, "Wrong alignment on SurvivalGameUserSettings_GetVoiceCulture");
static_assert(sizeof(SurvivalGameUserSettings_GetVoiceCulture) == 0x000010, "Wrong size on SurvivalGameUserSettings_GetVoiceCulture");
static_assert(offsetof(SurvivalGameUserSettings_GetVoiceCulture, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetVoiceCulture::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.GetVoiceLinesEnabled
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_GetVoiceLinesEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_GetVoiceLinesEnabled) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_GetVoiceLinesEnabled");
static_assert(sizeof(SurvivalGameUserSettings_GetVoiceLinesEnabled) == 0x000001, "Wrong size on SurvivalGameUserSettings_GetVoiceLinesEnabled");
static_assert(offsetof(SurvivalGameUserSettings_GetVoiceLinesEnabled, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_GetVoiceLinesEnabled::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.IsThreadedRenderer
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_IsThreadedRenderer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_IsThreadedRenderer) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_IsThreadedRenderer");
static_assert(sizeof(SurvivalGameUserSettings_IsThreadedRenderer) == 0x000001, "Wrong size on SurvivalGameUserSettings_IsThreadedRenderer");
static_assert(offsetof(SurvivalGameUserSettings_IsThreadedRenderer, ReturnValue) == 0x000000, "Member 'SurvivalGameUserSettings_IsThreadedRenderer::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetAllowGameData
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetAllowGameData final
{
public:
	bool                                          Allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetAllowGameData) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetAllowGameData");
static_assert(sizeof(SurvivalGameUserSettings_SetAllowGameData) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetAllowGameData");
static_assert(offsetof(SurvivalGameUserSettings_SetAllowGameData, Allow) == 0x000000, "Member 'SurvivalGameUserSettings_SetAllowGameData::Allow' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetCustomShadowQuality
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetCustomShadowQuality final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetCustomShadowQuality) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetCustomShadowQuality");
static_assert(sizeof(SurvivalGameUserSettings_SetCustomShadowQuality) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetCustomShadowQuality");
static_assert(offsetof(SurvivalGameUserSettings_SetCustomShadowQuality, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetCustomShadowQuality::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetDialogVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetDialogVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetDialogVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetDialogVolume");
static_assert(sizeof(SurvivalGameUserSettings_SetDialogVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetDialogVolume");
static_assert(offsetof(SurvivalGameUserSettings_SetDialogVolume, Volume) == 0x000000, "Member 'SurvivalGameUserSettings_SetDialogVolume::Volume' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetDLSS
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetDLSS final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetDLSS) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetDLSS");
static_assert(sizeof(SurvivalGameUserSettings_SetDLSS) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetDLSS");
static_assert(offsetof(SurvivalGameUserSettings_SetDLSS, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetDLSS::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetEffectsVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetEffectsVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetEffectsVolume");
static_assert(sizeof(SurvivalGameUserSettings_SetEffectsVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetEffectsVolume");
static_assert(offsetof(SurvivalGameUserSettings_SetEffectsVolume, Volume) == 0x000000, "Member 'SurvivalGameUserSettings_SetEffectsVolume::Volume' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetFrameGeneration
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetFrameGeneration final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetFrameGeneration) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetFrameGeneration");
static_assert(sizeof(SurvivalGameUserSettings_SetFrameGeneration) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetFrameGeneration");
static_assert(offsetof(SurvivalGameUserSettings_SetFrameGeneration, Enabled) == 0x000000, "Member 'SurvivalGameUserSettings_SetFrameGeneration::Enabled' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetFSR2
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetFSR2 final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetFSR2) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetFSR2");
static_assert(sizeof(SurvivalGameUserSettings_SetFSR2) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetFSR2");
static_assert(offsetof(SurvivalGameUserSettings_SetFSR2, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetFSR2::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetGlobalIllumination
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetGlobalIllumination final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetGlobalIllumination) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetGlobalIllumination");
static_assert(sizeof(SurvivalGameUserSettings_SetGlobalIllumination) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetGlobalIllumination");
static_assert(offsetof(SurvivalGameUserSettings_SetGlobalIllumination, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetGlobalIllumination::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetGraphicsAPI
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetGraphicsAPI final
{
public:
	ESurvivalRHI                                  API;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetGraphicsAPI) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetGraphicsAPI");
static_assert(sizeof(SurvivalGameUserSettings_SetGraphicsAPI) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetGraphicsAPI");
static_assert(offsetof(SurvivalGameUserSettings_SetGraphicsAPI, API) == 0x000000, "Member 'SurvivalGameUserSettings_SetGraphicsAPI::API' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetMasterVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetMasterVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetMasterVolume");
static_assert(sizeof(SurvivalGameUserSettings_SetMasterVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetMasterVolume");
static_assert(offsetof(SurvivalGameUserSettings_SetMasterVolume, Volume) == 0x000000, "Member 'SurvivalGameUserSettings_SetMasterVolume::Volume' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetMonitorIndex
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetMonitorIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetMonitorIndex) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetMonitorIndex");
static_assert(sizeof(SurvivalGameUserSettings_SetMonitorIndex) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetMonitorIndex");
static_assert(offsetof(SurvivalGameUserSettings_SetMonitorIndex, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetMonitorIndex::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetMouseInverse
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetMouseInverse final
{
public:
	bool                                          Inverse;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetMouseInverse) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetMouseInverse");
static_assert(sizeof(SurvivalGameUserSettings_SetMouseInverse) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetMouseInverse");
static_assert(offsetof(SurvivalGameUserSettings_SetMouseInverse, Inverse) == 0x000000, "Member 'SurvivalGameUserSettings_SetMouseInverse::Inverse' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetMouseSensitivity
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetMouseSensitivity final
{
public:
	float                                         Sensitivity;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetMouseSensitivity) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetMouseSensitivity");
static_assert(sizeof(SurvivalGameUserSettings_SetMouseSensitivity) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetMouseSensitivity");
static_assert(offsetof(SurvivalGameUserSettings_SetMouseSensitivity, Sensitivity) == 0x000000, "Member 'SurvivalGameUserSettings_SetMouseSensitivity::Sensitivity' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetMusicVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetMusicVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetMusicVolume");
static_assert(sizeof(SurvivalGameUserSettings_SetMusicVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetMusicVolume");
static_assert(offsetof(SurvivalGameUserSettings_SetMusicVolume, Volume) == 0x000000, "Member 'SurvivalGameUserSettings_SetMusicVolume::Volume' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetNIS
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetNIS final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetNIS) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetNIS");
static_assert(sizeof(SurvivalGameUserSettings_SetNIS) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetNIS");
static_assert(offsetof(SurvivalGameUserSettings_SetNIS, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetNIS::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetRayTracing
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetRayTracing final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetRayTracing) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetRayTracing");
static_assert(sizeof(SurvivalGameUserSettings_SetRayTracing) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetRayTracing");
static_assert(offsetof(SurvivalGameUserSettings_SetRayTracing, Enabled) == 0x000000, "Member 'SurvivalGameUserSettings_SetRayTracing::Enabled' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetReflection
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetReflection final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetReflection) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetReflection");
static_assert(sizeof(SurvivalGameUserSettings_SetReflection) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetReflection");
static_assert(offsetof(SurvivalGameUserSettings_SetReflection, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetReflection::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetReflexMode
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetReflexMode final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetReflexMode) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetReflexMode");
static_assert(sizeof(SurvivalGameUserSettings_SetReflexMode) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetReflexMode");
static_assert(offsetof(SurvivalGameUserSettings_SetReflexMode, Param_Index) == 0x000000, "Member 'SurvivalGameUserSettings_SetReflexMode::Param_Index' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetTextChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetTextChatEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetTextChatEnabled) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetTextChatEnabled");
static_assert(sizeof(SurvivalGameUserSettings_SetTextChatEnabled) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetTextChatEnabled");
static_assert(offsetof(SurvivalGameUserSettings_SetTextChatEnabled, Enabled) == 0x000000, "Member 'SurvivalGameUserSettings_SetTextChatEnabled::Enabled' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetTextCulture
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameUserSettings_SetTextCulture final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetTextCulture) == 0x000008, "Wrong alignment on SurvivalGameUserSettings_SetTextCulture");
static_assert(sizeof(SurvivalGameUserSettings_SetTextCulture) == 0x000010, "Wrong size on SurvivalGameUserSettings_SetTextCulture");
static_assert(offsetof(SurvivalGameUserSettings_SetTextCulture, Culture) == 0x000000, "Member 'SurvivalGameUserSettings_SetTextCulture::Culture' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetUseThreadedRenderer
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetUseThreadedRenderer final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetUseThreadedRenderer) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetUseThreadedRenderer");
static_assert(sizeof(SurvivalGameUserSettings_SetUseThreadedRenderer) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetUseThreadedRenderer");
static_assert(offsetof(SurvivalGameUserSettings_SetUseThreadedRenderer, bAllowed) == 0x000000, "Member 'SurvivalGameUserSettings_SetUseThreadedRenderer::bAllowed' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetVoiceChatEnabled
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetVoiceChatEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetVoiceChatEnabled) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetVoiceChatEnabled");
static_assert(sizeof(SurvivalGameUserSettings_SetVoiceChatEnabled) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetVoiceChatEnabled");
static_assert(offsetof(SurvivalGameUserSettings_SetVoiceChatEnabled, Enabled) == 0x000000, "Member 'SurvivalGameUserSettings_SetVoiceChatEnabled::Enabled' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetVoiceChatVolume
// 0x0004 (0x0004 - 0x0000)
struct SurvivalGameUserSettings_SetVoiceChatVolume final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetVoiceChatVolume) == 0x000004, "Wrong alignment on SurvivalGameUserSettings_SetVoiceChatVolume");
static_assert(sizeof(SurvivalGameUserSettings_SetVoiceChatVolume) == 0x000004, "Wrong size on SurvivalGameUserSettings_SetVoiceChatVolume");
static_assert(offsetof(SurvivalGameUserSettings_SetVoiceChatVolume, Volume) == 0x000000, "Member 'SurvivalGameUserSettings_SetVoiceChatVolume::Volume' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetVoiceCulture
// 0x0010 (0x0010 - 0x0000)
struct SurvivalGameUserSettings_SetVoiceCulture final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetVoiceCulture) == 0x000008, "Wrong alignment on SurvivalGameUserSettings_SetVoiceCulture");
static_assert(sizeof(SurvivalGameUserSettings_SetVoiceCulture) == 0x000010, "Wrong size on SurvivalGameUserSettings_SetVoiceCulture");
static_assert(offsetof(SurvivalGameUserSettings_SetVoiceCulture, Culture) == 0x000000, "Member 'SurvivalGameUserSettings_SetVoiceCulture::Culture' has a wrong offset!");

// Function Survival.SurvivalGameUserSettings.SetVoiceLinesEnabled
// 0x0001 (0x0001 - 0x0000)
struct SurvivalGameUserSettings_SetVoiceLinesEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalGameUserSettings_SetVoiceLinesEnabled) == 0x000001, "Wrong alignment on SurvivalGameUserSettings_SetVoiceLinesEnabled");
static_assert(sizeof(SurvivalGameUserSettings_SetVoiceLinesEnabled) == 0x000001, "Wrong size on SurvivalGameUserSettings_SetVoiceLinesEnabled");
static_assert(offsetof(SurvivalGameUserSettings_SetVoiceLinesEnabled, Enabled) == 0x000000, "Member 'SurvivalGameUserSettings_SetVoiceLinesEnabled::Enabled' has a wrong offset!");

// Function Survival.SurvivalPlayerController.GetEngineConfigBoolValue
// 0x0014 (0x0014 - 0x0000)
struct SurvivalPlayerController_GetEngineConfigBoolValue final
{
public:
	class FName                                   ConfigSection;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConfigKey;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivalPlayerController_GetEngineConfigBoolValue) == 0x000004, "Wrong alignment on SurvivalPlayerController_GetEngineConfigBoolValue");
static_assert(sizeof(SurvivalPlayerController_GetEngineConfigBoolValue) == 0x000014, "Wrong size on SurvivalPlayerController_GetEngineConfigBoolValue");
static_assert(offsetof(SurvivalPlayerController_GetEngineConfigBoolValue, ConfigSection) == 0x000000, "Member 'SurvivalPlayerController_GetEngineConfigBoolValue::ConfigSection' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_GetEngineConfigBoolValue, ConfigKey) == 0x000008, "Member 'SurvivalPlayerController_GetEngineConfigBoolValue::ConfigKey' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_GetEngineConfigBoolValue, ReturnValue) == 0x000010, "Member 'SurvivalPlayerController_GetEngineConfigBoolValue::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalPlayerController.GetEngineConfigFloatValue
// 0x0014 (0x0014 - 0x0000)
struct SurvivalPlayerController_GetEngineConfigFloatValue final
{
public:
	class FName                                   ConfigSection;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ConfigKey;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalPlayerController_GetEngineConfigFloatValue) == 0x000004, "Wrong alignment on SurvivalPlayerController_GetEngineConfigFloatValue");
static_assert(sizeof(SurvivalPlayerController_GetEngineConfigFloatValue) == 0x000014, "Wrong size on SurvivalPlayerController_GetEngineConfigFloatValue");
static_assert(offsetof(SurvivalPlayerController_GetEngineConfigFloatValue, ConfigSection) == 0x000000, "Member 'SurvivalPlayerController_GetEngineConfigFloatValue::ConfigSection' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_GetEngineConfigFloatValue, ConfigKey) == 0x000008, "Member 'SurvivalPlayerController_GetEngineConfigFloatValue::ConfigKey' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_GetEngineConfigFloatValue, ReturnValue) == 0x000010, "Member 'SurvivalPlayerController_GetEngineConfigFloatValue::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalPlayerController.GetFGearSendrate
// 0x0004 (0x0004 - 0x0000)
struct SurvivalPlayerController_GetFGearSendrate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalPlayerController_GetFGearSendrate) == 0x000004, "Wrong alignment on SurvivalPlayerController_GetFGearSendrate");
static_assert(sizeof(SurvivalPlayerController_GetFGearSendrate) == 0x000004, "Wrong size on SurvivalPlayerController_GetFGearSendrate");
static_assert(offsetof(SurvivalPlayerController_GetFGearSendrate, ReturnValue) == 0x000000, "Member 'SurvivalPlayerController_GetFGearSendrate::ReturnValue' has a wrong offset!");

// Function Survival.SurvivalPlayerController.ClientWasKickedCustom
// 0x0018 (0x0018 - 0x0000)
struct SurvivalPlayerController_ClientWasKickedCustom final
{
public:
	class FText                                   KickReason;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalPlayerController_ClientWasKickedCustom) == 0x000008, "Wrong alignment on SurvivalPlayerController_ClientWasKickedCustom");
static_assert(sizeof(SurvivalPlayerController_ClientWasKickedCustom) == 0x000018, "Wrong size on SurvivalPlayerController_ClientWasKickedCustom");
static_assert(offsetof(SurvivalPlayerController_ClientWasKickedCustom, KickReason) == 0x000000, "Member 'SurvivalPlayerController_ClientWasKickedCustom::KickReason' has a wrong offset!");

// Function Survival.SurvivalPlayerController.GoTo
// 0x000C (0x000C - 0x0000)
struct SurvivalPlayerController_GoTo final
{
public:
	float                                         LocationX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationZ;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalPlayerController_GoTo) == 0x000004, "Wrong alignment on SurvivalPlayerController_GoTo");
static_assert(sizeof(SurvivalPlayerController_GoTo) == 0x00000C, "Wrong size on SurvivalPlayerController_GoTo");
static_assert(offsetof(SurvivalPlayerController_GoTo, LocationX) == 0x000000, "Member 'SurvivalPlayerController_GoTo::LocationX' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_GoTo, LocationY) == 0x000004, "Member 'SurvivalPlayerController_GoTo::LocationY' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_GoTo, LocationZ) == 0x000008, "Member 'SurvivalPlayerController_GoTo::LocationZ' has a wrong offset!");

// Function Survival.SurvivalPlayerController.HandleClientWasKicked
// 0x0018 (0x0018 - 0x0000)
struct SurvivalPlayerController_HandleClientWasKicked final
{
public:
	class FText                                   KickReason;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalPlayerController_HandleClientWasKicked) == 0x000008, "Wrong alignment on SurvivalPlayerController_HandleClientWasKicked");
static_assert(sizeof(SurvivalPlayerController_HandleClientWasKicked) == 0x000018, "Wrong size on SurvivalPlayerController_HandleClientWasKicked");
static_assert(offsetof(SurvivalPlayerController_HandleClientWasKicked, KickReason) == 0x000000, "Member 'SurvivalPlayerController_HandleClientWasKicked::KickReason' has a wrong offset!");

// Function Survival.SurvivalPlayerController.Rotate
// 0x000C (0x000C - 0x0000)
struct SurvivalPlayerController_Rotate final
{
public:
	float                                         RotationX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationZ;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalPlayerController_Rotate) == 0x000004, "Wrong alignment on SurvivalPlayerController_Rotate");
static_assert(sizeof(SurvivalPlayerController_Rotate) == 0x00000C, "Wrong size on SurvivalPlayerController_Rotate");
static_assert(offsetof(SurvivalPlayerController_Rotate, RotationX) == 0x000000, "Member 'SurvivalPlayerController_Rotate::RotationX' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_Rotate, RotationY) == 0x000004, "Member 'SurvivalPlayerController_Rotate::RotationY' has a wrong offset!");
static_assert(offsetof(SurvivalPlayerController_Rotate, RotationZ) == 0x000008, "Member 'SurvivalPlayerController_Rotate::RotationZ' has a wrong offset!");

// Function Survival.SurvivalStatSystem.Report
// 0x0010 (0x0010 - 0x0000)
struct SurvivalStatSystem_Report final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalStatSystem_Report) == 0x000008, "Wrong alignment on SurvivalStatSystem_Report");
static_assert(sizeof(SurvivalStatSystem_Report) == 0x000010, "Wrong size on SurvivalStatSystem_Report");
static_assert(offsetof(SurvivalStatSystem_Report, EventId) == 0x000000, "Member 'SurvivalStatSystem_Report::EventId' has a wrong offset!");

// Function Survival.SurvivalStatSystem.Report2
// 0x0060 (0x0060 - 0x0000)
struct SurvivalStatSystem_Report2 final
{
public:
	class FString                                 EventId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Properties;                                        // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivalStatSystem_Report2) == 0x000008, "Wrong alignment on SurvivalStatSystem_Report2");
static_assert(sizeof(SurvivalStatSystem_Report2) == 0x000060, "Wrong size on SurvivalStatSystem_Report2");
static_assert(offsetof(SurvivalStatSystem_Report2, EventId) == 0x000000, "Member 'SurvivalStatSystem_Report2::EventId' has a wrong offset!");
static_assert(offsetof(SurvivalStatSystem_Report2, Properties) == 0x000010, "Member 'SurvivalStatSystem_Report2::Properties' has a wrong offset!");

// Function Survival.TDBJsonObject.ConstructJsonObject
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonObject_ConstructJsonObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonObject*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_ConstructJsonObject) == 0x000008, "Wrong alignment on TDBJsonObject_ConstructJsonObject");
static_assert(sizeof(TDBJsonObject_ConstructJsonObject) == 0x000010, "Wrong size on TDBJsonObject_ConstructJsonObject");
static_assert(offsetof(TDBJsonObject_ConstructJsonObject, WorldContextObject) == 0x000000, "Member 'TDBJsonObject_ConstructJsonObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_ConstructJsonObject, ReturnValue) == 0x000008, "Member 'TDBJsonObject_ConstructJsonObject::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.DecodeJson
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_DecodeJson final
{
public:
	class FString                                 JsonString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_DecodeJson) == 0x000008, "Wrong alignment on TDBJsonObject_DecodeJson");
static_assert(sizeof(TDBJsonObject_DecodeJson) == 0x000018, "Wrong size on TDBJsonObject_DecodeJson");
static_assert(offsetof(TDBJsonObject_DecodeJson, JsonString) == 0x000000, "Member 'TDBJsonObject_DecodeJson::JsonString' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_DecodeJson, ReturnValue) == 0x000010, "Member 'TDBJsonObject_DecodeJson::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_GetArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTDBJsonValue*>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_GetArrayField");
static_assert(sizeof(TDBJsonObject_GetArrayField) == 0x000020, "Wrong size on TDBJsonObject_GetArrayField");
static_assert(offsetof(TDBJsonObject_GetArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetArrayField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetArrayField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetBoolArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_GetBoolArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetBoolArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_GetBoolArrayField");
static_assert(sizeof(TDBJsonObject_GetBoolArrayField) == 0x000020, "Wrong size on TDBJsonObject_GetBoolArrayField");
static_assert(offsetof(TDBJsonObject_GetBoolArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetBoolArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetBoolArrayField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetBoolArrayField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetFieldNames
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonObject_GetFieldNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetFieldNames) == 0x000008, "Wrong alignment on TDBJsonObject_GetFieldNames");
static_assert(sizeof(TDBJsonObject_GetFieldNames) == 0x000010, "Wrong size on TDBJsonObject_GetFieldNames");
static_assert(offsetof(TDBJsonObject_GetFieldNames, ReturnValue) == 0x000000, "Member 'TDBJsonObject_GetFieldNames::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetNumberArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_GetNumberArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetNumberArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_GetNumberArrayField");
static_assert(sizeof(TDBJsonObject_GetNumberArrayField) == 0x000020, "Wrong size on TDBJsonObject_GetNumberArrayField");
static_assert(offsetof(TDBJsonObject_GetNumberArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetNumberArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetNumberArrayField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetNumberArrayField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetObjectArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_GetObjectArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTDBJsonObject*>                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetObjectArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_GetObjectArrayField");
static_assert(sizeof(TDBJsonObject_GetObjectArrayField) == 0x000020, "Wrong size on TDBJsonObject_GetObjectArrayField");
static_assert(offsetof(TDBJsonObject_GetObjectArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetObjectArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetObjectArrayField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetObjectArrayField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetStringArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_GetStringArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetStringArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_GetStringArrayField");
static_assert(sizeof(TDBJsonObject_GetStringArrayField) == 0x000020, "Wrong size on TDBJsonObject_GetStringArrayField");
static_assert(offsetof(TDBJsonObject_GetStringArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetStringArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetStringArrayField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetStringArrayField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.MergeJsonObject
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonObject_MergeJsonObject final
{
public:
	class UTDBJsonObject*                         InJsonObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Overwrite;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_MergeJsonObject) == 0x000008, "Wrong alignment on TDBJsonObject_MergeJsonObject");
static_assert(sizeof(TDBJsonObject_MergeJsonObject) == 0x000010, "Wrong size on TDBJsonObject_MergeJsonObject");
static_assert(offsetof(TDBJsonObject_MergeJsonObject, InJsonObject) == 0x000000, "Member 'TDBJsonObject_MergeJsonObject::InJsonObject' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_MergeJsonObject, Overwrite) == 0x000008, "Member 'TDBJsonObject_MergeJsonObject::Overwrite' has a wrong offset!");

// Function Survival.TDBJsonObject.RemoveField
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonObject_RemoveField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_RemoveField) == 0x000008, "Wrong alignment on TDBJsonObject_RemoveField");
static_assert(sizeof(TDBJsonObject_RemoveField) == 0x000010, "Wrong size on TDBJsonObject_RemoveField");
static_assert(offsetof(TDBJsonObject_RemoveField, FieldName) == 0x000000, "Member 'TDBJsonObject_RemoveField::FieldName' has a wrong offset!");

// Function Survival.TDBJsonObject.SetArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_SetArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTDBJsonValue*>                  InArray;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_SetArrayField");
static_assert(sizeof(TDBJsonObject_SetArrayField) == 0x000020, "Wrong size on TDBJsonObject_SetArrayField");
static_assert(offsetof(TDBJsonObject_SetArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetArrayField, InArray) == 0x000010, "Member 'TDBJsonObject_SetArrayField::InArray' has a wrong offset!");

// Function Survival.TDBJsonObject.SetBoolArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_SetBoolArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  BoolArray;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetBoolArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_SetBoolArrayField");
static_assert(sizeof(TDBJsonObject_SetBoolArrayField) == 0x000020, "Wrong size on TDBJsonObject_SetBoolArrayField");
static_assert(offsetof(TDBJsonObject_SetBoolArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetBoolArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetBoolArrayField, BoolArray) == 0x000010, "Member 'TDBJsonObject_SetBoolArrayField::BoolArray' has a wrong offset!");

// Function Survival.TDBJsonObject.SetBoolField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_SetBoolField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_SetBoolField) == 0x000008, "Wrong alignment on TDBJsonObject_SetBoolField");
static_assert(sizeof(TDBJsonObject_SetBoolField) == 0x000018, "Wrong size on TDBJsonObject_SetBoolField");
static_assert(offsetof(TDBJsonObject_SetBoolField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetBoolField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetBoolField, InValue) == 0x000010, "Member 'TDBJsonObject_SetBoolField::InValue' has a wrong offset!");

// Function Survival.TDBJsonObject.SetField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_SetField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonValue*                          JsonValue;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetField) == 0x000008, "Wrong alignment on TDBJsonObject_SetField");
static_assert(sizeof(TDBJsonObject_SetField) == 0x000018, "Wrong size on TDBJsonObject_SetField");
static_assert(offsetof(TDBJsonObject_SetField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetField, JsonValue) == 0x000010, "Member 'TDBJsonObject_SetField::JsonValue' has a wrong offset!");

// Function Survival.TDBJsonObject.SetFieldNull
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonObject_SetFieldNull final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetFieldNull) == 0x000008, "Wrong alignment on TDBJsonObject_SetFieldNull");
static_assert(sizeof(TDBJsonObject_SetFieldNull) == 0x000010, "Wrong size on TDBJsonObject_SetFieldNull");
static_assert(offsetof(TDBJsonObject_SetFieldNull, FieldName) == 0x000000, "Member 'TDBJsonObject_SetFieldNull::FieldName' has a wrong offset!");

// Function Survival.TDBJsonObject.SetNumberArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_SetNumberArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 NumberArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetNumberArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_SetNumberArrayField");
static_assert(sizeof(TDBJsonObject_SetNumberArrayField) == 0x000020, "Wrong size on TDBJsonObject_SetNumberArrayField");
static_assert(offsetof(TDBJsonObject_SetNumberArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetNumberArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetNumberArrayField, NumberArray) == 0x000010, "Member 'TDBJsonObject_SetNumberArrayField::NumberArray' has a wrong offset!");

// Function Survival.TDBJsonObject.SetNumberField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_SetNumberField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Number;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_SetNumberField) == 0x000008, "Wrong alignment on TDBJsonObject_SetNumberField");
static_assert(sizeof(TDBJsonObject_SetNumberField) == 0x000018, "Wrong size on TDBJsonObject_SetNumberField");
static_assert(offsetof(TDBJsonObject_SetNumberField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetNumberField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetNumberField, Number) == 0x000010, "Member 'TDBJsonObject_SetNumberField::Number' has a wrong offset!");

// Function Survival.TDBJsonObject.SetObjectArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_SetObjectArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTDBJsonObject*>                 ObjectArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetObjectArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_SetObjectArrayField");
static_assert(sizeof(TDBJsonObject_SetObjectArrayField) == 0x000020, "Wrong size on TDBJsonObject_SetObjectArrayField");
static_assert(offsetof(TDBJsonObject_SetObjectArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetObjectArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetObjectArrayField, ObjectArray) == 0x000010, "Member 'TDBJsonObject_SetObjectArrayField::ObjectArray' has a wrong offset!");

// Function Survival.TDBJsonObject.SetObjectField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_SetObjectField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonObject*                         JsonObject;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetObjectField) == 0x000008, "Wrong alignment on TDBJsonObject_SetObjectField");
static_assert(sizeof(TDBJsonObject_SetObjectField) == 0x000018, "Wrong size on TDBJsonObject_SetObjectField");
static_assert(offsetof(TDBJsonObject_SetObjectField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetObjectField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetObjectField, JsonObject) == 0x000010, "Member 'TDBJsonObject_SetObjectField::JsonObject' has a wrong offset!");

// Function Survival.TDBJsonObject.SetStringArrayField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_SetStringArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetStringArrayField) == 0x000008, "Wrong alignment on TDBJsonObject_SetStringArrayField");
static_assert(sizeof(TDBJsonObject_SetStringArrayField) == 0x000020, "Wrong size on TDBJsonObject_SetStringArrayField");
static_assert(offsetof(TDBJsonObject_SetStringArrayField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetStringArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetStringArrayField, StringArray) == 0x000010, "Member 'TDBJsonObject_SetStringArrayField::StringArray' has a wrong offset!");

// Function Survival.TDBJsonObject.SetStringField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_SetStringField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_SetStringField) == 0x000008, "Wrong alignment on TDBJsonObject_SetStringField");
static_assert(sizeof(TDBJsonObject_SetStringField) == 0x000020, "Wrong size on TDBJsonObject_SetStringField");
static_assert(offsetof(TDBJsonObject_SetStringField, FieldName) == 0x000000, "Member 'TDBJsonObject_SetStringField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_SetStringField, StringValue) == 0x000010, "Member 'TDBJsonObject_SetStringField::StringValue' has a wrong offset!");

// Function Survival.TDBJsonObject.EncodeJson
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonObject_EncodeJson final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_EncodeJson) == 0x000008, "Wrong alignment on TDBJsonObject_EncodeJson");
static_assert(sizeof(TDBJsonObject_EncodeJson) == 0x000010, "Wrong size on TDBJsonObject_EncodeJson");
static_assert(offsetof(TDBJsonObject_EncodeJson, ReturnValue) == 0x000000, "Member 'TDBJsonObject_EncodeJson::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetBoolField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_GetBoolField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_GetBoolField) == 0x000008, "Wrong alignment on TDBJsonObject_GetBoolField");
static_assert(sizeof(TDBJsonObject_GetBoolField) == 0x000018, "Wrong size on TDBJsonObject_GetBoolField");
static_assert(offsetof(TDBJsonObject_GetBoolField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetBoolField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetBoolField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetBoolField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_GetField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonValue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetField) == 0x000008, "Wrong alignment on TDBJsonObject_GetField");
static_assert(sizeof(TDBJsonObject_GetField) == 0x000018, "Wrong size on TDBJsonObject_GetField");
static_assert(offsetof(TDBJsonObject_GetField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetNumberField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_GetNumberField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_GetNumberField) == 0x000008, "Wrong alignment on TDBJsonObject_GetNumberField");
static_assert(sizeof(TDBJsonObject_GetNumberField) == 0x000018, "Wrong size on TDBJsonObject_GetNumberField");
static_assert(offsetof(TDBJsonObject_GetNumberField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetNumberField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetNumberField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetNumberField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetObjectField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_GetObjectField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonObject*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetObjectField) == 0x000008, "Wrong alignment on TDBJsonObject_GetObjectField");
static_assert(sizeof(TDBJsonObject_GetObjectField) == 0x000018, "Wrong size on TDBJsonObject_GetObjectField");
static_assert(offsetof(TDBJsonObject_GetObjectField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetObjectField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetObjectField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetObjectField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.GetStringField
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonObject_GetStringField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonObject_GetStringField) == 0x000008, "Wrong alignment on TDBJsonObject_GetStringField");
static_assert(sizeof(TDBJsonObject_GetStringField) == 0x000020, "Wrong size on TDBJsonObject_GetStringField");
static_assert(offsetof(TDBJsonObject_GetStringField, FieldName) == 0x000000, "Member 'TDBJsonObject_GetStringField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_GetStringField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_GetStringField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonObject.HasField
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonObject_HasField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDBJsonObject_HasField) == 0x000008, "Wrong alignment on TDBJsonObject_HasField");
static_assert(sizeof(TDBJsonObject_HasField) == 0x000018, "Wrong size on TDBJsonObject_HasField");
static_assert(offsetof(TDBJsonObject_HasField, FieldName) == 0x000000, "Member 'TDBJsonObject_HasField::FieldName' has a wrong offset!");
static_assert(offsetof(TDBJsonObject_HasField, ReturnValue) == 0x000010, "Member 'TDBJsonObject_HasField::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.ConstructJsonValueArray
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonValue_ConstructJsonValueArray final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTDBJsonValue*>                  InArray;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UTDBJsonValue*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_ConstructJsonValueArray) == 0x000008, "Wrong alignment on TDBJsonValue_ConstructJsonValueArray");
static_assert(sizeof(TDBJsonValue_ConstructJsonValueArray) == 0x000020, "Wrong size on TDBJsonValue_ConstructJsonValueArray");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueArray, WorldContextObject) == 0x000000, "Member 'TDBJsonValue_ConstructJsonValueArray::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueArray, InArray) == 0x000008, "Member 'TDBJsonValue_ConstructJsonValueArray::InArray' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueArray, ReturnValue) == 0x000018, "Member 'TDBJsonValue_ConstructJsonValueArray::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.ConstructJsonValueBool
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonValue_ConstructJsonValueBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTDBJsonValue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_ConstructJsonValueBool) == 0x000008, "Wrong alignment on TDBJsonValue_ConstructJsonValueBool");
static_assert(sizeof(TDBJsonValue_ConstructJsonValueBool) == 0x000018, "Wrong size on TDBJsonValue_ConstructJsonValueBool");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueBool, WorldContextObject) == 0x000000, "Member 'TDBJsonValue_ConstructJsonValueBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueBool, InValue) == 0x000008, "Member 'TDBJsonValue_ConstructJsonValueBool::InValue' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueBool, ReturnValue) == 0x000010, "Member 'TDBJsonValue_ConstructJsonValueBool::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.ConstructJsonValueNumber
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonValue_ConstructJsonValueNumber final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Number;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTDBJsonValue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_ConstructJsonValueNumber) == 0x000008, "Wrong alignment on TDBJsonValue_ConstructJsonValueNumber");
static_assert(sizeof(TDBJsonValue_ConstructJsonValueNumber) == 0x000018, "Wrong size on TDBJsonValue_ConstructJsonValueNumber");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueNumber, WorldContextObject) == 0x000000, "Member 'TDBJsonValue_ConstructJsonValueNumber::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueNumber, Number) == 0x000008, "Member 'TDBJsonValue_ConstructJsonValueNumber::Number' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueNumber, ReturnValue) == 0x000010, "Member 'TDBJsonValue_ConstructJsonValueNumber::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.ConstructJsonValueObject
// 0x0018 (0x0018 - 0x0000)
struct TDBJsonValue_ConstructJsonValueObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonObject*                         JsonObject;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonValue*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_ConstructJsonValueObject) == 0x000008, "Wrong alignment on TDBJsonValue_ConstructJsonValueObject");
static_assert(sizeof(TDBJsonValue_ConstructJsonValueObject) == 0x000018, "Wrong size on TDBJsonValue_ConstructJsonValueObject");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueObject, WorldContextObject) == 0x000000, "Member 'TDBJsonValue_ConstructJsonValueObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueObject, JsonObject) == 0x000008, "Member 'TDBJsonValue_ConstructJsonValueObject::JsonObject' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueObject, ReturnValue) == 0x000010, "Member 'TDBJsonValue_ConstructJsonValueObject::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.ConstructJsonValueString
// 0x0020 (0x0020 - 0x0000)
struct TDBJsonValue_ConstructJsonValueString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTDBJsonValue*                          ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_ConstructJsonValueString) == 0x000008, "Wrong alignment on TDBJsonValue_ConstructJsonValueString");
static_assert(sizeof(TDBJsonValue_ConstructJsonValueString) == 0x000020, "Wrong size on TDBJsonValue_ConstructJsonValueString");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueString, WorldContextObject) == 0x000000, "Member 'TDBJsonValue_ConstructJsonValueString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueString, StringValue) == 0x000008, "Member 'TDBJsonValue_ConstructJsonValueString::StringValue' has a wrong offset!");
static_assert(offsetof(TDBJsonValue_ConstructJsonValueString, ReturnValue) == 0x000018, "Member 'TDBJsonValue_ConstructJsonValueString::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.AsObject
// 0x0008 (0x0008 - 0x0000)
struct TDBJsonValue_AsObject final
{
public:
	class UTDBJsonObject*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_AsObject) == 0x000008, "Wrong alignment on TDBJsonValue_AsObject");
static_assert(sizeof(TDBJsonValue_AsObject) == 0x000008, "Wrong size on TDBJsonValue_AsObject");
static_assert(offsetof(TDBJsonValue_AsObject, ReturnValue) == 0x000000, "Member 'TDBJsonValue_AsObject::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.AsArray
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonValue_AsArray final
{
public:
	TArray<class UTDBJsonValue*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_AsArray) == 0x000008, "Wrong alignment on TDBJsonValue_AsArray");
static_assert(sizeof(TDBJsonValue_AsArray) == 0x000010, "Wrong size on TDBJsonValue_AsArray");
static_assert(offsetof(TDBJsonValue_AsArray, ReturnValue) == 0x000000, "Member 'TDBJsonValue_AsArray::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.AsBool
// 0x0001 (0x0001 - 0x0000)
struct TDBJsonValue_AsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_AsBool) == 0x000001, "Wrong alignment on TDBJsonValue_AsBool");
static_assert(sizeof(TDBJsonValue_AsBool) == 0x000001, "Wrong size on TDBJsonValue_AsBool");
static_assert(offsetof(TDBJsonValue_AsBool, ReturnValue) == 0x000000, "Member 'TDBJsonValue_AsBool::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.AsNumber
// 0x0004 (0x0004 - 0x0000)
struct TDBJsonValue_AsNumber final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_AsNumber) == 0x000004, "Wrong alignment on TDBJsonValue_AsNumber");
static_assert(sizeof(TDBJsonValue_AsNumber) == 0x000004, "Wrong size on TDBJsonValue_AsNumber");
static_assert(offsetof(TDBJsonValue_AsNumber, ReturnValue) == 0x000000, "Member 'TDBJsonValue_AsNumber::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.AsString
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonValue_AsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_AsString) == 0x000008, "Wrong alignment on TDBJsonValue_AsString");
static_assert(sizeof(TDBJsonValue_AsString) == 0x000010, "Wrong size on TDBJsonValue_AsString");
static_assert(offsetof(TDBJsonValue_AsString, ReturnValue) == 0x000000, "Member 'TDBJsonValue_AsString::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.GetType
// 0x0001 (0x0001 - 0x0000)
struct TDBJsonValue_GetType final
{
public:
	EPFJson                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_GetType) == 0x000001, "Wrong alignment on TDBJsonValue_GetType");
static_assert(sizeof(TDBJsonValue_GetType) == 0x000001, "Wrong size on TDBJsonValue_GetType");
static_assert(offsetof(TDBJsonValue_GetType, ReturnValue) == 0x000000, "Member 'TDBJsonValue_GetType::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.GetTypeString
// 0x0010 (0x0010 - 0x0000)
struct TDBJsonValue_GetTypeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_GetTypeString) == 0x000008, "Wrong alignment on TDBJsonValue_GetTypeString");
static_assert(sizeof(TDBJsonValue_GetTypeString) == 0x000010, "Wrong size on TDBJsonValue_GetTypeString");
static_assert(offsetof(TDBJsonValue_GetTypeString, ReturnValue) == 0x000000, "Member 'TDBJsonValue_GetTypeString::ReturnValue' has a wrong offset!");

// Function Survival.TDBJsonValue.IsNull
// 0x0001 (0x0001 - 0x0000)
struct TDBJsonValue_IsNull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TDBJsonValue_IsNull) == 0x000001, "Wrong alignment on TDBJsonValue_IsNull");
static_assert(sizeof(TDBJsonValue_IsNull) == 0x000001, "Wrong size on TDBJsonValue_IsNull");
static_assert(offsetof(TDBJsonValue_IsNull, ReturnValue) == 0x000000, "Member 'TDBJsonValue_IsNull::ReturnValue' has a wrong offset!");

// Function Survival.TDB_LevelInspectorSubsystem.GetCurrentLevelLoadedFull
// 0x0010 (0x0010 - 0x0000)
struct TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull) == 0x000008, "Wrong alignment on TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull");
static_assert(sizeof(TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull) == 0x000010, "Wrong size on TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull");
static_assert(offsetof(TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull, WorldContextObject) == 0x000000, "Member 'TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull, ReturnValue) == 0x000008, "Member 'TDB_LevelInspectorSubsystem_GetCurrentLevelLoadedFull::ReturnValue' has a wrong offset!");

// Function Survival.SettingsWidgetBase.CloseSubmenu
// 0x0001 (0x0001 - 0x0000)
struct SettingsWidgetBase_CloseSubmenu final
{
public:
	bool                                          Focused;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidgetBase_CloseSubmenu) == 0x000001, "Wrong alignment on SettingsWidgetBase_CloseSubmenu");
static_assert(sizeof(SettingsWidgetBase_CloseSubmenu) == 0x000001, "Wrong size on SettingsWidgetBase_CloseSubmenu");
static_assert(offsetof(SettingsWidgetBase_CloseSubmenu, Focused) == 0x000000, "Member 'SettingsWidgetBase_CloseSubmenu::Focused' has a wrong offset!");

// Function Survival.SettingsWidgetBase.GetSurvivalUserSettings
// 0x0008 (0x0008 - 0x0000)
struct SettingsWidgetBase_GetSurvivalUserSettings final
{
public:
	class USurvivalGameUserSettings*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsWidgetBase_GetSurvivalUserSettings) == 0x000008, "Wrong alignment on SettingsWidgetBase_GetSurvivalUserSettings");
static_assert(sizeof(SettingsWidgetBase_GetSurvivalUserSettings) == 0x000008, "Wrong size on SettingsWidgetBase_GetSurvivalUserSettings");
static_assert(offsetof(SettingsWidgetBase_GetSurvivalUserSettings, ReturnValue) == 0x000000, "Member 'SettingsWidgetBase_GetSurvivalUserSettings::ReturnValue' has a wrong offset!");

// Function Survival.SettingsWidgetBase.OpenSubmenu
// 0x0010 (0x0010 - 0x0000)
struct SettingsWidgetBase_OpenSubmenu final
{
public:
	class USettingsWidgetBase*                    WidgetToShow;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Focused;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsWidgetBase_OpenSubmenu) == 0x000008, "Wrong alignment on SettingsWidgetBase_OpenSubmenu");
static_assert(sizeof(SettingsWidgetBase_OpenSubmenu) == 0x000010, "Wrong size on SettingsWidgetBase_OpenSubmenu");
static_assert(offsetof(SettingsWidgetBase_OpenSubmenu, WidgetToShow) == 0x000000, "Member 'SettingsWidgetBase_OpenSubmenu::WidgetToShow' has a wrong offset!");
static_assert(offsetof(SettingsWidgetBase_OpenSubmenu, ZOrder) == 0x000008, "Member 'SettingsWidgetBase_OpenSubmenu::ZOrder' has a wrong offset!");
static_assert(offsetof(SettingsWidgetBase_OpenSubmenu, Focused) == 0x00000C, "Member 'SettingsWidgetBase_OpenSubmenu::Focused' has a wrong offset!");

// Function Survival.ControlValue.RemapActionMapping
// 0x0058 (0x0058 - 0x0000)
struct ControlValue_RemapActionMapping final
{
public:
	struct FInputActionKeyMapping                 InKeyMappingToFind;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInputActionKeyMapping                 InKeyMappingToReplace;                             // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForceRebuildKeymaps;                              // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlValue_RemapActionMapping) == 0x000008, "Wrong alignment on ControlValue_RemapActionMapping");
static_assert(sizeof(ControlValue_RemapActionMapping) == 0x000058, "Wrong size on ControlValue_RemapActionMapping");
static_assert(offsetof(ControlValue_RemapActionMapping, InKeyMappingToFind) == 0x000000, "Member 'ControlValue_RemapActionMapping::InKeyMappingToFind' has a wrong offset!");
static_assert(offsetof(ControlValue_RemapActionMapping, InKeyMappingToReplace) == 0x000028, "Member 'ControlValue_RemapActionMapping::InKeyMappingToReplace' has a wrong offset!");
static_assert(offsetof(ControlValue_RemapActionMapping, bForceRebuildKeymaps) == 0x000050, "Member 'ControlValue_RemapActionMapping::bForceRebuildKeymaps' has a wrong offset!");

// Function Survival.ControlValue.RemapAxisMapping
// 0x0058 (0x0058 - 0x0000)
struct ControlValue_RemapAxisMapping final
{
public:
	struct FInputAxisKeyMapping                   InKeyMappingToFind;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInputAxisKeyMapping                   InKeyMappingToReplace;                             // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bForceRebuildKeymaps;                              // 0x0050(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ControlValue_RemapAxisMapping) == 0x000008, "Wrong alignment on ControlValue_RemapAxisMapping");
static_assert(sizeof(ControlValue_RemapAxisMapping) == 0x000058, "Wrong size on ControlValue_RemapAxisMapping");
static_assert(offsetof(ControlValue_RemapAxisMapping, InKeyMappingToFind) == 0x000000, "Member 'ControlValue_RemapAxisMapping::InKeyMappingToFind' has a wrong offset!");
static_assert(offsetof(ControlValue_RemapAxisMapping, InKeyMappingToReplace) == 0x000028, "Member 'ControlValue_RemapAxisMapping::InKeyMappingToReplace' has a wrong offset!");
static_assert(offsetof(ControlValue_RemapAxisMapping, bForceRebuildKeymaps) == 0x000050, "Member 'ControlValue_RemapAxisMapping::bForceRebuildKeymaps' has a wrong offset!");

// Function Survival.GammaWidget.OnGammaChanged
// 0x0004 (0x0004 - 0x0000)
struct GammaWidget_OnGammaChanged final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GammaWidget_OnGammaChanged) == 0x000004, "Wrong alignment on GammaWidget_OnGammaChanged");
static_assert(sizeof(GammaWidget_OnGammaChanged) == 0x000004, "Wrong size on GammaWidget_OnGammaChanged");
static_assert(offsetof(GammaWidget_OnGammaChanged, NewValue) == 0x000000, "Member 'GammaWidget_OnGammaChanged::NewValue' has a wrong offset!");

// Function Survival.GammaWidget.OnGetGamma
// 0x0004 (0x0004 - 0x0000)
struct GammaWidget_OnGetGamma final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GammaWidget_OnGetGamma) == 0x000004, "Wrong alignment on GammaWidget_OnGetGamma");
static_assert(sizeof(GammaWidget_OnGetGamma) == 0x000004, "Wrong size on GammaWidget_OnGetGamma");
static_assert(offsetof(GammaWidget_OnGetGamma, ReturnValue) == 0x000000, "Member 'GammaWidget_OnGetGamma::ReturnValue' has a wrong offset!");

// Function Survival.UtilitiesLibrary.ChangeCollisionOnPhysicsBody
// 0x0018 (0x0018 - 0x0000)
struct UtilitiesLibrary_ChangeCollisionOnPhysicsBody final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionEnabled                             CollisionType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilitiesLibrary_ChangeCollisionOnPhysicsBody) == 0x000008, "Wrong alignment on UtilitiesLibrary_ChangeCollisionOnPhysicsBody");
static_assert(sizeof(UtilitiesLibrary_ChangeCollisionOnPhysicsBody) == 0x000018, "Wrong size on UtilitiesLibrary_ChangeCollisionOnPhysicsBody");
static_assert(offsetof(UtilitiesLibrary_ChangeCollisionOnPhysicsBody, SkeletalMesh) == 0x000000, "Member 'UtilitiesLibrary_ChangeCollisionOnPhysicsBody::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_ChangeCollisionOnPhysicsBody, BoneName) == 0x000008, "Member 'UtilitiesLibrary_ChangeCollisionOnPhysicsBody::BoneName' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_ChangeCollisionOnPhysicsBody, CollisionType) == 0x000010, "Member 'UtilitiesLibrary_ChangeCollisionOnPhysicsBody::CollisionType' has a wrong offset!");

// Function Survival.UtilitiesLibrary.ExportRenderTargetCube
// 0x0020 (0x0020 - 0x0000)
struct UtilitiesLibrary_ExportRenderTargetCube final
{
public:
	class UTextureRenderTargetCube*               RenderTargetCube;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FilePath;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtilitiesLibrary_ExportRenderTargetCube) == 0x000008, "Wrong alignment on UtilitiesLibrary_ExportRenderTargetCube");
static_assert(sizeof(UtilitiesLibrary_ExportRenderTargetCube) == 0x000020, "Wrong size on UtilitiesLibrary_ExportRenderTargetCube");
static_assert(offsetof(UtilitiesLibrary_ExportRenderTargetCube, RenderTargetCube) == 0x000000, "Member 'UtilitiesLibrary_ExportRenderTargetCube::RenderTargetCube' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_ExportRenderTargetCube, FilePath) == 0x000008, "Member 'UtilitiesLibrary_ExportRenderTargetCube::FilePath' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_ExportRenderTargetCube, ReturnValue) == 0x000018, "Member 'UtilitiesLibrary_ExportRenderTargetCube::ReturnValue' has a wrong offset!");

// Function Survival.UtilitiesLibrary.SetAllBodiesBelowLinearAndAngularDamping
// 0x0018 (0x0018 - 0x0000)
struct UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping final
{
public:
	class USkeletalMeshComponent*                 InTarget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InBoneName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InLinear;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAngular;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping) == 0x000008, "Wrong alignment on UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping");
static_assert(sizeof(UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping) == 0x000018, "Wrong size on UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping");
static_assert(offsetof(UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping, InTarget) == 0x000000, "Member 'UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping::InTarget' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping, InBoneName) == 0x000008, "Member 'UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping::InBoneName' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping, InLinear) == 0x000010, "Member 'UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping::InLinear' has a wrong offset!");
static_assert(offsetof(UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping, InAngular) == 0x000014, "Member 'UtilitiesLibrary_SetAllBodiesBelowLinearAndAngularDamping::InAngular' has a wrong offset!");

// Function Survival.VideoSettingsWidget.GetGPUAMD
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingsWidget_GetGPUAMD final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsWidget_GetGPUAMD) == 0x000001, "Wrong alignment on VideoSettingsWidget_GetGPUAMD");
static_assert(sizeof(VideoSettingsWidget_GetGPUAMD) == 0x000001, "Wrong size on VideoSettingsWidget_GetGPUAMD");
static_assert(offsetof(VideoSettingsWidget_GetGPUAMD, ReturnValue) == 0x000000, "Member 'VideoSettingsWidget_GetGPUAMD::ReturnValue' has a wrong offset!");

// Function Survival.VideoSettingsWidget.GetGPUBrandName
// 0x0010 (0x0010 - 0x0000)
struct VideoSettingsWidget_GetGPUBrandName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsWidget_GetGPUBrandName) == 0x000008, "Wrong alignment on VideoSettingsWidget_GetGPUBrandName");
static_assert(sizeof(VideoSettingsWidget_GetGPUBrandName) == 0x000010, "Wrong size on VideoSettingsWidget_GetGPUBrandName");
static_assert(offsetof(VideoSettingsWidget_GetGPUBrandName, ReturnValue) == 0x000000, "Member 'VideoSettingsWidget_GetGPUBrandName::ReturnValue' has a wrong offset!");

// Function Survival.VideoSettingsWidget.GetMonitorInfos
// 0x0010 (0x0010 - 0x0000)
struct VideoSettingsWidget_GetMonitorInfos final
{
public:
	TArray<struct FDisplayDeviceAndSupportedResolutions> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsWidget_GetMonitorInfos) == 0x000008, "Wrong alignment on VideoSettingsWidget_GetMonitorInfos");
static_assert(sizeof(VideoSettingsWidget_GetMonitorInfos) == 0x000010, "Wrong size on VideoSettingsWidget_GetMonitorInfos");
static_assert(offsetof(VideoSettingsWidget_GetMonitorInfos, ReturnValue) == 0x000000, "Member 'VideoSettingsWidget_GetMonitorInfos::ReturnValue' has a wrong offset!");

// Function Survival.VideoSettingsWidget.GetNVidia
// 0x0001 (0x0001 - 0x0000)
struct VideoSettingsWidget_GetNVidia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsWidget_GetNVidia) == 0x000001, "Wrong alignment on VideoSettingsWidget_GetNVidia");
static_assert(sizeof(VideoSettingsWidget_GetNVidia) == 0x000001, "Wrong size on VideoSettingsWidget_GetNVidia");
static_assert(offsetof(VideoSettingsWidget_GetNVidia, ReturnValue) == 0x000000, "Member 'VideoSettingsWidget_GetNVidia::ReturnValue' has a wrong offset!");

// Function Survival.VideoSettingsWidget.SetMonitorByIndex
// 0x0004 (0x0004 - 0x0000)
struct VideoSettingsWidget_SetMonitorByIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsWidget_SetMonitorByIndex) == 0x000004, "Wrong alignment on VideoSettingsWidget_SetMonitorByIndex");
static_assert(sizeof(VideoSettingsWidget_SetMonitorByIndex) == 0x000004, "Wrong size on VideoSettingsWidget_SetMonitorByIndex");
static_assert(offsetof(VideoSettingsWidget_SetMonitorByIndex, Param_Index) == 0x000000, "Member 'VideoSettingsWidget_SetMonitorByIndex::Param_Index' has a wrong offset!");

// Function Survival.VideoSettingsWidget.GetMonitors
// 0x0010 (0x0010 - 0x0000)
struct VideoSettingsWidget_GetMonitors final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VideoSettingsWidget_GetMonitors) == 0x000008, "Wrong alignment on VideoSettingsWidget_GetMonitors");
static_assert(sizeof(VideoSettingsWidget_GetMonitors) == 0x000010, "Wrong size on VideoSettingsWidget_GetMonitors");
static_assert(offsetof(VideoSettingsWidget_GetMonitors, ReturnValue) == 0x000000, "Member 'VideoSettingsWidget_GetMonitors::ReturnValue' has a wrong offset!");

// Function Survival.ZombiePawn.GetAgressive
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_GetAgressive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_GetAgressive) == 0x000001, "Wrong alignment on ZombiePawn_GetAgressive");
static_assert(sizeof(ZombiePawn_GetAgressive) == 0x000001, "Wrong size on ZombiePawn_GetAgressive");
static_assert(offsetof(ZombiePawn_GetAgressive, ReturnValue) == 0x000000, "Member 'ZombiePawn_GetAgressive::ReturnValue' has a wrong offset!");

// Function Survival.ZombiePawn.GetBackToIdle
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_GetBackToIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_GetBackToIdle) == 0x000001, "Wrong alignment on ZombiePawn_GetBackToIdle");
static_assert(sizeof(ZombiePawn_GetBackToIdle) == 0x000001, "Wrong size on ZombiePawn_GetBackToIdle");
static_assert(offsetof(ZombiePawn_GetBackToIdle, ReturnValue) == 0x000000, "Member 'ZombiePawn_GetBackToIdle::ReturnValue' has a wrong offset!");

// Function Survival.ZombiePawn.GetDamaged
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_GetDamaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_GetDamaged) == 0x000001, "Wrong alignment on ZombiePawn_GetDamaged");
static_assert(sizeof(ZombiePawn_GetDamaged) == 0x000001, "Wrong size on ZombiePawn_GetDamaged");
static_assert(offsetof(ZombiePawn_GetDamaged, ReturnValue) == 0x000000, "Member 'ZombiePawn_GetDamaged::ReturnValue' has a wrong offset!");

// Function Survival.ZombiePawn.GetZombieAnimType
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_GetZombieAnimType final
{
public:
	EZombieAnimType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_GetZombieAnimType) == 0x000001, "Wrong alignment on ZombiePawn_GetZombieAnimType");
static_assert(sizeof(ZombiePawn_GetZombieAnimType) == 0x000001, "Wrong size on ZombiePawn_GetZombieAnimType");
static_assert(offsetof(ZombiePawn_GetZombieAnimType, ReturnValue) == 0x000000, "Member 'ZombiePawn_GetZombieAnimType::ReturnValue' has a wrong offset!");

// Function Survival.ZombiePawn.GetZombieType
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_GetZombieType final
{
public:
	EZombieType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_GetZombieType) == 0x000001, "Wrong alignment on ZombiePawn_GetZombieType");
static_assert(sizeof(ZombiePawn_GetZombieType) == 0x000001, "Wrong size on ZombiePawn_GetZombieType");
static_assert(offsetof(ZombiePawn_GetZombieType, ReturnValue) == 0x000000, "Member 'ZombiePawn_GetZombieType::ReturnValue' has a wrong offset!");

// Function Survival.ZombiePawn.SetAgressive
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_SetAgressive final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_SetAgressive) == 0x000001, "Wrong alignment on ZombiePawn_SetAgressive");
static_assert(sizeof(ZombiePawn_SetAgressive) == 0x000001, "Wrong size on ZombiePawn_SetAgressive");
static_assert(offsetof(ZombiePawn_SetAgressive, NewValue) == 0x000000, "Member 'ZombiePawn_SetAgressive::NewValue' has a wrong offset!");

// Function Survival.ZombiePawn.SetBackToIdle
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_SetBackToIdle final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_SetBackToIdle) == 0x000001, "Wrong alignment on ZombiePawn_SetBackToIdle");
static_assert(sizeof(ZombiePawn_SetBackToIdle) == 0x000001, "Wrong size on ZombiePawn_SetBackToIdle");
static_assert(offsetof(ZombiePawn_SetBackToIdle, NewValue) == 0x000000, "Member 'ZombiePawn_SetBackToIdle::NewValue' has a wrong offset!");

// Function Survival.ZombiePawn.SetDamaged
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_SetDamaged final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_SetDamaged) == 0x000001, "Wrong alignment on ZombiePawn_SetDamaged");
static_assert(sizeof(ZombiePawn_SetDamaged) == 0x000001, "Wrong size on ZombiePawn_SetDamaged");
static_assert(offsetof(ZombiePawn_SetDamaged, NewValue) == 0x000000, "Member 'ZombiePawn_SetDamaged::NewValue' has a wrong offset!");

// Function Survival.ZombiePawn.SetZombieAnimType
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_SetZombieAnimType final
{
public:
	EZombieAnimType                               NewZombieAnimType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_SetZombieAnimType) == 0x000001, "Wrong alignment on ZombiePawn_SetZombieAnimType");
static_assert(sizeof(ZombiePawn_SetZombieAnimType) == 0x000001, "Wrong size on ZombiePawn_SetZombieAnimType");
static_assert(offsetof(ZombiePawn_SetZombieAnimType, NewZombieAnimType) == 0x000000, "Member 'ZombiePawn_SetZombieAnimType::NewZombieAnimType' has a wrong offset!");

// Function Survival.ZombiePawn.SetZombieType
// 0x0001 (0x0001 - 0x0000)
struct ZombiePawn_SetZombieType final
{
public:
	EZombieType                                   NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZombiePawn_SetZombieType) == 0x000001, "Wrong alignment on ZombiePawn_SetZombieType");
static_assert(sizeof(ZombiePawn_SetZombieType) == 0x000001, "Wrong size on ZombiePawn_SetZombieType");
static_assert(offsetof(ZombiePawn_SetZombieType, NewValue) == 0x000000, "Member 'ZombiePawn_SetZombieType::NewValue' has a wrong offset!");

}

