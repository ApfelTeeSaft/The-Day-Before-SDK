#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_AIInfo

#include "Basic.hpp"


namespace SDK::Params
{

// Function I_AIInfo.I_AIInfo_C.AIInteract
// 0x0010 (0x0010 - 0x0000)
struct I_AIInfo_C_AIInteract final
{
public:
	class ABP_Door_C*                             Door;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_AIInfo_C_AIInteract) == 0x000008, "Wrong alignment on I_AIInfo_C_AIInteract");
static_assert(sizeof(I_AIInfo_C_AIInteract) == 0x000010, "Wrong size on I_AIInfo_C_AIInteract");
static_assert(offsetof(I_AIInfo_C_AIInteract, Door) == 0x000000, "Member 'I_AIInfo_C_AIInteract::Door' has a wrong offset!");
static_assert(offsetof(I_AIInfo_C_AIInteract, Arrow) == 0x000008, "Member 'I_AIInfo_C_AIInteract::Arrow' has a wrong offset!");

// Function I_AIInfo.I_AIInfo_C.IsBandit?
// 0x0001 (0x0001 - 0x0000)
struct I_AIInfo_C_IsBandit_ final
{
public:
	bool                                          Param_IsBandit_;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_AIInfo_C_IsBandit_) == 0x000001, "Wrong alignment on I_AIInfo_C_IsBandit_");
static_assert(sizeof(I_AIInfo_C_IsBandit_) == 0x000001, "Wrong size on I_AIInfo_C_IsBandit_");
static_assert(offsetof(I_AIInfo_C_IsBandit_, Param_IsBandit_) == 0x000000, "Member 'I_AIInfo_C_IsBandit_::Param_IsBandit_' has a wrong offset!");

// Function I_AIInfo.I_AIInfo_C.IsDead?
// 0x0001 (0x0001 - 0x0000)
struct I_AIInfo_C_IsDead_ final
{
public:
	bool                                          Param_IsDead_;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_AIInfo_C_IsDead_) == 0x000001, "Wrong alignment on I_AIInfo_C_IsDead_");
static_assert(sizeof(I_AIInfo_C_IsDead_) == 0x000001, "Wrong size on I_AIInfo_C_IsDead_");
static_assert(offsetof(I_AIInfo_C_IsDead_, Param_IsDead_) == 0x000000, "Member 'I_AIInfo_C_IsDead_::Param_IsDead_' has a wrong offset!");

// Function I_AIInfo.I_AIInfo_C.IsZombie?
// 0x0010 (0x0010 - 0x0000)
struct I_AIInfo_C_IsZombie_ final
{
public:
	bool                                          Param_IsZombie_;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Zombie;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_AIInfo_C_IsZombie_) == 0x000008, "Wrong alignment on I_AIInfo_C_IsZombie_");
static_assert(sizeof(I_AIInfo_C_IsZombie_) == 0x000010, "Wrong size on I_AIInfo_C_IsZombie_");
static_assert(offsetof(I_AIInfo_C_IsZombie_, Param_IsZombie_) == 0x000000, "Member 'I_AIInfo_C_IsZombie_::Param_IsZombie_' has a wrong offset!");
static_assert(offsetof(I_AIInfo_C_IsZombie_, Zombie) == 0x000008, "Member 'I_AIInfo_C_IsZombie_::Zombie' has a wrong offset!");

}

