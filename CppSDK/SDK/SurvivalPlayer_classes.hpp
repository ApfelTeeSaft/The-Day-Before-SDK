#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvivalPlayer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EffectType_structs.hpp"
#include "WeaponUniqueInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PlayerSlots_structs.hpp"
#include "CraftState_structs.hpp"
#include "MovementType_structs.hpp"
#include "EFootprintStyle_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "StanceState_structs.hpp"
#include "CarTipe_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "FItemInfo_structs.hpp"
#include "CameraSettings_structs.hpp"
#include "S_SaveStructure_structs.hpp"
#include "SBP_ItemsData_structs.hpp"
#include "CardinalDirections_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "ContainerPickupsInfo_structs.hpp"
#include "CharSpeedSettings_structs.hpp"
#include "E_InteractType_structs.hpp"
#include "EquipmentStatus_structs.hpp"
#include "Survival_structs.hpp"
#include "Survival_classes.hpp"
#include "MaterialArray_structs.hpp"
#include "E_QuestBackpackState_structs.hpp"
#include "BinocularState_structs.hpp"
#include "DropItemEntry_structs.hpp"
#include "StatType_structs.hpp"
#include "Enum_PlayerState_structs.hpp"
#include "UMG_structs.hpp"
#include "E_Training_structs.hpp"
#include "E_TrainStatType_structs.hpp"
#include "BPE_AmmoClass_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "E_CarStatus_structs.hpp"
#include "WE_NewDeathScreenState_structs.hpp"
#include "EquipmentSlot_structs.hpp"
#include "E_WeakeningEffect_structs.hpp"
#include "JSItemType_structs.hpp"
#include "E_StatEndGame_structs.hpp"
#include "EFootState_structs.hpp"
#include "BPE_FireMode_structs.hpp"
#include "BPE_AmmoType_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SurvivalPlayer.SurvivalPlayer_C
// 0x2F90 (0x3740 - 0x07B0)
class ASurvivalPlayer_C : public ACharacterHeadStim
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box;                                               // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_BarPlayerComponent_C*              BPC_BarPlayerComponent;                            // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BreathSprint;                                      // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BreathSystem;                                      // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_BreathSystemReplication_C*         BPC_BreathSystemReplication;                       // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerInventoryCollector_C*            PlayerInventoryCollector;                          // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_SurvQuestInteract_C*                AC_SurvQuestInteract;                              // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_Binoculars_C*                      BPC_Binoculars;                                    // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_NegativeEffects_C*                 BPC_NegativeEffects;                               // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GpsSocket;                                         // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USurvivalATPCCameraComponent_C*         ATPCCamera;                                        // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CameraSceneSocket;                                 // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       SquadMemberWidget;                                 // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_WeaponAttachments_C*               BPC_WeaponAttachmentsSystem;                       // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PointToInteract;                                   // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere;                                            // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CompasSocket;                                      // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 beard;                                             // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   PistolWP;                                          // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_SharpSync_C*                       SharpSync;                                         // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   FP_WP;                                             // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WeaponWithOwnFOV_C*                 FPMeshNew;                                         // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SecondaryWP;                                       // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   PrimaryWP;                                         // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere1;                                           // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FPSocket;                                          // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerStatsComponent_C*            BPC_PlayerStatsComponent;                          // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_PerkSystem_C*                      BPC_PerkSystem;                                    // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipAudioComponent*                    RadioVOIP;                                         // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipAudioComponent*                    TeamVOIP;                                          // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVoipManagerComponent*                  VoipManager;                                       // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_QuestComponent_C*                   QuestComponentV4;                                  // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UQuestSystemComp_C*                     QuestSystemComp;                                   // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UADSDialoguePartecipantComponent*       ADSDialoguePartecipant;                            // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TAAManager_C*                      BPC_TAAManager;                                    // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USGInventoryWorker_C*                   SGInventoryWorker;                                 // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    _breath_stealth_aim_idle;                          // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    _breath_idle;                                      // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    FlashlightArm;                                     // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_AlarmSystem_C*                     BPC_AlarmSystem;                                   // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   NeckPercept;                                       // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFootprintComponent_C*                  FootprintComponent;                                // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULocalPhycisContraint_C*                LocalPhycisContraint;                              // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SecondarySM;                                       // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PrimarySM;                                         // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SecondaryPhysicsSM;                                // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PrimaryPhysicsSM;                                  // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            UpperBack1PC;                                      // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicsConstraintComponent*            UpperBack2PC;                                      // 0x0948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UpperBack2Root;                                    // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   UpperBack1Root;                                    // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WeaponSlots;                                       // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Pistol;                                            // 0x0968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CampClient_C*                       BP_CampClient;                                     // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentPants;                               // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentArmor;                               // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentOuterwear;                           // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentHelmet;                              // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentHair;                                // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentHead;                                // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BackpackSlot;                                      // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpawnManagerChild_C*                   SpawnManagerChild;                                 // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Flashlight;                                        // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FlashlightHolder;                                  // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   PerceptActor;                                      // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair2;                                             // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair1;                                             // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 OuterwearSlot;                                     // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PantsSlot;                                         // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HelmetSlot;                                        // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ArmorSlot;                                         // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_Equipment_C*                       BPC_Equipment;                                     // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         InventoryOpenTimeline_Alpha_0D552CD3483F465436E2D395614F6698; // 0x0A18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InventoryOpenTimeline__Direction_0D552CD3483F465436E2D395614F6698; // 0x0A1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1D[0x3];                                      // 0x0A1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InventoryOpenTimeline;                             // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomGpsOffset_NewTrack_0_F16046D9475E3F9E4D62E0B91BFB8F76; // 0x0A28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ZoomGpsOffset__Direction_F16046D9475E3F9E4D62E0B91BFB8F76; // 0x0A2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2D[0x3];                                      // 0x0A2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ZoomGpsOffset;                                     // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomGpsTL_NewTrack_0_76930A324240D4BB48A1EC939B450BFD; // 0x0A38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ZoomGpsTL__Direction_76930A324240D4BB48A1EC939B450BFD; // 0x0A3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3D[0x3];                                      // 0x0A3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ZoomGpsTL;                                         // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrouchingWeaponOffsetTimeline_TPP_8596FEEC4522E8EF541DEBB9F5364653; // 0x0A48(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrouchingWeaponOffsetTimeline_FPP_8596FEEC4522E8EF541DEBB9F5364653; // 0x0A60(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CrouchingWeaponOffsetTimeline__Direction_8596FEEC4522E8EF541DEBB9F5364653; // 0x0A78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A79[0x7];                                      // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CrouchingWeaponOffsetTimeline;                     // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_MinusStep_AB5EDB5449E8A99969AB0D98804B65D2; // 0x0A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_5_PlusStep_AB5EDB5449E8A99969AB0D98804B65D2; // 0x0A8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_5__Direction_AB5EDB5449E8A99969AB0D98804B65D2; // 0x0A90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A91[0x7];                                      // 0x0A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_5;                                        // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_MinusStep_AF9523B64D162AD9062C1088AD0A0F37; // 0x0AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_4_PlusStep_AF9523B64D162AD9062C1088AD0A0F37; // 0x0AA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_4__Direction_AF9523B64D162AD9062C1088AD0A0F37; // 0x0AA8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA9[0x7];                                      // 0x0AA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_4;                                        // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_MinusStep_FF79EBD5449BBDFB00C2E09DBB8C4A99; // 0x0AB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_3_PlusStep_FF79EBD5449BBDFB00C2E09DBB8C4A99; // 0x0ABC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_3__Direction_FF79EBD5449BBDFB00C2E09DBB8C4A99; // 0x0AC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC1[0x7];                                      // 0x0AC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_3;                                        // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_MinusStep_ADE4E7A14E7F37E8EB76518D4ACB3E27; // 0x0AD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_PlusStep_ADE4E7A14E7F37E8EB76518D4ACB3E27; // 0x0AD4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_ADE4E7A14E7F37E8EB76518D4ACB3E27; // 0x0AD8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD9[0x7];                                      // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         StepZoom_MinusStep_22D1EB3A47026D398A712F97C3B4CD1C; // 0x0AE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StepZoom_PlusStep_22D1EB3A47026D398A712F97C3B4CD1C; // 0x0AEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StepZoom__Direction_22D1EB3A47026D398A712F97C3B4CD1C; // 0x0AF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StepZoom;                                          // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FPPAimingTimeline_PosOffset_598E03BA48E7AA7161D8DF82FCE7AA94; // 0x0B00(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FPPAimingTimeline__Direction_598E03BA48E7AA7161D8DF82FCE7AA94; // 0x0B18(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FPPAimingTimeline;                                 // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineRoundProgressBar_Value_104D1EB246CFE05F6BC415A3852AB95F; // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimelineRoundProgressBar__Direction_104D1EB246CFE05F6BC415A3852AB95F; // 0x0B2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2D[0x3];                                      // 0x0B2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimelineRoundProgressBar;                          // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_Alpha_605DDD0B45EAF290B8305B8955E406E5; // 0x0B38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_605DDD0B45EAF290B8305B8955E406E5; // 0x0B3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B3D[0x3];                                      // 0x0B3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         StandingPitchOffsetIfAim_Alpha_AAA5D8FD41D97A76DB7660BF124ADECE; // 0x0B48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StandingPitchOffsetIfAim__Direction_AAA5D8FD41D97A76DB7660BF124ADECE; // 0x0B4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4D[0x3];                                      // 0x0B4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StandingPitchOffsetIfAim;                          // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ReverseCtiticalDamage_Alpha_B1C0DBCF4A2A6CB7DED66BA0F8E8B840; // 0x0B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ReverseCtiticalDamage__Direction_B1C0DBCF4A2A6CB7DED66BA0F8E8B840; // 0x0B5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5D[0x3];                                      // 0x0B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ReverseCtiticalDamage;                             // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ApplyCriticalHealthEffect_Alpha_248CC6F74F49976102E37D8E3465ECFE; // 0x0B68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ApplyCriticalHealthEffect__Direction_248CC6F74F49976102E37D8E3465ECFE; // 0x0B6C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B6D[0x3];                                      // 0x0B6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ApplyCriticalHealthEffect;                         // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Food_Water_Timeline_Lerp_BDE0461C49A0C1ABE61BF092C7BE3949; // 0x0B78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Food_Water_Timeline__Direction_BDE0461C49A0C1ABE61BF092C7BE3949; // 0x0B7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B7D[0x3];                                      // 0x0B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Food_Water_Timeline;                               // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Alpha_FD98DB784BA58F75186AD4A5AE18FD83; // 0x0B88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_FD98DB784BA58F75186AD4A5AE18FD83; // 0x0B8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8D[0x3];                                      // 0x0B8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CrouchPitchOffsetIfAim_Alpha_309DEB5540B9A8CB2AF1198AFAB6F9A4; // 0x0B98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CrouchPitchOffsetIfAim__Direction_309DEB5540B9A8CB2AF1198AFAB6F9A4; // 0x0B9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9D[0x3];                                      // 0x0B9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CrouchPitchOffsetIfAim;                            // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponLerpToCamera_Alpha_9FB5FA2E4DAC3AD991EB8BB4E2FCFBDC; // 0x0BA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WeaponLerpToCamera__Direction_9FB5FA2E4DAC3AD991EB8BB4E2FCFBDC; // 0x0BAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BAD[0x3];                                      // 0x0BAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WeaponLerpToCamera;                                // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         DrunkLerpTimeline_Lerp_E2ABB22B478363CAD9F965A492C4228C; // 0x0BB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DrunkLerpTimeline__Direction_E2ABB22B478363CAD9F965A492C4228C; // 0x0BBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BBD[0x3];                                      // 0x0BBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DrunkLerpTimeline;                                 // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SubSpecular_Specular_492A2C9041B4BE2B1F9600997169C5D3; // 0x0BC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SubSpecular__Direction_492A2C9041B4BE2B1F9600997169C5D3; // 0x0BCC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCD[0x3];                                      // 0x0BCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SubSpecular;                                       // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         AddSpecular_Specular_C281FEFD490A8C0C078B3B9F5199D966; // 0x0BD8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AddSpecular__Direction_C281FEFD490A8C0C078B3B9F5199D966; // 0x0BDC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BDD[0x3];                                      // 0x0BDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AddSpecular;                                       // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_5F3164A24415440657770EA588273E3D; // 0x0BE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_5F3164A24415440657770EA588273E3D; // 0x0BEC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BED[0x3];                                      // 0x0BED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         HealPPEffectTimeline_Value_348BF1474C2A25BCE6CD1F9848BEFE41; // 0x0BF8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HealPPEffectTimeline__Direction_348BF1474C2A25BCE6CD1F9848BEFE41; // 0x0BFC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BFD[0x3];                                      // 0x0BFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HealPPEffectTimeline;                              // 0x0C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         KillPPEffectTimeline_Value_337A9F5C4A0B548F36628AA137A19FA1; // 0x0C08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            KillPPEffectTimeline__Direction_337A9F5C4A0B548F36628AA137A19FA1; // 0x0C0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0D[0x3];                                      // 0x0C0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     KillPPEffectTimeline;                              // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         DamageCameraEffects_Timer_2ACA4AC949FC90C95D646C9371AFBB35; // 0x0C18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DamageCameraEffects__Direction_2ACA4AC949FC90C95D646C9371AFBB35; // 0x0C1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1D[0x3];                                      // 0x0C1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DamageCameraEffects;                               // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SprintAccelTimeline_NewTrack_0_7DAFCF24433D791EF122378A18118860; // 0x0C28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SprintAccelTimeline__Direction_7DAFCF24433D791EF122378A18118860; // 0x0C2C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2D[0x3];                                      // 0x0C2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SprintAccelTimeline;                               // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLerpSpring_CameraAlpha_AC22FE9D45845585B98DF79542149C69; // 0x0C38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CameraLerpSpring__Direction_AC22FE9D45845585B98DF79542149C69; // 0x0C3C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3D[0x3];                                      // 0x0C3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CameraLerpSpring;                                  // 0x0C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          Animator;                                          // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAiming;                                          // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGrounded;                                        // 0x0C51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C52[0x6];                                      // 0x0C52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RotationInput;                                     // 0x0C58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0C68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	MovementType::EMovementType                   PreviousMoveType;                                  // 0x0C80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	MovementType::EMovementType                   MovementType;                                      // 0x0C81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C82[0x6];                                      // 0x0C82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WalkFSpeed;                                        // 0x0C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkFRLSpeed;                                      // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkBRLSpeed;                                      // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkBSpeed;                                        // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JogFSpeed;                                         // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JogBSpeed;                                         // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JogFRLSpeed;                                       // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JogBRLSpeed;                                       // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrouchSpeed;                                       // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunSpeed;                                          // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceState                                  StanceType;                                        // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD9[0x7];                                      // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeDilation;                                      // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JogAccel;                                          // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JogDecel;                                          // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkAccel;                                         // 0x0CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WalkDecel;                                         // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunAccel;                                          // 0x0D08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RunDecel;                                          // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D19[0x7];                                      // 0x0D19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultSpringLength;                               // 0x0D20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AimSpringLength;                                   // 0x0D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AimCameraLerpCurve;                                // 0x0D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SprintCameraLerpCurve;                             // 0x0D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        CurrentCameraSettings;                             // 0x0D40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        SprintCameraSettings;                              // 0x0D68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        AimCameraSettings;                                 // 0x0D90(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        DefaultCameraSettings;                             // 0x0DB8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CurrentCurve;                                      // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityDiff;                                      // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSBP_ItemsData>                 Inventory;                                         // 0x0DF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InCar;                                             // 0x0E00(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	ECardinalDirections                           CardinalDirection;                                 // 0x0E01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E02[0x6];                                      // 0x0E02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RotationOffset;                                    // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           RotationLerpCurve;                                 // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        CrouchCameraSettings;                              // 0x0E18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        AimCrouchCameraSettings;                           // 0x0E40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCameraSettings                        AimCrouchCameraSettings_0;                         // 0x0E68(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCharSpeedSettings                     CharSpeedSettings;                                 // 0x0E90(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintPressed;                                     // 0x0F48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F49[0x7];                                      // 0x0F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             AmmoChangedEvent;                                  // 0x0F50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             AimStateEvent;                                     // 0x0F60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ShootEvent;                                        // 0x0F70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ShootHitEvent;                                     // 0x0F80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ReloadEvent;                                       // 0x0F90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             InCarEvent;                                        // 0x0FA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          AimPressed;                                        // 0x0FB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShooting;                                        // 0x0FB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloading;                                       // 0x0FB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB3[0x5];                                      // 0x0FB3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NormalDirection;                                   // 0x0FB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSprint;                                         // 0x0FD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD1[0x7];                                      // 0x0FD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SyncedRotation;                                    // 0x0FD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InventoryOpened;                                   // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPassenger;                                       // 0x0FF1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF2[0x6];                                      // 0x0FF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIW_PlayerMain_C*                      PlayerGUI;                                         // 0x0FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PressInteractTimerHandle;                          // 0x1000(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanInteract;                                       // 0x1008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1009[0x7];                                     // 0x1009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LateTime;                                          // 0x1010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractType                                InteractType;                                      // 0x1018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1019[0x7];                                     // 0x1019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             LateInteractStart;                                 // 0x1020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             LateInteractFinish;                                // 0x1030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             LateInteractCancel;                                // 0x1040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        ViewPitchMin;                                      // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ViewPitchMax;                                      // 0x1058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PelvisBone;                                        // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LootPointOpened;                                   // 0x1068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrepareAim;                                        // 0x1069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106A[0x6];                                     // 0x106A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PressDurabilityButtonTimerHandle;                  // 0x1070(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DurabilityButtonStart;                             // 0x1078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DurabilityButtonFinish;                            // 0x1088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             DurabilityButtonCancel;                            // 0x1098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USoundCue*                              StepSounds;                                        // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Canister_C*                         AttachedCanister;                                  // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PressFuelButtonTimerHandle;                        // 0x10B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             FuelButtonStart;                                   // 0x10C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             FuelButtonFinish;                                  // 0x10D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             FuelButtonCancel;                                  // 0x10E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BattleMode;                                        // 0x10F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10F1[0x7];                                     // 0x10F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   InventoryRef;                                      // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        BackpackContainer;                                 // 0x1100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        SkillContainer;                                    // 0x1108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ArmorContainer;                                    // 0x1110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        OutfitContainer;                                   // 0x1118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        PantsContainer;                                    // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AStatM_MainPickupClass_C*               InteractingItem;                                   // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FEquipmentStatus                       EquipmentStatus;                                   // 0x1130(0x000B)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSlots                                  CurrentActiveSlot;                                 // 0x113B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_113C[0x4];                                     // 0x113C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            JSISlotPrimaryWeapon;                              // 0x1140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            MeleeWeaponSlot;                                   // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotSecondaryWeapon;                            // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotPistolWeapon;                               // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FContainerPickupsInfo>          ContainersData;                                    // 0x1160(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<struct FContainerPickupsInfo>          ContainerItems;                                    // 0x1170(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UJSIContainer_C*>                DynamicContainers;                                 // 0x1180(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class AMPMainContainerBox_C*                  CurrentFocusedContainer;                           // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        MPContainerWidget;                                 // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AA_Item_C*                              CurrentFocusedItem;                                // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaitToUIDHandle;                                   // 0x11A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDriver;                                          // 0x11B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B1[0x7];                                     // 0x11B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CameraCurrentFOV;                                  // 0x11B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveRightAxis;                                     // 0x11C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveForwardAxis;                                   // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentCameraLagMaxDistance;                       // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AHouseBox_C*>                    HouseBoxes;                                        // 0x11D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ALevelStreamer_C*                       LevelStreamer;                                     // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TakingDamage;                                      // 0x11F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11F1[0x7];                                     // 0x11F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastHitLocation;                                   // 0x11F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LastPlayingPainMontage;                            // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EntrancePoint;                                     // 0x1218(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InBunker;                                          // 0x1230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1231[0x7];                                     // 0x1231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BunkerEntranceHandle;                              // 0x1238(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotHelmet;                                     // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotArmor;                                      // 0x1248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UObject*                                BigMapWidget;                                      // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Vehicle;                                           // 0x1258(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeleeSwingBegin;                                   // 0x1260(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MeleeSwingEnd;                                     // 0x1278(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IQuestEventListener_C> QuestEventListener;                                // 0x1290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RefillOil;                                         // 0x12A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowRefillOil;                                    // 0x12A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A2[0x6];                                     // 0x12A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        GasolineSocket;                                    // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CanSkipDamageAnim;                                 // 0x12B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12B1[0x7];                                     // 0x12B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISurvivalPlayerListener_C> PlayerListener;                                    // 0x12B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      Qostuil;                                           // 0x12C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FContainerPickupsInfo>          RequestsForUID;                                    // 0x12D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsUsingItem;                                       // 0x12E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E1[0x7];                                     // 0x12E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UEffectMain_C*>                  Effects;                                           // 0x12E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UJSI_Slot_C*>                    RequestsForUID_Slots;                              // 0x12F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FCameraSettings                        InHouseCameraSettings;                             // 0x1308(0x0028)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TScriptInterface<class ISurvivalPlayerListener_C>> PlayerListeners;                                   // 0x1330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraSettings                        InCarCameraSettings;                               // 0x1340(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalPlayer;                                       // 0x1368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1369[0x7];                                     // 0x1369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  _;                                                 // 0x1370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InFirewatch;                                       // 0x1380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1381[0x7];                                     // 0x1381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        PocketContainer;                                   // 0x1388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurrentCameraShake;                                // 0x1390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraShakeBase*                       LastCameraShake;                                   // 0x1398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class USkeletalMeshComponent*, struct FMaterialArray> EquipmentMaterials;                                // 0x13A0(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	class FName                                   ArmorName;                                         // 0x13F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FName                                   OuterwearName;                                     // 0x13F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FName                                   BackpackName;                                      // 0x1400(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FName                                   HelmetName;                                        // 0x1408(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class ABP_FogController_C*                    FogController;                                     // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerIndex;                                       // 0x1418(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsDamageable;                                      // 0x141C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141D[0x3];                                     // 0x141D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraSettings                        NightSceneCameraSettings;                          // 0x1420(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InCutscene;                                        // 0x1448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1449[0x3];                                     // 0x1449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToSlotIndex;                                       // 0x144C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             DeathEvent;                                        // 0x1450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FName>                           JacketsToWearForTrailer;                           // 0x1460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ToWearIncrement;                                   // 0x1470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           HelmetsToWearForTrailer;                           // 0x1480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PantsToWearForTrailer;                             // 0x1490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           StartItems;                                        // 0x14A0(0x0010)(Edit, BlueprintVisible, Config, DisableEditOnInstance)
	double                                        MouseSense;                                        // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DropItemsWhenDie;                                  // 0x14B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEnabledInventorySync;                            // 0x14B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BA[0x6];                                     // 0x14BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpeedScale;                                        // 0x14C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CountFrags;                                        // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountDeaths;                                       // 0x14D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitCounter;                                        // 0x14D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClimbPrepare;                                      // 0x14D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ragdoll;                                           // 0x14D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14DA[0x2];                                     // 0x14DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   PantsName;                                         // 0x14DC(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponName;                                        // 0x14E4(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          InventoryInited;                                   // 0x14EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14ED[0x3];                                     // 0x14ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OnRessurectItems;                                  // 0x14F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AActor*                                 HighlightedActor;                                  // 0x1500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UPDA_ChanceModifier_C*                  LootChanceModAsset;                                // 0x1508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<ECollisionChannel, ECollisionResponse>   DefaultCollisionResponse;                          // 0x1510(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AA_Item_C*>                      ItemsOnGround;                                     // 0x1560(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	FMulticastInlineDelegateProperty_             HouseEnterEvent;                                   // 0x1570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             HouseLeaveEvent;                                   // 0x1580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         OnGroundSlotIndex;                                 // 0x1590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1594[0x4];                                     // 0x1594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContainerPickupsInfo                  ItemInfo;                                          // 0x1598(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	class AZombieTriggerSpawner_C*                TriggerSpawner;                                    // 0x1600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EFootprintStyle                               CurrentFootwear;                                   // 0x1608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1609[0x3];                                     // 0x1609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SitIndex;                                          // 0x160C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UrovenShuma;                                       // 0x1610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UrovenShumaTimer;                                  // 0x1618(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LootingHeight;                                     // 0x1620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        OneContainerToRule;                                // 0x1628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndexTemp;                                      // 0x1630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InClimb;                                           // 0x1634(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInteracting;                                     // 0x1635(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1636[0x2];                                     // 0x1636(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContainerPickupsInfo>          ItemsToDelete;                                     // 0x1638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	ECraftState                                   CraftState;                                        // 0x1648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InWater;                                           // 0x1649(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164A[0x6];                                     // 0x164A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FallingDamage;                                     // 0x1650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimOnHold;                                         // 0x1658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1659[0x7];                                     // 0x1659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ShopWidget;                                        // 0x1660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CashMoney;                                         // 0x1668(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_166C[0x4];                                     // 0x166C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsToTrade;                                      // 0x1670(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          UseRadio;                                          // 0x1680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowVoice;                                        // 0x1681(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1682[0x6];                                     // 0x1682(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            JSISlotBackpack;                                   // 0x1688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotOutfit;                                     // 0x1690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotPants;                                      // 0x1698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            JSISlotPocket;                                     // 0x16A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Sneaky;                                            // 0x16A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanHoldWeapon;                                     // 0x16A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16AA[0x6];                                     // 0x16AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALootPoint_C*                           LootPoint;                                         // 0x16B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NearlyLanded;                                      // 0x16B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16B9[0x7];                                     // 0x16B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InteractDistance;                                  // 0x16C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JumpAllowed;                                       // 0x16C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C9[0x7];                                     // 0x16C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWalkableArea_C*                        NewVar_0;                                          // 0x16D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CrouchAllowed;                                     // 0x16D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerHided;                                       // 0x16D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_QuestBackpackState                          QuestBkPkState;                                    // 0x16DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBinocularState                               BinocularState;                                    // 0x16DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16DC[0x4];                                     // 0x16DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CustomInputBlockers;                               // 0x16E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HighlightActors;                                   // 0x16F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16F1[0x7];                                     // 0x16F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvPC_C*                              SurvPC;                                            // 0x16F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class AHouseBox_C*                            BunkerHouseBox;                                    // 0x1700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_Mark_C*>                      HiddenQuestMarks;                                  // 0x1708(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          SurvPlayerBeginPlayFinished;                       // 0x1718(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1719[0x7];                                     // 0x1719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Mark_C*                              TerminalMark;                                      // 0x1720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Mark_C*                              BunkerEntryMark;                                   // 0x1728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        BunkerMarksLocations;                              // 0x1730(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UW_Mark_C*>                      BunkerMarks;                                       // 0x1740(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTimerHandle                           BunkerCheckTimer;                                  // 0x1750(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MarkInBunker;                                      // 0x1758(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1759[0x7];                                     // 0x1759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECollisionChannel, ECollisionResponse>   DefaultCollisionResponse_Capsule;                  // 0x1760(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFMODEventInstance                     Reverb;                                            // 0x17B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsPaused;                                          // 0x17B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClientLeftGame_;                                   // 0x17B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17BA[0x6];                                     // 0x17BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDropItemEntry>                 ClientLeftLoot;                                    // 0x17C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        TimeForAutoDestroy;                                // 0x17D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DummyCharacterDestructionTimer;                    // 0x17D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UFMODEvent>              BlizzardWarningSound;                              // 0x17E0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FVector                                InputRightVector;                                  // 0x1810(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputForwardVector;                                // 0x1828(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Seconds;                                     // 0x1840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MicrophoneLevel;                                   // 0x1848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecievedAudioLevel;                                // 0x1850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VoiceVolumeMultiplier;                             // 0x1858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crawling;                                          // 0x1860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1861[0x7];                                     // 0x1861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APS_TDB_C*                              PS_TDB;                                            // 0x1868(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          InitialInventoryInited;                            // 0x1870(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1871[0x7];                                     // 0x1871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EItemType, double>                       ItemTypePlayRate;                                  // 0x1878(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FPoseSnapshot                          Snapshot;                                          // 0x18C8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                BunkerPlayerStart;                                 // 0x1900(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LootTimeMultiplier;                                // 0x1918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSprint;                                          // 0x1920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        SprintSpeedMultiplier;                             // 0x1930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SwimSpeedMultiplier;                               // 0x1938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CrouchSpeedMultiplier;                             // 0x1940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_V2_C*                   Inviter;                                           // 0x1948(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FWeightedBlendable                     AimPP;                                             // 0x1950(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsReadyToTrade;                                    // 0x1960(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1961[0x7];                                     // 0x1961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFItemInfo>                     TradeItems;                                        // 0x1968(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	class ASurvivalPlayer_C*                      Trader;                                            // 0x1978(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           DefaultLegs;                                       // 0x1980(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          EnoughSpaceForTrade;                               // 0x19B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckedForSpace;                                   // 0x19B1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnoughSpaceLocally;                                // 0x19B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19B3[0x5];                                     // 0x19B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           DefaultBody;                                       // 0x19B8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          BlockChangingCamera;                               // 0x19E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         DLSSMode;                                          // 0x19E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19EA[0x6];                                     // 0x19EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DLSSModeTxt;                                       // 0x19F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DLSSNumber;                                        // 0x1A08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A0C[0x4];                                     // 0x1A0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               AimPPMAterial;                                     // 0x1A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A18[0x8];                                     // 0x1A18(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   InitialPostProcessSettings;                        // 0x1A20(0x06E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             DLSSModeChanged;                                   // 0x2100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialInstanceDynamic*               Drunk_PP_Material;                                 // 0x2110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TempVar_Blur;                                      // 0x2118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempVar_Saturation;                                // 0x2120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SevereIntoxication;                                // 0x2128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2129[0x7];                                     // 0x2129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempVarDrunk_Enabled;                              // 0x2130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadInventoryFailed;                               // 0x2138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2139[0x7];                                     // 0x2139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BunkerPlayerStartRot;                              // 0x2140(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               CollimatorPP;                                      // 0x2158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ArmorTier;                                         // 0x2160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HelmetTier;                                        // 0x2164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdateKDCounter;                                   // 0x2168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCurveFloat*                            SensCurve;                                         // 0x2178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FovSenseMultiplier;                                // 0x2180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockAim;                                          // 0x2188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2189[0x7];                                     // 0x2189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ChangeDirectionAngle;                              // 0x2190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDirectionChanged;                                // 0x2198(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2199[0x3];                                     // 0x2199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewDirection;                                      // 0x219C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerSlots                                  PreviousActiveSlot;                                // 0x21A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A1[0x7];                                     // 0x21A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MoveInputLastSended;                               // 0x21A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        From__ContainerToContainer__;                      // 0x21B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        To__ContainerToContainer___;                       // 0x21C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            From_Slot_Ref__ContainerToContainer__;             // 0x21C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            To_Slot_Ref__ContainerToContainer__;               // 0x21D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container__OnSlotDoubleClick__;                    // 0x21D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Slot_Ref__OnSlotDoubleClick__;                     // 0x21E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Slot_Receiver__ItemsCombined__;                    // 0x21E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Slot_Dropped__ItemsCombined__;                     // 0x21F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container__MouseClickInPlayerInventory__;          // 0x21F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            Slot_Ref__MouseClickInPlayerInventory__;           // 0x2200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FContainerPickupsInfo                  Pickups_Info__MouseClickInPlayerInventory__;       // 0x2208(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<struct FContainerPickupsInfo>          Added_Data__MouseClickInPlayerInventory__;         // 0x2270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FContainerPickupsInfo>          Added_Items__MouseClickInPlayerInventory__;        // 0x2280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Slot_Index__MouseClickInPlayerInventory__;         // 0x2290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2294[0x4];                                     // 0x2294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BrokenArmorCoef;                                   // 0x2298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ASkylightModifier_C*>            SkyLightModifiers;                                 // 0x22A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class AWeaponPlaceholder_C*                   WeaponPlaceholderPrimary;                          // 0x22B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AWeaponPlaceholder_C*                   WeaponPlaceholderSecondary;                        // 0x22B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKnockedDown;                                     // 0x22C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKilled;                                          // 0x22C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C2[0x2];                                     // 0x22C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KnockdownCounter;                                  // 0x22C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             Sound_Event_Radial_Damage;                         // 0x22C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     ContusionFmodSnapshot;                             // 0x22D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TimerGranadeActive;                                // 0x22D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimGrenade;                                        // 0x22D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22DA[0x6];                                     // 0x22DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DeadBody;                                          // 0x22E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeSelected;                                   // 0x22E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22E9[0x7];                                     // 0x22E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFItemInfo>                     DeadBodyItems;                                     // 0x22F0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference)
	struct FFMODEventInstance                     F_Contusion_Fmod;                                  // 0x2300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFireDamage;                                      // 0x2308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRadialDamage;                                    // 0x2309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_230A[0x6];                                     // 0x230A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponPlaceholder_C*                   InitedWeaponPlaceholder;                           // 0x2310(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 GrenadeWeaponNameEquip;                            // 0x2318(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AFake_Grenade_C*                        SpawningGrenade;                                   // 0x2328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDamageMolotov;                                   // 0x2330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThrowGrenade;                                      // 0x2331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2332[0x6];                                     // 0x2332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             Sound_Event_Fire_Damage;                           // 0x2338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     Contusion_F;                                       // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FWeaponUniqueInfo                      CurrentWeaponItemInfo;                             // 0x2348(0x0028)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	Enum_PlayerState                              PlayerStateBreathing;                              // 0x2370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2371[0x7];                                     // 0x2371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponPlaceholder_C*                   TempWP;                                            // 0x2378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODBreathingDefault;                              // 0x2380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventBreathingDefault;                         // 0x2388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UUIW_FlashGrenade_C*                    FlashWidjet;                                       // 0x2390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Contusion_;                                        // 0x2398(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExplosionGrenadeInHand;                            // 0x2399(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoomGrenadeInHand;                                 // 0x239A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239B[0x5];                                     // 0x239B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   Inventory_Ref;                                     // 0x23A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x23A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrameWeight;                                       // 0x23C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sharpen;                                           // 0x23C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerStopFlashEffect;                              // 0x23D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FlashMaterial;                                     // 0x23D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Familiarity;                                       // 0x23E0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          FPSMode;                                           // 0x23F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23F1[0x7];                                     // 0x23F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DistanceToExplosion;                               // 0x23F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShakeGrenadeMiddle;                                // 0x2400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShakeGrenadeF1;                                    // 0x2408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceNearShake;                                 // 0x2410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGrenadeF1ShakeDefault_C*               GrenadeF1CameraShakeRef;                           // 0x2418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShakeGrenade333;                                   // 0x2420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToExplosionLong;                           // 0x2428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToExplosionMiddle;                         // 0x2430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ShakeGrenadeNear;                                  // 0x2438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CurrentGrenade;                                    // 0x2440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALootPoint_C*                           DropBoxRef;                                        // 0x2448(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSIContainer_C*>                EquipContainers;                                   // 0x2450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             OnKnockdownStart;                                  // 0x2460(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          WeaponAimAnimFinished;                             // 0x2470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDeathAnimEnded;                                  // 0x2471(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2472[0x6];                                     // 0x2472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponPlaceholder_C*                   WeaponPlaceholderShadow;                           // 0x2478(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          InCraftstation;                                    // 0x2480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2481[0x7];                                     // 0x2481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ResRadius;                                         // 0x2488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 LastMovementMode;                                  // 0x2490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2491[0x7];                                     // 0x2491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DeadCamera;                                        // 0x2498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastHittBoneName;                                  // 0x24A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastHitAngle;                                      // 0x24A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastHitDirection;                                  // 0x24B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGrenadeDamage;                                   // 0x24C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TabIsOpened;                                       // 0x24C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24CA[0x6];                                     // 0x24CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Highlighted_Actor;                                 // 0x24D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FullFlashDuration;                                 // 0x24D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeInterval;                                      // 0x24E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlashIntensity;                                    // 0x24E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlashFadeSpeed;                                    // 0x24F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AfterimageIntensity;                               // 0x24F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RingingVolume;                                     // 0x2500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RingingFadeSpeed;                                  // 0x2508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Ringing;                                           // 0x2510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Flashbang_Dynamic;                              // 0x2518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bFadingFlashEffect;                                // 0x2520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2521[0x7];                                     // 0x2521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTexture;                                     // 0x2528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x2530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprinting;                                       // 0x2538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToSync;                                            // 0x2539(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_253A[0x2];                                     // 0x253A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Primary_Weapon_Slot;                               // 0x253C(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class FName                                   Secondary_Weapon_Slot;                             // 0x2544(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowUI;                                            // 0x254C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254D[0x3];                                     // 0x254D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponPlaceholder_C*                   ActiveWeaponPlaceholder;                           // 0x2550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShopInteract;                                      // 0x2558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2559[0x7];                                     // 0x2559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASurvivalPlayer_C*>              ShopActors;                                        // 0x2560(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ShopStart;                                         // 0x2570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ShopEnd;                                           // 0x2580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Has_Reset_Timer;                                   // 0x2590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2591[0x7];                                     // 0x2591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_by_reset;                                    // 0x2598(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Food_Desaturation;                                 // 0x25A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_blur;                                        // 0x25A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Blur_Radius;                                 // 0x25A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Density;                                     // 0x25AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Food_PP;                                           // 0x25B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Shop;                                              // 0x25B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25B9[0x3];                                     // 0x25B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoodWaterPP_Destruaction;                          // 0x25BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterPP_blur_alpha;                                // 0x25C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitPP_Alpha;                                       // 0x25C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FoodWaterPP_Water_Blur_Radius;                     // 0x25C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25CC[0x4];                                     // 0x25CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Water_PP;                                          // 0x25D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraShakeBase*                       CurrentShopShake;                                  // 0x25D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               FlashlighRotation;                                 // 0x25E0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               Blood_PP;                                          // 0x25F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Hit_PP;                                            // 0x2600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Blood_PP_lerp;                                     // 0x2608(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_260C[0x4];                                     // 0x260C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Blood_PP_random_value;                             // 0x2610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloodPP_midle_value;                               // 0x2618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BloodPPMinValue;                                   // 0x2620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ReloadEventLocaly;                                 // 0x2628(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             PressReloadWeapon;                                 // 0x2638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ChangeWeaponActiveSlot;                            // 0x2648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           HandlerBloodEffect;                                // 0x2658(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     House_Ambient_Off;                                 // 0x2660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               M_HitBlurPP;                                       // 0x2668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HitBlurPPLerp;                                     // 0x2670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintByToggle;                                    // 0x2674(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2675[0x3];                                     // 0x2675(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameSettings_C*                        GameSettings;                                      // 0x2678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APP_Effects_C*                          PP_Effects;                                        // 0x2680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PrimaryPointId;                                    // 0x2688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SecondaryPointId;                                  // 0x268C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddBunkerMarks;                                    // 0x2690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2691[0x7];                                     // 0x2691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 DeadBodyV2;                                        // 0x2698(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceHidden;                                       // 0x26A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CrouchScopeAnimInProcess;                          // 0x26A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A2[0x6];                                     // 0x26A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeaponPlaceholder_C*                   WeaponPlaceholderPistol;                           // 0x26A8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   PistolWeaponSlotName;                              // 0x26B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SelfMinushealing;                                  // 0x26B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B9[0x7];                                     // 0x26B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SelfMinushealingTimerHandle;                       // 0x26C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraShakeBase*                       TpsToFpsCameraShake;                               // 0x26C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     RoomTone;                                          // 0x26D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     RoomReverb;                                        // 0x26D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LoadingActor;                                      // 0x26E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMoveWhileUsingItem;                             // 0x26E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26E2[0x6];                                     // 0x26E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFItemInfo>                     ItemsCache;                                        // 0x26E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Eating;                                            // 0x26F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26F9[0x7];                                     // 0x26F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    FMODAudioContusion;                                // 0x2700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          FreeLook_Active;                                   // 0x2708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2709[0x7];                                     // 0x2709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               NeedToDelete_SavedFinalRotation_FreeLook;          // 0x2710(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               NeedToDelete_SavedStarterRotation_FreeLook;        // 0x2728(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GrenadeOpened;                                     // 0x2740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2741[0x7];                                     // 0x2741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RememberOldRotation;                               // 0x2748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Scope_WallOffset_Check;                            // 0x2760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2761[0x7];                                     // 0x2761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDeath;                                           // 0x2768(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        TargetInteractDistance;                            // 0x2778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActorRecording_C*                      ThreeDCharacter;                                   // 0x2780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToInteractable;                            // 0x2788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RoomBuilding;                                      // 0x2790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2791[0x7];                                     // 0x2791(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SaveStructure                       GI_Character_Save_Ref;                             // 0x2798(0x01B0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          InteractiveActorInFocus;                           // 0x2948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInHouseBool;                                     // 0x2949(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294A[0x6];                                     // 0x294A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MainLightSource;                                   // 0x2950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ChooseCharacterDynMat;                             // 0x2960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFemale;                                          // 0x2968(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2969[0x7];                                     // 0x2969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            NewVar_JSI_Sl;                                     // 0x2970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        NewVar_Cont;                                       // 0x2978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockVoiceChat;                                    // 0x2980(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2981[0x7];                                     // 0x2981(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        HelmetContainer;                                   // 0x2988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          bCompasEquip;                                      // 0x2990(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2991[0x7];                                     // 0x2991(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OnDeathVelocity;                                   // 0x2998(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Compass_C*                          CompasRef;                                         // 0x29B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSauna;                                         // 0x29B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartProgressBar;                                 // 0x29B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bItemLifeTime6sec;                                 // 0x29BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29BB[0x5];                                     // 0x29BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_AttachmentCell_C*                  SavedCell;                                         // 0x29C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CompasState;                                       // 0x29C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          StopHiddingMe;                                     // 0x29C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopUsingItem;                                     // 0x29CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LootDelayBlock;                                    // 0x29CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29CC[0x4];                                     // 0x29CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LootDelayBlockTimer;                               // 0x29D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        LootDelayBlockFloat;                               // 0x29D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    SelectedSlot;                                      // 0x29E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Delay;                                             // 0x29F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29F1[0x7];                                     // 0x29F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DM_BodyMan;                                        // 0x29F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DM_LegsMan;                                        // 0x2A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DM_LegsGirl;                                       // 0x2A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DW_BodyGirl;                                       // 0x2A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FemaleFPHands;                                     // 0x2A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaleLHand;                                         // 0x2A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MaleRHand;                                         // 0x2A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Time_0;                                            // 0x2A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A34[0x4];                                     // 0x2A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FinishRoundProgressBarTimerHandle;                 // 0x2A38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockUsingItemCanceling;                           // 0x2A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartTimelineRoundBar;                             // 0x2A41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveInput3Frames;                                  // 0x2A42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A43[0x5];                                     // 0x2A43(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Slot_Ref__For_Using_Item_;                         // 0x2A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockCompas;                                       // 0x2A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A51[0x7];                                     // 0x2A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ProtectiveCaseContainer;                           // 0x2A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   KnockedTag;                                        // 0x2A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_Surrender_C*                       WBP_Surrender;                                     // 0x2A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReviveAnim;                                        // 0x2A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A71[0x3];                                     // 0x2A71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   In_Bone_Name;                                      // 0x2A74(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A7C[0x4];                                     // 0x2A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Linear_Velocity;                                   // 0x2A80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ragdolling;                                        // 0x2A98(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A99[0x7];                                     // 0x2A99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CapsuleLocation;                                   // 0x2AA0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PlayerMeshOffset;                                  // 0x2AB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOnBack;                                          // 0x2AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD1[0x3];                                     // 0x2AD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SurrenderTime;                                     // 0x2AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SurrenderTimer;                                    // 0x2AD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           KnockdownTimer;                                    // 0x2AE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ReviveTime;                                        // 0x2AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateCapsuleTimer;                                // 0x2AF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      Reviver;                                           // 0x2AF8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLoc;                                         // 0x2B00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           PosOffsetCurve;                                    // 0x2B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EventMeshCurve;                                    // 0x2B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Drop_Item_when_Die;                                // 0x2B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B29[0x7];                                     // 0x2B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDropItemEntry>                 Drop;                                              // 0x2B30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Is_Radial_Damage;                                  // 0x2B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B41[0x7];                                     // 0x2B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Killer;                                            // 0x2B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Bone_Name;                                         // 0x2B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hit_location;                                      // 0x2B58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Hit_Angle;                                         // 0x2B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GPSEquip;                                          // 0x2B78(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          GPSState;                                          // 0x2B79(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B7A[0x6];                                     // 0x2B7A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GPS_C*                              GPSRef;                                            // 0x2B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     KnockedSnapShot;                                   // 0x2B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                PlayerLocation;                                    // 0x2B90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TravelTimer;                                       // 0x2BA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TravelDistance;                                    // 0x2BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dealt_Damage;                                      // 0x2BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shot_Count;                                        // 0x2BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RegisteredHit;                                     // 0x2BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitPercentage;                                     // 0x2BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockGPS;                                          // 0x2BD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD1[0x7];                                     // 0x2BD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PosReverseOffsetCurve;                             // 0x2BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EventReverseMeshCurve;                             // 0x2BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int64                                         StatFood;                                          // 0x2BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         StatDrink;                                         // 0x2BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         StatAid;                                           // 0x2BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         StatZombieKilled;                                  // 0x2C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         Seconds;                                           // 0x2C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         Minutes;                                           // 0x2C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hours;                                             // 0x2C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1C[0x4];                                     // 0x2C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StatHeadShotDistance;                              // 0x2C20(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StatTookDmg;                                       // 0x2C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWDG_Map_C*                             GPSWidgetMapRef;                                   // 0x2C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         InclineAxisValue;                                  // 0x2C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C3C[0x4];                                     // 0x2C3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x2C40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rot;                                               // 0x2C58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UJSI_Slot_C*                            Source_Slot_Ref;                                   // 0x2C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CountSlideGPS;                                     // 0x2C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C7C[0x4];                                     // 0x2C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CarsNames;                                         // 0x2C80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         StatSave;                                          // 0x2C90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           LoopSaveStatTimer;                                 // 0x2CA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSaveStats;                                       // 0x2CA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLoadStats;                                       // 0x2CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          InHub;                                             // 0x2CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC9[0x7];                                     // 0x2CC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 TempStatSaveArray;                                 // 0x2CD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnAiming;                                          // 0x2CE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         EquipmentTier;                                     // 0x2CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CF4[0x4];                                     // 0x2CF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetCarCount;                                     // 0x2CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 HouseName;                                         // 0x2D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSaveHouse;                                       // 0x2D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLoadHouse;                                       // 0x2D28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           InputReloadTimer;                                  // 0x2D38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           FPPCrouchingWepOffsetCurve;                        // 0x2D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           TPPCrouchingWepOffsetCurve;                        // 0x2D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           FPPStandingWepOffsetCurve;                         // 0x2D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           TPPStandingWepOffsetCurve;                         // 0x2D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          InTrainGym;                                        // 0x2D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sit;                                               // 0x2D61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D62[0x6];                                     // 0x2D62(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HomeNameArray;                                     // 0x2D68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSetHomeCount;                                    // 0x2D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCarSold;                                         // 0x2D88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHomeSold;                                        // 0x2D98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EBPE_AmmoClass                                DamagedAmmoClass;                                  // 0x2DA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA9[0x3];                                     // 0x2DA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RPoints;                                           // 0x2DAC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SetRPointsCount;                                   // 0x2DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          UsingVending;                                      // 0x2DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC1[0x7];                                     // 0x2DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             CarsStats;                                         // 0x2DC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FString>                         CarsStat;                                          // 0x2DD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SitTrain_;                                         // 0x2DE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DE9[0x3];                                     // 0x2DE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MySquadIndex;                                      // 0x2DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Gymhandle;                                         // 0x2DF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HightlightChair;                                   // 0x2DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SprintDistanceTraveled;                            // 0x2E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintDistanceNeedToTrain;                         // 0x2E08(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        TravelDistanceWeighted;                            // 0x2E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GetHitedCount;                                     // 0x2E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RevivingCount;                                     // 0x2E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MoneyCycleCount;                                   // 0x2E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBinocularsEquip;                                // 0x2E24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E25[0x3];                                     // 0x2E25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShotCountPistol;                                   // 0x2E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CarStealNumber;                                    // 0x2E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CarRepairCount;                                    // 0x2E30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RefuelCount;                                       // 0x2E34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerSit;                                         // 0x2E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockedCompassInTutorial;                          // 0x2E39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockedGPSInTutorial;                              // 0x2E3A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SitOnBar;                                          // 0x2E3B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E3C[0x4];                                     // 0x2E3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HightlightBar;                                     // 0x2E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABarParent_C*                           BarParentCall;                                     // 0x2E48(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          SitChair;                                          // 0x2E50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E51[0x7];                                     // 0x2E51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AA_Food_C*                              FoodRef;                                           // 0x2E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bMuteMicrophone;                                   // 0x2E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E61[0x3];                                     // 0x2E61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReloadCountPistol;                                 // 0x2E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TranzitIsOpened;                                   // 0x2E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E69[0x7];                                     // 0x2E69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnInCarChanged;                                    // 0x2E70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Burnt;                                             // 0x2E80(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InBase;                                            // 0x2E81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockedInputInTutorial;                            // 0x2E82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockLeftHandEffector;                             // 0x2E83(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E84[0x4];                                     // 0x2E84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_QuestAreaIcon_C*>            QuestArea;                                         // 0x2E88(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class FName>                           Selected_Traits;                                   // 0x2E98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCharacterCreateSave_C*                 GI_Character_Save_Ref_0bject;                      // 0x2EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Quest_Items;                                       // 0x2EB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Quest_Items_Counts;                                // 0x2EC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_FurnitureShopButtons_C*            FurnitureCatalog;                                  // 0x2ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerRoomBP_C*                        RoomReference;                                     // 0x2ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnGPSStateChanged;                                 // 0x2EE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnCompassStateChanged;                             // 0x2EF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 CurrentTable;                                      // 0x2F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      Player;                                            // 0x2F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_MenuBarShop_C*                     WidgetRef;                                         // 0x2F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AA_Knife_C*                             KnifeRef;                                          // 0x2F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AA_Fork_C*                              ForkRef;                                           // 0x2F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActiveTable;                                       // 0x2F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      Player_Bar;                                        // 0x2F30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OutputPlaceFood;                                   // 0x2F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OutputPlaceFoodIndex;                              // 0x2F40(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F44[0x4];                                     // 0x2F44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnExitBar;                                         // 0x2F48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnFinishFood;                                      // 0x2F58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             EnterToBase;                                       // 0x2F68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UJSI_Slot_C*                            UsedJSISlot;                                       // 0x2F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ResHouseLoc;                                       // 0x2F80(0x0060)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZanyatoChair;                                      // 0x2FE0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FE1[0x7];                                     // 0x2FE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActiveChair;                                       // 0x2FE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDiscountUpdated;                                 // 0x2FF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AA_Alhocol_C*                           BottleRef;                                         // 0x3000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         PaidLoan;                                          // 0x3008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300C[0x4];                                     // 0x300C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnLoanPaid;                                        // 0x3010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AA_Menu_C*                              MenuRef;                                           // 0x3020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockMenu;                                         // 0x3028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InventoryOpenAnim;                                 // 0x3029(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_302A[0x6];                                     // 0x302A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBlockOpenMenu;                                   // 0x3030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnGymExit;                                         // 0x3040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          BlockInputAnim;                                    // 0x3050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsInElevator;                                     // 0x3051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InventoryCameraBlock;                              // 0x3052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Recover;                                           // 0x3053(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3054[0x4];                                     // 0x3054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Aliases;                                           // 0x3058(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnSetAliases;                                      // 0x3068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnPocketChanged;                                   // 0x3078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         New_Rotation_X__Roll_;                             // 0x3088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InventoryOpenAnimAlpha;                            // 0x308C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          JumpBlock;                                         // 0x3090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3091[0x7];                                     // 0x3091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             RoomInsidesSave;                                   // 0x3098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FString>                         RoomInsideSave;                                    // 0x30A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         ServerStruct;                                      // 0x30B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FRotator                               GpsRotation;                                       // 0x30C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	FMulticastInlineDelegateProperty_             OnBackPackChanged;                                 // 0x30E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnChangeAmmoClass;                                 // 0x30F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ChangeAmmoTypeTime;                                // 0x3100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3104[0x4];                                     // 0x3104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     KnockedSnapShot3d;                                 // 0x3108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UFMODAudioComponent*                    LastReplicatedSound;                               // 0x3110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, Deprecated, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    SupportSound;                                      // 0x3118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    KnockedSnap3d;                                     // 0x3120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockCallMenu;                                     // 0x3128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3129[0x7];                                     // 0x3129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnMeetNPC;                                         // 0x3130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          MenuOpen_;                                         // 0x3140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3141[0x7];                                     // 0x3141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AA_Menu_C*                              MenuRef_0;                                         // 0x3148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         GPSPage;                                           // 0x3150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3154[0x4];                                     // 0x3154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GPS_FP_C*                           GPSRef_FP;                                         // 0x3158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, E_CarStatus>              CarSaveMap;                                        // 0x3160(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BlockFIK;                                          // 0x31B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bMouseInverse;                                     // 0x31B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31B2[0x6];                                     // 0x31B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuest*                                 TrackedQuest;                                      // 0x31B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SyncedLookRotatation;                              // 0x31C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlockedBinocularsInTutorial;                       // 0x31D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D9[0x7];                                     // 0x31D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrainingApp_C*                      As_BP_Training_App;                                // 0x31E0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	EWE_NewDeathScreenState                       Ressurect_Place;                                   // 0x31E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DeviceSwitcherBlock;                               // 0x31E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Teleping;                                          // 0x31EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31EB[0x1];                                     // 0x31EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Received_Reputation_Points;                        // 0x31EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowInteractDebugTrace;                           // 0x31F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BarEating;                                         // 0x31F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31F2[0x6];                                     // 0x31F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DoOnce;                                            // 0x31F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<ECollisionChannel, ECollisionResponse>   DefaultCollisionResponse_New;                      // 0x3200(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   CurrentCarName;                                    // 0x3250(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                PrevTickLocation;                                  // 0x3268(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeBlock;                                      // 0x3280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MeleeAnim;                                         // 0x3281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EasyTrainEnable;                                   // 0x3282(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchAnim;                                        // 0x3283(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECarTipe                                      CarTipe;                                           // 0x3284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3285[0x3];                                     // 0x3285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReloadCountAssault;                                // 0x3288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReloadCountShotgun;                                // 0x328C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReloadCountCarbine;                                // 0x3290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotCountAssault;                                  // 0x3294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotCountShotgun;                                  // 0x3298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotCountCarbine;                                  // 0x329C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         Missing_Car_Names;                                 // 0x32A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             MissingCarSave;                                    // 0x32B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Is_Beginner;                                       // 0x32C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ExitGPSBlock;                                      // 0x32C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShopNow;                                           // 0x32C2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C3[0x5];                                     // 0x32C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_Training>                            TrainCD;                                           // 0x32C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HungerDamage;                                      // 0x32D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D9[0x7];                                     // 0x32D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             ReceiverInfo;                                      // 0x32E0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFItemInfo                             DroppedInfo;                                       // 0x3500(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          FPPWeapon;                                         // 0x3720(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar;                                            // 0x3721(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3722[0x2];                                     // 0x3722(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrainCost;                                         // 0x3724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CtrlHolded;                                        // 0x3728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShiftHolded;                                       // 0x3729(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FreeLookPressed;                                   // 0x372A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_372B[0x1];                                     // 0x372B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackpackChangeCount;                               // 0x372C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                ShopWidget_0;                                      // 0x3730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bBlockingAfterRessurect;                           // 0x3738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void _MULC_SerRefill(bool Refill);
	void _Serv_SetRefill(bool Refill);
	void AccelChanged_Multicast_(double Accel, double Deccel);
	void AccelChanged_Server_(double Accel, double Deccel);
	void Off(bool On_);
	void ActivateBattleMode(bool Enable);
	void Add_Item_Data(const struct FContainerPickupsInfo& Param_Index);
	void Add_Item_Items(const struct FContainerPickupsInfo& Param_Index);
	void AddAimPP();
	void AddCharacterRotation(const struct FRotator& Amount);
	void AddCharRotation(const struct FRotator& Amount);
	void AddDesiredItem(int32 ItemId, int32 Count);
	void AddDroppedItemToGround(const struct FFItemInfo& FItemInfo);
	void AddingContainersToPockets();
	void AddingItemsToPockets();
	void AddInviteHomeWidget(int32 InviteIndex, const class FString& PlayerNameOfferer, class ASurvPC_C* Target);
	void AddInviteWidget(int32 SquadIndex, const class FString& PlayerName, class ASurvPC_C* Target);
	void AddItems(TArray<class FName>& Array);
	void AddItemsToPickup(const struct FFItemInfo& FItemInfo, TArray<struct FContainerPickupsInfo>* AddedData1, TArray<struct FContainerPickupsInfo>* AddedItems1);
	void AddItemToDropBox(const struct FFItemInfo& Item, bool* Result);
	void AddItemToPlayer_Client(const struct FFItemInfo& Param_ItemInfo);
	void AddItemToPocketFromMPC(class UJSIContainer_C* FromContainer, class UJSI_Slot_C* DroppedSlotRef);
	void AddPitchInput(double AxisValue);
	void AddPlayerListener(TScriptInterface<class ISurvivalPlayerListener_C> Listener);
	void AddRPoints(int32 Param_RPoints);
	void AddRPoints_Serv(int32 Param_RPoints);
	void AddSpecular__FinishedFunc();
	void AddSpecular__UpdateFunc();
	void AddToGroundItems(const class AA_Item_C*& NewItem);
	void AddTradeitemsToInventory();
	void AddTradeOfferWidget(const class FString& PlayerNameOfferer, class ASurvivalPlayer_C* TradeOfferer);
	void AddYawInput(double AxisValue);
	void AfterFullHeal();
	void AfterFullHealthImpl();
	void AfterFullHealthMulticast();
	void AfterFullHealthServer();
	void AIInteract(class ABP_Door_C* Door, class UArrowComponent* Arrow);
	void AimStateEvent__DelegateSignature(bool Aim);
	void AimWithScope(double FOV);
	void AmmoChangedEvent__DelegateSignature(EBPE_Weapon_Type Param_WeaponType, EBPE_FireMode FireMode, EBPE_AmmoClass AmmoClass, int32 CurrentAmmo, int32 LowAmmo, int32 MaxAmmo, class UMaterialInterface* UIIcon);
	void AnimNotifyTurningInPlace(class UAnimMontage* TurnIPMontage, bool ShouldTurn, bool TurningIP, bool TurningRight);
	void AnotherPlayerKilled();
	void Apply_TakeDamage_Camera_Shake(const struct FVector& Vector, bool Zombie_);
	void ApplyCriticalHealthEffect__FinishedFunc();
	void ApplyCriticalHealthEffect__UpdateFunc();
	void ATPCCameraMode(const struct FGameplayTag& CameraModeTag, bool bWithInterpolation, bool WithTransit, double TransitTime, bool SharpTransition, bool bForceSet);
	void AttachCanister(class ABP_Canister_C* Canister);
	void AvoidFire();
	void BackpackVisibilitySwitcher(bool Visible);
	void BackToStandin();
	void BackToStandinGPS();
	void BackToTppFromCompas();
	void BackToTppFromGPS();
	void BaseEntered(bool Enter);
	void BeginOverlap();
	void BindingEventsBeginPlay();
	void BlizzardWarning();
	void BlockMenuFunc(bool Block_);
	void BndEvt__BPC_PlayerStatsComponent_K2Node_ComponentBoundEvent_15_StaminaEnd__DelegateSignature();
	void BndEvt__SurvivalPlayer_CompasRef_K2Node_ComponentBoundEvent_0_ActorOnInputTouchEndSignature__DelegateSignature(ETouchIndex FingerIndex, class AActor* TouchedActor);
	void BndEvt__SurvivalPlayer_LocalVOIP_K2Node_ComponentBoundEvent_2_OnSynthEnvelopeValue__DelegateSignature(const float EnvelopeValue);
	void BndEvt__VoipManager_K2Node_ComponentBoundEvent_0_VoiceGenerated__DelegateSignature(const TArray<uint8>& VoiceData, const float MicLevel);
	void BoltAction_Resume_Multicast_();
	void BoltAction_Resume_Server_();
	void BoltAction_Stop_Multicast_();
	void BoltAction_Stop_Server_();
	void BPI_CameraShake(class UClass* ShakeClass, bool NeedChangeScale, double Scale);
	void BreathingDefault();
	void BuildContainerDataToWidget(TArray<struct FContainerPickupsInfo>& ItemData_Containers, TArray<struct FContainerPickupsInfo>& ItemData_Items, class UJSIContainer_C* MainContainer, TArray<class UJSIContainer_C*>* CreatedContainerList);
	void BuildContainerDataToWidget_v2(TArray<struct FContainerPickupsInfo>& ItemData_Containers, TArray<struct FContainerPickupsInfo>& ItemData_Items, class AMPMainContainerBox_C* MainContainer, TArray<class FString>* NewParam);
	void BunkerEnter();
	void BunkerExit();
	void BunkerSceneEnter(class ACutSceneTrigger_C* ViewTargetA);
	void BurntEnd();
	void BurntSurrender();
	void BusyTraining();
	void BuyCar_Owning(const class FString& CarName);
	void BuyCar_Serv(const class FString& CarName);
	void BuyHome_Serv(const class FString& HomeName);
	void BuyHomeOwning(const class FString& HomeName);
	void BuyHouseOwning(const class FString& Param_HouseName);
	void BuyHouseServ(const class FString& Param_HouseName);
	void BuyItems(const struct FContainerPickupsInfo& Item, int32 A);
	void BuyPlayerStatus_Owning(const class FString& Param_Aliases);
	void BuyPlayerStatus_Serv(const class FString& Param_Aliases);
	void CalcAccelDeccel();
	void CalcAccelDeccelCustom(double Accel, double Deccel);
	void CalculateArmorAndHelmetDurability(class FName BoneName, double Damage);
	double CalculateDmgWithArmor(class FName BoneName, double Damage);
	void CalculateItemsLeftAfterAddOrEquip(const struct FFItemInfo& Item, int32* OutputPin);
	void CalculateSpeed();
	void CalculateVariables();
	void CallCraft(bool Craft_);
	void CallDisableInput();
	void CallDurabilityIncreaseEvent();
	void CallEatAnim(class FName Hightlight);
	void CallEatMesh(class FName ItemType, double DurationAttached, double AnimDelay, double DissappearDelay, double PlayRate);
	void CallEnableInput();
	void CallFallDamage(double Damage);
	void CallFuelIncreaseEvent();
	void CallInteract();
	void CallInteractEvent();
	void CallLootAnim(double Param_LootingHeight, bool Param_LootPointOpened);
	void CallServerEvent(class ASurvivalPlayer_C* Character);
	void CameraDefault();
	void CameraLerpAction(class UCurveFloat* Curve);
	void CameraLerpSpring__FinishedFunc();
	void CameraLerpSpring__UpdateFunc();
	void CampBuildInstant();
	void CampPlaceBegin();
	void CampPlaceEnd();
	void Can_Add_or_Equip_Item(const struct FFItemInfo& FItemInfo, bool OnlyAdd, bool* Return);
	void CanAddItem(class UJSIContainer_C* Container, const struct FFItemInfo& FItemInfo, bool blockStack, bool* Can, int32* SlotIndex, bool* Canstack, class UJSI_Slot_C** ItemRef);
	void CanAddItems(TArray<struct FFItemInfo>& Items, bool* Can, int32* ItemsLeft);
	void CancelFire();
	void CancelInteractionByMouse();
	void CapsuleChaseWhileRagdolling(struct FVector* CapsuleLoc);
	void CarEnter();
	void CarExit();
	void CarMapPrint();
	void CarRepair();
	void CarSaveUpdate();
	void CarsStats__DelegateSignature(TArray<class FString>& CarStats);
	void CarStealCount();
	void CarToAvailableUpdate();
	void CastShadowsCurrentWP(bool Cast_);
	void CatchUpPlayer(class ASurvivalPlayer_C* Target);
	void CatchUpPlayerClient(class ASurvivalPlayer_C* Target);
	void Change_Helmet();
	void Change_Money_Count(int32 Sum);
	void ChangeAimState_Multicast_(bool IsAim, bool IsFPS);
	void ChangeAimState_Server_(bool IsAim, bool IsFPS);
	void ChangeAmmoClass();
	void ChangeBackpackBindEvent(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void ChangeBinocularsEquipState();
	void ChangeBinocularsEquipStateServer();
	void ChangeCameraMode(const struct FGameplayTag& CameraModeTag, bool bWithInterpolation);
	void ChangeCameraOffset(bool Reset, const struct FVector& NewSocketOffset, double InterpSpeed);
	void ChangeContainerMother(int32 ContainerMotherID, int32 UniqueId, int32 SlotIndex);
	void ChangeDrunk_PP_Parameters(double Blur, double Saturation, double Enabled);
	void ChangeFootState(EFootState New_Style);
	void ChangeHunger_PP_Parameters(double Param_Food_Desaturation, double Param_Water_blur, double Water_blur_radius, double Water_density);
	void ChangeJacket();
	void ChangeMaterialParamColor(TArray<class USkeletalMeshComponent*>& Array, class FName ParameterName, const struct FLinearColor& Value);
	void ChangePants();
	void ChangeSits_Server(class APawn* Param_Vehicle, int32 DesireSitIndex, class APawn* Param_Player);
	void ChangeSitsIfinCar(class APawn* Param_Vehicle, class APawn* Param_Player, int32 DesireSitIndex);
	void ChangeStance_Multicast_(EStanceState Stance);
	void ChangeStance_Server_(EStanceState Stance);
	void ChangeWeapon_Multicast_(class FName Param_WeaponName, class UJSI_Slot_C* ItemState, const struct FFItemInfo& Weapon_ItemInfo);
	void ChangeWeapon_Server_(class FName Param_WeaponName, const struct FWeaponUniqueInfo& Weapon_ItemInfo);
	void ChangeWeaponActiveSlot__DelegateSignature();
	void CharRotationSync_Multicast_(const struct FVector2D& CharRotation);
	void CharRotationSync_Server_(const struct FRotator& CharRotation);
	void CheckBandages(bool* HaveBandage);
	void CheckBleeding(const class FText& EffectName, double BleedingDuration, bool* BleedingActive);
	void CheckBlendshapes();
	void CheckBlendshapesDelay(float Duration);
	void CheckEndEat(bool* Eat_);
	void CheckForBreathIdle();
	void CheckForClosestBunkerMark();
	void CheckForContainerDrop(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void CheckForJsiSlotArray(const TArray<struct FFItemInfo>& NewParam);
	void CheckForSpaceInInventory();
	void CheckHoveredSlot();
	void CheckIfDiedInCar_Client();
	void CheckIfMarkInBunker(class UW_Mark_C* Mark);
	void CheckLegsColor();
	void CheckMoveTypeBySpeed();
	void CheckSkinTone();
	void CheckSlotsToPlace(const struct FSBP_ItemsData& Item, int32* SlotID, bool* Stack, bool* Full);
	void CheckSlotsToRemove(int32* SlotID, bool* NoItem);
	void CheckWeaponSlotPoint(int32 PrimaryId, int32 SecondaryId, bool* NonSync);
	void CheckZombieSpawnInCar_Server(class ABP_CarWithZombie_C* CarWithZombie);
	void Clear_End_Gamestats();
	void ClearGrenadeVars();
	void ClearInventory();
	void ClearRotationVars();
	void ClearStates();
	void ClearStateVars();
	void Client_BuildMPContainerData(class AMPMainContainerBox_C* Container, const struct FMpContentRep& Data);
	void ClientAddItem();
	void ClientBuildShopData(class AMPMainContainerBox_C* Container, const struct FMpContentRep& Data);
	void ClientDied(double HitAngle, const struct FVector& HitLocation, class FName BoneName, class APawn* Param_Killer, bool Param_IsRadialDamage, const TArray<struct FDropItemEntry>& Param_Drop, bool DropItemWhenDie, bool Param_HungerDamage);
	void ClientFunc_OnDistanceCloseContainer();
	void ClientLevelLoaded(class FName LevelName);
	void ClientLevelUnloaded(class FName LevelName);
	void ClientResponseUID(int32 Uid, bool ForSlot);
	void CloseInventory();
	void ColdDecreaseSet(double DecreaseSpeed);
	void ColdDecreaseSet_MULTI(double DecreaseSpeed);
	void CollisionEnable();
	void CompasEvent();
	void ConfigureContainerInventory(class AMPMainContainerBox_C* Param_CurrentFocusedContainer);
	void ConfigureTradeInventory();
	void ConfigureTradeInventory_Multicast();
	void ConfigureTradeInventory_Server(class ASurvivalPlayer_C* TradeOfferer);
	void ContainerDropped(class UJSIContainer_C* FromContainerRef, class UJSI_Slot_C* FromSlotRef, class UWBP_LootEntry_C* ToEntryRef, class UJSI_Slot_C* ToSlotRef);
	void ContainerEventHandle(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiveRef, int32 Param_ToSlotIndex);
	void CopyDataToShadowWP(class AWeaponPlaceholder_C* SourceWP);
	void CorrectCameraOffsetByPelvis();
	void Count_Prices(TArray<class UJSI_Slot_C*>& ItemsToBuy, double* Prices);
	void Craft(class APawn* Param_Player);
	void Craft_Camera_Proc();
	void CrashEquipment();
	void Crawl_Ragdolling(double HitAngle, const struct FVector& HitLocation);
	void CrawlingState();
	void CrawlingStateBegan();
	void CrawlingTagUpdate(bool Revive_, class AActor* CrawlingActor, class ASurvivalPlayer_C* SelfRef);
	void CrawlingTagUpdMulti(bool Revive_, class ASurvivalPlayer_C* CrawlingActor, class ASurvivalPlayer_C* Param_Reviver);
	void CrawlingUpdateClient(bool bRevive, class APS_TDB_C* RevivingPlayerPS);
	void CreateDynMateral(class USkeletalMeshComponent* SkeletalMesh);
	void CriticalDamageEffect(float Length, class UCurveFloat* NewFloatCurve, double Param_BloodPP_midle_value);
	void CrouchBag();
	void CrouchCustom();
	void CrouchDelay();
	void CrouchingWeaponOffset(bool Crouch_);
	void CrouchingWeaponOffsetTimeline__FinishedFunc();
	void CrouchingWeaponOffsetTimeline__UpdateFunc();
	void CrouchPitchOffsetIfAim__FinishedFunc();
	void CrouchPitchOffsetIfAim__UpdateFunc();
	void CustomDamageFX(EPhysicalSurface Enumerator, const struct FVector& InputPin, const struct FVector& Forward);
	void CustomDamageFXServer(EPhysicalSurface Enumerator, const struct FVector& InputPin, const struct FVector& Forward);
	void CustomEvent(class UJSIContainer_C* Container);
	void CustomEvent_0(class UBP_Objective_C* Objective);
	void CustomEvent_1();
	void CustomEvent_2(class AActor* Hightlight);
	void CustomEvent_3(class AActor* Hightlight);
	void CustomEvent_4(class AActor* Hightlight);
	void DamageCameraEffects__FinishedFunc();
	void DamageCameraEffects__UpdateFunc();
	void DamageStatClient(double Dmg);
	void DeathEvent__DelegateSignature();
	class FName DecodeCarSave(TArray<class FString>& Array);
	void DelayedCameraMode(const struct FGameplayTag& CameraModeTag, bool bWithInterpolation, double Duration, bool CancelDelay);
	void DelayingBattleMode();
	void DelaySoundDamage();
	void DeleteDynamicContainer(int32 Uid);
	void DeleteFromContainer(class AMPMainContainerBox_C* MpContainerRef, int32 ItemUID, int32 ItemsLeft, bool bContainer, bool bShop, bool* bSuccess, struct FContainerPickupsInfo* Param_ItemInfo);
	void DestroyAllAttachmentsInWP(class AWeaponPlaceholder_C* WeaponPlaceholder);
	void DestroyAllBarBind();
	void DestroyAllBarBindMulti();
	void DestroyAllBarBindServer();
	void DestroyAllBarTab();
	void DestroyChildActors();
	void DestroyCompasMulticast();
	void DestroyFakeGrenade_Multicast_(bool Param_HasGrenade, bool OnlyDestroy);
	void DestroyFakeGrenadeServer(bool Param_HasGrenade, bool OnlyDestroy);
	void DestroyForkKnifeMulti();
	void DestroyForkKnifeServer();
	void DestroyGPSMulticast();
	void DestroyGPSWidget(class UWDG_Map_C* Widget);
	void DestroyInteractable();
	void DestroyInteractableItem(class UObject* ItemRef);
	void DestroyPawn();
	void DestroyReplicatedActor(class AA_Item_C* TargetActor);
	void DestroyWidget();
	void DetachCanister();
	void DeviceSwitcher(const class FString& Device);
	void DirectionalLightSwitch(const class FString& LightName);
	void DisableInp();
	void DisarmPlayer();
	void DistanceTraveled();
	void DLSSModeChanged__DelegateSignature(uint8 Param_DLSSMode);
	void DoOnceTimer(double Time);
	void DoubleClickItemOnGround(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void DropAllItems();
	void DropInfo_ContainerToContainer(class UJSIContainer_C* From, class UJSIContainer_C* To, class UJSI_Slot_C* FromSlotRef, class UJSI_Slot_C* ToSlotRef, bool ToEmptySlot_, bool MovedAll_);
	void DropInfo_SplitPerformed(class UJSI_Slot_C* SourceSlotRef, class UJSI_Slot_C* NewSplitSlotRef, class UJSIContainer_C* ContainerSource, class UJSIContainer_C* ContainerReceiver, int32 SplitAmount, int32 AmountRemaining);
	void DropItemBySlot(class UJSI_Slot_C* Slot);
	void DropItemOnGround(class UJSIContainer_C* From, class UJSIContainer_C* To, class UJSI_Slot_C* FromSlotRef, class UJSI_Slot_C* ToSlotRef, bool ToEmptySlot_, bool MovedAll_);
	void DrunkLerpTimeline__FinishedFunc();
	void DrunkLerpTimeline__UpdateFunc();
	void DummyClientDied(double HitAngle, const struct FVector& HitLocation, class FName BoneName, class APawn* Param_Killer);
	void DurabilityButtonCancel__DelegateSignature();
	void DurabilityButtonFinish__DelegateSignature();
	void DurabilityButtonStart__DelegateSignature();
	void EasyTrain();
	void EatAnimMu(class FName RowName, double PlayRate);
	void EatAnimResetMu();
	void EatAnimResetServ();
	void EatAnimServ(class FName RowName, double PlayRate);
	void EatingFood(const struct FF_MenuBarShopItem& Param_SelectedSlot, class AActor* Param_ActiveTable);
	void EatingFoodMulti(const struct FF_MenuBarShopItem& Param_SelectedSlot, class AActor* Param_ActiveTable);
	void EatingFoodMultiV(const struct FF_MenuBarShopItem& Param_SelectedSlot, class AActor* Param_ActiveTable);
	void EatingFoodServer(const struct FF_MenuBarShopItem& Param_SelectedSlot, class AActor* Param_ActiveTable);
	void EatingFoodServerV(const struct FF_MenuBarShopItem& Param_SelectedSlot, class AActor* Param_ActiveTable);
	void EatingFoodV(const struct FF_MenuBarShopItem& Param_SelectedSlot, class AActor* Param_ActiveTable);
	class UAnimSequence* EatItemSelect(const struct FS_EatPlayerInformation& S_EatPlayerInformation, bool* _CanMove, bool* _HasStandAnimation, bool* _WepNotHiding);
	void EnableSmoothSync(bool Enable, bool ZeroOnDisable);
	void EndDoorAttack();
	void EndKnockDown();
	void EndOverlap();
	void EnterToBase__DelegateSignature(bool Enter);
	void EquipArmor_Multicast_(class FName ItemId);
	void EquipArmor_Server_(class FName ItemId);
	void EquipBackpack_Multicast_(class FName ItemId);
	void EquipBackpack_Server_(class FName ItemId);
	void EquipCompas(bool Equip);
	void EquipCompasServer(bool Equip);
	void EquipGPS(bool Equip);
	void EquipGpsServer(bool Equip);
	void EquipHelmet_Multicast_(class FName ItemId);
	void EquipHelmet_Server_(class FName ItemId);
	void EquipOuterwear_multicast_(class FName ItemId);
	void EquipOuterwear_server_(class FName NameId);
	void EquipPants_multicast_(class FName ItemId);
	void EquipPants_server_(class FName ItemId);
	void EquipSomething(class UJSIContainer_C* Target, class FName RowName);
	void EquipThrowable(bool Equip);
	void EventFamiliarity_Serv(const class FString& FamiliarityNPCName);
	void EventOnIndexChanged(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, int32 NewIndex, bool Rotated);
	void ExecutePlayer(class ASurvivalPlayer_C* OtherPlayer);
	void ExecutePlayerOnClient(class ASurvivalPlayer_C* OtherPlayer);
	void ExecuteUbergraph_SurvivalPlayer(int32 EntryPoint);
	void ExitBar();
	void ExitChair(bool Param_Sit, class AActor* Hightlight);
	void ExitChairMulti(bool Param_Sit, class AActor* Hightlight);
	void ExitChairServer(bool Param_Sit, class AActor* Hightlight);
	void ExitCompasDied();
	void ExitGPSDied();
	void ExitGym();
	void ExitSofa();
	void ExitSofaMulti();
	void ExitSofaServer();
	void Fade(const bool bToFade, const double Duration);
	void FadeFlash(bool* FinishedFading);
	void FillPockets(bool Param_AddItems, bool AddContainers);
	void FindClosestBunkerMark(class UW_Mark_C** Array_Element);
	void FindItemCountByName(const class FString& ItemName, int32 NeededItemCount, bool* Success, int32* NeedCount, int32* NewParam, class FString* Item);
	void FindItemOnGround(class UJSI_Slot_C* Slot, class AA_Item_C** AItem, bool* Found);
	void FindItems__Weapons_(bool* Result, TArray<struct FFItemInfo>* ValidItems);
	void FindItemsOnTheGround(TArray<class AA_Item_C*>* Param_ItemsOnGround);
	void FindMeshOrient();
	void FinishRoundProgressBar();
	void FinishTraining(E_Training TrainingType);
	void Fire_Multicast_(const TArray<struct FBPS_DamageInfo>& HitInfo, bool Fire);
	void Fire_Server_(const TArray<struct FBPS_DamageInfo>& HitInfo, bool Fire);
	void FireSound_Multicast(bool Fire);
	void FireSound_Server(bool Fire);
	void FlashBang(bool ViewCameraOnFlash, double Distance);
	void FlashGrenadeOffCamera(double Distance);
	void FlashGrenadeOnCamera(double Distance);
	void FlashlightController();
	void FlashlightRotation();
	void FlashlightRotationServer(const struct FRotator& Param_Rot);
	void FocusHighlightedActor(class AActor* CheckActor, class AActor** Param_HighlightedActor);
	void Food_Water_Timeline__FinishedFunc();
	void Food_Water_Timeline__UpdateFunc();
	void FootprintBeginPlay();
	void FPPAimingCurveUpdate(bool Reverse_);
	void FPPAimingSwitcher(bool Activate_);
	void FPPAimingTimeline__EventHead__EventFunc();
	void FPPAimingTimeline__EventMesh__EventFunc();
	void FPPAimingTimeline__FinishedFunc();
	void FPPAimingTimeline__UpdateFunc();
	void FPPScopeCrouch(bool Param_Crouch);
	void FPSModeOff();
	void FPSOff();
	void FromProtectiveCaseToInventory(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void FuelButtonCancel__DelegateSignature();
	void FuelButtonFinish__DelegateSignature();
	void FuelButtonStart__DelegateSignature();
	void GameFocusCam();
	void Get_Change_Ammo_Type_Time(float* Param_ChangeAmmoTypeTime);
	void Get_End_Gamestats(TMap<E_StatEndGame, int64>* EndGameStat);
	void Get_Hit_Impulse(class FName BoneName, double HitAngle, const struct FVector& HitLocation, bool Param_IsRadialDamage, struct FVector* HitImpulse);
	void Get_XYBy_Angle(double Angle, double* X, double* Y);
	void GetActorType(E_ActorType* ActorType);
	void GetAllItemsToDrop(TArray<struct FDropItemEntry>* Result);
	void GetCameraOffset(struct FVector* PelvisOffset, struct FVector* InterpOffset);
	void GetCarsStat(TArray<class FString>* Stats);
	void GetContainerByUID(int32 ContainerUID, bool* Result, class UJSIContainer_C** Container);
	void GetDamageLogic(const double Health, class UBPC_PlayerStatsComponent_C* StatComp, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class UObject* HitFrom, bool DDLocal);
	void GetDeadBodyItems();
	void GetDefaultCameraTag(struct FGameplayTag* CameraModeTag);
	void GetEquipInfoBySlot(EquipmentSlot Slot, bool* Equipped);
	void GetEquipmentContainer(int32 ItemId, bool* Result, class UJSIContainer_C** Container);
	void GetEquipmentTier(EquipmentSlot EquipmentSlot, int32* Param_EquipmentTier);
	void GetEquipSlotByCID(int32 CID, EquipmentSlot* Slot);
	void GetEquipStatusBySlot(EPlayerSlots Slot, bool* Equipped);
	int32 GetGPSPage();
	void GetInventoryItemByUID(int32 ItemUID, bool* Result, bool* Container, struct FContainerPickupsInfo* Item);
	void GetItemByID__Constant_(int32 ItemId, bool* Result, struct FFItemInfo* Item);
	void GetItemByName(const class FString& Param_Name, int32 Count, int32* ReturnedCount);
	void GetItemCountByJSItemType(EJSItemType Type, int32* ReturnedCount);
	void GetItemCountByName(const class FString& Param_Name, int32* ReturnedCount);
	void GetItemCountByType(EItemType Type, int32* ReturnedCount);
	void GetItemsByType(EJSItemType Type, TArray<class FString>* Items, TArray<int32>* Counts);
	void GetItemsInventory(TArray<struct FContainerPickupsInfo>* Param_ContainerItems, TArray<struct FContainerPickupsInfo>* Param_ContainersData);
	void GetItemWeight(class FName Param_Name, double InputWeight, double* Weight);
	void GetKnockdownTime(double* KnockdownTime);
	void GetMeshOffset();
	void GetNames_CheckBlendShapes();
	void GetResLocation(class AActor* StartPoint, struct FVector* Vector);
	void GetReviveTime(double* Param_ReviveTime);
	void GetSaveCharactersServer(class ASurvivalPlayer_C* Character);
	void GetStartItems(TArray<class FName>* Param_StartItems);
	void GetStatsComponent(class UBPC_PlayerStatsComponent_C** PlayerStats);
	void GetSurrenderTime(float* Param_SurrenderTime);
	void GetSurvController(class ASurvPC_C** Param_SurvPC);
	void GetTotalMoneyCount(int32* ReturnedCount);
	void GetUltraSky(class AUltra_Dynamic_Sky_C** Output);
	struct FGameplayTag GetWeaponCameraTag();
	void GetWeaponNamesFromSlots(class FName* PrimaryWeaponName, class FName* SecondaryWeaponName, class FName* PistolWeaponName, class FName* MeleeWeaponName);
	void GI_TileLoaded(class FName TileName);
	void GI_TileUnloaded(class FName TileName);
	void GooutWater();
	void GotoWater();
	void GPSEquipFP();
	void GPSEvent();
	void GrenadeAdd(const class FString& Param_WeaponName);
	void Grenadedrop(const class FString& Param_WeaponName);
	void GrenadeInput(bool Pressed);
	void GymMulti(bool Param_Sit, class ASurvivalPlayer_C* Surv, class ABP_TrainingApp_C* Train);
	void GymTrainTravel();
	void HandleContainerEvents(class UJSIContainer_C* Container);
	void HandleJSContainerEvents();
	void HandleJSIEvent();
	void HandleJSIEventsOnGround();
	void HandleLootBoxInventoryItems(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef);
	void HandleMPCToEquipment();
	void HandleShopJSIContEvents();
	void HandleTableJSIContEvents();
	void HasCamp(bool* Has);
	void HasCanister(bool* Param_HasCanister);
	void HasGrenade(bool* Has);
	void HasItem(const class FString& ItemName, bool* Has);
	void HasWeaponOrBroken(bool* Bonus);
	void HealPPEffect();
	void HealPPEffectTimeline__FinishedFunc();
	void HealPPEffectTimeline__UpdateFunc();
	void HeatUpBonfire(class APawn* Param_Player);
	void HiddenInGameCheck(bool HiddenInGame, bool Param_LootPointOpened, bool bLockMovement, bool Param_Crawling);
	void HideCompas();
	void HideHairUnderHelmet(bool Hide);
	void HideMeshesDuringAim(bool bNewOwnerNoSee);
	void HidePlayer(bool Param_PlayerHided);
	void HidePlayerMulticast(bool Param_PlayerHided);
	void HidePlayerServer(bool Param_PlayerHided);
	void HidePlayerWithDelay(bool GPS_);
	void HideRoundProgressBar();
	void HideWeapons(bool Show);
	void HighlightActor();
	void HitMarkerUI(bool Killed);
	void HitPercentUpdate(bool Hit_reg);
	void HouseBoxEntered(class AHouseBox_C* HouseBox);
	void HouseBoxLeaved(class AHouseBox_C* HouseBox);
	void HouseEnter();
	void HouseEntered(class AHouseBox_C* NewBox);
	void HouseEnterEvent__DelegateSignature();
	void HouseExit();
	void HouseLeaved(class AHouseBox_C* HouseBox);
	void HouseLeaveEvent__DelegateSignature();
	void IfShopClose();
	void InCarEvent__DelegateSignature(bool Param_InCar);
	void InclineEvent(double Axis);
	void IncrDeathCounter();
	void IncrFragCounter();
	void IncrKillCounter();
	void InFlatSurface(bool* Value);
	void InfoAboutDamage(class AActor* Target, class FName BoneName, double Damage);
	void InfoAboutDamageOwning(double RealDamage, bool IsHeadshot, bool IsTargetDead);
	void InitialHideWeaponMotionBlur();
	void InitializeFlash(const struct FSFlashInstance& Instance);
	void InitializeWoundComponent(int32 MeshType, TArray<class UMaterialInstanceDynamic*>* OriginalMaterials);
	void InitLocalPlayer();
	void InitUnlocalEquipment();
	void InitVars();
	void InitVOIP();
	void InitWeaponPlaceholder(bool Primary, const struct FFItemInfo& FItemInfo, EPlayerSlots Slot);
	void InitWeaponPlaceholders();
	void InitWP_Multicast(bool Primary, const struct FFItemInfo& FItemInfo, EPlayerSlots Slot);
	void InitWP_Server(bool Primary, const struct FFItemInfo& FItemInfo, EPlayerSlots Slot);
	void InpActEvt_BroadcastToRadio_K2Node_InputActionEvent_28(const struct FKey& Key);
	void InpActEvt_ChangeSitToDriver_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_ChangeSitToPassengerLB_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_ChangeSitToPassengerRB_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_ChangeSitToPassengerRF_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_EquipGPS_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_FreeLook_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_FreeLook_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_OpenInventory_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_OpenJournal_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_PlayerAim_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_PlayerAim_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_PlayerFire_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_PlayerFire_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_PlayerReload_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_PlayerReload_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_TurnLights_K2Node_InputActionEvent_29(const struct FKey& Key);
	void InpActEvt_Unarm_K2Node_InputActionEvent_15(const struct FKey& Key);
	void Interact_K2Node_InputActionEvent_2(const struct FKey& Key);
	void Interact_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_Walk_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Walk_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_WeaponSlot1_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_WeaponSlot2_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_WeaponSlot3_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_0(float AxisValue);
	void Interact(bool NewParam);
	void InteractShop();
	void InteractShopEnd();
	void InteractShopPulse();
	void InvalidateDoOnce();
	void InventoryInitedMult();
	void InventoryInitedServer();
	void InventoryOpenAnimEvent(bool Open_);
	void InventoryOpenAnimEventMulti(bool Open_);
	void InventoryOpenAnimEventServer(bool Open_);
	void InventoryOpenTimeline__FinishedFunc();
	void InventoryOpenTimeline__UpdateFunc();
	void InvSoundMulti(bool Open_, class USkeletalMeshComponent* AttachComponent);
	void InvSoundServer(bool Open_, class USkeletalMeshComponent* AttachComponent);
	void IsBandit_(bool* Param_IsBandit_);
	void IsBeginnerUpdate();
	void IsDead_(bool* Param_IsDead_);
	bool IsEnoughMoney(int32 Sum);
	bool IsEquippedByUID(int32 ItemUID);
	void IsHemorrhage(int32 NumberOfHits, class AActor* DamageCauser, bool RandomApply, bool* Result);
	bool IsInHouse();
	bool IsInputAllowed(bool ExcludeGrounded, bool ExcludeSauna, bool ExcludeRoomEdit, bool InTrainingGym, bool SitBar, bool Vending, bool ChairBar);
	void IsInWater(bool* Param_InWater);
	void IsItemCanBeEquipped(int32 ItemId, bool* Result);
	void IsLocked_(bool* Result);
	void IsPlayer(bool* Param_IsPlayer);
	void IsSpineMontage(bool* Value);
	void IsValidItem(const struct FFItemInfo& Item, bool* Result);
	void IsZombie_(bool* Param_IsZombie_, class APawn** Zombie);
	void ItemDropRequest(class UJSI_Slot_C* ItemRef, const struct FFItemInfo& Param_ItemInfo, int32 Count, class UJSIContainer_C* Container);
	void ItemsChangedInContainer(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotReceiver, class UJSI_Slot_C* SlotDropped, bool SlotDroppedRemoved_);
	void ItemsCombined(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotReceiver, class UJSI_Slot_C* SlotDropped, bool SlotDroppedRemoved);
	void ItemSlotChanged(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, int32 NewIndex, bool Rotated);
	void ItemsOnGroundCombined(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotReceiver, class UJSI_Slot_C* SlotDropped, bool SlotDroppedRemoved_);
	void ItemUsingPlayRate(EItemType ItemType, double* PlayRate);
	void JSAddItem(class AActor* InteractItem, TArray<struct FContainerPickupsInfo>& PickContItems, TArray<struct FContainerPickupsInfo>& PickContData, const struct FFItemInfo& Param_ItemInfo, int32 Param_Index, bool boolBlockStack_, bool* Ad);
	void JSAddItemFromGround(const struct FContainerPickupsInfo& NewPickUp, bool* Result);
	void JSAddItemToSpecificContainer(const struct FFItemInfo& Param_ItemInfo, class UJSIContainer_C* ToContainer, int32 Param_ToSlotIndex, class UJSI_Slot_C* SlotRef);
	void JSDropItem(class UJSI_Slot_C* Item);
	void JSDropItemByInfo(const struct FFItemInfo& Info);
	void JSDropItems(TArray<struct FContainerPickupsInfo>& PickUp_s);
	void JSFillContainer(class UJSIContainer_C* Container, TArray<struct FContainerPickupsInfo>& PickUp_s, bool ClearContainer, TArray<struct FContainerPickupsInfo>* Added, TArray<struct FContainerPickupsInfo>* NotAdded, TArray<struct FContainerPickupsInfo>* Ignored);
	void JSFindContainerID(int32 Uid, int32* ContainerID);
	void JSRefreshInventory(const struct FContainerPickupsInfo& NewPickUp, bool* Result);
	void JSStartEffect(class FName EffectKey, TArray<class UEffect_C*>* Effectt);
	void JSStopEffect__byGroup_(class FName Group);
	void JSUpdateInventory(int32 Uid, int32 Param_Index, int32 ContainerMotherID, bool IsContainer, const struct FFItemInfo& Info, bool* Updated);
	void JSUseItem(class UJSI_Slot_C* Slot, bool Equiped);
	void JSUseItemInInventory(class UJSI_Slot_C* Slot, class UJSIContainer_C* SlotContainer);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void KilledByGrenadeDamageNotificationClient(class UClass* ExplosionClass, class APawn* DamageInstigator);
	void KillPPEffect();
	void KillPPEffectTimeline__FinishedFunc();
	void KillPPEffectTimeline__UpdateFunc();
	void KnockedDown(class APawn* Param_Killer);
	void KnockedDownMulticast(double HitAngle, bool CancelKnockDown, bool Ressurected);
	void LateInteractCancel__DelegateSignature();
	void LateInteractFinish__DelegateSignature();
	void LateInteractStart__DelegateSignature();
	void LevelsLoaded();
	void LimitRotation(double AimYawLimit, double InterpSpeed, const struct FRotator& Rotator, bool Lerp);
	void LimitRotationOnLookingOffset(double YawLimit, const struct FRotator& Rotation, struct FRotator* ExitRotator);
	void LinetraceToHighlightActor(const class UObject* TestObject, bool* HitResult, class AActor** HitActor, class UPrimitiveComponent** HitComponent);
	void LoadCarOwning(const TArray<class FString>& CarName);
	void LoadCarServer(TArray<class FString>& Array);
	void LoadEndGameStat(const TArray<class FString>& Param_StatSave);
	void LoadGameSettings();
	void LoadingScreen();
	void LocalChangeBudget(int32 Sum);
	void LocalHitEvent(const TArray<struct FBPS_DamageInfo>& DmgInfo);
	void LocationPrint(const struct FTransform& NewParam);
	void LookingRotationSync_Server_(const struct FVector2D& Param_LookingRotation);
	void LoopSaveStat();
	void LootDelayBlockEvent();
	void LootDelayBlockFloatCalc();
	void LootDelayBlockTimerClearEvent();
	void LootDelayBlockTimerEvent(double Time);
	void ManualBeginPlay();
	void MaxWalkSpeedChanged_Multicast_(double MaxWalkSpeed);
	void MaxWalkSpeedChanged_Server_(double MaxWalkSpeed);
	void MC_InSauna(bool InSauna);
	void MC_TeleportAt(const struct FVector& NewLocation);
	void MeetNPC(const class FString& NPCName);
	void MissingCarSave__DelegateSignature(TArray<class FString>& MissingCarArray);
	void MissingUpdate();
	void MoneyCycle(int32 Param_MoneyCycle);
	void MouseClickInPlayerInventory(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void MoveInputSync_Multicast_(const struct FVector2D& Param_MoveInput);
	void MoveInputSync_Server_(const struct FVector2D& Param_MoveInput);
	void MovementInputSync_Server_(bool HasMoveInput);
	void MovementModeChanged(EMovementMode NewParam);
	void MoveType_Multi(MovementType::EMovementType MoveType);
	void MoveType_Serv(MovementType::EMovementType MoveType);
	void MovingRotation();
	void MPC_HandleBackpackContainerMPCEvent(class UJSIContainer_C* ContainerRef);
	void MULT_JumpSync();
	void Multi_SetCarAnim(bool Param_InCar, bool Driver, ECarTipe Param_CarTipe, int32 Param_SitIndex);
	void Multi_SyncInclineAxis(float Param_InclineAxisValue);
	void MultiCallAttachCanister(class ABP_Canister_C* Canister);
	void MultiCallDetachCanister();
	void MultiCallIncreaseDurability(class AActor* Param_Vehicle);
	void MultiCallIncreaseFuel(class ABP_Canister_C* Canister, class ABP_RB_Vehicle_C* Param_Vehicle);
	void MultiCallSetFlashlightEnabled(bool NewEnabled);
	void MultiCallTurnDoor(class ABP_Door_C* Door, bool IsOpen);
	void MultiChangeHealth(double Health, class UBPC_PlayerStatsComponent_C* StatComponent, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* HitFrom);
	void MultiDeathRagdoll(double HitAngle, const struct FVector& HitLocation, class FName BoneName);
	void MultiResetPosition();
	void MultiSetCurrentActive(EPlayerSlots Param_CurrentActiveSlot);
	void MultiSetIgnorePawn();
	void MultiTeleport();
	void MultiUnactiveWeapons(class FName PrimaryWeaponSlot, class FName SecondaryWeaponSlot, class FName PistolWeaponSlot, class FName Param_MeleeWeaponSlot, bool IgnoreLocal);
	void NegativeEffectClient(const EUNegativeEffectType NegativeEffects);
	void NewFunction_0(class ABP_Weapon_C* WeaponRef);
	void NomoneyGym();
	void NotifyInventoryUpdate();
	void NotifyItemUsing();
	void NotifyPlayerDead();
	void NotifyQuestEvent(const class FString& Quest_event);
	void OnAcceptInvitation(int32 SquadId);
	void OnAcceptTrade(class ASurvivalPlayer_C* TradeOfferer);
	void OnAiming__DelegateSignature(bool Aim);
	void OnBackPackChanged__DelegateSignature(class UJSIContainer_C* Backpack);
	void OnBeginInteract(class APawn* Param_Player);
	void OnBlendOut_1414204D48D5B2CBC491D6BE41DD6D38(class FName NotifyName);
	void OnBlendOut_1A48E0F54D3604F7F2269EB6140AB695(class FName NotifyName);
	void OnBlendOut_1BFF31C440B74DD72A36D4830CDE6F82(class FName NotifyName);
	void OnBlendOut_36DECDC24F3488802CADFBB647ACDF21(class FName NotifyName);
	void OnBlendOut_41F0B058443240805DDF4082AA1C084E(class FName NotifyName);
	void OnBlendOut_4486567545FEEDDDC96AEA9DB8839CCD(class FName NotifyName);
	void OnBlendOut_4C6CB7084C1D71CB46E50C84C5E9872E(class FName NotifyName);
	void OnBlendOut_4EFC55D740DA054494F6FAA05F35567B(class FName NotifyName);
	void OnBlendOut_81739B6F41B7A1B1F11B54B7017C38A5(class FName NotifyName);
	void OnBlendOut_833B381D46C11C255A1C38B33DD241E6(class FName NotifyName);
	void OnBlendOut_9AEE572044B59192DA3407A70F2DBC43(class FName NotifyName);
	void OnBlendOut_9E3E90B644884EAEDE196AB60CDC9F84(class FName NotifyName);
	void OnBlendOut_BD6442C748C03BF872A3BC8FEB26E38C(class FName NotifyName);
	void OnBlendOut_DC75E00748713B632BAC18B8C1F7D712(class FName NotifyName);
	void OnBlendOut_DD01F4BB4CF7056905366AA4CCA50835(class FName NotifyName);
	void OnBlendOut_E6F9F3CA446308C32E9E1FA24C33AD00(class FName NotifyName);
	void OnBlendOut_EECCE00741DCDDF6605EC5B0ED9F0A45(class FName NotifyName);
	void OnBlendOut_FCCF662C425749BAADE9A6870DC3D002(class FName NotifyName);
	void OnBlockOpenMenu__DelegateSignature(bool Block_);
	void OnCarSold__DelegateSignature();
	void OnChangeAmmoClass__DelegateSignature(bool bStart);
	void OnChangeArmor(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangeBackpack(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangeEquipment__General_(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangeHelmet(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangePants(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangePistolWeapon(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangePocket(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangePrimaryWeapon(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangeProtectiveCase(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangeSecondaryWeapon(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnChangeTacticalRig(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnCharLoaded_Event();
	void OnClosedSlidesTutorial();
	void OnCloseTabsWindowsFromPC();
	void OnCompassStateChanged__DelegateSignature();
	void OnCompleted_1414204D48D5B2CBC491D6BE41DD6D38(class FName NotifyName);
	void OnCompleted_1A48E0F54D3604F7F2269EB6140AB695(class FName NotifyName);
	void OnCompleted_1BFF31C440B74DD72A36D4830CDE6F82(class FName NotifyName);
	void OnCompleted_36DECDC24F3488802CADFBB647ACDF21(class FName NotifyName);
	void OnCompleted_41F0B058443240805DDF4082AA1C084E(class FName NotifyName);
	void OnCompleted_4486567545FEEDDDC96AEA9DB8839CCD(class FName NotifyName);
	void OnCompleted_4C6CB7084C1D71CB46E50C84C5E9872E(class FName NotifyName);
	void OnCompleted_4EFC55D740DA054494F6FAA05F35567B(class FName NotifyName);
	void OnCompleted_81739B6F41B7A1B1F11B54B7017C38A5(class FName NotifyName);
	void OnCompleted_833B381D46C11C255A1C38B33DD241E6(class FName NotifyName);
	void OnCompleted_9AEE572044B59192DA3407A70F2DBC43(class FName NotifyName);
	void OnCompleted_9E3E90B644884EAEDE196AB60CDC9F84(class FName NotifyName);
	void OnCompleted_BD6442C748C03BF872A3BC8FEB26E38C(class FName NotifyName);
	void OnCompleted_DC75E00748713B632BAC18B8C1F7D712(class FName NotifyName);
	void OnCompleted_DD01F4BB4CF7056905366AA4CCA50835(class FName NotifyName);
	void OnCompleted_E6F9F3CA446308C32E9E1FA24C33AD00(class FName NotifyName);
	void OnCompleted_EECCE00741DCDDF6605EC5B0ED9F0A45(class FName NotifyName);
	void OnCompleted_FCCF662C425749BAADE9A6870DC3D002(class FName NotifyName);
	void OnContainerAction(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef, int32 Param_ToSlotIndex, bool DroppedRotated_);
	void OnContainerSlotDoubleClick(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void OnDeath__DelegateSignature();
	void OnDeathTimerEnd(EWE_NewDeathScreenState Param_RessurectPlace);
	void OnDeclineInvitation(const int32& Key);
	void OnDirectionChange(int32 Param_Direction);
	void OnDiscountUpdated__DelegateSignature();
	void OnEquipOrAddToPocketFromMPC(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef, int32 Param_ToSlotIndex, bool Rotated_, bool RightMouseButton);
	void OnExitBar__DelegateSignature(int32 PlaceIndex);
	void OnFinishFood__DelegateSignature(int32 Param_Index);
	void OnFocused(class APawn* Param_Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* Param_InteractType, double* Param_LateTime);
	void OnGPSStateChanged__DelegateSignature();
	void OnGymExit__DelegateSignature();
	void OnHomeSold__DelegateSignature();
	void OnInCarChanged__DelegateSignature();
	void OnInteract(class APawn* Param_Player);
	void OnInteract2(class APawn* Param_Player);
	void OnInteract3(class APawn* Param_Player);
	void OnInteractVehicle(class APawn* Param_Player, int32 Param_SitIndex, bool SkipAnimation);
	void OnInterrupted_1414204D48D5B2CBC491D6BE41DD6D38(class FName NotifyName);
	void OnInterrupted_1A48E0F54D3604F7F2269EB6140AB695(class FName NotifyName);
	void OnInterrupted_1BFF31C440B74DD72A36D4830CDE6F82(class FName NotifyName);
	void OnInterrupted_36DECDC24F3488802CADFBB647ACDF21(class FName NotifyName);
	void OnInterrupted_41F0B058443240805DDF4082AA1C084E(class FName NotifyName);
	void OnInterrupted_4486567545FEEDDDC96AEA9DB8839CCD(class FName NotifyName);
	void OnInterrupted_4C6CB7084C1D71CB46E50C84C5E9872E(class FName NotifyName);
	void OnInterrupted_4EFC55D740DA054494F6FAA05F35567B(class FName NotifyName);
	void OnInterrupted_81739B6F41B7A1B1F11B54B7017C38A5(class FName NotifyName);
	void OnInterrupted_833B381D46C11C255A1C38B33DD241E6(class FName NotifyName);
	void OnInterrupted_9AEE572044B59192DA3407A70F2DBC43(class FName NotifyName);
	void OnInterrupted_9E3E90B644884EAEDE196AB60CDC9F84(class FName NotifyName);
	void OnInterrupted_BD6442C748C03BF872A3BC8FEB26E38C(class FName NotifyName);
	void OnInterrupted_DC75E00748713B632BAC18B8C1F7D712(class FName NotifyName);
	void OnInterrupted_DD01F4BB4CF7056905366AA4CCA50835(class FName NotifyName);
	void OnInterrupted_E6F9F3CA446308C32E9E1FA24C33AD00(class FName NotifyName);
	void OnInterrupted_EECCE00741DCDDF6605EC5B0ED9F0A45(class FName NotifyName);
	void OnInterrupted_FCCF662C425749BAADE9A6870DC3D002(class FName NotifyName);
	void OnInventoryContentChanged(bool WithoutDelay);
	void OnInvite(class UObject* Param_Inviter);
	void OnInviteHome(class UObject* Param_Inviter);
	void OnItemAddedToContainer(class UJSIContainer_C* From, class UJSIContainer_C* To, class UJSI_Slot_C* FromSlotRef, class UJSI_Slot_C* ToSlotRef, bool ToEmptySlot_, bool MovedAll_);
	void OnItemSlotChanged(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, int32 NewIndex, bool Rotated);
	void OnKnockdownStart__DelegateSignature();
	void OnKnockdownStart_Event();
	void OnLevelLoaded(class FName LevelName);
	void OnLevelUnloaded(class FName LevelName);
	void OnLoaded_10A6DDA7453F72F622B3FBBCEA3CBEEF(TSubclassOf<class UObject> Loaded);
	void OnLoaded_17617C814C4065CE1B39D5951D04746E(class UObject* Loaded);
	void OnLoaded_23D190774BE7442EE9A890A468F59077(class UObject* Loaded);
	void OnLoaded_23ECBC7D460CD16AE7C00CBB0F10F506(class UObject* Loaded);
	void OnLoaded_41937A594715D1D529A1AA8CE3095ED6(TSubclassOf<class UObject> Loaded);
	void OnLoaded_4506C7EF4C0B30B0F17B0D98CB8CFA4A(class UObject* Loaded);
	void OnLoaded_47F1905546A9AAA4586355AB6B502922(class UObject* Loaded);
	void OnLoaded_4E7F2B5448E6D118F9FE60B85CC1F40B(class UObject* Loaded);
	void OnLoaded_500F295F4DF4FD2EC488138B070B5777(class UObject* Loaded);
	void OnLoaded_55EB9A624CA08E69230E14B21112EA18(class UObject* Loaded);
	void OnLoaded_5AE14A1545C1C842FFFB45BFF7D8E764(class UObject* Loaded);
	void OnLoaded_5CD9B23A43AB48516BD1F5B66ABD36D3(class UObject* Loaded);
	void OnLoaded_810F71654DB385D40EF73499A75D748E(class UObject* Loaded);
	void OnLoaded_92C6BAF64C7B420C867441B910C4243E(class UObject* Loaded);
	void OnLoaded_B15FAC164A153822688EA58C4EC998CD(class UObject* Loaded);
	void OnLoaded_B232A1334DA1D0793B230AA860BD28A5(class UObject* Loaded);
	void OnLoaded_B80A924342535454DCA1F4B4BA49815C(class UObject* Loaded);
	void OnLoaded_D236227944CBCDE4D96753B70B28658A(class UObject* Loaded);
	void OnLoaded_D6FB4F9A45BFCCA8E8B708ACB823659C(class UObject* Loaded);
	void OnLoaded_E7B4E5A94ED38731D0814885C2AB1506(class UObject* Loaded);
	void OnLoaded_E97B583D48429BEB6D397EB253297F35(TSubclassOf<class UObject> Loaded);
	void OnLoaded_EE6454EC4657EC853CFECC88801FF4B2(class UObject* Loaded);
	void OnLoaded_EF1B48F349DD6E05CC624199DEAF4E2D(class UObject* Loaded);
	void OnLoaded_F84F590E47EE940402D035984C86398A(class UObject* Loaded);
	void OnLoadHouse__DelegateSignature();
	void OnLoadStats__DelegateSignature();
	void OnLoanPaid__DelegateSignature(int32 PaidMoney);
	void OnLocalInteract(class APawn* Param_Player);
	void OnLostFocus(class APawn* Param_Player);
	void OnMeetNPC__DelegateSignature(TArray<class FString>& FamiliarityNPS);
	void OnMPCToBackpackContainer(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef, int32 Param_ToSlotIndex, bool Rotated_, bool RightMouseButton);
	void OnMWSlot(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* SlotRef, bool Equipped_, bool ToPockets_);
	void OnNotifyBegin_1414204D48D5B2CBC491D6BE41DD6D38(class FName NotifyName);
	void OnNotifyBegin_1A48E0F54D3604F7F2269EB6140AB695(class FName NotifyName);
	void OnNotifyBegin_1BFF31C440B74DD72A36D4830CDE6F82(class FName NotifyName);
	void OnNotifyBegin_36DECDC24F3488802CADFBB647ACDF21(class FName NotifyName);
	void OnNotifyBegin_41F0B058443240805DDF4082AA1C084E(class FName NotifyName);
	void OnNotifyBegin_4486567545FEEDDDC96AEA9DB8839CCD(class FName NotifyName);
	void OnNotifyBegin_4C6CB7084C1D71CB46E50C84C5E9872E(class FName NotifyName);
	void OnNotifyBegin_4EFC55D740DA054494F6FAA05F35567B(class FName NotifyName);
	void OnNotifyBegin_81739B6F41B7A1B1F11B54B7017C38A5(class FName NotifyName);
	void OnNotifyBegin_833B381D46C11C255A1C38B33DD241E6(class FName NotifyName);
	void OnNotifyBegin_9AEE572044B59192DA3407A70F2DBC43(class FName NotifyName);
	void OnNotifyBegin_9E3E90B644884EAEDE196AB60CDC9F84(class FName NotifyName);
	void OnNotifyBegin_BD6442C748C03BF872A3BC8FEB26E38C(class FName NotifyName);
	void OnNotifyBegin_DC75E00748713B632BAC18B8C1F7D712(class FName NotifyName);
	void OnNotifyBegin_DD01F4BB4CF7056905366AA4CCA50835(class FName NotifyName);
	void OnNotifyBegin_E6F9F3CA446308C32E9E1FA24C33AD00(class FName NotifyName);
	void OnNotifyBegin_EECCE00741DCDDF6605EC5B0ED9F0A45(class FName NotifyName);
	void OnNotifyBegin_FCCF662C425749BAADE9A6870DC3D002(class FName NotifyName);
	void OnNotifyEnd_1414204D48D5B2CBC491D6BE41DD6D38(class FName NotifyName);
	void OnNotifyEnd_1A48E0F54D3604F7F2269EB6140AB695(class FName NotifyName);
	void OnNotifyEnd_1BFF31C440B74DD72A36D4830CDE6F82(class FName NotifyName);
	void OnNotifyEnd_36DECDC24F3488802CADFBB647ACDF21(class FName NotifyName);
	void OnNotifyEnd_41F0B058443240805DDF4082AA1C084E(class FName NotifyName);
	void OnNotifyEnd_4486567545FEEDDDC96AEA9DB8839CCD(class FName NotifyName);
	void OnNotifyEnd_4C6CB7084C1D71CB46E50C84C5E9872E(class FName NotifyName);
	void OnNotifyEnd_4EFC55D740DA054494F6FAA05F35567B(class FName NotifyName);
	void OnNotifyEnd_81739B6F41B7A1B1F11B54B7017C38A5(class FName NotifyName);
	void OnNotifyEnd_833B381D46C11C255A1C38B33DD241E6(class FName NotifyName);
	void OnNotifyEnd_9AEE572044B59192DA3407A70F2DBC43(class FName NotifyName);
	void OnNotifyEnd_9E3E90B644884EAEDE196AB60CDC9F84(class FName NotifyName);
	void OnNotifyEnd_BD6442C748C03BF872A3BC8FEB26E38C(class FName NotifyName);
	void OnNotifyEnd_DC75E00748713B632BAC18B8C1F7D712(class FName NotifyName);
	void OnNotifyEnd_DD01F4BB4CF7056905366AA4CCA50835(class FName NotifyName);
	void OnNotifyEnd_E6F9F3CA446308C32E9E1FA24C33AD00(class FName NotifyName);
	void OnNotifyEnd_EECCE00741DCDDF6605EC5B0ED9F0A45(class FName NotifyName);
	void OnNotifyEnd_FCCF662C425749BAADE9A6870DC3D002(class FName NotifyName);
	void OnPlayerDeadClient(const struct FVector& Location, const struct FVector& Impulse, class FName BoneName, double HitAngle, class APawn* Param_Killer);
	void OnPlayerExecuted(class ASurvivalPlayer_C* Param_Killer);
	void OnPocketChanged__DelegateSignature(class UJSIContainer_C* Pocket);
	void OnRep_ArmorName();
	void OnRep_As_BP_Training_App();
	void OnRep_BackpackName();
	void OnRep_BarParentCall();
	void OnRep_bCompasEquip();
	void OnRep_CampingActor();
	void OnRep_CompasState();
	void OnRep_DeadBody();
	void OnRep_DeadBodyV2();
	void OnRep_GPSEquip();
	void OnRep_HelmetName();
	void OnRep_Hit_Bone_Name();
	void OnRep_Hit_Impulse();
	void OnRep_Hit_Location();
	void OnRep_InCar();
	void OnRep_Is_Beginner();
	void OnRep_IsFemale();
	void OnRep_Lootpoint();
	void OnRep_OuterwearName();
	void OnRep_PantsName();
	void OnRep_Primary_Weapon_Slot();
	void OnRep_Ragdoll();
	void OnRep_RPoints();
	void OnRep_Secondary_Weapon_Slot();
	void OnRep_Vehicle();
	void OnRep_WeaponName();
	void OnRep_WeaponPlaceholderShadow();
	void OnRootObjCollectionActivated(class UBP_Objective_C* RootObjectiveCollection);
	void OnRPZoneInteracted_Multi(const struct FF_RPZoneInfo& RPZoneStruct);
	void OnSaveHouse__DelegateSignature(const class FString& Param_HouseName);
	void OnSaveStats__DelegateSignature(TArray<class FString>& Param_StatSave);
	void OnSeen(class APawn* Param_Player);
	void OnSetAliases__DelegateSignature(TArray<class FString>& Param_Aliases);
	void OnSetCarCount__DelegateSignature(TArray<class FString>& PlayerCars);
	void OnSetHomeCount__DelegateSignature(TArray<class FString>& PlayerHome);
	void OnSlotDoubleClick(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void OnSprint__DelegateSignature(bool Sprint);
	void OnSquadCheckComplete();
	void OnStandRotation();
	void OnStopInteract(class APawn* Param_Player);
	void OnSurrender(bool Animed, bool DieInCarExplosion);
	void OnTabsClosed();
	void OnTrade(class ASurvivalPlayer_C* TradeOfferer);
	void OnUpdateDeathScreenState(EWE_NewDeathScreenState NewScreenState);
	void OpenDoorRPC(class ABP_Door_C* Door, bool IsOpen);
	void OpenInventoryFromCar();
	void OpenInventoryManually();
	void OpenInventoryRemotely(class ASurvivalPlayer_C* SurvivalPlayer);
	void OpenKeyDoorLocal(const class FString& KeyID, class ABP_Door_C* KeyDoor);
	void OpenKeyDoorMulti(bool bHasKey, class ABP_Door_C* KeyDoor);
	void OpenKeyDoorServer(bool bHasKey, class ABP_Door_C* KeyDoor);
	void OpenLootRPC(class ALootPoint_C* Param_LootPoint);
	void OpenMenu(class AActor* Hightlight);
	void OpenMenuV(class AActor* Hightlight);
	void OpenTrailerInventory();
	void ParserSave(class UCharacterCreateSave_C* Save, struct FS_SaveStructure* Struct);
	void PauseLootpointDestroy(class ALootPoint_C* Param_LootPoint);
	void PayLoan_Serv(int32 Money);
	void PerexodCompas();
	void PerexodGPS();
	void PickupEnvItemMinusclient(class ABP_DefaultPIckableEnv_C* EnvItem, int32 Uid);
	void PickupEnvItemMinusserver(class ABP_DefaultPIckableEnv_C* EnvItem);
	void PickupEnvStatus(class ABP_DefaultPIckableEnv_C* EnvItem, bool Added);
	void PlaceItem(const struct FSBP_ItemsData& Item);
	void PlayAnimMenuMulti();
	void PlayAnimMenuServer();
	void PlayCameraShake();
	void PlayerAddItem(const struct FFItemInfo& Param_ItemInfo, class UWBP_AttachmentCell_C* ActiveCell, bool* Added);
	void PlayerCanisterAction(bool Attach, class ABP_Canister_C* Canister);
	void PlayerGetMesh(class USkeletalMeshComponent** Param_Mesh);
	void PlayerItemCountByName(const class FString& ItemName, int32* Count);
	void PlayerLeft(class UObject* Object);
	void PlayerMoveAndRotate(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void PlayEventFMODOWn(class UFMODEvent* Event);
	void PlayHeadHitSound();
	void PlayMontage(class UAnimMontage* AnimMontage, bool IsHipfire, bool Reloading, double PlayRate, double StartTime);
	void PlaySoundMulti(class UFMODEvent* FMod, class USceneComponent* Attach_to, class ASurvivalPlayer_V2_C* Actor, class ASurvivalPlayer_V2_C* Causer);
	void PlaySoundServer(class UFMODEvent* FMod, class USceneComponent* Attach_to, class ASurvivalPlayer_V2_C* Causer);
	void PressReloadWeapon__DelegateSignature();
	void PrintContainer();
	void PrintDebug__Items_(double Duration);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceivePossessed(class AController* NewController);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceiveVoice(class ASurvivalPlayer_C* Param_Player, const TArray<uint8>& CompressedVoiceData, bool Radio);
	void Recovering();
	void RefuelC();
	void ReInit();
	void ReinitLevelStreamer();
	void ReloadC(E_TrainStatType StatTrain);
	void ReloadEnded();
	void ReloadEvent_Multicast_(bool bIsFastReloadMulti);
	void ReloadEvent_Server_(bool bIsFastReloadMulti);
	void ReloadEvent__DelegateSignature(double ReloadDuration);
	void ReloadEventLocaly__DelegateSignature();
	void Remove_from_Container(class UJSI_Slot_C* Slot);
	void Remove_Index_Data(int32 Param_Index);
	void Remove_Index_Items(int32 Param_Index);
	void RemoveAllItems();
	void RemoveFPCompas();
	void RemoveFPGPS();
	void RemoveInventoryItemByUID(int32 Uid, bool OnlyItem, bool* ItemRemoved);
	void RemoveItemFromPlayerContainer(class UJSI_Slot_C* Item);
	void RemovePlayerListener(TScriptInterface<class ISurvivalPlayerListener_C> Listener);
	void RemovePlayerStatus_Owning(const class FString& Param_Aliases);
	void RemovePlayerStatus_Serv(const class FString& Param_Aliases);
	void RemoveQuestIcons(bool ForceUpdate);
	void ReplicateCarInfoToServ(const TMap<class FString, E_CarStatus>& Param_CarSaveMap);
	void RequestContainerContent();
	void RequestShopContent();
	void RequestUID(bool ForSlot);
	void Reset_Timer_For_Tip();
	void Reset_Tips_Timer();
	void ResetInteract();
	void ResetItemUsingAnim();
	void ResetParamsAfterTrade();
	void Resize_Main_Container(int32 Columns, int32 Rows);
	void Ressurect(const struct FVector& Param_Pos, const struct FRotator& Param_Rot, EWE_NewDeathScreenState Param_RessurectPlace);
	struct FVector RessurectPlace(EWE_NewDeathScreenState Where, class APlayerStart** OutItem, struct FRotator* Return_Value_Rotation);
	void RessurectServer();
	void RestoreDefaultMaterials();
	void RestoreDefaultRot_FreeAim();
	void RestoreItems();
	void ResurrectAtLocation(const struct FVector& Location, const struct FRotator& Param_Rot, EWE_NewDeathScreenState Param_RessurectPlace);
	void ResurrectServerAtLocation(const struct FVector& Location, const struct FRotator& Param_Rot, EWE_NewDeathScreenState Param_RessurectPlace);
	void ReverseCtiticalDamage__FinishedFunc();
	void ReverseCtiticalDamage__UpdateFunc();
	void Revive();
	void ReviveCount();
	void ReviveLocal(class ASurvivalPlayer_C* Ref);
	void RevivingStop(class ASurvivalPlayer_C* Param_Reviver);
	void RevivingStopMulti(class ASurvivalPlayer_C* Param_Reviver);
	void RightButtonMouseDown(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void RightClickOnGound(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void RightMouseClickEquipped(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void RoomInsidesSave__DelegateSignature(TArray<class FString>& RoomInsides);
	void Run_Lockpicking();
	void SaveEndGameStat();
	void SaveGameSettings();
	void SaveLootWhenLeave_Client(double TimeToDestroyDummyCharacter);
	void SaveLootWhenLeave_Server(double TimeToDestroyDummyCharacter, const TArray<struct FDropItemEntry>& Loot);
	void SaveMeshes();
	void SavePlayerLocation();
	void SavePlayerStats();
	void SaveSnapshot();
	void SeatAsPassanger();
	void SelectWeaponSlot(int32 Slot);
	void SelfMinushealingPressed();
	void SelfMinushealingReleased();
	void SelfMinushealingTimerHandler();
	void SellCar_Owning(const class FString& CarName);
	void SellCar_Serv(const class FString& CarName);
	void SellHome_Serv(const class FString& HomeName);
	void SellHomeOwning(const class FString& HomeName);
	void SellHouseOwning(const class FString& Param_HouseName);
	void SellHouseServ(const class FString& Param_HouseName);
	void SellItems(const struct FContainerPickupsInfo& Item);
	void SendDamage(const TArray<struct FBPS_DamageInfo>& DamageInfo);
	void SendVoiceData(bool Param_UseRadio, const TArray<uint8>& CompressedVoiceData);
	void ServPlusHealth(double ChangedHealth, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* HitFrom);
	void Serv_InSauna(bool InSauna);
	void SERV_JumpSync();
	void Serv_SetCarAnim(bool Param_InCar, bool Driver, ECarTipe Param_CarTipe, int32 Param_SitIndex);
	void Serv_SetFemale();
	void Serv_SyncInclineAxis(float Param_InclineAxisValue);
	void Serv_TeleportAt(const struct FVector& NewLocation);
	void ServChangeBudget(int32 Sum);
	void ServDropItems(const TArray<struct FDropItemEntry>& ItemList);
	void Server_deleteFromContainer(int32 ItemUID, class AMPMainContainerBox_C* MpContainerRef, bool IsContainer_, bool Param_Shop, int32 ItemsLeft);
	void Server_deleteFromContainerAddToPlayer(int32 ItemUID, class AMPMainContainerBox_C* MpContainerRef, bool IsContainer_, bool Param_Shop, int32 ItemsLeft);
	void Server_DisableCloseDoor(class ALootPoint_C* Param_LootPoint);
	void SERVER_MPContainerMoveItem(int32 ContainerUID, int32 ItemSlotIndex, int32 Param_ToSlotIndex, int32 UnqiueID, bool Rotated_, class AMPMainContainerBox_C* MpContainerRef, bool IsContainer);
	void SERVER_RequestContainerData(class AMPMainContainerBox_C* Container, const struct FS_LootChanceModifier& LootChanceMod, TArray<class FString>& Param_Quest_Items, TArray<int32>& Param_Quest_Items_Counts);
	void ServerCallAttachCanister(class ABP_Canister_C* Canister);
	void ServerCallCloseLoot(class ALootPoint_C* Param_LootPoint);
	void ServerCallDetachCanister();
	void ServerCallExitVehicle(class AActor* Param_Vehicle, bool SkipAnimation, bool SkipExitOnLocation, bool IgnoreSpeedLimits);
	void ServerCallIncreaseDurability(class AActor* Param_Vehicle);
	void ServerCallIncreaseFuel(class ABP_RB_Vehicle_C* Param_Vehicle);
	void ServerCallInteract(class AActor* InteractiveActor);
	void ServerCallInteractVehicle(class UObject* InteractiveActor, int32 Param_SitIndex, bool SkipAnimation);
	void ServerCallInvite(class ASurvivalPlayer_C* OtherPlayer);
	void ServerCallInviteToHome(class APS_TDB_C* OtherPlayer);
	void ServerCallOpenLoot(class ALootPoint_C* Param_LootPoint);
	void ServerCallSetFlashlightEnabled(bool NewEnabled);
	void ServerCallTrade(class ASurvivalPlayer_C* OtherPlayer);
	void ServerCallTurnDoor(class ABP_Door_C* Door, bool IsOpen);
	void ServerConfigureUniqItem(class AA_Item_C* Item);
	void ServerContainerBoxClosed(class AMPMainContainerBox_C* FocusedContainer);
	void ServerDealDamageToZombie(EBPE_Weapon_Type WeaponTyp, const class AZombie_C*& Zombie, double BaseDamag, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo);
	void ServerDeleteAndAddItem(bool DeleteIsContainer, int32 DeleteItemUID, class AMPMainContainerBox_C* DeleteMPContainerRef, const struct FContainerPickupsInfo& AddItemPInfo, int32 AddToSlotIndex, TArray<struct FContainerPickupsInfo>& AddContainerData, TArray<struct FContainerPickupsInfo>& AddContainerItems, bool AddIsContainer);
	void ServerItemAddedToContainer(class AMPMainContainerBox_C* Target, int32 Param_ToSlotIndex, const struct FContainerPickupsInfo& ItemPInfo, TArray<struct FContainerPickupsInfo>& ContainerData, TArray<struct FContainerPickupsInfo>& Param_ContainerItems);
	void ServerItemsAddedToContainer(class AMPMainContainerBox_C* Target, const TArray<int32>& SlotIndex, const TArray<struct FContainerPickupsInfo>& ItemPInfo);
	void ServerItemUpdateInContainer(class AMPMainContainerBox_C* Target, const struct FContainerPickupsInfo& ItemPInfo);
	void ServerMoveItemContainer(int32 Param_ToSlotIndex, int32 ItemUID, int32 ToContainerUID, bool IsContainer, class AMPMainContainerBox_C* Container, bool Param_Shop);
	void ServerOnBeginInteract(class AActor* InteractedActor);
	void ServerRefillGasVehicle(class UObject* InteractiveActor);
	void ServerRepairVehicle(class UObject* InteractiveActor);
	void ServerRequestShopContent(class AMPMainContainerBox_C* Container);
	void ServerSetCurrentActive(EPlayerSlots Param_CurrentActiveSlot);
	void ServerUnactiveWeapons(class FName PrimaryWeaponSlot, class FName SecondaryWeaponSlot, class FName PistolWeaponSlot, class FName Param_MeleeWeaponSlot, bool IgnoreLocal);
	void ServResetPosition();
	void ServSetCanHoldWeapon(bool Param_CanHoldWeapon);
	void ServSetDamageable(bool On);
	void ServSetIgnorePawn();
	void ServSyncInvStash(class AInventoryStash_C* InvStash, bool InvFetched, const TArray<struct FDefaultItemInfo>& FetchedItems);
	void Set_Default_Suit_from_Create(class UInventoryWorker_C* Ref);
	void Set_Hit_Percentage(bool HitReg);
	void Set_Struct_Save(const struct FS_SaveStructure& Struct);
	void Set_Timer(bool Condition);
	void Set_Visible_and_Collision(bool IsActive);
	void Set3DWidgetVisibility(bool Visible);
	void SetActiveWeaponSlot(EPlayerSlots Slot);
	void SetAiming(bool IsAim, bool FPS, bool NotReplicate);
	void SetAIMPPPArameters(double BlurDist, double BlurRadius, double Density);
	void SetAnimInWater(bool Param_InWater);
	void SetAttachementsVisibility(bool bNewVisibility);
	void SetAttachments(class AWeaponPlaceholder_C* WeaponPlaceholder, const struct FFItemInfo& FItemInfo);
	void SetCameraCompas();
	void SetCameraGPS();
	void SetCameraLockOnTarget(const struct FGameplayTag& CameraModeTag);
	void SetCapsuleOrient();
	void SetCarstStat(TArray<class FString>& Stats);
	void SetCharacterRotation(const struct FRotator& TargetRotation_Yaw, bool Interp, bool Param_IsShooting);
	void SetCheckedForSpace(bool EnoughSpace);
	void SetCraftState(ECraftState State);
	void SetCrawling(bool Param_Crawling);
	void SetCrawlingMulticast(bool Param_Crawling);
	void SetCrawlingServer(bool Param_Crawling);
	void SetCurrentPlaceholder(EPlayerSlots Slot);
	void SetCusomizeFace();
	void SetCustomizeFace2();
	void SetDamageable(bool Damageable);
	void SetDamageableServ(bool Damageable);
	void SetDefaultClothes(class FString* Out, class FString* Pan);
	void SetDieWithAnim(bool Burnt_);
	void SetDurabilityItem(int32 ItemId, int32 ItemServerID, double NewDurability);
	void SetEnableSmoothSync(bool NewEnable, bool* Success);
	void SetEnableTrails(bool Enable);
	void SetEndgameStatFromSave(const TArray<int64>& EGSSave);
	void SetEquipmentTier(EquipmentSlot EquipmentSlot, class FName EquipmentName, int32 Tier);
	void SetEquipStatusBySlot(EquipmentSlot Slot, bool Value);
	void SetGPSPage(int32 InputPin, bool* bPageChanged);
	void SetIgnorePawn();
	void SetInventoryInited();
	void SetInventoryInitedLocal();
	void SetIsInElevator(bool Param_bIsInElevator);
	void SetIsInHouse(bool Param_IsInHouseBool);
	void SetItemUsingAnim(class UAnimSequence* Anim, bool SpecialItem, bool CanMove, bool HasStandAnim, bool WepNotHiding);
	void SetLooting(bool Looting, double LootHeight);
	void SetLootingMulticast(bool Looting, double LootHeight);
	void SetMoveType(MovementType::EMovementType MoveType);
	void SetNaked(bool IsNaked);
	void SetParamsBeforeTrade(const TArray<struct FFItemInfo>& Param_TradeItems);
	void SetPlayerCollisionInCar(bool NewEnable);
	void SetPlayerListener(TScriptInterface<class ISurvivalPlayerListener_C> Listener);
	void SetQuestEventListener(TScriptInterface<class IQuestEventListener_C> Listener);
	void SetReadyToTrade_Server(const TArray<struct FFItemInfo>& InputPin);
	void SetReloadState(bool State);
	void SetRPointsCount__DelegateSignature(int32 Param_RPoints);
	void SetSaveCarsStats(TArray<class FString>& Stats);
	void SetSaveCharacterOnOwningClient(class ASurvivalPlayer_C* Character, const struct FS_SaveStructure& Param_GI_Character_Save_Ref);
	void SetSensitivityMultiplier();
	void SetShopNow(bool Param_ShopNow);
	void SetSkeletalCloth(class USkinnedMeshComponent* SkeletalMesh, TSoftObjectPtr<class USkeletalMesh> NewMesh);
	void SetSpeedByWeapon(class FName RowName);
	void SetSprint(bool SprintActive);
	void SetStance(EStanceState NewStance);
	void SetTraderOnServer(class ASurvivalPlayer_C* Param_Trader);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void SetUnactiveForAllWeapons();
	void SetUnactiveWeaponsMesh(class FName PrimaryWeaponSlot, class FName SecondaryWeaponSlot, class FName PistolWeaponSlot, class FName Param_MeleeWeaponSlot);
	void SetUsingItem(bool UsingItem, bool CanMove, bool NotWepHide);
	void SetWeapon(class FName Param_WeaponName, class UJSI_Slot_C* ItemState, EPlayerSlots CurrentActive, const struct FFItemInfo& Weapon_ItemInfo, bool WithoutAnimation);
	void SetWeaponSlotMesh(class UPrimitiveComponent* PhysicsSM, class USceneComponent* Root, class USceneComponent* WeaponPoint, class AWeaponPlaceholder_C* WeaponPlaceholder);
	void SetWeaponType(EBPE_Weapon_Type Param_WeaponType);
	void ShootEvent__DelegateSignature();
	void ShootHitEvent__DelegateSignature();
	void ShootNoiseForAI();
	void ShopCameraShake();
	void ShopContOnContUnhandled(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef, int32 Param_ToSlotIndex, bool Rotated_, bool RightMouseButton);
	void ShopContToCont(class UJSIContainer_C* From, class UJSIContainer_C* To, class UJSI_Slot_C* FromSlotRef, class UJSI_Slot_C* ToSlotRef, bool ToEmptySlot_, bool MovedAll_);
	void ShopDoubleClick(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void ShopEnd__DelegateSignature();
	void ShopRotChanged(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, int32 NewIndex, bool Rotated);
	void ShopStart__DelegateSignature();
	void ShotgunReloadEvent(bool BulletIn_);
	void ShotgunReloadMulti(bool BulletIn);
	void ShotgunZombieDamage(TArray<struct FBPS_DamageInfo>& DamageInfoArray);
	void ShowBigText(const class FString& Text, const struct FVector& NewLocation);
	void ShowBunkerMarks(ESlateVisibility InVisibility);
	void ShowItemsList();
	void ShowSimpleText(const class FString& Text);
	void ShowSimpleUIText(const class FString& String);
	void ShowWPFakeShadow(bool NewCastHiddenShadow);
	void SimpleCreateDynMat(class USkeletalMeshComponent* SkeletalMesh, TArray<class UMaterialInstanceDynamic*>& Materials);
	void SitOnBarLocal(class AActor* Hightlight, bool Param_Sit);
	void SitOnBarServer(class AActor* Hightlight, bool Param_Sit);
	void SitOnChairLocal(class AActor* Hightlight, bool Param_Sit);
	void SitOnChairServer(class AActor* Hightlight, bool Param_Sit);
	void SitOnGymServer(class AActor* Hightlight, bool Param_Sit);
	void SkipDamageAnim();
	void Spawn3Character();
	void SpawnBottleMulticast(class UStaticMesh* Bottle);
	void SpawnBottleServer(class UStaticMesh* Bottle);
	void SpawnBunkerMarks();
	void SpawnCompasMulticast();
	void SpawnCompasServer();
	void SpawnDeadBodyV2();
	void SpawnDeadBodyWithDrop(const TArray<struct FDropItemEntry>& Param_Drop, const struct FVector& HitLocation, const struct FVector& Param_OnDeathVelocity, class FName HitBoneName, bool RadialDamage, class APawn* Param_Killer, bool Animed);
	void SpawnDropItem(const struct FVector& Position, const struct FFItemInfo& Info, const TArray<struct FContainerPickupsInfo>& Param_ContainersData, const TArray<struct FContainerPickupsInfo>& Param_ContainerItems, bool Massive, const TArray<struct FFItemInfo>& InfoArr);
	void SpawnFootprintDecal(class FName SocketName, bool Right, bool Left);
	void SpawnForkKnifeMulti();
	void SpawnForkKnifeServer();
	void SpawnGPSMulticast();
	void SpawnGPSServer();
	void SpawnMenu(class AActor* Table);
	void SpawnMenuChair(class AActor* Actor);
	void SpawnMenuMulticast();
	void SpawnProjectile_server(class UClass* Param_Class, const struct FVector& Spawn_Transform_Location, const struct FRotator& Spawn_Transform_Rotation, const struct FVector& Spawn_Transform_Scale, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Param_Owner, const struct FBPS_WeaponData& WeaponData, bool ShowTrace, class APawn* Param_Instigator, EBPE_AmmoType AmmoType);
	void SpawnQuestIcons(bool ForceUpdate);
	void SpawnTruppe(const struct FVector& Impulse, const struct FVector& Location, class FName BoneName);
	void SpawnZombie(const struct FVector& InVec);
	void SplitInContainer(class UJSI_Slot_C* SourceSlotRef, class UJSI_Slot_C* NewSplitSlotRef, class UJSIContainer_C* ContainerSource, class UJSIContainer_C* ContainerReceiver, int32 SplitAmount, int32 AmountRemaining);
	void SplitOnGround(class UJSI_Slot_C* SourceSlotRef, class UJSI_Slot_C* NewSplitSlotRef, class UJSIContainer_C* ContainerSource, class UJSIContainer_C* ContainerReceiver, int32 SplitAmount, int32 AmountRemaining);
	void SprintAccelAction();
	void SprintAccelTimeline__FinishedFunc();
	void SprintAccelTimeline__UpdateFunc();
	void SprintCamera();
	void SprintPenalty();
	void StaminaHit(double Hit, double HitTime);
	void StandingPitchOffsetIfAim__FinishedFunc();
	void StandingPitchOffsetIfAim__UpdateFunc();
	void StandPlayerEvent();
	void StartCinematic();
	void StartEating(class UWBP_MenuBarShopSlot_C* CurrentSelectedSlot);
	void StartEatingV(class UWBP_MenuBarShopSlot_C* CurrentSelectedSlot);
	void StartFlashFade();
	void StartInteract();
	void StartRespawn();
	void StartStand();
	void StartTimerEating();
	void StatPrint();
	void Step();
	void StepA();
	void StepD();
	void Steps();
	void StepW();
	void StepZoom__FinishedFunc();
	void StepZoom__UpdateFunc();
	void StopAim();
	void StopAllFuckdEffects();
	void StopBleeding();
	void StopBleedingMulti();
	void StopBleedingServ();
	void StopCriticalDamageEffect();
	void StopCrouchAimTimelines();
	void StopEffectByName(TArray<class FText>& EffectName, E_WeakeningEffect WeakeningEffects, bool RemoveAll, bool* Return);
	void StopEffectByRef(class UEffectMain_C* NewParam, bool* Return);
	void StopInteract();
	void StopShopCameraShake();
	void StopSprint();
	void StopSurrender();
	void StopTimelineProgressBar();
	void StopTpsToFpsCamShake();
	void StopUseItemEvent();
	void StoreCollisionSettings();
	void SubSpecular__FinishedFunc();
	void SubSpecular__UpdateFunc();
	void SurrenderLocal(bool Param_Burnt, bool DieInCarExplosion);
	void SurrenderShowEnd();
	void SurrMessMulti();
	void SurvGetUniqueID(int32* UniqueId);
	void SwapWeaponPlaceholders();
	void SwitchArmor(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchBackpack(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchEquippedItems(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchGroundEquipped(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* Item_Receiver_Container, class UJSIContainer_C* Item_Dropped_Container);
	void SwitchHelmets(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchInventoryEquipped(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* Item_Dropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchJacket(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchLootBoxEquipped(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedConatiner);
	void SwitchLootBoxEquipped_v2(class UJSI_Slot_C* ReceiverSlotRef, class UJSIContainer_C* ReceiverContainerRef, class UWBP_LootEntry_C* DroppedEntryRef);
	void SwitchMeleeWeapon(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchPants(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SwitchWeapon(class UJSI_Slot_C* ItemReceiver, class UJSI_Slot_C* ItemDropped, class UJSIContainer_C* ItemReceiverContainer, class UJSIContainer_C* ItemDroppedContainer);
	void SyncCheckMulti(bool HiddenInGame, bool Param_LootPointOpened, bool bLockMovement, bool Param_Crawling, int32 Primary, int32 Secondary);
	void SyncTick();
	void SyncTickServer(bool HiddenInGame, bool Param_LootPointOpened, bool bLockMovement, bool Param_Crawling, int32 Primary, int32 Secondary);
	void TableContToCont(class UJSIContainer_C* From, class UJSIContainer_C* To, class UJSI_Slot_C* FromSlotRef, class UJSI_Slot_C* ToSlotRef, bool ToEmptySlot_, bool MovedAll_);
	void TableDoubleClick(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void TableMouseBtnDown(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button);
	void TakedDamage(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* Param_Killer, bool Param_IsRadialDamage, bool Param_IsFireDamage, double Param_DistanceToExplosion, class AActor* DamageCauser, bool EffectDamage, bool Param_HungerDamage, EUNegativeEffectDamageType NegativeEffectDamageType);
	void TakedDamageEvent(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* Param_Killer, bool Param_IsRadialDamage, bool Param_IsFireDamage, double Param_DistanceToExplosion, class AActor* DamageCauser, bool StaminaDecrease, bool Zombie_, EBPE_AmmoClass AmmoClass, EUNegativeEffectDamageType NegativeEffectDamageType);
	void TDistanceCalculate();
	void TestSwitch(class UJSI_Slot_C* Item_Reciever, class UJSI_Slot_C* Item_Dropped, class UJSIContainer_C* Item_Receiver_Container, class UJSIContainer_C* Item_Dropped_Container);
	void TestTimer();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_3__FinishedFunc();
	void Timeline_3__UpdateFunc();
	void Timeline_4__FinishedFunc();
	void Timeline_4__UpdateFunc();
	void Timeline_5__FinishedFunc();
	void Timeline_5__UpdateFunc();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void TimelineProgressBar(class UJSI_Slot_C* JSI_Slot);
	void TimelineRoundProgressBar__FinishedFunc();
	void TimelineRoundProgressBar__UpdateFunc();
	void Timer_UrovenShuma();
	void TimeStartBloodEffect();
	void ToggleGaussianBlur(bool On);
	void ToggleWeaponClip(bool On_);
	void Took_Dummy_Damage(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, bool Bleed, class APawn* Param_Killer);
	void TookDummyDamageEvent(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, bool Bleed, class APawn* Param_Killer);
	void TrainCDTip();
	void TrainEndCD();
	void TransferItems();
	void TransferItemsToActor(const struct FContainerPickupsInfo& ContainerInfo, int32 ContainerIndex, bool* Success, TArray<struct FContainerPickupsInfo>* Data, TArray<struct FContainerPickupsInfo>* Items);
	void TransferTradeItemsToCont(TArray<class UJSI_Slot_C*>& Array);
	void TryToAddItemToStashContainer(class UJSIContainer_C* StashContainerRef, class UJSI_Slot_C* SendSlotRef, bool* Locaked);
	void TryToGetStashContainer(class UJSIContainer_C** MainInventoryContainer);
	void TSaveLoc();
	void TurnModulatorDown();
	void TurnModulatorUp();
	void Unarm_unarm(EPlayerSlots Slot, bool WithoutAnimation);
	void UnarmForce();
	void Unarmgps();
	void UnarmPlayerEvent(bool WithoutAnimation);
	void UnblockSprint();
	void UnequipAllItems();
	void UnHandleJSContainerEvents();
	void UnhandleJSEvents(class UJSIContainer_C* Container);
	void UnlocalCrouch(bool Param_Crouch);
	void UnpauseLootpointDestroy(class ALootPoint_C* Param_LootPoint);
	void Update_Weight_Items();
	void UpdateCharacter(const struct FS_SaveStructure& Target);
	void UpdateInventoryContainers();
	void UpdateItemCount(int32 UniqueId, int32 Count);
	void UpdateItemInfo(int32 Uid, int32 Count, bool IsContainer, class UJSI_Slot_C* Slot, double Durability);
	void UpdateKDCounter__DelegateSignature();
	void UpdateOnGroundItemInfo(class AA_Item_C* Target, const struct FFItemInfo& Param_ItemInfo);
	void UpdateSaveCharactersMulticast(const struct FS_SaveStructure& Param_GI_Character_Save_Ref);
	void UpdateSaveCharactersServer(const struct FS_SaveStructure& Param_GI_Character_Save_Ref);
	void UpdateWeaponDurability(int32 Uid, double Durability, double MaxDurability, bool ChangeMaxDurability, class UJSI_Slot_C* Slot);
	void UpdateWeaponStructure(const struct FFItemInfo& NewWeaponInfo, bool* bResult);
	void UpdateWeightMaxItems();
	void UseBarStojkaServer(class AActor* Hightlight);
	void UseChair(class AActor* Hightlight);
	void UseChairMulti(class AActor* Hightlight);
	void UseChairServer(class AActor* Hightlight);
	void UserConstructionScript();
	void UseTable(class AActor* Hightlight);
	void UseTableMulti(class AActor* Hightlight);
	void UseTableServer(class AActor* Hightlight);
	void UsingTraining(class ABP_TrainingApp_C* TrainApp);
	void Validate_Drop_Box__Only_Server_(const struct FFItemInfo& DropItem, const struct FVector& Location, bool* Result);
	void Validate3DCharacter();
	void ValidateArr_Drop_Box__Only_Server_(const struct FFItemInfo& DropItem, const struct FVector& Location, TArray<struct FFItemInfo>& Arr, bool* Result);
	void Vis(bool bNewVisibility);
	void VisFunc(bool InputPin);
	void VisInClient(bool NewVisibility);
	void VisServ(bool bNewVisibility);
	void VisToggleForHiddenShadowComponents(bool Vis);
	void VisualizeEquipmentUnlocal(class USkinnedMeshComponent* Target, class FName RowName, TSoftObjectPtr<class USkeletalMesh> DefaultMesh);
	void WaitToLoadingLevel();
	void WaitToUID();
	void WatchToGasoline();
	void Weapon_Sync(int32 PrimaryId, int32 SecondaryId);
	void WeaponLerpToCamera__FinishedFunc();
	void WeaponLerpToCamera__UpdateFunc();
	void WeaponsToggle(bool OnOrOff, bool WithoutAnimation);
	void WeaponsUnactive();
	void WInputActionRespawn();
	void WipeSpeed(bool ResetDoOnce);
	void WoundDamage(class FName BoneName, const struct FVector& HitLocation);
	void WP_Aiming(bool Aim);
	void WP_Anim_Weapon_Equiped(class ABP_Weapon_C* NewParam);
	void WP_EquipWeapon(class FName Param_WeaponName);
	void WP_GetAimCamera(class UCameraComponent** Param_Camera);
	void WP_GetLefHandEffectorTransform(struct FTransform* Transform, bool* HasEffector);
	void WP_GetRotationInput(struct FVector2D* NewParam);
	void WP_GetShootDirection(struct FVector* ShootDirection);
	void WP_GetSkeletalMesh(class USkeletalMeshComponent** SkinnedMesh, bool* Success);
	void WP_GetWeaponType(EBPE_Weapon_Type* Param_WeaponType);
	void WP_HasWeaponOrBroken(bool* Value);
	void WP_MeleeActivation(bool State);
	void WP_PlayGunTail(class UFMODEvent* TailSound);
	void WP_SetRecoilPower(double RecoilPower);
	void WP_UnequipWeapon();
	void ZombieAvoid();
	void ZombieSpawnTriggerSettings();
	void ZoomGps(bool In);
	void ZoomGpsOffset__FinishedFunc();
	void ZoomGpsOffset__UpdateFunc();
	void ZoomGpsTL__FinishedFunc();
	void ZoomGpsTL__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SurvivalPlayer_C">();
	}
	static class ASurvivalPlayer_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASurvivalPlayer_C>();
	}
};
static_assert(alignof(ASurvivalPlayer_C) == 0x000010, "Wrong alignment on ASurvivalPlayer_C");
static_assert(sizeof(ASurvivalPlayer_C) == 0x003740, "Wrong size on ASurvivalPlayer_C");
static_assert(offsetof(ASurvivalPlayer_C, UberGraphFrame) == 0x0007B0, "Member 'ASurvivalPlayer_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Box) == 0x0007B8, "Member 'ASurvivalPlayer_C::Box' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_BarPlayerComponent) == 0x0007C0, "Member 'ASurvivalPlayer_C::BPC_BarPlayerComponent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BreathSprint) == 0x0007C8, "Member 'ASurvivalPlayer_C::BreathSprint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BreathSystem) == 0x0007D0, "Member 'ASurvivalPlayer_C::BreathSystem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_BreathSystemReplication) == 0x0007D8, "Member 'ASurvivalPlayer_C::BPC_BreathSystemReplication' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerInventoryCollector) == 0x0007E0, "Member 'ASurvivalPlayer_C::PlayerInventoryCollector' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AC_SurvQuestInteract) == 0x0007E8, "Member 'ASurvivalPlayer_C::AC_SurvQuestInteract' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_Binoculars) == 0x0007F0, "Member 'ASurvivalPlayer_C::BPC_Binoculars' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_NegativeEffects) == 0x0007F8, "Member 'ASurvivalPlayer_C::BPC_NegativeEffects' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GpsSocket) == 0x000800, "Member 'ASurvivalPlayer_C::GpsSocket' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ATPCCamera) == 0x000808, "Member 'ASurvivalPlayer_C::ATPCCamera' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraSceneSocket) == 0x000810, "Member 'ASurvivalPlayer_C::CameraSceneSocket' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SquadMemberWidget) == 0x000818, "Member 'ASurvivalPlayer_C::SquadMemberWidget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_WeaponAttachmentsSystem) == 0x000820, "Member 'ASurvivalPlayer_C::BPC_WeaponAttachmentsSystem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PointToInteract) == 0x000828, "Member 'ASurvivalPlayer_C::PointToInteract' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Camera) == 0x000830, "Member 'ASurvivalPlayer_C::Camera' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sphere) == 0x000838, "Member 'ASurvivalPlayer_C::Sphere' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CompasSocket) == 0x000840, "Member 'ASurvivalPlayer_C::CompasSocket' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, beard) == 0x000848, "Member 'ASurvivalPlayer_C::beard' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PistolWP) == 0x000850, "Member 'ASurvivalPlayer_C::PistolWP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SharpSync) == 0x000858, "Member 'ASurvivalPlayer_C::SharpSync' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FP_WP) == 0x000860, "Member 'ASurvivalPlayer_C::FP_WP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPMeshNew) == 0x000868, "Member 'ASurvivalPlayer_C::FPMeshNew' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PostProcess) == 0x000870, "Member 'ASurvivalPlayer_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SecondaryWP) == 0x000878, "Member 'ASurvivalPlayer_C::SecondaryWP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PrimaryWP) == 0x000880, "Member 'ASurvivalPlayer_C::PrimaryWP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sphere1) == 0x000888, "Member 'ASurvivalPlayer_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPSocket) == 0x000890, "Member 'ASurvivalPlayer_C::FPSocket' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_PlayerStatsComponent) == 0x000898, "Member 'ASurvivalPlayer_C::BPC_PlayerStatsComponent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_PerkSystem) == 0x0008A0, "Member 'ASurvivalPlayer_C::BPC_PerkSystem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RadioVOIP) == 0x0008A8, "Member 'ASurvivalPlayer_C::RadioVOIP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TeamVOIP) == 0x0008B0, "Member 'ASurvivalPlayer_C::TeamVOIP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, VoipManager) == 0x0008B8, "Member 'ASurvivalPlayer_C::VoipManager' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, QuestComponentV4) == 0x0008C0, "Member 'ASurvivalPlayer_C::QuestComponentV4' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, QuestSystemComp) == 0x0008C8, "Member 'ASurvivalPlayer_C::QuestSystemComp' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ADSDialoguePartecipant) == 0x0008D0, "Member 'ASurvivalPlayer_C::ADSDialoguePartecipant' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_TAAManager) == 0x0008D8, "Member 'ASurvivalPlayer_C::BPC_TAAManager' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SGInventoryWorker) == 0x0008E0, "Member 'ASurvivalPlayer_C::SGInventoryWorker' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, _breath_stealth_aim_idle) == 0x0008E8, "Member 'ASurvivalPlayer_C::_breath_stealth_aim_idle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, _breath_idle) == 0x0008F0, "Member 'ASurvivalPlayer_C::_breath_idle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashlightArm) == 0x0008F8, "Member 'ASurvivalPlayer_C::FlashlightArm' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_AlarmSystem) == 0x000900, "Member 'ASurvivalPlayer_C::BPC_AlarmSystem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NeckPercept) == 0x000908, "Member 'ASurvivalPlayer_C::NeckPercept' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FootprintComponent) == 0x000910, "Member 'ASurvivalPlayer_C::FootprintComponent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LocalPhycisContraint) == 0x000918, "Member 'ASurvivalPlayer_C::LocalPhycisContraint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SecondarySM) == 0x000920, "Member 'ASurvivalPlayer_C::SecondarySM' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PrimarySM) == 0x000928, "Member 'ASurvivalPlayer_C::PrimarySM' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SecondaryPhysicsSM) == 0x000930, "Member 'ASurvivalPlayer_C::SecondaryPhysicsSM' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PrimaryPhysicsSM) == 0x000938, "Member 'ASurvivalPlayer_C::PrimaryPhysicsSM' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UpperBack1PC) == 0x000940, "Member 'ASurvivalPlayer_C::UpperBack1PC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UpperBack2PC) == 0x000948, "Member 'ASurvivalPlayer_C::UpperBack2PC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UpperBack2Root) == 0x000950, "Member 'ASurvivalPlayer_C::UpperBack2Root' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UpperBack1Root) == 0x000958, "Member 'ASurvivalPlayer_C::UpperBack1Root' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponSlots) == 0x000960, "Member 'ASurvivalPlayer_C::WeaponSlots' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Pistol) == 0x000968, "Member 'ASurvivalPlayer_C::Pistol' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BP_CampClient) == 0x000970, "Member 'ASurvivalPlayer_C::BP_CampClient' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WoundComponentPants) == 0x000978, "Member 'ASurvivalPlayer_C::WoundComponentPants' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WoundComponentArmor) == 0x000980, "Member 'ASurvivalPlayer_C::WoundComponentArmor' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WoundComponentOuterwear) == 0x000988, "Member 'ASurvivalPlayer_C::WoundComponentOuterwear' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WoundComponentHelmet) == 0x000990, "Member 'ASurvivalPlayer_C::WoundComponentHelmet' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WoundComponentHair) == 0x000998, "Member 'ASurvivalPlayer_C::WoundComponentHair' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WoundComponentHead) == 0x0009A0, "Member 'ASurvivalPlayer_C::WoundComponentHead' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BackpackSlot) == 0x0009A8, "Member 'ASurvivalPlayer_C::BackpackSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SpawnManagerChild) == 0x0009B0, "Member 'ASurvivalPlayer_C::SpawnManagerChild' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ParticleSystem) == 0x0009B8, "Member 'ASurvivalPlayer_C::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AIPerceptionStimuliSource) == 0x0009C0, "Member 'ASurvivalPlayer_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Flashlight) == 0x0009C8, "Member 'ASurvivalPlayer_C::Flashlight' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashlightHolder) == 0x0009D0, "Member 'ASurvivalPlayer_C::FlashlightHolder' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PerceptActor) == 0x0009D8, "Member 'ASurvivalPlayer_C::PerceptActor' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Hair2) == 0x0009E0, "Member 'ASurvivalPlayer_C::Hair2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Hair1) == 0x0009E8, "Member 'ASurvivalPlayer_C::Hair1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OuterwearSlot) == 0x0009F0, "Member 'ASurvivalPlayer_C::OuterwearSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PantsSlot) == 0x0009F8, "Member 'ASurvivalPlayer_C::PantsSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HelmetSlot) == 0x000A00, "Member 'ASurvivalPlayer_C::HelmetSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ArmorSlot) == 0x000A08, "Member 'ASurvivalPlayer_C::ArmorSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BPC_Equipment) == 0x000A10, "Member 'ASurvivalPlayer_C::BPC_Equipment' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryOpenTimeline_Alpha_0D552CD3483F465436E2D395614F6698) == 0x000A18, "Member 'ASurvivalPlayer_C::InventoryOpenTimeline_Alpha_0D552CD3483F465436E2D395614F6698' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryOpenTimeline__Direction_0D552CD3483F465436E2D395614F6698) == 0x000A1C, "Member 'ASurvivalPlayer_C::InventoryOpenTimeline__Direction_0D552CD3483F465436E2D395614F6698' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryOpenTimeline) == 0x000A20, "Member 'ASurvivalPlayer_C::InventoryOpenTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZoomGpsOffset_NewTrack_0_F16046D9475E3F9E4D62E0B91BFB8F76) == 0x000A28, "Member 'ASurvivalPlayer_C::ZoomGpsOffset_NewTrack_0_F16046D9475E3F9E4D62E0B91BFB8F76' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZoomGpsOffset__Direction_F16046D9475E3F9E4D62E0B91BFB8F76) == 0x000A2C, "Member 'ASurvivalPlayer_C::ZoomGpsOffset__Direction_F16046D9475E3F9E4D62E0B91BFB8F76' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZoomGpsOffset) == 0x000A30, "Member 'ASurvivalPlayer_C::ZoomGpsOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZoomGpsTL_NewTrack_0_76930A324240D4BB48A1EC939B450BFD) == 0x000A38, "Member 'ASurvivalPlayer_C::ZoomGpsTL_NewTrack_0_76930A324240D4BB48A1EC939B450BFD' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZoomGpsTL__Direction_76930A324240D4BB48A1EC939B450BFD) == 0x000A3C, "Member 'ASurvivalPlayer_C::ZoomGpsTL__Direction_76930A324240D4BB48A1EC939B450BFD' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZoomGpsTL) == 0x000A40, "Member 'ASurvivalPlayer_C::ZoomGpsTL' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchingWeaponOffsetTimeline_TPP_8596FEEC4522E8EF541DEBB9F5364653) == 0x000A48, "Member 'ASurvivalPlayer_C::CrouchingWeaponOffsetTimeline_TPP_8596FEEC4522E8EF541DEBB9F5364653' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchingWeaponOffsetTimeline_FPP_8596FEEC4522E8EF541DEBB9F5364653) == 0x000A60, "Member 'ASurvivalPlayer_C::CrouchingWeaponOffsetTimeline_FPP_8596FEEC4522E8EF541DEBB9F5364653' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchingWeaponOffsetTimeline__Direction_8596FEEC4522E8EF541DEBB9F5364653) == 0x000A78, "Member 'ASurvivalPlayer_C::CrouchingWeaponOffsetTimeline__Direction_8596FEEC4522E8EF541DEBB9F5364653' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchingWeaponOffsetTimeline) == 0x000A80, "Member 'ASurvivalPlayer_C::CrouchingWeaponOffsetTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_5_MinusStep_AB5EDB5449E8A99969AB0D98804B65D2) == 0x000A88, "Member 'ASurvivalPlayer_C::Timeline_5_MinusStep_AB5EDB5449E8A99969AB0D98804B65D2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_5_PlusStep_AB5EDB5449E8A99969AB0D98804B65D2) == 0x000A8C, "Member 'ASurvivalPlayer_C::Timeline_5_PlusStep_AB5EDB5449E8A99969AB0D98804B65D2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_5__Direction_AB5EDB5449E8A99969AB0D98804B65D2) == 0x000A90, "Member 'ASurvivalPlayer_C::Timeline_5__Direction_AB5EDB5449E8A99969AB0D98804B65D2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_5) == 0x000A98, "Member 'ASurvivalPlayer_C::Timeline_5' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_4_MinusStep_AF9523B64D162AD9062C1088AD0A0F37) == 0x000AA0, "Member 'ASurvivalPlayer_C::Timeline_4_MinusStep_AF9523B64D162AD9062C1088AD0A0F37' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_4_PlusStep_AF9523B64D162AD9062C1088AD0A0F37) == 0x000AA4, "Member 'ASurvivalPlayer_C::Timeline_4_PlusStep_AF9523B64D162AD9062C1088AD0A0F37' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_4__Direction_AF9523B64D162AD9062C1088AD0A0F37) == 0x000AA8, "Member 'ASurvivalPlayer_C::Timeline_4__Direction_AF9523B64D162AD9062C1088AD0A0F37' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_4) == 0x000AB0, "Member 'ASurvivalPlayer_C::Timeline_4' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_3_MinusStep_FF79EBD5449BBDFB00C2E09DBB8C4A99) == 0x000AB8, "Member 'ASurvivalPlayer_C::Timeline_3_MinusStep_FF79EBD5449BBDFB00C2E09DBB8C4A99' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_3_PlusStep_FF79EBD5449BBDFB00C2E09DBB8C4A99) == 0x000ABC, "Member 'ASurvivalPlayer_C::Timeline_3_PlusStep_FF79EBD5449BBDFB00C2E09DBB8C4A99' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_3__Direction_FF79EBD5449BBDFB00C2E09DBB8C4A99) == 0x000AC0, "Member 'ASurvivalPlayer_C::Timeline_3__Direction_FF79EBD5449BBDFB00C2E09DBB8C4A99' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_3) == 0x000AC8, "Member 'ASurvivalPlayer_C::Timeline_3' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_MinusStep_ADE4E7A14E7F37E8EB76518D4ACB3E27) == 0x000AD0, "Member 'ASurvivalPlayer_C::Timeline_MinusStep_ADE4E7A14E7F37E8EB76518D4ACB3E27' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_PlusStep_ADE4E7A14E7F37E8EB76518D4ACB3E27) == 0x000AD4, "Member 'ASurvivalPlayer_C::Timeline_PlusStep_ADE4E7A14E7F37E8EB76518D4ACB3E27' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline__Direction_ADE4E7A14E7F37E8EB76518D4ACB3E27) == 0x000AD8, "Member 'ASurvivalPlayer_C::Timeline__Direction_ADE4E7A14E7F37E8EB76518D4ACB3E27' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline) == 0x000AE0, "Member 'ASurvivalPlayer_C::Timeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StepZoom_MinusStep_22D1EB3A47026D398A712F97C3B4CD1C) == 0x000AE8, "Member 'ASurvivalPlayer_C::StepZoom_MinusStep_22D1EB3A47026D398A712F97C3B4CD1C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StepZoom_PlusStep_22D1EB3A47026D398A712F97C3B4CD1C) == 0x000AEC, "Member 'ASurvivalPlayer_C::StepZoom_PlusStep_22D1EB3A47026D398A712F97C3B4CD1C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StepZoom__Direction_22D1EB3A47026D398A712F97C3B4CD1C) == 0x000AF0, "Member 'ASurvivalPlayer_C::StepZoom__Direction_22D1EB3A47026D398A712F97C3B4CD1C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StepZoom) == 0x000AF8, "Member 'ASurvivalPlayer_C::StepZoom' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPPAimingTimeline_PosOffset_598E03BA48E7AA7161D8DF82FCE7AA94) == 0x000B00, "Member 'ASurvivalPlayer_C::FPPAimingTimeline_PosOffset_598E03BA48E7AA7161D8DF82FCE7AA94' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPPAimingTimeline__Direction_598E03BA48E7AA7161D8DF82FCE7AA94) == 0x000B18, "Member 'ASurvivalPlayer_C::FPPAimingTimeline__Direction_598E03BA48E7AA7161D8DF82FCE7AA94' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPPAimingTimeline) == 0x000B20, "Member 'ASurvivalPlayer_C::FPPAimingTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimelineRoundProgressBar_Value_104D1EB246CFE05F6BC415A3852AB95F) == 0x000B28, "Member 'ASurvivalPlayer_C::TimelineRoundProgressBar_Value_104D1EB246CFE05F6BC415A3852AB95F' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimelineRoundProgressBar__Direction_104D1EB246CFE05F6BC415A3852AB95F) == 0x000B2C, "Member 'ASurvivalPlayer_C::TimelineRoundProgressBar__Direction_104D1EB246CFE05F6BC415A3852AB95F' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimelineRoundProgressBar) == 0x000B30, "Member 'ASurvivalPlayer_C::TimelineRoundProgressBar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_2_Alpha_605DDD0B45EAF290B8305B8955E406E5) == 0x000B38, "Member 'ASurvivalPlayer_C::Timeline_2_Alpha_605DDD0B45EAF290B8305B8955E406E5' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_2__Direction_605DDD0B45EAF290B8305B8955E406E5) == 0x000B3C, "Member 'ASurvivalPlayer_C::Timeline_2__Direction_605DDD0B45EAF290B8305B8955E406E5' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_2) == 0x000B40, "Member 'ASurvivalPlayer_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StandingPitchOffsetIfAim_Alpha_AAA5D8FD41D97A76DB7660BF124ADECE) == 0x000B48, "Member 'ASurvivalPlayer_C::StandingPitchOffsetIfAim_Alpha_AAA5D8FD41D97A76DB7660BF124ADECE' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StandingPitchOffsetIfAim__Direction_AAA5D8FD41D97A76DB7660BF124ADECE) == 0x000B4C, "Member 'ASurvivalPlayer_C::StandingPitchOffsetIfAim__Direction_AAA5D8FD41D97A76DB7660BF124ADECE' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StandingPitchOffsetIfAim) == 0x000B50, "Member 'ASurvivalPlayer_C::StandingPitchOffsetIfAim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReverseCtiticalDamage_Alpha_B1C0DBCF4A2A6CB7DED66BA0F8E8B840) == 0x000B58, "Member 'ASurvivalPlayer_C::ReverseCtiticalDamage_Alpha_B1C0DBCF4A2A6CB7DED66BA0F8E8B840' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReverseCtiticalDamage__Direction_B1C0DBCF4A2A6CB7DED66BA0F8E8B840) == 0x000B5C, "Member 'ASurvivalPlayer_C::ReverseCtiticalDamage__Direction_B1C0DBCF4A2A6CB7DED66BA0F8E8B840' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReverseCtiticalDamage) == 0x000B60, "Member 'ASurvivalPlayer_C::ReverseCtiticalDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ApplyCriticalHealthEffect_Alpha_248CC6F74F49976102E37D8E3465ECFE) == 0x000B68, "Member 'ASurvivalPlayer_C::ApplyCriticalHealthEffect_Alpha_248CC6F74F49976102E37D8E3465ECFE' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ApplyCriticalHealthEffect__Direction_248CC6F74F49976102E37D8E3465ECFE) == 0x000B6C, "Member 'ASurvivalPlayer_C::ApplyCriticalHealthEffect__Direction_248CC6F74F49976102E37D8E3465ECFE' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ApplyCriticalHealthEffect) == 0x000B70, "Member 'ASurvivalPlayer_C::ApplyCriticalHealthEffect' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Food_Water_Timeline_Lerp_BDE0461C49A0C1ABE61BF092C7BE3949) == 0x000B78, "Member 'ASurvivalPlayer_C::Food_Water_Timeline_Lerp_BDE0461C49A0C1ABE61BF092C7BE3949' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Food_Water_Timeline__Direction_BDE0461C49A0C1ABE61BF092C7BE3949) == 0x000B7C, "Member 'ASurvivalPlayer_C::Food_Water_Timeline__Direction_BDE0461C49A0C1ABE61BF092C7BE3949' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Food_Water_Timeline) == 0x000B80, "Member 'ASurvivalPlayer_C::Food_Water_Timeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_0_Alpha_FD98DB784BA58F75186AD4A5AE18FD83) == 0x000B88, "Member 'ASurvivalPlayer_C::Timeline_0_Alpha_FD98DB784BA58F75186AD4A5AE18FD83' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_0__Direction_FD98DB784BA58F75186AD4A5AE18FD83) == 0x000B8C, "Member 'ASurvivalPlayer_C::Timeline_0__Direction_FD98DB784BA58F75186AD4A5AE18FD83' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_0) == 0x000B90, "Member 'ASurvivalPlayer_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchPitchOffsetIfAim_Alpha_309DEB5540B9A8CB2AF1198AFAB6F9A4) == 0x000B98, "Member 'ASurvivalPlayer_C::CrouchPitchOffsetIfAim_Alpha_309DEB5540B9A8CB2AF1198AFAB6F9A4' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchPitchOffsetIfAim__Direction_309DEB5540B9A8CB2AF1198AFAB6F9A4) == 0x000B9C, "Member 'ASurvivalPlayer_C::CrouchPitchOffsetIfAim__Direction_309DEB5540B9A8CB2AF1198AFAB6F9A4' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchPitchOffsetIfAim) == 0x000BA0, "Member 'ASurvivalPlayer_C::CrouchPitchOffsetIfAim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponLerpToCamera_Alpha_9FB5FA2E4DAC3AD991EB8BB4E2FCFBDC) == 0x000BA8, "Member 'ASurvivalPlayer_C::WeaponLerpToCamera_Alpha_9FB5FA2E4DAC3AD991EB8BB4E2FCFBDC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponLerpToCamera__Direction_9FB5FA2E4DAC3AD991EB8BB4E2FCFBDC) == 0x000BAC, "Member 'ASurvivalPlayer_C::WeaponLerpToCamera__Direction_9FB5FA2E4DAC3AD991EB8BB4E2FCFBDC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponLerpToCamera) == 0x000BB0, "Member 'ASurvivalPlayer_C::WeaponLerpToCamera' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DrunkLerpTimeline_Lerp_E2ABB22B478363CAD9F965A492C4228C) == 0x000BB8, "Member 'ASurvivalPlayer_C::DrunkLerpTimeline_Lerp_E2ABB22B478363CAD9F965A492C4228C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DrunkLerpTimeline__Direction_E2ABB22B478363CAD9F965A492C4228C) == 0x000BBC, "Member 'ASurvivalPlayer_C::DrunkLerpTimeline__Direction_E2ABB22B478363CAD9F965A492C4228C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DrunkLerpTimeline) == 0x000BC0, "Member 'ASurvivalPlayer_C::DrunkLerpTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SubSpecular_Specular_492A2C9041B4BE2B1F9600997169C5D3) == 0x000BC8, "Member 'ASurvivalPlayer_C::SubSpecular_Specular_492A2C9041B4BE2B1F9600997169C5D3' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SubSpecular__Direction_492A2C9041B4BE2B1F9600997169C5D3) == 0x000BCC, "Member 'ASurvivalPlayer_C::SubSpecular__Direction_492A2C9041B4BE2B1F9600997169C5D3' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SubSpecular) == 0x000BD0, "Member 'ASurvivalPlayer_C::SubSpecular' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AddSpecular_Specular_C281FEFD490A8C0C078B3B9F5199D966) == 0x000BD8, "Member 'ASurvivalPlayer_C::AddSpecular_Specular_C281FEFD490A8C0C078B3B9F5199D966' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AddSpecular__Direction_C281FEFD490A8C0C078B3B9F5199D966) == 0x000BDC, "Member 'ASurvivalPlayer_C::AddSpecular__Direction_C281FEFD490A8C0C078B3B9F5199D966' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AddSpecular) == 0x000BE0, "Member 'ASurvivalPlayer_C::AddSpecular' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_1_NewTrack_0_5F3164A24415440657770EA588273E3D) == 0x000BE8, "Member 'ASurvivalPlayer_C::Timeline_1_NewTrack_0_5F3164A24415440657770EA588273E3D' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_1__Direction_5F3164A24415440657770EA588273E3D) == 0x000BEC, "Member 'ASurvivalPlayer_C::Timeline_1__Direction_5F3164A24415440657770EA588273E3D' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timeline_1) == 0x000BF0, "Member 'ASurvivalPlayer_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HealPPEffectTimeline_Value_348BF1474C2A25BCE6CD1F9848BEFE41) == 0x000BF8, "Member 'ASurvivalPlayer_C::HealPPEffectTimeline_Value_348BF1474C2A25BCE6CD1F9848BEFE41' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HealPPEffectTimeline__Direction_348BF1474C2A25BCE6CD1F9848BEFE41) == 0x000BFC, "Member 'ASurvivalPlayer_C::HealPPEffectTimeline__Direction_348BF1474C2A25BCE6CD1F9848BEFE41' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HealPPEffectTimeline) == 0x000C00, "Member 'ASurvivalPlayer_C::HealPPEffectTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KillPPEffectTimeline_Value_337A9F5C4A0B548F36628AA137A19FA1) == 0x000C08, "Member 'ASurvivalPlayer_C::KillPPEffectTimeline_Value_337A9F5C4A0B548F36628AA137A19FA1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KillPPEffectTimeline__Direction_337A9F5C4A0B548F36628AA137A19FA1) == 0x000C0C, "Member 'ASurvivalPlayer_C::KillPPEffectTimeline__Direction_337A9F5C4A0B548F36628AA137A19FA1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KillPPEffectTimeline) == 0x000C10, "Member 'ASurvivalPlayer_C::KillPPEffectTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DamageCameraEffects_Timer_2ACA4AC949FC90C95D646C9371AFBB35) == 0x000C18, "Member 'ASurvivalPlayer_C::DamageCameraEffects_Timer_2ACA4AC949FC90C95D646C9371AFBB35' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DamageCameraEffects__Direction_2ACA4AC949FC90C95D646C9371AFBB35) == 0x000C1C, "Member 'ASurvivalPlayer_C::DamageCameraEffects__Direction_2ACA4AC949FC90C95D646C9371AFBB35' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DamageCameraEffects) == 0x000C20, "Member 'ASurvivalPlayer_C::DamageCameraEffects' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintAccelTimeline_NewTrack_0_7DAFCF24433D791EF122378A18118860) == 0x000C28, "Member 'ASurvivalPlayer_C::SprintAccelTimeline_NewTrack_0_7DAFCF24433D791EF122378A18118860' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintAccelTimeline__Direction_7DAFCF24433D791EF122378A18118860) == 0x000C2C, "Member 'ASurvivalPlayer_C::SprintAccelTimeline__Direction_7DAFCF24433D791EF122378A18118860' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintAccelTimeline) == 0x000C30, "Member 'ASurvivalPlayer_C::SprintAccelTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraLerpSpring_CameraAlpha_AC22FE9D45845585B98DF79542149C69) == 0x000C38, "Member 'ASurvivalPlayer_C::CameraLerpSpring_CameraAlpha_AC22FE9D45845585B98DF79542149C69' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraLerpSpring__Direction_AC22FE9D45845585B98DF79542149C69) == 0x000C3C, "Member 'ASurvivalPlayer_C::CameraLerpSpring__Direction_AC22FE9D45845585B98DF79542149C69' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraLerpSpring) == 0x000C40, "Member 'ASurvivalPlayer_C::CameraLerpSpring' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Animator) == 0x000C48, "Member 'ASurvivalPlayer_C::Animator' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsAiming) == 0x000C50, "Member 'ASurvivalPlayer_C::IsAiming' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsGrounded) == 0x000C51, "Member 'ASurvivalPlayer_C::IsGrounded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RotationInput) == 0x000C58, "Member 'ASurvivalPlayer_C::RotationInput' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TargetRotation) == 0x000C68, "Member 'ASurvivalPlayer_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PreviousMoveType) == 0x000C80, "Member 'ASurvivalPlayer_C::PreviousMoveType' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MovementType) == 0x000C81, "Member 'ASurvivalPlayer_C::MovementType' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WalkFSpeed) == 0x000C88, "Member 'ASurvivalPlayer_C::WalkFSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WalkFRLSpeed) == 0x000C90, "Member 'ASurvivalPlayer_C::WalkFRLSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WalkBRLSpeed) == 0x000C98, "Member 'ASurvivalPlayer_C::WalkBRLSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WalkBSpeed) == 0x000CA0, "Member 'ASurvivalPlayer_C::WalkBSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JogFSpeed) == 0x000CA8, "Member 'ASurvivalPlayer_C::JogFSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JogBSpeed) == 0x000CB0, "Member 'ASurvivalPlayer_C::JogBSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JogFRLSpeed) == 0x000CB8, "Member 'ASurvivalPlayer_C::JogFRLSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JogBRLSpeed) == 0x000CC0, "Member 'ASurvivalPlayer_C::JogBRLSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchSpeed) == 0x000CC8, "Member 'ASurvivalPlayer_C::CrouchSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RunSpeed) == 0x000CD0, "Member 'ASurvivalPlayer_C::RunSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StanceType) == 0x000CD8, "Member 'ASurvivalPlayer_C::StanceType' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimeDilation) == 0x000CE0, "Member 'ASurvivalPlayer_C::TimeDilation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JogAccel) == 0x000CE8, "Member 'ASurvivalPlayer_C::JogAccel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JogDecel) == 0x000CF0, "Member 'ASurvivalPlayer_C::JogDecel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WalkAccel) == 0x000CF8, "Member 'ASurvivalPlayer_C::WalkAccel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WalkDecel) == 0x000D00, "Member 'ASurvivalPlayer_C::WalkDecel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RunAccel) == 0x000D08, "Member 'ASurvivalPlayer_C::RunAccel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RunDecel) == 0x000D10, "Member 'ASurvivalPlayer_C::RunDecel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponType) == 0x000D18, "Member 'ASurvivalPlayer_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultSpringLength) == 0x000D20, "Member 'ASurvivalPlayer_C::DefaultSpringLength' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimSpringLength) == 0x000D28, "Member 'ASurvivalPlayer_C::AimSpringLength' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimCameraLerpCurve) == 0x000D30, "Member 'ASurvivalPlayer_C::AimCameraLerpCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintCameraLerpCurve) == 0x000D38, "Member 'ASurvivalPlayer_C::SprintCameraLerpCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentCameraSettings) == 0x000D40, "Member 'ASurvivalPlayer_C::CurrentCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintCameraSettings) == 0x000D68, "Member 'ASurvivalPlayer_C::SprintCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimCameraSettings) == 0x000D90, "Member 'ASurvivalPlayer_C::AimCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultCameraSettings) == 0x000DB8, "Member 'ASurvivalPlayer_C::DefaultCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentCurve) == 0x000DE0, "Member 'ASurvivalPlayer_C::CurrentCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, VelocityDiff) == 0x000DE8, "Member 'ASurvivalPlayer_C::VelocityDiff' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Inventory) == 0x000DF0, "Member 'ASurvivalPlayer_C::Inventory' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InCar) == 0x000E00, "Member 'ASurvivalPlayer_C::InCar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CardinalDirection) == 0x000E01, "Member 'ASurvivalPlayer_C::CardinalDirection' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RotationOffset) == 0x000E08, "Member 'ASurvivalPlayer_C::RotationOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RotationLerpCurve) == 0x000E10, "Member 'ASurvivalPlayer_C::RotationLerpCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchCameraSettings) == 0x000E18, "Member 'ASurvivalPlayer_C::CrouchCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimCrouchCameraSettings) == 0x000E40, "Member 'ASurvivalPlayer_C::AimCrouchCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimCrouchCameraSettings_0) == 0x000E68, "Member 'ASurvivalPlayer_C::AimCrouchCameraSettings_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CharSpeedSettings) == 0x000E90, "Member 'ASurvivalPlayer_C::CharSpeedSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintPressed) == 0x000F48, "Member 'ASurvivalPlayer_C::SprintPressed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AmmoChangedEvent) == 0x000F50, "Member 'ASurvivalPlayer_C::AmmoChangedEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimStateEvent) == 0x000F60, "Member 'ASurvivalPlayer_C::AimStateEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShootEvent) == 0x000F70, "Member 'ASurvivalPlayer_C::ShootEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShootHitEvent) == 0x000F80, "Member 'ASurvivalPlayer_C::ShootHitEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReloadEvent) == 0x000F90, "Member 'ASurvivalPlayer_C::ReloadEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InCarEvent) == 0x000FA0, "Member 'ASurvivalPlayer_C::InCarEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimPressed) == 0x000FB0, "Member 'ASurvivalPlayer_C::AimPressed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsShooting) == 0x000FB1, "Member 'ASurvivalPlayer_C::IsShooting' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsReloading) == 0x000FB2, "Member 'ASurvivalPlayer_C::IsReloading' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NormalDirection) == 0x000FB8, "Member 'ASurvivalPlayer_C::NormalDirection' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CanSprint) == 0x000FD0, "Member 'ASurvivalPlayer_C::CanSprint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SyncedRotation) == 0x000FD8, "Member 'ASurvivalPlayer_C::SyncedRotation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryOpened) == 0x000FF0, "Member 'ASurvivalPlayer_C::InventoryOpened' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsPassenger) == 0x000FF1, "Member 'ASurvivalPlayer_C::IsPassenger' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerGUI) == 0x000FF8, "Member 'ASurvivalPlayer_C::PlayerGUI' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PressInteractTimerHandle) == 0x001000, "Member 'ASurvivalPlayer_C::PressInteractTimerHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CanInteract) == 0x001008, "Member 'ASurvivalPlayer_C::CanInteract' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LateTime) == 0x001010, "Member 'ASurvivalPlayer_C::LateTime' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InteractType) == 0x001018, "Member 'ASurvivalPlayer_C::InteractType' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LateInteractStart) == 0x001020, "Member 'ASurvivalPlayer_C::LateInteractStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LateInteractFinish) == 0x001030, "Member 'ASurvivalPlayer_C::LateInteractFinish' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LateInteractCancel) == 0x001040, "Member 'ASurvivalPlayer_C::LateInteractCancel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ViewPitchMin) == 0x001050, "Member 'ASurvivalPlayer_C::ViewPitchMin' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ViewPitchMax) == 0x001058, "Member 'ASurvivalPlayer_C::ViewPitchMax' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PelvisBone) == 0x001060, "Member 'ASurvivalPlayer_C::PelvisBone' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootPointOpened) == 0x001068, "Member 'ASurvivalPlayer_C::LootPointOpened' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PrepareAim) == 0x001069, "Member 'ASurvivalPlayer_C::PrepareAim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PressDurabilityButtonTimerHandle) == 0x001070, "Member 'ASurvivalPlayer_C::PressDurabilityButtonTimerHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DurabilityButtonStart) == 0x001078, "Member 'ASurvivalPlayer_C::DurabilityButtonStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DurabilityButtonFinish) == 0x001088, "Member 'ASurvivalPlayer_C::DurabilityButtonFinish' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DurabilityButtonCancel) == 0x001098, "Member 'ASurvivalPlayer_C::DurabilityButtonCancel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StepSounds) == 0x0010A8, "Member 'ASurvivalPlayer_C::StepSounds' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AttachedCanister) == 0x0010B0, "Member 'ASurvivalPlayer_C::AttachedCanister' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PressFuelButtonTimerHandle) == 0x0010B8, "Member 'ASurvivalPlayer_C::PressFuelButtonTimerHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FuelButtonStart) == 0x0010C0, "Member 'ASurvivalPlayer_C::FuelButtonStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FuelButtonFinish) == 0x0010D0, "Member 'ASurvivalPlayer_C::FuelButtonFinish' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FuelButtonCancel) == 0x0010E0, "Member 'ASurvivalPlayer_C::FuelButtonCancel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BattleMode) == 0x0010F0, "Member 'ASurvivalPlayer_C::BattleMode' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryRef) == 0x0010F8, "Member 'ASurvivalPlayer_C::InventoryRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BackpackContainer) == 0x001100, "Member 'ASurvivalPlayer_C::BackpackContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SkillContainer) == 0x001108, "Member 'ASurvivalPlayer_C::SkillContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ArmorContainer) == 0x001110, "Member 'ASurvivalPlayer_C::ArmorContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OutfitContainer) == 0x001118, "Member 'ASurvivalPlayer_C::OutfitContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PantsContainer) == 0x001120, "Member 'ASurvivalPlayer_C::PantsContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InteractingItem) == 0x001128, "Member 'ASurvivalPlayer_C::InteractingItem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EquipmentStatus) == 0x001130, "Member 'ASurvivalPlayer_C::EquipmentStatus' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentActiveSlot) == 0x00113B, "Member 'ASurvivalPlayer_C::CurrentActiveSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotPrimaryWeapon) == 0x001140, "Member 'ASurvivalPlayer_C::JSISlotPrimaryWeapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MeleeWeaponSlot) == 0x001148, "Member 'ASurvivalPlayer_C::MeleeWeaponSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotSecondaryWeapon) == 0x001150, "Member 'ASurvivalPlayer_C::JSISlotSecondaryWeapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotPistolWeapon) == 0x001158, "Member 'ASurvivalPlayer_C::JSISlotPistolWeapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ContainersData) == 0x001160, "Member 'ASurvivalPlayer_C::ContainersData' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ContainerItems) == 0x001170, "Member 'ASurvivalPlayer_C::ContainerItems' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DynamicContainers) == 0x001180, "Member 'ASurvivalPlayer_C::DynamicContainers' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentFocusedContainer) == 0x001190, "Member 'ASurvivalPlayer_C::CurrentFocusedContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MPContainerWidget) == 0x001198, "Member 'ASurvivalPlayer_C::MPContainerWidget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentFocusedItem) == 0x0011A0, "Member 'ASurvivalPlayer_C::CurrentFocusedItem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WaitToUIDHandle) == 0x0011A8, "Member 'ASurvivalPlayer_C::WaitToUIDHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsDriver) == 0x0011B0, "Member 'ASurvivalPlayer_C::IsDriver' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraCurrentFOV) == 0x0011B8, "Member 'ASurvivalPlayer_C::CameraCurrentFOV' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MoveRightAxis) == 0x0011C0, "Member 'ASurvivalPlayer_C::MoveRightAxis' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MoveForwardAxis) == 0x0011C8, "Member 'ASurvivalPlayer_C::MoveForwardAxis' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentCameraLagMaxDistance) == 0x0011D0, "Member 'ASurvivalPlayer_C::CurrentCameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HouseBoxes) == 0x0011D8, "Member 'ASurvivalPlayer_C::HouseBoxes' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LevelStreamer) == 0x0011E8, "Member 'ASurvivalPlayer_C::LevelStreamer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TakingDamage) == 0x0011F0, "Member 'ASurvivalPlayer_C::TakingDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastHitLocation) == 0x0011F8, "Member 'ASurvivalPlayer_C::LastHitLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastPlayingPainMontage) == 0x001210, "Member 'ASurvivalPlayer_C::LastPlayingPainMontage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EntrancePoint) == 0x001218, "Member 'ASurvivalPlayer_C::EntrancePoint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InBunker) == 0x001230, "Member 'ASurvivalPlayer_C::InBunker' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerEntranceHandle) == 0x001238, "Member 'ASurvivalPlayer_C::BunkerEntranceHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotHelmet) == 0x001240, "Member 'ASurvivalPlayer_C::JSISlotHelmet' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotArmor) == 0x001248, "Member 'ASurvivalPlayer_C::JSISlotArmor' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BigMapWidget) == 0x001250, "Member 'ASurvivalPlayer_C::BigMapWidget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Vehicle) == 0x001258, "Member 'ASurvivalPlayer_C::Vehicle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MeleeSwingBegin) == 0x001260, "Member 'ASurvivalPlayer_C::MeleeSwingBegin' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MeleeSwingEnd) == 0x001278, "Member 'ASurvivalPlayer_C::MeleeSwingEnd' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, QuestEventListener) == 0x001290, "Member 'ASurvivalPlayer_C::QuestEventListener' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RefillOil) == 0x0012A0, "Member 'ASurvivalPlayer_C::RefillOil' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AllowRefillOil) == 0x0012A1, "Member 'ASurvivalPlayer_C::AllowRefillOil' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GasolineSocket) == 0x0012A8, "Member 'ASurvivalPlayer_C::GasolineSocket' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CanSkipDamageAnim) == 0x0012B0, "Member 'ASurvivalPlayer_C::CanSkipDamageAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerListener) == 0x0012B8, "Member 'ASurvivalPlayer_C::PlayerListener' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Qostuil) == 0x0012C8, "Member 'ASurvivalPlayer_C::Qostuil' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RequestsForUID) == 0x0012D0, "Member 'ASurvivalPlayer_C::RequestsForUID' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsUsingItem) == 0x0012E0, "Member 'ASurvivalPlayer_C::IsUsingItem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Effects) == 0x0012E8, "Member 'ASurvivalPlayer_C::Effects' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RequestsForUID_Slots) == 0x0012F8, "Member 'ASurvivalPlayer_C::RequestsForUID_Slots' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InHouseCameraSettings) == 0x001308, "Member 'ASurvivalPlayer_C::InHouseCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerListeners) == 0x001330, "Member 'ASurvivalPlayer_C::PlayerListeners' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InCarCameraSettings) == 0x001340, "Member 'ASurvivalPlayer_C::InCarCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LocalPlayer) == 0x001368, "Member 'ASurvivalPlayer_C::LocalPlayer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, _) == 0x001370, "Member 'ASurvivalPlayer_C::_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InFirewatch) == 0x001380, "Member 'ASurvivalPlayer_C::InFirewatch' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PocketContainer) == 0x001388, "Member 'ASurvivalPlayer_C::PocketContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentCameraShake) == 0x001390, "Member 'ASurvivalPlayer_C::CurrentCameraShake' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastCameraShake) == 0x001398, "Member 'ASurvivalPlayer_C::LastCameraShake' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EquipmentMaterials) == 0x0013A0, "Member 'ASurvivalPlayer_C::EquipmentMaterials' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ArmorName) == 0x0013F0, "Member 'ASurvivalPlayer_C::ArmorName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OuterwearName) == 0x0013F8, "Member 'ASurvivalPlayer_C::OuterwearName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BackpackName) == 0x001400, "Member 'ASurvivalPlayer_C::BackpackName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HelmetName) == 0x001408, "Member 'ASurvivalPlayer_C::HelmetName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FogController) == 0x001410, "Member 'ASurvivalPlayer_C::FogController' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerIndex) == 0x001418, "Member 'ASurvivalPlayer_C::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsDamageable) == 0x00141C, "Member 'ASurvivalPlayer_C::IsDamageable' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NightSceneCameraSettings) == 0x001420, "Member 'ASurvivalPlayer_C::NightSceneCameraSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InCutscene) == 0x001448, "Member 'ASurvivalPlayer_C::InCutscene' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ToSlotIndex) == 0x00144C, "Member 'ASurvivalPlayer_C::ToSlotIndex' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DeathEvent) == 0x001450, "Member 'ASurvivalPlayer_C::DeathEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JacketsToWearForTrailer) == 0x001460, "Member 'ASurvivalPlayer_C::JacketsToWearForTrailer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ToWearIncrement) == 0x001470, "Member 'ASurvivalPlayer_C::ToWearIncrement' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HelmetsToWearForTrailer) == 0x001480, "Member 'ASurvivalPlayer_C::HelmetsToWearForTrailer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PantsToWearForTrailer) == 0x001490, "Member 'ASurvivalPlayer_C::PantsToWearForTrailer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StartItems) == 0x0014A0, "Member 'ASurvivalPlayer_C::StartItems' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MouseSense) == 0x0014B0, "Member 'ASurvivalPlayer_C::MouseSense' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DropItemsWhenDie) == 0x0014B8, "Member 'ASurvivalPlayer_C::DropItemsWhenDie' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsEnabledInventorySync) == 0x0014B9, "Member 'ASurvivalPlayer_C::IsEnabledInventorySync' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SpeedScale) == 0x0014C0, "Member 'ASurvivalPlayer_C::SpeedScale' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CountFrags) == 0x0014C8, "Member 'ASurvivalPlayer_C::CountFrags' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CountDeaths) == 0x0014D0, "Member 'ASurvivalPlayer_C::CountDeaths' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HitCounter) == 0x0014D4, "Member 'ASurvivalPlayer_C::HitCounter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ClimbPrepare) == 0x0014D8, "Member 'ASurvivalPlayer_C::ClimbPrepare' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Ragdoll) == 0x0014D9, "Member 'ASurvivalPlayer_C::Ragdoll' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PantsName) == 0x0014DC, "Member 'ASurvivalPlayer_C::PantsName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponName) == 0x0014E4, "Member 'ASurvivalPlayer_C::WeaponName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryInited) == 0x0014EC, "Member 'ASurvivalPlayer_C::InventoryInited' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnRessurectItems) == 0x0014F0, "Member 'ASurvivalPlayer_C::OnRessurectItems' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HighlightedActor) == 0x001500, "Member 'ASurvivalPlayer_C::HighlightedActor' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootChanceModAsset) == 0x001508, "Member 'ASurvivalPlayer_C::LootChanceModAsset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultCollisionResponse) == 0x001510, "Member 'ASurvivalPlayer_C::DefaultCollisionResponse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ItemsOnGround) == 0x001560, "Member 'ASurvivalPlayer_C::ItemsOnGround' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HouseEnterEvent) == 0x001570, "Member 'ASurvivalPlayer_C::HouseEnterEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HouseLeaveEvent) == 0x001580, "Member 'ASurvivalPlayer_C::HouseLeaveEvent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnGroundSlotIndex) == 0x001590, "Member 'ASurvivalPlayer_C::OnGroundSlotIndex' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ItemInfo) == 0x001598, "Member 'ASurvivalPlayer_C::ItemInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TriggerSpawner) == 0x001600, "Member 'ASurvivalPlayer_C::TriggerSpawner' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentFootwear) == 0x001608, "Member 'ASurvivalPlayer_C::CurrentFootwear' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SitIndex) == 0x00160C, "Member 'ASurvivalPlayer_C::SitIndex' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UrovenShuma) == 0x001610, "Member 'ASurvivalPlayer_C::UrovenShuma' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UrovenShumaTimer) == 0x001618, "Member 'ASurvivalPlayer_C::UrovenShumaTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootingHeight) == 0x001620, "Member 'ASurvivalPlayer_C::LootingHeight' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OneContainerToRule) == 0x001628, "Member 'ASurvivalPlayer_C::OneContainerToRule' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SitIndexTemp) == 0x001630, "Member 'ASurvivalPlayer_C::SitIndexTemp' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InClimb) == 0x001634, "Member 'ASurvivalPlayer_C::InClimb' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsInteracting) == 0x001635, "Member 'ASurvivalPlayer_C::IsInteracting' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ItemsToDelete) == 0x001638, "Member 'ASurvivalPlayer_C::ItemsToDelete' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CraftState) == 0x001648, "Member 'ASurvivalPlayer_C::CraftState' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InWater) == 0x001649, "Member 'ASurvivalPlayer_C::InWater' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FallingDamage) == 0x001650, "Member 'ASurvivalPlayer_C::FallingDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimOnHold) == 0x001658, "Member 'ASurvivalPlayer_C::AimOnHold' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopWidget) == 0x001660, "Member 'ASurvivalPlayer_C::ShopWidget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CashMoney) == 0x001668, "Member 'ASurvivalPlayer_C::CashMoney' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ItemsToTrade) == 0x001670, "Member 'ASurvivalPlayer_C::ItemsToTrade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UseRadio) == 0x001680, "Member 'ASurvivalPlayer_C::UseRadio' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AllowVoice) == 0x001681, "Member 'ASurvivalPlayer_C::AllowVoice' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotBackpack) == 0x001688, "Member 'ASurvivalPlayer_C::JSISlotBackpack' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotOutfit) == 0x001690, "Member 'ASurvivalPlayer_C::JSISlotOutfit' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotPants) == 0x001698, "Member 'ASurvivalPlayer_C::JSISlotPants' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JSISlotPocket) == 0x0016A0, "Member 'ASurvivalPlayer_C::JSISlotPocket' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sneaky) == 0x0016A8, "Member 'ASurvivalPlayer_C::Sneaky' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CanHoldWeapon) == 0x0016A9, "Member 'ASurvivalPlayer_C::CanHoldWeapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootPoint) == 0x0016B0, "Member 'ASurvivalPlayer_C::LootPoint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NearlyLanded) == 0x0016B8, "Member 'ASurvivalPlayer_C::NearlyLanded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InteractDistance) == 0x0016C0, "Member 'ASurvivalPlayer_C::InteractDistance' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JumpAllowed) == 0x0016C8, "Member 'ASurvivalPlayer_C::JumpAllowed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NewVar_0) == 0x0016D0, "Member 'ASurvivalPlayer_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchAllowed) == 0x0016D8, "Member 'ASurvivalPlayer_C::CrouchAllowed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerHided) == 0x0016D9, "Member 'ASurvivalPlayer_C::PlayerHided' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, QuestBkPkState) == 0x0016DA, "Member 'ASurvivalPlayer_C::QuestBkPkState' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BinocularState) == 0x0016DB, "Member 'ASurvivalPlayer_C::BinocularState' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CustomInputBlockers) == 0x0016E0, "Member 'ASurvivalPlayer_C::CustomInputBlockers' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HighlightActors) == 0x0016F0, "Member 'ASurvivalPlayer_C::HighlightActors' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SurvPC) == 0x0016F8, "Member 'ASurvivalPlayer_C::SurvPC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerHouseBox) == 0x001700, "Member 'ASurvivalPlayer_C::BunkerHouseBox' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HiddenQuestMarks) == 0x001708, "Member 'ASurvivalPlayer_C::HiddenQuestMarks' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SurvPlayerBeginPlayFinished) == 0x001718, "Member 'ASurvivalPlayer_C::SurvPlayerBeginPlayFinished' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TerminalMark) == 0x001720, "Member 'ASurvivalPlayer_C::TerminalMark' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerEntryMark) == 0x001728, "Member 'ASurvivalPlayer_C::BunkerEntryMark' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerMarksLocations) == 0x001730, "Member 'ASurvivalPlayer_C::BunkerMarksLocations' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerMarks) == 0x001740, "Member 'ASurvivalPlayer_C::BunkerMarks' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerCheckTimer) == 0x001750, "Member 'ASurvivalPlayer_C::BunkerCheckTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MarkInBunker) == 0x001758, "Member 'ASurvivalPlayer_C::MarkInBunker' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultCollisionResponse_Capsule) == 0x001760, "Member 'ASurvivalPlayer_C::DefaultCollisionResponse_Capsule' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Reverb) == 0x0017B0, "Member 'ASurvivalPlayer_C::Reverb' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsPaused) == 0x0017B8, "Member 'ASurvivalPlayer_C::IsPaused' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ClientLeftGame_) == 0x0017B9, "Member 'ASurvivalPlayer_C::ClientLeftGame_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ClientLeftLoot) == 0x0017C0, "Member 'ASurvivalPlayer_C::ClientLeftLoot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimeForAutoDestroy) == 0x0017D0, "Member 'ASurvivalPlayer_C::TimeForAutoDestroy' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DummyCharacterDestructionTimer) == 0x0017D8, "Member 'ASurvivalPlayer_C::DummyCharacterDestructionTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlizzardWarningSound) == 0x0017E0, "Member 'ASurvivalPlayer_C::BlizzardWarningSound' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InputRightVector) == 0x001810, "Member 'ASurvivalPlayer_C::InputRightVector' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InputForwardVector) == 0x001828, "Member 'ASurvivalPlayer_C::InputForwardVector' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Delta_Seconds) == 0x001840, "Member 'ASurvivalPlayer_C::Delta_Seconds' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MicrophoneLevel) == 0x001848, "Member 'ASurvivalPlayer_C::MicrophoneLevel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RecievedAudioLevel) == 0x001850, "Member 'ASurvivalPlayer_C::RecievedAudioLevel' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, VoiceVolumeMultiplier) == 0x001858, "Member 'ASurvivalPlayer_C::VoiceVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Crawling) == 0x001860, "Member 'ASurvivalPlayer_C::Crawling' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PS_TDB) == 0x001868, "Member 'ASurvivalPlayer_C::PS_TDB' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InitialInventoryInited) == 0x001870, "Member 'ASurvivalPlayer_C::InitialInventoryInited' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ItemTypePlayRate) == 0x001878, "Member 'ASurvivalPlayer_C::ItemTypePlayRate' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Snapshot) == 0x0018C8, "Member 'ASurvivalPlayer_C::Snapshot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerPlayerStart) == 0x001900, "Member 'ASurvivalPlayer_C::BunkerPlayerStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootTimeMultiplier) == 0x001918, "Member 'ASurvivalPlayer_C::LootTimeMultiplier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnSprint) == 0x001920, "Member 'ASurvivalPlayer_C::OnSprint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintSpeedMultiplier) == 0x001930, "Member 'ASurvivalPlayer_C::SprintSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SwimSpeedMultiplier) == 0x001938, "Member 'ASurvivalPlayer_C::SwimSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchSpeedMultiplier) == 0x001940, "Member 'ASurvivalPlayer_C::CrouchSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Inviter) == 0x001948, "Member 'ASurvivalPlayer_C::Inviter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimPP) == 0x001950, "Member 'ASurvivalPlayer_C::AimPP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsReadyToTrade) == 0x001960, "Member 'ASurvivalPlayer_C::IsReadyToTrade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TradeItems) == 0x001968, "Member 'ASurvivalPlayer_C::TradeItems' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Trader) == 0x001978, "Member 'ASurvivalPlayer_C::Trader' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultLegs) == 0x001980, "Member 'ASurvivalPlayer_C::DefaultLegs' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EnoughSpaceForTrade) == 0x0019B0, "Member 'ASurvivalPlayer_C::EnoughSpaceForTrade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CheckedForSpace) == 0x0019B1, "Member 'ASurvivalPlayer_C::CheckedForSpace' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EnoughSpaceLocally) == 0x0019B2, "Member 'ASurvivalPlayer_C::EnoughSpaceLocally' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultBody) == 0x0019B8, "Member 'ASurvivalPlayer_C::DefaultBody' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockChangingCamera) == 0x0019E8, "Member 'ASurvivalPlayer_C::BlockChangingCamera' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DLSSMode) == 0x0019E9, "Member 'ASurvivalPlayer_C::DLSSMode' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DLSSModeTxt) == 0x0019F0, "Member 'ASurvivalPlayer_C::DLSSModeTxt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DLSSNumber) == 0x001A08, "Member 'ASurvivalPlayer_C::DLSSNumber' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimPPMAterial) == 0x001A10, "Member 'ASurvivalPlayer_C::AimPPMAterial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InitialPostProcessSettings) == 0x001A20, "Member 'ASurvivalPlayer_C::InitialPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DLSSModeChanged) == 0x002100, "Member 'ASurvivalPlayer_C::DLSSModeChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Drunk_PP_Material) == 0x002110, "Member 'ASurvivalPlayer_C::Drunk_PP_Material' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TempVar_Blur) == 0x002118, "Member 'ASurvivalPlayer_C::TempVar_Blur' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TempVar_Saturation) == 0x002120, "Member 'ASurvivalPlayer_C::TempVar_Saturation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SevereIntoxication) == 0x002128, "Member 'ASurvivalPlayer_C::SevereIntoxication' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TempVarDrunk_Enabled) == 0x002130, "Member 'ASurvivalPlayer_C::TempVarDrunk_Enabled' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LoadInventoryFailed) == 0x002138, "Member 'ASurvivalPlayer_C::LoadInventoryFailed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BunkerPlayerStartRot) == 0x002140, "Member 'ASurvivalPlayer_C::BunkerPlayerStartRot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CollimatorPP) == 0x002158, "Member 'ASurvivalPlayer_C::CollimatorPP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ArmorTier) == 0x002160, "Member 'ASurvivalPlayer_C::ArmorTier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HelmetTier) == 0x002164, "Member 'ASurvivalPlayer_C::HelmetTier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UpdateKDCounter) == 0x002168, "Member 'ASurvivalPlayer_C::UpdateKDCounter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SensCurve) == 0x002178, "Member 'ASurvivalPlayer_C::SensCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FovSenseMultiplier) == 0x002180, "Member 'ASurvivalPlayer_C::FovSenseMultiplier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockAim) == 0x002188, "Member 'ASurvivalPlayer_C::BlockAim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ChangeDirectionAngle) == 0x002190, "Member 'ASurvivalPlayer_C::ChangeDirectionAngle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsDirectionChanged) == 0x002198, "Member 'ASurvivalPlayer_C::IsDirectionChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NewDirection) == 0x00219C, "Member 'ASurvivalPlayer_C::NewDirection' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PreviousActiveSlot) == 0x0021A0, "Member 'ASurvivalPlayer_C::PreviousActiveSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MoveInputLastSended) == 0x0021A8, "Member 'ASurvivalPlayer_C::MoveInputLastSended' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, From__ContainerToContainer__) == 0x0021B8, "Member 'ASurvivalPlayer_C::From__ContainerToContainer__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, To__ContainerToContainer___) == 0x0021C0, "Member 'ASurvivalPlayer_C::To__ContainerToContainer___' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, From_Slot_Ref__ContainerToContainer__) == 0x0021C8, "Member 'ASurvivalPlayer_C::From_Slot_Ref__ContainerToContainer__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, To_Slot_Ref__ContainerToContainer__) == 0x0021D0, "Member 'ASurvivalPlayer_C::To_Slot_Ref__ContainerToContainer__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Container__OnSlotDoubleClick__) == 0x0021D8, "Member 'ASurvivalPlayer_C::Container__OnSlotDoubleClick__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Slot_Ref__OnSlotDoubleClick__) == 0x0021E0, "Member 'ASurvivalPlayer_C::Slot_Ref__OnSlotDoubleClick__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Slot_Receiver__ItemsCombined__) == 0x0021E8, "Member 'ASurvivalPlayer_C::Slot_Receiver__ItemsCombined__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Slot_Dropped__ItemsCombined__) == 0x0021F0, "Member 'ASurvivalPlayer_C::Slot_Dropped__ItemsCombined__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Container__MouseClickInPlayerInventory__) == 0x0021F8, "Member 'ASurvivalPlayer_C::Container__MouseClickInPlayerInventory__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Slot_Ref__MouseClickInPlayerInventory__) == 0x002200, "Member 'ASurvivalPlayer_C::Slot_Ref__MouseClickInPlayerInventory__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Pickups_Info__MouseClickInPlayerInventory__) == 0x002208, "Member 'ASurvivalPlayer_C::Pickups_Info__MouseClickInPlayerInventory__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Added_Data__MouseClickInPlayerInventory__) == 0x002270, "Member 'ASurvivalPlayer_C::Added_Data__MouseClickInPlayerInventory__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Added_Items__MouseClickInPlayerInventory__) == 0x002280, "Member 'ASurvivalPlayer_C::Added_Items__MouseClickInPlayerInventory__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Slot_Index__MouseClickInPlayerInventory__) == 0x002290, "Member 'ASurvivalPlayer_C::Slot_Index__MouseClickInPlayerInventory__' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BrokenArmorCoef) == 0x002298, "Member 'ASurvivalPlayer_C::BrokenArmorCoef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SkyLightModifiers) == 0x0022A0, "Member 'ASurvivalPlayer_C::SkyLightModifiers' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponPlaceholderPrimary) == 0x0022B0, "Member 'ASurvivalPlayer_C::WeaponPlaceholderPrimary' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponPlaceholderSecondary) == 0x0022B8, "Member 'ASurvivalPlayer_C::WeaponPlaceholderSecondary' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsKnockedDown) == 0x0022C0, "Member 'ASurvivalPlayer_C::IsKnockedDown' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsKilled) == 0x0022C1, "Member 'ASurvivalPlayer_C::IsKilled' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnockdownCounter) == 0x0022C4, "Member 'ASurvivalPlayer_C::KnockdownCounter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sound_Event_Radial_Damage) == 0x0022C8, "Member 'ASurvivalPlayer_C::Sound_Event_Radial_Damage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ContusionFmodSnapshot) == 0x0022D0, "Member 'ASurvivalPlayer_C::ContusionFmodSnapshot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimerGranadeActive) == 0x0022D8, "Member 'ASurvivalPlayer_C::TimerGranadeActive' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AimGrenade) == 0x0022D9, "Member 'ASurvivalPlayer_C::AimGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DeadBody) == 0x0022E0, "Member 'ASurvivalPlayer_C::DeadBody' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GrenadeSelected) == 0x0022E8, "Member 'ASurvivalPlayer_C::GrenadeSelected' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DeadBodyItems) == 0x0022F0, "Member 'ASurvivalPlayer_C::DeadBodyItems' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, F_Contusion_Fmod) == 0x002300, "Member 'ASurvivalPlayer_C::F_Contusion_Fmod' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsFireDamage) == 0x002308, "Member 'ASurvivalPlayer_C::IsFireDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsRadialDamage) == 0x002309, "Member 'ASurvivalPlayer_C::IsRadialDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InitedWeaponPlaceholder) == 0x002310, "Member 'ASurvivalPlayer_C::InitedWeaponPlaceholder' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GrenadeWeaponNameEquip) == 0x002318, "Member 'ASurvivalPlayer_C::GrenadeWeaponNameEquip' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SpawningGrenade) == 0x002328, "Member 'ASurvivalPlayer_C::SpawningGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsDamageMolotov) == 0x002330, "Member 'ASurvivalPlayer_C::IsDamageMolotov' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ThrowGrenade) == 0x002331, "Member 'ASurvivalPlayer_C::ThrowGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sound_Event_Fire_Damage) == 0x002338, "Member 'ASurvivalPlayer_C::Sound_Event_Fire_Damage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Contusion_F) == 0x002340, "Member 'ASurvivalPlayer_C::Contusion_F' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentWeaponItemInfo) == 0x002348, "Member 'ASurvivalPlayer_C::CurrentWeaponItemInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerStateBreathing) == 0x002370, "Member 'ASurvivalPlayer_C::PlayerStateBreathing' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TempWP) == 0x002378, "Member 'ASurvivalPlayer_C::TempWP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FMODBreathingDefault) == 0x002380, "Member 'ASurvivalPlayer_C::FMODBreathingDefault' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FModEventBreathingDefault) == 0x002388, "Member 'ASurvivalPlayer_C::FModEventBreathingDefault' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashWidjet) == 0x002390, "Member 'ASurvivalPlayer_C::FlashWidjet' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Contusion_) == 0x002398, "Member 'ASurvivalPlayer_C::Contusion_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ExplosionGrenadeInHand) == 0x002399, "Member 'ASurvivalPlayer_C::ExplosionGrenadeInHand' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BoomGrenadeInHand) == 0x00239A, "Member 'ASurvivalPlayer_C::BoomGrenadeInHand' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Inventory_Ref) == 0x0023A0, "Member 'ASurvivalPlayer_C::Inventory_Ref' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraLocation) == 0x0023A8, "Member 'ASurvivalPlayer_C::CameraLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FrameWeight) == 0x0023C0, "Member 'ASurvivalPlayer_C::FrameWeight' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sharpen) == 0x0023C8, "Member 'ASurvivalPlayer_C::Sharpen' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TimerStopFlashEffect) == 0x0023D0, "Member 'ASurvivalPlayer_C::TimerStopFlashEffect' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashMaterial) == 0x0023D8, "Member 'ASurvivalPlayer_C::FlashMaterial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Familiarity) == 0x0023E0, "Member 'ASurvivalPlayer_C::Familiarity' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPSMode) == 0x0023F0, "Member 'ASurvivalPlayer_C::FPSMode' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DistanceToExplosion) == 0x0023F8, "Member 'ASurvivalPlayer_C::DistanceToExplosion' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShakeGrenadeMiddle) == 0x002400, "Member 'ASurvivalPlayer_C::ShakeGrenadeMiddle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShakeGrenadeF1) == 0x002408, "Member 'ASurvivalPlayer_C::ShakeGrenadeF1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DistanceNearShake) == 0x002410, "Member 'ASurvivalPlayer_C::DistanceNearShake' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GrenadeF1CameraShakeRef) == 0x002418, "Member 'ASurvivalPlayer_C::GrenadeF1CameraShakeRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShakeGrenade333) == 0x002420, "Member 'ASurvivalPlayer_C::ShakeGrenade333' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DistanceToExplosionLong) == 0x002428, "Member 'ASurvivalPlayer_C::DistanceToExplosionLong' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DistanceToExplosionMiddle) == 0x002430, "Member 'ASurvivalPlayer_C::DistanceToExplosionMiddle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShakeGrenadeNear) == 0x002438, "Member 'ASurvivalPlayer_C::ShakeGrenadeNear' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentGrenade) == 0x002440, "Member 'ASurvivalPlayer_C::CurrentGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DropBoxRef) == 0x002448, "Member 'ASurvivalPlayer_C::DropBoxRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EquipContainers) == 0x002450, "Member 'ASurvivalPlayer_C::EquipContainers' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnKnockdownStart) == 0x002460, "Member 'ASurvivalPlayer_C::OnKnockdownStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponAimAnimFinished) == 0x002470, "Member 'ASurvivalPlayer_C::WeaponAimAnimFinished' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsDeathAnimEnded) == 0x002471, "Member 'ASurvivalPlayer_C::IsDeathAnimEnded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponPlaceholderShadow) == 0x002478, "Member 'ASurvivalPlayer_C::WeaponPlaceholderShadow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InCraftstation) == 0x002480, "Member 'ASurvivalPlayer_C::InCraftstation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ResRadius) == 0x002488, "Member 'ASurvivalPlayer_C::ResRadius' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastMovementMode) == 0x002490, "Member 'ASurvivalPlayer_C::LastMovementMode' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DeadCamera) == 0x002498, "Member 'ASurvivalPlayer_C::DeadCamera' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastHittBoneName) == 0x0024A0, "Member 'ASurvivalPlayer_C::LastHittBoneName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastHitAngle) == 0x0024A8, "Member 'ASurvivalPlayer_C::LastHitAngle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastHitDirection) == 0x0024B0, "Member 'ASurvivalPlayer_C::LastHitDirection' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsGrenadeDamage) == 0x0024C8, "Member 'ASurvivalPlayer_C::IsGrenadeDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TabIsOpened) == 0x0024C9, "Member 'ASurvivalPlayer_C::TabIsOpened' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Highlighted_Actor) == 0x0024D0, "Member 'ASurvivalPlayer_C::Highlighted_Actor' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FullFlashDuration) == 0x0024D8, "Member 'ASurvivalPlayer_C::FullFlashDuration' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FadeInterval) == 0x0024E0, "Member 'ASurvivalPlayer_C::FadeInterval' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashIntensity) == 0x0024E8, "Member 'ASurvivalPlayer_C::FlashIntensity' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashFadeSpeed) == 0x0024F0, "Member 'ASurvivalPlayer_C::FlashFadeSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AfterimageIntensity) == 0x0024F8, "Member 'ASurvivalPlayer_C::AfterimageIntensity' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RingingVolume) == 0x002500, "Member 'ASurvivalPlayer_C::RingingVolume' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RingingFadeSpeed) == 0x002508, "Member 'ASurvivalPlayer_C::RingingFadeSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Ringing) == 0x002510, "Member 'ASurvivalPlayer_C::Ringing' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PP_Flashbang_Dynamic) == 0x002518, "Member 'ASurvivalPlayer_C::PP_Flashbang_Dynamic' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bFadingFlashEffect) == 0x002520, "Member 'ASurvivalPlayer_C::bFadingFlashEffect' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RenderTexture) == 0x002528, "Member 'ASurvivalPlayer_C::RenderTexture' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SceneCaptureComponent2D) == 0x002530, "Member 'ASurvivalPlayer_C::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsSprinting) == 0x002538, "Member 'ASurvivalPlayer_C::IsSprinting' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ToSync) == 0x002539, "Member 'ASurvivalPlayer_C::ToSync' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Primary_Weapon_Slot) == 0x00253C, "Member 'ASurvivalPlayer_C::Primary_Weapon_Slot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Secondary_Weapon_Slot) == 0x002544, "Member 'ASurvivalPlayer_C::Secondary_Weapon_Slot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShowUI) == 0x00254C, "Member 'ASurvivalPlayer_C::ShowUI' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ActiveWeaponPlaceholder) == 0x002550, "Member 'ASurvivalPlayer_C::ActiveWeaponPlaceholder' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopInteract) == 0x002558, "Member 'ASurvivalPlayer_C::ShopInteract' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopActors) == 0x002560, "Member 'ASurvivalPlayer_C::ShopActors' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopStart) == 0x002570, "Member 'ASurvivalPlayer_C::ShopStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopEnd) == 0x002580, "Member 'ASurvivalPlayer_C::ShopEnd' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Has_Reset_Timer) == 0x002590, "Member 'ASurvivalPlayer_C::Has_Reset_Timer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Timer_by_reset) == 0x002598, "Member 'ASurvivalPlayer_C::Timer_by_reset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Food_Desaturation) == 0x0025A0, "Member 'ASurvivalPlayer_C::Food_Desaturation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Water_blur) == 0x0025A4, "Member 'ASurvivalPlayer_C::Water_blur' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Water_Blur_Radius) == 0x0025A8, "Member 'ASurvivalPlayer_C::Water_Blur_Radius' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Water_Density) == 0x0025AC, "Member 'ASurvivalPlayer_C::Water_Density' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Food_PP) == 0x0025B0, "Member 'ASurvivalPlayer_C::Food_PP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Shop) == 0x0025B8, "Member 'ASurvivalPlayer_C::Shop' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FoodWaterPP_Destruaction) == 0x0025BC, "Member 'ASurvivalPlayer_C::FoodWaterPP_Destruaction' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WaterPP_blur_alpha) == 0x0025C0, "Member 'ASurvivalPlayer_C::WaterPP_blur_alpha' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HitPP_Alpha) == 0x0025C4, "Member 'ASurvivalPlayer_C::HitPP_Alpha' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FoodWaterPP_Water_Blur_Radius) == 0x0025C8, "Member 'ASurvivalPlayer_C::FoodWaterPP_Water_Blur_Radius' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Water_PP) == 0x0025D0, "Member 'ASurvivalPlayer_C::Water_PP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentShopShake) == 0x0025D8, "Member 'ASurvivalPlayer_C::CurrentShopShake' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FlashlighRotation) == 0x0025E0, "Member 'ASurvivalPlayer_C::FlashlighRotation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Blood_PP) == 0x0025F8, "Member 'ASurvivalPlayer_C::Blood_PP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Hit_PP) == 0x002600, "Member 'ASurvivalPlayer_C::Hit_PP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Blood_PP_lerp) == 0x002608, "Member 'ASurvivalPlayer_C::Blood_PP_lerp' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Blood_PP_random_value) == 0x002610, "Member 'ASurvivalPlayer_C::Blood_PP_random_value' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BloodPP_midle_value) == 0x002618, "Member 'ASurvivalPlayer_C::BloodPP_midle_value' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BloodPPMinValue) == 0x002620, "Member 'ASurvivalPlayer_C::BloodPPMinValue' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReloadEventLocaly) == 0x002628, "Member 'ASurvivalPlayer_C::ReloadEventLocaly' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PressReloadWeapon) == 0x002638, "Member 'ASurvivalPlayer_C::PressReloadWeapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ChangeWeaponActiveSlot) == 0x002648, "Member 'ASurvivalPlayer_C::ChangeWeaponActiveSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HandlerBloodEffect) == 0x002658, "Member 'ASurvivalPlayer_C::HandlerBloodEffect' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, House_Ambient_Off) == 0x002660, "Member 'ASurvivalPlayer_C::House_Ambient_Off' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, M_HitBlurPP) == 0x002668, "Member 'ASurvivalPlayer_C::M_HitBlurPP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HitBlurPPLerp) == 0x002670, "Member 'ASurvivalPlayer_C::HitBlurPPLerp' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintByToggle) == 0x002674, "Member 'ASurvivalPlayer_C::SprintByToggle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GameSettings) == 0x002678, "Member 'ASurvivalPlayer_C::GameSettings' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PP_Effects) == 0x002680, "Member 'ASurvivalPlayer_C::PP_Effects' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PrimaryPointId) == 0x002688, "Member 'ASurvivalPlayer_C::PrimaryPointId' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SecondaryPointId) == 0x00268C, "Member 'ASurvivalPlayer_C::SecondaryPointId' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, AddBunkerMarks) == 0x002690, "Member 'ASurvivalPlayer_C::AddBunkerMarks' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DeadBodyV2) == 0x002698, "Member 'ASurvivalPlayer_C::DeadBodyV2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ForceHidden) == 0x0026A0, "Member 'ASurvivalPlayer_C::ForceHidden' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CrouchScopeAnimInProcess) == 0x0026A1, "Member 'ASurvivalPlayer_C::CrouchScopeAnimInProcess' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WeaponPlaceholderPistol) == 0x0026A8, "Member 'ASurvivalPlayer_C::WeaponPlaceholderPistol' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PistolWeaponSlotName) == 0x0026B0, "Member 'ASurvivalPlayer_C::PistolWeaponSlotName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SelfMinushealing) == 0x0026B8, "Member 'ASurvivalPlayer_C::SelfMinushealing' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SelfMinushealingTimerHandle) == 0x0026C0, "Member 'ASurvivalPlayer_C::SelfMinushealingTimerHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TpsToFpsCameraShake) == 0x0026C8, "Member 'ASurvivalPlayer_C::TpsToFpsCameraShake' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RoomTone) == 0x0026D0, "Member 'ASurvivalPlayer_C::RoomTone' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RoomReverb) == 0x0026D8, "Member 'ASurvivalPlayer_C::RoomReverb' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LoadingActor) == 0x0026E0, "Member 'ASurvivalPlayer_C::LoadingActor' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CanMoveWhileUsingItem) == 0x0026E1, "Member 'ASurvivalPlayer_C::CanMoveWhileUsingItem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ItemsCache) == 0x0026E8, "Member 'ASurvivalPlayer_C::ItemsCache' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Eating) == 0x0026F8, "Member 'ASurvivalPlayer_C::Eating' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FMODAudioContusion) == 0x002700, "Member 'ASurvivalPlayer_C::FMODAudioContusion' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FreeLook_Active) == 0x002708, "Member 'ASurvivalPlayer_C::FreeLook_Active' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NeedToDelete_SavedFinalRotation_FreeLook) == 0x002710, "Member 'ASurvivalPlayer_C::NeedToDelete_SavedFinalRotation_FreeLook' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NeedToDelete_SavedStarterRotation_FreeLook) == 0x002728, "Member 'ASurvivalPlayer_C::NeedToDelete_SavedStarterRotation_FreeLook' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GrenadeOpened) == 0x002740, "Member 'ASurvivalPlayer_C::GrenadeOpened' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RememberOldRotation) == 0x002748, "Member 'ASurvivalPlayer_C::RememberOldRotation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Scope_WallOffset_Check) == 0x002760, "Member 'ASurvivalPlayer_C::Scope_WallOffset_Check' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnDeath) == 0x002768, "Member 'ASurvivalPlayer_C::OnDeath' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TargetInteractDistance) == 0x002778, "Member 'ASurvivalPlayer_C::TargetInteractDistance' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ThreeDCharacter) == 0x002780, "Member 'ASurvivalPlayer_C::ThreeDCharacter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DistanceToInteractable) == 0x002788, "Member 'ASurvivalPlayer_C::DistanceToInteractable' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RoomBuilding) == 0x002790, "Member 'ASurvivalPlayer_C::RoomBuilding' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GI_Character_Save_Ref) == 0x002798, "Member 'ASurvivalPlayer_C::GI_Character_Save_Ref' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InteractiveActorInFocus) == 0x002948, "Member 'ASurvivalPlayer_C::InteractiveActorInFocus' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsInHouseBool) == 0x002949, "Member 'ASurvivalPlayer_C::IsInHouseBool' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MainLightSource) == 0x002950, "Member 'ASurvivalPlayer_C::MainLightSource' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ChooseCharacterDynMat) == 0x002960, "Member 'ASurvivalPlayer_C::ChooseCharacterDynMat' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsFemale) == 0x002968, "Member 'ASurvivalPlayer_C::IsFemale' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NewVar_JSI_Sl) == 0x002970, "Member 'ASurvivalPlayer_C::NewVar_JSI_Sl' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NewVar_Cont) == 0x002978, "Member 'ASurvivalPlayer_C::NewVar_Cont' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockVoiceChat) == 0x002980, "Member 'ASurvivalPlayer_C::BlockVoiceChat' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HelmetContainer) == 0x002988, "Member 'ASurvivalPlayer_C::HelmetContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bCompasEquip) == 0x002990, "Member 'ASurvivalPlayer_C::bCompasEquip' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnDeathVelocity) == 0x002998, "Member 'ASurvivalPlayer_C::OnDeathVelocity' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CompasRef) == 0x0029B0, "Member 'ASurvivalPlayer_C::CompasRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsInSauna) == 0x0029B8, "Member 'ASurvivalPlayer_C::IsInSauna' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bStartProgressBar) == 0x0029B9, "Member 'ASurvivalPlayer_C::bStartProgressBar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bItemLifeTime6sec) == 0x0029BA, "Member 'ASurvivalPlayer_C::bItemLifeTime6sec' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SavedCell) == 0x0029C0, "Member 'ASurvivalPlayer_C::SavedCell' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CompasState) == 0x0029C8, "Member 'ASurvivalPlayer_C::CompasState' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StopHiddingMe) == 0x0029C9, "Member 'ASurvivalPlayer_C::StopHiddingMe' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StopUsingItem) == 0x0029CA, "Member 'ASurvivalPlayer_C::StopUsingItem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootDelayBlock) == 0x0029CB, "Member 'ASurvivalPlayer_C::LootDelayBlock' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootDelayBlockTimer) == 0x0029D0, "Member 'ASurvivalPlayer_C::LootDelayBlockTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LootDelayBlockFloat) == 0x0029D8, "Member 'ASurvivalPlayer_C::LootDelayBlockFloat' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SelectedSlot) == 0x0029E0, "Member 'ASurvivalPlayer_C::SelectedSlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Delay) == 0x0029F0, "Member 'ASurvivalPlayer_C::Delay' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DM_BodyMan) == 0x0029F8, "Member 'ASurvivalPlayer_C::DM_BodyMan' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DM_LegsMan) == 0x002A00, "Member 'ASurvivalPlayer_C::DM_LegsMan' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DM_LegsGirl) == 0x002A08, "Member 'ASurvivalPlayer_C::DM_LegsGirl' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DW_BodyGirl) == 0x002A10, "Member 'ASurvivalPlayer_C::DW_BodyGirl' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FemaleFPHands) == 0x002A18, "Member 'ASurvivalPlayer_C::FemaleFPHands' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MaleLHand) == 0x002A20, "Member 'ASurvivalPlayer_C::MaleLHand' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MaleRHand) == 0x002A28, "Member 'ASurvivalPlayer_C::MaleRHand' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Time_0) == 0x002A30, "Member 'ASurvivalPlayer_C::Time_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FinishRoundProgressBarTimerHandle) == 0x002A38, "Member 'ASurvivalPlayer_C::FinishRoundProgressBarTimerHandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockUsingItemCanceling) == 0x002A40, "Member 'ASurvivalPlayer_C::BlockUsingItemCanceling' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StartTimelineRoundBar) == 0x002A41, "Member 'ASurvivalPlayer_C::StartTimelineRoundBar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MoveInput3Frames) == 0x002A42, "Member 'ASurvivalPlayer_C::MoveInput3Frames' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Slot_Ref__For_Using_Item_) == 0x002A48, "Member 'ASurvivalPlayer_C::Slot_Ref__For_Using_Item_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockCompas) == 0x002A50, "Member 'ASurvivalPlayer_C::BlockCompas' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ProtectiveCaseContainer) == 0x002A58, "Member 'ASurvivalPlayer_C::ProtectiveCaseContainer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnockedTag) == 0x002A60, "Member 'ASurvivalPlayer_C::KnockedTag' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WBP_Surrender) == 0x002A68, "Member 'ASurvivalPlayer_C::WBP_Surrender' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReviveAnim) == 0x002A70, "Member 'ASurvivalPlayer_C::ReviveAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, In_Bone_Name) == 0x002A74, "Member 'ASurvivalPlayer_C::In_Bone_Name' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Linear_Velocity) == 0x002A80, "Member 'ASurvivalPlayer_C::Linear_Velocity' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Ragdolling) == 0x002A98, "Member 'ASurvivalPlayer_C::Ragdolling' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CapsuleLocation) == 0x002AA0, "Member 'ASurvivalPlayer_C::CapsuleLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerMeshOffset) == 0x002AB8, "Member 'ASurvivalPlayer_C::PlayerMeshOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, IsOnBack) == 0x002AD0, "Member 'ASurvivalPlayer_C::IsOnBack' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SurrenderTime) == 0x002AD4, "Member 'ASurvivalPlayer_C::SurrenderTime' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SurrenderTimer) == 0x002AD8, "Member 'ASurvivalPlayer_C::SurrenderTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnockdownTimer) == 0x002AE0, "Member 'ASurvivalPlayer_C::KnockdownTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReviveTime) == 0x002AE8, "Member 'ASurvivalPlayer_C::ReviveTime' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UpdateCapsuleTimer) == 0x002AF0, "Member 'ASurvivalPlayer_C::UpdateCapsuleTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Reviver) == 0x002AF8, "Member 'ASurvivalPlayer_C::Reviver' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CameraLoc) == 0x002B00, "Member 'ASurvivalPlayer_C::CameraLoc' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PosOffsetCurve) == 0x002B18, "Member 'ASurvivalPlayer_C::PosOffsetCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EventMeshCurve) == 0x002B20, "Member 'ASurvivalPlayer_C::EventMeshCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Drop_Item_when_Die) == 0x002B28, "Member 'ASurvivalPlayer_C::Drop_Item_when_Die' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Drop) == 0x002B30, "Member 'ASurvivalPlayer_C::Drop' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Is_Radial_Damage) == 0x002B40, "Member 'ASurvivalPlayer_C::Is_Radial_Damage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Killer) == 0x002B48, "Member 'ASurvivalPlayer_C::Killer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Bone_Name) == 0x002B50, "Member 'ASurvivalPlayer_C::Bone_Name' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Hit_location) == 0x002B58, "Member 'ASurvivalPlayer_C::Hit_location' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Hit_Angle) == 0x002B70, "Member 'ASurvivalPlayer_C::Hit_Angle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GPSEquip) == 0x002B78, "Member 'ASurvivalPlayer_C::GPSEquip' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GPSState) == 0x002B79, "Member 'ASurvivalPlayer_C::GPSState' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GPSRef) == 0x002B80, "Member 'ASurvivalPlayer_C::GPSRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnockedSnapShot) == 0x002B88, "Member 'ASurvivalPlayer_C::KnockedSnapShot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerLocation) == 0x002B90, "Member 'ASurvivalPlayer_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TravelTimer) == 0x002BA8, "Member 'ASurvivalPlayer_C::TravelTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TravelDistance) == 0x002BB0, "Member 'ASurvivalPlayer_C::TravelDistance' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Dealt_Damage) == 0x002BB8, "Member 'ASurvivalPlayer_C::Dealt_Damage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Shot_Count) == 0x002BC0, "Member 'ASurvivalPlayer_C::Shot_Count' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RegisteredHit) == 0x002BC4, "Member 'ASurvivalPlayer_C::RegisteredHit' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HitPercentage) == 0x002BC8, "Member 'ASurvivalPlayer_C::HitPercentage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockGPS) == 0x002BD0, "Member 'ASurvivalPlayer_C::BlockGPS' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PosReverseOffsetCurve) == 0x002BD8, "Member 'ASurvivalPlayer_C::PosReverseOffsetCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EventReverseMeshCurve) == 0x002BE0, "Member 'ASurvivalPlayer_C::EventReverseMeshCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatFood) == 0x002BE8, "Member 'ASurvivalPlayer_C::StatFood' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatDrink) == 0x002BF0, "Member 'ASurvivalPlayer_C::StatDrink' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatAid) == 0x002BF8, "Member 'ASurvivalPlayer_C::StatAid' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatZombieKilled) == 0x002C00, "Member 'ASurvivalPlayer_C::StatZombieKilled' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Seconds) == 0x002C08, "Member 'ASurvivalPlayer_C::Seconds' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Minutes) == 0x002C10, "Member 'ASurvivalPlayer_C::Minutes' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Hours) == 0x002C18, "Member 'ASurvivalPlayer_C::Hours' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatHeadShotDistance) == 0x002C20, "Member 'ASurvivalPlayer_C::StatHeadShotDistance' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatTookDmg) == 0x002C28, "Member 'ASurvivalPlayer_C::StatTookDmg' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GPSWidgetMapRef) == 0x002C30, "Member 'ASurvivalPlayer_C::GPSWidgetMapRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InclineAxisValue) == 0x002C38, "Member 'ASurvivalPlayer_C::InclineAxisValue' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Pos) == 0x002C40, "Member 'ASurvivalPlayer_C::Pos' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Rot) == 0x002C58, "Member 'ASurvivalPlayer_C::Rot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Source_Slot_Ref) == 0x002C70, "Member 'ASurvivalPlayer_C::Source_Slot_Ref' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CountSlideGPS) == 0x002C78, "Member 'ASurvivalPlayer_C::CountSlideGPS' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarsNames) == 0x002C80, "Member 'ASurvivalPlayer_C::CarsNames' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, StatSave) == 0x002C90, "Member 'ASurvivalPlayer_C::StatSave' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LoopSaveStatTimer) == 0x002CA0, "Member 'ASurvivalPlayer_C::LoopSaveStatTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnSaveStats) == 0x002CA8, "Member 'ASurvivalPlayer_C::OnSaveStats' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnLoadStats) == 0x002CB8, "Member 'ASurvivalPlayer_C::OnLoadStats' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InHub) == 0x002CC8, "Member 'ASurvivalPlayer_C::InHub' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TempStatSaveArray) == 0x002CD0, "Member 'ASurvivalPlayer_C::TempStatSaveArray' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnAiming) == 0x002CE0, "Member 'ASurvivalPlayer_C::OnAiming' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EquipmentTier) == 0x002CF0, "Member 'ASurvivalPlayer_C::EquipmentTier' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnSetCarCount) == 0x002CF8, "Member 'ASurvivalPlayer_C::OnSetCarCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HouseName) == 0x002D08, "Member 'ASurvivalPlayer_C::HouseName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnSaveHouse) == 0x002D18, "Member 'ASurvivalPlayer_C::OnSaveHouse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnLoadHouse) == 0x002D28, "Member 'ASurvivalPlayer_C::OnLoadHouse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InputReloadTimer) == 0x002D38, "Member 'ASurvivalPlayer_C::InputReloadTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPPCrouchingWepOffsetCurve) == 0x002D40, "Member 'ASurvivalPlayer_C::FPPCrouchingWepOffsetCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TPPCrouchingWepOffsetCurve) == 0x002D48, "Member 'ASurvivalPlayer_C::TPPCrouchingWepOffsetCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPPStandingWepOffsetCurve) == 0x002D50, "Member 'ASurvivalPlayer_C::FPPStandingWepOffsetCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TPPStandingWepOffsetCurve) == 0x002D58, "Member 'ASurvivalPlayer_C::TPPStandingWepOffsetCurve' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InTrainGym) == 0x002D60, "Member 'ASurvivalPlayer_C::InTrainGym' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Sit) == 0x002D61, "Member 'ASurvivalPlayer_C::Sit' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HomeNameArray) == 0x002D68, "Member 'ASurvivalPlayer_C::HomeNameArray' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnSetHomeCount) == 0x002D78, "Member 'ASurvivalPlayer_C::OnSetHomeCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnCarSold) == 0x002D88, "Member 'ASurvivalPlayer_C::OnCarSold' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnHomeSold) == 0x002D98, "Member 'ASurvivalPlayer_C::OnHomeSold' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DamagedAmmoClass) == 0x002DA8, "Member 'ASurvivalPlayer_C::DamagedAmmoClass' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RPoints) == 0x002DAC, "Member 'ASurvivalPlayer_C::RPoints' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SetRPointsCount) == 0x002DB0, "Member 'ASurvivalPlayer_C::SetRPointsCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UsingVending) == 0x002DC0, "Member 'ASurvivalPlayer_C::UsingVending' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarsStats) == 0x002DC8, "Member 'ASurvivalPlayer_C::CarsStats' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarsStat) == 0x002DD8, "Member 'ASurvivalPlayer_C::CarsStat' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SitTrain_) == 0x002DE8, "Member 'ASurvivalPlayer_C::SitTrain_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MySquadIndex) == 0x002DEC, "Member 'ASurvivalPlayer_C::MySquadIndex' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Gymhandle) == 0x002DF0, "Member 'ASurvivalPlayer_C::Gymhandle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HightlightChair) == 0x002DF8, "Member 'ASurvivalPlayer_C::HightlightChair' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintDistanceTraveled) == 0x002E00, "Member 'ASurvivalPlayer_C::SprintDistanceTraveled' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SprintDistanceNeedToTrain) == 0x002E08, "Member 'ASurvivalPlayer_C::SprintDistanceNeedToTrain' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TravelDistanceWeighted) == 0x002E10, "Member 'ASurvivalPlayer_C::TravelDistanceWeighted' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GetHitedCount) == 0x002E18, "Member 'ASurvivalPlayer_C::GetHitedCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RevivingCount) == 0x002E1C, "Member 'ASurvivalPlayer_C::RevivingCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MoneyCycleCount) == 0x002E20, "Member 'ASurvivalPlayer_C::MoneyCycleCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bIsBinocularsEquip) == 0x002E24, "Member 'ASurvivalPlayer_C::bIsBinocularsEquip' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShotCountPistol) == 0x002E28, "Member 'ASurvivalPlayer_C::ShotCountPistol' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarStealNumber) == 0x002E2C, "Member 'ASurvivalPlayer_C::CarStealNumber' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarRepairCount) == 0x002E30, "Member 'ASurvivalPlayer_C::CarRepairCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RefuelCount) == 0x002E34, "Member 'ASurvivalPlayer_C::RefuelCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PlayerSit) == 0x002E38, "Member 'ASurvivalPlayer_C::PlayerSit' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockedCompassInTutorial) == 0x002E39, "Member 'ASurvivalPlayer_C::BlockedCompassInTutorial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockedGPSInTutorial) == 0x002E3A, "Member 'ASurvivalPlayer_C::BlockedGPSInTutorial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SitOnBar) == 0x002E3B, "Member 'ASurvivalPlayer_C::SitOnBar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HightlightBar) == 0x002E40, "Member 'ASurvivalPlayer_C::HightlightBar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BarParentCall) == 0x002E48, "Member 'ASurvivalPlayer_C::BarParentCall' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SitChair) == 0x002E50, "Member 'ASurvivalPlayer_C::SitChair' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FoodRef) == 0x002E58, "Member 'ASurvivalPlayer_C::FoodRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bMuteMicrophone) == 0x002E60, "Member 'ASurvivalPlayer_C::bMuteMicrophone' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReloadCountPistol) == 0x002E64, "Member 'ASurvivalPlayer_C::ReloadCountPistol' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TranzitIsOpened) == 0x002E68, "Member 'ASurvivalPlayer_C::TranzitIsOpened' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnInCarChanged) == 0x002E70, "Member 'ASurvivalPlayer_C::OnInCarChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Burnt) == 0x002E80, "Member 'ASurvivalPlayer_C::Burnt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InBase) == 0x002E81, "Member 'ASurvivalPlayer_C::InBase' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockedInputInTutorial) == 0x002E82, "Member 'ASurvivalPlayer_C::BlockedInputInTutorial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockLeftHandEffector) == 0x002E83, "Member 'ASurvivalPlayer_C::BlockLeftHandEffector' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, QuestArea) == 0x002E88, "Member 'ASurvivalPlayer_C::QuestArea' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Selected_Traits) == 0x002E98, "Member 'ASurvivalPlayer_C::Selected_Traits' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GI_Character_Save_Ref_0bject) == 0x002EA8, "Member 'ASurvivalPlayer_C::GI_Character_Save_Ref_0bject' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Quest_Items) == 0x002EB0, "Member 'ASurvivalPlayer_C::Quest_Items' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Quest_Items_Counts) == 0x002EC0, "Member 'ASurvivalPlayer_C::Quest_Items_Counts' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FurnitureCatalog) == 0x002ED0, "Member 'ASurvivalPlayer_C::FurnitureCatalog' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RoomReference) == 0x002ED8, "Member 'ASurvivalPlayer_C::RoomReference' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnGPSStateChanged) == 0x002EE0, "Member 'ASurvivalPlayer_C::OnGPSStateChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnCompassStateChanged) == 0x002EF0, "Member 'ASurvivalPlayer_C::OnCompassStateChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentTable) == 0x002F00, "Member 'ASurvivalPlayer_C::CurrentTable' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Player) == 0x002F08, "Member 'ASurvivalPlayer_C::Player' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, WidgetRef) == 0x002F10, "Member 'ASurvivalPlayer_C::WidgetRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnifeRef) == 0x002F18, "Member 'ASurvivalPlayer_C::KnifeRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ForkRef) == 0x002F20, "Member 'ASurvivalPlayer_C::ForkRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ActiveTable) == 0x002F28, "Member 'ASurvivalPlayer_C::ActiveTable' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Player_Bar) == 0x002F30, "Member 'ASurvivalPlayer_C::Player_Bar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OutputPlaceFood) == 0x002F38, "Member 'ASurvivalPlayer_C::OutputPlaceFood' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OutputPlaceFoodIndex) == 0x002F40, "Member 'ASurvivalPlayer_C::OutputPlaceFoodIndex' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnExitBar) == 0x002F48, "Member 'ASurvivalPlayer_C::OnExitBar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnFinishFood) == 0x002F58, "Member 'ASurvivalPlayer_C::OnFinishFood' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EnterToBase) == 0x002F68, "Member 'ASurvivalPlayer_C::EnterToBase' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, UsedJSISlot) == 0x002F78, "Member 'ASurvivalPlayer_C::UsedJSISlot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ResHouseLoc) == 0x002F80, "Member 'ASurvivalPlayer_C::ResHouseLoc' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ZanyatoChair) == 0x002FE0, "Member 'ASurvivalPlayer_C::ZanyatoChair' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ActiveChair) == 0x002FE8, "Member 'ASurvivalPlayer_C::ActiveChair' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnDiscountUpdated) == 0x002FF0, "Member 'ASurvivalPlayer_C::OnDiscountUpdated' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BottleRef) == 0x003000, "Member 'ASurvivalPlayer_C::BottleRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PaidLoan) == 0x003008, "Member 'ASurvivalPlayer_C::PaidLoan' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnLoanPaid) == 0x003010, "Member 'ASurvivalPlayer_C::OnLoanPaid' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MenuRef) == 0x003020, "Member 'ASurvivalPlayer_C::MenuRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockMenu) == 0x003028, "Member 'ASurvivalPlayer_C::BlockMenu' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryOpenAnim) == 0x003029, "Member 'ASurvivalPlayer_C::InventoryOpenAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnBlockOpenMenu) == 0x003030, "Member 'ASurvivalPlayer_C::OnBlockOpenMenu' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnGymExit) == 0x003040, "Member 'ASurvivalPlayer_C::OnGymExit' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockInputAnim) == 0x003050, "Member 'ASurvivalPlayer_C::BlockInputAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bIsInElevator) == 0x003051, "Member 'ASurvivalPlayer_C::bIsInElevator' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryCameraBlock) == 0x003052, "Member 'ASurvivalPlayer_C::InventoryCameraBlock' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Recover) == 0x003053, "Member 'ASurvivalPlayer_C::Recover' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Aliases) == 0x003058, "Member 'ASurvivalPlayer_C::Aliases' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnSetAliases) == 0x003068, "Member 'ASurvivalPlayer_C::OnSetAliases' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnPocketChanged) == 0x003078, "Member 'ASurvivalPlayer_C::OnPocketChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, New_Rotation_X__Roll_) == 0x003088, "Member 'ASurvivalPlayer_C::New_Rotation_X__Roll_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, InventoryOpenAnimAlpha) == 0x00308C, "Member 'ASurvivalPlayer_C::InventoryOpenAnimAlpha' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, JumpBlock) == 0x003090, "Member 'ASurvivalPlayer_C::JumpBlock' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RoomInsidesSave) == 0x003098, "Member 'ASurvivalPlayer_C::RoomInsidesSave' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, RoomInsideSave) == 0x0030A8, "Member 'ASurvivalPlayer_C::RoomInsideSave' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ServerStruct) == 0x0030B8, "Member 'ASurvivalPlayer_C::ServerStruct' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GpsRotation) == 0x0030C8, "Member 'ASurvivalPlayer_C::GpsRotation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnBackPackChanged) == 0x0030E0, "Member 'ASurvivalPlayer_C::OnBackPackChanged' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnChangeAmmoClass) == 0x0030F0, "Member 'ASurvivalPlayer_C::OnChangeAmmoClass' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ChangeAmmoTypeTime) == 0x003100, "Member 'ASurvivalPlayer_C::ChangeAmmoTypeTime' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnockedSnapShot3d) == 0x003108, "Member 'ASurvivalPlayer_C::KnockedSnapShot3d' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, LastReplicatedSound) == 0x003110, "Member 'ASurvivalPlayer_C::LastReplicatedSound' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SupportSound) == 0x003118, "Member 'ASurvivalPlayer_C::SupportSound' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, KnockedSnap3d) == 0x003120, "Member 'ASurvivalPlayer_C::KnockedSnap3d' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockCallMenu) == 0x003128, "Member 'ASurvivalPlayer_C::BlockCallMenu' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, OnMeetNPC) == 0x003130, "Member 'ASurvivalPlayer_C::OnMeetNPC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MenuOpen_) == 0x003140, "Member 'ASurvivalPlayer_C::MenuOpen_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MenuRef_0) == 0x003148, "Member 'ASurvivalPlayer_C::MenuRef_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GPSPage) == 0x003150, "Member 'ASurvivalPlayer_C::GPSPage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GPSRef_FP) == 0x003158, "Member 'ASurvivalPlayer_C::GPSRef_FP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarSaveMap) == 0x003160, "Member 'ASurvivalPlayer_C::CarSaveMap' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockFIK) == 0x0031B0, "Member 'ASurvivalPlayer_C::BlockFIK' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bMouseInverse) == 0x0031B1, "Member 'ASurvivalPlayer_C::bMouseInverse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TrackedQuest) == 0x0031B8, "Member 'ASurvivalPlayer_C::TrackedQuest' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SyncedLookRotatation) == 0x0031C0, "Member 'ASurvivalPlayer_C::SyncedLookRotatation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BlockedBinocularsInTutorial) == 0x0031D8, "Member 'ASurvivalPlayer_C::BlockedBinocularsInTutorial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, As_BP_Training_App) == 0x0031E0, "Member 'ASurvivalPlayer_C::As_BP_Training_App' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Ressurect_Place) == 0x0031E8, "Member 'ASurvivalPlayer_C::Ressurect_Place' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DeviceSwitcherBlock) == 0x0031E9, "Member 'ASurvivalPlayer_C::DeviceSwitcherBlock' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Teleping) == 0x0031EA, "Member 'ASurvivalPlayer_C::Teleping' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Received_Reputation_Points) == 0x0031EC, "Member 'ASurvivalPlayer_C::Received_Reputation_Points' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bShowInteractDebugTrace) == 0x0031F0, "Member 'ASurvivalPlayer_C::bShowInteractDebugTrace' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BarEating) == 0x0031F1, "Member 'ASurvivalPlayer_C::BarEating' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DoOnce) == 0x0031F8, "Member 'ASurvivalPlayer_C::DoOnce' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DefaultCollisionResponse_New) == 0x003200, "Member 'ASurvivalPlayer_C::DefaultCollisionResponse_New' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CurrentCarName) == 0x003250, "Member 'ASurvivalPlayer_C::CurrentCarName' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, PrevTickLocation) == 0x003268, "Member 'ASurvivalPlayer_C::PrevTickLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, GrenadeBlock) == 0x003280, "Member 'ASurvivalPlayer_C::GrenadeBlock' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MeleeAnim) == 0x003281, "Member 'ASurvivalPlayer_C::MeleeAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, EasyTrainEnable) == 0x003282, "Member 'ASurvivalPlayer_C::EasyTrainEnable' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, SwitchAnim) == 0x003283, "Member 'ASurvivalPlayer_C::SwitchAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CarTipe) == 0x003284, "Member 'ASurvivalPlayer_C::CarTipe' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReloadCountAssault) == 0x003288, "Member 'ASurvivalPlayer_C::ReloadCountAssault' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReloadCountShotgun) == 0x00328C, "Member 'ASurvivalPlayer_C::ReloadCountShotgun' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReloadCountCarbine) == 0x003290, "Member 'ASurvivalPlayer_C::ReloadCountCarbine' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShotCountAssault) == 0x003294, "Member 'ASurvivalPlayer_C::ShotCountAssault' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShotCountShotgun) == 0x003298, "Member 'ASurvivalPlayer_C::ShotCountShotgun' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShotCountCarbine) == 0x00329C, "Member 'ASurvivalPlayer_C::ShotCountCarbine' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Missing_Car_Names) == 0x0032A0, "Member 'ASurvivalPlayer_C::Missing_Car_Names' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, MissingCarSave) == 0x0032B0, "Member 'ASurvivalPlayer_C::MissingCarSave' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, Is_Beginner) == 0x0032C0, "Member 'ASurvivalPlayer_C::Is_Beginner' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ExitGPSBlock) == 0x0032C1, "Member 'ASurvivalPlayer_C::ExitGPSBlock' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopNow) == 0x0032C2, "Member 'ASurvivalPlayer_C::ShopNow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TrainCD) == 0x0032C8, "Member 'ASurvivalPlayer_C::TrainCD' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, HungerDamage) == 0x0032D8, "Member 'ASurvivalPlayer_C::HungerDamage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ReceiverInfo) == 0x0032E0, "Member 'ASurvivalPlayer_C::ReceiverInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, DroppedInfo) == 0x003500, "Member 'ASurvivalPlayer_C::DroppedInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FPPWeapon) == 0x003720, "Member 'ASurvivalPlayer_C::FPPWeapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, NewVar) == 0x003721, "Member 'ASurvivalPlayer_C::NewVar' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, TrainCost) == 0x003724, "Member 'ASurvivalPlayer_C::TrainCost' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, CtrlHolded) == 0x003728, "Member 'ASurvivalPlayer_C::CtrlHolded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShiftHolded) == 0x003729, "Member 'ASurvivalPlayer_C::ShiftHolded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, FreeLookPressed) == 0x00372A, "Member 'ASurvivalPlayer_C::FreeLookPressed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, BackpackChangeCount) == 0x00372C, "Member 'ASurvivalPlayer_C::BackpackChangeCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, ShopWidget_0) == 0x003730, "Member 'ASurvivalPlayer_C::ShopWidget_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_C, bBlockingAfterRessurect) == 0x003738, "Member 'ASurvivalPlayer_C::bBlockingAfterRessurect' has a wrong offset!");

}

