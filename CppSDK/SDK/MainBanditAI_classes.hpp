#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MainBanditAI

#include "Basic.hpp"

#include "E_AnimState_structs.hpp"
#include "BPS_WeaponData_structs.hpp"
#include "BanditParentAI_classes.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Bandit_MovementMode_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass mainBanditAI.mainBanditAI_C
// 0x0690 (0x1610 - 0x0F80)
class AMainBanditAI_C : public ABanditParentAI_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_MainBanditAI_C;                     // 0x0F80(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Widget;                                            // 0x0F88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavigationInvokerComponent*            NavigationInvoker;                                 // 0x0F90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   RightTrailHand;                                    // 0x0F98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   LeftTrailHand;                                     // 0x0FA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   PelvisTrail;                                       // 0x0FA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   RightTrail;                                        // 0x0FB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   LeftTrail;                                         // 0x0FB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShootLoc_R;                                        // 0x0FC0(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Bullets;                                           // 0x0FD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxBullets;                                        // 0x0FDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShootCount;                                        // 0x0FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE4[0x4];                                      // 0x0FE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Damage;                                            // 0x0FE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AnimState                                   AnimState;                                         // 0x0FF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DontShoot;                                         // 0x0FF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FF2[0x6];                                      // 0x0FF2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShootEnd_R;                                        // 0x0FF8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           LastTakeDamageMontage_R;                           // 0x1010(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Stamina_R;                                         // 0x1018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxStamina_R;                                      // 0x1020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StandartMoveTo_;                                   // 0x1028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1029[0x3];                                     // 0x1029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletCounter;                                     // 0x102C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchSpread;                                       // 0x1030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        YawSpread;                                         // 0x1038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShootEndLoc;                                       // 0x1040(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BanditShoot;                                       // 0x1058(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105C[0x4];                                     // 0x105C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBPS_WeaponData                        WeaponData;                                        // 0x1060(0x04C0)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	TArray<class FName>                           WeaponName;                                        // 0x1520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DelayBetweenShots;                                 // 0x1530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinShoots;                                         // 0x1538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxShoots;                                         // 0x153C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayAfterShots;                                   // 0x1540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HittedActor;                                       // 0x1548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        RandomFloatR;                                      // 0x1550(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WeaponName_Set_;                                   // 0x1558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           CharReloadAnim;                                    // 0x1560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           WeaponReloadAnim;                                  // 0x1568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FireEnd_;                                          // 0x1570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1571[0x7];                                     // 0x1571(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombieTriggerSpawner_C*                TriggerSpawner;                                    // 0x1578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WeightForHit;                                      // 0x1580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToShootLocation;                           // 0x1588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ParticleSize;                                      // 0x1590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShootActor_;                                       // 0x15A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A9[0x3];                                     // 0x15A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WeaponToSet;                                       // 0x15AC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B4[0x4];                                     // 0x15B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATargetPoint*                           TargetPoint;                                       // 0x15B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class FText                                   NickToSet;                                         // 0x15C0(0x0018)(Edit, BlueprintVisible)
	class ASurvivalPlayer_C*                      PlayerRef;                                         // 0x15D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            Color;                                             // 0x15E0(0x0014)(Edit, BlueprintVisible)
	uint8                                         Pad_15F4[0x4];                                     // 0x15F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawnLoot_C*                            LootPoint;                                         // 0x15F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         LootName;                                          // 0x1600(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ApplyPointDamage(class AActor* DamagedActor, const struct FHitResult& HitInfo, const class UObject* ZombieObject, double Param_Damage);
	void Bandit_Shoot_SERV_(bool Target_, class AActor* Actor, const struct FVector& Location);
	void Debug();
	void DelayDecalSpawn(const struct FVector& Location, const struct FVector& Forward, class UMaterialInterface* DecalMaterial, const TArray<class AActor*>& ActorsToIgnore);
	void ExecuteUbergraph_mainBanditAI(int32 EntryPoint);
	void Find();
	void GetDamageTR();
	void GetDecalMaterial(EPhysicalSurface SurfaceType, class UMaterialInstance** DynMaterial);
	void OnBlendOut_06798E9C421B2FF496BC24AA7C8B7A0C(class FName NotifyName);
	void OnBlendOut_3678A9F449B5807D7A90BE904F8A4C83(class FName NotifyName);
	void OnBlendOut_ED1B2C8F46C7CDA788649E9DF5587AE9(class FName NotifyName);
	void OnCompleted_06798E9C421B2FF496BC24AA7C8B7A0C(class FName NotifyName);
	void OnCompleted_3678A9F449B5807D7A90BE904F8A4C83(class FName NotifyName);
	void OnCompleted_ED1B2C8F46C7CDA788649E9DF5587AE9(class FName NotifyName);
	void OnInterrupted_06798E9C421B2FF496BC24AA7C8B7A0C(class FName NotifyName);
	void OnInterrupted_3678A9F449B5807D7A90BE904F8A4C83(class FName NotifyName);
	void OnInterrupted_ED1B2C8F46C7CDA788649E9DF5587AE9(class FName NotifyName);
	void OnLoaded_ECEF658C499C85FBFD3F9FA519EC773D(class UObject* Loaded);
	void OnNotifyBegin_06798E9C421B2FF496BC24AA7C8B7A0C(class FName NotifyName);
	void OnNotifyBegin_3678A9F449B5807D7A90BE904F8A4C83(class FName NotifyName);
	void OnNotifyBegin_ED1B2C8F46C7CDA788649E9DF5587AE9(class FName NotifyName);
	void OnNotifyEnd_06798E9C421B2FF496BC24AA7C8B7A0C(class FName NotifyName);
	void OnNotifyEnd_3678A9F449B5807D7A90BE904F8A4C83(class FName NotifyName);
	void OnNotifyEnd_ED1B2C8F46C7CDA788649E9DF5587AE9(class FName NotifyName);
	void OnRep_Lootpoint();
	void OnRep_WeaponData();
	void OpenGate_Shoot_();
	void PickDamageAnimByBone(class FName BoneName, class UAnimMontage** DamageAnim);
	void PlayBloodParticle();
	void PlayBloodParticle80();
	void PlayBloodParticleH();
	void PlayHitParticle(const struct FHitResult& HitResult);
	void PlayHitParticle_MULTI(const struct FHitResult& HitResult);
	void PlayPainSound_MULTI();
	void ReceiveDestroyed();
	void ReceivePointDamage(float Param_Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* Param_HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void Reload();
	void ReloadMontage_MULTI();
	void SetWeapon();
	void ShowNickWidget(bool Show);
	void SpawnLootPoint();
	void SpawnTrail(const struct FVector& Target);
	void StopMontage_MULTI(class USkeletalMeshComponent* Param_Mesh, double InBlendOutTime, class UAnimMontage* Montage);
	void ThrowGrenade();
	void Trace(double SpreadPitchMin, double SpreadPitchMax, double SpreadYawMin, double SpreadYawMax);
	void UserConstructionScript();
	bool WeaponTrace(double SpreadPitchMin, double SpreadPitchMax, double SpreadYawMin, double SpreadYawMax, class AActor** HitActor, struct FHitResult* OutputHit);
	void WPGetLefHandEffectorTransform(struct FVector* TransformLocation, struct FRotator* TransformRotation, struct FVector* TransformScale, bool* HasEffector);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"mainBanditAI_C">();
	}
	static class AMainBanditAI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMainBanditAI_C>();
	}
};
static_assert(alignof(AMainBanditAI_C) == 0x000010, "Wrong alignment on AMainBanditAI_C");
static_assert(sizeof(AMainBanditAI_C) == 0x001610, "Wrong size on AMainBanditAI_C");
static_assert(offsetof(AMainBanditAI_C, UberGraphFrame_MainBanditAI_C) == 0x000F80, "Member 'AMainBanditAI_C::UberGraphFrame_MainBanditAI_C' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, Widget) == 0x000F88, "Member 'AMainBanditAI_C::Widget' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, NavigationInvoker) == 0x000F90, "Member 'AMainBanditAI_C::NavigationInvoker' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, RightTrailHand) == 0x000F98, "Member 'AMainBanditAI_C::RightTrailHand' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, LeftTrailHand) == 0x000FA0, "Member 'AMainBanditAI_C::LeftTrailHand' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, PelvisTrail) == 0x000FA8, "Member 'AMainBanditAI_C::PelvisTrail' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, RightTrail) == 0x000FB0, "Member 'AMainBanditAI_C::RightTrail' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, LeftTrail) == 0x000FB8, "Member 'AMainBanditAI_C::LeftTrail' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, ShootLoc_R) == 0x000FC0, "Member 'AMainBanditAI_C::ShootLoc_R' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, Bullets) == 0x000FD8, "Member 'AMainBanditAI_C::Bullets' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, MaxBullets) == 0x000FDC, "Member 'AMainBanditAI_C::MaxBullets' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, ShootCount) == 0x000FE0, "Member 'AMainBanditAI_C::ShootCount' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, Damage) == 0x000FE8, "Member 'AMainBanditAI_C::Damage' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, AnimState) == 0x000FF0, "Member 'AMainBanditAI_C::AnimState' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, DontShoot) == 0x000FF1, "Member 'AMainBanditAI_C::DontShoot' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, ShootEnd_R) == 0x000FF8, "Member 'AMainBanditAI_C::ShootEnd_R' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, LastTakeDamageMontage_R) == 0x001010, "Member 'AMainBanditAI_C::LastTakeDamageMontage_R' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, Stamina_R) == 0x001018, "Member 'AMainBanditAI_C::Stamina_R' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, MaxStamina_R) == 0x001020, "Member 'AMainBanditAI_C::MaxStamina_R' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, StandartMoveTo_) == 0x001028, "Member 'AMainBanditAI_C::StandartMoveTo_' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, BulletCounter) == 0x00102C, "Member 'AMainBanditAI_C::BulletCounter' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, PitchSpread) == 0x001030, "Member 'AMainBanditAI_C::PitchSpread' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, YawSpread) == 0x001038, "Member 'AMainBanditAI_C::YawSpread' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, ShootEndLoc) == 0x001040, "Member 'AMainBanditAI_C::ShootEndLoc' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, BanditShoot) == 0x001058, "Member 'AMainBanditAI_C::BanditShoot' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, WeaponData) == 0x001060, "Member 'AMainBanditAI_C::WeaponData' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, WeaponName) == 0x001520, "Member 'AMainBanditAI_C::WeaponName' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, DelayBetweenShots) == 0x001530, "Member 'AMainBanditAI_C::DelayBetweenShots' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, MinShoots) == 0x001538, "Member 'AMainBanditAI_C::MinShoots' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, MaxShoots) == 0x00153C, "Member 'AMainBanditAI_C::MaxShoots' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, DelayAfterShots) == 0x001540, "Member 'AMainBanditAI_C::DelayAfterShots' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, HittedActor) == 0x001548, "Member 'AMainBanditAI_C::HittedActor' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, RandomFloatR) == 0x001550, "Member 'AMainBanditAI_C::RandomFloatR' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, WeaponName_Set_) == 0x001558, "Member 'AMainBanditAI_C::WeaponName_Set_' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, CharReloadAnim) == 0x001560, "Member 'AMainBanditAI_C::CharReloadAnim' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, WeaponReloadAnim) == 0x001568, "Member 'AMainBanditAI_C::WeaponReloadAnim' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, FireEnd_) == 0x001570, "Member 'AMainBanditAI_C::FireEnd_' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, TriggerSpawner) == 0x001578, "Member 'AMainBanditAI_C::TriggerSpawner' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, WeightForHit) == 0x001580, "Member 'AMainBanditAI_C::WeightForHit' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, DistanceToShootLocation) == 0x001588, "Member 'AMainBanditAI_C::DistanceToShootLocation' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, ParticleSize) == 0x001590, "Member 'AMainBanditAI_C::ParticleSize' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, ShootActor_) == 0x0015A8, "Member 'AMainBanditAI_C::ShootActor_' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, WeaponToSet) == 0x0015AC, "Member 'AMainBanditAI_C::WeaponToSet' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, TargetPoint) == 0x0015B8, "Member 'AMainBanditAI_C::TargetPoint' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, NickToSet) == 0x0015C0, "Member 'AMainBanditAI_C::NickToSet' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, PlayerRef) == 0x0015D8, "Member 'AMainBanditAI_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, Color) == 0x0015E0, "Member 'AMainBanditAI_C::Color' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, LootPoint) == 0x0015F8, "Member 'AMainBanditAI_C::LootPoint' has a wrong offset!");
static_assert(offsetof(AMainBanditAI_C, LootName) == 0x001600, "Member 'AMainBanditAI_C::LootName' has a wrong offset!");

}

