#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VehicleMath

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function VehicleMath.VehicleMath_C.GetPercentBetweenValues
// 0x0030 (0x0030 - 0x0000)
struct VehicleMath_C_GetPercentBetweenValues final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Begin;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        End;                                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Percent;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MathExpression_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VehicleMath_C_GetPercentBetweenValues) == 0x000008, "Wrong alignment on VehicleMath_C_GetPercentBetweenValues");
static_assert(sizeof(VehicleMath_C_GetPercentBetweenValues) == 0x000030, "Wrong size on VehicleMath_C_GetPercentBetweenValues");
static_assert(offsetof(VehicleMath_C_GetPercentBetweenValues, Value) == 0x000000, "Member 'VehicleMath_C_GetPercentBetweenValues::Value' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetPercentBetweenValues, Begin) == 0x000008, "Member 'VehicleMath_C_GetPercentBetweenValues::Begin' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetPercentBetweenValues, End) == 0x000010, "Member 'VehicleMath_C_GetPercentBetweenValues::End' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetPercentBetweenValues, __WorldContext) == 0x000018, "Member 'VehicleMath_C_GetPercentBetweenValues::__WorldContext' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetPercentBetweenValues, Percent) == 0x000020, "Member 'VehicleMath_C_GetPercentBetweenValues::Percent' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetPercentBetweenValues, K2Node_MathExpression_ReturnValue) == 0x000028, "Member 'VehicleMath_C_GetPercentBetweenValues::K2Node_MathExpression_ReturnValue' has a wrong offset!");

// Function VehicleMath.VehicleMath_C.GetTransformRelative
// 0x0250 (0x0250 - 0x0000)
struct VehicleMath_C_GetTransformRelative final
{
public:
	struct FTransform                             Child;                                             // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Parent;                                            // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Relative;                                          // 0x00D0(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x01F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VehicleMath_C_GetTransformRelative) == 0x000010, "Wrong alignment on VehicleMath_C_GetTransformRelative");
static_assert(sizeof(VehicleMath_C_GetTransformRelative) == 0x000250, "Wrong size on VehicleMath_C_GetTransformRelative");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, Child) == 0x000000, "Member 'VehicleMath_C_GetTransformRelative::Child' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, Parent) == 0x000060, "Member 'VehicleMath_C_GetTransformRelative::Parent' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, __WorldContext) == 0x0000C0, "Member 'VehicleMath_C_GetTransformRelative::__WorldContext' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, Relative) == 0x0000D0, "Member 'VehicleMath_C_GetTransformRelative::Relative' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_BreakTransform_Location) == 0x000130, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_BreakTransform_Rotation) == 0x000148, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_BreakTransform_Scale) == 0x000160, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_BreakTransform_Location_1) == 0x000178, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_BreakTransform_Rotation_1) == 0x000190, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_BreakTransform_Scale_1) == 0x0001A8, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0001C0, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0001D8, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetTransformRelative, CallFunc_MakeTransform_ReturnValue) == 0x0001F0, "Member 'VehicleMath_C_GetTransformRelative::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function VehicleMath.VehicleMath_C.GetValueBetweenValues
// 0x0030 (0x0030 - 0x0000)
struct VehicleMath_C_GetValueBetweenValues final
{
public:
	double                                        Begin;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        End;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PercentBetween;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MathExpression_ReturnValue;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VehicleMath_C_GetValueBetweenValues) == 0x000008, "Wrong alignment on VehicleMath_C_GetValueBetweenValues");
static_assert(sizeof(VehicleMath_C_GetValueBetweenValues) == 0x000030, "Wrong size on VehicleMath_C_GetValueBetweenValues");
static_assert(offsetof(VehicleMath_C_GetValueBetweenValues, Begin) == 0x000000, "Member 'VehicleMath_C_GetValueBetweenValues::Begin' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetValueBetweenValues, End) == 0x000008, "Member 'VehicleMath_C_GetValueBetweenValues::End' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetValueBetweenValues, PercentBetween) == 0x000010, "Member 'VehicleMath_C_GetValueBetweenValues::PercentBetween' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetValueBetweenValues, __WorldContext) == 0x000018, "Member 'VehicleMath_C_GetValueBetweenValues::__WorldContext' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetValueBetweenValues, Value) == 0x000020, "Member 'VehicleMath_C_GetValueBetweenValues::Value' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_GetValueBetweenValues, K2Node_MathExpression_ReturnValue) == 0x000028, "Member 'VehicleMath_C_GetValueBetweenValues::K2Node_MathExpression_ReturnValue' has a wrong offset!");

// Function VehicleMath.VehicleMath_C.SetFloatPrecision
// 0x0068 (0x0068 - 0x0000)
struct VehicleMath_C_SetFloatPrecision final
{
public:
	double                                        Float;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DecimalPlaces;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Result;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VehicleMath_C_SetFloatPrecision) == 0x000008, "Wrong alignment on VehicleMath_C_SetFloatPrecision");
static_assert(sizeof(VehicleMath_C_SetFloatPrecision) == 0x000068, "Wrong size on VehicleMath_C_SetFloatPrecision");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, Float) == 0x000000, "Member 'VehicleMath_C_SetFloatPrecision::Float' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, DecimalPlaces) == 0x000008, "Member 'VehicleMath_C_SetFloatPrecision::DecimalPlaces' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, __WorldContext) == 0x000010, "Member 'VehicleMath_C_SetFloatPrecision::__WorldContext' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, Result) == 0x000018, "Member 'VehicleMath_C_SetFloatPrecision::Result' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Clamp_ReturnValue) == 0x000020, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000028, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000030, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Round_ReturnValue) == 0x000038, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000040, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000048, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Round_ReturnValue_1) == 0x000050, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000058, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_SetFloatPrecision, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000060, "Member 'VehicleMath_C_SetFloatPrecision::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function VehicleMath.VehicleMath_C.VehicleAcceleration
// 0x0028 (0x0028 - 0x0000)
struct VehicleMath_C_VehicleAcceleration final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZTS;                                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Accel;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MathExpression_ReturnValue;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(VehicleMath_C_VehicleAcceleration) == 0x000008, "Wrong alignment on VehicleMath_C_VehicleAcceleration");
static_assert(sizeof(VehicleMath_C_VehicleAcceleration) == 0x000028, "Wrong size on VehicleMath_C_VehicleAcceleration");
static_assert(offsetof(VehicleMath_C_VehicleAcceleration, Delta) == 0x000000, "Member 'VehicleMath_C_VehicleAcceleration::Delta' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_VehicleAcceleration, ZTS) == 0x000008, "Member 'VehicleMath_C_VehicleAcceleration::ZTS' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_VehicleAcceleration, __WorldContext) == 0x000010, "Member 'VehicleMath_C_VehicleAcceleration::__WorldContext' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_VehicleAcceleration, Accel) == 0x000018, "Member 'VehicleMath_C_VehicleAcceleration::Accel' has a wrong offset!");
static_assert(offsetof(VehicleMath_C_VehicleAcceleration, K2Node_MathExpression_ReturnValue) == 0x000020, "Member 'VehicleMath_C_VehicleAcceleration::K2Node_MathExpression_ReturnValue' has a wrong offset!");

}

