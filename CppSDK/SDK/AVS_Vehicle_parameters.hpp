#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVS_Vehicle

#include "Basic.hpp"

#include "LightConfig_structs.hpp"
#include "ShifterPositions_structs.hpp"
#include "VehicleSystemPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "SpeedUnit_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AVS_Vehicle.AVS_Vehicle_C.AddWheel
// 0x0030 (0x0030 - 0x0000)
struct AVS_Vehicle_C_AddWheel final
{
public:
	class UVehicle_Wheel_C*                       NewWheel;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetupWheelContactModification_RegisterSuccess; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_CreateWheelMesh_NewMesh;                  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumChildrenComponents_ReturnValue;     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_AddWheel) == 0x000008, "Wrong alignment on AVS_Vehicle_C_AddWheel");
static_assert(sizeof(AVS_Vehicle_C_AddWheel) == 0x000030, "Wrong size on AVS_Vehicle_C_AddWheel");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, NewWheel) == 0x000000, "Member 'AVS_Vehicle_C_AddWheel::NewWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_SetupWheelContactModification_RegisterSuccess) == 0x000008, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_SetupWheelContactModification_RegisterSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000009, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_CreateWheelMesh_NewMesh) == 0x000010, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_CreateWheelMesh_NewMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_GetNumChildrenComponents_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_GetNumChildrenComponents_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, Temp_int_Variable) == 0x000020, "Member 'AVS_Vehicle_C_AddWheel::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_Array_Add_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AddWheel, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x00002C, "Member 'AVS_Vehicle_C_AddWheel::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.AnyWheelContact
// 0x0040 (0x0040 - 0x0000)
struct AVS_Vehicle_C_AnyWheelContact final
{
public:
	bool                                          WheelContact;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AWheelTouched;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHasContact_ReturnValue;                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_AnyWheelContact) == 0x000008, "Wrong alignment on AVS_Vehicle_C_AnyWheelContact");
static_assert(sizeof(AVS_Vehicle_C_AnyWheelContact) == 0x000040, "Wrong size on AVS_Vehicle_C_AnyWheelContact");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, WheelContact) == 0x000000, "Member 'AVS_Vehicle_C_AnyWheelContact::WheelContact' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, AWheelTouched) == 0x000001, "Member 'AVS_Vehicle_C_AnyWheelContact::AWheelTouched' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, Temp_bool_True_if_break_was_hit_Variable) == 0x000002, "Member 'AVS_Vehicle_C_AnyWheelContact::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, Temp_int_Array_Index_Variable) == 0x000004, "Member 'AVS_Vehicle_C_AnyWheelContact::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'AVS_Vehicle_C_AnyWheelContact::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_GetAllWheels_Wheels) == 0x000018, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_GetHasContact_ReturnValue) == 0x000039, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_GetHasContact_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AnyWheelContact, CallFunc_BooleanAND_ReturnValue) == 0x00003A, "Member 'AVS_Vehicle_C_AnyWheelContact::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ApplyCOM
// 0x0048 (0x0048 - 0x0000)
struct AVS_Vehicle_C_ApplyCOM final
{
public:
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ApplyCOM) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ApplyCOM");
static_assert(sizeof(AVS_Vehicle_C_ApplyCOM) == 0x000048, "Wrong size on AVS_Vehicle_C_ApplyCOM");
static_assert(offsetof(AVS_Vehicle_C_ApplyCOM, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_ApplyCOM::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ApplyCOM, CallFunc_Add_VectorVector_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_ApplyCOM::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ApplyCOM, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000030, "Member 'AVS_Vehicle_C_ApplyCOM::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.AutomaticShifterPosition
// 0x0030 (0x0030 - 0x0000)
struct AVS_Vehicle_C_AutomaticShifterPosition final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2;  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3;  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetAirSpeed_AirSpeed;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_2;     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShifterPositions                             CallFunc_GetShifterPosition_ShifterPos;            // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetAirSpeed_AirSpeed_1;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_3;     // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_AutomaticShifterPosition) == 0x000008, "Wrong alignment on AVS_Vehicle_C_AutomaticShifterPosition");
static_assert(sizeof(AVS_Vehicle_C_AutomaticShifterPosition) == 0x000030, "Wrong size on AVS_Vehicle_C_AutomaticShifterPosition");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_IsPlayerControlled_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000002, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_IsLocallyControlled_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000007, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000008, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000009, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2) == 0x00000A, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3) == 0x00000B, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_BooleanOR_ReturnValue_1) == 0x00000C, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GetAirSpeed_AirSpeed) == 0x000010, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GetAirSpeed_AirSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_LessEqual_DoubleDouble_ReturnValue_2) == 0x000018, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_LessEqual_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_BooleanAND_ReturnValue_1) == 0x000019, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GetShifterPosition_ShifterPos) == 0x00001A, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GetShifterPosition_ShifterPos' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_GetAirSpeed_AirSpeed_1) == 0x000020, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_GetAirSpeed_AirSpeed_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_LessEqual_DoubleDouble_ReturnValue_3) == 0x000029, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_LessEqual_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AutomaticShifterPosition, CallFunc_BooleanAND_ReturnValue_2) == 0x00002A, "Member 'AVS_Vehicle_C_AutomaticShifterPosition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.AVS_PrintDebugMessage
// 0x0078 (0x0078 - 0x0000)
struct AVS_Vehicle_C_AVS_PrintDebugMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Error_;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_AVS_PrintDebugMessage) == 0x000008, "Wrong alignment on AVS_Vehicle_C_AVS_PrintDebugMessage");
static_assert(sizeof(AVS_Vehicle_C_AVS_PrintDebugMessage) == 0x000078, "Wrong size on AVS_Vehicle_C_AVS_PrintDebugMessage");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, Message) == 0x000000, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::Message' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, Error_) == 0x000010, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::Error_' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, Temp_bool_Variable) == 0x000011, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, Temp_struct_Variable) == 0x000014, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, Temp_struct_Variable_1) == 0x000024, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, CallFunc_GetDisplayName_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, K2Node_Select_Default) == 0x000048, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_AVS_PrintDebugMessage, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'AVS_Vehicle_C_AVS_PrintDebugMessage::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.AVS_Tick
// 0x0004 (0x0004 - 0x0000)
struct AVS_Vehicle_C_AVS_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_AVS_Tick) == 0x000004, "Wrong alignment on AVS_Vehicle_C_AVS_Tick");
static_assert(sizeof(AVS_Vehicle_C_AVS_Tick) == 0x000004, "Wrong size on AVS_Vehicle_C_AVS_Tick");
static_assert(offsetof(AVS_Vehicle_C_AVS_Tick, DeltaTime) == 0x000000, "Member 'AVS_Vehicle_C_AVS_Tick::DeltaTime' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CalculateSteering
// 0x0060 (0x0060 - 0x0000)
struct AVS_Vehicle_C_CalculateSteering final
{
public:
	float                                         CallFunc_GetMaxSteeringFromCurve_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetCurrentSteeringInput_SteeringInput;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxSteeringFromCurve_Speed_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_InterpSpeed_ImplicitCast;       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_InterpSpeed_ImplicitCast; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CalculateSteering) == 0x000008, "Wrong alignment on AVS_Vehicle_C_CalculateSteering");
static_assert(sizeof(AVS_Vehicle_C_CalculateSteering) == 0x000060, "Wrong size on AVS_Vehicle_C_CalculateSteering");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_GetMaxSteeringFromCurve_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_GetMaxSteeringFromCurve_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_GetCurrentSteeringInput_SteeringInput) == 0x000018, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_GetCurrentSteeringInput_SteeringInput' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, K2Node_SwitchEnum_CmpSuccess) == 0x000028, "Member 'AVS_Vehicle_C_CalculateSteering::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_FInterpTo_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_GetMaxSteeringFromCurve_Speed_ImplicitCast) == 0x000040, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_GetMaxSteeringFromCurve_Speed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000048, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_FInterpTo_InterpSpeed_ImplicitCast) == 0x000050, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_FInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CalculateSteering, CallFunc_FInterpTo_Constant_InterpSpeed_ImplicitCast) == 0x000058, "Member 'AVS_Vehicle_C_CalculateSteering::CallFunc_FInterpTo_Constant_InterpSpeed_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ChangeGear
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_ChangeGear final
{
public:
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_DynamicMaxTorque_ImplicitCast;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ChangeGear) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ChangeGear");
static_assert(sizeof(AVS_Vehicle_C_ChangeGear) == 0x000010, "Wrong size on AVS_Vehicle_C_ChangeGear");
static_assert(offsetof(AVS_Vehicle_C_ChangeGear, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_ChangeGear::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ChangeGear, K2Node_VariableSet_DynamicMaxTorque_ImplicitCast) == 0x000008, "Member 'AVS_Vehicle_C_ChangeGear::K2Node_VariableSet_DynamicMaxTorque_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.Cleanup
// 0x0038 (0x0038 - 0x0000)
struct AVS_Vehicle_C_Cleanup final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_Cleanup) == 0x000008, "Wrong alignment on AVS_Vehicle_C_Cleanup");
static_assert(sizeof(AVS_Vehicle_C_Cleanup) == 0x000038, "Wrong size on AVS_Vehicle_C_Cleanup");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_Cleanup::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AVS_Vehicle_C_Cleanup::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_Cleanup::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, CallFunc_GetAllWheels_Wheels) == 0x000010, "Member 'AVS_Vehicle_C_Cleanup::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_Cleanup::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_Cleanup::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_Cleanup::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_Cleanup, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'AVS_Vehicle_C_Cleanup::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ConstructComponents
// 0x00B8 (0x00B8 - 0x0000)
struct AVS_Vehicle_C_ConstructComponents final
{
public:
	TArray<class USceneComponent*>                LightControllerComps;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class USceneComponent*>                ComponentsToInit;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_LightController_C*             K2Node_DynamicCast_AsVehicle_Light_Controller;     // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                CallFunc_GetChildrenComponents_Children;           // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Hitch_C*                       K2Node_DynamicCast_AsVehicle_Hitch;                // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_ExhaustController_C*           K2Node_DynamicCast_AsVehicle_Exhaust_Controller;   // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicleComponent*>              CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USceneComponent*                        CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULightComponent*                        K2Node_DynamicCast_AsLight_Component;              // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ConstructComponents) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ConstructComponents");
static_assert(sizeof(AVS_Vehicle_C_ConstructComponents) == 0x0000B8, "Wrong size on AVS_Vehicle_C_ConstructComponents");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, LightControllerComps) == 0x000000, "Member 'AVS_Vehicle_C_ConstructComponents::LightControllerComps' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, ComponentsToInit) == 0x000010, "Member 'AVS_Vehicle_C_ConstructComponents::ComponentsToInit' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, Temp_int_Array_Index_Variable) == 0x000020, "Member 'AVS_Vehicle_C_ConstructComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'AVS_Vehicle_C_ConstructComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'AVS_Vehicle_C_ConstructComponents::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_AsVehicle_Light_Controller) == 0x000040, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_AsVehicle_Light_Controller' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Less_IntInt_ReturnValue) == 0x000049, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_GetChildrenComponents_Children) == 0x000050, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_GetChildrenComponents_Children' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_AsVehicle_Hitch) == 0x000060, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_AsVehicle_Hitch' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_AsVehicle_Exhaust_Controller) == 0x000070, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_AsVehicle_Exhaust_Controller' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000080, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_AsLight_Component) == 0x0000A0, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_AsLight_Component' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, K2Node_DynamicCast_bSuccess_3) == 0x0000A8, "Member 'AVS_Vehicle_C_ConstructComponents::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, Temp_int_Loop_Counter_Variable_1) == 0x0000AC, "Member 'AVS_Vehicle_C_ConstructComponents::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B0, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructComponents, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B4, "Member 'AVS_Vehicle_C_ConstructComponents::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ConstructWheels
// 0x0168 (0x0168 - 0x0000)
struct AVS_Vehicle_C_ConstructWheels final
{
public:
	TArray<class UVehicle_Wheel_C*>               VehicleChildren;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UVehicle_Wheel_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_CreateWheelMesh_NewMesh;                  // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumChildrenComponents_ReturnValue;     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetAttachParent_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocation_SweepHitResult;       // 0x0080(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(AVS_Vehicle_C_ConstructWheels) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ConstructWheels");
static_assert(sizeof(AVS_Vehicle_C_ConstructWheels) == 0x000168, "Wrong size on AVS_Vehicle_C_ConstructWheels");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, VehicleChildren) == 0x000000, "Member 'AVS_Vehicle_C_ConstructWheels::VehicleChildren' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'AVS_Vehicle_C_ConstructWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, Temp_int_Array_Index_Variable) == 0x000024, "Member 'AVS_Vehicle_C_ConstructWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_CreateWheelMesh_NewMesh) == 0x000040, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_CreateWheelMesh_NewMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_GetNumChildrenComponents_ReturnValue) == 0x000048, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_GetNumChildrenComponents_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004C, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_GetAttachParent_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_GetAttachParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x000058, "Member 'AVS_Vehicle_C_ConstructWheels::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'AVS_Vehicle_C_ConstructWheels::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_GetSocketLocation_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ConstructWheels, CallFunc_K2_SetWorldLocation_SweepHitResult) == 0x000080, "Member 'AVS_Vehicle_C_ConstructWheels::CallFunc_K2_SetWorldLocation_SweepHitResult' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CopyInputsFromHost
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_CopyInputsFromHost final
{
public:
	bool                                          CallFunc_GetHandbrakeApplied_isHandbrakeApplied;   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHandbrakeApplied_isHandbrakeApplied_1; // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentSteeringInput_SteeringInput;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CopyInputsFromHost) == 0x000008, "Wrong alignment on AVS_Vehicle_C_CopyInputsFromHost");
static_assert(sizeof(AVS_Vehicle_C_CopyInputsFromHost) == 0x000010, "Wrong size on AVS_Vehicle_C_CopyInputsFromHost");
static_assert(offsetof(AVS_Vehicle_C_CopyInputsFromHost, CallFunc_GetHandbrakeApplied_isHandbrakeApplied) == 0x000000, "Member 'AVS_Vehicle_C_CopyInputsFromHost::CallFunc_GetHandbrakeApplied_isHandbrakeApplied' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CopyInputsFromHost, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_CopyInputsFromHost::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CopyInputsFromHost, CallFunc_GetHandbrakeApplied_isHandbrakeApplied_1) == 0x000002, "Member 'AVS_Vehicle_C_CopyInputsFromHost::CallFunc_GetHandbrakeApplied_isHandbrakeApplied_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CopyInputsFromHost, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_CopyInputsFromHost::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CopyInputsFromHost, CallFunc_GetCurrentSteeringInput_SteeringInput) == 0x000008, "Member 'AVS_Vehicle_C_CopyInputsFromHost::CallFunc_GetCurrentSteeringInput_SteeringInput' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CreateBoneConstraint
// 0x0080 (0x0080 - 0x0000)
struct AVS_Vehicle_C_CreateBoneConstraint final
{
public:
	bool                                          bManualAttachment;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     VehicleConstraint;                                 // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     CallFunc_AddComponent_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CreateBoneConstraint) == 0x000010, "Wrong alignment on AVS_Vehicle_C_CreateBoneConstraint");
static_assert(sizeof(AVS_Vehicle_C_CreateBoneConstraint) == 0x000080, "Wrong size on AVS_Vehicle_C_CreateBoneConstraint");
static_assert(offsetof(AVS_Vehicle_C_CreateBoneConstraint, bManualAttachment) == 0x000000, "Member 'AVS_Vehicle_C_CreateBoneConstraint::bManualAttachment' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateBoneConstraint, RelativeTransform) == 0x000010, "Member 'AVS_Vehicle_C_CreateBoneConstraint::RelativeTransform' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateBoneConstraint, VehicleConstraint) == 0x000070, "Member 'AVS_Vehicle_C_CreateBoneConstraint::VehicleConstraint' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateBoneConstraint, CallFunc_AddComponent_ReturnValue) == 0x000078, "Member 'AVS_Vehicle_C_CreateBoneConstraint::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CreateHitchConstraints
// 0x00F0 (0x00F0 - 0x0000)
struct AVS_Vehicle_C_CreateHitchConstraints final
{
public:
	bool                                          bManualAttachment;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     VehicleConstraint;                                 // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                PhysicsHandle;                                     // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable;                              // 0x0080(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     CallFunc_CreateNewConstraint_VehicleConstraint;    // 0x00E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                CallFunc_AddComponent_ReturnValue;                 // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CreateHitchConstraints) == 0x000010, "Wrong alignment on AVS_Vehicle_C_CreateHitchConstraints");
static_assert(sizeof(AVS_Vehicle_C_CreateHitchConstraints) == 0x0000F0, "Wrong size on AVS_Vehicle_C_CreateHitchConstraints");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, bManualAttachment) == 0x000000, "Member 'AVS_Vehicle_C_CreateHitchConstraints::bManualAttachment' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, RelativeTransform) == 0x000010, "Member 'AVS_Vehicle_C_CreateHitchConstraints::RelativeTransform' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, VehicleConstraint) == 0x000070, "Member 'AVS_Vehicle_C_CreateHitchConstraints::VehicleConstraint' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, PhysicsHandle) == 0x000078, "Member 'AVS_Vehicle_C_CreateHitchConstraints::PhysicsHandle' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, Temp_struct_Variable) == 0x000080, "Member 'AVS_Vehicle_C_CreateHitchConstraints::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, CallFunc_CreateNewConstraint_VehicleConstraint) == 0x0000E0, "Member 'AVS_Vehicle_C_CreateHitchConstraints::CallFunc_CreateNewConstraint_VehicleConstraint' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateHitchConstraints, CallFunc_AddComponent_ReturnValue) == 0x0000E8, "Member 'AVS_Vehicle_C_CreateHitchConstraints::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CreateNewConstraint
// 0x0080 (0x0080 - 0x0000)
struct AVS_Vehicle_C_CreateNewConstraint final
{
public:
	bool                                          bManualAttachment;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     VehicleConstraint;                                 // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     CallFunc_AddComponent_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CreateNewConstraint) == 0x000010, "Wrong alignment on AVS_Vehicle_C_CreateNewConstraint");
static_assert(sizeof(AVS_Vehicle_C_CreateNewConstraint) == 0x000080, "Wrong size on AVS_Vehicle_C_CreateNewConstraint");
static_assert(offsetof(AVS_Vehicle_C_CreateNewConstraint, bManualAttachment) == 0x000000, "Member 'AVS_Vehicle_C_CreateNewConstraint::bManualAttachment' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateNewConstraint, RelativeTransform) == 0x000010, "Member 'AVS_Vehicle_C_CreateNewConstraint::RelativeTransform' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateNewConstraint, VehicleConstraint) == 0x000070, "Member 'AVS_Vehicle_C_CreateNewConstraint::VehicleConstraint' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateNewConstraint, CallFunc_AddComponent_ReturnValue) == 0x000078, "Member 'AVS_Vehicle_C_CreateNewConstraint::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CreateNewWheelController
// 0x0080 (0x0080 - 0x0000)
struct AVS_Vehicle_C_CreateNewWheelController final
{
public:
	bool                                          bManualAttachment;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x0010(0x0060)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CreateNewWheelController) == 0x000010, "Wrong alignment on AVS_Vehicle_C_CreateNewWheelController");
static_assert(sizeof(AVS_Vehicle_C_CreateNewWheelController) == 0x000080, "Wrong size on AVS_Vehicle_C_CreateNewWheelController");
static_assert(offsetof(AVS_Vehicle_C_CreateNewWheelController, bManualAttachment) == 0x000000, "Member 'AVS_Vehicle_C_CreateNewWheelController::bManualAttachment' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateNewWheelController, RelativeTransform) == 0x000010, "Member 'AVS_Vehicle_C_CreateNewWheelController::RelativeTransform' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateNewWheelController, Mesh) == 0x000070, "Member 'AVS_Vehicle_C_CreateNewWheelController::Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateNewWheelController, CallFunc_AddComponent_ReturnValue) == 0x000078, "Member 'AVS_Vehicle_C_CreateNewWheelController::CallFunc_AddComponent_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CreateSuspensionPreview
// 0x04B0 (0x04B0 - 0x0000)
struct AVS_Vehicle_C_CreateSuspensionPreview final
{
public:
	class UVehicle_Wheel_C*                       Wheel;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0050(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSuspensionPreview_EditorPreview;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue_1;          // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0190(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x01F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0250(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue_1;               // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x02C0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult_1;    // 0x03A8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0494(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_495[0x3];                                      // 0x0495(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x049C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CreateSuspensionPreview) == 0x000010, "Wrong alignment on AVS_Vehicle_C_CreateSuspensionPreview");
static_assert(sizeof(AVS_Vehicle_C_CreateSuspensionPreview) == 0x0004B0, "Wrong size on AVS_Vehicle_C_CreateSuspensionPreview");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, Wheel) == 0x000000, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::Wheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000018, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_MakeVector_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_MakeVector_ReturnValue_1) == 0x000038, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_GetSuspensionPreview_EditorPreview) == 0x0000B0, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_GetSuspensionPreview_EditorPreview' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_BreakTransform_Location) == 0x0000B8, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_BreakTransform_Rotation) == 0x0000D0, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_BreakTransform_Scale) == 0x0000E8, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_TransformLocation_ReturnValue) == 0x000100, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_TransformLocation_ReturnValue_1) == 0x000118, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_TransformLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_MakeTransform_ReturnValue) == 0x000130, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_MakeTransform_ReturnValue_1) == 0x000190, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_MakeTransform_ReturnValue_2) == 0x0001F0, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_MakeTransform_ReturnValue_3) == 0x000250, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_AddComponent_ReturnValue) == 0x0002B0, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_AddComponent_ReturnValue_1) == 0x0002B8, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x0002C0, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_K2_SetWorldTransform_SweepHitResult_1) == 0x0003A8, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_K2_SetWorldTransform_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_Array_Add_ReturnValue) == 0x000490, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_SetStaticMesh_ReturnValue) == 0x000494, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_Array_Add_ReturnValue_1) == 0x000498, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00049C, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0004A0, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateSuspensionPreview, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x0004A8, "Member 'AVS_Vehicle_C_CreateSuspensionPreview::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.CreateWheelMesh
// 0x0110 (0x0110 - 0x0000)
struct AVS_Vehicle_C_CreateWheelMesh final
{
public:
	class UVehicle_Wheel_C*                       WheelComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    NewMesh;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       Wheel;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CreatedMesh;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Temp_struct_Variable;                              // 0x0020(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable_1;                            // 0x0090(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CallFunc_AddComponent_ReturnValue_1;               // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_CreateWheelMesh) == 0x000010, "Wrong alignment on AVS_Vehicle_C_CreateWheelMesh");
static_assert(sizeof(AVS_Vehicle_C_CreateWheelMesh) == 0x000110, "Wrong size on AVS_Vehicle_C_CreateWheelMesh");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, WheelComponent) == 0x000000, "Member 'AVS_Vehicle_C_CreateWheelMesh::WheelComponent' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, NewMesh) == 0x000008, "Member 'AVS_Vehicle_C_CreateWheelMesh::NewMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, Wheel) == 0x000010, "Member 'AVS_Vehicle_C_CreateWheelMesh::Wheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, CreatedMesh) == 0x000018, "Member 'AVS_Vehicle_C_CreateWheelMesh::CreatedMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, Temp_struct_Variable) == 0x000020, "Member 'AVS_Vehicle_C_CreateWheelMesh::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, CallFunc_AddComponent_ReturnValue) == 0x000080, "Member 'AVS_Vehicle_C_CreateWheelMesh::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, Temp_struct_Variable_1) == 0x000090, "Member 'AVS_Vehicle_C_CreateWheelMesh::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x0000F0, "Member 'AVS_Vehicle_C_CreateWheelMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, CallFunc_AddComponent_ReturnValue_1) == 0x0000F8, "Member 'AVS_Vehicle_C_CreateWheelMesh::CallFunc_AddComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000100, "Member 'AVS_Vehicle_C_CreateWheelMesh::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_CreateWheelMesh, CallFunc_IsValid_ReturnValue) == 0x000101, "Member 'AVS_Vehicle_C_CreateWheelMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DebugDraw
// 0x03A8 (0x03A8 - 0x0000)
struct AVS_Vehicle_C_DebugDraw final
{
public:
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_Array_Get_Item;                           // 0x0058(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_146[0x2];                                      // 0x0146(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x021C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetMeshCenterOfMass_ReturnValue;          // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0248(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EWheelMode                                    Temp_byte_Variable;                                // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDebugForce                            CallFunc_Array_Get_Item_1;                         // 0x0338(0x0038)(NoDestructor)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0374(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0388(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DebugDraw) == 0x000008, "Wrong alignment on AVS_Vehicle_C_DebugDraw");
static_assert(sizeof(AVS_Vehicle_C_DebugDraw) == 0x0003A8, "Wrong size on AVS_Vehicle_C_DebugDraw");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_struct_Variable) == 0x000000, "Member 'AVS_Vehicle_C_DebugDraw::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_bool_Variable) == 0x000011, "Member 'AVS_Vehicle_C_DebugDraw::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_struct_Variable_1) == 0x000014, "Member 'AVS_Vehicle_C_DebugDraw::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_struct_Variable_2) == 0x000024, "Member 'AVS_Vehicle_C_DebugDraw::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_struct_Variable_3) == 0x000034, "Member 'AVS_Vehicle_C_DebugDraw::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_int_Array_Index_Variable) == 0x000044, "Member 'AVS_Vehicle_C_DebugDraw::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'AVS_Vehicle_C_DebugDraw::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_int_Array_Index_Variable_1) == 0x000050, "Member 'AVS_Vehicle_C_DebugDraw::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Array_Get_Item) == 0x000058, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Array_Length_ReturnValue) == 0x000140, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_bBlockingHit) == 0x000144, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_bInitialOverlap) == 0x000145, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_Time) == 0x000148, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_Distance) == 0x00014C, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_Location) == 0x000150, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_ImpactPoint) == 0x000168, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_Normal) == 0x000180, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_ImpactNormal) == 0x000198, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_PhysMat) == 0x0001B0, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_HitActor) == 0x0001B8, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_HitComponent) == 0x0001C0, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_HitBoneName) == 0x0001C8, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_BoneName) == 0x0001D0, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_HitItem) == 0x0001D8, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_ElementIndex) == 0x0001DC, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_FaceIndex) == 0x0001E0, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_TraceStart) == 0x0001E8, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_BreakHitResult_TraceEnd) == 0x000200, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Less_IntInt_ReturnValue) == 0x000218, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, K2Node_Select_Default) == 0x00021C, "Member 'AVS_Vehicle_C_DebugDraw::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_GetMeshCenterOfMass_ReturnValue) == 0x000230, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_GetMeshCenterOfMass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000248, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_byte_Variable) == 0x000330, "Member 'AVS_Vehicle_C_DebugDraw::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, Temp_int_Loop_Counter_Variable_1) == 0x000334, "Member 'AVS_Vehicle_C_DebugDraw::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Array_Get_Item_1) == 0x000338, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Add_IntInt_ReturnValue_1) == 0x000370, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, K2Node_Select_Default_1) == 0x000374, "Member 'AVS_Vehicle_C_DebugDraw::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Add_VectorVector_ReturnValue) == 0x000388, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Array_Length_ReturnValue_1) == 0x0003A0, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugDraw, CallFunc_Less_IntInt_ReturnValue_1) == 0x0003A4, "Member 'AVS_Vehicle_C_DebugDraw::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DebugPassiveText
// 0x00E0 (0x00E0 - 0x0000)
struct AVS_Vehicle_C_DebugPassiveText final
{
public:
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue_1;        // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast; // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DebugPassiveText) == 0x000008, "Wrong alignment on AVS_Vehicle_C_DebugPassiveText");
static_assert(sizeof(AVS_Vehicle_C_DebugPassiveText) == 0x0000E0, "Wrong size on AVS_Vehicle_C_DebugPassiveText");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_BoolToString_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x000020, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_DoubleToString_ReturnValue_1) == 0x000030, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_DoubleToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x000050, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000080, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000090, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000A0, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0000B0, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0000C0, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast) == 0x0000D0, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DebugPassiveText, CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1) == 0x0000D8, "Member 'AVS_Vehicle_C_DebugPassiveText::CallFunc_Conv_DoubleToString_InDouble_ImplicitCast_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DestroyOwnedComponent
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_DestroyOwnedComponent final
{
public:
	class UActorComponent*                        Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DestroyOwnedComponent) == 0x000008, "Wrong alignment on AVS_Vehicle_C_DestroyOwnedComponent");
static_assert(sizeof(AVS_Vehicle_C_DestroyOwnedComponent) == 0x000008, "Wrong size on AVS_Vehicle_C_DestroyOwnedComponent");
static_assert(offsetof(AVS_Vehicle_C_DestroyOwnedComponent, Target) == 0x000000, "Member 'AVS_Vehicle_C_DestroyOwnedComponent::Target' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DestroyWheelMesh
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_DestroyWheelMesh final
{
public:
	class UVehicle_Wheel_C*                       WheelComponent;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    MeshToDestroy;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DestroyWheelMesh) == 0x000008, "Wrong alignment on AVS_Vehicle_C_DestroyWheelMesh");
static_assert(sizeof(AVS_Vehicle_C_DestroyWheelMesh) == 0x000020, "Wrong size on AVS_Vehicle_C_DestroyWheelMesh");
static_assert(offsetof(AVS_Vehicle_C_DestroyWheelMesh, WheelComponent) == 0x000000, "Member 'AVS_Vehicle_C_DestroyWheelMesh::WheelComponent' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DestroyWheelMesh, MeshToDestroy) == 0x000008, "Member 'AVS_Vehicle_C_DestroyWheelMesh::MeshToDestroy' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DestroyWheelMesh, CallFunc_GetWheelMesh_WheelMesh) == 0x000010, "Member 'AVS_Vehicle_C_DestroyWheelMesh::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DestroyWheelMesh, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_DestroyWheelMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DetachAllWheels
// 0x0038 (0x0038 - 0x0000)
struct AVS_Vehicle_C_DetachAllWheels final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DetachAllWheels) == 0x000008, "Wrong alignment on AVS_Vehicle_C_DetachAllWheels");
static_assert(sizeof(AVS_Vehicle_C_DetachAllWheels) == 0x000038, "Wrong size on AVS_Vehicle_C_DetachAllWheels");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_DetachAllWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AVS_Vehicle_C_DetachAllWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_DetachAllWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, CallFunc_GetAllWheels_Wheels) == 0x000010, "Member 'AVS_Vehicle_C_DetachAllWheels::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_DetachAllWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_DetachAllWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DetachAllWheels, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_DetachAllWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DeterminePassiveState
// 0x0038 (0x0038 - 0x0000)
struct AVS_Vehicle_C_DeterminePassiveState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DeterminePassiveState) == 0x000008, "Wrong alignment on AVS_Vehicle_C_DeterminePassiveState");
static_assert(sizeof(AVS_Vehicle_C_DeterminePassiveState) == 0x000038, "Wrong size on AVS_Vehicle_C_DeterminePassiveState");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_DeterminePassiveState::ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, Temp_bool_Variable) == 0x000001, "Member 'AVS_Vehicle_C_DeterminePassiveState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, Temp_real_Variable) == 0x000008, "Member 'AVS_Vehicle_C_DeterminePassiveState::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_BooleanAND_ReturnValue_1) == 0x000012, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_IsPlayerControlled_ReturnValue) == 0x000013, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_Not_PreBool_ReturnValue_1) == 0x000020, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, K2Node_Select_Default) == 0x000028, "Member 'AVS_Vehicle_C_DeterminePassiveState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_BooleanAND_ReturnValue_2) == 0x000030, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000031, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DeterminePassiveState, CallFunc_BooleanAND_ReturnValue_3) == 0x000032, "Member 'AVS_Vehicle_C_DeterminePassiveState::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.DoStabilityControl
// 0x0240 (0x0240 - 0x0000)
struct AVS_Vehicle_C_DoStabilityControl final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_2;                    // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_3;                    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0080(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AnyWheelContact_WheelContact;             // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue_1;  // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAirSpeed_AirSpeed;                     // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_GetSignVector_ReturnValue;         // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_GetAbs_ReturnValue;                // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_ComponentMin_ReturnValue;          // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_DoStabilityControl) == 0x000010, "Wrong alignment on AVS_Vehicle_C_DoStabilityControl");
static_assert(sizeof(AVS_Vehicle_C_DoStabilityControl) == 0x000240, "Wrong size on AVS_Vehicle_C_DoStabilityControl");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetVehicleMesh_Mesh) == 0x000018, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetVehicleMesh_Mesh_1) == 0x000020, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetVehicleMesh_Mesh_2) == 0x000040, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetVehicleMesh_Mesh_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetVehicleMesh_Mesh_3) == 0x000048, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetVehicleMesh_Mesh_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000080, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_AnyWheelContact_WheelContact) == 0x0000E0, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_AnyWheelContact_WheelContact' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_InverseTransformDirection_ReturnValue) == 0x0000E8, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_InverseTransformDirection_ReturnValue_1) == 0x000100, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_InverseTransformDirection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GetAirSpeed_AirSpeed) == 0x000118, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GetAirSpeed_AirSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000120, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000138, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_BreakRotator_Roll) == 0x00013C, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_BreakRotator_Pitch) == 0x000140, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_BreakRotator_Yaw) == 0x000144, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_MapRangeClamped_ReturnValue) == 0x000148, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000150, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_MakeVector_ReturnValue_1) == 0x000158, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000170, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Vector_GetSignVector_ReturnValue) == 0x000188, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Vector_GetSignVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Vector_GetAbs_ReturnValue) == 0x0001A0, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Vector_GetAbs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Vector_ComponentMin_ReturnValue) == 0x0001B8, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Vector_ComponentMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0001D0, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0001E8, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000200, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000218, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_DoStabilityControl, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000230, "Member 'AVS_Vehicle_C_DoStabilityControl::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.EngineSimluation
// 0x0420 (0x0420 - 0x0000)
struct AVS_Vehicle_C_EngineSimluation final
{
public:
	double                                        OldAirSpeed;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AverageWheelSpeed;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalWheelSpeed;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GearThresh;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ChosenGearNum;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastGearNum;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x003F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0068(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpEaseInOut_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueBetweenValues_Value;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           CallFunc_Array_Get_Item;                           // 0x0094(0x0020)(NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_3;            // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x00E0(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Percent;          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Value_1;            // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_4;                     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Percent_1;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueBetweenValues_Value_2;            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_5;                     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Percent_2;        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Value_3;            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_6;                     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Value_4;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpEaseInOut_ReturnValue_1;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           K2Node_MakeStruct_VehicleGear;                     // 0x0190(0x0020)(NoDestructor)
	struct FVehicleGear                           CallFunc_Array_Get_Item_1;                         // 0x01B0(0x0020)(NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_2;         // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_4;            // 0x01D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueBetweenValues_Value_5;            // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Percent_3;        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_7;                     // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_8;                     // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue_9;                     // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Value_6;            // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_3;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0221(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0222(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0223(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueBetweenValues_Value_7;            // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item_2;                         // 0x0238(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetRotationSpeed_RotationSpeed;           // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0290(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x02D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D2[0x6];                                      // 0x02D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_InRange_FloatFloat_Max_ImplicitCast;      // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Min_ImplicitCast;      // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast;         // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_End_ImplicitCast;   // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Begin_ImplicitCast; // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_PercentBetween_ImplicitCast; // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast;                  // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Min_ImplicitCast;                  // 0x0320(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Min_ImplicitCast_1;    // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast_1;          // 0x0330(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetPercentBetweenValues_End_ImplicitCast; // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Begin_ImplicitCast; // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast_1;                // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Begin_ImplicitCast_1; // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Min_ImplicitCast_1;                // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_End_ImplicitCast_1; // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Max_ImplicitCast_1;    // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Min_ImplicitCast_2;    // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast_1;       // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_End_ImplicitCast_1; // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_1; // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_End_ImplicitCast_2; // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast_1;      // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetValueBetweenValues_PercentBetween_ImplicitCast_1; // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_2; // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_B_ImplicitCast;                      // 0x03B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_A_ImplicitCast;                      // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Begin_ImplicitCast_2; // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_InRange_FloatFloat_Max_ImplicitCast_2;    // 0x03C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_End_ImplicitCast_3; // 0x03D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast_2;                // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Max_ImplicitCast_3;                // 0x03E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetValueBetweenValues_Begin_ImplicitCast_3; // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Min_ImplicitCast_2;                // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_Min_ImplicitCast_3;                // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast_2;       // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_End_ImplicitCast_2; // 0x0408(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_B_ImplicitCast_3;       // 0x0410(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_3; // 0x0418(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_EngineSimluation) == 0x000008, "Wrong alignment on AVS_Vehicle_C_EngineSimluation");
static_assert(sizeof(AVS_Vehicle_C_EngineSimluation) == 0x000420, "Wrong size on AVS_Vehicle_C_EngineSimluation");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, OldAirSpeed) == 0x000000, "Member 'AVS_Vehicle_C_EngineSimluation::OldAirSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, AverageWheelSpeed) == 0x000008, "Member 'AVS_Vehicle_C_EngineSimluation::AverageWheelSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, TotalWheelSpeed) == 0x000010, "Member 'AVS_Vehicle_C_EngineSimluation::TotalWheelSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, GearThresh) == 0x000018, "Member 'AVS_Vehicle_C_EngineSimluation::GearThresh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, ChosenGearNum) == 0x000020, "Member 'AVS_Vehicle_C_EngineSimluation::ChosenGearNum' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, LastGearNum) == 0x000024, "Member 'AVS_Vehicle_C_EngineSimluation::LastGearNum' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_bool_True_if_break_was_hit_Variable) == 0x000028, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000031, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_Length_ReturnValue_1) == 0x000034, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_LastIndex_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00003C, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00003D, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00003E, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x00003F, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000041, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, K2Node_SwitchEnum_CmpSuccess) == 0x000043, "Member 'AVS_Vehicle_C_EngineSimluation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_BooleanAND_ReturnValue_1) == 0x000049, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000054, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x00005C, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Not_PreBool_ReturnValue_1) == 0x00005D, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_int_Array_Index_Variable) == 0x000060, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000064, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_K2_SetTimer_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FInterpEaseInOut_ReturnValue) == 0x000070, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FInterpEaseInOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_real_Variable) == 0x000078, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetFloatValue_ReturnValue) == 0x000080, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value) == 0x000088, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_int_Array_Index_Variable_1) == 0x000090, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_Get_Item) == 0x000094, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_NotEqual_IntInt_ReturnValue_3) == 0x0000B4, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_NotEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_ReturnValue) == 0x0000B5, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue) == 0x0000C0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Add_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_1) == 0x0000D0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_real_Variable_1) == 0x0000D8, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_K2_SetTimer_ReturnValue_1) == 0x0000E0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Percent) == 0x0000E8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Percent' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000F0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_2) == 0x0000F8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_1) == 0x000100, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x000108, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_3) == 0x000110, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000118, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_4) == 0x000120, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Percent_1) == 0x000128, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Percent_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetFloatValue_ReturnValue_1) == 0x000130, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_2) == 0x000138, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000140, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_5) == 0x000148, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Lerp_ReturnValue) == 0x000150, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Percent_2) == 0x000158, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Percent_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_3) == 0x000160, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000168, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_6) == 0x000170, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_4) == 0x000178, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FInterpEaseInOut_ReturnValue_1) == 0x000180, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FInterpEaseInOut_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, K2Node_SwitchEnum_CmpSuccess_1) == 0x000188, "Member 'AVS_Vehicle_C_EngineSimluation::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_int_Array_Index_Variable_2) == 0x00018C, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, K2Node_MakeStruct_VehicleGear) == 0x000190, "Member 'AVS_Vehicle_C_EngineSimluation::K2Node_MakeStruct_VehicleGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_Get_Item_1) == 0x0001B0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_ReturnValue_2) == 0x0001D0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_NotEqual_IntInt_ReturnValue_4) == 0x0001D1, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_NotEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_5) == 0x0001D8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Percent_3) == 0x0001E0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Percent_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0001E8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_7) == 0x0001F0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_8) == 0x0001F8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000200, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000208, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_ReturnValue_9) == 0x000210, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_6) == 0x000218, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_6' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_ReturnValue_3) == 0x000220, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Greater_IntInt_ReturnValue) == 0x000221, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000222, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_bool_Variable) == 0x000223, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Value_7) == 0x000228, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Value_7' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000230, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_Get_Item_2) == 0x000238, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000240, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, K2Node_Select_Default) == 0x000248, "Member 'AVS_Vehicle_C_EngineSimluation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000250, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetRotationSpeed_RotationSpeed) == 0x000258, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetRotationSpeed_RotationSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Array_Length_ReturnValue_2) == 0x000260, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, Temp_int_Loop_Counter_Variable_2) == 0x000264, "Member 'AVS_Vehicle_C_EngineSimluation::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_IntInt_ReturnValue_1) == 0x000268, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_IntInt_ReturnValue_2) == 0x000269, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Add_IntInt_ReturnValue_2) == 0x00026C, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000270, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000278, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000280, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000288, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetVehicleMesh_Mesh) == 0x000290, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000298, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_VSize_ReturnValue) == 0x0002B0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0002B8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0002C0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x0002C8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, K2Node_SwitchEnum_CmpSuccess_2) == 0x0002D0, "Member 'AVS_Vehicle_C_EngineSimluation::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0002D1, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_Max_ImplicitCast) == 0x0002D8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_Min_ImplicitCast) == 0x0002E0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x0002E8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_B_ImplicitCast) == 0x0002F0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x0002F8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x0002FC, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_End_ImplicitCast) == 0x000300, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_End_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Begin_ImplicitCast) == 0x000308, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Begin_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_PercentBetween_ImplicitCast) == 0x000310, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_PercentBetween_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Max_ImplicitCast) == 0x000318, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Min_ImplicitCast) == 0x000320, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_Min_ImplicitCast_1) == 0x000328, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_K2_SetTimer_Time_ImplicitCast_1) == 0x000330, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_K2_SetTimer_Time_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_End_ImplicitCast) == 0x000338, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_End_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Begin_ImplicitCast) == 0x000340, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Begin_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Max_ImplicitCast_1) == 0x000348, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Begin_ImplicitCast_1) == 0x000350, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Begin_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Min_ImplicitCast_1) == 0x000358, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Min_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_End_ImplicitCast_1) == 0x000360, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_End_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_Max_ImplicitCast_1) == 0x000368, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_Max_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_Min_ImplicitCast_2) == 0x000370, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_Min_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_B_ImplicitCast_1) == 0x000378, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_End_ImplicitCast_1) == 0x000380, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_End_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_1) == 0x000388, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_End_ImplicitCast_2) == 0x000390, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_End_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetFloatValue_InTime_ImplicitCast_1) == 0x000398, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetFloatValue_InTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_PercentBetween_ImplicitCast_1) == 0x0003A0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_PercentBetween_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_2) == 0x0003A8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Lerp_B_ImplicitCast) == 0x0003B0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Lerp_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Lerp_A_ImplicitCast) == 0x0003B8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Lerp_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Begin_ImplicitCast_2) == 0x0003C0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Begin_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_InRange_FloatFloat_Max_ImplicitCast_2) == 0x0003C8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_InRange_FloatFloat_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_End_ImplicitCast_3) == 0x0003D0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_End_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Max_ImplicitCast_2) == 0x0003D8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Max_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Max_ImplicitCast_3) == 0x0003E0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Max_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetValueBetweenValues_Begin_ImplicitCast_3) == 0x0003E8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetValueBetweenValues_Begin_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Min_ImplicitCast_2) == 0x0003F0, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Min_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_FClamp_Min_ImplicitCast_3) == 0x0003F8, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_FClamp_Min_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_B_ImplicitCast_2) == 0x000400, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_End_ImplicitCast_2) == 0x000408, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_End_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_Less_DoubleDouble_B_ImplicitCast_3) == 0x000410, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_Less_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_EngineSimluation, CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_3) == 0x000418, "Member 'AVS_Vehicle_C_EngineSimluation::CallFunc_GetPercentBetweenValues_Begin_ImplicitCast_3' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ExecuteUbergraph_AVS_Vehicle
// 0x0230 (0x0230 - 0x0000)
struct AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels_1;                    // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_EngineRunning;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Axis;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Throttle;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Brake;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Handbrake;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShifterPositions                             K2Node_CustomEvent_ShifterPosition;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Hitch_C*                       K2Node_CustomEvent_TowHitch;                       // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       K2Node_CustomEvent_TrailerHitch;                   // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_CustomEvent_ServerTrailerRotation;          // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_1;               // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_2;               // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_3;               // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x6];                                      // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_4;               // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle_5;               // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0134(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0148(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_OldController;                        // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item_1;                         // 0x0170(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsAttached_ReturnValue;                // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTime_1;                          // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetupWheelContactModification_RegisterSuccess; // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_NewController;                        // 0x0188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTime;                            // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0197(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0198(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x01B0(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentGear_Gear;                      // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           CallFunc_GetCurrentGear_CurrentGear;               // 0x01BC(0x0020)(NoDestructor)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetTorque_Torque;                         // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHandbrakeApplied_isHandbrakeApplied;   // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetCurrentSteering_CurrentSteering;       // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAVS_Inputs                            K2Node_MakeStruct_AVS_Inputs;                      // 0x01F8(0x0018)(NoDestructor)
	float                                         K2Node_MakeStruct_Throttle_ImplicitCast;           // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_TickDelta_ImplicitCast;         // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Torque_ImplicitCast;             // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Brake_ImplicitCast;              // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Steering_ImplicitCast;           // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle");
static_assert(sizeof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle) == 0x000230, "Wrong size on AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, EntryPoint) == 0x000000, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::EntryPoint' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetOwningVehicle_Vehicle) == 0x000008, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetOwningVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_HasAuthority_ReturnValue) == 0x000011, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetAllWheels_Wheels) == 0x000018, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetAllWheels_Wheels_1) == 0x000030, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetAllWheels_Wheels_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Array_Get_Item) == 0x000040, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetWheelMesh_WheelMesh) == 0x000050, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_EngineRunning) == 0x000058, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_EngineRunning' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_Axis) == 0x000060, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_Axis' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_Throttle) == 0x000068, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_Throttle' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_Brake) == 0x000070, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_Brake' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_Handbrake) == 0x000078, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_Handbrake' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_ShifterPosition) == 0x000079, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_ShifterPosition' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_TowHitch) == 0x000080, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_TowHitch' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_TrailerHitch) == 0x000088, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_TrailerHitch' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue_2) == 0x000090, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue_3) == 0x000091, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_BooleanAND_ReturnValue_1) == 0x000092, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000098, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CustomEvent_ServerTrailerRotation) == 0x0000B0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CustomEvent_ServerTrailerRotation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, Temp_int_Loop_Counter_Variable) == 0x0000C8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Less_IntInt_ReturnValue) == 0x0000CC, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Add_IntInt_ReturnValue) == 0x0000D0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetOwningVehicle_Vehicle_1) == 0x0000D8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetOwningVehicle_Vehicle_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue_4) == 0x0000E0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000E1, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetOwningVehicle_Vehicle_2) == 0x0000E8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetOwningVehicle_Vehicle_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x0000F0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000108, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue_5) == 0x000109, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetOwningVehicle_Vehicle_3) == 0x000110, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetOwningVehicle_Vehicle_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000118, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsValid_ReturnValue_6) == 0x000119, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetOwningVehicle_Vehicle_4) == 0x000120, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetOwningVehicle_Vehicle_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetOwningVehicle_Vehicle_5) == 0x000128, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetOwningVehicle_Vehicle_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_HasAuthority_ReturnValue_1) == 0x000130, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CreateDelegate_OutputDelegate) == 0x000134, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000148, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, Temp_int_Loop_Counter_Variable_1) == 0x000150, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000154, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000158, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_Event_OldController) == 0x000160, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, Temp_int_Array_Index_Variable_1) == 0x000168, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Array_Get_Item_1) == 0x000170, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetIsAttached_ReturnValue) == 0x000178, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetIsAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_Event_DeltaTime_1) == 0x00017C, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_Event_DeltaTime_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_SetupWheelContactModification_RegisterSuccess) == 0x000180, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_SetupWheelContactModification_RegisterSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_Event_NewController) == 0x000188, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_Event_DeltaTime) == 0x000190, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_Event_DeltaTime' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsPlayerControlled_ReturnValue) == 0x000194, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_IsLocallyControlled_ReturnValue) == 0x000195, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_Not_PreBool_ReturnValue) == 0x000196, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_BooleanAND_ReturnValue_2) == 0x000197, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_CreateDelegate_OutputDelegate_1) == 0x000198, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_BooleanOR_ReturnValue) == 0x0001A8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0001B0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetCurrentGear_Gear) == 0x0001B8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetCurrentGear_Gear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetCurrentGear_CurrentGear) == 0x0001BC, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetCurrentGear_CurrentGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetTorque_Torque) == 0x0001E0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetTorque_Torque' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001E8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetHandbrakeApplied_isHandbrakeApplied) == 0x0001E9, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetHandbrakeApplied_isHandbrakeApplied' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, CallFunc_GetCurrentSteering_CurrentSteering) == 0x0001F0, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::CallFunc_GetCurrentSteering_CurrentSteering' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_MakeStruct_AVS_Inputs) == 0x0001F8, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_MakeStruct_AVS_Inputs' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_MakeStruct_Throttle_ImplicitCast) == 0x000210, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_MakeStruct_Throttle_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_VariableSet_TickDelta_ImplicitCast) == 0x000218, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_VariableSet_TickDelta_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_MakeStruct_Torque_ImplicitCast) == 0x000220, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_MakeStruct_Torque_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_MakeStruct_Brake_ImplicitCast) == 0x000224, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_MakeStruct_Brake_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle, K2Node_MakeStruct_Steering_ImplicitCast) == 0x000228, "Member 'AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle::K2Node_MakeStruct_Steering_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GearChanged
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GearChanged final
{
public:
	int32                                         Param_PreviousGear;                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Param_CurrentGear;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GearChanged) == 0x000004, "Wrong alignment on AVS_Vehicle_C_GearChanged");
static_assert(sizeof(AVS_Vehicle_C_GearChanged) == 0x000008, "Wrong size on AVS_Vehicle_C_GearChanged");
static_assert(offsetof(AVS_Vehicle_C_GearChanged, Param_PreviousGear) == 0x000000, "Member 'AVS_Vehicle_C_GearChanged::Param_PreviousGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GearChanged, Param_CurrentGear) == 0x000004, "Member 'AVS_Vehicle_C_GearChanged::Param_CurrentGear' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetAcceleration
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetAcceleration final
{
public:
	double                                        Param_Acceleration;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetAcceleration) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetAcceleration");
static_assert(sizeof(AVS_Vehicle_C_GetAcceleration) == 0x000008, "Wrong size on AVS_Vehicle_C_GetAcceleration");
static_assert(offsetof(AVS_Vehicle_C_GetAcceleration, Param_Acceleration) == 0x000000, "Member 'AVS_Vehicle_C_GetAcceleration::Param_Acceleration' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetAirSpeed
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetAirSpeed final
{
public:
	double                                        Param_AirSpeed;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetAirSpeed) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetAirSpeed");
static_assert(sizeof(AVS_Vehicle_C_GetAirSpeed) == 0x000008, "Wrong size on AVS_Vehicle_C_GetAirSpeed");
static_assert(offsetof(AVS_Vehicle_C_GetAirSpeed, Param_AirSpeed) == 0x000000, "Member 'AVS_Vehicle_C_GetAirSpeed::Param_AirSpeed' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetAllWheels
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_GetAllWheels final
{
public:
	TArray<class UVehicle_Wheel_C*>               Param_Wheels;                                      // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(AVS_Vehicle_C_GetAllWheels) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetAllWheels");
static_assert(sizeof(AVS_Vehicle_C_GetAllWheels) == 0x000010, "Wrong size on AVS_Vehicle_C_GetAllWheels");
static_assert(offsetof(AVS_Vehicle_C_GetAllWheels, Param_Wheels) == 0x000000, "Member 'AVS_Vehicle_C_GetAllWheels::Param_Wheels' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetBrake
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetBrake final
{
public:
	double                                        Param_Brake;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetBrake) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetBrake");
static_assert(sizeof(AVS_Vehicle_C_GetBrake) == 0x000008, "Wrong size on AVS_Vehicle_C_GetBrake");
static_assert(offsetof(AVS_Vehicle_C_GetBrake, Param_Brake) == 0x000000, "Member 'AVS_Vehicle_C_GetBrake::Param_Brake' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetBrakeApplied
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_GetBrakeApplied final
{
public:
	bool                                          Param_IsBrakeApplied;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetBrakeApplied) == 0x000001, "Wrong alignment on AVS_Vehicle_C_GetBrakeApplied");
static_assert(sizeof(AVS_Vehicle_C_GetBrakeApplied) == 0x000001, "Wrong size on AVS_Vehicle_C_GetBrakeApplied");
static_assert(offsetof(AVS_Vehicle_C_GetBrakeApplied, Param_IsBrakeApplied) == 0x000000, "Member 'AVS_Vehicle_C_GetBrakeApplied::Param_IsBrakeApplied' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetCurrentGear
// 0x0028 (0x0028 - 0x0000)
struct AVS_Vehicle_C_GetCurrentGear final
{
public:
	int32                                         Param_Gear;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           Param_CurrentGear;                                 // 0x0004(0x0020)(Parm, OutParm, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetCurrentGear) == 0x000004, "Wrong alignment on AVS_Vehicle_C_GetCurrentGear");
static_assert(sizeof(AVS_Vehicle_C_GetCurrentGear) == 0x000028, "Wrong size on AVS_Vehicle_C_GetCurrentGear");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentGear, Param_Gear) == 0x000000, "Member 'AVS_Vehicle_C_GetCurrentGear::Param_Gear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentGear, Param_CurrentGear) == 0x000004, "Member 'AVS_Vehicle_C_GetCurrentGear::Param_CurrentGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentGear, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_GetCurrentGear::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetCurrentSteering
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetCurrentSteering final
{
public:
	double                                        CurrentSteering;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetCurrentSteering) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetCurrentSteering");
static_assert(sizeof(AVS_Vehicle_C_GetCurrentSteering) == 0x000008, "Wrong size on AVS_Vehicle_C_GetCurrentSteering");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentSteering, CurrentSteering) == 0x000000, "Member 'AVS_Vehicle_C_GetCurrentSteering::CurrentSteering' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetCurrentSteeringInput
// 0x0018 (0x0018 - 0x0000)
struct AVS_Vehicle_C_GetCurrentSteeringInput final
{
public:
	double                                        Param_SteeringInput;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetCurrentSteeringInput) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetCurrentSteeringInput");
static_assert(sizeof(AVS_Vehicle_C_GetCurrentSteeringInput) == 0x000018, "Wrong size on AVS_Vehicle_C_GetCurrentSteeringInput");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentSteeringInput, Param_SteeringInput) == 0x000000, "Member 'AVS_Vehicle_C_GetCurrentSteeringInput::Param_SteeringInput' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentSteeringInput, Temp_bool_Variable) == 0x000008, "Member 'AVS_Vehicle_C_GetCurrentSteeringInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentSteeringInput, CallFunc_IsLocallyControlled_ReturnValue) == 0x000009, "Member 'AVS_Vehicle_C_GetCurrentSteeringInput::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetCurrentSteeringInput, K2Node_Select_Default) == 0x000010, "Member 'AVS_Vehicle_C_GetCurrentSteeringInput::K2Node_Select_Default' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetEngineRunning
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_GetEngineRunning final
{
public:
	bool                                          Param_EngineRunning;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetEngineRunning) == 0x000001, "Wrong alignment on AVS_Vehicle_C_GetEngineRunning");
static_assert(sizeof(AVS_Vehicle_C_GetEngineRunning) == 0x000001, "Wrong size on AVS_Vehicle_C_GetEngineRunning");
static_assert(offsetof(AVS_Vehicle_C_GetEngineRunning, Param_EngineRunning) == 0x000000, "Member 'AVS_Vehicle_C_GetEngineRunning::Param_EngineRunning' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetExactCenterOfMass
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_GetExactCenterOfMass final
{
public:
	struct FVector                                ExactCOM;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsValid;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetExactCenterOfMass) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetExactCenterOfMass");
static_assert(sizeof(AVS_Vehicle_C_GetExactCenterOfMass) == 0x000020, "Wrong size on AVS_Vehicle_C_GetExactCenterOfMass");
static_assert(offsetof(AVS_Vehicle_C_GetExactCenterOfMass, ExactCOM) == 0x000000, "Member 'AVS_Vehicle_C_GetExactCenterOfMass::ExactCOM' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetExactCenterOfMass, IsValid) == 0x000018, "Member 'AVS_Vehicle_C_GetExactCenterOfMass::IsValid' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetHandbrakeApplied
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_GetHandbrakeApplied final
{
public:
	bool                                          IsHandbrakeApplied;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetHandbrakeApplied) == 0x000001, "Wrong alignment on AVS_Vehicle_C_GetHandbrakeApplied");
static_assert(sizeof(AVS_Vehicle_C_GetHandbrakeApplied) == 0x000001, "Wrong size on AVS_Vehicle_C_GetHandbrakeApplied");
static_assert(offsetof(AVS_Vehicle_C_GetHandbrakeApplied, IsHandbrakeApplied) == 0x000000, "Member 'AVS_Vehicle_C_GetHandbrakeApplied::IsHandbrakeApplied' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetHostTrailerRotation
// 0x0018 (0x0018 - 0x0000)
struct AVS_Vehicle_C_GetHostTrailerRotation final
{
public:
	struct FRotator                               Param_HostTrailerRotation;                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AVS_Vehicle_C_GetHostTrailerRotation) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetHostTrailerRotation");
static_assert(sizeof(AVS_Vehicle_C_GetHostTrailerRotation) == 0x000018, "Wrong size on AVS_Vehicle_C_GetHostTrailerRotation");
static_assert(offsetof(AVS_Vehicle_C_GetHostTrailerRotation, Param_HostTrailerRotation) == 0x000000, "Member 'AVS_Vehicle_C_GetHostTrailerRotation::Param_HostTrailerRotation' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetInitializationState
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_GetInitializationState final
{
public:
	bool                                          Param_Initialized;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetInitializationState) == 0x000001, "Wrong alignment on AVS_Vehicle_C_GetInitializationState");
static_assert(sizeof(AVS_Vehicle_C_GetInitializationState) == 0x000001, "Wrong size on AVS_Vehicle_C_GetInitializationState");
static_assert(offsetof(AVS_Vehicle_C_GetInitializationState, Param_Initialized) == 0x000000, "Member 'AVS_Vehicle_C_GetInitializationState::Param_Initialized' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetLightsActive
// 0x000C (0x000C - 0x0000)
struct AVS_Vehicle_C_GetLightsActive final
{
public:
	class FName                                   LightGroup;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetLightsActive) == 0x000004, "Wrong alignment on AVS_Vehicle_C_GetLightsActive");
static_assert(sizeof(AVS_Vehicle_C_GetLightsActive) == 0x00000C, "Wrong size on AVS_Vehicle_C_GetLightsActive");
static_assert(offsetof(AVS_Vehicle_C_GetLightsActive, LightGroup) == 0x000000, "Member 'AVS_Vehicle_C_GetLightsActive::LightGroup' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetLightsActive, Active) == 0x000008, "Member 'AVS_Vehicle_C_GetLightsActive::Active' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetLightsActive, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'AVS_Vehicle_C_GetLightsActive::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.getRPM
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetRPM final
{
public:
	double                                        Param_RPM;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetRPM) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetRPM");
static_assert(sizeof(AVS_Vehicle_C_GetRPM) == 0x000008, "Wrong size on AVS_Vehicle_C_GetRPM");
static_assert(offsetof(AVS_Vehicle_C_GetRPM, Param_RPM) == 0x000000, "Member 'AVS_Vehicle_C_GetRPM::Param_RPM' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetSelectedGear
// 0x0028 (0x0028 - 0x0000)
struct AVS_Vehicle_C_GetSelectedGear final
{
public:
	int32                                         GearNumber;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           SelectedGear;                                      // 0x0004(0x0020)(Parm, OutParm, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetSelectedGear) == 0x000004, "Wrong alignment on AVS_Vehicle_C_GetSelectedGear");
static_assert(sizeof(AVS_Vehicle_C_GetSelectedGear) == 0x000028, "Wrong size on AVS_Vehicle_C_GetSelectedGear");
static_assert(offsetof(AVS_Vehicle_C_GetSelectedGear, GearNumber) == 0x000000, "Member 'AVS_Vehicle_C_GetSelectedGear::GearNumber' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetSelectedGear, SelectedGear) == 0x000004, "Member 'AVS_Vehicle_C_GetSelectedGear::SelectedGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_GetSelectedGear, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_GetSelectedGear::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetShifterPosition
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_GetShifterPosition final
{
public:
	EShifterPositions                             ShifterPos;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetShifterPosition) == 0x000001, "Wrong alignment on AVS_Vehicle_C_GetShifterPosition");
static_assert(sizeof(AVS_Vehicle_C_GetShifterPosition) == 0x000001, "Wrong size on AVS_Vehicle_C_GetShifterPosition");
static_assert(offsetof(AVS_Vehicle_C_GetShifterPosition, ShifterPos) == 0x000000, "Member 'AVS_Vehicle_C_GetShifterPosition::ShifterPos' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetSlip
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetSlip final
{
public:
	double                                        Param_Slip;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetSlip) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetSlip");
static_assert(sizeof(AVS_Vehicle_C_GetSlip) == 0x000008, "Wrong size on AVS_Vehicle_C_GetSlip");
static_assert(offsetof(AVS_Vehicle_C_GetSlip, Param_Slip) == 0x000000, "Member 'AVS_Vehicle_C_GetSlip::Param_Slip' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetSpeedUnitData
// 0x0030 (0x0030 - 0x0000)
struct AVS_Vehicle_C_GetSpeedUnitData final
{
public:
	struct FSpeedUnit                             Param_SpeedUnit;                                   // 0x0000(0x0030)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetSpeedUnitData) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetSpeedUnitData");
static_assert(sizeof(AVS_Vehicle_C_GetSpeedUnitData) == 0x000030, "Wrong size on AVS_Vehicle_C_GetSpeedUnitData");
static_assert(offsetof(AVS_Vehicle_C_GetSpeedUnitData, Param_SpeedUnit) == 0x000000, "Member 'AVS_Vehicle_C_GetSpeedUnitData::Param_SpeedUnit' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetTargetSpeed
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetTargetSpeed final
{
public:
	double                                        Param_TargetSpeed;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetTargetSpeed) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetTargetSpeed");
static_assert(sizeof(AVS_Vehicle_C_GetTargetSpeed) == 0x000008, "Wrong size on AVS_Vehicle_C_GetTargetSpeed");
static_assert(offsetof(AVS_Vehicle_C_GetTargetSpeed, Param_TargetSpeed) == 0x000000, "Member 'AVS_Vehicle_C_GetTargetSpeed::Param_TargetSpeed' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.getThrottle
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetThrottle final
{
public:
	double                                        Param_Throttle;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetThrottle) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetThrottle");
static_assert(sizeof(AVS_Vehicle_C_GetThrottle) == 0x000008, "Wrong size on AVS_Vehicle_C_GetThrottle");
static_assert(offsetof(AVS_Vehicle_C_GetThrottle, Param_Throttle) == 0x000000, "Member 'AVS_Vehicle_C_GetThrottle::Param_Throttle' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.getTorque
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetTorque final
{
public:
	double                                        Param_Torque;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetTorque) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetTorque");
static_assert(sizeof(AVS_Vehicle_C_GetTorque) == 0x000008, "Wrong size on AVS_Vehicle_C_GetTorque");
static_assert(offsetof(AVS_Vehicle_C_GetTorque, Param_Torque) == 0x000000, "Member 'AVS_Vehicle_C_GetTorque::Param_Torque' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.GetVehicleMesh
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_GetVehicleMesh final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_GetVehicleMesh) == 0x000008, "Wrong alignment on AVS_Vehicle_C_GetVehicleMesh");
static_assert(sizeof(AVS_Vehicle_C_GetVehicleMesh) == 0x000008, "Wrong size on AVS_Vehicle_C_GetVehicleMesh");
static_assert(offsetof(AVS_Vehicle_C_GetVehicleMesh, Mesh) == 0x000000, "Member 'AVS_Vehicle_C_GetVehicleMesh::Mesh' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitAudio
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_InitAudio final
{
public:
	class UVehicle_EngineAudio_C*                 CallFunc_GetComponentByClass_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_InitAudio) == 0x000008, "Wrong alignment on AVS_Vehicle_C_InitAudio");
static_assert(sizeof(AVS_Vehicle_C_InitAudio) == 0x000008, "Wrong size on AVS_Vehicle_C_InitAudio");
static_assert(offsetof(AVS_Vehicle_C_InitAudio, CallFunc_GetComponentByClass_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_InitAudio::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitCOM
// 0x01C0 (0x01C0 - 0x0000)
struct AVS_Vehicle_C_InitCOM final
{
public:
	class UVehicle_CenterOfMass_C*                Component;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetAttachParent_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_CenterOfMass_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMeshCenterOfMass_ReturnValue;          // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetMeshCenterOfMass_ReturnValue_1;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x00D8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(AVS_Vehicle_C_InitCOM) == 0x000010, "Wrong alignment on AVS_Vehicle_C_InitCOM");
static_assert(sizeof(AVS_Vehicle_C_InitCOM) == 0x0001C0, "Wrong size on AVS_Vehicle_C_InitCOM");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, Component) == 0x000000, "Member 'AVS_Vehicle_C_InitCOM::Component' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, Temp_bool_Variable) == 0x000008, "Member 'AVS_Vehicle_C_InitCOM::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_SetStaticMesh_ReturnValue) == 0x000009, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_GetAttachParent_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_GetAttachParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_GetComponentByClass_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_GetMeshCenterOfMass_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_GetMeshCenterOfMass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, K2Node_Select_Default) == 0x000040, "Member 'AVS_Vehicle_C_InitCOM::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_GetMeshCenterOfMass_ReturnValue_1) == 0x000058, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_GetMeshCenterOfMass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_AddComponent_ReturnValue) == 0x0000D0, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitCOM, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0000D8, "Member 'AVS_Vehicle_C_InitCOM::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitExhausts
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_InitExhausts final
{
public:
	TArray<class UVehicle_ExhaustController_C*>   CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0000(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(AVS_Vehicle_C_InitExhausts) == 0x000008, "Wrong alignment on AVS_Vehicle_C_InitExhausts");
static_assert(sizeof(AVS_Vehicle_C_InitExhausts) == 0x000010, "Wrong size on AVS_Vehicle_C_InitExhausts");
static_assert(offsetof(AVS_Vehicle_C_InitExhausts, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_InitExhausts::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitLights
// 0x0030 (0x0030 - 0x0000)
struct AVS_Vehicle_C_InitLights final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_LightController_C*>     CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_LightController_C*             CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_InitLights) == 0x000008, "Wrong alignment on AVS_Vehicle_C_InitLights");
static_assert(sizeof(AVS_Vehicle_C_InitLights) == 0x000030, "Wrong size on AVS_Vehicle_C_InitLights");
static_assert(offsetof(AVS_Vehicle_C_InitLights, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_InitLights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitLights, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AVS_Vehicle_C_InitLights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitLights, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_InitLights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitLights, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_InitLights::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitLights, CallFunc_Array_Get_Item) == 0x000020, "Member 'AVS_Vehicle_C_InitLights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitLights, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_InitLights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitLights, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'AVS_Vehicle_C_InitLights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitSpeedUnit
// 0x0070 (0x0070 - 0x0000)
struct AVS_Vehicle_C_InitSpeedUnit final
{
public:
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeedUnit                             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0030)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_InitSpeedUnit) == 0x000008, "Wrong alignment on AVS_Vehicle_C_InitSpeedUnit");
static_assert(sizeof(AVS_Vehicle_C_InitSpeedUnit) == 0x000070, "Wrong size on AVS_Vehicle_C_InitSpeedUnit");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, Temp_bool_True_if_break_was_hit_Variable) == 0x000000, "Member 'AVS_Vehicle_C_InitSpeedUnit::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, Temp_int_Array_Index_Variable) == 0x000004, "Member 'AVS_Vehicle_C_InitSpeedUnit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_Not_PreBool_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'AVS_Vehicle_C_InitSpeedUnit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000018, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_Array_Get_Item) == 0x00002C, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_BooleanAND_ReturnValue) == 0x000069, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitSpeedUnit, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00006A, "Member 'AVS_Vehicle_C_InitSpeedUnit::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitVehicleMesh
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_InitVehicleMesh final
{
public:
	bool                                          HasValidMesh;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MeshCount;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetPhysicsMaxAngularVelocityInDegrees_NewMaxAngVel_ImplicitCast; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_InitVehicleMesh) == 0x000004, "Wrong alignment on AVS_Vehicle_C_InitVehicleMesh");
static_assert(sizeof(AVS_Vehicle_C_InitVehicleMesh) == 0x000010, "Wrong size on AVS_Vehicle_C_InitVehicleMesh");
static_assert(offsetof(AVS_Vehicle_C_InitVehicleMesh, HasValidMesh) == 0x000000, "Member 'AVS_Vehicle_C_InitVehicleMesh::HasValidMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitVehicleMesh, MeshCount) == 0x000004, "Member 'AVS_Vehicle_C_InitVehicleMesh::MeshCount' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitVehicleMesh, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_InitVehicleMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitVehicleMesh, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'AVS_Vehicle_C_InitVehicleMesh::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitVehicleMesh, CallFunc_SetPhysicsMaxAngularVelocityInDegrees_NewMaxAngVel_ImplicitCast) == 0x00000C, "Member 'AVS_Vehicle_C_InitVehicleMesh::CallFunc_SetPhysicsMaxAngularVelocityInDegrees_NewMaxAngVel_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitWheelReprojectionExperiment
// 0x00C0 (0x00C0 - 0x0000)
struct AVS_Vehicle_C_InitWheelReprojectionExperiment final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0050(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_InitWheelReprojectionExperiment) == 0x000010, "Wrong alignment on AVS_Vehicle_C_InitWheelReprojectionExperiment");
static_assert(sizeof(AVS_Vehicle_C_InitWheelReprojectionExperiment) == 0x0000C0, "Wrong size on AVS_Vehicle_C_InitWheelReprojectionExperiment");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_GetAllWheels_Wheels) == 0x000010, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_Array_Get_Item) == 0x000020, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_GetWheelMesh_WheelMesh) == 0x000028, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000038, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, Temp_struct_Variable) == 0x000050, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_AddComponent_ReturnValue) == 0x0000B0, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheelReprojectionExperiment, CallFunc_SetStaticMesh_ReturnValue) == 0x0000B8, "Member 'AVS_Vehicle_C_InitWheelReprojectionExperiment::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.InitWheels
// 0x0038 (0x0038 - 0x0000)
struct AVS_Vehicle_C_InitWheels final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UVehicle_Wheel_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetupWheelContactModification_RegisterSuccess; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_InitWheels) == 0x000008, "Wrong alignment on AVS_Vehicle_C_InitWheels");
static_assert(sizeof(AVS_Vehicle_C_InitWheels) == 0x000038, "Wrong size on AVS_Vehicle_C_InitWheels");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'AVS_Vehicle_C_InitWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, Temp_int_Array_Index_Variable) == 0x000008, "Member 'AVS_Vehicle_C_InitWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, Temp_int_Variable) == 0x00000C, "Member 'AVS_Vehicle_C_InitWheels::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_Array_Get_Item) == 0x000020, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000028, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_SetupWheelContactModification_RegisterSuccess) == 0x000031, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_SetupWheelContactModification_RegisterSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_InitWheels, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'AVS_Vehicle_C_InitWheels::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.IsCinematic
// 0x0004 (0x0004 - 0x0000)
struct AVS_Vehicle_C_IsCinematic final
{
public:
	bool                                          Param_IsCinematic;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_IsCinematic) == 0x000001, "Wrong alignment on AVS_Vehicle_C_IsCinematic");
static_assert(sizeof(AVS_Vehicle_C_IsCinematic) == 0x000004, "Wrong size on AVS_Vehicle_C_IsCinematic");
static_assert(offsetof(AVS_Vehicle_C_IsCinematic, Param_IsCinematic) == 0x000000, "Member 'AVS_Vehicle_C_IsCinematic::Param_IsCinematic' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsCinematic, CallFunc_IsPlayerControlled_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_IsCinematic::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsCinematic, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'AVS_Vehicle_C_IsCinematic::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsCinematic, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_IsCinematic::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.isOwningClient
// 0x0007 (0x0007 - 0x0000)
struct AVS_Vehicle_C_IsOwningClient final
{
public:
	bool                                          OwningClient;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_IsOwningClient) == 0x000001, "Wrong alignment on AVS_Vehicle_C_IsOwningClient");
static_assert(sizeof(AVS_Vehicle_C_IsOwningClient) == 0x000007, "Wrong size on AVS_Vehicle_C_IsOwningClient");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, OwningClient) == 0x000000, "Member 'AVS_Vehicle_C_IsOwningClient::OwningClient' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_IsOwningClient::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, CallFunc_IsLocallyControlled_ReturnValue) == 0x000002, "Member 'AVS_Vehicle_C_IsOwningClient::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, CallFunc_IsPlayerControlled_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_IsOwningClient::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_IsOwningClient::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'AVS_Vehicle_C_IsOwningClient::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_IsOwningClient, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'AVS_Vehicle_C_IsOwningClient::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.MoveShifterPosition
// 0x000F (0x000F - 0x0000)
struct AVS_Vehicle_C_MoveShifterPosition final
{
public:
	bool                                          MoveUp;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShifterPositions                             NewPos;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShifterPositions                             StickPos;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_MoveShifterPosition) == 0x000001, "Wrong alignment on AVS_Vehicle_C_MoveShifterPosition");
static_assert(sizeof(AVS_Vehicle_C_MoveShifterPosition) == 0x00000F, "Wrong size on AVS_Vehicle_C_MoveShifterPosition");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, MoveUp) == 0x000000, "Member 'AVS_Vehicle_C_MoveShifterPosition::MoveUp' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, NewPos) == 0x000001, "Member 'AVS_Vehicle_C_MoveShifterPosition::NewPos' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, StickPos) == 0x000002, "Member 'AVS_Vehicle_C_MoveShifterPosition::StickPos' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_HasAuthority_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_IsPlayerControlled_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_IsLocallyControlled_ReturnValue) == 0x000006, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_Subtract_ByteByte_ReturnValue) == 0x00000A, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_GetValidValue_ReturnValue) == 0x00000B, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00000C, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_Add_ByteByte_ReturnValue) == 0x00000D, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_MoveShifterPosition, CallFunc_GetValidValue_ReturnValue_1) == 0x00000E, "Member 'AVS_Vehicle_C_MoveShifterPosition::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.PassiveStateChanged
// 0x0028 (0x0028 - 0x0000)
struct AVS_Vehicle_C_PassiveStateChanged final
{
public:
	bool                                          NewPassiveState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_PassiveStateChanged) == 0x000008, "Wrong alignment on AVS_Vehicle_C_PassiveStateChanged");
static_assert(sizeof(AVS_Vehicle_C_PassiveStateChanged) == 0x000028, "Wrong size on AVS_Vehicle_C_PassiveStateChanged");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, NewPassiveState) == 0x000000, "Member 'AVS_Vehicle_C_PassiveStateChanged::NewPassiveState' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, Temp_int_Array_Index_Variable) == 0x000004, "Member 'AVS_Vehicle_C_PassiveStateChanged::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'AVS_Vehicle_C_PassiveStateChanged::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'AVS_Vehicle_C_PassiveStateChanged::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_PassiveStateChanged::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, CallFunc_Array_Get_Item) == 0x000018, "Member 'AVS_Vehicle_C_PassiveStateChanged::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_PassiveStateChanged::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PassiveStateChanged, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_PassiveStateChanged::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.PassiveTickBP
// 0x0004 (0x0004 - 0x0000)
struct AVS_Vehicle_C_PassiveTickBP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_PassiveTickBP) == 0x000004, "Wrong alignment on AVS_Vehicle_C_PassiveTickBP");
static_assert(sizeof(AVS_Vehicle_C_PassiveTickBP) == 0x000004, "Wrong size on AVS_Vehicle_C_PassiveTickBP");
static_assert(offsetof(AVS_Vehicle_C_PassiveTickBP, DeltaTime) == 0x000000, "Member 'AVS_Vehicle_C_PassiveTickBP::DeltaTime' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.PostConstructInit
// 0x0002 (0x0002 - 0x0000)
struct AVS_Vehicle_C_PostConstructInit final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_InitVehicleMesh_HasValidMesh;             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_PostConstructInit) == 0x000001, "Wrong alignment on AVS_Vehicle_C_PostConstructInit");
static_assert(sizeof(AVS_Vehicle_C_PostConstructInit) == 0x000002, "Wrong size on AVS_Vehicle_C_PostConstructInit");
static_assert(offsetof(AVS_Vehicle_C_PostConstructInit, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_PostConstructInit::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_PostConstructInit, CallFunc_InitVehicleMesh_HasValidMesh) == 0x000001, "Member 'AVS_Vehicle_C_PostConstructInit::CallFunc_InitVehicleMesh_HasValidMesh' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ReceivePossessed) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ReceivePossessed");
static_assert(sizeof(AVS_Vehicle_C_ReceivePossessed) == 0x000008, "Wrong size on AVS_Vehicle_C_ReceivePossessed");
static_assert(offsetof(AVS_Vehicle_C_ReceivePossessed, NewController) == 0x000000, "Member 'AVS_Vehicle_C_ReceivePossessed::NewController' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ReceiveUnpossessed");
static_assert(sizeof(AVS_Vehicle_C_ReceiveUnpossessed) == 0x000008, "Wrong size on AVS_Vehicle_C_ReceiveUnpossessed");
static_assert(offsetof(AVS_Vehicle_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'AVS_Vehicle_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RefreshContactModification
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_RefreshContactModification final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RefreshContactModification) == 0x000001, "Wrong alignment on AVS_Vehicle_C_RefreshContactModification");
static_assert(sizeof(AVS_Vehicle_C_RefreshContactModification) == 0x000001, "Wrong size on AVS_Vehicle_C_RefreshContactModification");
static_assert(offsetof(AVS_Vehicle_C_RefreshContactModification, Instant) == 0x000000, "Member 'AVS_Vehicle_C_RefreshContactModification::Instant' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RemoveWheel
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_RemoveWheel final
{
public:
	class UVehicle_Wheel_C*                       Wheel;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RemoveWheel) == 0x000008, "Wrong alignment on AVS_Vehicle_C_RemoveWheel");
static_assert(sizeof(AVS_Vehicle_C_RemoveWheel) == 0x000010, "Wrong size on AVS_Vehicle_C_RemoveWheel");
static_assert(offsetof(AVS_Vehicle_C_RemoveWheel, Wheel) == 0x000000, "Member 'AVS_Vehicle_C_RemoveWheel::Wheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_RemoveWheel, CallFunc_GetWheelMesh_WheelMesh) == 0x000008, "Member 'AVS_Vehicle_C_RemoveWheel::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ReprojectWheels
// 0x0570 (0x0570 - 0x0000)
struct AVS_Vehicle_C_ReprojectWheels final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0050(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x00C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetProjectedMesh_ProjectedMesh;           // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0130(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh_1;                 // 0x01F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0248(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsAttached_ReturnValue;                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh_2;                 // 0x0268(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x0288(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0290(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    CallFunc_GetProjectedMesh_ProjectedMesh_1;         // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_1;       // 0x0310(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0340(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0358(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromYX_ReturnValue;                // 0x0370(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0388(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0470(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ReprojectWheels) == 0x000010, "Wrong alignment on AVS_Vehicle_C_ReprojectWheels");
static_assert(sizeof(AVS_Vehicle_C_ReprojectWheels) == 0x000570, "Wrong size on AVS_Vehicle_C_ReprojectWheels");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_ReprojectWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector2D_X) == 0x000008, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector2D_Y) == 0x000010, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector2D_X_1) == 0x000018, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector2D_Y_1) == 0x000020, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, Temp_bool_Variable) == 0x000028, "Member 'AVS_Vehicle_C_ReprojectWheels::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'AVS_Vehicle_C_ReprojectWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetAllWheels_Wheels) == 0x000030, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Array_Get_Item) == 0x000040, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Less_IntInt_ReturnValue) == 0x0000B0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetWheelMesh_WheelMesh) == 0x0000B8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0000C0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetProjectedMesh_ProjectedMesh) == 0x000120, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetProjectedMesh_ProjectedMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000130, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000190, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakTransform_Location) == 0x0001A8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakTransform_Rotation) == 0x0001C0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakTransform_Scale) == 0x0001D8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetWheelMesh_WheelMesh_1) == 0x0001F0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetWheelMesh_WheelMesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_X) == 0x0001F8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_Y) == 0x000200, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_Z) == 0x000208, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000210, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_MapRangeClamped_ReturnValue) == 0x000228, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_VLerp_ReturnValue) == 0x000230, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_MakeRotator_ReturnValue) == 0x000248, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetIsAttached_ReturnValue) == 0x000260, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetIsAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetWheelMesh_WheelMesh_2) == 0x000268, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetWheelMesh_WheelMesh_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000270, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetWheelController_ControllerMesh) == 0x000288, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000290, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetRightVector_ReturnValue) == 0x0002A8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_X_1) == 0x0002C0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_Y_1) == 0x0002C8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_Z_1) == 0x0002D0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0002D8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_GetProjectedMesh_ProjectedMesh_1) == 0x0002F0, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_GetProjectedMesh_ProjectedMesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_ComposeRotators_ReturnValue) == 0x0002F8, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Conv_RotatorToVector_ReturnValue_1) == 0x000310, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Conv_RotatorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_X_2) == 0x000328, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_Y_2) == 0x000330, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_BreakVector_Z_2) == 0x000338, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, K2Node_Select_Default) == 0x000340, "Member 'AVS_Vehicle_C_ReprojectWheels::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_MakeVector_ReturnValue) == 0x000358, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_MakeRotFromYX_ReturnValue) == 0x000370, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_MakeRotFromYX_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000388, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000470, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000558, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_VLerp_Alpha_ImplicitCast) == 0x00055C, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ReprojectWheels, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000560, "Member 'AVS_Vehicle_C_ReprojectWheels::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ResetAllWheels
// 0x0048 (0x0048 - 0x0000)
struct AVS_Vehicle_C_ResetAllWheels final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ResetAllWheels) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ResetAllWheels");
static_assert(sizeof(AVS_Vehicle_C_ResetAllWheels) == 0x000048, "Wrong size on AVS_Vehicle_C_ResetAllWheels");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_ResetAllWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AVS_Vehicle_C_ResetAllWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_GetAllWheels_Wheels) == 0x000010, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_GetWheelMesh_WheelMesh) == 0x000038, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ResetAllWheels, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_ResetAllWheels::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Brake
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_Brake final
{
public:
	double                                        Param_Brake;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_Brake) == 0x000008, "Wrong alignment on AVS_Vehicle_C_RPC_Server_Brake");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_Brake) == 0x000008, "Wrong size on AVS_Vehicle_C_RPC_Server_Brake");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_Brake, Param_Brake) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_Brake::Param_Brake' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_EngineRunning
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_EngineRunning final
{
public:
	bool                                          Param_EngineRunning;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_EngineRunning) == 0x000001, "Wrong alignment on AVS_Vehicle_C_RPC_Server_EngineRunning");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_EngineRunning) == 0x000001, "Wrong size on AVS_Vehicle_C_RPC_Server_EngineRunning");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_EngineRunning, Param_EngineRunning) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_EngineRunning::Param_EngineRunning' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Handbrake
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_Handbrake final
{
public:
	bool                                          Handbrake;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_Handbrake) == 0x000001, "Wrong alignment on AVS_Vehicle_C_RPC_Server_Handbrake");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_Handbrake) == 0x000001, "Wrong size on AVS_Vehicle_C_RPC_Server_Handbrake");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_Handbrake, Handbrake) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_Handbrake::Handbrake' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Shifter
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_Shifter final
{
public:
	EShifterPositions                             ShifterPosition;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_Shifter) == 0x000001, "Wrong alignment on AVS_Vehicle_C_RPC_Server_Shifter");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_Shifter) == 0x000001, "Wrong size on AVS_Vehicle_C_RPC_Server_Shifter");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_Shifter, ShifterPosition) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_Shifter::ShifterPosition' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Steering
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_Steering final
{
public:
	double                                        Axis;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_Steering) == 0x000008, "Wrong alignment on AVS_Vehicle_C_RPC_Server_Steering");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_Steering) == 0x000008, "Wrong size on AVS_Vehicle_C_RPC_Server_Steering");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_Steering, Axis) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_Steering::Axis' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Throttle
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_Throttle final
{
public:
	double                                        Param_Throttle;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_Throttle) == 0x000008, "Wrong alignment on AVS_Vehicle_C_RPC_Server_Throttle");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_Throttle) == 0x000008, "Wrong size on AVS_Vehicle_C_RPC_Server_Throttle");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_Throttle, Param_Throttle) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_Throttle::Param_Throttle' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_TrailerRotation
// 0x0018 (0x0018 - 0x0000)
struct AVS_Vehicle_C_RPC_Server_TrailerRotation final
{
public:
	struct FRotator                               ServerTrailerRotation;                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AVS_Vehicle_C_RPC_Server_TrailerRotation) == 0x000008, "Wrong alignment on AVS_Vehicle_C_RPC_Server_TrailerRotation");
static_assert(sizeof(AVS_Vehicle_C_RPC_Server_TrailerRotation) == 0x000018, "Wrong size on AVS_Vehicle_C_RPC_Server_TrailerRotation");
static_assert(offsetof(AVS_Vehicle_C_RPC_Server_TrailerRotation, ServerTrailerRotation) == 0x000000, "Member 'AVS_Vehicle_C_RPC_Server_TrailerRotation::ServerTrailerRotation' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetBrakeInput
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_SetBrakeInput final
{
public:
	double                                        Param_Brake;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetFloatPrecision_Result;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetBrakeInput) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetBrakeInput");
static_assert(sizeof(AVS_Vehicle_C_SetBrakeInput) == 0x000020, "Wrong size on AVS_Vehicle_C_SetBrakeInput");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, Param_Brake) == 0x000000, "Member 'AVS_Vehicle_C_SetBrakeInput::Param_Brake' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_SetFloatPrecision_Result) == 0x000010, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_SetFloatPrecision_Result' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_HasAuthority_ReturnValue_1) == 0x000019, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_IsPlayerControlled_ReturnValue) == 0x00001A, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x00001B, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_IsLocallyControlled_ReturnValue) == 0x00001E, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetBrakeInput, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'AVS_Vehicle_C_SetBrakeInput::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.setCenterOfMassOffset
// 0x0018 (0x0018 - 0x0000)
struct AVS_Vehicle_C_SetCenterOfMassOffset final
{
public:
	struct FVector                                RelativeCOM;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetCenterOfMassOffset) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetCenterOfMassOffset");
static_assert(sizeof(AVS_Vehicle_C_SetCenterOfMassOffset) == 0x000018, "Wrong size on AVS_Vehicle_C_SetCenterOfMassOffset");
static_assert(offsetof(AVS_Vehicle_C_SetCenterOfMassOffset, RelativeCOM) == 0x000000, "Member 'AVS_Vehicle_C_SetCenterOfMassOffset::RelativeCOM' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetEngineRunning
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_SetEngineRunning final
{
public:
	bool                                          Param_EngineRunning;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetEngineRunning) == 0x000001, "Wrong alignment on AVS_Vehicle_C_SetEngineRunning");
static_assert(sizeof(AVS_Vehicle_C_SetEngineRunning) == 0x000001, "Wrong size on AVS_Vehicle_C_SetEngineRunning");
static_assert(offsetof(AVS_Vehicle_C_SetEngineRunning, Param_EngineRunning) == 0x000000, "Member 'AVS_Vehicle_C_SetEngineRunning::Param_EngineRunning' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetExactCenterOfMass
// 0x0018 (0x0018 - 0x0000)
struct AVS_Vehicle_C_SetExactCenterOfMass final
{
public:
	struct FVector                                NewCenterOfMass;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetExactCenterOfMass) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetExactCenterOfMass");
static_assert(sizeof(AVS_Vehicle_C_SetExactCenterOfMass) == 0x000018, "Wrong size on AVS_Vehicle_C_SetExactCenterOfMass");
static_assert(offsetof(AVS_Vehicle_C_SetExactCenterOfMass, NewCenterOfMass) == 0x000000, "Member 'AVS_Vehicle_C_SetExactCenterOfMass::NewCenterOfMass' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetGearArray
// 0x0048 (0x0048 - 0x0000)
struct AVS_Vehicle_C_SetGearArray final
{
public:
	TArray<struct FVehicleGear>                   Param_Gears;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleGear                           CallFunc_Array_Get_Item;                           // 0x0014(0x0020)(NoDestructor)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetGearArray) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetGearArray");
static_assert(sizeof(AVS_Vehicle_C_SetGearArray) == 0x000048, "Wrong size on AVS_Vehicle_C_SetGearArray");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, Param_Gears) == 0x000000, "Member 'AVS_Vehicle_C_SetGearArray::Param_Gears' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_SetGearArray::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, CallFunc_Array_Get_Item) == 0x000014, "Member 'AVS_Vehicle_C_SetGearArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, CallFunc_Array_LastIndex_ReturnValue) == 0x000034, "Member 'AVS_Vehicle_C_SetGearArray::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000038, "Member 'AVS_Vehicle_C_SetGearArray::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, CallFunc_Clamp_ReturnValue) == 0x00003C, "Member 'AVS_Vehicle_C_SetGearArray::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearArray, CallFunc_Clamp_ReturnValue_1) == 0x000040, "Member 'AVS_Vehicle_C_SetGearArray::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetGearItem
// 0x0058 (0x0058 - 0x0000)
struct AVS_Vehicle_C_SetGearItem final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVehicleGear                           NewGearSettings;                                   // 0x0004(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVehicleGear                           CallFunc_Array_Get_Item;                           // 0x0028(0x0020)(NoDestructor)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetGearItem) == 0x000004, "Wrong alignment on AVS_Vehicle_C_SetGearItem");
static_assert(sizeof(AVS_Vehicle_C_SetGearItem) == 0x000058, "Wrong size on AVS_Vehicle_C_SetGearItem");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, Param_Index) == 0x000000, "Member 'AVS_Vehicle_C_SetGearItem::Param_Index' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, NewGearSettings) == 0x000004, "Member 'AVS_Vehicle_C_SetGearItem::NewGearSettings' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_SetGearItem::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_SetGearItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, CallFunc_Array_LastIndex_ReturnValue) == 0x000048, "Member 'AVS_Vehicle_C_SetGearItem::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, CallFunc_Array_LastIndex_ReturnValue_1) == 0x00004C, "Member 'AVS_Vehicle_C_SetGearItem::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, CallFunc_Clamp_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_SetGearItem::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetGearItem, CallFunc_Clamp_ReturnValue_1) == 0x000054, "Member 'AVS_Vehicle_C_SetGearItem::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetHandbrakeInput
// 0x0002 (0x0002 - 0x0000)
struct AVS_Vehicle_C_SetHandbrakeInput final
{
public:
	bool                                          Handbrake;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetHandbrakeInput) == 0x000001, "Wrong alignment on AVS_Vehicle_C_SetHandbrakeInput");
static_assert(sizeof(AVS_Vehicle_C_SetHandbrakeInput) == 0x000002, "Wrong size on AVS_Vehicle_C_SetHandbrakeInput");
static_assert(offsetof(AVS_Vehicle_C_SetHandbrakeInput, Handbrake) == 0x000000, "Member 'AVS_Vehicle_C_SetHandbrakeInput::Handbrake' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetHandbrakeInput, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_SetHandbrakeInput::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetInputHost
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_SetInputHost final
{
public:
	class AAVS_Vehicle_C*                         Param_InputHost;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetInputHost) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetInputHost");
static_assert(sizeof(AVS_Vehicle_C_SetInputHost) == 0x000008, "Wrong size on AVS_Vehicle_C_SetInputHost");
static_assert(offsetof(AVS_Vehicle_C_SetInputHost, Param_InputHost) == 0x000000, "Member 'AVS_Vehicle_C_SetInputHost::Param_InputHost' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetLightsActive
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_SetLightsActive final
{
public:
	class FName                                   LightGroup;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetLightsActive) == 0x000004, "Wrong alignment on AVS_Vehicle_C_SetLightsActive");
static_assert(sizeof(AVS_Vehicle_C_SetLightsActive) == 0x000010, "Wrong size on AVS_Vehicle_C_SetLightsActive");
static_assert(offsetof(AVS_Vehicle_C_SetLightsActive, LightGroup) == 0x000000, "Member 'AVS_Vehicle_C_SetLightsActive::LightGroup' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetLightsActive, Active) == 0x000008, "Member 'AVS_Vehicle_C_SetLightsActive::Active' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetLightsActive, CallFunc_Array_RemoveItem_ReturnValue) == 0x000009, "Member 'AVS_Vehicle_C_SetLightsActive::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetLightsActive, CallFunc_Array_AddUnique_ReturnValue) == 0x00000C, "Member 'AVS_Vehicle_C_SetLightsActive::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetLocalEngineRunning
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_SetLocalEngineRunning final
{
public:
	bool                                          Param_EngineRunning;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetLocalEngineRunning) == 0x000001, "Wrong alignment on AVS_Vehicle_C_SetLocalEngineRunning");
static_assert(sizeof(AVS_Vehicle_C_SetLocalEngineRunning) == 0x000001, "Wrong size on AVS_Vehicle_C_SetLocalEngineRunning");
static_assert(offsetof(AVS_Vehicle_C_SetLocalEngineRunning, Param_EngineRunning) == 0x000000, "Member 'AVS_Vehicle_C_SetLocalEngineRunning::Param_EngineRunning' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetManualGear
// 0x000C (0x000C - 0x0000)
struct AVS_Vehicle_C_SetManualGear final
{
public:
	int32                                         GearNum;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetManualGear) == 0x000004, "Wrong alignment on AVS_Vehicle_C_SetManualGear");
static_assert(sizeof(AVS_Vehicle_C_SetManualGear) == 0x00000C, "Wrong size on AVS_Vehicle_C_SetManualGear");
static_assert(offsetof(AVS_Vehicle_C_SetManualGear, GearNum) == 0x000000, "Member 'AVS_Vehicle_C_SetManualGear::GearNum' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetManualGear, CallFunc_Array_LastIndex_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_SetManualGear::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetManualGear, CallFunc_Clamp_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_SetManualGear::CallFunc_Clamp_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetMeshMaterial
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_SetMeshMaterial final
{
public:
	class UStaticMeshComponent*                   Mesh;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumMaterials_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetMeshMaterial) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetMeshMaterial");
static_assert(sizeof(AVS_Vehicle_C_SetMeshMaterial) == 0x000020, "Wrong size on AVS_Vehicle_C_SetMeshMaterial");
static_assert(offsetof(AVS_Vehicle_C_SetMeshMaterial, Mesh) == 0x000000, "Member 'AVS_Vehicle_C_SetMeshMaterial::Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetMeshMaterial, Material) == 0x000008, "Member 'AVS_Vehicle_C_SetMeshMaterial::Material' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetMeshMaterial, CallFunc_GetNumMaterials_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_SetMeshMaterial::CallFunc_GetNumMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetMeshMaterial, Temp_int_Variable) == 0x000014, "Member 'AVS_Vehicle_C_SetMeshMaterial::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetMeshMaterial, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_SetMeshMaterial::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetMeshMaterial, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_SetMeshMaterial::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetPhysics
// 0x0040 (0x0040 - 0x0000)
struct AVS_Vehicle_C_SetPhysics final
{
public:
	bool                                          Simulate_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetupWheelContactModification_RegisterSuccess; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetPhysics) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetPhysics");
static_assert(sizeof(AVS_Vehicle_C_SetPhysics) == 0x000040, "Wrong size on AVS_Vehicle_C_SetPhysics");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, Simulate_) == 0x000000, "Member 'AVS_Vehicle_C_SetPhysics::Simulate_' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, Temp_int_Array_Index_Variable) == 0x000004, "Member 'AVS_Vehicle_C_SetPhysics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'AVS_Vehicle_C_SetPhysics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_SetupWheelContactModification_RegisterSuccess) == 0x000010, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_SetupWheelContactModification_RegisterSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_GetVehicleMesh_Mesh) == 0x000018, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_GetVehicleMesh_Mesh_1) == 0x000020, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetPhysics, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_SetPhysics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetShifterPosition
// 0x0002 (0x0002 - 0x0000)
struct AVS_Vehicle_C_SetShifterPosition final
{
public:
	EShifterPositions                             Shifter_Position;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetShifterPosition) == 0x000001, "Wrong alignment on AVS_Vehicle_C_SetShifterPosition");
static_assert(sizeof(AVS_Vehicle_C_SetShifterPosition) == 0x000002, "Wrong size on AVS_Vehicle_C_SetShifterPosition");
static_assert(offsetof(AVS_Vehicle_C_SetShifterPosition, Shifter_Position) == 0x000000, "Member 'AVS_Vehicle_C_SetShifterPosition::Shifter_Position' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetShifterPosition, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_SetShifterPosition::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetSteeringInput
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_SetSteeringInput final
{
public:
	double                                        Param_Steering;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetFloatPrecision_Result;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetSteeringInput) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetSteeringInput");
static_assert(sizeof(AVS_Vehicle_C_SetSteeringInput) == 0x000020, "Wrong size on AVS_Vehicle_C_SetSteeringInput");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, Param_Steering) == 0x000000, "Member 'AVS_Vehicle_C_SetSteeringInput::Param_Steering' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_SetFloatPrecision_Result) == 0x000010, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_SetFloatPrecision_Result' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_HasAuthority_ReturnValue_1) == 0x000019, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_IsPlayerControlled_ReturnValue) == 0x00001A, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x00001B, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_IsLocallyControlled_ReturnValue) == 0x00001E, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetSteeringInput, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'AVS_Vehicle_C_SetSteeringInput::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetThrottleAndBrakeInput
// 0x0048 (0x0048 - 0x0000)
struct AVS_Vehicle_C_SetThrottleAndBrakeInput final
{
public:
	double                                        Param_Throttle;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EShifterPositions                             CallFunc_GetShifterPosition_ShifterPos;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetThrottleAndBrakeInput) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetThrottleAndBrakeInput");
static_assert(sizeof(AVS_Vehicle_C_SetThrottleAndBrakeInput) == 0x000048, "Wrong size on AVS_Vehicle_C_SetThrottleAndBrakeInput");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, Param_Throttle) == 0x000000, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::Param_Throttle' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, Temp_bool_Variable) == 0x000008, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_FClamp_ReturnValue_1) == 0x000018, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, Temp_bool_Variable_1) == 0x000020, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_GetShifterPosition_ShifterPos) == 0x000021, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_GetShifterPosition_ShifterPos' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000022, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, K2Node_Select_Default) == 0x000028, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, K2Node_Select_Default_1) == 0x000030, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_Abs_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleAndBrakeInput, CallFunc_Abs_ReturnValue_1) == 0x000040, "Member 'AVS_Vehicle_C_SetThrottleAndBrakeInput::CallFunc_Abs_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetThrottleInput
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_SetThrottleInput final
{
public:
	double                                        Param_Throttle;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetFloatPrecision_Result;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetThrottleInput) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetThrottleInput");
static_assert(sizeof(AVS_Vehicle_C_SetThrottleInput) == 0x000020, "Wrong size on AVS_Vehicle_C_SetThrottleInput");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, Param_Throttle) == 0x000000, "Member 'AVS_Vehicle_C_SetThrottleInput::Param_Throttle' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_SetFloatPrecision_Result) == 0x000010, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_SetFloatPrecision_Result' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_HasAuthority_ReturnValue_1) == 0x000019, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_IsPlayerControlled_ReturnValue) == 0x00001A, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x00001B, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_IsLocallyControlled_ReturnValue) == 0x00001E, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetThrottleInput, CallFunc_BooleanOR_ReturnValue) == 0x00001F, "Member 'AVS_Vehicle_C_SetThrottleInput::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetTrailerSyncMode
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_SetTrailerSyncMode final
{
public:
	class UVehicle_Hitch_C*                       TowHitch;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Hitch_C*                       TrailerHitch;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetTrailerSyncMode) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetTrailerSyncMode");
static_assert(sizeof(AVS_Vehicle_C_SetTrailerSyncMode) == 0x000010, "Wrong size on AVS_Vehicle_C_SetTrailerSyncMode");
static_assert(offsetof(AVS_Vehicle_C_SetTrailerSyncMode, TowHitch) == 0x000000, "Member 'AVS_Vehicle_C_SetTrailerSyncMode::TowHitch' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetTrailerSyncMode, TrailerHitch) == 0x000008, "Member 'AVS_Vehicle_C_SetTrailerSyncMode::TrailerHitch' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetupSkeletalMeshes
// 0x0040 (0x0040 - 0x0000)
struct AVS_Vehicle_C_SetupSkeletalMeshes final
{
public:
	TArray<class USkeletalMeshComponent*>         MeshCache;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class USkeletalMeshComponent*                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetupSkeletalMeshes) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetupSkeletalMeshes");
static_assert(sizeof(AVS_Vehicle_C_SetupSkeletalMeshes) == 0x000040, "Wrong size on AVS_Vehicle_C_SetupSkeletalMeshes");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, MeshCache) == 0x000000, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::MeshCache' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, Temp_int_Array_Index_Variable) == 0x000010, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_ComponentHasTag_ReturnValue) == 0x00003D, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupSkeletalMeshes, CallFunc_Not_PreBool_ReturnValue) == 0x00003E, "Member 'AVS_Vehicle_C_SetupSkeletalMeshes::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SetupWheelContactModification
// 0x0070 (0x0070 - 0x0000)
struct AVS_Vehicle_C_SetupWheelContactModification final
{
public:
	bool                                          RegisterSuccess;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            MeshesArray;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetArrayDisabledCollisions_ReturnValue;   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsAttached_ReturnValue;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsCollisionEnabled_ReturnValue;        // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SetupWheelContactModification) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SetupWheelContactModification");
static_assert(sizeof(AVS_Vehicle_C_SetupWheelContactModification) == 0x000070, "Wrong size on AVS_Vehicle_C_SetupWheelContactModification");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, RegisterSuccess) == 0x000000, "Member 'AVS_Vehicle_C_SetupWheelContactModification::RegisterSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, MeshesArray) == 0x000008, "Member 'AVS_Vehicle_C_SetupWheelContactModification::MeshesArray' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, Temp_int_Array_Index_Variable) == 0x000018, "Member 'AVS_Vehicle_C_SetupWheelContactModification::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'AVS_Vehicle_C_SetupWheelContactModification::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_SetArrayDisabledCollisions_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_SetArrayDisabledCollisions_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_GetVehicleMesh_Mesh) == 0x000028, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_GetAllWheels_Wheels) == 0x000038, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_Array_Get_Item) == 0x000050, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_GetIsAttached_ReturnValue) == 0x000059, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_GetIsAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_GetWheelMode_ReturnValue) == 0x00005A, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, K2Node_SwitchEnum_CmpSuccess) == 0x00005B, "Member 'AVS_Vehicle_C_SetupWheelContactModification::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_GetWheelMesh_WheelMesh) == 0x000060, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_Array_Add_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SetupWheelContactModification, CallFunc_K2_IsCollisionEnabled_ReturnValue) == 0x00006C, "Member 'AVS_Vehicle_C_SetupWheelContactModification::CallFunc_K2_IsCollisionEnabled_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ShowDebugMenu
// 0x0020 (0x0020 - 0x0000)
struct AVS_Vehicle_C_ShowDebugMenu final
{
public:
	bool                                          Display;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerControlled_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleSetup_HUD_C*                    CallFunc_Create_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ShowDebugMenu) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ShowDebugMenu");
static_assert(sizeof(AVS_Vehicle_C_ShowDebugMenu) == 0x000020, "Wrong size on AVS_Vehicle_C_ShowDebugMenu");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, Display) == 0x000000, "Member 'AVS_Vehicle_C_ShowDebugMenu::Display' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_ShowDebugMenu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, CallFunc_IsPlayerControlled_ReturnValue) == 0x000002, "Member 'AVS_Vehicle_C_ShowDebugMenu::CallFunc_IsPlayerControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, CallFunc_IsLocallyControlled_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_ShowDebugMenu::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_ShowDebugMenu::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, CallFunc_BooleanAND_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_ShowDebugMenu::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ShowDebugMenu, CallFunc_Create_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_ShowDebugMenu::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.StartupEngine
// 0x0028 (0x0028 - 0x0000)
struct AVS_Vehicle_C_StartupEngine final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_SetTimer_Time_ImplicitCast;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_StartupEngine) == 0x000008, "Wrong alignment on AVS_Vehicle_C_StartupEngine");
static_assert(sizeof(AVS_Vehicle_C_StartupEngine) == 0x000028, "Wrong size on AVS_Vehicle_C_StartupEngine");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000014, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_K2_TimerExistsHandle_ReturnValue) == 0x000015, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_K2_TimerExistsHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_K2_SetTimer_Time_ImplicitCast) == 0x000018, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_K2_SetTimer_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_StartupEngine, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'AVS_Vehicle_C_StartupEngine::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SuspensionPreview
// 0x0060 (0x0060 - 0x0000)
struct AVS_Vehicle_C_SuspensionPreview final
{
public:
	TArray<class UVehicle_Wheel_C*>               L_WheelComps;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SuspensionPreview) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SuspensionPreview");
static_assert(sizeof(AVS_Vehicle_C_SuspensionPreview) == 0x000060, "Wrong size on AVS_Vehicle_C_SuspensionPreview");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, L_WheelComps) == 0x000000, "Member 'AVS_Vehicle_C_SuspensionPreview::L_WheelComps' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, Temp_int_Array_Index_Variable) == 0x000010, "Member 'AVS_Vehicle_C_SuspensionPreview::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'AVS_Vehicle_C_SuspensionPreview::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'AVS_Vehicle_C_SuspensionPreview::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, Temp_int_Loop_Counter_Variable_1) == 0x000028, "Member 'AVS_Vehicle_C_SuspensionPreview::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_IsValid_ReturnValue) == 0x00005C, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SuspensionPreview, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005D, "Member 'AVS_Vehicle_C_SuspensionPreview::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.SyncTrailer
// 0x0090 (0x0090 - 0x0000)
struct AVS_Vehicle_C_SyncTrailer final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_Vehicle_C*                         CallFunc_GetOwningVehicle_Vehicle;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetHostTrailerRotation_HostTrailerRotation; // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_isOwningClient_OwningClient;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue_1;                  // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast_1;       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_SyncTrailer) == 0x000008, "Wrong alignment on AVS_Vehicle_C_SyncTrailer");
static_assert(sizeof(AVS_Vehicle_C_SyncTrailer) == 0x000090, "Wrong size on AVS_Vehicle_C_SyncTrailer");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_GetOwningVehicle_Vehicle) == 0x000008, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_GetOwningVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_GetHostTrailerRotation_HostTrailerRotation) == 0x000010, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_GetHostTrailerRotation_HostTrailerRotation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_isOwningClient_OwningClient) == 0x000028, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_isOwningClient_OwningClient' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_RInterpTo_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000049, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_RInterpTo_ReturnValue_1) == 0x000068, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_RInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_BooleanAND_ReturnValue) == 0x000080, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000081, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x000084, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_SyncTrailer, CallFunc_RInterpTo_DeltaTime_ImplicitCast_1) == 0x000088, "Member 'AVS_Vehicle_C_SyncTrailer::CallFunc_RInterpTo_DeltaTime_ImplicitCast_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.TeleportVehicle
// 0x0840 (0x0840 - 0x0000)
struct AVS_Vehicle_C_TeleportVehicle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          KeepRelativeVelocity;                              // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocalChassisAngVelocity;                           // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalChassisLinVelocity;                           // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        LocalWheelAngVelocities;                           // 0x0068(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        LocalWheelLinVelocities;                           // 0x0078(0x0010)(Edit, BlueprintVisible)
	TArray<struct FTransform>                     LocalWheelTransforms;                              // 0x0088(0x0010)(Edit, BlueprintVisible)
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewLocation;                                       // 0x00A0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0180(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue; // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue;       // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_1;     // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0250(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x02A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue_1; // 0x02C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue_1;   // 0x02E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0300(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_1; // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x037C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37D[0x3];                                      // 0x037D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_2;                    // 0x0390(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_398[0x8];                                      // 0x0398(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x03A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0400(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0460(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0478(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0490(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x04A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_2;     // 0x04C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LessLess_VectorRotator_ReturnValue_3;     // 0x04D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item_1;                         // 0x04F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x04F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x04FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x04FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x04FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FF[0x1];                                      // 0x04FF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh_1;                 // 0x0500(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_2;                         // 0x0510(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_3;                         // 0x0570(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0588(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x05A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x05B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_2; // 0x05D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_TransformRotation_ReturnValue;            // 0x05E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0600(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_4;                         // 0x0618(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0630(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue_3; // 0x0718(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item_5;                         // 0x0730(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue_1;               // 0x0738(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x7];                                      // 0x0739(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh_2;                 // 0x0740(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0748(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_749[0x7];                                      // 0x0749(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_3;                    // 0x0750(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1; // 0x0758(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(AVS_Vehicle_C_TeleportVehicle) == 0x000010, "Wrong alignment on AVS_Vehicle_C_TeleportVehicle");
static_assert(sizeof(AVS_Vehicle_C_TeleportVehicle) == 0x000840, "Wrong size on AVS_Vehicle_C_TeleportVehicle");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Location) == 0x000000, "Member 'AVS_Vehicle_C_TeleportVehicle::Location' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Rotation) == 0x000018, "Member 'AVS_Vehicle_C_TeleportVehicle::Rotation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, KeepRelativeVelocity) == 0x000030, "Member 'AVS_Vehicle_C_TeleportVehicle::KeepRelativeVelocity' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, LocalChassisAngVelocity) == 0x000038, "Member 'AVS_Vehicle_C_TeleportVehicle::LocalChassisAngVelocity' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, LocalChassisLinVelocity) == 0x000050, "Member 'AVS_Vehicle_C_TeleportVehicle::LocalChassisLinVelocity' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, LocalWheelAngVelocities) == 0x000068, "Member 'AVS_Vehicle_C_TeleportVehicle::LocalWheelAngVelocities' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, LocalWheelLinVelocities) == 0x000078, "Member 'AVS_Vehicle_C_TeleportVehicle::LocalWheelLinVelocities' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, LocalWheelTransforms) == 0x000088, "Member 'AVS_Vehicle_C_TeleportVehicle::LocalWheelTransforms' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, NewLocation) == 0x0000A0, "Member 'AVS_Vehicle_C_TeleportVehicle::NewLocation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'AVS_Vehicle_C_TeleportVehicle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Temp_int_Loop_Counter_Variable_1) == 0x000170, "Member 'AVS_Vehicle_C_TeleportVehicle::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000174, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Temp_int_Array_Index_Variable) == 0x000178, "Member 'AVS_Vehicle_C_TeleportVehicle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetVehicleMesh_Mesh) == 0x000180, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue) == 0x000188, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x0001A0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0001B8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_LessLess_VectorRotator_ReturnValue) == 0x0001D0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_LessLess_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_LessLess_VectorRotator_ReturnValue_1) == 0x0001E8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_LessLess_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Length_ReturnValue) == 0x000200, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Temp_int_Array_Index_Variable_1) == 0x000204, "Member 'AVS_Vehicle_C_TeleportVehicle::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Location) == 0x000208, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Rotation) == 0x000220, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Scale) == 0x000238, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetVehicleMesh_Mesh_1) == 0x000250, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Location_1) == 0x000258, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Rotation_1) == 0x000270, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Scale_1) == 0x000288, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Get_Item) == 0x0002A0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0002A8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetWheelMesh_WheelMesh) == 0x0002C0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue_1) == 0x0002C8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetPhysicsAngularVelocityInDegrees_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetPhysicsLinearVelocity_ReturnValue_1) == 0x0002E0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetPhysicsLinearVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000300, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GreaterGreater_VectorRotator_ReturnValue_1) == 0x000360, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GreaterGreater_VectorRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Length_ReturnValue_1) == 0x000378, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Less_IntInt_ReturnValue) == 0x00037C, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Temp_int_Loop_Counter_Variable_2) == 0x000380, "Member 'AVS_Vehicle_C_TeleportVehicle::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000384, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Add_IntInt_ReturnValue_2) == 0x000388, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetVehicleMesh_Mesh_2) == 0x000390, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetVehicleMesh_Mesh_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x0003A0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000400, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Location_2) == 0x000460, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Rotation_2) == 0x000478, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Scale_2) == 0x000490, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x0004A8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_LessLess_VectorRotator_ReturnValue_2) == 0x0004C0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_LessLess_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_LessLess_VectorRotator_ReturnValue_3) == 0x0004D8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_LessLess_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Get_Item_1) == 0x0004F0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Length_ReturnValue_2) == 0x0004F8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetWheelMode_ReturnValue) == 0x0004FC, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Less_IntInt_ReturnValue_2) == 0x0004FD, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0004FE, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetWheelMesh_WheelMesh_1) == 0x000500, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetWheelMesh_WheelMesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, Temp_int_Array_Index_Variable_2) == 0x000508, "Member 'AVS_Vehicle_C_TeleportVehicle::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Get_Item_2) == 0x000510, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Get_Item_3) == 0x000570, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Location_3) == 0x000588, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Rotation_3) == 0x0005A0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_BreakTransform_Scale_3) == 0x0005B8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GreaterGreater_VectorRotator_ReturnValue_2) == 0x0005D0, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GreaterGreater_VectorRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_TransformRotation_ReturnValue) == 0x0005E8, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_TransformRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_TransformLocation_ReturnValue) == 0x000600, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Get_Item_4) == 0x000618, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000630, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GreaterGreater_VectorRotator_ReturnValue_3) == 0x000718, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GreaterGreater_VectorRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_Array_Get_Item_5) == 0x000730, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetWheelMode_ReturnValue_1) == 0x000738, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetWheelMode_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetWheelMesh_WheelMesh_2) == 0x000740, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetWheelMesh_WheelMesh_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000748, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_GetVehicleMesh_Mesh_3) == 0x000750, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_GetVehicleMesh_Mesh_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TeleportVehicle, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1) == 0x000758, "Member 'AVS_Vehicle_C_TeleportVehicle::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.TickCosmetics
// 0x0030 (0x0030 - 0x0000)
struct AVS_Vehicle_C_TickCosmetics final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetAirSpeed_AirSpeed;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicle_ExhaustController_C*           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_TickCosmetics) == 0x000008, "Wrong alignment on AVS_Vehicle_C_TickCosmetics");
static_assert(sizeof(AVS_Vehicle_C_TickCosmetics) == 0x000030, "Wrong size on AVS_Vehicle_C_TickCosmetics");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AVS_Vehicle_C_TickCosmetics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AVS_Vehicle_C_TickCosmetics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_GetAirSpeed_AirSpeed) == 0x000010, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_GetAirSpeed_AirSpeed' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_Array_Get_Item) == 0x000020, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickCosmetics, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'AVS_Vehicle_C_TickCosmetics::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.TickWheels
// 0x0038 (0x0038 - 0x0000)
struct AVS_Vehicle_C_TickWheels final
{
public:
	class UVehicle_Wheel_C*                       CurrentWheel;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0018(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_TickWheels) == 0x000008, "Wrong alignment on AVS_Vehicle_C_TickWheels");
static_assert(sizeof(AVS_Vehicle_C_TickWheels) == 0x000038, "Wrong size on AVS_Vehicle_C_TickWheels");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, CurrentWheel) == 0x000000, "Member 'AVS_Vehicle_C_TickWheels::CurrentWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, Temp_int_Array_Index_Variable) == 0x000008, "Member 'AVS_Vehicle_C_TickWheels::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'AVS_Vehicle_C_TickWheels::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_TickWheels::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, CallFunc_GetAllWheels_Wheels) == 0x000018, "Member 'AVS_Vehicle_C_TickWheels::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_TickWheels::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_TickWheels::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_TickWheels, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'AVS_Vehicle_C_TickWheels::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ToggleLightsActive
// 0x000C (0x000C - 0x0000)
struct AVS_Vehicle_C_ToggleLightsActive final
{
public:
	class FName                                   LightGroup;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLightsActive_Active;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ToggleLightsActive) == 0x000004, "Wrong alignment on AVS_Vehicle_C_ToggleLightsActive");
static_assert(sizeof(AVS_Vehicle_C_ToggleLightsActive) == 0x00000C, "Wrong size on AVS_Vehicle_C_ToggleLightsActive");
static_assert(offsetof(AVS_Vehicle_C_ToggleLightsActive, LightGroup) == 0x000000, "Member 'AVS_Vehicle_C_ToggleLightsActive::LightGroup' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ToggleLightsActive, Active) == 0x000008, "Member 'AVS_Vehicle_C_ToggleLightsActive::Active' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ToggleLightsActive, CallFunc_GetLightsActive_Active) == 0x000009, "Member 'AVS_Vehicle_C_ToggleLightsActive::CallFunc_GetLightsActive_Active' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ToggleLightsActive, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'AVS_Vehicle_C_ToggleLightsActive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UnhitchAll
// 0x0040 (0x0040 - 0x0000)
struct AVS_Vehicle_C_UnhitchAll final
{
public:
	TArray<class UVehicle_Hitch_C*>               CompCache;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Hitch_C*>               CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Hitch_C*                       CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UnhitchAll) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UnhitchAll");
static_assert(sizeof(AVS_Vehicle_C_UnhitchAll) == 0x000040, "Wrong size on AVS_Vehicle_C_UnhitchAll");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, CompCache) == 0x000000, "Member 'AVS_Vehicle_C_UnhitchAll::CompCache' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, Temp_int_Array_Index_Variable) == 0x000010, "Member 'AVS_Vehicle_C_UnhitchAll::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'AVS_Vehicle_C_UnhitchAll::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'AVS_Vehicle_C_UnhitchAll::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000020, "Member 'AVS_Vehicle_C_UnhitchAll::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, CallFunc_Array_Get_Item) == 0x000030, "Member 'AVS_Vehicle_C_UnhitchAll::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_UnhitchAll::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UnhitchAll, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'AVS_Vehicle_C_UnhitchAll::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateBrakes
// 0x0048 (0x0048 - 0x0000)
struct AVS_Vehicle_C_UpdateBrakes final
{
public:
	class UVehicle_Wheel_C*                       CurWheel;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          NewBrakeLock;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WheelLocksChanged;                                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsBrakeLocked_isBrakeLocked;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetBrakePressure_BrakePressure;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsHandbrakeWheel_isHandbrakeWheel;     // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsAttached_ReturnValue;                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateBrakes) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateBrakes");
static_assert(sizeof(AVS_Vehicle_C_UpdateBrakes) == 0x000048, "Wrong size on AVS_Vehicle_C_UpdateBrakes");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CurWheel) == 0x000000, "Member 'AVS_Vehicle_C_UpdateBrakes::CurWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, NewBrakeLock) == 0x000008, "Member 'AVS_Vehicle_C_UpdateBrakes::NewBrakeLock' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, WheelLocksChanged) == 0x000009, "Member 'AVS_Vehicle_C_UpdateBrakes::WheelLocksChanged' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'AVS_Vehicle_C_UpdateBrakes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GetIsBrakeLocked_isBrakeLocked) == 0x000010, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GetIsBrakeLocked_isBrakeLocked' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GetBrakePressure_BrakePressure) == 0x000018, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GetBrakePressure_BrakePressure' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000020, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000021, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GetIsHandbrakeWheel_isHandbrakeWheel) == 0x000022, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GetIsHandbrakeWheel_isHandbrakeWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_BooleanOR_ReturnValue) == 0x000023, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000024, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_BooleanOR_ReturnValue_1) == 0x000025, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000034, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000035, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_BooleanAND_ReturnValue) == 0x000036, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'AVS_Vehicle_C_UpdateBrakes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_BooleanAND_ReturnValue_1) == 0x00003C, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateBrakes, CallFunc_GetIsAttached_ReturnValue) == 0x000044, "Member 'AVS_Vehicle_C_UpdateBrakes::CallFunc_GetIsAttached_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateForces
// 0x00B0 (0x00B0 - 0x0000)
struct AVS_Vehicle_C_UpdateForces final
{
public:
	bool                                          WheelLocksChanged;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateForces) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateForces");
static_assert(sizeof(AVS_Vehicle_C_UpdateForces) == 0x0000B0, "Wrong size on AVS_Vehicle_C_UpdateForces");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, WheelLocksChanged) == 0x000000, "Member 'AVS_Vehicle_C_UpdateForces::WheelLocksChanged' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_GetVehicleMesh_Mesh) == 0x000008, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_GetForwardVector_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_MakeRotFromX_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_NegateRotator_ReturnValue) == 0x000058, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000070, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_BreakVector_X) == 0x000088, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_BreakVector_Y) == 0x000090, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_BreakVector_Z) == 0x000098, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_Abs_ReturnValue) == 0x0000A0, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateForces, CallFunc_MapRangeClamped_ReturnValue) == 0x0000A8, "Member 'AVS_Vehicle_C_UpdateForces::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateInputs
// 0x0030 (0x0030 - 0x0000)
struct AVS_Vehicle_C_UpdateInputs final
{
public:
	bool                                          BrakesChanged;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpEaseInOut_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpEaseInOut_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateInputs) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateInputs");
static_assert(sizeof(AVS_Vehicle_C_UpdateInputs) == 0x000030, "Wrong size on AVS_Vehicle_C_UpdateInputs");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, BrakesChanged) == 0x000000, "Member 'AVS_Vehicle_C_UpdateInputs::BrakesChanged' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_Less_IntInt_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, Temp_bool_Variable) == 0x000002, "Member 'AVS_Vehicle_C_UpdateInputs::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_FInterpEaseInOut_ReturnValue) == 0x000008, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_FInterpEaseInOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000011, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, Temp_real_Variable) == 0x000018, "Member 'AVS_Vehicle_C_UpdateInputs::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, K2Node_Select_Default) == 0x000020, "Member 'AVS_Vehicle_C_UpdateInputs::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateInputs, CallFunc_FInterpEaseInOut_ReturnValue_1) == 0x000028, "Member 'AVS_Vehicle_C_UpdateInputs::CallFunc_FInterpEaseInOut_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateLightDecorations
// 0x0008 (0x0008 - 0x0000)
struct AVS_Vehicle_C_UpdateLightDecorations final
{
public:
	class UVehicle_LightController_C*             LightController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateLightDecorations) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateLightDecorations");
static_assert(sizeof(AVS_Vehicle_C_UpdateLightDecorations) == 0x000008, "Wrong size on AVS_Vehicle_C_UpdateLightDecorations");
static_assert(offsetof(AVS_Vehicle_C_UpdateLightDecorations, LightController) == 0x000000, "Member 'AVS_Vehicle_C_UpdateLightDecorations::LightController' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateLights
// 0x0050 (0x0050 - 0x0000)
struct AVS_Vehicle_C_UpdateLights final
{
public:
	double                                        ControllerIntensity;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVehicle_LightController_C*             CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLightConfig                           CallFunc_Array_Get_Item_1;                         // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetLightsActive_Active;                   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_ControllerIntensity_ImplicitCast; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateLights) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateLights");
static_assert(sizeof(AVS_Vehicle_C_UpdateLights) == 0x000050, "Wrong size on AVS_Vehicle_C_UpdateLights");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, ControllerIntensity) == 0x000000, "Member 'AVS_Vehicle_C_UpdateLights::ControllerIntensity' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'AVS_Vehicle_C_UpdateLights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, Temp_int_Array_Index_Variable) == 0x000010, "Member 'AVS_Vehicle_C_UpdateLights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'AVS_Vehicle_C_UpdateLights::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'AVS_Vehicle_C_UpdateLights::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Array_Get_Item) == 0x000028, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Array_Get_Item_1) == 0x000034, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_Less_IntInt_ReturnValue_1) == 0x000040, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, CallFunc_GetLightsActive_Active) == 0x000041, "Member 'AVS_Vehicle_C_UpdateLights::CallFunc_GetLightsActive_Active' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLights, K2Node_VariableSet_ControllerIntensity_ImplicitCast) == 0x000048, "Member 'AVS_Vehicle_C_UpdateLights::K2Node_VariableSet_ControllerIntensity_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateLinearDamping
// 0x0080 (0x0080 - 0x0000)
struct AVS_Vehicle_C_UpdateLinearDamping final
{
public:
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_1;                    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_2;                    // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh_3;                    // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDamping_InDamping_ImplicitCast;  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDamping_InDamping_ImplicitCast_1; // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDamping_InDamping_ImplicitCast_2; // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateLinearDamping) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateLinearDamping");
static_assert(sizeof(AVS_Vehicle_C_UpdateLinearDamping) == 0x000080, "Wrong size on AVS_Vehicle_C_UpdateLinearDamping");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_GetVehicleMesh_Mesh) == 0x000000, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_GetVehicleMesh_Mesh_1) == 0x000008, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_GetVehicleMesh_Mesh_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x000010, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000028, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_MapRangeClamped_ReturnValue) == 0x000038, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000041, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000042, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_BooleanAND_ReturnValue) == 0x000043, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_BooleanAND_ReturnValue_1) == 0x000044, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_GetVehicleMesh_Mesh_2) == 0x000048, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_GetVehicleMesh_Mesh_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_GetVehicleMesh_Mesh_3) == 0x000050, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_GetVehicleMesh_Mesh_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000058, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_SetLinearDamping_InDamping_ImplicitCast) == 0x000070, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_SetLinearDamping_InDamping_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_SetLinearDamping_InDamping_ImplicitCast_1) == 0x000074, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_SetLinearDamping_InDamping_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateLinearDamping, CallFunc_SetLinearDamping_InDamping_ImplicitCast_2) == 0x000078, "Member 'AVS_Vehicle_C_UpdateLinearDamping::CallFunc_SetLinearDamping_InDamping_ImplicitCast_2' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateWheelLocks
// 0x0068 (0x0068 - 0x0000)
struct AVS_Vehicle_C_UpdateWheelLocks final
{
public:
	bool                                          AnyLocked_;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LockInput;                                         // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInPark;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels;                      // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UVehicle_Wheel_C*>               CallFunc_GetAllWheels_Wheels_1;                    // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsHandbrakeWheel_isHandbrakeWheel;     // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsBrakeLocked_isBrakeLocked;           // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCinematic_IsCinematic;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateWheelLocks) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateWheelLocks");
static_assert(sizeof(AVS_Vehicle_C_UpdateWheelLocks) == 0x000068, "Wrong size on AVS_Vehicle_C_UpdateWheelLocks");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, AnyLocked_) == 0x000000, "Member 'AVS_Vehicle_C_UpdateWheelLocks::AnyLocked_' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, LockInput) == 0x000001, "Member 'AVS_Vehicle_C_UpdateWheelLocks::LockInput' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, IsInPark) == 0x000002, "Member 'AVS_Vehicle_C_UpdateWheelLocks::IsInPark' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, Temp_int_Array_Index_Variable) == 0x000004, "Member 'AVS_Vehicle_C_UpdateWheelLocks::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'AVS_Vehicle_C_UpdateWheelLocks::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, Temp_int_Array_Index_Variable_1) == 0x000010, "Member 'AVS_Vehicle_C_UpdateWheelLocks::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'AVS_Vehicle_C_UpdateWheelLocks::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_GetAllWheels_Wheels) == 0x000020, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_GetAllWheels_Wheels' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_GetAllWheels_Wheels_1) == 0x000030, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_GetAllWheels_Wheels_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Array_Get_Item) == 0x000040, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000050, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_GetIsHandbrakeWheel_isHandbrakeWheel) == 0x000051, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_GetIsHandbrakeWheel_isHandbrakeWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_GetIsBrakeLocked_isBrakeLocked) == 0x000052, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_GetIsBrakeLocked_isBrakeLocked' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Array_Length_ReturnValue) == 0x000054, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005D, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_IsCinematic_IsCinematic) == 0x00005E, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_IsCinematic_IsCinematic' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_Not_PreBool_ReturnValue) == 0x00005F, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_BooleanAND_ReturnValue) == 0x000060, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_BooleanAND_ReturnValue_1) == 0x000061, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_BooleanOR_ReturnValue) == 0x000063, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelLocks, CallFunc_BooleanOR_ReturnValue_1) == 0x000064, "Member 'AVS_Vehicle_C_UpdateWheelLocks::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UpdateWheelTorque
// 0x0068 (0x0068 - 0x0000)
struct AVS_Vehicle_C_UpdateWheelTorque final
{
public:
	class UVehicle_Wheel_C*                       Wheel;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWheelTorque_WheelTorque;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsLocked_isLocked;                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSpeedUnit                             CallFunc_GetSpeedUnitData_SpeedUnit;               // 0x0020(0x0030)(HasGetValueTypeHash)
	EShifterPositions                             Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UpdateWheelTorque) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UpdateWheelTorque");
static_assert(sizeof(AVS_Vehicle_C_UpdateWheelTorque) == 0x000068, "Wrong size on AVS_Vehicle_C_UpdateWheelTorque");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, Wheel) == 0x000000, "Member 'AVS_Vehicle_C_UpdateWheelTorque::Wheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, Temp_bool_Variable) == 0x000008, "Member 'AVS_Vehicle_C_UpdateWheelTorque::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_GetWheelTorque_WheelTorque) == 0x000010, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_GetWheelTorque_WheelTorque' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000018, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_GetIsLocked_isLocked) == 0x000019, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_GetIsLocked_isLocked' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, Temp_bool_Variable_1) == 0x00001A, "Member 'AVS_Vehicle_C_UpdateWheelTorque::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, Temp_bool_Variable_2) == 0x00001B, "Member 'AVS_Vehicle_C_UpdateWheelTorque::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, Temp_bool_Variable_3) == 0x00001C, "Member 'AVS_Vehicle_C_UpdateWheelTorque::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_GetSpeedUnitData_SpeedUnit) == 0x000020, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_GetSpeedUnitData_SpeedUnit' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, Temp_byte_Variable) == 0x000050, "Member 'AVS_Vehicle_C_UpdateWheelTorque::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000051, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000060, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000061, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000062, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, K2Node_Select_Default) == 0x000063, "Member 'AVS_Vehicle_C_UpdateWheelTorque::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_BooleanOR_ReturnValue) == 0x000064, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_BooleanOR_ReturnValue_1) == 0x000065, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UpdateWheelTorque, CallFunc_BooleanOR_ReturnValue_2) == 0x000066, "Member 'AVS_Vehicle_C_UpdateWheelTorque::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.UserConstructionScript
// 0x0010 (0x0010 - 0x0000)
struct AVS_Vehicle_C_UserConstructionScript final
{
public:
	float                                         CallFunc_GetLinearDamping_ReturnValue;             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_BaseLinearDrag_ImplicitCast;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_UserConstructionScript) == 0x000008, "Wrong alignment on AVS_Vehicle_C_UserConstructionScript");
static_assert(sizeof(AVS_Vehicle_C_UserConstructionScript) == 0x000010, "Wrong size on AVS_Vehicle_C_UserConstructionScript");
static_assert(offsetof(AVS_Vehicle_C_UserConstructionScript, CallFunc_GetLinearDamping_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_UserConstructionScript::CallFunc_GetLinearDamping_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_UserConstructionScript, K2Node_VariableSet_BaseLinearDrag_ImplicitCast) == 0x000008, "Member 'AVS_Vehicle_C_UserConstructionScript::K2Node_VariableSet_BaseLinearDrag_ImplicitCast' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.ValidateTransmission
// 0x0210 (0x0210 - 0x0000)
struct AVS_Vehicle_C_ValidateTransmission final
{
public:
	class FString                                 FinalErrorMessage;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Current;                                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrevGear;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NextGear;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Errors;                                            // 0x0020(0x0010)(Edit, BlueprintVisible)
	TArray<class FString>                         Messages;                                          // 0x0030(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_2;            // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast;      // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_1;    // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast_1;    // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_B_ImplicitCast_2;    // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast_2;    // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_ValidateTransmission) == 0x000008, "Wrong alignment on AVS_Vehicle_C_ValidateTransmission");
static_assert(sizeof(AVS_Vehicle_C_ValidateTransmission) == 0x000210, "Wrong size on AVS_Vehicle_C_ValidateTransmission");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, FinalErrorMessage) == 0x000000, "Member 'AVS_Vehicle_C_ValidateTransmission::FinalErrorMessage' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Current) == 0x000010, "Member 'AVS_Vehicle_C_ValidateTransmission::Current' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, PrevGear) == 0x000014, "Member 'AVS_Vehicle_C_ValidateTransmission::PrevGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, NextGear) == 0x000018, "Member 'AVS_Vehicle_C_ValidateTransmission::NextGear' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Errors) == 0x000020, "Member 'AVS_Vehicle_C_ValidateTransmission::Errors' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Messages) == 0x000030, "Member 'AVS_Vehicle_C_ValidateTransmission::Messages' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'AVS_Vehicle_C_ValidateTransmission::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Temp_int_Array_Index_Variable) == 0x000048, "Member 'AVS_Vehicle_C_ValidateTransmission::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Temp_int_Array_Index_Variable_1) == 0x00004C, "Member 'AVS_Vehicle_C_ValidateTransmission::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000050, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Conv_IntToString_ReturnValue) == 0x000058, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000068, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue) == 0x000070, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000080, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000098, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Add_ReturnValue) == 0x0000A8, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000B0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Conv_IntToString_ReturnValue_2) == 0x0000C0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0000D0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x0000E0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0000E8, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0000F8, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Add_ReturnValue_1) == 0x000108, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Get_Item) == 0x000110, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Length_ReturnValue) == 0x000120, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Length_ReturnValue_1) == 0x000124, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000128, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, Temp_int_Loop_Counter_Variable_1) == 0x00012C, "Member 'AVS_Vehicle_C_ValidateTransmission::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Less_IntInt_ReturnValue) == 0x000130, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Add_IntInt_ReturnValue_1) == 0x000134, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000138, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000148, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000158, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_LastIndex_ReturnValue) == 0x000168, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_IntInt_ReturnValue) == 0x00016C, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Less_IntInt_ReturnValue_1) == 0x00016D, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Add_IntInt_ReturnValue_2) == 0x000170, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Add_IntInt_ReturnValue_3) == 0x000174, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_NotEqual_IntInt_ReturnValue_2) == 0x000178, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_NotEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000180, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000190, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_9) == 0x0001A0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0001B0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Concat_StrStr_ReturnValue_11) == 0x0001C0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0001D0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Add_ReturnValue_2) == 0x0001D4, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Array_Length_ReturnValue_2) == 0x0001D8, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001DC, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_B_ImplicitCast) == 0x0001E0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x0001E8, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_A_ImplicitCast_1) == 0x0001F0, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_B_ImplicitCast_1) == 0x0001F8, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_B_ImplicitCast_2) == 0x000200, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_ValidateTransmission, CallFunc_Greater_DoubleDouble_A_ImplicitCast_2) == 0x000208, "Member 'AVS_Vehicle_C_ValidateTransmission::CallFunc_Greater_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.WakeIfThrottled
// 0x0003 (0x0003 - 0x0000)
struct AVS_Vehicle_C_WakeIfThrottled final
{
public:
	bool                                          CallFunc_GetEngineRunning_EngineRunning;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnyRigidBodyAwake_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_WakeIfThrottled) == 0x000001, "Wrong alignment on AVS_Vehicle_C_WakeIfThrottled");
static_assert(sizeof(AVS_Vehicle_C_WakeIfThrottled) == 0x000003, "Wrong size on AVS_Vehicle_C_WakeIfThrottled");
static_assert(offsetof(AVS_Vehicle_C_WakeIfThrottled, CallFunc_GetEngineRunning_EngineRunning) == 0x000000, "Member 'AVS_Vehicle_C_WakeIfThrottled::CallFunc_GetEngineRunning_EngineRunning' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_WakeIfThrottled, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000001, "Member 'AVS_Vehicle_C_WakeIfThrottled::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AVS_Vehicle_C_WakeIfThrottled, CallFunc_IsAnyRigidBodyAwake_ReturnValue) == 0x000002, "Member 'AVS_Vehicle_C_WakeIfThrottled::CallFunc_IsAnyRigidBodyAwake_ReturnValue' has a wrong offset!");

// Function AVS_Vehicle.AVS_Vehicle_C.WakePhysics
// 0x0001 (0x0001 - 0x0000)
struct AVS_Vehicle_C_WakePhysics final
{
public:
	bool                                          CallFunc_IsAnyRigidBodyAwake_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AVS_Vehicle_C_WakePhysics) == 0x000001, "Wrong alignment on AVS_Vehicle_C_WakePhysics");
static_assert(sizeof(AVS_Vehicle_C_WakePhysics) == 0x000001, "Wrong size on AVS_Vehicle_C_WakePhysics");
static_assert(offsetof(AVS_Vehicle_C_WakePhysics, CallFunc_IsAnyRigidBodyAwake_ReturnValue) == 0x000000, "Member 'AVS_Vehicle_C_WakePhysics::CallFunc_IsAnyRigidBodyAwake_ReturnValue' has a wrong offset!");

}

