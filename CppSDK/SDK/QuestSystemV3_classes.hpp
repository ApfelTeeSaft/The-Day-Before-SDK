#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestSystemV3

#include "Basic.hpp"

#include "SideQuestData_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "QuestData_0_structs.hpp"
#include "QuestType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass QuestSystemV3.QuestSystemV3_C
// 0x00A0 (0x00C8 - 0x0028)
class UQuestSystemV3_C final : public UObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMainQuests_C*                          MainQuests;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class USideQuests_C*>     SideQuests;                                        // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FQuestData>                     MainQuestsData;                                    // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FSideQuestData>                 SideQuestsData;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UQuestBranch_C*                         ActiveBranch;                                      // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AGS_TDB_C*                              GameState;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 KOSTUIL;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void AddSideQuests(class USideQuests_C* Param_SideQuests);
	void AksForHighlightableActorsWithTag(const class FString& Tag, TArray<TScriptInterface<class II_Highlightable_C>>* Result);
	void AskForHighlightableActors(TArray<TScriptInterface<class II_Highlightable_C>>* FoundActors);
	void ChangeMarkers(const TArray<struct FVector>& Markers);
	void ChangeQuestHint(const class FString& Hint);
	void ChangeQuestHintV2(const class FString& Hint);
	void ClearMarkersBlyat();
	void CreateMainQuests();
	void CreateQuestByQuestData(const struct FQuestData& QuestData, class UQuestV2_C** Quest);
	void CreateQuestByType(EQuestType Type, class UQuestV2_C** Result);
	void CreateSideQuestBySideQuestData(const struct FSideQuestData& SideQuestData, class USideQuests_C** Param_SideQuests);
	void CreateSideQuests();
	void CreateTimeoutTrigger(const class FString& Trigger, double Duration);
	void ExecuteUbergraph_QuestSystemV3(int32 EntryPoint);
	void GetSideQuestsByID(const class FString& ID, class USideQuests_C** SideQuest);
	void HasSideBranch(const class FString& ID, bool* Has);
	void Initialize(class AGS_TDB_C* Param_GameState);
	void OnFillCarFuel();
	void OnImproveCar();
	void OnInventoryUpdated();
	void OnKillNPC();
	void OnPlaceBonfire();
	void OnPlayerDead(class ASurvivalPlayer_C* Player);
	void OnQuestCompleted(class UQuestV2_C* CompletedQuest);
	void OnQuestTrigger(const class FString& Trigger);
	void ProcessQuestTrigger(const class FString& Trigger);
	void SetMarkers(const TArray<struct FVector>& Markers);
	void SetPlayerForQuests(class ASurvivalPlayer_C* Player);
	void SwitchBranch(class UQuestBranch_C* branch);
	void SwitchBranchSilent(class UQuestBranch_C* QuestBranch);
	void SwitchQuest(class UQuestV2_C* Quest);
	void SwitchSideBranchByID(const class FString& ID);
	void SwitchToMainBranch();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"QuestSystemV3_C">();
	}
	static class UQuestSystemV3_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestSystemV3_C>();
	}
};
static_assert(alignof(UQuestSystemV3_C) == 0x000008, "Wrong alignment on UQuestSystemV3_C");
static_assert(sizeof(UQuestSystemV3_C) == 0x0000C8, "Wrong size on UQuestSystemV3_C");
static_assert(offsetof(UQuestSystemV3_C, UberGraphFrame) == 0x000028, "Member 'UQuestSystemV3_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, MainQuests) == 0x000030, "Member 'UQuestSystemV3_C::MainQuests' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, SideQuests) == 0x000038, "Member 'UQuestSystemV3_C::SideQuests' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, MainQuestsData) == 0x000088, "Member 'UQuestSystemV3_C::MainQuestsData' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, SideQuestsData) == 0x000098, "Member 'UQuestSystemV3_C::SideQuestsData' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, ActiveBranch) == 0x0000A8, "Member 'UQuestSystemV3_C::ActiveBranch' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, GameState) == 0x0000B0, "Member 'UQuestSystemV3_C::GameState' has a wrong offset!");
static_assert(offsetof(UQuestSystemV3_C, KOSTUIL) == 0x0000B8, "Member 'UQuestSystemV3_C::KOSTUIL' has a wrong offset!");

}

