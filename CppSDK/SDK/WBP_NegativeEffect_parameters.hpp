#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_NegativeEffect

#include "Basic.hpp"

#include "Survival_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_NegativeEffect.WBP_NegativeEffect_C.ExecuteUbergraph_WBP_NegativeEffect
// 0x0008 (0x0008 - 0x0000)
struct WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect) == 0x000004, "Wrong alignment on WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect");
static_assert(sizeof(WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect) == 0x000008, "Wrong size on WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect");
static_assert(offsetof(WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect, EntryPoint) == 0x000000, "Member 'WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_NegativeEffect_C_ExecuteUbergraph_WBP_NegativeEffect::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_NegativeEffect.WBP_NegativeEffect_C.Init
// 0x01E0 (0x01E0 - 0x0000)
struct WBP_NegativeEffect_C_Init final
{
public:
	EUNegativeEffectType                          Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_4;                              // 0x0068(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x0080(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x0098(0x0018)()
	EUNegativeEffectType                          Temp_byte_Variable_1;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable;                              // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_1;                            // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_2;                            // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_3;                            // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_4;                            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_5;                            // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_6;                            // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default;                             // 0x00F0(0x0018)()
	class UPaperSprite*                           K2Node_Select_Default_1;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x0110(0x00D0)()
};
static_assert(alignof(WBP_NegativeEffect_C_Init) == 0x000010, "Wrong alignment on WBP_NegativeEffect_C_Init");
static_assert(sizeof(WBP_NegativeEffect_C_Init) == 0x0001E0, "Wrong size on WBP_NegativeEffect_C_Init");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_byte_Variable) == 0x000000, "Member 'WBP_NegativeEffect_C_Init::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable) == 0x000008, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable_1) == 0x000020, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable_2) == 0x000038, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable_3) == 0x000050, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable_4) == 0x000068, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable_5) == 0x000080, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_text_Variable_6) == 0x000098, "Member 'WBP_NegativeEffect_C_Init::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_byte_Variable_1) == 0x0000B0, "Member 'WBP_NegativeEffect_C_Init::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable) == 0x0000B8, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable_1) == 0x0000C0, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable_2) == 0x0000C8, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable_3) == 0x0000D0, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable_4) == 0x0000D8, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable_5) == 0x0000E0, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, Temp_object_Variable_6) == 0x0000E8, "Member 'WBP_NegativeEffect_C_Init::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, K2Node_Select_Default) == 0x0000F0, "Member 'WBP_NegativeEffect_C_Init::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, K2Node_Select_Default_1) == 0x000108, "Member 'WBP_NegativeEffect_C_Init::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_NegativeEffect_C_Init, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x000110, "Member 'WBP_NegativeEffect_C_Init::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");

// Function WBP_NegativeEffect.WBP_NegativeEffect_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_NegativeEffect_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_NegativeEffect_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_NegativeEffect_C_PreConstruct");
static_assert(sizeof(WBP_NegativeEffect_C_PreConstruct) == 0x000001, "Wrong size on WBP_NegativeEffect_C_PreConstruct");
static_assert(offsetof(WBP_NegativeEffect_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_NegativeEffect_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

