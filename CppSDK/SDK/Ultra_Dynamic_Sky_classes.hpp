#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Sky

#include "Basic.hpp"

#include "UDS_VolRT_Mode_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_FeatureToggle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UDS_SkyLightMode_structs.hpp"
#include "UDS_SkyMode_structs.hpp"
#include "UDS_NoiseType_structs.hpp"
#include "UDS_Season_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C
// 0x0C50 (0x0EE0 - 0x0290)
class AUltra_Dynamic_Sky_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkyLightComponent*                     Realtime_Capture_Based_Sky_Light;                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Inside_Cloud_Fog;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricAurora;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticCloudsSphere;                                // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Root;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     CubeMap_Sky_Light;                                 // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     Capture_Based_Sky_Light;                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  Exposure;                                          // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Moon;                                              // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             Sun;                                               // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Moon_Root;                                         // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Sun_Root;                                          // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Ultra_Dynamic_Sky_Sphere;                          // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Sun_Light;                                         // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Custom_Sun_Light_Actor;                            // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Sun_Mobility;                                      // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Sky_MID;                                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Speed;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Wisps_Opacity;                               // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_Settings;                                  // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Sky_Mode;                                          // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Coverage;                                    // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Overall_Intensity;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Saturation;                                        // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Direction;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Phase;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Angle;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Inclination;                                  // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Vertical_Offset;                              // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Orbit_Offset;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Casts_Shadows;                                // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A9[0x7];                                      // 0x03A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Scale;                                        // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Phase;                                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Automatically_Set_Advanced_Legacy_Settings_using_Time_of_Day; // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Stars_Visibility;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Phase_Changes_Over_Time;                      // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Dark_Side_Brightness;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Intensity__Night_;                    // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Position;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Angle;                                         // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Horizon_Base_Color;                                // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zenith_Base_Color;                                 // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Light_Color;                                 // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Dark_Color;                                  // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Color;                                         // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shine_Intensity;                             // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Animate_Time_of_Day;                               // 0x0450(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Contrast;                                          // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Inclination;                                   // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Vertical_Offset;                               // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sun_Casts_Shadows;                                 // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Sun_Light_Color;                                   // 0x0474(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Light_Intensity;                               // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Intensity__Day_;                      // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Light_Color;                                  // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Cloud_Layer_1;                              // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Cloud_Layer_2;                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sharpen_Outer_Edge;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Highlight_Radius;                              // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Intensity;                                   // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Stars_Color;                                       // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Moon_Material_Color;                               // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Automatically_Set_Sun_Light_Rotation;              // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Sun_Rotation;                                      // 0x04F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Sun_Radius;                                        // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sun_Cloud_Shadows_MID;                             // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Cloud_Shadows;                                 // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x7];                                      // 0x0521(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Shadows_Scale;                               // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Speed;                               // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Intensity_When_Sunny;                // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Moon_Light;                                        // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Custom_Moon_Light_Actor;                           // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Manually_Select_Sun_Color;                         // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Automatically_Set_Moon_Light_Rotation;             // 0x0551(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_552[0x6];                                      // 0x0552(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Light_Intensity;                              // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Speed;                                       // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Moon_Cloud_Shadows_MID;                            // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        New_Moon_Light_Brightness;                         // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Texture_Rotation;                             // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Custom_Moon_Texture;                           // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Custom_Moon_Texture;                               // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Moon_Mobility;                                     // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Sky_Light;                                         // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_592[0x6];                                      // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASkyLight*                              Custom_Sky_Light_Actor;                            // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EComponentMobility                            Sky_Light_Mobility;                                // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_FeatureToggle                            Height_Fog;                                        // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AExponentialHeightFog*                  Custom_Height_Fog_Actor;                           // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyLightMode                             Sky_Light_Mode;                                    // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Night_Filter_Curve;                                // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Glow_Intensity;                               // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Auroras;                                       // 0x05C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Aurora_Intensity;                                  // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Speed;                                      // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Intensity_When_Overcast;             // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Softness_When_Sunny;                 // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Shadows_Softness_When_Overcast;              // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Tiling_Layer_1;                              // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Tiling_Layer_2;                              // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Soften_Horizon;                                    // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          One_Cloud_Layer;                                   // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Cloud_Height_Layer_1;                              // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_Height_Layer_2;                              // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Swirling_Texture;                         // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dawn_Time;                                         // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dusk_Time;                                         // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_brightness;                                  // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Volumetric_Scattering_Intensity;               // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Volumetric_Scattering_Intensity;              // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Phase;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class FString                                 Readme;                                            // 0x0660(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class ULightComponent*                        Sun_LightComponent;                                // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ULightComponent*                        Moon_LightComponent;                               // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         Height_Fog_Component;                              // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Exposure_Range;                                // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Exposure_Min;                                      // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Exposure_Max;                                      // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Day_Length;                                        // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Length;                                      // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extend_Dawn_and_Dusk;                              // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stationary_Lights;                                 // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1[0x7];                                      // 0x06C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Fog_Density_Clear;                                 // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Cloudy;                                // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Density_Distribution;                          // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Inscattering_Color_Curve;                      // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_Directional_Inscattering_Color_Curve;          // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Tiling;                                      // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Daytime_Intensity;                           // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Tiling_Stars_Texture;                              // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Real_Stars_Texture;                                // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Night_Sky_Glow;                                    // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Night_Sky_Glow_Color;                              // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_Phase;                                       // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Stars_Intensity_Curve;                             // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sky_Light_Intensity;                               // 0x0738(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Sky_Light_Casts_Shadows;                           // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_741[0x7];                                      // 0x0741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DFAO_Min_Occlusion;                                // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        DFAO_Exponent;                                     // 0x0750(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UTextureCube*                           Flat_Clear_Cubemap;                                // 0x0758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Flat_PartlyCloudy_Cubemap;                         // 0x0760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Flat_Overcast_Cubemap;                             // 0x0768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Custom_Cubemap;                                    // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Tint_Color_Clear;                                  // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Tint_Color_Partly_Cloudy;                          // 0x0780(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Tint_Color_Overcast;                               // 0x0788(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tinted_Sky_Light_Lower_Hemisphere_Color;           // 0x0790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Real_Time_Capture;                                 // 0x07A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A1[0x7];                                      // 0x07A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Captured_Sky_Light_Lower_Hemisphere_Brightness;    // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Capture_Based_Sky_Light_Color;                     // 0x07B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Recapture_Sky_light_Periodically;                  // 0x07C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sky_Light_Recapture_Period__Seconds_;              // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lights_Update_Period;                              // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sunrise_Event_Time;                                // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sunset_Event_Time;                                 // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Sunset;                                            // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Sunrise;                                           // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           Height_Fog_Color_Multiplier;                       // 0x0808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Fog_Density_Curve;                             // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_819[0x7];                                      // 0x0819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Fog_Density_Curve;                                 // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Horizon_Density_Multiplier;                        // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Zenith_Density_Multiplier;                         // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Latitude_Gradient_Position;                        // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Latitude_Gradient_Width;                           // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Around_Sun_Density_Multiplier;                     // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Around_Sun_Density_Exponent;                       // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Around_Moon_Density_Multiplier;                    // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Around_Moon_Density_Exponent;                      // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Cloud_Wisps_Texture;                               // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EUDS_NoiseType                                Cloud_Noise_Type;                                  // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_871[0x7];                                      // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Custom_Noise_Texture;                              // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Shader_Intensity;                              // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Directional_Lighting_Intensity;                    // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Shine_Variation;                                   // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Highlight_Radius_Curve;                        // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Highlight_Intensity_Curve;                     // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Shine_Intensity_Curve;                             // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cloud_Opacity;                                     // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Directional_Lights_Absent_Brightness;              // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Complex;                     // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EUDS_VolRT_Mode                               Volumetric_Cloud_Rendering_Mode;                   // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Layer_Height_Scale;                                // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Bottom_Altitude;                                   // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Clouds_Scale;                                 // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SubNoise_Scale;                                    // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        High_Frequency_Noise_Amount;                       // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extinction_Scale_Top;                              // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Extinction_Scale_Bottom;                           // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shift_Curve;                                       // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Minimum_Erosion;                                   // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        View_Sample_Count_Scale;                           // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Sample_Scale;                               // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Shadow_Tracing_Distance;                           // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Reflection_Sample_Count_Scale;                     // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Reflection_Shadow_Sample_Count_Scale;              // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EUDS_NoiseType                                Volumetric_Cloud_Noise_Type;                       // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_941[0x7];                                      // 0x0941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Volumetric_Custom_Noise_Texture;                   // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Clouds_Mip_Level;                             // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Multiscattering_Intensity;                         // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Multiscattering_Occlusion_Factor;                  // 0x0960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        SubNoise_Erosion;                                  // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Volumetric_Fog;                                // 0x0970(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_971[0x7];                                      // 0x0971(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Volumetric_Clouds_MID_Simplified;                  // 0x0978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Start_Distance_when_Clear;                     // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Foggy;                                             // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fog_Start_Distance_Exponent;                       // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Randomize_Cloud_Formation_on_Run;                  // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Macro_Variation;                                   // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Macro_Scale;                                       // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Phase_G;                                           // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Phase_G_2;                                         // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        MultiScattering_Eccentricity;                      // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Distance_to_Sample_Max_Count;                      // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Time_Speed;                                        // 0x09D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Internal_Time_of_Day;                              // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Weather_BP;                                        // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Clouds_Scale;                           // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Volumetric_Cloud_Color;                            // 0x09F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Start_Distance;                        // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Static_Clouds_MID;                                 // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_1;                                    // 0x0A10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_2;                                    // 0x0A20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Aurora_Color_3;                                    // 0x0A30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Volumetric_Aurora_MID;                             // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Overcast_Night_Brightness;                         // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Sky_Mode_Scalability_Map;                      // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_A51[0x7];                                      // 0x0A51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EUDS_SkyMode>                     Sky_Mode_ScalabilityMap;                           // 0x0A58(0x0050)(Edit, BlueprintVisible, AdvancedDisplay)
	double                                        Scale_Skylight_Intensity_at_Night;                 // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Skylight_Intensity_when_Cloudy;              // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Horizon_Base_Color__Legacy_Color_Curve_;           // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Cloud_Dark_Color__Legacy_Color_Curve_;             // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Cloud_Light_Color__Legacy_Color_Curve_;            // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Disk_Intensity;                                // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sun_Disk_Color_Curve;                              // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sun_Cloudy_Color__Legacy_Color_Curve_;             // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Zenith_Base_Color__Legacy_Color_Curve_;            // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Directional_Intensity_Curve;                       // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Aurora_Lines;                                      // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Aurora_Intensity_Curve;                            // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Inside_Clouds_Fog_MID;                             // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Tracing_Max_Distance;                              // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Enable_Fog_Inside_Clouds;                          // 0x0B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B19[0x7];                                      // 0x0B19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Volumetric_Aurora_Sample_Count_Scale;              // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Layer_Height;                    // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Volumetric_Aurora_Bottom_Altitude;                 // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clear_Height_Fog_Falloff;                          // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cloudy_Height_Fog_Falloff;                         // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveFloat*                            Tint_Color_Value_Curve;                            // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Two_Layers;                                        // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B51[0x7];                                      // 0x0B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Layer_2_Density_Scale;                             // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Extinction_Scale;                          // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Layer_2_Cloud_Scale;                               // 0x0B68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Layer_2_Mip_Offset;                                // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Between_Layers;                           // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVolumeTexture*                         LowQuality_VolumeTexture;                          // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UVolumeTexture*                         HighQuality_VolumeTexture;                         // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UVolumeTexture*                         EpicQuality_VolumeTexture;                         // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Use_Static_Moon_Rotation;                          // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA1[0x7];                                      // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Static_Moon_Rotation;                              // 0x0BA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        Fog_Color_Strength_Day;                            // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Sun_Light_Shaft_Bloom;                      // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Light_Shaft_Max_Brightness;                    // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Light_Shaft_Bloom_Threshold_Curve;             // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Sun_Light_Shaft_Bloom_Scale_Curve;                 // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Sun_Light_Shaft_Tint_Color;                        // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Moon_Light_Shaft_Bloom;                     // 0x0BEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BED[0x3];                                      // 0x0BED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Moon_Light_Shaft_Max_Brightness;                   // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Light_Shaft_Bloom_Threshold;                  // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Light_Shaft_Bloom_Scale;                      // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Moon_Light_Shaft_Tint_Color;                       // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Custom_Cubemap_Sky_Light_Color;                    // 0x0C0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Factor_Absent_Directional_Lights_Brightness;       // 0x0C1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Real_Time_Capture_Uses_Time_Slicing;               // 0x0C1D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Mobile_Overrides;                              // 0x0C1E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyMode                                  Volumetric_Clouds_Replacement;                     // 0x0C1F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_SkyLightMode                             Real_Time_Capture_Sky_Light_Replacement;           // 0x0C20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Adjust_For_Mobile_Renderer;                        // 0x0C21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C22[0x6];                                      // 0x0C22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Mobile_Platforms;                                  // 0x0C28(0x0010)(Edit, BlueprintVisible, AdvancedDisplay)
	bool                                          Mobile;                                            // 0x0C38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Sun;                                 // 0x0C39(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Moon;                                // 0x0C3A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Simulate_Real_Stars;                               // 0x0C3B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3C[0x4];                                      // 0x0C3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Latitude;                                          // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Longitude;                                         // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time_Zone;                                         // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Year;                                              // 0x0C58(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Month;                                             // 0x0C5C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Day;                                               // 0x0C60(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C64[0x4];                                      // 0x0C64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        North_Yaw;                                         // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Simulation_Speed;                                  // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          True_Real_World_Time;                              // 0x0C78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Apply_Daylight_Savings_Time;                       // 0x0C79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Date_Controls_UDW_Season;                          // 0x0C7A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C7B[0x1];                                      // 0x0C7B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DST_Start_Month;                                   // 0x0C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_Start_Day;                                     // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_End_Month;                                     // 0x0C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_End_Day;                                       // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         DST_Change_Hour;                                   // 0x0C8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveLinearColor*                      Sun_Color__Legacy_Color_Curve_;                    // 0x0C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sun_Disk_Color;                                    // 0x0C98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Months;                                            // 0x0CA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Months__Leap_Year_;                                // 0x0CB8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Stellar_Calibration;                               // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Lunar_Orbit_Calibration;                           // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lunar_Inclination_Calibration;                     // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Runtime;                                           // 0x0CE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Daylight_Savings_Time;                             // 0x0CE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE2[0x2];                                      // 0x0CE2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Total_Days_Elapsed;                                // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clouds_Move_with_Time_of_Day;                      // 0x0CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE9[0x7];                                      // 0x0CE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day_Movement_Multiplier;                   // 0x0CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clouds_Time;                                       // 0x0CF8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class UMaterialInstance*> Sky_MID_Parent_Instances;                          // 0x0D00(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Fog_Color_Strength_Night;                          // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Custom_Light_Function_Material;                // 0x0D58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_D59[0x7];                                      // 0x0D59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Custom_Light_Function_Material;                    // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Force_Light_Functions_On;                          // 0x0D68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_D69[0x7];                                      // 0x0D69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Time_of_Day_Replication_Period;                    // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Time_of_Day;                            // 0x0D78(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Moon_Phase;                             // 0x0D80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Sun_Radius_as_it_Nears_Horizon;              // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Yaw;                                           // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_Moon_Radius_as_it_Nears_Horizon;             // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Height_Fog_Gets_Colors_from_Sky_Atmosphere;        // 0x0DA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_DA1[0x7];                                      // 0x0DA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sky_Atmosphere_Influence;                          // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Sun_Z_Vector;                                      // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ambient_Fog_Color;                                 // 0x0DB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_Specular_Scale;                               // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Day_Length;                             // 0x0DD0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Night_Length;                           // 0x0DD8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Time_Speed;                             // 0x0DE0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Replicated_Simulation_Speed;                       // 0x0DE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Change_to_Simplified_Material_when_Overcast;       // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_DF1[0x7];                                      // 0x0DF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Simplified_Material_Cloud_Coverage_Threshold;      // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Simplified_Material_Fade_Length;                   // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Top_Bottom_Distribution;                           // 0x0E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         Current_Volumetric_Clouds_MID;                     // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dim_Directional_Lights_with_Cloud_Coverage;        // 0x0E14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E15[0x3];                                      // 0x0E15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Clouds_Position;                                   // 0x0E18(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Standard_Base_Clouds_Size;                         // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Last_Clouds_Time_of_Day_Factor;                    // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Starting_Cloud_Texture_Velocity;                   // 0x0E40(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Control_Sky_Atmosphere_Settings;                   // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E59[0x3];                                      // 0x0E59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Rayleigh_Scattering_Color;                         // 0x0E5C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E6C[0x4];                                      // 0x0E6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Desaturate_Rayleigh_Scattering_when_Cloudy;        // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Brighten_Rayleigh_Scattering_When_Cloudy;          // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Volumetric_Fog_Follow_Player;                      // 0x0E80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E81[0x7];                                      // 0x0E81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HouseBoxOffset;                                    // 0x0E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetSkylightOffset;                              // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           InterpTimer;                                       // 0x0E98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScatteringTimer;                                   // 0x0EA0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TargetVolumetricScattering;                        // 0x0EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Target_Sun_Color;                                  // 0x0EB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ChangeSunlightColorTimer;                          // 0x0EC0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      CustomTintSkyColor;                                // 0x0EC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CustomTintColorAlpha;                              // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetTintColorAlpha;                              // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Approximate_Real_Sun_Moon_and_Stars(int32 Param_Month, int32 Param_Day, int32 Param_Year, double Param_Time_of_Day, double Param_Time_Zone, struct FVector* Sun_Vector, struct FVector* Moon_Vector, double* Real_Phase, struct FVector* Phase_Alignment, double* Celestial_Orbit, struct FLinearColor* Celestial_Yaw);
	void Change_Settings_Based_on_Platform_and_Scalability();
	void Check_for_Daylight_Savings_Time();
	void Construction_Script_Function(bool Run_By_Counterpart);
	void ExecuteUbergraph_Ultra_Dynamic_Sky(int32 EntryPoint);
	void Force_Valid_Day();
	void Get_Current_Date_and_Time(struct FDateTime* Current_Date_and_Time);
	void Get_Time_of_Day_in_Real_Time_Format(struct FTimecode* Time);
	void Increment_Day();
	void InterpSkylightTimer();
	void Midnight();
	void OnRep_Replicated_Time_of_Day();
	void Recapture_SkyLight();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Restart_Inside_Cloud_Fog();
	void ScatteringTimerEvent();
	void Set_Cloud_Timing();
	void Set_Date_and_Time(const struct FDateTime& Date_Time);
	void Set_Sun_and_Moon_Root_Rotation();
	void Set_Time_of_Day_using_Time_Code(const struct FTimecode& Time_Code);
	void SetScattering(double Offset);
	void SetSkylightOffset(double Offset);
	void SetSunColor(class UCurveLinearColor* TargetSunColor, double Alpha);
	void SunlightColorTimer();
	void Sunrise__DelegateSignature();
	void Sunset__DelegateSignature();
	void Update_Active_Variables();
	void Update_Current_Volumetric_Clouds_MID();
	void Update_Directional_Lights(bool Move_Static_Lights);
	void Update_Lights();
	void Update_Replicated_Time();
	void Update_Replicated_ToD();
	void Update_Static_Cloud_Lighting();
	void Update_Static_Variables();
	void Update_Variables_Controlled_by_Weather();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Ultra_Dynamic_Sky_C">();
	}
	static class AUltra_Dynamic_Sky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AUltra_Dynamic_Sky_C>();
	}
};
static_assert(alignof(AUltra_Dynamic_Sky_C) == 0x000008, "Wrong alignment on AUltra_Dynamic_Sky_C");
static_assert(sizeof(AUltra_Dynamic_Sky_C) == 0x000EE0, "Wrong size on AUltra_Dynamic_Sky_C");
static_assert(offsetof(AUltra_Dynamic_Sky_C, UberGraphFrame) == 0x000290, "Member 'AUltra_Dynamic_Sky_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Realtime_Capture_Based_Sky_Light) == 0x000298, "Member 'AUltra_Dynamic_Sky_C::Realtime_Capture_Based_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Cloud_Fog) == 0x0002A0, "Member 'AUltra_Dynamic_Sky_C::Inside_Cloud_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricAurora) == 0x0002A8, "Member 'AUltra_Dynamic_Sky_C::VolumetricAurora' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, StaticCloudsSphere) == 0x0002B0, "Member 'AUltra_Dynamic_Sky_C::StaticCloudsSphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Root) == 0x0002B8, "Member 'AUltra_Dynamic_Sky_C::Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, VolumetricCloud) == 0x0002C0, "Member 'AUltra_Dynamic_Sky_C::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, CubeMap_Sky_Light) == 0x0002C8, "Member 'AUltra_Dynamic_Sky_C::CubeMap_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Capture_Based_Sky_Light) == 0x0002D0, "Member 'AUltra_Dynamic_Sky_C::Capture_Based_Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure) == 0x0002D8, "Member 'AUltra_Dynamic_Sky_C::Exposure' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, HeightFog) == 0x0002E0, "Member 'AUltra_Dynamic_Sky_C::HeightFog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon) == 0x0002E8, "Member 'AUltra_Dynamic_Sky_C::Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun) == 0x0002F0, "Member 'AUltra_Dynamic_Sky_C::Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SkyAtmosphere) == 0x0002F8, "Member 'AUltra_Dynamic_Sky_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Root) == 0x000300, "Member 'AUltra_Dynamic_Sky_C::Moon_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Root) == 0x000308, "Member 'AUltra_Dynamic_Sky_C::Sun_Root' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ultra_Dynamic_Sky_Sphere) == 0x000310, "Member 'AUltra_Dynamic_Sky_C::Ultra_Dynamic_Sky_Sphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light) == 0x000318, "Member 'AUltra_Dynamic_Sky_C::Sun_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sun_Light_Actor) == 0x000320, "Member 'AUltra_Dynamic_Sky_C::Custom_Sun_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Mobility) == 0x000328, "Member 'AUltra_Dynamic_Sky_C::Sun_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_MID) == 0x000330, "Member 'AUltra_Dynamic_Sky_C::Sky_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Speed) == 0x000338, "Member 'AUltra_Dynamic_Sky_C::Cloud_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Opacity) == 0x000340, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Refresh_Settings) == 0x000348, "Member 'AUltra_Dynamic_Sky_C::Refresh_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day) == 0x000350, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Mode) == 0x000358, "Member 'AUltra_Dynamic_Sky_C::Sky_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Coverage) == 0x000360, "Member 'AUltra_Dynamic_Sky_C::Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overall_Intensity) == 0x000368, "Member 'AUltra_Dynamic_Sky_C::Overall_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Saturation) == 0x000370, "Member 'AUltra_Dynamic_Sky_C::Saturation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Direction) == 0x000378, "Member 'AUltra_Dynamic_Sky_C::Cloud_Direction' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Phase) == 0x000380, "Member 'AUltra_Dynamic_Sky_C::Cloud_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Angle) == 0x000388, "Member 'AUltra_Dynamic_Sky_C::Moon_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Inclination) == 0x000390, "Member 'AUltra_Dynamic_Sky_C::Moon_Inclination' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Vertical_Offset) == 0x000398, "Member 'AUltra_Dynamic_Sky_C::Moon_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Orbit_Offset) == 0x0003A0, "Member 'AUltra_Dynamic_Sky_C::Moon_Orbit_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Casts_Shadows) == 0x0003A8, "Member 'AUltra_Dynamic_Sky_C::Moon_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Scale) == 0x0003B0, "Member 'AUltra_Dynamic_Sky_C::Moon_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Phase) == 0x0003B8, "Member 'AUltra_Dynamic_Sky_C::Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Automatically_Set_Advanced_Legacy_Settings_using_Time_of_Day) == 0x0003C0, "Member 'AUltra_Dynamic_Sky_C::Automatically_Set_Advanced_Legacy_Settings_using_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Visibility) == 0x0003C8, "Member 'AUltra_Dynamic_Sky_C::Stars_Visibility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Phase_Changes_Over_Time) == 0x0003D0, "Member 'AUltra_Dynamic_Sky_C::Moon_Phase_Changes_Over_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dark_Side_Brightness) == 0x0003D8, "Member 'AUltra_Dynamic_Sky_C::Dark_Side_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Intensity__Night_) == 0x0003E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Intensity__Night_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Position) == 0x0003E8, "Member 'AUltra_Dynamic_Sky_C::Moon_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Angle) == 0x0003F0, "Member 'AUltra_Dynamic_Sky_C::Sun_Angle' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Horizon_Base_Color) == 0x0003F8, "Member 'AUltra_Dynamic_Sky_C::Horizon_Base_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Zenith_Base_Color) == 0x000408, "Member 'AUltra_Dynamic_Sky_C::Zenith_Base_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Light_Color) == 0x000418, "Member 'AUltra_Dynamic_Sky_C::Cloud_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Dark_Color) == 0x000428, "Member 'AUltra_Dynamic_Sky_C::Cloud_Dark_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Color) == 0x000438, "Member 'AUltra_Dynamic_Sky_C::Sun_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shine_Intensity) == 0x000448, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shine_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Animate_Time_of_Day) == 0x000450, "Member 'AUltra_Dynamic_Sky_C::Animate_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Contrast) == 0x000458, "Member 'AUltra_Dynamic_Sky_C::Contrast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Inclination) == 0x000460, "Member 'AUltra_Dynamic_Sky_C::Sun_Inclination' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Vertical_Offset) == 0x000468, "Member 'AUltra_Dynamic_Sky_C::Sun_Vertical_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Casts_Shadows) == 0x000470, "Member 'AUltra_Dynamic_Sky_C::Sun_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Color) == 0x000474, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Intensity) == 0x000488, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Intensity__Day_) == 0x000490, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Intensity__Day_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Color) == 0x000498, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Cloud_Layer_1) == 0x0004A8, "Member 'AUltra_Dynamic_Sky_C::Soften_Cloud_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Cloud_Layer_2) == 0x0004B0, "Member 'AUltra_Dynamic_Sky_C::Soften_Cloud_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sharpen_Outer_Edge) == 0x0004B8, "Member 'AUltra_Dynamic_Sky_C::Sharpen_Outer_Edge' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Radius) == 0x0004C0, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Intensity) == 0x0004C8, "Member 'AUltra_Dynamic_Sky_C::Stars_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Color) == 0x0004D0, "Member 'AUltra_Dynamic_Sky_C::Stars_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Material_Color) == 0x0004E0, "Member 'AUltra_Dynamic_Sky_C::Moon_Material_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Automatically_Set_Sun_Light_Rotation) == 0x0004F0, "Member 'AUltra_Dynamic_Sky_C::Automatically_Set_Sun_Light_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Rotation) == 0x0004F8, "Member 'AUltra_Dynamic_Sky_C::Sun_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Radius) == 0x000510, "Member 'AUltra_Dynamic_Sky_C::Sun_Radius' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Cloud_Shadows_MID) == 0x000518, "Member 'AUltra_Dynamic_Sky_C::Sun_Cloud_Shadows_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Cloud_Shadows) == 0x000520, "Member 'AUltra_Dynamic_Sky_C::Use_Cloud_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Scale) == 0x000528, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Speed) == 0x000530, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Intensity_When_Sunny) == 0x000538, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Intensity_When_Sunny' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light) == 0x000540, "Member 'AUltra_Dynamic_Sky_C::Moon_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Moon_Light_Actor) == 0x000548, "Member 'AUltra_Dynamic_Sky_C::Custom_Moon_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Manually_Select_Sun_Color) == 0x000550, "Member 'AUltra_Dynamic_Sky_C::Manually_Select_Sun_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Automatically_Set_Moon_Light_Rotation) == 0x000551, "Member 'AUltra_Dynamic_Sky_C::Automatically_Set_Moon_Light_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Intensity) == 0x000558, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Speed) == 0x000560, "Member 'AUltra_Dynamic_Sky_C::Stars_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Cloud_Shadows_MID) == 0x000568, "Member 'AUltra_Dynamic_Sky_C::Moon_Cloud_Shadows_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, New_Moon_Light_Brightness) == 0x000570, "Member 'AUltra_Dynamic_Sky_C::New_Moon_Light_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Texture_Rotation) == 0x000578, "Member 'AUltra_Dynamic_Sky_C::Moon_Texture_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Custom_Moon_Texture) == 0x000580, "Member 'AUltra_Dynamic_Sky_C::Use_Custom_Moon_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Moon_Texture) == 0x000588, "Member 'AUltra_Dynamic_Sky_C::Custom_Moon_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Mobility) == 0x000590, "Member 'AUltra_Dynamic_Sky_C::Moon_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light) == 0x000591, "Member 'AUltra_Dynamic_Sky_C::Sky_Light' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Sky_Light_Actor) == 0x000598, "Member 'AUltra_Dynamic_Sky_C::Custom_Sky_Light_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Mobility) == 0x0005A0, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Mobility' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog) == 0x0005A1, "Member 'AUltra_Dynamic_Sky_C::Height_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Height_Fog_Actor) == 0x0005A8, "Member 'AUltra_Dynamic_Sky_C::Custom_Height_Fog_Actor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Mode) == 0x0005B0, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Filter_Curve) == 0x0005B8, "Member 'AUltra_Dynamic_Sky_C::Night_Filter_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Glow_Intensity) == 0x0005C0, "Member 'AUltra_Dynamic_Sky_C::Moon_Glow_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Auroras) == 0x0005C8, "Member 'AUltra_Dynamic_Sky_C::Use_Auroras' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Intensity) == 0x0005D0, "Member 'AUltra_Dynamic_Sky_C::Aurora_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Speed) == 0x0005D8, "Member 'AUltra_Dynamic_Sky_C::Aurora_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Intensity_When_Overcast) == 0x0005E0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Intensity_When_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Softness_When_Sunny) == 0x0005E8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Softness_When_Sunny' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Shadows_Softness_When_Overcast) == 0x0005F0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Shadows_Softness_When_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Tiling_Layer_1) == 0x0005F8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Tiling_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Tiling_Layer_2) == 0x000600, "Member 'AUltra_Dynamic_Sky_C::Cloud_Tiling_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Soften_Horizon) == 0x000608, "Member 'AUltra_Dynamic_Sky_C::Soften_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, One_Cloud_Layer) == 0x000610, "Member 'AUltra_Dynamic_Sky_C::One_Cloud_Layer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Height_Layer_1) == 0x000618, "Member 'AUltra_Dynamic_Sky_C::Cloud_Height_Layer_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Height_Layer_2) == 0x000620, "Member 'AUltra_Dynamic_Sky_C::Cloud_Height_Layer_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Swirling_Texture) == 0x000628, "Member 'AUltra_Dynamic_Sky_C::Overcast_Swirling_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dawn_Time) == 0x000630, "Member 'AUltra_Dynamic_Sky_C::Dawn_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dusk_Time) == 0x000638, "Member 'AUltra_Dynamic_Sky_C::Dusk_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_brightness) == 0x000640, "Member 'AUltra_Dynamic_Sky_C::Night_brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Volumetric_Scattering_Intensity) == 0x000648, "Member 'AUltra_Dynamic_Sky_C::Sun_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Volumetric_Scattering_Intensity) == 0x000650, "Member 'AUltra_Dynamic_Sky_C::Moon_Volumetric_Scattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Phase) == 0x000658, "Member 'AUltra_Dynamic_Sky_C::Aurora_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Readme) == 0x000660, "Member 'AUltra_Dynamic_Sky_C::Readme' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_LightComponent) == 0x000670, "Member 'AUltra_Dynamic_Sky_C::Sun_LightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_LightComponent) == 0x000678, "Member 'AUltra_Dynamic_Sky_C::Moon_LightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SkyLightComponent) == 0x000680, "Member 'AUltra_Dynamic_Sky_C::SkyLightComponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Component) == 0x000688, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Component' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Exposure_Range) == 0x000690, "Member 'AUltra_Dynamic_Sky_C::Use_Exposure_Range' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Min) == 0x000698, "Member 'AUltra_Dynamic_Sky_C::Exposure_Min' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Exposure_Max) == 0x0006A0, "Member 'AUltra_Dynamic_Sky_C::Exposure_Max' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Day_Length) == 0x0006A8, "Member 'AUltra_Dynamic_Sky_C::Day_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Length) == 0x0006B0, "Member 'AUltra_Dynamic_Sky_C::Night_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extend_Dawn_and_Dusk) == 0x0006B8, "Member 'AUltra_Dynamic_Sky_C::Extend_Dawn_and_Dusk' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stationary_Lights) == 0x0006C0, "Member 'AUltra_Dynamic_Sky_C::Stationary_Lights' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Clear) == 0x0006C8, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Cloudy) == 0x0006D0, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Distribution) == 0x0006D8, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Distribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Inscattering_Color_Curve) == 0x0006E0, "Member 'AUltra_Dynamic_Sky_C::Fog_Inscattering_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Directional_Inscattering_Color_Curve) == 0x0006E8, "Member 'AUltra_Dynamic_Sky_C::Fog_Directional_Inscattering_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Tiling) == 0x0006F0, "Member 'AUltra_Dynamic_Sky_C::Stars_Tiling' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Daytime_Intensity) == 0x0006F8, "Member 'AUltra_Dynamic_Sky_C::Stars_Daytime_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tiling_Stars_Texture) == 0x000700, "Member 'AUltra_Dynamic_Sky_C::Tiling_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Stars_Texture) == 0x000708, "Member 'AUltra_Dynamic_Sky_C::Real_Stars_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Sky_Glow) == 0x000710, "Member 'AUltra_Dynamic_Sky_C::Night_Sky_Glow' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Night_Sky_Glow_Color) == 0x000718, "Member 'AUltra_Dynamic_Sky_C::Night_Sky_Glow_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Phase) == 0x000728, "Member 'AUltra_Dynamic_Sky_C::Stars_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stars_Intensity_Curve) == 0x000730, "Member 'AUltra_Dynamic_Sky_C::Stars_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Intensity) == 0x000738, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Casts_Shadows) == 0x000740, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Casts_Shadows' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DFAO_Min_Occlusion) == 0x000748, "Member 'AUltra_Dynamic_Sky_C::DFAO_Min_Occlusion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DFAO_Exponent) == 0x000750, "Member 'AUltra_Dynamic_Sky_C::DFAO_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Flat_Clear_Cubemap) == 0x000758, "Member 'AUltra_Dynamic_Sky_C::Flat_Clear_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Flat_PartlyCloudy_Cubemap) == 0x000760, "Member 'AUltra_Dynamic_Sky_C::Flat_PartlyCloudy_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Flat_Overcast_Cubemap) == 0x000768, "Member 'AUltra_Dynamic_Sky_C::Flat_Overcast_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Cubemap) == 0x000770, "Member 'AUltra_Dynamic_Sky_C::Custom_Cubemap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tint_Color_Clear) == 0x000778, "Member 'AUltra_Dynamic_Sky_C::Tint_Color_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tint_Color_Partly_Cloudy) == 0x000780, "Member 'AUltra_Dynamic_Sky_C::Tint_Color_Partly_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tint_Color_Overcast) == 0x000788, "Member 'AUltra_Dynamic_Sky_C::Tint_Color_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tinted_Sky_Light_Lower_Hemisphere_Color) == 0x000790, "Member 'AUltra_Dynamic_Sky_C::Tinted_Sky_Light_Lower_Hemisphere_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture) == 0x0007A0, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Captured_Sky_Light_Lower_Hemisphere_Brightness) == 0x0007A8, "Member 'AUltra_Dynamic_Sky_C::Captured_Sky_Light_Lower_Hemisphere_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Capture_Based_Sky_Light_Color) == 0x0007B0, "Member 'AUltra_Dynamic_Sky_C::Capture_Based_Sky_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Recapture_Sky_light_Periodically) == 0x0007C0, "Member 'AUltra_Dynamic_Sky_C::Recapture_Sky_light_Periodically' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Light_Recapture_Period__Seconds_) == 0x0007C8, "Member 'AUltra_Dynamic_Sky_C::Sky_Light_Recapture_Period__Seconds_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lights_Update_Period) == 0x0007D0, "Member 'AUltra_Dynamic_Sky_C::Lights_Update_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise_Event_Time) == 0x0007D8, "Member 'AUltra_Dynamic_Sky_C::Sunrise_Event_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset_Event_Time) == 0x0007E0, "Member 'AUltra_Dynamic_Sky_C::Sunset_Event_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunset) == 0x0007E8, "Member 'AUltra_Dynamic_Sky_C::Sunset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sunrise) == 0x0007F8, "Member 'AUltra_Dynamic_Sky_C::Sunrise' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Color_Multiplier) == 0x000808, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Color_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Fog_Density_Curve) == 0x000818, "Member 'AUltra_Dynamic_Sky_C::Use_Fog_Density_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Density_Curve) == 0x000820, "Member 'AUltra_Dynamic_Sky_C::Fog_Density_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Horizon_Density_Multiplier) == 0x000828, "Member 'AUltra_Dynamic_Sky_C::Horizon_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Zenith_Density_Multiplier) == 0x000830, "Member 'AUltra_Dynamic_Sky_C::Zenith_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude_Gradient_Position) == 0x000838, "Member 'AUltra_Dynamic_Sky_C::Latitude_Gradient_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude_Gradient_Width) == 0x000840, "Member 'AUltra_Dynamic_Sky_C::Latitude_Gradient_Width' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Sun_Density_Multiplier) == 0x000848, "Member 'AUltra_Dynamic_Sky_C::Around_Sun_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Sun_Density_Exponent) == 0x000850, "Member 'AUltra_Dynamic_Sky_C::Around_Sun_Density_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Moon_Density_Multiplier) == 0x000858, "Member 'AUltra_Dynamic_Sky_C::Around_Moon_Density_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Around_Moon_Density_Exponent) == 0x000860, "Member 'AUltra_Dynamic_Sky_C::Around_Moon_Density_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Wisps_Texture) == 0x000868, "Member 'AUltra_Dynamic_Sky_C::Cloud_Wisps_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Noise_Type) == 0x000870, "Member 'AUltra_Dynamic_Sky_C::Cloud_Noise_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Noise_Texture) == 0x000878, "Member 'AUltra_Dynamic_Sky_C::Custom_Noise_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Shader_Intensity) == 0x000880, "Member 'AUltra_Dynamic_Sky_C::Sun_Shader_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Lighting_Intensity) == 0x000888, "Member 'AUltra_Dynamic_Sky_C::Directional_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shine_Variation) == 0x000890, "Member 'AUltra_Dynamic_Sky_C::Shine_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Radius_Curve) == 0x000898, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Radius_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Highlight_Intensity_Curve) == 0x0008A0, "Member 'AUltra_Dynamic_Sky_C::Sun_Highlight_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shine_Intensity_Curve) == 0x0008A8, "Member 'AUltra_Dynamic_Sky_C::Shine_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Opacity) == 0x0008B0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Opacity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Lights_Absent_Brightness) == 0x0008B8, "Member 'AUltra_Dynamic_Sky_C::Directional_Lights_Absent_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_MID_Complex) == 0x0008C0, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_MID_Complex' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Rendering_Mode) == 0x0008C8, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Rendering_Mode' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_Height_Scale) == 0x0008D0, "Member 'AUltra_Dynamic_Sky_C::Layer_Height_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Bottom_Altitude) == 0x0008D8, "Member 'AUltra_Dynamic_Sky_C::Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Clouds_Scale) == 0x0008E0, "Member 'AUltra_Dynamic_Sky_C::Base_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SubNoise_Scale) == 0x0008E8, "Member 'AUltra_Dynamic_Sky_C::SubNoise_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, High_Frequency_Noise_Amount) == 0x0008F0, "Member 'AUltra_Dynamic_Sky_C::High_Frequency_Noise_Amount' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extinction_Scale_Top) == 0x0008F8, "Member 'AUltra_Dynamic_Sky_C::Extinction_Scale_Top' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Extinction_Scale_Bottom) == 0x000900, "Member 'AUltra_Dynamic_Sky_C::Extinction_Scale_Bottom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shift_Curve) == 0x000908, "Member 'AUltra_Dynamic_Sky_C::Shift_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Minimum_Erosion) == 0x000910, "Member 'AUltra_Dynamic_Sky_C::Minimum_Erosion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, View_Sample_Count_Scale) == 0x000918, "Member 'AUltra_Dynamic_Sky_C::View_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shadow_Sample_Scale) == 0x000920, "Member 'AUltra_Dynamic_Sky_C::Shadow_Sample_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Shadow_Tracing_Distance) == 0x000928, "Member 'AUltra_Dynamic_Sky_C::Shadow_Tracing_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Reflection_Sample_Count_Scale) == 0x000930, "Member 'AUltra_Dynamic_Sky_C::Reflection_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Reflection_Shadow_Sample_Count_Scale) == 0x000938, "Member 'AUltra_Dynamic_Sky_C::Reflection_Shadow_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Noise_Type) == 0x000940, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Noise_Type' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Custom_Noise_Texture) == 0x000948, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Custom_Noise_Texture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Base_Clouds_Mip_Level) == 0x000950, "Member 'AUltra_Dynamic_Sky_C::Base_Clouds_Mip_Level' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Intensity) == 0x000958, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Multiscattering_Occlusion_Factor) == 0x000960, "Member 'AUltra_Dynamic_Sky_C::Multiscattering_Occlusion_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, SubNoise_Erosion) == 0x000968, "Member 'AUltra_Dynamic_Sky_C::SubNoise_Erosion' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Volumetric_Fog) == 0x000970, "Member 'AUltra_Dynamic_Sky_C::Use_Volumetric_Fog' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_MID_Simplified) == 0x000978, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_MID_Simplified' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Start_Distance_when_Clear) == 0x000980, "Member 'AUltra_Dynamic_Sky_C::Fog_Start_Distance_when_Clear' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Foggy) == 0x000988, "Member 'AUltra_Dynamic_Sky_C::Foggy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Start_Distance_Exponent) == 0x000990, "Member 'AUltra_Dynamic_Sky_C::Fog_Start_Distance_Exponent' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Randomize_Cloud_Formation_on_Run) == 0x000998, "Member 'AUltra_Dynamic_Sky_C::Randomize_Cloud_Formation_on_Run' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Macro_Variation) == 0x0009A0, "Member 'AUltra_Dynamic_Sky_C::Macro_Variation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Macro_Scale) == 0x0009A8, "Member 'AUltra_Dynamic_Sky_C::Macro_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Phase_G) == 0x0009B0, "Member 'AUltra_Dynamic_Sky_C::Phase_G' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Phase_G_2) == 0x0009B8, "Member 'AUltra_Dynamic_Sky_C::Phase_G_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, MultiScattering_Eccentricity) == 0x0009C0, "Member 'AUltra_Dynamic_Sky_C::MultiScattering_Eccentricity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distance_to_Sample_Max_Count) == 0x0009C8, "Member 'AUltra_Dynamic_Sky_C::Distance_to_Sample_Max_Count' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_Speed) == 0x0009D0, "Member 'AUltra_Dynamic_Sky_C::Time_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Internal_Time_of_Day) == 0x0009D8, "Member 'AUltra_Dynamic_Sky_C::Internal_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Weather_BP) == 0x0009E0, "Member 'AUltra_Dynamic_Sky_C::Weather_BP' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_Scale) == 0x0009E8, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Cloud_Color) == 0x0009F0, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Cloud_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Start_Distance) == 0x000A00, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Start_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Static_Clouds_MID) == 0x000A08, "Member 'AUltra_Dynamic_Sky_C::Static_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_1) == 0x000A10, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_1' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_2) == 0x000A20, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_2' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Color_3) == 0x000A30, "Member 'AUltra_Dynamic_Sky_C::Aurora_Color_3' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_MID) == 0x000A40, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Overcast_Night_Brightness) == 0x000A48, "Member 'AUltra_Dynamic_Sky_C::Overcast_Night_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Sky_Mode_Scalability_Map) == 0x000A50, "Member 'AUltra_Dynamic_Sky_C::Use_Sky_Mode_Scalability_Map' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Mode_ScalabilityMap) == 0x000A58, "Member 'AUltra_Dynamic_Sky_C::Sky_Mode_ScalabilityMap' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Skylight_Intensity_at_Night) == 0x000AA8, "Member 'AUltra_Dynamic_Sky_C::Scale_Skylight_Intensity_at_Night' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Skylight_Intensity_when_Cloudy) == 0x000AB0, "Member 'AUltra_Dynamic_Sky_C::Scale_Skylight_Intensity_when_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Horizon_Base_Color__Legacy_Color_Curve_) == 0x000AB8, "Member 'AUltra_Dynamic_Sky_C::Horizon_Base_Color__Legacy_Color_Curve_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Dark_Color__Legacy_Color_Curve_) == 0x000AC0, "Member 'AUltra_Dynamic_Sky_C::Cloud_Dark_Color__Legacy_Color_Curve_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloud_Light_Color__Legacy_Color_Curve_) == 0x000AC8, "Member 'AUltra_Dynamic_Sky_C::Cloud_Light_Color__Legacy_Color_Curve_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Intensity) == 0x000AD0, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Intensity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Color_Curve) == 0x000AD8, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Color_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Cloudy_Color__Legacy_Color_Curve_) == 0x000AE0, "Member 'AUltra_Dynamic_Sky_C::Sun_Cloudy_Color__Legacy_Color_Curve_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Zenith_Base_Color__Legacy_Color_Curve_) == 0x000AE8, "Member 'AUltra_Dynamic_Sky_C::Zenith_Base_Color__Legacy_Color_Curve_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Directional_Intensity_Curve) == 0x000AF0, "Member 'AUltra_Dynamic_Sky_C::Directional_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Lines) == 0x000AF8, "Member 'AUltra_Dynamic_Sky_C::Aurora_Lines' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Aurora_Intensity_Curve) == 0x000B00, "Member 'AUltra_Dynamic_Sky_C::Aurora_Intensity_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Inside_Clouds_Fog_MID) == 0x000B08, "Member 'AUltra_Dynamic_Sky_C::Inside_Clouds_Fog_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tracing_Max_Distance) == 0x000B10, "Member 'AUltra_Dynamic_Sky_C::Tracing_Max_Distance' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Fog_Inside_Clouds) == 0x000B18, "Member 'AUltra_Dynamic_Sky_C::Enable_Fog_Inside_Clouds' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Sample_Count_Scale) == 0x000B20, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Sample_Count_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Layer_Height) == 0x000B28, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Layer_Height' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Aurora_Bottom_Altitude) == 0x000B30, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Aurora_Bottom_Altitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clear_Height_Fog_Falloff) == 0x000B38, "Member 'AUltra_Dynamic_Sky_C::Clear_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Cloudy_Height_Fog_Falloff) == 0x000B40, "Member 'AUltra_Dynamic_Sky_C::Cloudy_Height_Fog_Falloff' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Tint_Color_Value_Curve) == 0x000B48, "Member 'AUltra_Dynamic_Sky_C::Tint_Color_Value_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Two_Layers) == 0x000B50, "Member 'AUltra_Dynamic_Sky_C::Two_Layers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Density_Scale) == 0x000B58, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Density_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Extinction_Scale) == 0x000B60, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Extinction_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Cloud_Scale) == 0x000B68, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Cloud_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Layer_2_Mip_Offset) == 0x000B78, "Member 'AUltra_Dynamic_Sky_C::Layer_2_Mip_Offset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Distance_Between_Layers) == 0x000B80, "Member 'AUltra_Dynamic_Sky_C::Distance_Between_Layers' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, LowQuality_VolumeTexture) == 0x000B88, "Member 'AUltra_Dynamic_Sky_C::LowQuality_VolumeTexture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, HighQuality_VolumeTexture) == 0x000B90, "Member 'AUltra_Dynamic_Sky_C::HighQuality_VolumeTexture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, EpicQuality_VolumeTexture) == 0x000B98, "Member 'AUltra_Dynamic_Sky_C::EpicQuality_VolumeTexture' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Static_Moon_Rotation) == 0x000BA0, "Member 'AUltra_Dynamic_Sky_C::Use_Static_Moon_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Static_Moon_Rotation) == 0x000BA8, "Member 'AUltra_Dynamic_Sky_C::Static_Moon_Rotation' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Color_Strength_Day) == 0x000BC0, "Member 'AUltra_Dynamic_Sky_C::Fog_Color_Strength_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Sun_Light_Shaft_Bloom) == 0x000BC8, "Member 'AUltra_Dynamic_Sky_C::Enable_Sun_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Max_Brightness) == 0x000BD0, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Bloom_Threshold_Curve) == 0x000BD8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Bloom_Threshold_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Bloom_Scale_Curve) == 0x000BE0, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Bloom_Scale_Curve' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Light_Shaft_Tint_Color) == 0x000BE8, "Member 'AUltra_Dynamic_Sky_C::Sun_Light_Shaft_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Enable_Moon_Light_Shaft_Bloom) == 0x000BEC, "Member 'AUltra_Dynamic_Sky_C::Enable_Moon_Light_Shaft_Bloom' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Max_Brightness) == 0x000BF0, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Max_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Bloom_Threshold) == 0x000BF8, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Bloom_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Bloom_Scale) == 0x000C00, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Bloom_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Light_Shaft_Tint_Color) == 0x000C08, "Member 'AUltra_Dynamic_Sky_C::Moon_Light_Shaft_Tint_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Cubemap_Sky_Light_Color) == 0x000C0C, "Member 'AUltra_Dynamic_Sky_C::Custom_Cubemap_Sky_Light_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Factor_Absent_Directional_Lights_Brightness) == 0x000C1C, "Member 'AUltra_Dynamic_Sky_C::Factor_Absent_Directional_Lights_Brightness' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture_Uses_Time_Slicing) == 0x000C1D, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture_Uses_Time_Slicing' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Mobile_Overrides) == 0x000C1E, "Member 'AUltra_Dynamic_Sky_C::Use_Mobile_Overrides' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Clouds_Replacement) == 0x000C1F, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Clouds_Replacement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Real_Time_Capture_Sky_Light_Replacement) == 0x000C20, "Member 'AUltra_Dynamic_Sky_C::Real_Time_Capture_Sky_Light_Replacement' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Adjust_For_Mobile_Renderer) == 0x000C21, "Member 'AUltra_Dynamic_Sky_C::Adjust_For_Mobile_Renderer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Mobile_Platforms) == 0x000C28, "Member 'AUltra_Dynamic_Sky_C::Mobile_Platforms' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Mobile) == 0x000C38, "Member 'AUltra_Dynamic_Sky_C::Mobile' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Sun) == 0x000C39, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Sun' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Moon) == 0x000C3A, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Moon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulate_Real_Stars) == 0x000C3B, "Member 'AUltra_Dynamic_Sky_C::Simulate_Real_Stars' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Latitude) == 0x000C40, "Member 'AUltra_Dynamic_Sky_C::Latitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Longitude) == 0x000C48, "Member 'AUltra_Dynamic_Sky_C::Longitude' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_Zone) == 0x000C50, "Member 'AUltra_Dynamic_Sky_C::Time_Zone' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Year) == 0x000C58, "Member 'AUltra_Dynamic_Sky_C::Year' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Month) == 0x000C5C, "Member 'AUltra_Dynamic_Sky_C::Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Day) == 0x000C60, "Member 'AUltra_Dynamic_Sky_C::Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, North_Yaw) == 0x000C68, "Member 'AUltra_Dynamic_Sky_C::North_Yaw' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simulation_Speed) == 0x000C70, "Member 'AUltra_Dynamic_Sky_C::Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, True_Real_World_Time) == 0x000C78, "Member 'AUltra_Dynamic_Sky_C::True_Real_World_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Apply_Daylight_Savings_Time) == 0x000C79, "Member 'AUltra_Dynamic_Sky_C::Apply_Daylight_Savings_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Date_Controls_UDW_Season) == 0x000C7A, "Member 'AUltra_Dynamic_Sky_C::Date_Controls_UDW_Season' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Start_Month) == 0x000C7C, "Member 'AUltra_Dynamic_Sky_C::DST_Start_Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Start_Day) == 0x000C80, "Member 'AUltra_Dynamic_Sky_C::DST_Start_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_End_Month) == 0x000C84, "Member 'AUltra_Dynamic_Sky_C::DST_End_Month' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_End_Day) == 0x000C88, "Member 'AUltra_Dynamic_Sky_C::DST_End_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, DST_Change_Hour) == 0x000C8C, "Member 'AUltra_Dynamic_Sky_C::DST_Change_Hour' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Color__Legacy_Color_Curve_) == 0x000C90, "Member 'AUltra_Dynamic_Sky_C::Sun_Color__Legacy_Color_Curve_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Disk_Color) == 0x000C98, "Member 'AUltra_Dynamic_Sky_C::Sun_Disk_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Months) == 0x000CA8, "Member 'AUltra_Dynamic_Sky_C::Months' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Months__Leap_Year_) == 0x000CB8, "Member 'AUltra_Dynamic_Sky_C::Months__Leap_Year_' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Stellar_Calibration) == 0x000CC8, "Member 'AUltra_Dynamic_Sky_C::Stellar_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lunar_Orbit_Calibration) == 0x000CD0, "Member 'AUltra_Dynamic_Sky_C::Lunar_Orbit_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Lunar_Inclination_Calibration) == 0x000CD8, "Member 'AUltra_Dynamic_Sky_C::Lunar_Inclination_Calibration' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Runtime) == 0x000CE0, "Member 'AUltra_Dynamic_Sky_C::Runtime' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Daylight_Savings_Time) == 0x000CE1, "Member 'AUltra_Dynamic_Sky_C::Daylight_Savings_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Total_Days_Elapsed) == 0x000CE4, "Member 'AUltra_Dynamic_Sky_C::Total_Days_Elapsed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Move_with_Time_of_Day) == 0x000CE8, "Member 'AUltra_Dynamic_Sky_C::Clouds_Move_with_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Movement_Multiplier) == 0x000CF0, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Movement_Multiplier' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Time) == 0x000CF8, "Member 'AUltra_Dynamic_Sky_C::Clouds_Time' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_MID_Parent_Instances) == 0x000D00, "Member 'AUltra_Dynamic_Sky_C::Sky_MID_Parent_Instances' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Fog_Color_Strength_Night) == 0x000D50, "Member 'AUltra_Dynamic_Sky_C::Fog_Color_Strength_Night' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Use_Custom_Light_Function_Material) == 0x000D58, "Member 'AUltra_Dynamic_Sky_C::Use_Custom_Light_Function_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Custom_Light_Function_Material) == 0x000D60, "Member 'AUltra_Dynamic_Sky_C::Custom_Light_Function_Material' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Force_Light_Functions_On) == 0x000D68, "Member 'AUltra_Dynamic_Sky_C::Force_Light_Functions_On' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Time_of_Day_Replication_Period) == 0x000D70, "Member 'AUltra_Dynamic_Sky_C::Time_of_Day_Replication_Period' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Time_of_Day) == 0x000D78, "Member 'AUltra_Dynamic_Sky_C::Replicated_Time_of_Day' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Moon_Phase) == 0x000D80, "Member 'AUltra_Dynamic_Sky_C::Replicated_Moon_Phase' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Sun_Radius_as_it_Nears_Horizon) == 0x000D88, "Member 'AUltra_Dynamic_Sky_C::Scale_Sun_Radius_as_it_Nears_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Yaw) == 0x000D90, "Member 'AUltra_Dynamic_Sky_C::Sun_Yaw' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Scale_Moon_Radius_as_it_Nears_Horizon) == 0x000D98, "Member 'AUltra_Dynamic_Sky_C::Scale_Moon_Radius_as_it_Nears_Horizon' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Height_Fog_Gets_Colors_from_Sky_Atmosphere) == 0x000DA0, "Member 'AUltra_Dynamic_Sky_C::Height_Fog_Gets_Colors_from_Sky_Atmosphere' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sky_Atmosphere_Influence) == 0x000DA8, "Member 'AUltra_Dynamic_Sky_C::Sky_Atmosphere_Influence' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Sun_Z_Vector) == 0x000DB0, "Member 'AUltra_Dynamic_Sky_C::Sun_Z_Vector' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Ambient_Fog_Color) == 0x000DB8, "Member 'AUltra_Dynamic_Sky_C::Ambient_Fog_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Moon_Specular_Scale) == 0x000DC8, "Member 'AUltra_Dynamic_Sky_C::Moon_Specular_Scale' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Day_Length) == 0x000DD0, "Member 'AUltra_Dynamic_Sky_C::Replicated_Day_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Night_Length) == 0x000DD8, "Member 'AUltra_Dynamic_Sky_C::Replicated_Night_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Time_Speed) == 0x000DE0, "Member 'AUltra_Dynamic_Sky_C::Replicated_Time_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Replicated_Simulation_Speed) == 0x000DE8, "Member 'AUltra_Dynamic_Sky_C::Replicated_Simulation_Speed' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Change_to_Simplified_Material_when_Overcast) == 0x000DF0, "Member 'AUltra_Dynamic_Sky_C::Change_to_Simplified_Material_when_Overcast' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simplified_Material_Cloud_Coverage_Threshold) == 0x000DF8, "Member 'AUltra_Dynamic_Sky_C::Simplified_Material_Cloud_Coverage_Threshold' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Simplified_Material_Fade_Length) == 0x000E00, "Member 'AUltra_Dynamic_Sky_C::Simplified_Material_Fade_Length' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Top_Bottom_Distribution) == 0x000E08, "Member 'AUltra_Dynamic_Sky_C::Top_Bottom_Distribution' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Current_Volumetric_Clouds_MID) == 0x000E10, "Member 'AUltra_Dynamic_Sky_C::Current_Volumetric_Clouds_MID' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Dim_Directional_Lights_with_Cloud_Coverage) == 0x000E14, "Member 'AUltra_Dynamic_Sky_C::Dim_Directional_Lights_with_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Clouds_Position) == 0x000E18, "Member 'AUltra_Dynamic_Sky_C::Clouds_Position' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Standard_Base_Clouds_Size) == 0x000E30, "Member 'AUltra_Dynamic_Sky_C::Standard_Base_Clouds_Size' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Last_Clouds_Time_of_Day_Factor) == 0x000E38, "Member 'AUltra_Dynamic_Sky_C::Last_Clouds_Time_of_Day_Factor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Starting_Cloud_Texture_Velocity) == 0x000E40, "Member 'AUltra_Dynamic_Sky_C::Starting_Cloud_Texture_Velocity' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Control_Sky_Atmosphere_Settings) == 0x000E58, "Member 'AUltra_Dynamic_Sky_C::Control_Sky_Atmosphere_Settings' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Rayleigh_Scattering_Color) == 0x000E5C, "Member 'AUltra_Dynamic_Sky_C::Rayleigh_Scattering_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Desaturate_Rayleigh_Scattering_when_Cloudy) == 0x000E70, "Member 'AUltra_Dynamic_Sky_C::Desaturate_Rayleigh_Scattering_when_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Brighten_Rayleigh_Scattering_When_Cloudy) == 0x000E78, "Member 'AUltra_Dynamic_Sky_C::Brighten_Rayleigh_Scattering_When_Cloudy' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Volumetric_Fog_Follow_Player) == 0x000E80, "Member 'AUltra_Dynamic_Sky_C::Volumetric_Fog_Follow_Player' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, HouseBoxOffset) == 0x000E88, "Member 'AUltra_Dynamic_Sky_C::HouseBoxOffset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TargetSkylightOffset) == 0x000E90, "Member 'AUltra_Dynamic_Sky_C::TargetSkylightOffset' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, InterpTimer) == 0x000E98, "Member 'AUltra_Dynamic_Sky_C::InterpTimer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, ScatteringTimer) == 0x000EA0, "Member 'AUltra_Dynamic_Sky_C::ScatteringTimer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TargetVolumetricScattering) == 0x000EA8, "Member 'AUltra_Dynamic_Sky_C::TargetVolumetricScattering' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, Target_Sun_Color) == 0x000EB0, "Member 'AUltra_Dynamic_Sky_C::Target_Sun_Color' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, ChangeSunlightColorTimer) == 0x000EC0, "Member 'AUltra_Dynamic_Sky_C::ChangeSunlightColorTimer' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, CustomTintSkyColor) == 0x000EC8, "Member 'AUltra_Dynamic_Sky_C::CustomTintSkyColor' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, CustomTintColorAlpha) == 0x000ED0, "Member 'AUltra_Dynamic_Sky_C::CustomTintColorAlpha' has a wrong offset!");
static_assert(offsetof(AUltra_Dynamic_Sky_C, TargetTintColorAlpha) == 0x000ED8, "Member 'AUltra_Dynamic_Sky_C::TargetTintColorAlpha' has a wrong offset!");

}

