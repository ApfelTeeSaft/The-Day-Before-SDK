#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: I_Interactable

#include "Basic.hpp"

#include "E_ActorType_structs.hpp"
#include "E_InteractType_structs.hpp"


namespace SDK::Params
{

// Function I_Interactable.I_Interactable_C.GetActorType
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_GetActorType final
{
public:
	E_ActorType                                   ActorType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_GetActorType) == 0x000001, "Wrong alignment on I_Interactable_C_GetActorType");
static_assert(sizeof(I_Interactable_C_GetActorType) == 0x000001, "Wrong size on I_Interactable_C_GetActorType");
static_assert(offsetof(I_Interactable_C_GetActorType, ActorType) == 0x000000, "Member 'I_Interactable_C_GetActorType::ActorType' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.IsLocked?
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_IsLocked_ final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_IsLocked_) == 0x000001, "Wrong alignment on I_Interactable_C_IsLocked_");
static_assert(sizeof(I_Interactable_C_IsLocked_) == 0x000001, "Wrong size on I_Interactable_C_IsLocked_");
static_assert(offsetof(I_Interactable_C_IsLocked_, Result) == 0x000000, "Member 'I_Interactable_C_IsLocked_::Result' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnBeginInteract
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnBeginInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnBeginInteract) == 0x000008, "Wrong alignment on I_Interactable_C_OnBeginInteract");
static_assert(sizeof(I_Interactable_C_OnBeginInteract) == 0x000008, "Wrong size on I_Interactable_C_OnBeginInteract");
static_assert(offsetof(I_Interactable_C_OnBeginInteract, Player) == 0x000000, "Member 'I_Interactable_C_OnBeginInteract::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnFocused
// 0x0028 (0x0028 - 0x0000)
struct I_Interactable_C_OnFocused final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HighlightActor;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        HighlightActorComponent;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_InteractType                                InteractType;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LateTime;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnFocused) == 0x000008, "Wrong alignment on I_Interactable_C_OnFocused");
static_assert(sizeof(I_Interactable_C_OnFocused) == 0x000028, "Wrong size on I_Interactable_C_OnFocused");
static_assert(offsetof(I_Interactable_C_OnFocused, Player) == 0x000000, "Member 'I_Interactable_C_OnFocused::Player' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_OnFocused, HighlightActor) == 0x000008, "Member 'I_Interactable_C_OnFocused::HighlightActor' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_OnFocused, HighlightActorComponent) == 0x000010, "Member 'I_Interactable_C_OnFocused::HighlightActorComponent' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_OnFocused, InteractType) == 0x000018, "Member 'I_Interactable_C_OnFocused::InteractType' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_OnFocused, LateTime) == 0x000020, "Member 'I_Interactable_C_OnFocused::LateTime' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnInteract) == 0x000008, "Wrong alignment on I_Interactable_C_OnInteract");
static_assert(sizeof(I_Interactable_C_OnInteract) == 0x000008, "Wrong size on I_Interactable_C_OnInteract");
static_assert(offsetof(I_Interactable_C_OnInteract, Player) == 0x000000, "Member 'I_Interactable_C_OnInteract::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnInteract2
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnInteract2 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnInteract2) == 0x000008, "Wrong alignment on I_Interactable_C_OnInteract2");
static_assert(sizeof(I_Interactable_C_OnInteract2) == 0x000008, "Wrong size on I_Interactable_C_OnInteract2");
static_assert(offsetof(I_Interactable_C_OnInteract2, Player) == 0x000000, "Member 'I_Interactable_C_OnInteract2::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnInteract3
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnInteract3 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnInteract3) == 0x000008, "Wrong alignment on I_Interactable_C_OnInteract3");
static_assert(sizeof(I_Interactable_C_OnInteract3) == 0x000008, "Wrong size on I_Interactable_C_OnInteract3");
static_assert(offsetof(I_Interactable_C_OnInteract3, Player) == 0x000000, "Member 'I_Interactable_C_OnInteract3::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnInteractVehicle
// 0x0010 (0x0010 - 0x0000)
struct I_Interactable_C_OnInteractVehicle final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnInteractVehicle) == 0x000008, "Wrong alignment on I_Interactable_C_OnInteractVehicle");
static_assert(sizeof(I_Interactable_C_OnInteractVehicle) == 0x000010, "Wrong size on I_Interactable_C_OnInteractVehicle");
static_assert(offsetof(I_Interactable_C_OnInteractVehicle, Player) == 0x000000, "Member 'I_Interactable_C_OnInteractVehicle::Player' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_OnInteractVehicle, SitIndex) == 0x000008, "Member 'I_Interactable_C_OnInteractVehicle::SitIndex' has a wrong offset!");
static_assert(offsetof(I_Interactable_C_OnInteractVehicle, SkipAnimation) == 0x00000C, "Member 'I_Interactable_C_OnInteractVehicle::SkipAnimation' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnLocalInteract
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnLocalInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnLocalInteract) == 0x000008, "Wrong alignment on I_Interactable_C_OnLocalInteract");
static_assert(sizeof(I_Interactable_C_OnLocalInteract) == 0x000008, "Wrong size on I_Interactable_C_OnLocalInteract");
static_assert(offsetof(I_Interactable_C_OnLocalInteract, Player) == 0x000000, "Member 'I_Interactable_C_OnLocalInteract::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnLostFocus
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnLostFocus final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnLostFocus) == 0x000008, "Wrong alignment on I_Interactable_C_OnLostFocus");
static_assert(sizeof(I_Interactable_C_OnLostFocus) == 0x000008, "Wrong size on I_Interactable_C_OnLostFocus");
static_assert(offsetof(I_Interactable_C_OnLostFocus, Player) == 0x000000, "Member 'I_Interactable_C_OnLostFocus::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnSeen
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnSeen final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnSeen) == 0x000008, "Wrong alignment on I_Interactable_C_OnSeen");
static_assert(sizeof(I_Interactable_C_OnSeen) == 0x000008, "Wrong size on I_Interactable_C_OnSeen");
static_assert(offsetof(I_Interactable_C_OnSeen, Player) == 0x000000, "Member 'I_Interactable_C_OnSeen::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.OnStopInteract
// 0x0008 (0x0008 - 0x0000)
struct I_Interactable_C_OnStopInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_OnStopInteract) == 0x000008, "Wrong alignment on I_Interactable_C_OnStopInteract");
static_assert(sizeof(I_Interactable_C_OnStopInteract) == 0x000008, "Wrong size on I_Interactable_C_OnStopInteract");
static_assert(offsetof(I_Interactable_C_OnStopInteract, Player) == 0x000000, "Member 'I_Interactable_C_OnStopInteract::Player' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.Set3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_Set3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_Set3DWidgetVisibility) == 0x000001, "Wrong alignment on I_Interactable_C_Set3DWidgetVisibility");
static_assert(sizeof(I_Interactable_C_Set3DWidgetVisibility) == 0x000001, "Wrong size on I_Interactable_C_Set3DWidgetVisibility");
static_assert(offsetof(I_Interactable_C_Set3DWidgetVisibility, Visible) == 0x000000, "Member 'I_Interactable_C_Set3DWidgetVisibility::Visible' has a wrong offset!");

// Function I_Interactable.I_Interactable_C.SetTutorial3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct I_Interactable_C_SetTutorial3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(I_Interactable_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong alignment on I_Interactable_C_SetTutorial3DWidgetVisibility");
static_assert(sizeof(I_Interactable_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong size on I_Interactable_C_SetTutorial3DWidgetVisibility");
static_assert(offsetof(I_Interactable_C_SetTutorial3DWidgetVisibility, Visible) == 0x000000, "Member 'I_Interactable_C_SetTutorial3DWidgetVisibility::Visible' has a wrong offset!");

}

