#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WalkableArea

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WalkableArea.WalkableArea_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function WalkableArea.WalkableArea_C.BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'WalkableArea_C_BndEvt__Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function WalkableArea.WalkableArea_C.ExecuteUbergraph_WalkableArea
// 0x0190 (0x0190 - 0x0000)
struct WalkableArea_C_ExecuteUbergraph_WalkableArea final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0038(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0130(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player_1;            // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue;                  // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ActorHasTag_ReturnValue_1;                // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B[0x1];                                      // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_Item;                           // 0x015C(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_Target;                         // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x0170(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x018D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WalkableArea_C_ExecuteUbergraph_WalkableArea) == 0x000008, "Wrong alignment on WalkableArea_C_ExecuteUbergraph_WalkableArea");
static_assert(sizeof(WalkableArea_C_ExecuteUbergraph_WalkableArea) == 0x000190, "Wrong size on WalkableArea_C_ExecuteUbergraph_WalkableArea");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, EntryPoint) == 0x000000, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::EntryPoint' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, Temp_bool_True_if_break_was_hit_Variable) == 0x000004, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, Temp_int_Array_Index_Variable) == 0x000008, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000018, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000020, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000028, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000030, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_bFromSweep) == 0x000034, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_SweepResult) == 0x000038, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000120, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OtherActor) == 0x000128, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OtherComp) == 0x000130, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000138, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_DynamicCast_AsSurvival_Player) == 0x000140, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_DynamicCast_AsSurvival_Player_1) == 0x000150, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_DynamicCast_AsSurvival_Player_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_ActorHasTag_ReturnValue) == 0x000159, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_ActorHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_ActorHasTag_ReturnValue_1) == 0x00015A, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_ActorHasTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_CustomEvent_Item) == 0x00015C, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_CustomEvent_Item' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, K2Node_CustomEvent_Target) == 0x000168, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, Temp_name_Variable) == 0x000170, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_Array_Get_Item) == 0x000178, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_Array_Add_ReturnValue) == 0x000180, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000184, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_Array_Length_ReturnValue) == 0x000188, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_Less_IntInt_ReturnValue) == 0x00018C, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_ExecuteUbergraph_WalkableArea, CallFunc_BooleanAND_ReturnValue) == 0x00018D, "Member 'WalkableArea_C_ExecuteUbergraph_WalkableArea::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WalkableArea.WalkableArea_C.RemoveOneIndex
// 0x0010 (0x0010 - 0x0000)
struct WalkableArea_C_RemoveOneIndex final
{
public:
	class FName                                   Item;                                              // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WalkableArea_C_RemoveOneIndex) == 0x000008, "Wrong alignment on WalkableArea_C_RemoveOneIndex");
static_assert(sizeof(WalkableArea_C_RemoveOneIndex) == 0x000010, "Wrong size on WalkableArea_C_RemoveOneIndex");
static_assert(offsetof(WalkableArea_C_RemoveOneIndex, Item) == 0x000000, "Member 'WalkableArea_C_RemoveOneIndex::Item' has a wrong offset!");
static_assert(offsetof(WalkableArea_C_RemoveOneIndex, Target) == 0x000008, "Member 'WalkableArea_C_RemoveOneIndex::Target' has a wrong offset!");

}

