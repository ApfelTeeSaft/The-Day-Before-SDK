#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestFramework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum QuestFramework.EQuestResult
// NumValues: 0x0005
enum class EQuestResult : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Completed                                = 2,
	Failed                                   = 3,
	EQuestResult_MAX                         = 4,
};

// Enum QuestFramework.EQuestConditionCompareMethod
// NumValues: 0x0003
enum class EQuestConditionCompareMethod : uint8
{
	All                                      = 0,
	Any                                      = 1,
	EQuestConditionCompareMethod_MAX         = 2,
};

// Enum QuestFramework.EQuestComparisonOperator
// NumValues: 0x0007
enum class EQuestComparisonOperator : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	Less                                     = 2,
	Greater                                  = 3,
	LessEqual                                = 4,
	GreaterEqual                             = 5,
	EQuestComparisonOperator_MAX             = 6,
};

// Enum QuestFramework.EQuestLogicalOperator
// NumValues: 0x0003
enum class EQuestLogicalOperator : uint8
{
	And                                      = 0,
	Or                                       = 1,
	EQuestLogicalOperator_MAX                = 2,
};

// Enum QuestFramework.EQuestNetworkAuthority
// NumValues: 0x0004
enum class EQuestNetworkAuthority : uint8
{
	None                                     = 0,
	HasAuthority                             = 1,
	Remote                                   = 2,
	EQuestNetworkAuthority_MAX               = 3,
};

// Enum QuestFramework.EQuestNetworkExecType
// NumValues: 0x0004
enum class EQuestNetworkExecType : uint8
{
	OnlyServer                               = 0,
	OnlyClient                               = 1,
	Both                                     = 2,
	EQuestNetworkExecType_MAX                = 3,
};

// Enum QuestFramework.EQuestVariableType
// NumValues: 0x0004
enum class EQuestVariableType : uint8
{
	Integer                                  = 0,
	Float                                    = 1,
	Bool                                     = 2,
	EQuestVariableType_MAX                   = 3,
};

// Enum QuestFramework.EQuestVariableComparisonType
// NumValues: 0x0003
enum class EQuestVariableComparisonType : uint8
{
	Constant                                 = 0,
	OtherVariable                            = 1,
	EQuestVariableComparisonType_MAX         = 2,
};

// Enum QuestFramework.EQuestValueClamp
// NumValues: 0x0005
enum class EQuestValueClamp : uint8
{
	NotClamped                               = 0,
	ClampMin                                 = 1,
	ClampMax                                 = 2,
	ClampMinAndMax                           = 3,
	EQuestValueClamp_MAX                     = 4,
};

// Enum QuestFramework.EQuestObjectiveSignificancy
// NumValues: 0x0007
enum class EQuestObjectiveSignificancy : uint8
{
	Regular                                  = 0,
	Optional                                 = 1,
	ForceComplete                            = 2,
	ForceFailure                             = 3,
	ForceCompleteAndFailure                  = 4,
	RequiredToComplete                       = 5,
	EQuestObjectiveSignificancy_MAX          = 6,
};

// Enum QuestFramework.EQuestTextArgType
// NumValues: 0x0003
enum class EQuestTextArgType : uint8
{
	QuestVariable                            = 0,
	Custom                                   = 1,
	EQuestTextArgType_MAX                    = 2,
};

// ScriptStruct QuestFramework.QuestAssetLibrary
// 0x0020 (0x0020 - 0x0000)
struct FQuestAssetLibrary final
{
public:
	TArray<class FString>                         Paths;                                             // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UObjectLibrary*                         QuestAssetObjectLibrary;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitialized;                                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoaded;                                           // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestAssetLibrary) == 0x000008, "Wrong alignment on FQuestAssetLibrary");
static_assert(sizeof(FQuestAssetLibrary) == 0x000020, "Wrong size on FQuestAssetLibrary");
static_assert(offsetof(FQuestAssetLibrary, Paths) == 0x000000, "Member 'FQuestAssetLibrary::Paths' has a wrong offset!");
static_assert(offsetof(FQuestAssetLibrary, QuestAssetObjectLibrary) == 0x000010, "Member 'FQuestAssetLibrary::QuestAssetObjectLibrary' has a wrong offset!");
static_assert(offsetof(FQuestAssetLibrary, bInitialized) == 0x000018, "Member 'FQuestAssetLibrary::bInitialized' has a wrong offset!");
static_assert(offsetof(FQuestAssetLibrary, bLoaded) == 0x000019, "Member 'FQuestAssetLibrary::bLoaded' has a wrong offset!");

// ScriptStruct QuestFramework.QuestEventPayload
// 0x0020 (0x0020 - 0x0000)
struct FQuestEventPayload final
{
public:
	int32                                         IntegerParameter;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatParameter;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBooleanParameter;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UObject>                    ClassParameter;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectParameter;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestEventPayload) == 0x000008, "Wrong alignment on FQuestEventPayload");
static_assert(sizeof(FQuestEventPayload) == 0x000020, "Wrong size on FQuestEventPayload");
static_assert(offsetof(FQuestEventPayload, IntegerParameter) == 0x000000, "Member 'FQuestEventPayload::IntegerParameter' has a wrong offset!");
static_assert(offsetof(FQuestEventPayload, FloatParameter) == 0x000004, "Member 'FQuestEventPayload::FloatParameter' has a wrong offset!");
static_assert(offsetof(FQuestEventPayload, bBooleanParameter) == 0x000008, "Member 'FQuestEventPayload::bBooleanParameter' has a wrong offset!");
static_assert(offsetof(FQuestEventPayload, ClassParameter) == 0x000010, "Member 'FQuestEventPayload::ClassParameter' has a wrong offset!");
static_assert(offsetof(FQuestEventPayload, ObjectParameter) == 0x000018, "Member 'FQuestEventPayload::ObjectParameter' has a wrong offset!");

// ScriptStruct QuestFramework.QuestConditions
// 0x0018 (0x0018 - 0x0000)
struct FQuestConditions final
{
public:
	TArray<class UQuestCondition*>                Conditions;                                        // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EQuestConditionCompareMethod                  ComparisonMethod;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestConditions) == 0x000008, "Wrong alignment on FQuestConditions");
static_assert(sizeof(FQuestConditions) == 0x000018, "Wrong size on FQuestConditions");
static_assert(offsetof(FQuestConditions, Conditions) == 0x000000, "Member 'FQuestConditions::Conditions' has a wrong offset!");
static_assert(offsetof(FQuestConditions, ComparisonMethod) == 0x000010, "Member 'FQuestConditions::ComparisonMethod' has a wrong offset!");

// ScriptStruct QuestFramework.QuestContextMessageListener
// 0x0010 (0x0010 - 0x0000)
struct FQuestContextMessageListener final
{
public:
	class UQuestContext*                          Context;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Listener;                                          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestContextMessageListener) == 0x000008, "Wrong alignment on FQuestContextMessageListener");
static_assert(sizeof(FQuestContextMessageListener) == 0x000010, "Wrong size on FQuestContextMessageListener");
static_assert(offsetof(FQuestContextMessageListener, Context) == 0x000000, "Member 'FQuestContextMessageListener::Context' has a wrong offset!");
static_assert(offsetof(FQuestContextMessageListener, Listener) == 0x000008, "Member 'FQuestContextMessageListener::Listener' has a wrong offset!");

// ScriptStruct QuestFramework.QuestMemoryBlock
// 0x08F8 (0x08F8 - 0x0000)
struct FQuestMemoryBlock final
{
public:
	TMap<class FName, int32>                      IntegerVariables;                                  // 0x0000(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, float>                      FloatVariables;                                    // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, bool>                       BoolVariables;                                     // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x808];                                     // 0x00F0(0x0808)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestMemoryBlock) == 0x000008, "Wrong alignment on FQuestMemoryBlock");
static_assert(sizeof(FQuestMemoryBlock) == 0x0008F8, "Wrong size on FQuestMemoryBlock");
static_assert(offsetof(FQuestMemoryBlock, IntegerVariables) == 0x000000, "Member 'FQuestMemoryBlock::IntegerVariables' has a wrong offset!");
static_assert(offsetof(FQuestMemoryBlock, FloatVariables) == 0x000050, "Member 'FQuestMemoryBlock::FloatVariables' has a wrong offset!");
static_assert(offsetof(FQuestMemoryBlock, BoolVariables) == 0x0000A0, "Member 'FQuestMemoryBlock::BoolVariables' has a wrong offset!");

// ScriptStruct QuestFramework.QuestRepVar_Int
// 0x000C (0x000C - 0x0000)
struct FQuestRepVar_Int final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestRepVar_Int) == 0x000004, "Wrong alignment on FQuestRepVar_Int");
static_assert(sizeof(FQuestRepVar_Int) == 0x00000C, "Wrong size on FQuestRepVar_Int");
static_assert(offsetof(FQuestRepVar_Int, Name) == 0x000000, "Member 'FQuestRepVar_Int::Name' has a wrong offset!");
static_assert(offsetof(FQuestRepVar_Int, Value) == 0x000008, "Member 'FQuestRepVar_Int::Value' has a wrong offset!");

// ScriptStruct QuestFramework.QuestRepVar_Float
// 0x000C (0x000C - 0x0000)
struct FQuestRepVar_Float final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestRepVar_Float) == 0x000004, "Wrong alignment on FQuestRepVar_Float");
static_assert(sizeof(FQuestRepVar_Float) == 0x00000C, "Wrong size on FQuestRepVar_Float");
static_assert(offsetof(FQuestRepVar_Float, Name) == 0x000000, "Member 'FQuestRepVar_Float::Name' has a wrong offset!");
static_assert(offsetof(FQuestRepVar_Float, Value) == 0x000008, "Member 'FQuestRepVar_Float::Value' has a wrong offset!");

// ScriptStruct QuestFramework.QuestRepVar_Bool
// 0x000C (0x000C - 0x0000)
struct FQuestRepVar_Bool final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestRepVar_Bool) == 0x000004, "Wrong alignment on FQuestRepVar_Bool");
static_assert(sizeof(FQuestRepVar_Bool) == 0x00000C, "Wrong size on FQuestRepVar_Bool");
static_assert(offsetof(FQuestRepVar_Bool, Name) == 0x000000, "Member 'FQuestRepVar_Bool::Name' has a wrong offset!");
static_assert(offsetof(FQuestRepVar_Bool, Value) == 0x000008, "Member 'FQuestRepVar_Bool::Value' has a wrong offset!");

// ScriptStruct QuestFramework.QuestMemoryBlockReplicator
// 0x0120 (0x0120 - 0x0000)
struct FQuestMemoryBlockReplicator final
{
public:
	TArray<struct FQuestRepVar_Int>               Integers;                                          // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FQuestRepVar_Float>             Floats;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FQuestRepVar_Bool>              Bools;                                             // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30[0xF0];                                      // 0x0030(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestMemoryBlockReplicator) == 0x000008, "Wrong alignment on FQuestMemoryBlockReplicator");
static_assert(sizeof(FQuestMemoryBlockReplicator) == 0x000120, "Wrong size on FQuestMemoryBlockReplicator");
static_assert(offsetof(FQuestMemoryBlockReplicator, Integers) == 0x000000, "Member 'FQuestMemoryBlockReplicator::Integers' has a wrong offset!");
static_assert(offsetof(FQuestMemoryBlockReplicator, Floats) == 0x000010, "Member 'FQuestMemoryBlockReplicator::Floats' has a wrong offset!");
static_assert(offsetof(FQuestMemoryBlockReplicator, Bools) == 0x000020, "Member 'FQuestMemoryBlockReplicator::Bools' has a wrong offset!");

// ScriptStruct QuestFramework.QuestVariable
// 0x000C (0x000C - 0x0000)
struct FQuestVariable final
{
public:
	EQuestVariableType                            Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Variable;                                          // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestVariable) == 0x000004, "Wrong alignment on FQuestVariable");
static_assert(sizeof(FQuestVariable) == 0x00000C, "Wrong size on FQuestVariable");
static_assert(offsetof(FQuestVariable, Type) == 0x000000, "Member 'FQuestVariable::Type' has a wrong offset!");
static_assert(offsetof(FQuestVariable, Variable) == 0x000004, "Member 'FQuestVariable::Variable' has a wrong offset!");

// ScriptStruct QuestFramework.QuestVariableBounds
// 0x0020 (0x0020 - 0x0000)
struct FQuestVariableBounds final
{
public:
	struct FQuestVariable                         Variable;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EQuestValueClamp                              ClampOperation;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinInteger;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInteger;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFloat;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFloat;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestVariableBounds) == 0x000004, "Wrong alignment on FQuestVariableBounds");
static_assert(sizeof(FQuestVariableBounds) == 0x000020, "Wrong size on FQuestVariableBounds");
static_assert(offsetof(FQuestVariableBounds, Variable) == 0x000000, "Member 'FQuestVariableBounds::Variable' has a wrong offset!");
static_assert(offsetof(FQuestVariableBounds, ClampOperation) == 0x00000C, "Member 'FQuestVariableBounds::ClampOperation' has a wrong offset!");
static_assert(offsetof(FQuestVariableBounds, MinInteger) == 0x000010, "Member 'FQuestVariableBounds::MinInteger' has a wrong offset!");
static_assert(offsetof(FQuestVariableBounds, MaxInteger) == 0x000014, "Member 'FQuestVariableBounds::MaxInteger' has a wrong offset!");
static_assert(offsetof(FQuestVariableBounds, MinFloat) == 0x000018, "Member 'FQuestVariableBounds::MinFloat' has a wrong offset!");
static_assert(offsetof(FQuestVariableBounds, MaxFloat) == 0x00001C, "Member 'FQuestVariableBounds::MaxFloat' has a wrong offset!");

// ScriptStruct QuestFramework.QuestVariableInitializer
// 0x0018 (0x0018 - 0x0000)
struct FQuestVariableInitializer final
{
public:
	struct FQuestVariable                         Variable;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         IntegerValue;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolValue;                                         // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdditive;                                         // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestVariableInitializer) == 0x000004, "Wrong alignment on FQuestVariableInitializer");
static_assert(sizeof(FQuestVariableInitializer) == 0x000018, "Wrong size on FQuestVariableInitializer");
static_assert(offsetof(FQuestVariableInitializer, Variable) == 0x000000, "Member 'FQuestVariableInitializer::Variable' has a wrong offset!");
static_assert(offsetof(FQuestVariableInitializer, IntegerValue) == 0x00000C, "Member 'FQuestVariableInitializer::IntegerValue' has a wrong offset!");
static_assert(offsetof(FQuestVariableInitializer, FloatValue) == 0x000010, "Member 'FQuestVariableInitializer::FloatValue' has a wrong offset!");
static_assert(offsetof(FQuestVariableInitializer, BoolValue) == 0x000014, "Member 'FQuestVariableInitializer::BoolValue' has a wrong offset!");
static_assert(offsetof(FQuestVariableInitializer, bAdditive) == 0x000015, "Member 'FQuestVariableInitializer::bAdditive' has a wrong offset!");

// ScriptStruct QuestFramework.DefaultQuestVariable
// 0x0038 (0x0038 - 0x0000)
struct FDefaultQuestVariable final
{
public:
	struct FQuestVariableInitializer              Initializer;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bReplicates;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDefaultQuestVariable) == 0x000008, "Wrong alignment on FDefaultQuestVariable");
static_assert(sizeof(FDefaultQuestVariable) == 0x000038, "Wrong size on FDefaultQuestVariable");
static_assert(offsetof(FDefaultQuestVariable, Initializer) == 0x000000, "Member 'FDefaultQuestVariable::Initializer' has a wrong offset!");
static_assert(offsetof(FDefaultQuestVariable, bReplicates) == 0x000018, "Member 'FDefaultQuestVariable::bReplicates' has a wrong offset!");
static_assert(offsetof(FDefaultQuestVariable, Description) == 0x000020, "Member 'FDefaultQuestVariable::Description' has a wrong offset!");

// ScriptStruct QuestFramework.QuestContextSaveStateData
// 0x0920 (0x0920 - 0x0000)
struct FQuestContextSaveStateData final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestResult                                  ResultState;                                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  NodeGuid;                                          // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestMemoryBlock                      MemoryBlock;                                       // 0x0028(0x08F8)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestContextSaveStateData) == 0x000008, "Wrong alignment on FQuestContextSaveStateData");
static_assert(sizeof(FQuestContextSaveStateData) == 0x000920, "Wrong size on FQuestContextSaveStateData");
static_assert(offsetof(FQuestContextSaveStateData, Guid) == 0x000000, "Member 'FQuestContextSaveStateData::Guid' has a wrong offset!");
static_assert(offsetof(FQuestContextSaveStateData, ResultState) == 0x000010, "Member 'FQuestContextSaveStateData::ResultState' has a wrong offset!");
static_assert(offsetof(FQuestContextSaveStateData, NodeGuid) == 0x000014, "Member 'FQuestContextSaveStateData::NodeGuid' has a wrong offset!");
static_assert(offsetof(FQuestContextSaveStateData, MemoryBlock) == 0x000028, "Member 'FQuestContextSaveStateData::MemoryBlock' has a wrong offset!");

// ScriptStruct QuestFramework.QuestContextSaveState
// 0x0020 (0x0020 - 0x0000)
struct FQuestContextSaveState final
{
public:
	struct FGuid                                  QuestGuid;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestContextSaveStateData>     ContextStates;                                     // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestContextSaveState) == 0x000008, "Wrong alignment on FQuestContextSaveState");
static_assert(sizeof(FQuestContextSaveState) == 0x000020, "Wrong size on FQuestContextSaveState");
static_assert(offsetof(FQuestContextSaveState, QuestGuid) == 0x000000, "Member 'FQuestContextSaveState::QuestGuid' has a wrong offset!");
static_assert(offsetof(FQuestContextSaveState, ContextStates) == 0x000010, "Member 'FQuestContextSaveState::ContextStates' has a wrong offset!");

// ScriptStruct QuestFramework.QuestVariableInfo
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FQuestVariableInfo final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestVariableInfo) == 0x000008, "Wrong alignment on FQuestVariableInfo");
static_assert(sizeof(FQuestVariableInfo) == 0x000038, "Wrong size on FQuestVariableInfo");

// ScriptStruct QuestFramework.QuestVariableComparison
// 0x002C (0x002C - 0x0000)
struct FQuestVariableComparison final
{
public:
	EQuestComparisonOperator                      Operator;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestVariable                         Variable;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	EQuestVariableComparisonType                  ComparisonType;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherInteger;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherFloat;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOtherBool;                                        // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestVariable                         OtherVariable;                                     // 0x0020(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestVariableComparison) == 0x000004, "Wrong alignment on FQuestVariableComparison");
static_assert(sizeof(FQuestVariableComparison) == 0x00002C, "Wrong size on FQuestVariableComparison");
static_assert(offsetof(FQuestVariableComparison, Operator) == 0x000000, "Member 'FQuestVariableComparison::Operator' has a wrong offset!");
static_assert(offsetof(FQuestVariableComparison, Variable) == 0x000004, "Member 'FQuestVariableComparison::Variable' has a wrong offset!");
static_assert(offsetof(FQuestVariableComparison, ComparisonType) == 0x000010, "Member 'FQuestVariableComparison::ComparisonType' has a wrong offset!");
static_assert(offsetof(FQuestVariableComparison, OtherInteger) == 0x000014, "Member 'FQuestVariableComparison::OtherInteger' has a wrong offset!");
static_assert(offsetof(FQuestVariableComparison, OtherFloat) == 0x000018, "Member 'FQuestVariableComparison::OtherFloat' has a wrong offset!");
static_assert(offsetof(FQuestVariableComparison, bOtherBool) == 0x00001C, "Member 'FQuestVariableComparison::bOtherBool' has a wrong offset!");
static_assert(offsetof(FQuestVariableComparison, OtherVariable) == 0x000020, "Member 'FQuestVariableComparison::OtherVariable' has a wrong offset!");

// ScriptStruct QuestFramework.QuestMemoryQuery
// 0x0018 (0x0018 - 0x0000)
struct FQuestMemoryQuery final
{
public:
	TArray<struct FQuestVariableComparison>       Comparisons;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EQuestLogicalOperator                         Operator;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertResult;                                     // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestMemoryQuery) == 0x000008, "Wrong alignment on FQuestMemoryQuery");
static_assert(sizeof(FQuestMemoryQuery) == 0x000018, "Wrong size on FQuestMemoryQuery");
static_assert(offsetof(FQuestMemoryQuery, Comparisons) == 0x000000, "Member 'FQuestMemoryQuery::Comparisons' has a wrong offset!");
static_assert(offsetof(FQuestMemoryQuery, Operator) == 0x000010, "Member 'FQuestMemoryQuery::Operator' has a wrong offset!");
static_assert(offsetof(FQuestMemoryQuery, bInvertResult) == 0x000011, "Member 'FQuestMemoryQuery::bInvertResult' has a wrong offset!");

// ScriptStruct QuestFramework.QuestStageObjectives
// 0x0010 (0x0010 - 0x0000)
struct FQuestStageObjectives final
{
public:
	TArray<class UQuestObjective*>                ObjectiveArray;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestStageObjectives) == 0x000008, "Wrong alignment on FQuestStageObjectives");
static_assert(sizeof(FQuestStageObjectives) == 0x000010, "Wrong size on FQuestStageObjectives");
static_assert(offsetof(FQuestStageObjectives, ObjectiveArray) == 0x000000, "Member 'FQuestStageObjectives::ObjectiveArray' has a wrong offset!");

// ScriptStruct QuestFramework.QuestNumberFormattingOptions
// 0x0014 (0x0014 - 0x0000)
struct FQuestNumberFormattingOptions final
{
public:
	ERoundingMode                                 RoundingMode;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGrouping;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinimumIntegralDigits;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumIntegralDigits;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumFractionalDigits;                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaximumFractionalDigits;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestNumberFormattingOptions) == 0x000004, "Wrong alignment on FQuestNumberFormattingOptions");
static_assert(sizeof(FQuestNumberFormattingOptions) == 0x000014, "Wrong size on FQuestNumberFormattingOptions");
static_assert(offsetof(FQuestNumberFormattingOptions, RoundingMode) == 0x000000, "Member 'FQuestNumberFormattingOptions::RoundingMode' has a wrong offset!");
static_assert(offsetof(FQuestNumberFormattingOptions, bUseGrouping) == 0x000001, "Member 'FQuestNumberFormattingOptions::bUseGrouping' has a wrong offset!");
static_assert(offsetof(FQuestNumberFormattingOptions, MinimumIntegralDigits) == 0x000004, "Member 'FQuestNumberFormattingOptions::MinimumIntegralDigits' has a wrong offset!");
static_assert(offsetof(FQuestNumberFormattingOptions, MaximumIntegralDigits) == 0x000008, "Member 'FQuestNumberFormattingOptions::MaximumIntegralDigits' has a wrong offset!");
static_assert(offsetof(FQuestNumberFormattingOptions, MinimumFractionalDigits) == 0x00000C, "Member 'FQuestNumberFormattingOptions::MinimumFractionalDigits' has a wrong offset!");
static_assert(offsetof(FQuestNumberFormattingOptions, MaximumFractionalDigits) == 0x000010, "Member 'FQuestNumberFormattingOptions::MaximumFractionalDigits' has a wrong offset!");

// ScriptStruct QuestFramework.QuestTextArg
// 0x0040 (0x0040 - 0x0000)
struct FQuestTextArg final
{
public:
	class FString                                 ArgName;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestTextArgType                             Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestVariable                         Variable;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseNumberFormatter;                               // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestNumberFormattingOptions          NumberFormatOptions;                               // 0x0024(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UQuestTextArgument*                     CustomTextArgument;                                // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestTextArg) == 0x000008, "Wrong alignment on FQuestTextArg");
static_assert(sizeof(FQuestTextArg) == 0x000040, "Wrong size on FQuestTextArg");
static_assert(offsetof(FQuestTextArg, ArgName) == 0x000000, "Member 'FQuestTextArg::ArgName' has a wrong offset!");
static_assert(offsetof(FQuestTextArg, Type) == 0x000010, "Member 'FQuestTextArg::Type' has a wrong offset!");
static_assert(offsetof(FQuestTextArg, Variable) == 0x000014, "Member 'FQuestTextArg::Variable' has a wrong offset!");
static_assert(offsetof(FQuestTextArg, bUseNumberFormatter) == 0x000020, "Member 'FQuestTextArg::bUseNumberFormatter' has a wrong offset!");
static_assert(offsetof(FQuestTextArg, NumberFormatOptions) == 0x000024, "Member 'FQuestTextArg::NumberFormatOptions' has a wrong offset!");
static_assert(offsetof(FQuestTextArg, CustomTextArgument) == 0x000038, "Member 'FQuestTextArg::CustomTextArgument' has a wrong offset!");

// ScriptStruct QuestFramework.QuestText
// 0x0028 (0x0028 - 0x0000)
struct FQuestText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FQuestTextArg>                  TextArguments;                                     // 0x0018(0x0010)(Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestText) == 0x000008, "Wrong alignment on FQuestText");
static_assert(sizeof(FQuestText) == 0x000028, "Wrong size on FQuestText");
static_assert(offsetof(FQuestText, Text) == 0x000000, "Member 'FQuestText::Text' has a wrong offset!");
static_assert(offsetof(FQuestText, TextArguments) == 0x000018, "Member 'FQuestText::TextArguments' has a wrong offset!");

// ScriptStruct QuestFramework.QuestObjectiveRepResult
// 0x0010 (0x0010 - 0x0000)
struct FQuestObjectiveRepResult final
{
public:
	class UQuestObjective*                        Obj;                                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestResult                                  Result;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestObjectiveRepResult) == 0x000008, "Wrong alignment on FQuestObjectiveRepResult");
static_assert(sizeof(FQuestObjectiveRepResult) == 0x000010, "Wrong size on FQuestObjectiveRepResult");
static_assert(offsetof(FQuestObjectiveRepResult, Obj) == 0x000000, "Member 'FQuestObjectiveRepResult::Obj' has a wrong offset!");
static_assert(offsetof(FQuestObjectiveRepResult, Result) == 0x000008, "Member 'FQuestObjectiveRepResult::Result' has a wrong offset!");

// ScriptStruct QuestFramework.QuestObjectiveResultReplicator
// 0x0018 (0x0018 - 0x0000)
struct FQuestObjectiveResultReplicator final
{
public:
	TArray<struct FQuestObjectiveRepResult>       RepResults;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestObjectiveResultReplicator) == 0x000008, "Wrong alignment on FQuestObjectiveResultReplicator");
static_assert(sizeof(FQuestObjectiveResultReplicator) == 0x000018, "Wrong size on FQuestObjectiveResultReplicator");
static_assert(offsetof(FQuestObjectiveResultReplicator, RepResults) == 0x000000, "Member 'FQuestObjectiveResultReplicator::RepResults' has a wrong offset!");

// ScriptStruct QuestFramework.QuestSaveStateData
// 0x0018 (0x0018 - 0x0000)
struct FQuestSaveStateData final
{
public:
	struct FDateTime                              Timestamp;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuestContextSaveState>         Data;                                              // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestSaveStateData) == 0x000008, "Wrong alignment on FQuestSaveStateData");
static_assert(sizeof(FQuestSaveStateData) == 0x000018, "Wrong size on FQuestSaveStateData");
static_assert(offsetof(FQuestSaveStateData, Timestamp) == 0x000000, "Member 'FQuestSaveStateData::Timestamp' has a wrong offset!");
static_assert(offsetof(FQuestSaveStateData, Data) == 0x000008, "Member 'FQuestSaveStateData::Data' has a wrong offset!");

}

