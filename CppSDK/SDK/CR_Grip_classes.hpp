#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CR_Grip

#include "Basic.hpp"

#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass CR_Grip.CR_Grip_C
// 0x0018 (0x0410 - 0x03F8)
class UCR_Grip_C final : public UControlRig
{
public:
	bool                                          ShotgunArm;                                        // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weight;                                            // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aiming;                                            // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CR_Grip_C">();
	}
	static class UCR_Grip_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCR_Grip_C>();
	}
};
static_assert(alignof(UCR_Grip_C) == 0x000008, "Wrong alignment on UCR_Grip_C");
static_assert(sizeof(UCR_Grip_C) == 0x000410, "Wrong size on UCR_Grip_C");
static_assert(offsetof(UCR_Grip_C, ShotgunArm) == 0x0003F8, "Member 'UCR_Grip_C::ShotgunArm' has a wrong offset!");
static_assert(offsetof(UCR_Grip_C, Weight) == 0x000400, "Member 'UCR_Grip_C::Weight' has a wrong offset!");
static_assert(offsetof(UCR_Grip_C, Aiming) == 0x000408, "Member 'UCR_Grip_C::Aiming' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_Grip.RigVMMemory_Literal
// 0x0168 (0x0190 - 0x0028)
class CR_Grip::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const; // 0x0028(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const; // 0x0034(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const; // 0x0040(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_Item__Const;           // 0x004C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___GetTransform_1_Space__Const;          // 0x0058(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___GetTransform_1_bInitial__Const;       // 0x0059(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const; // 0x0060(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const; // 0x0078(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxisWeight__Const; // 0x0090(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___Add_1_B__Const;                       // 0x0098(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___If_1_True__Const;                     // 0x00B0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___If_1_False__Const;                    // 0x00B8(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EControlRigVectorKind                         RigVMModel___TwoBoneIKSimplePerItem_1_PoleVectorKind__Const; // 0x00C0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_PoleVectorSpace__Const; // 0x00C4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___TwoBoneIKSimplePerItem_1_bEnableStretch__Const; // 0x00D0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RigVMModel___TwoBoneIKSimplePerItem_1_StretchStartRatio__Const; // 0x00D4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_1_StretchMaximumRatio__Const; // 0x00D8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemALength__Const; // 0x00DC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigUnit_TwoBoneIKSimple_DebugSettings RigVMModel___TwoBoneIKSimplePerItem_1_DebugSettings__Const; // 0x00E0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___GetTransform_Item__Const;             // 0x0150(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RigVMModel___Add_B__Const;                         // 0x0160(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EControlRigVectorKind                         RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const; // 0x0178(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const; // 0x017C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_Grip.RigVMMemory_Literal", true>();
	}
	static class CR_Grip::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_Grip::URigVMMemory_Literal>();
	}
};
static_assert(alignof(CR_Grip::URigVMMemory_Literal) == 0x000010, "Wrong alignment on CR_Grip::URigVMMemory_Literal");
static_assert(sizeof(CR_Grip::URigVMMemory_Literal) == 0x000190, "Wrong size on CR_Grip::URigVMMemory_Literal");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const) == 0x000028, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const) == 0x000034, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const) == 0x000040, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___GetTransform_1_Item__Const) == 0x00004C, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___GetTransform_1_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___GetTransform_1_Space__Const) == 0x000058, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___GetTransform_1_Space__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___GetTransform_1_bInitial__Const) == 0x000059, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___GetTransform_1_bInitial__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const) == 0x000060, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const) == 0x000078, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxisWeight__Const) == 0x000090, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxisWeight__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___Add_1_B__Const) == 0x000098, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___Add_1_B__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___If_1_True__Const) == 0x0000B0, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___If_1_True__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___If_1_False__Const) == 0x0000B8, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___If_1_False__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_PoleVectorKind__Const) == 0x0000C0, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_PoleVectorKind__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_PoleVectorSpace__Const) == 0x0000C4, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_PoleVectorSpace__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_bEnableStretch__Const) == 0x0000D0, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_bEnableStretch__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_StretchStartRatio__Const) == 0x0000D4, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_StretchStartRatio__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_StretchMaximumRatio__Const) == 0x0000D8, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_StretchMaximumRatio__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemALength__Const) == 0x0000DC, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemALength__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_DebugSettings__Const) == 0x0000E0, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___GetTransform_Item__Const) == 0x000150, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___Add_B__Const) == 0x000160, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___Add_B__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const) == 0x000178, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const) == 0x00017C, "Member 'CR_Grip::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass CR_Grip.RigVMMemory_Work
// 0x0228 (0x0250 - 0x0028)
class CR_Grip::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_1_Transform;             // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_CachedIndex;           // 0x0090(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___Add_1_Result;                         // 0x00A0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_1_A;                              // 0x00B8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___If_1_Result;                          // 0x00D0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_1_B__IO;                          // 0x00D8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_1_Weight;      // 0x00F0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex; // 0x00F8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex; // 0x0108(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex; // 0x0118(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex; // 0x0128(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_Transform;               // 0x0140(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_CachedIndex;             // 0x01A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___Add_Result;                           // 0x01B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_A;                                // 0x01C8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        RigVMModel___If_Result;                            // 0x01E0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___Add_B__IO;                            // 0x01E8(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_Weight;        // 0x0200(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex; // 0x0208(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex; // 0x0218(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex; // 0x0228(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex; // 0x0238(0x0010)(Edit, EditConst, NonTransactional)
	class FName                                   RigVMModel___Branch_BlockToRun;                    // 0x0248(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass CR_Grip.RigVMMemory_Work", true>();
	}
	static class CR_Grip::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<CR_Grip::URigVMMemory_Work>();
	}
};
static_assert(alignof(CR_Grip::URigVMMemory_Work) == 0x000010, "Wrong alignment on CR_Grip::URigVMMemory_Work");
static_assert(sizeof(CR_Grip::URigVMMemory_Work) == 0x000250, "Wrong size on CR_Grip::URigVMMemory_Work");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___GetTransform_1_Transform) == 0x000030, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___GetTransform_1_CachedIndex) == 0x000090, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Add_1_Result) == 0x0000A0, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Add_1_Result' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Add_1_A) == 0x0000B8, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Add_1_A' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___If_1_Result) == 0x0000D0, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___If_1_Result' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Add_1_B__IO) == 0x0000D8, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Add_1_B__IO' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_Weight) == 0x0000F0, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_Weight' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex) == 0x0000F8, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex) == 0x000108, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex) == 0x000118, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex) == 0x000128, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___GetTransform_Transform) == 0x000140, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___GetTransform_CachedIndex) == 0x0001A0, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Add_Result) == 0x0001B0, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Add_Result' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Add_A) == 0x0001C8, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Add_A' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___If_Result) == 0x0001E0, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___If_Result' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Add_B__IO) == 0x0001E8, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Add_B__IO' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_Weight) == 0x000200, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_Weight' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex) == 0x000208, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex) == 0x000218, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex) == 0x000228, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex) == 0x000238, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex' has a wrong offset!");
static_assert(offsetof(CR_Grip::URigVMMemory_Work, RigVMModel___Branch_BlockToRun) == 0x000248, "Member 'CR_Grip::URigVMMemory_Work::RigVMModel___Branch_BlockToRun' has a wrong offset!");

}

