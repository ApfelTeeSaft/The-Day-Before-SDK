#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZombieManager

#include "Basic.hpp"

#include "ZombieManager_classes.hpp"
#include "ZombieManager_parameters.hpp"


namespace SDK
{

// Function ZombieManager.ZombieManager_C.ActivateAI
// (Public, BlueprintCallable, BlueprintEvent)

void AZombieManager_C::ActivateAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "ActivateAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.Check Players
// (Private, BlueprintCallable, BlueprintEvent)

void AZombieManager_C::Check_Players()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "Check Players");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.DeactivateAI
// (Public, BlueprintCallable, BlueprintEvent)

void AZombieManager_C::DeactivateAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "DeactivateAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.ExecuteUbergraph_ZombieManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::ExecuteUbergraph_ZombieManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "ExecuteUbergraph_ZombieManager");

	Params::ZombieManager_C_ExecuteUbergraph_ZombieManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ZombieManager.ZombieManager_C.Get Dead Zombies Amount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   DeadZombiesAmount                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::Get_Dead_Zombies_Amount(int32* DeadZombiesAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "Get Dead Zombies Amount");

	Params::ZombieManager_C_Get_Dead_Zombies_Amount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DeadZombiesAmount != nullptr)
		*DeadZombiesAmount = Parms.DeadZombiesAmount;
}


// Function ZombieManager.ZombieManager_C.Get Free Zombie Index
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsCityZombie                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FreeIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::Get_Free_Zombie_Index(bool IsCityZombie, int32* FreeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "Get Free Zombie Index");

	Params::ZombieManager_C_Get_Free_Zombie_Index Parms{};

	Parms.IsCityZombie = IsCityZombie;

	UObject::ProcessEvent(Func, &Parms);

	if (FreeIndex != nullptr)
		*FreeIndex = Parms.FreeIndex;
}


// Function ZombieManager.ZombieManager_C.Get Sleeping Zombies Amount
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SleepingZombiesAmount                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::Get_Sleeping_Zombies_Amount(int32* SleepingZombiesAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "Get Sleeping Zombies Amount");

	Params::ZombieManager_C_Get_Sleeping_Zombies_Amount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SleepingZombiesAmount != nullptr)
		*SleepingZombiesAmount = Parms.SleepingZombiesAmount;
}


// Function ZombieManager.ZombieManager_C.GetActiveZombies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AZombie_C*>                Param_ActiveZombies                                    (Parm, OutParm)

void AZombieManager_C::GetActiveZombies(TArray<class AZombie_C*>* Param_ActiveZombies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "GetActiveZombies");

	Params::ZombieManager_C_GetActiveZombies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ActiveZombies != nullptr)
		*Param_ActiveZombies = std::move(Parms.Param_ActiveZombies);
}


// Function ZombieManager.ZombieManager_C.GetActiveZombiesAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ZombiesAmount                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::GetActiveZombiesAmount(int32* ZombiesAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "GetActiveZombiesAmount");

	Params::ZombieManager_C_GetActiveZombiesAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ZombiesAmount != nullptr)
		*ZombiesAmount = Parms.ZombiesAmount;
}


// Function ZombieManager.ZombieManager_C.GetAllZombies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AZombie_C*>                Param_AllZombies                                       (Parm, OutParm)

void AZombieManager_C::GetAllZombies(TArray<class AZombie_C*>* Param_AllZombies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "GetAllZombies");

	Params::ZombieManager_C_GetAllZombies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_AllZombies != nullptr)
		*Param_AllZombies = std::move(Parms.Param_AllZombies);
}


// Function ZombieManager.ZombieManager_C.GetDeactivatedAI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AZombieManager_C::GetDeactivatedAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "GetDeactivatedAI");

	Params::ZombieManager_C_GetDeactivatedAI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ZombieManager.ZombieManager_C.GetInvisibleZombieBlueprintsCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::GetInvisibleZombieBlueprintsCount(int32* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "GetInvisibleZombieBlueprintsCount");

	Params::ZombieManager_C_GetInvisibleZombieBlueprintsCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function ZombieManager.ZombieManager_C.IsSpawnBlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsBlocked                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::IsSpawnBlocked(bool* IsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "IsSpawnBlocked");

	Params::ZombieManager_C_IsSpawnBlocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBlocked != nullptr)
		*IsBlocked = Parms.IsBlocked;
}


// Function ZombieManager.ZombieManager_C.KillAllActiveZombies
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::KillAllActiveZombies(class AController* InstigatedBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "KillAllActiveZombies");

	Params::ZombieManager_C_KillAllActiveZombies Parms{};

	Parms.InstigatedBy = InstigatedBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ZombieManager.ZombieManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AZombieManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.RequestSpawnOfZombie
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MeshType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EZombieType                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EZombieAnimType                         AnimType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TSet<class UQuest*>                     Quests                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class ABP_Door_C*                       ConnectedDoor                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// TArray<class ATargetPoint*>             PatrollingPath                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    IsCityZombie                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AZombie_C*                        SpawnedZombie                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::RequestSpawnOfZombie(int32 MeshType, EZombieType Type, EZombieAnimType AnimType, const struct FVector& Location, const struct FRotator& Rotation, const TSet<class UQuest*>& Quests, class ABP_Door_C*& ConnectedDoor, TArray<class ATargetPoint*>& PatrollingPath, bool IsCityZombie, class AZombie_C** SpawnedZombie)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "RequestSpawnOfZombie");

	Params::ZombieManager_C_RequestSpawnOfZombie Parms{};

	Parms.MeshType = MeshType;
	Parms.Type = Type;
	Parms.AnimType = AnimType;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Quests = std::move(Quests);
	Parms.ConnectedDoor = ConnectedDoor;
	Parms.PatrollingPath = std::move(PatrollingPath);
	Parms.IsCityZombie = IsCityZombie;

	UObject::ProcessEvent(Func, &Parms);

	ConnectedDoor = Parms.ConnectedDoor;
	PatrollingPath = std::move(Parms.PatrollingPath);

	if (SpawnedZombie != nullptr)
		*SpawnedZombie = Parms.SpawnedZombie;
}


// Function ZombieManager.ZombieManager_C.ResetZombie
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ZombieManagerIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AZombie_C*                        ZombieRef                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsCityZombie                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::ResetZombie(int32 ZombieManagerIndex, class AZombie_C* ZombieRef, bool IsCityZombie)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "ResetZombie");

	Params::ZombieManager_C_ResetZombie Parms{};

	Parms.ZombieManagerIndex = ZombieManagerIndex;
	Parms.ZombieRef = ZombieRef;
	Parms.IsCityZombie = IsCityZombie;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ZombieManager.ZombieManager_C.SetMaxZombiesOnServer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_MaxAmountOfZombiesOnServer                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::SetMaxZombiesOnServer(int32 Param_MaxAmountOfZombiesOnServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "SetMaxZombiesOnServer");

	Params::ZombieManager_C_SetMaxZombiesOnServer Parms{};

	Parms.Param_MaxAmountOfZombiesOnServer = Param_MaxAmountOfZombiesOnServer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ZombieManager.ZombieManager_C.SpawnerRequest
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AmountOfZombie                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::SpawnerRequest(int32 AmountOfZombie)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "SpawnerRequest");

	Params::ZombieManager_C_SpawnerRequest Parms{};

	Parms.AmountOfZombie = AmountOfZombie;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ZombieManager.ZombieManager_C.SpawnZombie
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AZombieManager_C::SpawnZombie()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "SpawnZombie");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.ToggleBlockSpawn
// (Public, BlueprintCallable, BlueprintEvent)

void AZombieManager_C::ToggleBlockSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "ToggleBlockSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.ToggleZombieAI
// (Public, BlueprintCallable, BlueprintEvent)

void AZombieManager_C::ToggleZombieAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "ToggleZombieAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ZombieManager.ZombieManager_C.UpdateInvisibleStat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AZombie_C*                        KilledZombie                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void AZombieManager_C::UpdateInvisibleStat(const class AZombie_C*& KilledZombie)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZombieManager_C", "UpdateInvisibleStat");

	Params::ZombieManager_C_UpdateInvisibleStat Parms{};

	Parms.KilledZombie = KilledZombie;

	UObject::ProcessEvent(Func, &Parms);
}

}

