#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LockpickingGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "E_LockpickDifficulty_structs.hpp"
#include "FMODStudio_structs.hpp"


namespace SDK::Params
{

// Function BP_LockpickingGame.BP_LockpickingGame_C.ExecuteUbergraph_BP_LockpickingGame
// 0x03B0 (0x03B0 - 0x0000)
struct BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvPC_C*                              K2Node_DynamicCast_AsSurv_PC;                      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_Lockpicking_C*                     CallFunc_Create_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_1;                // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CloseTabsWindow_Success;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_OpenTabsWindow_Succes;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_AxisValue;                      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RotateLockpick_RotationWasChanged;        // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActorTickEnabled_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveLockpick_HasLockpick;               // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0090(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00A0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue;          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0110(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_1;        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x0180(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_2;        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_3;               // 0x01F0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_3;        // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventInstanceIsValid_ReturnValue;         // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EventInstanceIsValid_ReturnValue_1;       // 0x025A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25B[0x1];                                      // 0x025B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x025C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_4;               // 0x0270(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_4;        // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EventInstanceIsValid_ReturnValue_2;       // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_5;               // 0x02E0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     CallFunc_PlayEventAtLocation_ReturnValue_5;        // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0350(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0388(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetLockpickOffset_Offset_ImplicitCast;    // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_HandleTick_DeltaSeconds_ImplicitCast;     // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame) == 0x000010, "Wrong alignment on BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame");
static_assert(sizeof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame) == 0x0003B0, "Wrong size on BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, EntryPoint) == 0x000000, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_AsSurv_PC) == 0x000010, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_AsSurv_PC' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_Create_ReturnValue) == 0x000020, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_K2_GetPawn_ReturnValue) == 0x000028, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_AsSurvival_Player) == 0x000038, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000048, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_AsBPI_Surv_PC_1) == 0x000060, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_AsBPI_Surv_PC_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_DynamicCast_bSuccess_3) == 0x000070, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_CloseTabsWindow_Success) == 0x000071, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_CloseTabsWindow_Success' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_OpenTabsWindow_Succes) == 0x000072, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_OpenTabsWindow_Succes' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_CustomEvent_AxisValue) == 0x000078, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_CustomEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_RotateLockpick_RotationWasChanged) == 0x000080, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_RotateLockpick_RotationWasChanged' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_Not_PreBool_ReturnValue) == 0x000081, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_Event_DeltaSeconds) == 0x000084, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsActorTickEnabled_ReturnValue) == 0x000088, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsActorTickEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_BooleanAND_ReturnValue) == 0x000089, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsValid_ReturnValue_2) == 0x00008A, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_Not_PreBool_ReturnValue_1) == 0x00008B, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_RemoveLockpick_HasLockpick) == 0x00008C, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_RemoveLockpick_HasLockpick' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_CreateDelegate_OutputDelegate) == 0x000090, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetTransform_ReturnValue) == 0x0000A0, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_PlayEventAtLocation_ReturnValue) == 0x000100, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_PlayEventAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetTransform_ReturnValue_1) == 0x000110, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_PlayEventAtLocation_ReturnValue_1) == 0x000170, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_PlayEventAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetTransform_ReturnValue_2) == 0x000180, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_PlayEventAtLocation_ReturnValue_2) == 0x0001E0, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_PlayEventAtLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetTransform_ReturnValue_3) == 0x0001F0, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_PlayEventAtLocation_ReturnValue_3) == 0x000250, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_PlayEventAtLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsValid_ReturnValue_3) == 0x000258, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_EventInstanceIsValid_ReturnValue) == 0x000259, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_EventInstanceIsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_EventInstanceIsValid_ReturnValue_1) == 0x00025A, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_EventInstanceIsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, K2Node_CreateDelegate_OutputDelegate_1) == 0x00025C, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetTransform_ReturnValue_4) == 0x000270, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetTransform_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_PlayEventAtLocation_ReturnValue_4) == 0x0002D0, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_PlayEventAtLocation_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_EventInstanceIsValid_ReturnValue_2) == 0x0002D8, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_EventInstanceIsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsValid_ReturnValue_4) == 0x0002D9, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetTransform_ReturnValue_5) == 0x0002E0, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetTransform_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_PlayEventAtLocation_ReturnValue_5) == 0x000340, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_PlayEventAtLocation_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_IsValid_ReturnValue_5) == 0x000348, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000350, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_SelectFloat_ReturnValue) == 0x000358, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000360, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000368, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000370, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000378, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_SelectFloat_ReturnValue_1) == 0x000380, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000388, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_SetLockpickOffset_Offset_ImplicitCast) == 0x000390, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_SetLockpickOffset_Offset_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_HandleTick_DeltaSeconds_ImplicitCast) == 0x000398, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_HandleTick_DeltaSeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x0003A0, "Member 'BP_LockpickingGame_C_ExecuteUbergraph_BP_LockpickingGame::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.HandleTick
// 0x0050 (0x0050 - 0x0000)
struct BP_LockpickingGame_C_HandleTick final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLockRotation_Rotation;                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLockRotation_Rotation_1;               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_HandleTick) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_HandleTick");
static_assert(sizeof(BP_LockpickingGame_C_HandleTick) == 0x000050, "Wrong size on BP_LockpickingGame_C_HandleTick");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, DeltaSeconds) == 0x000000, "Member 'BP_LockpickingGame_C_HandleTick::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000008, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_GetLockRotation_Rotation) == 0x000010, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_GetLockRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_GetLockRotation_Rotation_1) == 0x000030, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_GetLockRotation_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000040, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_HandleTick, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000048, "Member 'BP_LockpickingGame_C_HandleTick::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.OnPicked__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_LockpickingGame_C_OnPicked__DelegateSignature final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_OnPicked__DelegateSignature) == 0x000001, "Wrong alignment on BP_LockpickingGame_C_OnPicked__DelegateSignature");
static_assert(sizeof(BP_LockpickingGame_C_OnPicked__DelegateSignature) == 0x000001, "Wrong size on BP_LockpickingGame_C_OnPicked__DelegateSignature");
static_assert(offsetof(BP_LockpickingGame_C_OnPicked__DelegateSignature, Result) == 0x000000, "Member 'BP_LockpickingGame_C_OnPicked__DelegateSignature::Result' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.OnStopLockpicking__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature) == 0x000001, "Wrong alignment on BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature");
static_assert(sizeof(BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature) == 0x000001, "Wrong size on BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature");
static_assert(offsetof(BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature, Success) == 0x000000, "Member 'BP_LockpickingGame_C_OnStopLockpicking__DelegateSignature::Success' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_LockpickingGame_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_LockpickingGame_C_ReceiveTick");
static_assert(sizeof(BP_LockpickingGame_C_ReceiveTick) == 0x000004, "Wrong size on BP_LockpickingGame_C_ReceiveTick");
static_assert(offsetof(BP_LockpickingGame_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_LockpickingGame_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.RotateLock
// 0x0148 (0x0148 - 0x0000)
struct BP_LockpickingGame_C_RotateLock final
{
public:
	double                                        Rotation;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_AddLocalRotation_SweepHitResult;       // 0x0030(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_GetLockRotation_Rotation;                 // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetLockRotation_Rotation_1;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_RotateLock) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_RotateLock");
static_assert(sizeof(BP_LockpickingGame_C_RotateLock) == 0x000148, "Wrong size on BP_LockpickingGame_C_RotateLock");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, Rotation) == 0x000000, "Member 'BP_LockpickingGame_C_RotateLock::Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_K2_AddLocalRotation_SweepHitResult) == 0x000030, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_K2_AddLocalRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_GetLockRotation_Rotation) == 0x000118, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_GetLockRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000120, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000128, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_GetLockRotation_Rotation_1) == 0x000130, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_GetLockRotation_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000138, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000140, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLock, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000144, "Member 'BP_LockpickingGame_C_RotateLock::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.RotateLockpick
// 0x0168 (0x0168 - 0x0000)
struct BP_LockpickingGame_C_RotateLockpick final
{
public:
	double                                        Rotation;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RotationWasChanged;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CahedRotation;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLockpickRotation_Rotation;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0078(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Roll_ImplicitCast;            // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_RotateLockpick) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_RotateLockpick");
static_assert(sizeof(BP_LockpickingGame_C_RotateLockpick) == 0x000168, "Wrong size on BP_LockpickingGame_C_RotateLockpick");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, Rotation) == 0x000000, "Member 'BP_LockpickingGame_C_RotateLockpick::Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, RotationWasChanged) == 0x000008, "Member 'BP_LockpickingGame_C_RotateLockpick::RotationWasChanged' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CahedRotation) == 0x000010, "Member 'BP_LockpickingGame_C_RotateLockpick::CahedRotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000028, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_GetLockpickRotation_Rotation) == 0x000038, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_GetLockpickRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_FClamp_ReturnValue) == 0x000050, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000058, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_MakeRotator_ReturnValue) == 0x000060, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000078, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpick, CallFunc_MakeRotator_Roll_ImplicitCast) == 0x000160, "Member 'BP_LockpickingGame_C_RotateLockpick::CallFunc_MakeRotator_Roll_ImplicitCast' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.RotateLockpickEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_LockpickingGame_C_RotateLockpickEvent final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_RotateLockpickEvent) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_RotateLockpickEvent");
static_assert(sizeof(BP_LockpickingGame_C_RotateLockpickEvent) == 0x000008, "Wrong size on BP_LockpickingGame_C_RotateLockpickEvent");
static_assert(offsetof(BP_LockpickingGame_C_RotateLockpickEvent, AxisValue) == 0x000000, "Member 'BP_LockpickingGame_C_RotateLockpickEvent::AxisValue' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.SetLockpickOffset
// 0x0128 (0x0128 - 0x0000)
struct BP_LockpickingGame_C_SetLockpickOffset final
{
public:
	double                                        Offset;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_LockpickingGame_C_SetLockpickOffset) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_SetLockpickOffset");
static_assert(sizeof(BP_LockpickingGame_C_SetLockpickOffset) == 0x000128, "Wrong size on BP_LockpickingGame_C_SetLockpickOffset");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, Offset) == 0x000000, "Member 'BP_LockpickingGame_C_SetLockpickOffset::Offset' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_LockpickingGame_C_SetLockpickOffset::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, CallFunc_BreakVector_X) == 0x000010, "Member 'BP_LockpickingGame_C_SetLockpickOffset::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, CallFunc_BreakVector_Y) == 0x000018, "Member 'BP_LockpickingGame_C_SetLockpickOffset::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, CallFunc_BreakVector_Z) == 0x000020, "Member 'BP_LockpickingGame_C_SetLockpickOffset::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, CallFunc_MakeVector_ReturnValue) == 0x000028, "Member 'BP_LockpickingGame_C_SetLockpickOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockpickOffset, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000040, "Member 'BP_LockpickingGame_C_SetLockpickOffset::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.SetLockRotation
// 0x0118 (0x0118 - 0x0000)
struct BP_LockpickingGame_C_SetLockRotation final
{
public:
	double                                        Rotation;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0028(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_SetLockRotation) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_SetLockRotation");
static_assert(sizeof(BP_LockpickingGame_C_SetLockRotation) == 0x000118, "Wrong size on BP_LockpickingGame_C_SetLockRotation");
static_assert(offsetof(BP_LockpickingGame_C_SetLockRotation, Rotation) == 0x000000, "Member 'BP_LockpickingGame_C_SetLockRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_LockpickingGame_C_SetLockRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockRotation, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'BP_LockpickingGame_C_SetLockRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockRotation, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000028, "Member 'BP_LockpickingGame_C_SetLockRotation::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_SetLockRotation, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000110, "Member 'BP_LockpickingGame_C_SetLockRotation::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.UpdateAllowedLockRotation
// 0x0070 (0x0070 - 0x0000)
struct BP_LockpickingGame_C_UpdateAllowedLockRotation final
{
public:
	double                                        LockpickAngleFromValid;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LockpickCloseness;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLockpickRotation_Rotation;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLockpickRotation_Rotation_1;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetLockpickRotation_Rotation_2;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLockpickInUnlockRange__Result;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_UpdateAllowedLockRotation) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_UpdateAllowedLockRotation");
static_assert(sizeof(BP_LockpickingGame_C_UpdateAllowedLockRotation) == 0x000070, "Wrong size on BP_LockpickingGame_C_UpdateAllowedLockRotation");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, LockpickAngleFromValid) == 0x000000, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::LockpickAngleFromValid' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, LockpickCloseness) == 0x000008, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::LockpickCloseness' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_GetLockpickRotation_Rotation) == 0x000010, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_GetLockpickRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_GetLockpickRotation_Rotation_1) == 0x000020, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_GetLockpickRotation_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_GetLockpickRotation_Rotation_2) == 0x000038, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_GetLockpickRotation_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_SelectFloat_ReturnValue) == 0x000048, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_IsLockpickInUnlockRange__Result) == 0x000050, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_IsLockpickInUnlockRange__Result' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_FClamp_ReturnValue) == 0x000060, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UpdateAllowedLockRotation, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000068, "Member 'BP_LockpickingGame_C_UpdateAllowedLockRotation::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.UserConstructionScript
// 0x0060 (0x0060 - 0x0000)
struct BP_LockpickingGame_C_UserConstructionScript final
{
public:
	double                                        UnlockAngle;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UnlockHalfRange;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LockpickDifficulty                          Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LockpickDifficulty                          Temp_byte_Variable_1;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_UserConstructionScript");
static_assert(sizeof(BP_LockpickingGame_C_UserConstructionScript) == 0x000060, "Wrong size on BP_LockpickingGame_C_UserConstructionScript");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, UnlockAngle) == 0x000000, "Member 'BP_LockpickingGame_C_UserConstructionScript::UnlockAngle' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, UnlockHalfRange) == 0x000008, "Member 'BP_LockpickingGame_C_UserConstructionScript::UnlockHalfRange' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, Temp_byte_Variable) == 0x000010, "Member 'BP_LockpickingGame_C_UserConstructionScript::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, Temp_byte_Variable_1) == 0x000011, "Member 'BP_LockpickingGame_C_UserConstructionScript::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, K2Node_Select_Default) == 0x000018, "Member 'BP_LockpickingGame_C_UserConstructionScript::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, K2Node_Select_Default_1) == 0x000040, "Member 'BP_LockpickingGame_C_UserConstructionScript::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_RandomFloatInRange_ReturnValue) == 0x000048, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_UserConstructionScript, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000058, "Member 'BP_LockpickingGame_C_UserConstructionScript::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.GetLockpickRotation
// 0x0028 (0x0028 - 0x0000)
struct BP_LockpickingGame_C_GetLockpickRotation final
{
public:
	double                                        Rotation;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_GetLockpickRotation) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_GetLockpickRotation");
static_assert(sizeof(BP_LockpickingGame_C_GetLockpickRotation) == 0x000028, "Wrong size on BP_LockpickingGame_C_GetLockpickRotation");
static_assert(offsetof(BP_LockpickingGame_C_GetLockpickRotation, Rotation) == 0x000000, "Member 'BP_LockpickingGame_C_GetLockpickRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockpickRotation, CallFunc_BreakRotator_Roll) == 0x000008, "Member 'BP_LockpickingGame_C_GetLockpickRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockpickRotation, CallFunc_BreakRotator_Pitch) == 0x00000C, "Member 'BP_LockpickingGame_C_GetLockpickRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockpickRotation, CallFunc_BreakRotator_Yaw) == 0x000010, "Member 'BP_LockpickingGame_C_GetLockpickRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockpickRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_LockpickingGame_C_GetLockpickRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockpickRotation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'BP_LockpickingGame_C_GetLockpickRotation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.GetLockRotation
// 0x0028 (0x0028 - 0x0000)
struct BP_LockpickingGame_C_GetLockRotation final
{
public:
	double                                        Rotation;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_GetLockRotation) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_GetLockRotation");
static_assert(sizeof(BP_LockpickingGame_C_GetLockRotation) == 0x000028, "Wrong size on BP_LockpickingGame_C_GetLockRotation");
static_assert(offsetof(BP_LockpickingGame_C_GetLockRotation, Rotation) == 0x000000, "Member 'BP_LockpickingGame_C_GetLockRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockRotation, CallFunc_BreakRotator_Roll) == 0x000008, "Member 'BP_LockpickingGame_C_GetLockRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockRotation, CallFunc_BreakRotator_Pitch) == 0x00000C, "Member 'BP_LockpickingGame_C_GetLockRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockRotation, CallFunc_BreakRotator_Yaw) == 0x000010, "Member 'BP_LockpickingGame_C_GetLockRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockRotation, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_LockpickingGame_C_GetLockRotation::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_GetLockRotation, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000020, "Member 'BP_LockpickingGame_C_GetLockRotation::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_LockpickingGame.BP_LockpickingGame_C.IsLockpickInUnlockRange?
// 0x0018 (0x0018 - 0x0000)
struct BP_LockpickingGame_C_IsLockpickInUnlockRange_ final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetLockpickRotation_Rotation;             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_LockpickingGame_C_IsLockpickInUnlockRange_) == 0x000008, "Wrong alignment on BP_LockpickingGame_C_IsLockpickInUnlockRange_");
static_assert(sizeof(BP_LockpickingGame_C_IsLockpickInUnlockRange_) == 0x000018, "Wrong size on BP_LockpickingGame_C_IsLockpickInUnlockRange_");
static_assert(offsetof(BP_LockpickingGame_C_IsLockpickInUnlockRange_, Result) == 0x000000, "Member 'BP_LockpickingGame_C_IsLockpickInUnlockRange_::Result' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_IsLockpickInUnlockRange_, CallFunc_GetLockpickRotation_Rotation) == 0x000008, "Member 'BP_LockpickingGame_C_IsLockpickInUnlockRange_::CallFunc_GetLockpickRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_IsLockpickInUnlockRange_, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'BP_LockpickingGame_C_IsLockpickInUnlockRange_::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_IsLockpickInUnlockRange_, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000011, "Member 'BP_LockpickingGame_C_IsLockpickInUnlockRange_::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_LockpickingGame_C_IsLockpickInUnlockRange_, CallFunc_BooleanAND_ReturnValue) == 0x000012, "Member 'BP_LockpickingGame_C_IsLockpickInUnlockRange_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

