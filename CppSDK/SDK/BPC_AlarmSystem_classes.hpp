#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_AlarmSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_AlarmSystem.BPC_AlarmSystem_C
// 0x0020 (0x00C0 - 0x00A0)
class UBPC_AlarmSystem_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ASurvivalPlayer_C*                      Player;                                            // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_HouseAlarm_C*                       Alarm;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_AlarmKeyboard_C*                    Keyboard;                                          // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPC_AlarmSystem(int32 EntryPoint);
	void FailAlarm();
	void FireAlarmLocal(class ABP_HouseAlarm_C* Param_Alarm);
	void FireAlarmServ(class ABP_HouseAlarm_C* Param_Alarm);
	void OnFireAlarm();
	void OnHouseSystemBusy();
	void OnUse(class ABP_HouseAlarm_C* Param_Alarm);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReleaseAlarm(bool Success);
	void ResetAlarm();
	void StartAutoAlarm(class ABP_HouseAlarm_C* Param_Alarm, class AHouseBox_C* HouseBox, class AActor* Actor);
	void Use(class ABP_HouseAlarm_C* Param_Alarm);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_AlarmSystem_C">();
	}
	static class UBPC_AlarmSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_AlarmSystem_C>();
	}
};
static_assert(alignof(UBPC_AlarmSystem_C) == 0x000008, "Wrong alignment on UBPC_AlarmSystem_C");
static_assert(sizeof(UBPC_AlarmSystem_C) == 0x0000C0, "Wrong size on UBPC_AlarmSystem_C");
static_assert(offsetof(UBPC_AlarmSystem_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_AlarmSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_AlarmSystem_C, Player) == 0x0000A8, "Member 'UBPC_AlarmSystem_C::Player' has a wrong offset!");
static_assert(offsetof(UBPC_AlarmSystem_C, Alarm) == 0x0000B0, "Member 'UBPC_AlarmSystem_C::Alarm' has a wrong offset!");
static_assert(offsetof(UBPC_AlarmSystem_C, Keyboard) == 0x0000B8, "Member 'UBPC_AlarmSystem_C::Keyboard' has a wrong offset!");

}

