#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RB_Vehicle

#include "Basic.hpp"

#include "BP_RB_Vehicle_classes.hpp"
#include "BP_RB_Vehicle_parameters.hpp"


namespace SDK
{

// Function BP_RB_Vehicle.BP_RB_Vehicle_C.AntiRoll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::AntiRoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "AntiRoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BlockWheel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPhysicsConstraintComponent*      WheelConstraint                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Param_IsHandbraking                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsBroken                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::BlockWheel(class UPhysicsConstraintComponent* WheelConstraint, bool Param_IsHandbraking, bool IsBroken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BlockWheel");

	Params::BP_RB_Vehicle_C_BlockWheel Parms{};

	Parms.WheelConstraint = WheelConstraint;
	Parms.Param_IsHandbraking = Param_IsHandbraking;
	Parms.IsBroken = IsBroken;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__ForntCollision_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Param_Hit                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Param_Hit = std::move(Param_Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__Mesh_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__WheelCol_LB_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__WheelCol_LF_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__WheelCol_RB_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_RB_Vehicle_C_BndEvt__WheelCol_RF_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Boost
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::Boost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Boost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BoostDisableTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_RB_Vehicle_C::BoostDisableTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BoostDisableTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BoostDisableTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_RB_Vehicle_C::BoostDisableTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BoostDisableTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BoostEnableTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_RB_Vehicle_C::BoostEnableTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BoostEnableTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.BoostEnableTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_RB_Vehicle_C::BoostEnableTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "BoostEnableTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CalculateRPM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::CalculateRPM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "CalculateRPM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CalculateTransmission
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::CalculateTransmission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "CalculateTransmission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ChangeSit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ChangeSit(int32 SitIndex, class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ChangeSit");

	Params::BP_RB_Vehicle_C_ChangeSit Parms{};

	Parms.SitIndex = SitIndex;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ChangeViewTargetWithDelay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ChangeViewTargetWithDelay(double Delay, class APawn* NewViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ChangeViewTargetWithDelay");

	Params::BP_RB_Vehicle_C_ChangeViewTargetWithDelay Parms{};

	Parms.Delay = Delay;
	Parms.NewViewTarget = NewViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CheckAndSetPlayRadio
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewPlay                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                PassengerPlayerController                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::CheckAndSetPlayRadio(bool NewPlay, class APlayerController* PassengerPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "CheckAndSetPlayRadio");

	Params::BP_RB_Vehicle_C_CheckAndSetPlayRadio Parms{};

	Parms.NewPlay = NewPlay;
	Parms.PassengerPlayerController = PassengerPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CheckPlayerSit
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    CanEnterVehicle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::CheckPlayerSit(class ASurvivalPlayer_C* Player, bool* CanEnterVehicle, int32* SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "CheckPlayerSit");

	Params::BP_RB_Vehicle_C_CheckPlayerSit Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (CanEnterVehicle != nullptr)
		*CanEnterVehicle = Parms.CanEnterVehicle;

	if (SitIndex != nullptr)
		*SitIndex = Parms.SitIndex;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ClientDiedInCar
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ClientDiedInCar(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ClientDiedInCar");

	Params::BP_RB_Vehicle_C_ClientDiedInCar Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ClientsSideEnterVehicleAsDriver
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ClientsSideEnterVehicleAsDriver(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ClientsSideEnterVehicleAsDriver");

	Params::BP_RB_Vehicle_C_ClientsSideEnterVehicleAsDriver Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ClientsSideEnterVehicleAsPassenger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ClientsSideEnterVehicleAsPassenger(class APawn* Player, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ClientsSideEnterVehicleAsPassenger");

	Params::BP_RB_Vehicle_C_ClientsSideEnterVehicleAsPassenger Parms{};

	Parms.Player = Player;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.CloseCarUpgradeMenu
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::CloseCarUpgradeMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "CloseCarUpgradeMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DamageToPassengers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PureDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::DamageToPassengers(double PureDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DamageToPassengers");

	Params::BP_RB_Vehicle_C_DamageToPassengers Parms{};

	Parms.PureDamage = PureDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DampingSupport
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DampingSupport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DampingSupport");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DampingVehicle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DampingVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DampingVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DampingWheels
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DampingWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DampingWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DecreaseDurability
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::DecreaseDurability(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DecreaseDurability");

	Params::BP_RB_Vehicle_C_DecreaseDurability Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DecreaseRPM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewRPM                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::DecreaseRPM(double* NewRPM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DecreaseRPM");

	Params::BP_RB_Vehicle_C_DecreaseRPM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewRPM != nullptr)
		*NewRPM = Parms.NewRPM;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DecreaseRPMAfterHit
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DecreaseRPMAfterHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DecreaseRPMAfterHit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DestroyInteractable
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DestroyInteractable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DestroyInteractable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Destruction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    NeedDamage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::Destruction(const struct FHitResult& Hit, bool* NeedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Destruction");

	Params::BP_RB_Vehicle_C_Destruction Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);

	if (NeedDamage != nullptr)
		*NeedDamage = Parms.NeedDamage;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DetectAirAndSurface
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DetectAirAndSurface()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DetectAirAndSurface");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DetectPuncturedObject
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::DetectPuncturedObject(int32 WheelIndex, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DetectPuncturedObject");

	Params::BP_RB_Vehicle_C_DetectPuncturedObject Parms{};

	Parms.WheelIndex = WheelIndex;
	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DetectRoadSurface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsRoad                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::DetectRoadSurface(bool* IsRoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DetectRoadSurface");

	Params::BP_RB_Vehicle_C_DetectRoadSurface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsRoad != nullptr)
		*IsRoad = Parms.IsRoad;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.DisableTickDelay
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::DisableTickDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "DisableTickDelay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EngineStartFX
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::EngineStartFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "EngineStartFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EngineStopFX
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::EngineStopFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "EngineStopFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EngineTurnOff
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCrash                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::EngineTurnOff(bool IsCrash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "EngineTurnOff");

	Params::BP_RB_Vehicle_C_EngineTurnOff Parms{};

	Parms.IsCrash = IsCrash;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EngineTurnOn
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::EngineTurnOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "EngineTurnOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EnterVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::EnterVehicle(class ASurvivalPlayer_C* Player, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "EnterVehicle");

	Params::BP_RB_Vehicle_C_EnterVehicle Parms{};

	Parms.Player = Player;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.EventPlayAudioStartEngine
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::EventPlayAudioStartEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "EventPlayAudioStartEngine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExecuteUbergraph_BP_RB_Vehicle
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ExecuteUbergraph_BP_RB_Vehicle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ExecuteUbergraph_BP_RB_Vehicle");

	Params::BP_RB_Vehicle_C_ExecuteUbergraph_BP_RB_Vehicle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExitAsDriver
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ExitAsDriver(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ExitAsDriver");

	Params::BP_RB_Vehicle_C_ExitAsDriver Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExitAsPassenger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ExitAsPassenger(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ExitAsPassenger");

	Params::BP_RB_Vehicle_C_ExitAsPassenger Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ExitVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ExitVehicle(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ExitVehicle");

	Params::BP_RB_Vehicle_C_ExitVehicle Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.FuelOrDurabilityEnded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCrash                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::FuelOrDurabilityEnded(bool IsCrash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "FuelOrDurabilityEnded");

	Params::BP_RB_Vehicle_C_FuelOrDurabilityEnded Parms{};

	Parms.IsCrash = IsCrash;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.FuelOrDurabilityEndEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::FuelOrDurabilityEndEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "FuelOrDurabilityEndEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsAccelerating                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetAccelerating(bool* Param_IsAccelerating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetAccelerating");

	Params::BP_RB_Vehicle_C_GetAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsAccelerating != nullptr)
		*Param_IsAccelerating = Parms.Param_IsAccelerating;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetActorType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ActorType                             ActorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetActorType(E_ActorType* ActorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetActorType");

	Params::BP_RB_Vehicle_C_GetActorType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorType != nullptr)
		*ActorType = Parms.ActorType;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetCarStatsComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CarStatsComponent_C*         CarStats                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetCarStatsComponent(class UBPC_CarStatsComponent_C** CarStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetCarStatsComponent");

	Params::BP_RB_Vehicle_C_GetCarStatsComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CarStats != nullptr)
		*CarStats = Parms.CarStats;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetDampingBySurface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damping                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetDampingBySurface(EPhysicalSurface SurfaceType, double* Damping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetDampingBySurface");

	Params::BP_RB_Vehicle_C_GetDampingBySurface Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (Damping != nullptr)
		*Damping = Parms.Damping;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetDriver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Driver                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetDriver(class APawn** Driver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetDriver");

	Params::BP_RB_Vehicle_C_GetDriver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Driver != nullptr)
		*Driver = Parms.Driver;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetEngineStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_EngineStarted                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetEngineStarted(bool* Param_EngineStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetEngineStarted");

	Params::BP_RB_Vehicle_C_GetEngineStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_EngineStarted != nullptr)
		*Param_EngineStarted = Parms.Param_EngineStarted;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetExitPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CorrectLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetExitPoint(int32 SitIndex, struct FVector* Location, bool* CorrectLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetExitPoint");

	Params::BP_RB_Vehicle_C_GetExitPoint Parms{};

	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (CorrectLocation != nullptr)
		*CorrectLocation = Parms.CorrectLocation;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetPassengers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PassengerFL                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PassengerBL                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PassengerBR                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetPassengers(class APawn** PassengerFL, class APawn** PassengerBL, class APawn** PassengerBR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetPassengers");

	Params::BP_RB_Vehicle_C_GetPassengers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PassengerFL != nullptr)
		*PassengerFL = Parms.PassengerFL;

	if (PassengerBL != nullptr)
		*PassengerBL = Parms.PassengerBL;

	if (PassengerBR != nullptr)
		*PassengerBR = Parms.PassengerBR;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetRiseRPM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_RPM                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetRiseRPM(double* Param_RPM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetRiseRPM");

	Params::BP_RB_Vehicle_C_GetRiseRPM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_RPM != nullptr)
		*Param_RPM = Parms.Param_RPM;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetSteering
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetSteering(double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetSteering");

	Params::BP_RB_Vehicle_C_GetSteering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetSupportBySurface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Support                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetSupportBySurface(EPhysicalSurface SurfaceType, double* Support)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetSupportBySurface");

	Params::BP_RB_Vehicle_C_GetSupportBySurface Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (Support != nullptr)
		*Support = Parms.Support;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.getTorque
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Force                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetTorque(double* Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "getTorque");

	Params::BP_RB_Vehicle_C_GetTorque Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Force != nullptr)
		*Force = Parms.Force;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetVehicleBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Body                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetVehicleBody(class USkeletalMeshComponent** Body)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetVehicleBody");

	Params::BP_RB_Vehicle_C_GetVehicleBody Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Body != nullptr)
		*Body = Parms.Body;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetWheelPitches
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<double>                          Pitches                                                (Parm, OutParm)

void ABP_RB_Vehicle_C::GetWheelPitches(TArray<double>* Pitches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetWheelPitches");

	Params::BP_RB_Vehicle_C_GetWheelPitches Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pitches != nullptr)
		*Pitches = std::move(Parms.Pitches);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.GetWheels
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 LF                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 RF                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 LB                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 RB                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::GetWheels(bool* IsValid, class USphereComponent** LF, class USphereComponent** RF, class USphereComponent** LB, class USphereComponent** RB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "GetWheels");

	Params::BP_RB_Vehicle_C_GetWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (LF != nullptr)
		*LF = Parms.LF;

	if (RF != nullptr)
		*RF = Parms.RF;

	if (LB != nullptr)
		*LB = Parms.LB;

	if (RB != nullptr)
		*RB = Parms.RB;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HandlePlayerEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::HandlePlayerEvents(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "HandlePlayerEvents");

	Params::BP_RB_Vehicle_C_HandlePlayerEvents Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HasDriver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_RB_Vehicle_C::HasDriver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "HasDriver");

	Params::BP_RB_Vehicle_C_HasDriver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.hit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Param_Hit                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_RB_Vehicle_C::Hit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "hit");

	Params::BP_RB_Vehicle_C_Hit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Param_Hit = std::move(Param_Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitCamShake
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::HitCamShake(class AActor* OtherActor, class UPrimitiveComponent* OtherComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "HitCamShake");

	Params::BP_RB_Vehicle_C_HitCamShake Parms{};

	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitCollisionTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::HitCollisionTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "HitCollisionTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitDeform
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::HitDeform(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "HitDeform");

	Params::BP_RB_Vehicle_C_HitDeform Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.HitWorld
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::HitWorld(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "HitWorld");

	Params::BP_RB_Vehicle_C_HitWorld Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IncreaseDurability
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::IncreaseDurability()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IncreaseDurability");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IncreaseFuel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Canister_C*                   Canister                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::IncreaseFuel(class ABP_Canister_C* Canister)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IncreaseFuel");

	Params::BP_RB_Vehicle_C_IncreaseFuel Parms{};

	Parms.Canister = Canister;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IncreaseRPM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewRPM                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::IncreaseRPM(double Input, double* NewRPM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IncreaseRPM");

	Params::BP_RB_Vehicle_C_IncreaseRPM Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);

	if (NewRPM != nullptr)
		*NewRPM = Parms.NewRPM;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InitLight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::InitLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InitLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InitValues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::InitValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InitValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InitWheels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::InitWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InitWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_Handbrake_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_Handbrake_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_Handbrake_K2Node_InputActionEvent_4");

	Params::BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_Handbrake_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_Handbrake_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_Handbrake_K2Node_InputActionEvent_5");

	Params::BP_RB_Vehicle_C_InpActEvt_Handbrake_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_LeftShift_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_LeftShift_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_LeftShift_K2Node_InputKeyEvent_0");

	Params::BP_RB_Vehicle_C_InpActEvt_LeftShift_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2");

	Params::BP_RB_Vehicle_C_InpActEvt_OpenCarUpgradeMenu_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_OpenInventory_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_OpenInventory_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_OpenInventory_K2Node_InputActionEvent_0");

	Params::BP_RB_Vehicle_C_InpActEvt_OpenInventory_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_TurnEngine_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_TurnEngine_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_TurnEngine_K2Node_InputActionEvent_6");

	Params::BP_RB_Vehicle_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpActEvt_TurnLights_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpActEvt_TurnLights_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpActEvt_TurnLights_K2Node_InputActionEvent_3");

	Params::BP_RB_Vehicle_C_InpActEvt_TurnLights_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Interact_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::Interact_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Interact_K2Node_InputActionEvent_1");

	Params::BP_RB_Vehicle_C_Interact_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_Brake_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpAxisEvt_Brake_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpAxisEvt_Brake_K2Node_InputAxisEvent_2");

	Params::BP_RB_Vehicle_C_InpAxisEvt_Brake_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0");

	Params::BP_RB_Vehicle_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_3");

	Params::BP_RB_Vehicle_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5");

	Params::BP_RB_Vehicle_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_5 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_2");

	Params::BP_RB_Vehicle_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsEmpty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsEmpty                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::IsEmpty(bool* Param_IsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IsEmpty");

	Params::BP_RB_Vehicle_C_IsEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsEmpty != nullptr)
		*Param_IsEmpty = Parms.Param_IsEmpty;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsIdleRPM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IdleReached                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::IsIdleRPM(bool* IdleReached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IsIdleRPM");

	Params::BP_RB_Vehicle_C_IsIdleRPM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IdleReached != nullptr)
		*IdleReached = Parms.IdleReached;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsLocked?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::IsLocked_(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IsLocked?");

	Params::BP_RB_Vehicle_C_IsLocked_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.IsVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVehicle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::IsVehicle(bool* Param_IsVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "IsVehicle");

	Params::BP_RB_Vehicle_C_IsVehicle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsVehicle != nullptr)
		*Param_IsVehicle = Parms.Param_IsVehicle;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MagneticForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USphereComponent*                 Wheel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MagneticForce(class USphereComponent* Wheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MagneticForce");

	Params::BP_RB_Vehicle_C_MagneticForce Parms{};

	Parms.Wheel = Wheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallDecreaseDurability
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MultiCallDecreaseDurability(double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MultiCallDecreaseDurability");

	Params::BP_RB_Vehicle_C_MultiCallDecreaseDurability Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallEngineStartFail
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::MultiCallEngineStartFail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MultiCallEngineStartFail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MulticallEnterVehicleAsDriver
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MulticallEnterVehicleAsDriver(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MulticallEnterVehicleAsDriver");

	Params::BP_RB_Vehicle_C_MulticallEnterVehicleAsDriver Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MulticallEnterVehicleAsPassenger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MulticallEnterVehicleAsPassenger(class APawn* Player, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MulticallEnterVehicleAsPassenger");

	Params::BP_RB_Vehicle_C_MulticallEnterVehicleAsPassenger Parms{};

	Parms.Player = Player;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallExitVehicle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MultiCallExitVehicle(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MultiCallExitVehicle");

	Params::BP_RB_Vehicle_C_MultiCallExitVehicle Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallSerWheelBroken
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MultiCallSerWheelBroken(bool NewBroken, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MultiCallSerWheelBroken");

	Params::BP_RB_Vehicle_C_MultiCallSerWheelBroken Parms{};

	Parms.NewBroken = NewBroken;
	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiCallTurnFrontLight
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::MultiCallTurnFrontLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MultiCallTurnFrontLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.MultiClientDied
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::MultiClientDied(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "MultiClientDied");

	Params::BP_RB_Vehicle_C_MultiClientDied Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Noise
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::Noise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Noise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.NotifyQuestEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           QuestEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::NotifyQuestEvent(const class FString& QuestEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "NotifyQuestEvent");

	Params::BP_RB_Vehicle_C_NotifyQuestEvent Parms{};

	Parms.QuestEvent = std::move(QuestEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.NotifyVehicleEngineTurnOn
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::NotifyVehicleEngineTurnOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "NotifyVehicleEngineTurnOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnBeginInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnBeginInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnBeginInteract");

	Params::BP_RB_Vehicle_C_OnBeginInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnFocused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HighlightActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HighlightActorComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// E_InteractType                          InteractType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LateTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnFocused");

	Params::BP_RB_Vehicle_C_OnFocused Parms{};

	Parms.Player = Player;
	Parms.HighlightActor = HighlightActor;
	Parms.HighlightActorComponent = HighlightActorComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractType != nullptr)
		*InteractType = Parms.InteractType;

	if (LateTime != nullptr)
		*LateTime = Parms.LateTime;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnInteract");

	Params::BP_RB_Vehicle_C_OnInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteract2
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnInteract2(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnInteract2");

	Params::BP_RB_Vehicle_C_OnInteract2 Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteract3
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnInteract3(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnInteract3");

	Params::BP_RB_Vehicle_C_OnInteract3 Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnInteractVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnInteractVehicle");

	Params::BP_RB_Vehicle_C_OnInteractVehicle Parms{};

	Parms.Player = Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLevelLoaded
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnLevelLoaded(class FName LevelName, class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnLevelLoaded");

	Params::BP_RB_Vehicle_C_OnLevelLoaded Parms{};

	Parms.LevelName = LevelName;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLevelUnloaded
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LevelName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnLevelUnloaded(class FName LevelName, class AActor* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnLevelUnloaded");

	Params::BP_RB_Vehicle_C_OnLevelUnloaded Parms{};

	Parms.LevelName = LevelName;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLocalInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnLocalInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnLocalInteract");

	Params::BP_RB_Vehicle_C_OnLocalInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnLostFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnLostFocus(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnLostFocus");

	Params::BP_RB_Vehicle_C_OnLostFocus Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnRep_EngineStarted
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::OnRep_EngineStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnRep_EngineStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnRep_IsDriving
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::OnRep_IsDriving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnRep_IsDriving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnRep_VehicleState
// (HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::OnRep_VehicleState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnRep_VehicleState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnSeen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnSeen(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnSeen");

	Params::BP_RB_Vehicle_C_OnSeen Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnSquadCheckComplete
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::OnSquadCheckComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnSquadCheckComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnStopInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OnStopInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnStopInteract");

	Params::BP_RB_Vehicle_C_OnStopInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OnTabsClose
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::OnTabsClose()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OnTabsClose");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OpenCarUpgradeMenu
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::OpenCarUpgradeMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OpenCarUpgradeMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OverlapOtherActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Other                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    NeedDamage                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OverlapOtherActor(class AActor* Other, const struct FHitResult& SweepResult, bool* NeedDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OverlapOtherActor");

	Params::BP_RB_Vehicle_C_OverlapOtherActor Parms{};

	Parms.Other = Other;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);

	if (NeedDamage != nullptr)
		*NeedDamage = Parms.NeedDamage;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.OverlapRadialForce
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::OverlapRadialForce(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "OverlapRadialForce");

	Params::BP_RB_Vehicle_C_OverlapRadialForce Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PhysicsTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   SubstepDeltaTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::PhysicsTick(float SubstepDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PhysicsTick");

	Params::BP_RB_Vehicle_C_PhysicsTick Parms{};

	Parms.SubstepDeltaTime = SubstepDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioByTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Param_Tags                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::PlayAudioByTag(TArray<class FName>& Param_Tags, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayAudioByTag");

	Params::BP_RB_Vehicle_C_PlayAudioByTag Parms{};

	Parms.Param_Tags = std::move(Param_Tags);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	Param_Tags = std::move(Parms.Param_Tags);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioEnterVehicle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::PlayAudioEnterVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayAudioEnterVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioExitVehicle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::PlayAudioExitVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayAudioExitVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioHandbrake
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::PlayAudioHandbrake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayAudioHandbrake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioStartEngine
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::PlayAudioStartEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayAudioStartEngine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayAudioStopEngine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCrash                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::PlayAudioStopEngine(bool IsCrash)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayAudioStopEngine");

	Params::BP_RB_Vehicle_C_PlayAudioStopEngine Parms{};

	Parms.IsCrash = IsCrash;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.PlayerHealthEnded
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::PlayerHealthEnded(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "PlayerHealthEnded");

	Params::BP_RB_Vehicle_C_PlayerHealthEnded Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ReceiveAnyDamage");

	Params::BP_RB_Vehicle_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_RB_Vehicle_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ReceiveTick");

	Params::BP_RB_Vehicle_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.RepairDeformation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::RepairDeformation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "RepairDeformation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Reverse
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReverse                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::Reverse(bool IsReverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Reverse");

	Params::BP_RB_Vehicle_C_Reverse Parms{};

	Parms.IsReverse = IsReverse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Run Lockpicking
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::Run_Lockpicking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Run Lockpicking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallDecreaseDurability
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerCallDecreaseDurability(double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallDecreaseDurability");

	Params::BP_RB_Vehicle_C_ServerCallDecreaseDurability Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallExitVehicle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerCallExitVehicle(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallExitVehicle");

	Params::BP_RB_Vehicle_C_ServerCallExitVehicle Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallSendVehicleState
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_VehicleState                  Param_VehicleState                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerCallSendVehicleState(const struct FS_VehicleState& Param_VehicleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallSendVehicleState");

	Params::BP_RB_Vehicle_C_ServerCallSendVehicleState Parms{};

	Parms.Param_VehicleState = std::move(Param_VehicleState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallSetVehicleSit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Item_Is_Busy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Item_Sitter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerCallSetVehicleSit(int32 Param_Index, bool Item_Is_Busy, class APawn* Item_Sitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallSetVehicleSit");

	Params::BP_RB_Vehicle_C_ServerCallSetVehicleSit Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Item_Is_Busy = Item_Is_Busy;
	Parms.Item_Sitter = Item_Sitter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallSetWheelBroken
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerCallSetWheelBroken(bool NewBroken, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallSetWheelBroken");

	Params::BP_RB_Vehicle_C_ServerCallSetWheelBroken Parms{};

	Parms.NewBroken = NewBroken;
	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallTurnFrontLight
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::ServerCallTurnFrontLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallTurnFrontLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallTurnOff
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::ServerCallTurnOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallTurnOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerCallTurnOn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::ServerCallTurnOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerCallTurnOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerSideEnterVehicleAsDriver
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerSideEnterVehicleAsDriver(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerSideEnterVehicleAsDriver");

	Params::BP_RB_Vehicle_C_ServerSideEnterVehicleAsDriver Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ServerSideEnterVehicleAsPassenger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ServerSideEnterVehicleAsPassenger(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ServerSideEnterVehicleAsPassenger");

	Params::BP_RB_Vehicle_C_ServerSideEnterVehicleAsPassenger Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Set3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::Set3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Set3DWidgetVisibility");

	Params::BP_RB_Vehicle_C_Set3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetBackLightIntencity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBrake                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetBackLightIntencity(bool IsBrake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetBackLightIntencity");

	Params::BP_RB_Vehicle_C_SetBackLightIntencity Parms{};

	Parms.IsBrake = IsBrake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetBrakeInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetBrakeInput(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetBrakeInput");

	Params::BP_RB_Vehicle_C_SetBrakeInput Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetEnablePhysics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnabled                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetEnablePhysics(bool NewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetEnablePhysics");

	Params::BP_RB_Vehicle_C_SetEnablePhysics Parms{};

	Parms.NewEnabled = NewEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetEnablePhysicsComponents
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bSimulate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetEnablePhysicsComponents(bool bSimulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetEnablePhysicsComponents");

	Params::BP_RB_Vehicle_C_SetEnablePhysicsComponents Parms{};

	Parms.bSimulate = bSimulate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetHandbrakeInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHandbrake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetHandbrakeInput(bool IsHandbrake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetHandbrakeInput");

	Params::BP_RB_Vehicle_C_SetHandbrakeInput Parms{};

	Parms.IsHandbrake = IsHandbrake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetSteeringInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetSteeringInput(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetSteeringInput");

	Params::BP_RB_Vehicle_C_SetSteeringInput Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetThrottleInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetThrottleInput(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetThrottleInput");

	Params::BP_RB_Vehicle_C_SetThrottleInput Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetTick(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetTick");

	Params::BP_RB_Vehicle_C_SetTick Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetTutorial3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetTutorial3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetTutorial3DWidgetVisibility");

	Params::BP_RB_Vehicle_C_SetTutorial3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SetWheelBroken
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewBroken                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SetWheelBroken(bool NewBroken, int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SetWheelBroken");

	Params::BP_RB_Vehicle_C_SetWheelBroken Parms{};

	Parms.NewBroken = NewBroken;
	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.ShowWidgets
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanEnterVehicle                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::ShowWidgets(bool CanEnterVehicle, class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "ShowWidgets");

	Params::BP_RB_Vehicle_C_ShowWidgets Parms{};

	Parms.CanEnterVehicle = CanEnterVehicle;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.StartUnrolling
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::StartUnrolling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "StartUnrolling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SteeringWheel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SteeringWheel(double Input, double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SteeringWheel");

	Params::BP_RB_Vehicle_C_SteeringWheel Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SteeringWheelToZero
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::SteeringWheelToZero(double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SteeringWheelToZero");

	Params::BP_RB_Vehicle_C_SteeringWheelToZero Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.StoreConstraintForces
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::StoreConstraintForces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "StoreConstraintForces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.SwingingBody
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::SwingingBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "SwingingBody");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Throttle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::Throttle(double Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Throttle");

	Params::BP_RB_Vehicle_C_Throttle Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.TurnBackLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::TurnBackLight(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "TurnBackLight");

	Params::BP_RB_Vehicle_C_TurnBackLight Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.TurnFrontLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::TurnFrontLight(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "TurnFrontLight");

	Params::BP_RB_Vehicle_C_TurnFrontLight Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UnhandleClientEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_RB_Vehicle_C::UnhandleClientEvent(class ASurvivalPlayer_C* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UnhandleClientEvent");

	Params::BP_RB_Vehicle_C_UnhandleClientEvent Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Unroll
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::Unroll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Unroll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Unrolling
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::Unrolling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Unrolling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.Update Audio Engine Wheel Speed
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::Update_Audio_Engine_Wheel_Speed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "Update Audio Engine Wheel Speed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateAudioEngine
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UpdateAudioEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UpdateAudioEngine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateAudioSuspension
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UpdateAudioSuspension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UpdateAudioSuspension");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateExhaust
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UpdateExhaust()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UpdateExhaust");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateExhaustCriticalState
// (BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UpdateExhaustCriticalState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UpdateExhaustCriticalState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdatePhysics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UpdatePhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UpdatePhysics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UpdateWheelPitches
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UpdateWheelPitches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UpdateWheelPitches");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_RB_Vehicle.BP_RB_Vehicle_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_RB_Vehicle_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_RB_Vehicle_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

