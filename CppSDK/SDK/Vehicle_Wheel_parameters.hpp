#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Vehicle_Wheel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "VehicleSystemPlugin_structs.hpp"
#include "SpeedUnit_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SurfaceEffectConfig_structs.hpp"


namespace SDK::Params
{

// Function Vehicle_Wheel.Vehicle_Wheel_C.Attach
// 0x0005 (0x0005 - 0x0000)
struct Vehicle_Wheel_C_Attach final
{
public:
	bool                                          Param_ResetPosition;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Force;                                             // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_Attach) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_Attach");
static_assert(sizeof(Vehicle_Wheel_C_Attach) == 0x000005, "Wrong size on Vehicle_Wheel_C_Attach");
static_assert(offsetof(Vehicle_Wheel_C_Attach, Param_ResetPosition) == 0x000000, "Member 'Vehicle_Wheel_C_Attach::Param_ResetPosition' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Attach, Force) == 0x000001, "Member 'Vehicle_Wheel_C_Attach::Force' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Attach, Temp_bool_Variable) == 0x000002, "Member 'Vehicle_Wheel_C_Attach::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Attach, Temp_bool_Variable_1) == 0x000003, "Member 'Vehicle_Wheel_C_Attach::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Attach, K2Node_Select_Default) == 0x000004, "Member 'Vehicle_Wheel_C_Attach::K2Node_Select_Default' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.BreakAttachment
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_BreakAttachment final
{
public:
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_BreakAttachment) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_BreakAttachment");
static_assert(sizeof(Vehicle_Wheel_C_BreakAttachment) == 0x000010, "Wrong size on Vehicle_Wheel_C_BreakAttachment");
static_assert(offsetof(Vehicle_Wheel_C_BreakAttachment, CallFunc_GetWheelMesh_WheelMesh) == 0x000000, "Member 'Vehicle_Wheel_C_BreakAttachment::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_BreakAttachment, CallFunc_GetWheelMode_ReturnValue) == 0x000008, "Member 'Vehicle_Wheel_C_BreakAttachment::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_BreakAttachment, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'Vehicle_Wheel_C_BreakAttachment::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.CalculateSkidAmount
// 0x0068 (0x0068 - 0x0000)
struct Vehicle_Wheel_C_CalculateSkidAmount final
{
public:
	struct FVector                                WheelVelocity;                                     // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWheelVelocity_ReturnValue;             // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector3f_X;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector3f_Y;                          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector3f_Z;                          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsLocked_isLocked;                     // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSizeXY_ReturnValue;                      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector3f                              CallFunc_BreakVector3f_InVec_ImplicitCast;         // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_CalculateSkidAmount) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_CalculateSkidAmount");
static_assert(sizeof(Vehicle_Wheel_C_CalculateSkidAmount) == 0x000068, "Wrong size on Vehicle_Wheel_C_CalculateSkidAmount");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, WheelVelocity) == 0x000000, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::WheelVelocity' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_GetWheelVelocity_ReturnValue) == 0x000018, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_GetWheelVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_BreakVector3f_X) == 0x000030, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_BreakVector3f_X' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_BreakVector3f_Y) == 0x000034, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_BreakVector3f_Y' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_BreakVector3f_Z) == 0x000038, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_BreakVector3f_Z' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_GetIsLocked_isLocked) == 0x00003C, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_GetIsLocked_isLocked' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_VSizeXY_ReturnValue) == 0x000048, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000050, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_BreakVector3f_InVec_ImplicitCast) == 0x000054, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_BreakVector3f_InVec_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidAmount, CallFunc_Abs_A_ImplicitCast) == 0x000060, "Member 'Vehicle_Wheel_C_CalculateSkidAmount::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.CalculateSkidDirection
// 0x0168 (0x0168 - 0x0000)
struct Vehicle_Wheel_C_CalculateSkidDirection final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WheelForward;                                      // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               MarkDirection;                                     // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          VelocityInverted;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RelativeVelocity;                                  // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_CalculateSkidDirection) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_CalculateSkidDirection");
static_assert(sizeof(Vehicle_Wheel_C_CalculateSkidDirection) == 0x000168, "Wrong size on Vehicle_Wheel_C_CalculateSkidDirection");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, Velocity) == 0x000000, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::Velocity' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, WheelForward) == 0x000018, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::WheelForward' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, MarkDirection) == 0x000030, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::MarkDirection' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, VelocityInverted) == 0x000048, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::VelocityInverted' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, RelativeVelocity) == 0x000050, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::RelativeVelocity' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_ComposeRotators_ReturnValue) == 0x000068, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Roll) == 0x000080, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Pitch) == 0x000084, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Yaw) == 0x000088, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_ComposeRotators_ReturnValue_1) == 0x000090, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_Abs_ReturnValue) == 0x0000A8, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000B8, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x0000D0, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, Temp_bool_Variable) == 0x0000E8, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, K2Node_Select_Default) == 0x0000F0, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Roll_1) == 0x000108, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Pitch_1) == 0x00010C, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Yaw_1) == 0x000110, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Roll_2) == 0x000114, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Pitch_2) == 0x000118, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_BreakRotator_Yaw_2) == 0x00011C, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_MapRangeClamped_ReturnValue) == 0x000120, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000128, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_MakeRotator_ReturnValue) == 0x000130, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_Abs_A_ImplicitCast) == 0x000148, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000150, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000158, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CalculateSkidDirection, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000160, "Member 'Vehicle_Wheel_C_CalculateSkidDirection::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ChangePassiveState
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_ChangePassiveState final
{
public:
	bool                                          NewPassive;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_ChangePassiveState) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_ChangePassiveState");
static_assert(sizeof(Vehicle_Wheel_C_ChangePassiveState) == 0x000001, "Wrong size on Vehicle_Wheel_C_ChangePassiveState");
static_assert(offsetof(Vehicle_Wheel_C_ChangePassiveState, NewPassive) == 0x000000, "Member 'Vehicle_Wheel_C_ChangePassiveState::NewPassive' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ChangeStaticMesh
// 0x0070 (0x0070 - 0x0000)
struct Vehicle_Wheel_C_ChangeStaticMesh final
{
public:
	class UStaticMesh*                            NewMesh;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WheelMeshComp;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_CreateWheelMesh_NewMesh;                  // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             CallFunc_GetMaterials_ReturnValue;                 // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   K2Node_DynamicCast_AsStatic_Mesh_Component;        // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_ChangeStaticMesh) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_ChangeStaticMesh");
static_assert(sizeof(Vehicle_Wheel_C_ChangeStaticMesh) == 0x000070, "Wrong size on Vehicle_Wheel_C_ChangeStaticMesh");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, NewMesh) == 0x000000, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::NewMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, WheelMeshComp) == 0x000008, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::WheelMeshComp' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, Temp_int_Array_Index_Variable) == 0x000014, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_IsValid_ReturnValue_2) == 0x000019, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_GetVehicleMesh_Mesh) == 0x000020, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000028, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_CreateWheelMesh_NewMesh) == 0x000030, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_CreateWheelMesh_NewMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000040, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_GetMaterials_ReturnValue) == 0x000048, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_GetMaterials_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, K2Node_DynamicCast_AsStatic_Mesh_Component) == 0x000060, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::K2Node_DynamicCast_AsStatic_Mesh_Component' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ChangeStaticMesh, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'Vehicle_Wheel_C_ChangeStaticMesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.CleanupForDestroy
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_CleanupForDestroy final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_CleanupForDestroy) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_CleanupForDestroy");
static_assert(sizeof(Vehicle_Wheel_C_CleanupForDestroy) == 0x000001, "Wrong size on Vehicle_Wheel_C_CleanupForDestroy");
static_assert(offsetof(Vehicle_Wheel_C_CleanupForDestroy, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_CleanupForDestroy::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.CleanupSkidParticle
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_CleanupSkidParticle final
{
public:
	bool                                          CallFunc_GetHasContact_ReturnValue;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_CleanupSkidParticle) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_CleanupSkidParticle");
static_assert(sizeof(Vehicle_Wheel_C_CleanupSkidParticle) == 0x000001, "Wrong size on Vehicle_Wheel_C_CleanupSkidParticle");
static_assert(offsetof(Vehicle_Wheel_C_CleanupSkidParticle, CallFunc_GetHasContact_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_CleanupSkidParticle::CallFunc_GetHasContact_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ClearActiveParticle
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_ClearActiveParticle final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_ClearActiveParticle) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_ClearActiveParticle");
static_assert(sizeof(Vehicle_Wheel_C_ClearActiveParticle) == 0x000001, "Wrong size on Vehicle_Wheel_C_ClearActiveParticle");
static_assert(offsetof(Vehicle_Wheel_C_ClearActiveParticle, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_ClearActiveParticle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.Construct
// 0x00B0 (0x00B0 - 0x0000)
struct Vehicle_Wheel_C_Construct final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetChildComponent_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicle_Wheel_C*                       K2Node_DynamicCast_AsVehicle_Wheel;                // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component;          // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_GetAttachParent_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_DynamicCast_AsPrimitive_Component_1;        // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_Construct) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_Construct");
static_assert(sizeof(Vehicle_Wheel_C_Construct) == 0x0000B0, "Wrong size on Vehicle_Wheel_C_Construct");
static_assert(offsetof(Vehicle_Wheel_C_Construct, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_Construct::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_Construct::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, CallFunc_GetChildComponent_ReturnValue) == 0x000008, "Member 'Vehicle_Wheel_C_Construct::CallFunc_GetChildComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, K2Node_DynamicCast_AsVehicle_Wheel) == 0x000010, "Member 'Vehicle_Wheel_C_Construct::K2Node_DynamicCast_AsVehicle_Wheel' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'Vehicle_Wheel_C_Construct::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, CallFunc_GetRelativeTransform_ReturnValue) == 0x000020, "Member 'Vehicle_Wheel_C_Construct::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, K2Node_DynamicCast_AsPrimitive_Component) == 0x000080, "Member 'Vehicle_Wheel_C_Construct::K2Node_DynamicCast_AsPrimitive_Component' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, K2Node_DynamicCast_bSuccess_1) == 0x000088, "Member 'Vehicle_Wheel_C_Construct::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, CallFunc_GetAttachParent_ReturnValue) == 0x000090, "Member 'Vehicle_Wheel_C_Construct::CallFunc_GetAttachParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, K2Node_DynamicCast_AsPrimitive_Component_1) == 0x000098, "Member 'Vehicle_Wheel_C_Construct::K2Node_DynamicCast_AsPrimitive_Component_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_Construct, K2Node_DynamicCast_bSuccess_2) == 0x0000A0, "Member 'Vehicle_Wheel_C_Construct::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.CreatePhysConstraints
// 0x0020 (0x0020 - 0x0000)
struct Vehicle_Wheel_C_CreatePhysConstraints final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleConstraint*                     CallFunc_CreateNewConstraint_VehicleConstraint;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UVehicleConstraint*                     CallFunc_CreateNewConstraint_VehicleConstraint_1;  // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_CreatePhysConstraints) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_CreatePhysConstraints");
static_assert(sizeof(Vehicle_Wheel_C_CreatePhysConstraints) == 0x000020, "Wrong size on Vehicle_Wheel_C_CreatePhysConstraints");
static_assert(offsetof(Vehicle_Wheel_C_CreatePhysConstraints, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_CreatePhysConstraints::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreatePhysConstraints, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'Vehicle_Wheel_C_CreatePhysConstraints::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreatePhysConstraints, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000002, "Member 'Vehicle_Wheel_C_CreatePhysConstraints::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreatePhysConstraints, CallFunc_CreateNewConstraint_VehicleConstraint) == 0x000008, "Member 'Vehicle_Wheel_C_CreatePhysConstraints::CallFunc_CreateNewConstraint_VehicleConstraint' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreatePhysConstraints, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x000010, "Member 'Vehicle_Wheel_C_CreatePhysConstraints::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreatePhysConstraints, CallFunc_CreateNewConstraint_VehicleConstraint_1) == 0x000018, "Member 'Vehicle_Wheel_C_CreatePhysConstraints::CallFunc_CreateNewConstraint_VehicleConstraint_1' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.CreateWheelController
// 0x0070 (0x0070 - 0x0000)
struct Vehicle_Wheel_C_CreateWheelController final
{
public:
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CallFunc_CreateNewWheelController_Mesh;            // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_CreateWheelController) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_CreateWheelController");
static_assert(sizeof(Vehicle_Wheel_C_CreateWheelController) == 0x000070, "Wrong size on Vehicle_Wheel_C_CreateWheelController");
static_assert(offsetof(Vehicle_Wheel_C_CreateWheelController, CallFunc_GetRelativeTransform_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_CreateWheelController::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreateWheelController, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'Vehicle_Wheel_C_CreateWheelController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_CreateWheelController, CallFunc_CreateNewWheelController_Mesh) == 0x000068, "Member 'Vehicle_Wheel_C_CreateWheelController::CallFunc_CreateNewWheelController_Mesh' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.DebugWarningOrError
// 0x0078 (0x0078 - 0x0000)
struct Vehicle_Wheel_C_DebugWarningOrError final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Error_;                                            // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_DebugWarningOrError) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_DebugWarningOrError");
static_assert(sizeof(Vehicle_Wheel_C_DebugWarningOrError) == 0x000078, "Wrong size on Vehicle_Wheel_C_DebugWarningOrError");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, Message) == 0x000000, "Member 'Vehicle_Wheel_C_DebugWarningOrError::Message' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, Error_) == 0x000010, "Member 'Vehicle_Wheel_C_DebugWarningOrError::Error_' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, Temp_bool_Variable) == 0x000011, "Member 'Vehicle_Wheel_C_DebugWarningOrError::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, Temp_struct_Variable) == 0x000014, "Member 'Vehicle_Wheel_C_DebugWarningOrError::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, Temp_struct_Variable_1) == 0x000024, "Member 'Vehicle_Wheel_C_DebugWarningOrError::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, CallFunc_GetDisplayName_ReturnValue) == 0x000038, "Member 'Vehicle_Wheel_C_DebugWarningOrError::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, K2Node_Select_Default) == 0x000048, "Member 'Vehicle_Wheel_C_DebugWarningOrError::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'Vehicle_Wheel_C_DebugWarningOrError::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DebugWarningOrError, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000068, "Member 'Vehicle_Wheel_C_DebugWarningOrError::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.DestroyPhysConstraints
// 0x0003 (0x0003 - 0x0000)
struct Vehicle_Wheel_C_DestroyPhysConstraints final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_DestroyPhysConstraints) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_DestroyPhysConstraints");
static_assert(sizeof(Vehicle_Wheel_C_DestroyPhysConstraints) == 0x000003, "Wrong size on Vehicle_Wheel_C_DestroyPhysConstraints");
static_assert(offsetof(Vehicle_Wheel_C_DestroyPhysConstraints, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_DestroyPhysConstraints::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DestroyPhysConstraints, CallFunc_IsValid_ReturnValue_1) == 0x000001, "Member 'Vehicle_Wheel_C_DestroyPhysConstraints::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_DestroyPhysConstraints, CallFunc_IsValid_ReturnValue_2) == 0x000002, "Member 'Vehicle_Wheel_C_DestroyPhysConstraints::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.Detach
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_Detach final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_Detach) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_Detach");
static_assert(sizeof(Vehicle_Wheel_C_Detach) == 0x000001, "Wrong size on Vehicle_Wheel_C_Detach");
static_assert(offsetof(Vehicle_Wheel_C_Detach, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_Detach::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ExecuteUbergraph_Vehicle_Wheel
// 0x000C (0x000C - 0x0000)
struct Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewPassive;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel) == 0x000004, "Wrong alignment on Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel");
static_assert(sizeof(Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel) == 0x00000C, "Wrong size on Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel");
static_assert(offsetof(Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel, EntryPoint) == 0x000000, "Member 'Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel::EntryPoint' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel, K2Node_CustomEvent_NewPassive) == 0x000004, "Member 'Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel::K2Node_CustomEvent_NewPassive' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel, K2Node_Event_EndPlayReason) == 0x000005, "Member 'Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'Vehicle_Wheel_C_ExecuteUbergraph_Vehicle_Wheel::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetBrakePressure
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_GetBrakePressure final
{
public:
	double                                        BrakePressure;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_BrakePressure_ImplicitCast;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetBrakePressure) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetBrakePressure");
static_assert(sizeof(Vehicle_Wheel_C_GetBrakePressure) == 0x000010, "Wrong size on Vehicle_Wheel_C_GetBrakePressure");
static_assert(offsetof(Vehicle_Wheel_C_GetBrakePressure, BrakePressure) == 0x000000, "Member 'Vehicle_Wheel_C_GetBrakePressure::BrakePressure' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetBrakePressure, K2Node_FunctionResult_BrakePressure_ImplicitCast) == 0x000008, "Member 'Vehicle_Wheel_C_GetBrakePressure::K2Node_FunctionResult_BrakePressure_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetConstraints
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_GetConstraints final
{
public:
	class UVehicleConstraint*                     Param_TurnConstraint;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     Param_SpringConstraint;                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetConstraints) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetConstraints");
static_assert(sizeof(Vehicle_Wheel_C_GetConstraints) == 0x000010, "Wrong size on Vehicle_Wheel_C_GetConstraints");
static_assert(offsetof(Vehicle_Wheel_C_GetConstraints, Param_TurnConstraint) == 0x000000, "Member 'Vehicle_Wheel_C_GetConstraints::Param_TurnConstraint' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetConstraints, Param_SpringConstraint) == 0x000008, "Member 'Vehicle_Wheel_C_GetConstraints::Param_SpringConstraint' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetEffectsForSurface
// 0x0058 (0x0058 - 0x0000)
struct Vehicle_Wheel_C_GetEffectsForSurface final
{
public:
	EPhysicalSurface                              Surface;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Param_SkidSound;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Param_SkidParticle;                                // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FoundParticle;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FoundSound;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSurfaceEffectConfig                   CallFunc_Array_Get_Item;                           // 0x0038(0x0018)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetEffectsForSurface) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetEffectsForSurface");
static_assert(sizeof(Vehicle_Wheel_C_GetEffectsForSurface) == 0x000058, "Wrong size on Vehicle_Wheel_C_GetEffectsForSurface");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, Surface) == 0x000000, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::Surface' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, Param_SkidSound) == 0x000008, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::Param_SkidSound' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, Param_SkidParticle) == 0x000010, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::Param_SkidParticle' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, FoundParticle) == 0x000018, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::FoundParticle' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, FoundSound) == 0x000020, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::FoundSound' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, Temp_bool_True_if_break_was_hit_Variable) == 0x000028, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000029, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_Not_PreBool_ReturnValue) == 0x00002A, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_Array_Get_Item) == 0x000038, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_BooleanAND_ReturnValue) == 0x000055, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetEffectsForSurface, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000056, "Member 'Vehicle_Wheel_C_GetEffectsForSurface::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetInvertTorque
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_GetInvertTorque final
{
public:
	bool                                          IsInvertedTorque;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetInvertTorque) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_GetInvertTorque");
static_assert(sizeof(Vehicle_Wheel_C_GetInvertTorque) == 0x000001, "Wrong size on Vehicle_Wheel_C_GetInvertTorque");
static_assert(offsetof(Vehicle_Wheel_C_GetInvertTorque, IsInvertedTorque) == 0x000000, "Member 'Vehicle_Wheel_C_GetInvertTorque::IsInvertedTorque' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsBrakeLocked
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_GetIsBrakeLocked final
{
public:
	bool                                          Param_IsBrakeLocked;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetIsBrakeLocked) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_GetIsBrakeLocked");
static_assert(sizeof(Vehicle_Wheel_C_GetIsBrakeLocked) == 0x000001, "Wrong size on Vehicle_Wheel_C_GetIsBrakeLocked");
static_assert(offsetof(Vehicle_Wheel_C_GetIsBrakeLocked, Param_IsBrakeLocked) == 0x000000, "Member 'Vehicle_Wheel_C_GetIsBrakeLocked::Param_IsBrakeLocked' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsDrivingWheel
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_GetIsDrivingWheel final
{
public:
	bool                                          IsDrivingWheel;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetIsDrivingWheel) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_GetIsDrivingWheel");
static_assert(sizeof(Vehicle_Wheel_C_GetIsDrivingWheel) == 0x000001, "Wrong size on Vehicle_Wheel_C_GetIsDrivingWheel");
static_assert(offsetof(Vehicle_Wheel_C_GetIsDrivingWheel, IsDrivingWheel) == 0x000000, "Member 'Vehicle_Wheel_C_GetIsDrivingWheel::IsDrivingWheel' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsHandbrakeWheel
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_GetIsHandbrakeWheel final
{
public:
	bool                                          IsHandbrakeWheel;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetIsHandbrakeWheel) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_GetIsHandbrakeWheel");
static_assert(sizeof(Vehicle_Wheel_C_GetIsHandbrakeWheel) == 0x000001, "Wrong size on Vehicle_Wheel_C_GetIsHandbrakeWheel");
static_assert(offsetof(Vehicle_Wheel_C_GetIsHandbrakeWheel, IsHandbrakeWheel) == 0x000000, "Member 'Vehicle_Wheel_C_GetIsHandbrakeWheel::IsHandbrakeWheel' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetIsLocked
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_GetIsLocked final
{
public:
	bool                                          Param_IsLocked;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetIsLocked) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_GetIsLocked");
static_assert(sizeof(Vehicle_Wheel_C_GetIsLocked) == 0x000001, "Wrong size on Vehicle_Wheel_C_GetIsLocked");
static_assert(offsetof(Vehicle_Wheel_C_GetIsLocked, Param_IsLocked) == 0x000000, "Member 'Vehicle_Wheel_C_GetIsLocked::Param_IsLocked' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetLastTouch
// 0x00E8 (0x00E8 - 0x0000)
struct Vehicle_Wheel_C_GetLastTouch final
{
public:
	struct FHitResult                             LastTouch;                                         // 0x0000(0x00E8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Vehicle_Wheel_C_GetLastTouch) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetLastTouch");
static_assert(sizeof(Vehicle_Wheel_C_GetLastTouch) == 0x0000E8, "Wrong size on Vehicle_Wheel_C_GetLastTouch");
static_assert(offsetof(Vehicle_Wheel_C_GetLastTouch, LastTouch) == 0x000000, "Member 'Vehicle_Wheel_C_GetLastTouch::LastTouch' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetProjectedMesh
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_GetProjectedMesh final
{
public:
	class UPrimitiveComponent*                    Param_ProjectedMesh;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetProjectedMesh) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetProjectedMesh");
static_assert(sizeof(Vehicle_Wheel_C_GetProjectedMesh) == 0x000008, "Wrong size on Vehicle_Wheel_C_GetProjectedMesh");
static_assert(offsetof(Vehicle_Wheel_C_GetProjectedMesh, Param_ProjectedMesh) == 0x000000, "Member 'Vehicle_Wheel_C_GetProjectedMesh::Param_ProjectedMesh' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetRollingResistance
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_GetRollingResistance final
{
public:
	double                                        RollingResistance;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_RollingResistance_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetRollingResistance) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetRollingResistance");
static_assert(sizeof(Vehicle_Wheel_C_GetRollingResistance) == 0x000010, "Wrong size on Vehicle_Wheel_C_GetRollingResistance");
static_assert(offsetof(Vehicle_Wheel_C_GetRollingResistance, RollingResistance) == 0x000000, "Member 'Vehicle_Wheel_C_GetRollingResistance::RollingResistance' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetRollingResistance, K2Node_FunctionResult_RollingResistance_ImplicitCast) == 0x000008, "Member 'Vehicle_Wheel_C_GetRollingResistance::K2Node_FunctionResult_RollingResistance_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetRotationSpeed
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_GetRotationSpeed final
{
public:
	double                                        Param_RotationSpeed;                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetRotationSpeed) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetRotationSpeed");
static_assert(sizeof(Vehicle_Wheel_C_GetRotationSpeed) == 0x000008, "Wrong size on Vehicle_Wheel_C_GetRotationSpeed");
static_assert(offsetof(Vehicle_Wheel_C_GetRotationSpeed, Param_RotationSpeed) == 0x000000, "Member 'Vehicle_Wheel_C_GetRotationSpeed::Param_RotationSpeed' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetSpringLength
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_GetSpringLength final
{
public:
	double                                        SpringLength;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_SpringLength_ImplicitCast;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetSpringLength) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetSpringLength");
static_assert(sizeof(Vehicle_Wheel_C_GetSpringLength) == 0x000010, "Wrong size on Vehicle_Wheel_C_GetSpringLength");
static_assert(offsetof(Vehicle_Wheel_C_GetSpringLength, SpringLength) == 0x000000, "Member 'Vehicle_Wheel_C_GetSpringLength::SpringLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetSpringLength, K2Node_FunctionResult_SpringLength_ImplicitCast) == 0x000008, "Member 'Vehicle_Wheel_C_GetSpringLength::K2Node_FunctionResult_SpringLength_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetSuspensionPreview
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_GetSuspensionPreview final
{
public:
	bool                                          EditorPreview;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetSuspensionPreview) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_GetSuspensionPreview");
static_assert(sizeof(Vehicle_Wheel_C_GetSuspensionPreview) == 0x000001, "Wrong size on Vehicle_Wheel_C_GetSuspensionPreview");
static_assert(offsetof(Vehicle_Wheel_C_GetSuspensionPreview, EditorPreview) == 0x000000, "Member 'Vehicle_Wheel_C_GetSuspensionPreview::EditorPreview' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetSuspensionSettings
// 0x0018 (0x0018 - 0x0000)
struct Vehicle_Wheel_C_GetSuspensionSettings final
{
public:
	float                                         SpringLength;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringStrength;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringDamping;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_PhysicsDownforce;                            // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetSuspensionSettings) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetSuspensionSettings");
static_assert(sizeof(Vehicle_Wheel_C_GetSuspensionSettings) == 0x000018, "Wrong size on Vehicle_Wheel_C_GetSuspensionSettings");
static_assert(offsetof(Vehicle_Wheel_C_GetSuspensionSettings, SpringLength) == 0x000000, "Member 'Vehicle_Wheel_C_GetSuspensionSettings::SpringLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetSuspensionSettings, SpringStrength) == 0x000004, "Member 'Vehicle_Wheel_C_GetSuspensionSettings::SpringStrength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetSuspensionSettings, SpringDamping) == 0x000008, "Member 'Vehicle_Wheel_C_GetSuspensionSettings::SpringDamping' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetSuspensionSettings, Param_PhysicsDownforce) == 0x000010, "Member 'Vehicle_Wheel_C_GetSuspensionSettings::Param_PhysicsDownforce' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelController
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_GetWheelController final
{
public:
	class UPrimitiveComponent*                    ControllerMesh;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetWheelController) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetWheelController");
static_assert(sizeof(Vehicle_Wheel_C_GetWheelController) == 0x000008, "Wrong size on Vehicle_Wheel_C_GetWheelController");
static_assert(offsetof(Vehicle_Wheel_C_GetWheelController, ControllerMesh) == 0x000000, "Member 'Vehicle_Wheel_C_GetWheelController::ControllerMesh' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelMesh
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_GetWheelMesh final
{
public:
	class UPrimitiveComponent*                    WheelMesh;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetWheelMesh) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetWheelMesh");
static_assert(sizeof(Vehicle_Wheel_C_GetWheelMesh) == 0x000008, "Wrong size on Vehicle_Wheel_C_GetWheelMesh");
static_assert(offsetof(Vehicle_Wheel_C_GetWheelMesh, WheelMesh) == 0x000000, "Member 'Vehicle_Wheel_C_GetWheelMesh::WheelMesh' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelRadius
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_GetWheelRadius final
{
public:
	double                                        BrakePressure;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_BrakePressure_ImplicitCast;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetWheelRadius) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetWheelRadius");
static_assert(sizeof(Vehicle_Wheel_C_GetWheelRadius) == 0x000010, "Wrong size on Vehicle_Wheel_C_GetWheelRadius");
static_assert(offsetof(Vehicle_Wheel_C_GetWheelRadius, BrakePressure) == 0x000000, "Member 'Vehicle_Wheel_C_GetWheelRadius::BrakePressure' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_GetWheelRadius, K2Node_FunctionResult_BrakePressure_ImplicitCast) == 0x000008, "Member 'Vehicle_Wheel_C_GetWheelRadius::K2Node_FunctionResult_BrakePressure_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.GetWheelTorque
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_GetWheelTorque final
{
public:
	double                                        Param_WheelTorque;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_GetWheelTorque) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_GetWheelTorque");
static_assert(sizeof(Vehicle_Wheel_C_GetWheelTorque) == 0x000008, "Wrong size on Vehicle_Wheel_C_GetWheelTorque");
static_assert(offsetof(Vehicle_Wheel_C_GetWheelTorque, Param_WheelTorque) == 0x000000, "Member 'Vehicle_Wheel_C_GetWheelTorque::Param_WheelTorque' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.InitBonePhysics
// 0x00F0 (0x00F0 - 0x0000)
struct Vehicle_Wheel_C_InitBonePhysics final
{
public:
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C3[0x5];                                       // 0x00C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Select_Default;                             // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVehicleConstraint*                     CallFunc_CreateBoneConstraint_VehicleConstraint;   // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 K2Node_DynamicCast_AsSkeletal_Mesh_Component;      // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_InitBonePhysics) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_InitBonePhysics");
static_assert(sizeof(Vehicle_Wheel_C_InitBonePhysics) == 0x0000F0, "Wrong size on Vehicle_Wheel_C_InitBonePhysics");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, CallFunc_MakeTransform_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_InitBonePhysics::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, CallFunc_MakeTransform_ReturnValue_1) == 0x000060, "Member 'Vehicle_Wheel_C_InitBonePhysics::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, Temp_bool_Variable) == 0x0000C0, "Member 'Vehicle_Wheel_C_InitBonePhysics::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, CallFunc_IsValid_ReturnValue) == 0x0000C1, "Member 'Vehicle_Wheel_C_InitBonePhysics::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, CallFunc_IsValid_ReturnValue_1) == 0x0000C2, "Member 'Vehicle_Wheel_C_InitBonePhysics::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, K2Node_Select_Default) == 0x0000C8, "Member 'Vehicle_Wheel_C_InitBonePhysics::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, CallFunc_CreateBoneConstraint_VehicleConstraint) == 0x0000D0, "Member 'Vehicle_Wheel_C_InitBonePhysics::CallFunc_CreateBoneConstraint_VehicleConstraint' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, K2Node_DynamicCast_AsSkeletal_Mesh_Component) == 0x0000D8, "Member 'Vehicle_Wheel_C_InitBonePhysics::K2Node_DynamicCast_AsSkeletal_Mesh_Component' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, K2Node_DynamicCast_bSuccess) == 0x0000E0, "Member 'Vehicle_Wheel_C_InitBonePhysics::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, CallFunc_GetWheelMode_ReturnValue) == 0x0000E1, "Member 'Vehicle_Wheel_C_InitBonePhysics::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitBonePhysics, K2Node_SwitchEnum_CmpSuccess) == 0x0000E2, "Member 'Vehicle_Wheel_C_InitBonePhysics::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.InitializeWheel
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_InitializeWheel final
{
public:
	class AAVS_Vehicle_C*                         Owner;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_InitializeWheel) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_InitializeWheel");
static_assert(sizeof(Vehicle_Wheel_C_InitializeWheel) == 0x000008, "Wrong size on Vehicle_Wheel_C_InitializeWheel");
static_assert(offsetof(Vehicle_Wheel_C_InitializeWheel, Owner) == 0x000000, "Member 'Vehicle_Wheel_C_InitializeWheel::Owner' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.InitSkidSounds
// 0x0028 (0x0028 - 0x0000)
struct Vehicle_Wheel_C_InitSkidSounds final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Play_StartTime_ImplicitCast;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_InitSkidSounds) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_InitSkidSounds");
static_assert(sizeof(Vehicle_Wheel_C_InitSkidSounds) == 0x000028, "Wrong size on Vehicle_Wheel_C_InitSkidSounds");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_RandomFloatInRange_ReturnValue) == 0x000008, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000010, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000018, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_InitSkidSounds, CallFunc_Play_StartTime_ImplicitCast) == 0x000020, "Member 'Vehicle_Wheel_C_InitSkidSounds::CallFunc_Play_StartTime_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.LockWheel
// 0x01E0 (0x01E0 - 0x0000)
struct Vehicle_Wheel_C_LockWheel final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   Vehicle_Body;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0xF];                                       // 0x00F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0100(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_LockWheel) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_LockWheel");
static_assert(sizeof(Vehicle_Wheel_C_LockWheel) == 0x0001E0, "Wrong size on Vehicle_Wheel_C_LockWheel");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, Lock) == 0x000000, "Member 'Vehicle_Wheel_C_LockWheel::Lock' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, Vehicle_Body) == 0x000008, "Member 'Vehicle_Wheel_C_LockWheel::Vehicle_Body' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000070, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_BooleanAND_ReturnValue) == 0x000071, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_GetWheelController_ControllerMesh) == 0x000078, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_GetWheelMode_ReturnValue) == 0x000080, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000090, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, K2Node_SwitchEnum_CmpSuccess) == 0x0000F0, "Member 'Vehicle_Wheel_C_LockWheel::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000100, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_BreakTransform_Location) == 0x000160, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_BreakTransform_Rotation) == 0x000178, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_BreakTransform_Scale) == 0x000190, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_GetRightVector_ReturnValue) == 0x0001A8, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_LockWheel, CallFunc_GetForwardVector_ReturnValue) == 0x0001C0, "Member 'Vehicle_Wheel_C_LockWheel::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_ReceiveEndPlay");
static_assert(sizeof(Vehicle_Wheel_C_ReceiveEndPlay) == 0x000001, "Wrong size on Vehicle_Wheel_C_ReceiveEndPlay");
static_assert(offsetof(Vehicle_Wheel_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'Vehicle_Wheel_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_Wheel_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_ReceiveTick) == 0x000004, "Wrong alignment on Vehicle_Wheel_C_ReceiveTick");
static_assert(sizeof(Vehicle_Wheel_C_ReceiveTick) == 0x000004, "Wrong size on Vehicle_Wheel_C_ReceiveTick");
static_assert(offsetof(Vehicle_Wheel_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'Vehicle_Wheel_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ResetPosition
// 0x01B0 (0x01B0 - 0x0000)
struct Vehicle_Wheel_C_ResetPosition final
{
public:
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x00C8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Vehicle_Wheel_C_ResetPosition) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_ResetPosition");
static_assert(sizeof(Vehicle_Wheel_C_ResetPosition) == 0x0001B0, "Wrong size on Vehicle_Wheel_C_ResetPosition");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_GetWheelController_ControllerMesh) == 0x000000, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_GetWheelMesh_WheelMesh) == 0x000008, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_BreakTransform_Location) == 0x000080, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_BreakTransform_Rotation) == 0x000098, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_BreakTransform_Scale) == 0x0000B0, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetPosition, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0000C8, "Member 'Vehicle_Wheel_C_ResetPosition::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.ResetSteering
// 0x00F0 (0x00F0 - 0x0000)
struct Vehicle_Wheel_C_ResetSteering final
{
public:
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0008(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Vehicle_Wheel_C_ResetSteering) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_ResetSteering");
static_assert(sizeof(Vehicle_Wheel_C_ResetSteering) == 0x0000F0, "Wrong size on Vehicle_Wheel_C_ResetSteering");
static_assert(offsetof(Vehicle_Wheel_C_ResetSteering, CallFunc_GetWheelController_ControllerMesh) == 0x000000, "Member 'Vehicle_Wheel_C_ResetSteering::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_ResetSteering, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000008, "Member 'Vehicle_Wheel_C_ResetSteering::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetChassisCollisions
// 0x0002 (0x0002 - 0x0000)
struct Vehicle_Wheel_C_SetChassisCollisions final
{
public:
	bool                                          Collision;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetChassisCollisions) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetChassisCollisions");
static_assert(sizeof(Vehicle_Wheel_C_SetChassisCollisions) == 0x000002, "Wrong size on Vehicle_Wheel_C_SetChassisCollisions");
static_assert(offsetof(Vehicle_Wheel_C_SetChassisCollisions, Collision) == 0x000000, "Member 'Vehicle_Wheel_C_SetChassisCollisions::Collision' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetChassisCollisions, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_SetChassisCollisions::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetDriveMotor
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_SetDriveMotor final
{
public:
	bool                                          EnableMotor;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetDriveMotor) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetDriveMotor");
static_assert(sizeof(Vehicle_Wheel_C_SetDriveMotor) == 0x000001, "Wrong size on Vehicle_Wheel_C_SetDriveMotor");
static_assert(offsetof(Vehicle_Wheel_C_SetDriveMotor, EnableMotor) == 0x000000, "Member 'Vehicle_Wheel_C_SetDriveMotor::EnableMotor' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetIsBrakeLocked
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_SetIsBrakeLocked final
{
public:
	bool                                          Param_IsBrakeLocked;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetIsBrakeLocked) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetIsBrakeLocked");
static_assert(sizeof(Vehicle_Wheel_C_SetIsBrakeLocked) == 0x000001, "Wrong size on Vehicle_Wheel_C_SetIsBrakeLocked");
static_assert(offsetof(Vehicle_Wheel_C_SetIsBrakeLocked, Param_IsBrakeLocked) == 0x000000, "Member 'Vehicle_Wheel_C_SetIsBrakeLocked::Param_IsBrakeLocked' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetIsDrivingWheel
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_SetIsDrivingWheel final
{
public:
	bool                                          IsDrivingWheel;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetIsDrivingWheel) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetIsDrivingWheel");
static_assert(sizeof(Vehicle_Wheel_C_SetIsDrivingWheel) == 0x000001, "Wrong size on Vehicle_Wheel_C_SetIsDrivingWheel");
static_assert(offsetof(Vehicle_Wheel_C_SetIsDrivingWheel, IsDrivingWheel) == 0x000000, "Member 'Vehicle_Wheel_C_SetIsDrivingWheel::IsDrivingWheel' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetPhysics
// 0x0009 (0x0009 - 0x0000)
struct Vehicle_Wheel_C_SetPhysics final
{
public:
	bool                                          Simulate_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsAttached_ReturnValue;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsPhysicsCollisionEnabled_ReturnValue; // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetPhysics) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetPhysics");
static_assert(sizeof(Vehicle_Wheel_C_SetPhysics) == 0x000009, "Wrong size on Vehicle_Wheel_C_SetPhysics");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, Simulate_) == 0x000000, "Member 'Vehicle_Wheel_C_SetPhysics::Simulate_' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_GetIsAttached_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_GetIsAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_K2_IsPhysicsCollisionEnabled_ReturnValue) == 0x000003, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_K2_IsPhysicsCollisionEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_BooleanAND_ReturnValue_1) == 0x000005, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_GetWheelMode_ReturnValue) == 0x000006, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000007, "Member 'Vehicle_Wheel_C_SetPhysics::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetPhysics, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'Vehicle_Wheel_C_SetPhysics::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetProjectedMesh
// 0x0008 (0x0008 - 0x0000)
struct Vehicle_Wheel_C_SetProjectedMesh final
{
public:
	class UStaticMeshComponent*                   Param_ProjectedMesh;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetProjectedMesh) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_SetProjectedMesh");
static_assert(sizeof(Vehicle_Wheel_C_SetProjectedMesh) == 0x000008, "Wrong size on Vehicle_Wheel_C_SetProjectedMesh");
static_assert(offsetof(Vehicle_Wheel_C_SetProjectedMesh, Param_ProjectedMesh) == 0x000000, "Member 'Vehicle_Wheel_C_SetProjectedMesh::Param_ProjectedMesh' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringDamping
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_Wheel_C_SetSpringDamping final
{
public:
	float                                         SpringDamping;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetSpringDamping) == 0x000004, "Wrong alignment on Vehicle_Wheel_C_SetSpringDamping");
static_assert(sizeof(Vehicle_Wheel_C_SetSpringDamping) == 0x000004, "Wrong size on Vehicle_Wheel_C_SetSpringDamping");
static_assert(offsetof(Vehicle_Wheel_C_SetSpringDamping, SpringDamping) == 0x000000, "Member 'Vehicle_Wheel_C_SetSpringDamping::SpringDamping' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringDownforce
// 0x0010 (0x0010 - 0x0000)
struct Vehicle_Wheel_C_SetSpringDownforce final
{
public:
	float                                         SpringDownforce;                                   // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_PhysicsDownforce_ImplicitCast;  // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetSpringDownforce) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_SetSpringDownforce");
static_assert(sizeof(Vehicle_Wheel_C_SetSpringDownforce) == 0x000010, "Wrong size on Vehicle_Wheel_C_SetSpringDownforce");
static_assert(offsetof(Vehicle_Wheel_C_SetSpringDownforce, SpringDownforce) == 0x000000, "Member 'Vehicle_Wheel_C_SetSpringDownforce::SpringDownforce' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetSpringDownforce, K2Node_VariableSet_PhysicsDownforce_ImplicitCast) == 0x000008, "Member 'Vehicle_Wheel_C_SetSpringDownforce::K2Node_VariableSet_PhysicsDownforce_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringLength
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_Wheel_C_SetSpringLength final
{
public:
	float                                         SpringLength;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetSpringLength) == 0x000004, "Wrong alignment on Vehicle_Wheel_C_SetSpringLength");
static_assert(sizeof(Vehicle_Wheel_C_SetSpringLength) == 0x000004, "Wrong size on Vehicle_Wheel_C_SetSpringLength");
static_assert(offsetof(Vehicle_Wheel_C_SetSpringLength, SpringLength) == 0x000000, "Member 'Vehicle_Wheel_C_SetSpringLength::SpringLength' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSpringStrength
// 0x0004 (0x0004 - 0x0000)
struct Vehicle_Wheel_C_SetSpringStrength final
{
public:
	float                                         SpringStrength;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetSpringStrength) == 0x000004, "Wrong alignment on Vehicle_Wheel_C_SetSpringStrength");
static_assert(sizeof(Vehicle_Wheel_C_SetSpringStrength) == 0x000004, "Wrong size on Vehicle_Wheel_C_SetSpringStrength");
static_assert(offsetof(Vehicle_Wheel_C_SetSpringStrength, SpringStrength) == 0x000000, "Member 'Vehicle_Wheel_C_SetSpringStrength::SpringStrength' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSuspensionPreview
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_SetSuspensionPreview final
{
public:
	bool                                          Preview;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetSuspensionPreview) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetSuspensionPreview");
static_assert(sizeof(Vehicle_Wheel_C_SetSuspensionPreview) == 0x000001, "Wrong size on Vehicle_Wheel_C_SetSuspensionPreview");
static_assert(offsetof(Vehicle_Wheel_C_SetSuspensionPreview, Preview) == 0x000000, "Member 'Vehicle_Wheel_C_SetSuspensionPreview::Preview' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetSuspensionSettings
// 0x000C (0x000C - 0x0000)
struct Vehicle_Wheel_C_SetSuspensionSettings final
{
public:
	float                                         Spring_Length;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spring_Strength;                                   // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Spring_Damping;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetSuspensionSettings) == 0x000004, "Wrong alignment on Vehicle_Wheel_C_SetSuspensionSettings");
static_assert(sizeof(Vehicle_Wheel_C_SetSuspensionSettings) == 0x00000C, "Wrong size on Vehicle_Wheel_C_SetSuspensionSettings");
static_assert(offsetof(Vehicle_Wheel_C_SetSuspensionSettings, Spring_Length) == 0x000000, "Member 'Vehicle_Wheel_C_SetSuspensionSettings::Spring_Length' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetSuspensionSettings, Spring_Strength) == 0x000004, "Member 'Vehicle_Wheel_C_SetSuspensionSettings::Spring_Strength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetSuspensionSettings, Spring_Damping) == 0x000008, "Member 'Vehicle_Wheel_C_SetSuspensionSettings::Spring_Damping' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetVehicleTorque
// 0x0018 (0x0018 - 0x0000)
struct Vehicle_Wheel_C_SetVehicleTorque final
{
public:
	double                                        TargetSpeed;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Torque;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reverse;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetVehicleTorque) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_SetVehicleTorque");
static_assert(sizeof(Vehicle_Wheel_C_SetVehicleTorque) == 0x000018, "Wrong size on Vehicle_Wheel_C_SetVehicleTorque");
static_assert(offsetof(Vehicle_Wheel_C_SetVehicleTorque, TargetSpeed) == 0x000000, "Member 'Vehicle_Wheel_C_SetVehicleTorque::TargetSpeed' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetVehicleTorque, Torque) == 0x000008, "Member 'Vehicle_Wheel_C_SetVehicleTorque::Torque' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetVehicleTorque, Reverse) == 0x000010, "Member 'Vehicle_Wheel_C_SetVehicleTorque::Reverse' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetVehicleTorque, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'Vehicle_Wheel_C_SetVehicleTorque::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetWheelMode
// 0x0003 (0x0003 - 0x0000)
struct Vehicle_Wheel_C_SetWheelMode final
{
public:
	EWheelMode                                    NewMode;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsSimulatingSuspension_ReturnValue;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetWheelMode) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_SetWheelMode");
static_assert(sizeof(Vehicle_Wheel_C_SetWheelMode) == 0x000003, "Wrong size on Vehicle_Wheel_C_SetWheelMode");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelMode, NewMode) == 0x000000, "Member 'Vehicle_Wheel_C_SetWheelMode::NewMode' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelMode, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_SetWheelMode::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelMode, CallFunc_GetIsSimulatingSuspension_ReturnValue) == 0x000002, "Member 'Vehicle_Wheel_C_SetWheelMode::CallFunc_GetIsSimulatingSuspension_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetWheelPosition
// 0x0210 (0x0210 - 0x0000)
struct Vehicle_Wheel_C_SetWheelPosition final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               NewRotation;                                       // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_RotatorRotator_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0040(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult; // 0x0128(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Vehicle_Wheel_C_SetWheelPosition) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_SetWheelPosition");
static_assert(sizeof(Vehicle_Wheel_C_SetWheelPosition) == 0x000210, "Wrong size on Vehicle_Wheel_C_SetWheelPosition");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelPosition, NewLocation) == 0x000000, "Member 'Vehicle_Wheel_C_SetWheelPosition::NewLocation' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelPosition, NewRotation) == 0x000018, "Member 'Vehicle_Wheel_C_SetWheelPosition::NewRotation' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelPosition, CallFunc_NotEqual_RotatorRotator_ReturnValue) == 0x000030, "Member 'Vehicle_Wheel_C_SetWheelPosition::CallFunc_NotEqual_RotatorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelPosition, CallFunc_GetWheelController_ControllerMesh) == 0x000038, "Member 'Vehicle_Wheel_C_SetWheelPosition::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelPosition, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000040, "Member 'Vehicle_Wheel_C_SetWheelPosition::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelPosition, CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult) == 0x000128, "Member 'Vehicle_Wheel_C_SetWheelPosition::CallFunc_K2_SetRelativeLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SetWheelTorque
// 0x00A8 (0x00A8 - 0x0000)
struct Vehicle_Wheel_C_SetWheelTorque final
{
public:
	bool                                          OverrideVehicle;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TargetSpeed;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Torque;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Reverse;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMeshRadius_ReturnValue;                // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LinearSpeedToRads_ReturnValue;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInvertTorque_isInvertedTorque;         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMeshDiameter_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MultiplyByPi_ReturnValue;                 // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_MathExpression_ReturnValue;                 // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_TargetAngVel_ImplicitCast;      // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast; // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MultiplyByPi_Value_ImplicitCast;          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SetWheelTorque) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_SetWheelTorque");
static_assert(sizeof(Vehicle_Wheel_C_SetWheelTorque) == 0x0000A8, "Wrong size on Vehicle_Wheel_C_SetWheelTorque");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, OverrideVehicle) == 0x000000, "Member 'Vehicle_Wheel_C_SetWheelTorque::OverrideVehicle' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, TargetSpeed) == 0x000008, "Member 'Vehicle_Wheel_C_SetWheelTorque::TargetSpeed' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, Torque) == 0x000010, "Member 'Vehicle_Wheel_C_SetWheelTorque::Torque' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, Reverse) == 0x000018, "Member 'Vehicle_Wheel_C_SetWheelTorque::Reverse' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000019, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, Temp_bool_Variable) == 0x00001A, "Member 'Vehicle_Wheel_C_SetWheelTorque::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_GetWheelMesh_WheelMesh) == 0x000020, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_GetMeshRadius_ReturnValue) == 0x00002C, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_GetMeshRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_LinearSpeedToRads_ReturnValue) == 0x000030, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_LinearSpeedToRads_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_GetInvertTorque_isInvertedTorque) == 0x000038, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_GetInvertTorque_isInvertedTorque' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_BooleanXOR_ReturnValue) == 0x000048, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, Temp_bool_Variable_1) == 0x000049, "Member 'Vehicle_Wheel_C_SetWheelTorque::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, K2Node_Select_Default) == 0x000050, "Member 'Vehicle_Wheel_C_SetWheelTorque::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_GetMeshDiameter_ReturnValue) == 0x000058, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_GetMeshDiameter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_MultiplyByPi_ReturnValue) == 0x000060, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_MultiplyByPi_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, K2Node_MathExpression_ReturnValue) == 0x000068, "Member 'Vehicle_Wheel_C_SetWheelTorque::K2Node_MathExpression_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, K2Node_Select_Default_1) == 0x000078, "Member 'Vehicle_Wheel_C_SetWheelTorque::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, K2Node_VariableSet_TargetAngVel_ImplicitCast) == 0x000098, "Member 'Vehicle_Wheel_C_SetWheelTorque::K2Node_VariableSet_TargetAngVel_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast) == 0x00009C, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_SetAngularDriveParams_VelocityStrength_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SetWheelTorque, CallFunc_MultiplyByPi_Value_ImplicitCast) == 0x0000A0, "Member 'Vehicle_Wheel_C_SetWheelTorque::CallFunc_MultiplyByPi_Value_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.StopSkidEffects
// 0x0001 (0x0001 - 0x0000)
struct Vehicle_Wheel_C_StopSkidEffects final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_StopSkidEffects) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_StopSkidEffects");
static_assert(sizeof(Vehicle_Wheel_C_StopSkidEffects) == 0x000001, "Wrong size on Vehicle_Wheel_C_StopSkidEffects");
static_assert(offsetof(Vehicle_Wheel_C_StopSkidEffects, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_StopSkidEffects::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.SwapVisibleMesh
// 0x0028 (0x0028 - 0x0000)
struct Vehicle_Wheel_C_SwapVisibleMesh final
{
public:
	bool                                          UseProjected;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetProjectedMesh_ProjectedMesh;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_GetWheelMesh_WheelMesh;                   // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_SwapVisibleMesh) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_SwapVisibleMesh");
static_assert(sizeof(Vehicle_Wheel_C_SwapVisibleMesh) == 0x000028, "Wrong size on Vehicle_Wheel_C_SwapVisibleMesh");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, UseProjected) == 0x000000, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::UseProjected' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_GetWheelMode_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000003, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_GetProjectedMesh_ProjectedMesh) == 0x000008, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_GetProjectedMesh_ProjectedMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_GetWheelMesh_WheelMesh) == 0x000018, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_GetWheelMesh_WheelMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_BooleanAND_ReturnValue) == 0x000020, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_SwapVisibleMesh, CallFunc_IsValid_ReturnValue_2) == 0x000021, "Member 'Vehicle_Wheel_C_SwapVisibleMesh::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.TouchSurfaceChange
// 0x0120 (0x0120 - 0x0000)
struct Vehicle_Wheel_C_TouchSurfaceChange final
{
public:
	struct FHitResult                             CallFunc_GetLastTouch_LastTouch;                   // 0x0000(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             CallFunc_GetEffectsForSurface_SkidSound;           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        CallFunc_GetEffectsForSurface_SkidParticle;        // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_Max_ImplicitCast;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Play_StartTime_ImplicitCast;              // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_TouchSurfaceChange) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_TouchSurfaceChange");
static_assert(sizeof(Vehicle_Wheel_C_TouchSurfaceChange) == 0x000120, "Wrong size on Vehicle_Wheel_C_TouchSurfaceChange");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_GetLastTouch_LastTouch) == 0x000000, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_GetLastTouch_LastTouch' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_GetSurfaceType_ReturnValue) == 0x0000E8, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_GetEffectsForSurface_SkidSound) == 0x0000F0, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_GetEffectsForSurface_SkidSound' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_GetEffectsForSurface_SkidParticle) == 0x0000F8, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_GetEffectsForSurface_SkidParticle' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_IsValid_ReturnValue) == 0x000100, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_IsValid_ReturnValue_1) == 0x000101, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_RandomFloatInRange_ReturnValue) == 0x000108, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_RandomFloatInRange_Max_ImplicitCast) == 0x000110, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_RandomFloatInRange_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_TouchSurfaceChange, CallFunc_Play_StartTime_ImplicitCast) == 0x000118, "Member 'Vehicle_Wheel_C_TouchSurfaceChange::CallFunc_Play_StartTime_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateConstraints
// 0x0003 (0x0003 - 0x0000)
struct Vehicle_Wheel_C_UpdateConstraints final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWheelMode                                    CallFunc_GetWheelMode_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateConstraints) == 0x000001, "Wrong alignment on Vehicle_Wheel_C_UpdateConstraints");
static_assert(sizeof(Vehicle_Wheel_C_UpdateConstraints) == 0x000003, "Wrong size on Vehicle_Wheel_C_UpdateConstraints");
static_assert(offsetof(Vehicle_Wheel_C_UpdateConstraints, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateConstraints::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateConstraints, CallFunc_GetWheelMode_ReturnValue) == 0x000001, "Member 'Vehicle_Wheel_C_UpdateConstraints::CallFunc_GetWheelMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateConstraints, K2Node_SwitchEnum_CmpSuccess) == 0x000002, "Member 'Vehicle_Wheel_C_UpdateConstraints::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateRotationConstraint
// 0x00F0 (0x00F0 - 0x0000)
struct Vehicle_Wheel_C_UpdateRotationConstraint final
{
public:
	bool                                          CallFunc_GetIsDrivingWheel_isDrivingWheel;         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0010(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateRotationConstraint) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_UpdateRotationConstraint");
static_assert(sizeof(Vehicle_Wheel_C_UpdateRotationConstraint) == 0x0000F0, "Wrong size on Vehicle_Wheel_C_UpdateRotationConstraint");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationConstraint, CallFunc_GetIsDrivingWheel_isDrivingWheel) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateRotationConstraint::CallFunc_GetIsDrivingWheel_isDrivingWheel' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationConstraint, CallFunc_MakeTransform_ReturnValue) == 0x000010, "Member 'Vehicle_Wheel_C_UpdateRotationConstraint::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationConstraint, CallFunc_MakeTransform_ReturnValue_1) == 0x000070, "Member 'Vehicle_Wheel_C_UpdateRotationConstraint::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationConstraint, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'Vehicle_Wheel_C_UpdateRotationConstraint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationConstraint, CallFunc_GetWheelController_ControllerMesh) == 0x0000E8, "Member 'Vehicle_Wheel_C_UpdateRotationConstraint::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateRotationSpeed
// 0x0068 (0x0068 - 0x0000)
struct Vehicle_Wheel_C_UpdateRotationSpeed final
{
public:
	float                                         CallFunc_GetWheelAngVelInRadians_ReturnValue;      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSpeedUnit                             CallFunc_GetSpeedUnitData_SpeedUnit;               // 0x0010(0x0030)(HasGetValueTypeHash)
	float                                         CallFunc_GetMeshRadius_ReturnValue;                // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_A_ImplicitCast;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateRotationSpeed) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_UpdateRotationSpeed");
static_assert(sizeof(Vehicle_Wheel_C_UpdateRotationSpeed) == 0x000068, "Wrong size on Vehicle_Wheel_C_UpdateRotationSpeed");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_GetWheelAngVelInRadians_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_GetWheelAngVelInRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_GetSpeedUnitData_SpeedUnit) == 0x000010, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_GetSpeedUnitData_SpeedUnit' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_GetMeshRadius_ReturnValue) == 0x000040, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_GetMeshRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_Abs_A_ImplicitCast) == 0x000058, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_Abs_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateRotationSpeed, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000060, "Member 'Vehicle_Wheel_C_UpdateRotationSpeed::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSkid
// 0x0030 (0x0030 - 0x0000)
struct Vehicle_Wheel_C_UpdateSkid final
{
public:
	double                                        Temp_real_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetHasContact_ReturnValue;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FInterpEaseInOut_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InFloat_ImplicitCast;   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateSkid) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_UpdateSkid");
static_assert(sizeof(Vehicle_Wheel_C_UpdateSkid) == 0x000030, "Wrong size on Vehicle_Wheel_C_UpdateSkid");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, Temp_real_Variable) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateSkid::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, Temp_bool_Variable) == 0x000008, "Member 'Vehicle_Wheel_C_UpdateSkid::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'Vehicle_Wheel_C_UpdateSkid::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, CallFunc_GetHasContact_ReturnValue) == 0x00000A, "Member 'Vehicle_Wheel_C_UpdateSkid::CallFunc_GetHasContact_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'Vehicle_Wheel_C_UpdateSkid::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, K2Node_Select_Default) == 0x000010, "Member 'Vehicle_Wheel_C_UpdateSkid::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'Vehicle_Wheel_C_UpdateSkid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, CallFunc_FInterpEaseInOut_ReturnValue) == 0x000020, "Member 'Vehicle_Wheel_C_UpdateSkid::CallFunc_FInterpEaseInOut_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkid, CallFunc_SetFloatParameter_InFloat_ImplicitCast) == 0x000028, "Member 'Vehicle_Wheel_C_UpdateSkid::CallFunc_SetFloatParameter_InFloat_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSkidEffects
// 0x0268 (0x0268 - 0x0000)
struct Vehicle_Wheel_C_UpdateSkidEffects final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_GetSurfaceType_ReturnValue;               // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetWheelVelocity_ReturnValue;             // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0140(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_CalculateSkidDirection_MarkDirection;     // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x0180(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateSkidEffects) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_UpdateSkidEffects");
static_assert(sizeof(Vehicle_Wheel_C_UpdateSkidEffects) == 0x000268, "Wrong size on Vehicle_Wheel_C_UpdateSkidEffects");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_IsDedicatedServer_ReturnValue) == 0x000018, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_bBlockingHit) == 0x000019, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_bInitialOverlap) == 0x00001A, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_Time) == 0x00001C, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_Distance) == 0x000020, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_Location) == 0x000028, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_ImpactPoint) == 0x000040, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_Normal) == 0x000058, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_ImpactNormal) == 0x000070, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_PhysMat) == 0x000088, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_HitActor) == 0x000090, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_HitComponent) == 0x000098, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_HitBoneName) == 0x0000A0, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_BoneName) == 0x0000A8, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_HitItem) == 0x0000B0, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_ElementIndex) == 0x0000B4, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_FaceIndex) == 0x0000B8, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_TraceStart) == 0x0000C0, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BreakHitResult_TraceEnd) == 0x0000D8, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_Not_PreBool_ReturnValue) == 0x0000F0, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_Add_VectorVector_ReturnValue) == 0x0000F8, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_GetSurfaceType_ReturnValue) == 0x000110, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_GetSurfaceType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_IsValid_ReturnValue) == 0x000111, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000118, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_GetWheelVelocity_ReturnValue) == 0x000120, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_GetWheelVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000138, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BooleanOR_ReturnValue) == 0x000139, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00013A, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_BooleanAND_ReturnValue) == 0x00013B, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_GetVehicleMesh_Mesh) == 0x000140, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000148, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_CalculateSkidDirection_MarkDirection) == 0x000160, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_CalculateSkidDirection_MarkDirection' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_IsValid_ReturnValue_1) == 0x000178, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSkidEffects, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x000180, "Member 'Vehicle_Wheel_C_UpdateSkidEffects::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSpringConstraint
// 0x0180 (0x0180 - 0x0000)
struct Vehicle_Wheel_C_UpdateSpringConstraint final
{
public:
	double                                        CallFunc_GetSpringLength_SpringLength;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSuspensionSettings_SpringLength;       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSuspensionSettings_SpringStrength;     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSuspensionSettings_SpringDamping;      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetSuspensionSettings_PhysicsDownforce;   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       Temp_byte_Variable_1;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0xE];                                       // 0x0052(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetRelativeTransform_ReturnValue;         // 0x0060(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELinearConstraintMotion                       K2Node_Select_Default;                             // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearZLimit_LimitSize_ImplicitCast;   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearSoftConstraint_Stiffness_ImplicitCast; // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetLinearDriveParams_PositionStrength_ImplicitCast; // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateSpringConstraint) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_UpdateSpringConstraint");
static_assert(sizeof(Vehicle_Wheel_C_UpdateSpringConstraint) == 0x000180, "Wrong size on Vehicle_Wheel_C_UpdateSpringConstraint");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetSpringLength_SpringLength) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetSpringLength_SpringLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetSuspensionSettings_SpringLength) == 0x000008, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetSuspensionSettings_SpringLength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetSuspensionSettings_SpringStrength) == 0x00000C, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetSuspensionSettings_SpringStrength' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetSuspensionSettings_SpringDamping) == 0x000010, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetSuspensionSettings_SpringDamping' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetSuspensionSettings_PhysicsDownforce) == 0x000018, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetSuspensionSettings_PhysicsDownforce' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000020, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000030, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_MakeVector_ReturnValue) == 0x000038, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, Temp_byte_Variable) == 0x000050, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, Temp_byte_Variable_1) == 0x000051, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetRelativeTransform_ReturnValue) == 0x000060, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_BreakTransform_Rotation) == 0x0000D8, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_BreakTransform_Scale) == 0x0000F0, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_GetVehicleMesh_Mesh) == 0x000108, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_BreakVector_X) == 0x000110, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_BreakVector_Y) == 0x000118, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_BreakVector_Z) == 0x000120, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_MakeVector_ReturnValue_1) == 0x000128, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, Temp_bool_Variable) == 0x000140, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, K2Node_Select_Default) == 0x000141, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_Not_PreBool_ReturnValue) == 0x000142, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_MakeVector_ReturnValue_2) == 0x000148, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000160, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_SetLinearZLimit_LimitSize_ImplicitCast) == 0x000168, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_SetLinearZLimit_LimitSize_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_SetLinearSoftConstraint_Stiffness_ImplicitCast) == 0x00016C, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_SetLinearSoftConstraint_Stiffness_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSpringConstraint, CallFunc_SetLinearDriveParams_PositionStrength_ImplicitCast) == 0x000170, "Member 'Vehicle_Wheel_C_UpdateSpringConstraint::CallFunc_SetLinearDriveParams_PositionStrength_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateSteering
// 0x0020 (0x0020 - 0x0000)
struct Vehicle_Wheel_C_UpdateSteering final
{
public:
	double                                        NewSteering;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSteeringInput_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetSteeringInput_Steering_ImplicitCast;   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NotEqual_DoubleDouble_A_ImplicitCast;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateSteering) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_UpdateSteering");
static_assert(sizeof(Vehicle_Wheel_C_UpdateSteering) == 0x000020, "Wrong size on Vehicle_Wheel_C_UpdateSteering");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSteering, NewSteering) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateSteering::NewSteering' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSteering, CallFunc_GetSteeringInput_ReturnValue) == 0x000008, "Member 'Vehicle_Wheel_C_UpdateSteering::CallFunc_GetSteeringInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSteering, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x00000C, "Member 'Vehicle_Wheel_C_UpdateSteering::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSteering, CallFunc_SetSteeringInput_Steering_ImplicitCast) == 0x000010, "Member 'Vehicle_Wheel_C_UpdateSteering::CallFunc_SetSteeringInput_Steering_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateSteering, CallFunc_NotEqual_DoubleDouble_A_ImplicitCast) == 0x000018, "Member 'Vehicle_Wheel_C_UpdateSteering::CallFunc_NotEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateWheel
// 0x02A0 (0x02A0 - 0x0000)
struct Vehicle_Wheel_C_UpdateWheel final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSteeringAngle_ReturnValue;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshComponent*                         CallFunc_GetVehicleMesh_Mesh;                      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue_1;     // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x00F0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_GetWheelController_ControllerMesh;        // 0x0150(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x01B8(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateWheel) == 0x000010, "Wrong alignment on Vehicle_Wheel_C_UpdateWheel");
static_assert(sizeof(Vehicle_Wheel_C_UpdateWheel) == 0x0002A0, "Wrong size on Vehicle_Wheel_C_UpdateWheel");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_GetSteeringAngle_ReturnValue) == 0x000060, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_GetSteeringAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_GetVehicleMesh_Mesh) == 0x000068, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_GetVehicleMesh_Mesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_MakeRotator_ReturnValue) == 0x000070, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_K2_GetComponentToWorld_ReturnValue_1) == 0x000090, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_K2_GetComponentToWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_MakeRelativeTransform_ReturnValue) == 0x0000F0, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_GetWheelController_ControllerMesh) == 0x000150, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_GetWheelController_ControllerMesh' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_BreakTransform_Location) == 0x000158, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_BreakTransform_Rotation) == 0x000170, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_BreakTransform_Scale) == 0x000188, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_ComposeRotators_ReturnValue) == 0x0001A0, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheel, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0001B8, "Member 'Vehicle_Wheel_C_UpdateWheel::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function Vehicle_Wheel.Vehicle_Wheel_C.UpdateWheelMeshProperties
// 0x0038 (0x0038 - 0x0000)
struct Vehicle_Wheel_C_UpdateWheelMeshProperties final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWheelRadius_BrakePressure;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       K2Node_DynamicCast_AsSphere_Collision;             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Vehicle_Wheel_C_UpdateWheelMeshProperties) == 0x000008, "Wrong alignment on Vehicle_Wheel_C_UpdateWheelMeshProperties");
static_assert(sizeof(Vehicle_Wheel_C_UpdateWheelMeshProperties) == 0x000038, "Wrong size on Vehicle_Wheel_C_UpdateWheelMeshProperties");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, Temp_bool_Variable) == 0x000000, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, Temp_real_Variable) == 0x000008, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, CallFunc_GetWheelRadius_BrakePressure) == 0x000010, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::CallFunc_GetWheelRadius_BrakePressure' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, K2Node_DynamicCast_AsSphere_Collision) == 0x000018, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::K2Node_DynamicCast_AsSphere_Collision' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, K2Node_Select_Default) == 0x000028, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x000030, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Vehicle_Wheel_C_UpdateWheelMeshProperties, CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast) == 0x000034, "Member 'Vehicle_Wheel_C_UpdateWheelMeshProperties::CallFunc_SetMassOverrideInKg_MassInKg_ImplicitCast' has a wrong offset!");

}

