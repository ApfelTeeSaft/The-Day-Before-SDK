#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvCameraManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SurvCameraManager.SurvCameraManager_C
// 0x0190 (0x34D0 - 0x3340)
class ASurvCameraManager_C final : public APlayerCameraManager
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x3340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Timeline_0_NewTrack_0_E15C3AE94B5450B3608BF4A1DB25E119; // 0x3348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_E15C3AE94B5450B3608BF4A1DB25E119; // 0x334C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_334D[0x3];                                     // 0x334D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x3350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraPos;                                         // 0x3358(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableLag;                                         // 0x3370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3371[0x7];                                     // 0x3371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CameraRot;                                         // 0x3378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class AActor*                                 Actor;                                             // 0x3390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitLagPos;                                        // 0x3398(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitLagRot;                                        // 0x33B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_33C8[0x8];                                     // 0x33C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SmoothedPivotTarget;                               // 0x33D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetCameraRotation;                              // 0x3430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        RotationLagAmount;                                 // 0x3448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PivotLocation;                                     // 0x3450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetCameraLocation;                              // 0x3468(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PivotOffsetLocation;                               // 0x3480(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_Test_C*                 PlayerTest;                                        // 0x3498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraOffsetLocation;                              // 0x34A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PivotLagSpeed;                                     // 0x34B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	void CalculateAxisIndependentLag(const struct FVector& CurrentLocation, const struct FVector& TargetLocation, const struct FRotator& CameraRotation, const struct FVector& LagSpeeds, struct FVector* Return);
	void CustomCameraBehavior(struct FVector* Location, struct FRotator* Rotation, double* FOV);
	void EntryAsPassenger();
	void ExecuteUbergraph_SurvCameraManager(int32 EntryPoint);
	void InpActEvt_X_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SurvCameraManager_C">();
	}
	static class ASurvCameraManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASurvCameraManager_C>();
	}
};
static_assert(alignof(ASurvCameraManager_C) == 0x000010, "Wrong alignment on ASurvCameraManager_C");
static_assert(sizeof(ASurvCameraManager_C) == 0x0034D0, "Wrong size on ASurvCameraManager_C");
static_assert(offsetof(ASurvCameraManager_C, UberGraphFrame) == 0x003340, "Member 'ASurvCameraManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, Timeline_0_NewTrack_0_E15C3AE94B5450B3608BF4A1DB25E119) == 0x003348, "Member 'ASurvCameraManager_C::Timeline_0_NewTrack_0_E15C3AE94B5450B3608BF4A1DB25E119' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, Timeline_0__Direction_E15C3AE94B5450B3608BF4A1DB25E119) == 0x00334C, "Member 'ASurvCameraManager_C::Timeline_0__Direction_E15C3AE94B5450B3608BF4A1DB25E119' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, Timeline_0) == 0x003350, "Member 'ASurvCameraManager_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, CameraPos) == 0x003358, "Member 'ASurvCameraManager_C::CameraPos' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, EnableLag) == 0x003370, "Member 'ASurvCameraManager_C::EnableLag' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, CameraRot) == 0x003378, "Member 'ASurvCameraManager_C::CameraRot' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, Actor) == 0x003390, "Member 'ASurvCameraManager_C::Actor' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, InitLagPos) == 0x003398, "Member 'ASurvCameraManager_C::InitLagPos' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, InitLagRot) == 0x0033B0, "Member 'ASurvCameraManager_C::InitLagRot' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, SmoothedPivotTarget) == 0x0033D0, "Member 'ASurvCameraManager_C::SmoothedPivotTarget' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, TargetCameraRotation) == 0x003430, "Member 'ASurvCameraManager_C::TargetCameraRotation' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, RotationLagAmount) == 0x003448, "Member 'ASurvCameraManager_C::RotationLagAmount' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, PivotLocation) == 0x003450, "Member 'ASurvCameraManager_C::PivotLocation' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, TargetCameraLocation) == 0x003468, "Member 'ASurvCameraManager_C::TargetCameraLocation' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, PivotOffsetLocation) == 0x003480, "Member 'ASurvCameraManager_C::PivotOffsetLocation' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, PlayerTest) == 0x003498, "Member 'ASurvCameraManager_C::PlayerTest' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, CameraOffsetLocation) == 0x0034A0, "Member 'ASurvCameraManager_C::CameraOffsetLocation' has a wrong offset!");
static_assert(offsetof(ASurvCameraManager_C, PivotLagSpeed) == 0x0034B8, "Member 'ASurvCameraManager_C::PivotLagSpeed' has a wrong offset!");

}

