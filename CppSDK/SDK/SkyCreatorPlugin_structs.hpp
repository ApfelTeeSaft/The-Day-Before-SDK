#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkyCreatorPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SkyCreatorPlugin.ESkyCreatorEditorWeatherType
// NumValues: 0x0003
enum class ESkyCreatorEditorWeatherType : uint8
{
	EditorWeather_WeatherPreset              = 0,
	EditorWeather_WeatherSettings            = 1,
	EditorWeather_MAX                        = 2,
};

// Enum SkyCreatorPlugin.ESkyCreatorSunPositionType
// NumValues: 0x0003
enum class ESkyCreatorSunPositionType : uint8
{
	SunPositionType_Simple                   = 0,
	SunPositionType_Real                     = 1,
	SunPositionType_MAX                      = 2,
};

// Enum SkyCreatorPlugin.ESkyCreatorMoonPositionType
// NumValues: 0x0004
enum class ESkyCreatorMoonPositionType : uint8
{
	MoonPositionType_Simple                  = 0,
	MoonPositionType_SimpleFixedElevation    = 1,
	MoonPositionType_Real                    = 2,
	MoonPositionType_MAX                     = 3,
};

// Enum SkyCreatorPlugin.EVolumetricCloudRenderTargetMode
// NumValues: 0x0004
enum class EVolumetricCloudRenderTargetMode : uint8
{
	VolumetricCloudRenderTargetMode_Default  = 0,
	VolumetricCloudRenderTargetMode_Quality  = 1,
	VolumetricCloudRenderTargetMode_Performance = 2,
	VolumetricCloudRenderTargetMode_MAX      = 3,
};

// Enum SkyCreatorPlugin.EVolumetricCloudNoiseShapeResolution
// NumValues: 0x0004
enum class EVolumetricCloudNoiseShapeResolution : uint8
{
	VolumetricCloudNoiseShapeResolution_64   = 0,
	VolumetricCloudNoiseShapeResolution_128  = 1,
	VolumetricCloudNoiseShapeResolution_256  = 2,
	VolumetricCloudNoiseShapeResolution_MAX  = 3,
};

// Enum SkyCreatorPlugin.EVolumetricCloudNoiseDetailResolution
// NumValues: 0x0003
enum class EVolumetricCloudNoiseDetailResolution : uint8
{
	VolumetricCloudNoiseDetailResolution_32  = 0,
	VolumetricCloudNoiseDetailResolution_64  = 1,
	VolumetricCloudNoiseDetailResolution_MAX = 2,
};

// Enum SkyCreatorPlugin.EVolumetricCloudShadowType
// NumValues: 0x0003
enum class EVolumetricCloudShadowType : uint8
{
	VolumetricCloudShadowType_True           = 0,
	VolumetricCloudShadowType_Fake           = 1,
	VolumetricCloudShadowType_MAX            = 2,
};

// Enum SkyCreatorPlugin.ESkyCreatorStarMapRotationType
// NumValues: 0x0004
enum class ESkyCreatorStarMapRotationType : uint8
{
	StarMapRotationType_NoRotation           = 0,
	StarMapRotationType_FollowSun            = 1,
	StarMapRotationType_FollowMoon           = 2,
	StarMapRotationType_MAX                  = 3,
};

// Enum SkyCreatorPlugin.EPrecipitationSpawnMode
// NumValues: 0x0004
enum class EPrecipitationSpawnMode : uint8
{
	EPrecipitationSpawnMode_CPUGPU           = 0,
	EPrecipitationSpawnMode_CPU              = 1,
	EPrecipitationSpawnMode_GPU              = 2,
	EPrecipitationSpawnMode_MAX              = 3,
};

// ScriptStruct SkyCreatorPlugin.SkyCreatorLightningParameters
// 0x0020 (0x0020 - 0x0000)
struct FSkyCreatorLightningParameters final
{
public:
	struct FLinearColor                           Position;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorLightningParameters) == 0x000004, "Wrong alignment on FSkyCreatorLightningParameters");
static_assert(sizeof(FSkyCreatorLightningParameters) == 0x000020, "Wrong size on FSkyCreatorLightningParameters");
static_assert(offsetof(FSkyCreatorLightningParameters, Position) == 0x000000, "Member 'FSkyCreatorLightningParameters::Position' has a wrong offset!");
static_assert(offsetof(FSkyCreatorLightningParameters, Color) == 0x000010, "Member 'FSkyCreatorLightningParameters::Color' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.CelestialPositionData
// 0x0008 (0x0008 - 0x0000)
struct FCelestialPositionData final
{
public:
	float                                         Elevation;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Azimuth;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCelestialPositionData) == 0x000004, "Wrong alignment on FCelestialPositionData");
static_assert(sizeof(FCelestialPositionData) == 0x000008, "Wrong size on FCelestialPositionData");
static_assert(offsetof(FCelestialPositionData, Elevation) == 0x000000, "Member 'FCelestialPositionData::Elevation' has a wrong offset!");
static_assert(offsetof(FCelestialPositionData, Azimuth) == 0x000004, "Member 'FCelestialPositionData::Azimuth' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorSkyAtmosphereSettings
// 0x0080 (0x0080 - 0x0000)
struct FSkyCreatorSkyAtmosphereSettings final
{
public:
	float                                         RayleighScatteringScale;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RayleighScattering;                                // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RayleighExponentialDistribution;                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieScatteringScale;                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieScattering;                                     // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAbsorptionScale;                                // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MieAbsorption;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieAnisotropy;                                     // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MieExponentialDistribution;                        // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbsorptionScale;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Absorption;                                        // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SkyLuminanceFactor;                                // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GroundAlbedo;                                      // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFogContribution;                             // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorSkyAtmosphereSettings) == 0x000004, "Wrong alignment on FSkyCreatorSkyAtmosphereSettings");
static_assert(sizeof(FSkyCreatorSkyAtmosphereSettings) == 0x000080, "Wrong size on FSkyCreatorSkyAtmosphereSettings");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, RayleighScatteringScale) == 0x000000, "Member 'FSkyCreatorSkyAtmosphereSettings::RayleighScatteringScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, RayleighScattering) == 0x000004, "Member 'FSkyCreatorSkyAtmosphereSettings::RayleighScattering' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, RayleighExponentialDistribution) == 0x000014, "Member 'FSkyCreatorSkyAtmosphereSettings::RayleighExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, MieScatteringScale) == 0x000018, "Member 'FSkyCreatorSkyAtmosphereSettings::MieScatteringScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, MieScattering) == 0x00001C, "Member 'FSkyCreatorSkyAtmosphereSettings::MieScattering' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, MieAbsorptionScale) == 0x00002C, "Member 'FSkyCreatorSkyAtmosphereSettings::MieAbsorptionScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, MieAbsorption) == 0x000030, "Member 'FSkyCreatorSkyAtmosphereSettings::MieAbsorption' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, MieAnisotropy) == 0x000040, "Member 'FSkyCreatorSkyAtmosphereSettings::MieAnisotropy' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, MieExponentialDistribution) == 0x000044, "Member 'FSkyCreatorSkyAtmosphereSettings::MieExponentialDistribution' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, AbsorptionScale) == 0x000048, "Member 'FSkyCreatorSkyAtmosphereSettings::AbsorptionScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, Absorption) == 0x00004C, "Member 'FSkyCreatorSkyAtmosphereSettings::Absorption' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, SkyLuminanceFactor) == 0x00005C, "Member 'FSkyCreatorSkyAtmosphereSettings::SkyLuminanceFactor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, GroundAlbedo) == 0x00006C, "Member 'FSkyCreatorSkyAtmosphereSettings::GroundAlbedo' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyAtmosphereSettings, HeightFogContribution) == 0x00007C, "Member 'FSkyCreatorSkyAtmosphereSettings::HeightFogContribution' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorVolumetricCloudSettings
// 0x00A8 (0x00A8 - 0x0000)
struct FSkyCreatorVolumetricCloudSettings final
{
public:
	float                                         StratusCoverage;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratusCoverageVariation;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratusHeightVariation;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratocumulusCoverage;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratocumulusCoverageVariation;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StratocumulusHeightVariation;                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulusCoverage;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulusCoverageVariation;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulusHeightVariation;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulonimbusCoverage;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulonimbusAnvil;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulonimbusHeightVariation;                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityBottom;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityMiddle;                                     // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DensityTop;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Albedo;                                            // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GroundAlbedo;                                      // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeersPowderIntensity;                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeersPowderDepth;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomOcclusion;                                   // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BottomOcclusionHeight;                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightEmissive;                                     // 0x006C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseG;                                            // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseG2;                                           // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhaseBlend;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringContribution;                       // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringOcclusion;                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiScatteringEccentricity;                       // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityA;                              // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityB;                              // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityC;                              // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseShapeIntensityD;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurbulenceIntensity;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorVolumetricCloudSettings) == 0x000004, "Wrong alignment on FSkyCreatorVolumetricCloudSettings");
static_assert(sizeof(FSkyCreatorVolumetricCloudSettings) == 0x0000A8, "Wrong size on FSkyCreatorVolumetricCloudSettings");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, StratusCoverage) == 0x000000, "Member 'FSkyCreatorVolumetricCloudSettings::StratusCoverage' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, StratusCoverageVariation) == 0x000004, "Member 'FSkyCreatorVolumetricCloudSettings::StratusCoverageVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, StratusHeightVariation) == 0x000008, "Member 'FSkyCreatorVolumetricCloudSettings::StratusHeightVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, StratocumulusCoverage) == 0x00000C, "Member 'FSkyCreatorVolumetricCloudSettings::StratocumulusCoverage' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, StratocumulusCoverageVariation) == 0x000010, "Member 'FSkyCreatorVolumetricCloudSettings::StratocumulusCoverageVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, StratocumulusHeightVariation) == 0x000014, "Member 'FSkyCreatorVolumetricCloudSettings::StratocumulusHeightVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, CumulusCoverage) == 0x000018, "Member 'FSkyCreatorVolumetricCloudSettings::CumulusCoverage' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, CumulusCoverageVariation) == 0x00001C, "Member 'FSkyCreatorVolumetricCloudSettings::CumulusCoverageVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, CumulusHeightVariation) == 0x000020, "Member 'FSkyCreatorVolumetricCloudSettings::CumulusHeightVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, CumulonimbusCoverage) == 0x000024, "Member 'FSkyCreatorVolumetricCloudSettings::CumulonimbusCoverage' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, CumulonimbusAnvil) == 0x000028, "Member 'FSkyCreatorVolumetricCloudSettings::CumulonimbusAnvil' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, CumulonimbusHeightVariation) == 0x00002C, "Member 'FSkyCreatorVolumetricCloudSettings::CumulonimbusHeightVariation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, DensityBottom) == 0x000030, "Member 'FSkyCreatorVolumetricCloudSettings::DensityBottom' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, DensityMiddle) == 0x000034, "Member 'FSkyCreatorVolumetricCloudSettings::DensityMiddle' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, DensityTop) == 0x000038, "Member 'FSkyCreatorVolumetricCloudSettings::DensityTop' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, Albedo) == 0x00003C, "Member 'FSkyCreatorVolumetricCloudSettings::Albedo' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, GroundAlbedo) == 0x00004C, "Member 'FSkyCreatorVolumetricCloudSettings::GroundAlbedo' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, BeersPowderIntensity) == 0x00005C, "Member 'FSkyCreatorVolumetricCloudSettings::BeersPowderIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, BeersPowderDepth) == 0x000060, "Member 'FSkyCreatorVolumetricCloudSettings::BeersPowderDepth' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, BottomOcclusion) == 0x000064, "Member 'FSkyCreatorVolumetricCloudSettings::BottomOcclusion' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, BottomOcclusionHeight) == 0x000068, "Member 'FSkyCreatorVolumetricCloudSettings::BottomOcclusionHeight' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, NightEmissive) == 0x00006C, "Member 'FSkyCreatorVolumetricCloudSettings::NightEmissive' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, PhaseG) == 0x00007C, "Member 'FSkyCreatorVolumetricCloudSettings::PhaseG' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, PhaseG2) == 0x000080, "Member 'FSkyCreatorVolumetricCloudSettings::PhaseG2' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, PhaseBlend) == 0x000084, "Member 'FSkyCreatorVolumetricCloudSettings::PhaseBlend' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, MultiScatteringContribution) == 0x000088, "Member 'FSkyCreatorVolumetricCloudSettings::MultiScatteringContribution' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, MultiScatteringOcclusion) == 0x00008C, "Member 'FSkyCreatorVolumetricCloudSettings::MultiScatteringOcclusion' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, MultiScatteringEccentricity) == 0x000090, "Member 'FSkyCreatorVolumetricCloudSettings::MultiScatteringEccentricity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityA) == 0x000094, "Member 'FSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityA' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityB) == 0x000098, "Member 'FSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityB' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityC) == 0x00009C, "Member 'FSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityC' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, NoiseShapeIntensityD) == 0x0000A0, "Member 'FSkyCreatorVolumetricCloudSettings::NoiseShapeIntensityD' has a wrong offset!");
static_assert(offsetof(FSkyCreatorVolumetricCloudSettings, TurbulenceIntensity) == 0x0000A4, "Member 'FSkyCreatorVolumetricCloudSettings::TurbulenceIntensity' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorBackgroundCloudSettings
// 0x0024 (0x0024 - 0x0000)
struct FSkyCreatorBackgroundCloudSettings final
{
public:
	float                                         BackgroundCloudsIntensity;                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BackgroundCloudsColorTint;                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLayerA;                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLayerB;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLayerC;                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsLightningPhase;                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorBackgroundCloudSettings) == 0x000004, "Wrong alignment on FSkyCreatorBackgroundCloudSettings");
static_assert(sizeof(FSkyCreatorBackgroundCloudSettings) == 0x000024, "Wrong size on FSkyCreatorBackgroundCloudSettings");
static_assert(offsetof(FSkyCreatorBackgroundCloudSettings, BackgroundCloudsIntensity) == 0x000000, "Member 'FSkyCreatorBackgroundCloudSettings::BackgroundCloudsIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorBackgroundCloudSettings, BackgroundCloudsColorTint) == 0x000004, "Member 'FSkyCreatorBackgroundCloudSettings::BackgroundCloudsColorTint' has a wrong offset!");
static_assert(offsetof(FSkyCreatorBackgroundCloudSettings, BackgroundCloudsLayerA) == 0x000014, "Member 'FSkyCreatorBackgroundCloudSettings::BackgroundCloudsLayerA' has a wrong offset!");
static_assert(offsetof(FSkyCreatorBackgroundCloudSettings, BackgroundCloudsLayerB) == 0x000018, "Member 'FSkyCreatorBackgroundCloudSettings::BackgroundCloudsLayerB' has a wrong offset!");
static_assert(offsetof(FSkyCreatorBackgroundCloudSettings, BackgroundCloudsLayerC) == 0x00001C, "Member 'FSkyCreatorBackgroundCloudSettings::BackgroundCloudsLayerC' has a wrong offset!");
static_assert(offsetof(FSkyCreatorBackgroundCloudSettings, BackgroundCloudsLightningPhase) == 0x000020, "Member 'FSkyCreatorBackgroundCloudSettings::BackgroundCloudsLightningPhase' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorSkyLightSettings
// 0x002C (0x002C - 0x0000)
struct FSkyCreatorSkyLightSettings final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionStrength;                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorSkyLightSettings) == 0x000004, "Wrong alignment on FSkyCreatorSkyLightSettings");
static_assert(sizeof(FSkyCreatorSkyLightSettings) == 0x00002C, "Wrong size on FSkyCreatorSkyLightSettings");
static_assert(offsetof(FSkyCreatorSkyLightSettings, Intensity) == 0x000000, "Member 'FSkyCreatorSkyLightSettings::Intensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyLightSettings, NightIntensity) == 0x000004, "Member 'FSkyCreatorSkyLightSettings::NightIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyLightSettings, LightColor) == 0x000008, "Member 'FSkyCreatorSkyLightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyLightSettings, LowerHemisphereColor) == 0x000018, "Member 'FSkyCreatorSkyLightSettings::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSkyLightSettings, CloudAmbientOcclusionStrength) == 0x000028, "Member 'FSkyCreatorSkyLightSettings::CloudAmbientOcclusionStrength' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorSunLightSettings
// 0x0048 (0x0048 - 0x0000)
struct FSkyCreatorSunLightSettings final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereDiskColorScale;                          // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowStrength;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorSunLightSettings) == 0x000004, "Wrong alignment on FSkyCreatorSunLightSettings");
static_assert(sizeof(FSkyCreatorSunLightSettings) == 0x000048, "Wrong size on FSkyCreatorSunLightSettings");
static_assert(offsetof(FSkyCreatorSunLightSettings, Intensity) == 0x000000, "Member 'FSkyCreatorSunLightSettings::Intensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, LightColor) == 0x000004, "Member 'FSkyCreatorSunLightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, Temperature) == 0x000014, "Member 'FSkyCreatorSunLightSettings::Temperature' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, VolumetricScatteringIntensity) == 0x000018, "Member 'FSkyCreatorSunLightSettings::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, AtmosphereDiskColorScale) == 0x00001C, "Member 'FSkyCreatorSunLightSettings::AtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, CloudScatteredLuminanceScale) == 0x00002C, "Member 'FSkyCreatorSunLightSettings::CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, CloudShadowStrength) == 0x00003C, "Member 'FSkyCreatorSunLightSettings::CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, CloudShadowOnAtmosphereStrength) == 0x000040, "Member 'FSkyCreatorSunLightSettings::CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FSkyCreatorSunLightSettings, CloudShadowOnSurfaceStrength) == 0x000044, "Member 'FSkyCreatorSunLightSettings::CloudShadowOnSurfaceStrength' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorMoonLightSettings
// 0x0048 (0x0048 - 0x0000)
struct FSkyCreatorMoonLightSettings final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightColor;                                        // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Temperature;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricScatteringIntensity;                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           AtmosphereDiskColorScale;                          // 0x001C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CloudScatteredLuminanceScale;                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowStrength;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnAtmosphereStrength;                   // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudShadowOnSurfaceStrength;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorMoonLightSettings) == 0x000004, "Wrong alignment on FSkyCreatorMoonLightSettings");
static_assert(sizeof(FSkyCreatorMoonLightSettings) == 0x000048, "Wrong size on FSkyCreatorMoonLightSettings");
static_assert(offsetof(FSkyCreatorMoonLightSettings, Intensity) == 0x000000, "Member 'FSkyCreatorMoonLightSettings::Intensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, LightColor) == 0x000004, "Member 'FSkyCreatorMoonLightSettings::LightColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, Temperature) == 0x000014, "Member 'FSkyCreatorMoonLightSettings::Temperature' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, VolumetricScatteringIntensity) == 0x000018, "Member 'FSkyCreatorMoonLightSettings::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, AtmosphereDiskColorScale) == 0x00001C, "Member 'FSkyCreatorMoonLightSettings::AtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, CloudScatteredLuminanceScale) == 0x00002C, "Member 'FSkyCreatorMoonLightSettings::CloudScatteredLuminanceScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, CloudShadowStrength) == 0x00003C, "Member 'FSkyCreatorMoonLightSettings::CloudShadowStrength' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, CloudShadowOnAtmosphereStrength) == 0x000040, "Member 'FSkyCreatorMoonLightSettings::CloudShadowOnAtmosphereStrength' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMoonLightSettings, CloudShadowOnSurfaceStrength) == 0x000044, "Member 'FSkyCreatorMoonLightSettings::CloudShadowOnSurfaceStrength' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorExponentialHeightFogSettings
// 0x006C (0x006C - 0x0000)
struct FSkyCreatorExponentialHeightFogSettings final
{
public:
	float                                         FogDensity;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogHeightFalloff;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FogInscatteringColor;                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogStartDistance;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogDensity;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightFalloff;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringColor;                      // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogScatteringDistribution;               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogAlbedo;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStartDistance;                        // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorExponentialHeightFogSettings) == 0x000004, "Wrong alignment on FSkyCreatorExponentialHeightFogSettings");
static_assert(sizeof(FSkyCreatorExponentialHeightFogSettings) == 0x00006C, "Wrong size on FSkyCreatorExponentialHeightFogSettings");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, FogDensity) == 0x000000, "Member 'FSkyCreatorExponentialHeightFogSettings::FogDensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, FogHeightFalloff) == 0x000004, "Member 'FSkyCreatorExponentialHeightFogSettings::FogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, FogInscatteringColor) == 0x000008, "Member 'FSkyCreatorExponentialHeightFogSettings::FogInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, FogStartDistance) == 0x000018, "Member 'FSkyCreatorExponentialHeightFogSettings::FogStartDistance' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, SecondFogDensity) == 0x00001C, "Member 'FSkyCreatorExponentialHeightFogSettings::SecondFogDensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, SecondFogHeightFalloff) == 0x000020, "Member 'FSkyCreatorExponentialHeightFogSettings::SecondFogHeightFalloff' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, DirectionalInscatteringExponent) == 0x000024, "Member 'FSkyCreatorExponentialHeightFogSettings::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, DirectionalInscatteringStartDistance) == 0x000028, "Member 'FSkyCreatorExponentialHeightFogSettings::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, DirectionalInscatteringColor) == 0x00002C, "Member 'FSkyCreatorExponentialHeightFogSettings::DirectionalInscatteringColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, VolumetricFogScatteringDistribution) == 0x00003C, "Member 'FSkyCreatorExponentialHeightFogSettings::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, VolumetricFogAlbedo) == 0x000040, "Member 'FSkyCreatorExponentialHeightFogSettings::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, VolumetricFogEmissive) == 0x000050, "Member 'FSkyCreatorExponentialHeightFogSettings::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, VolumetricFogExtinctionScale) == 0x000060, "Member 'FSkyCreatorExponentialHeightFogSettings::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, VolumetricFogStartDistance) == 0x000064, "Member 'FSkyCreatorExponentialHeightFogSettings::VolumetricFogStartDistance' has a wrong offset!");
static_assert(offsetof(FSkyCreatorExponentialHeightFogSettings, VolumetricFogNearFadeInDistance) == 0x000068, "Member 'FSkyCreatorExponentialHeightFogSettings::VolumetricFogNearFadeInDistance' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorStarMapSettings
// 0x0048 (0x0048 - 0x0000)
struct FSkyCreatorStarMapSettings final
{
public:
	float                                         StarMapIntensity;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StarMapColorTint;                                  // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapTwinkleIntensity;                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapTwinkleSaturation;                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapTwinkleSpeed;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapHorizonThreshold;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StarMapAtmosphereThreshold;                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightHorizonColor;                                 // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NightZenithColor;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorStarMapSettings) == 0x000004, "Wrong alignment on FSkyCreatorStarMapSettings");
static_assert(sizeof(FSkyCreatorStarMapSettings) == 0x000048, "Wrong size on FSkyCreatorStarMapSettings");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapIntensity) == 0x000000, "Member 'FSkyCreatorStarMapSettings::StarMapIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapColorTint) == 0x000004, "Member 'FSkyCreatorStarMapSettings::StarMapColorTint' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapTwinkleIntensity) == 0x000014, "Member 'FSkyCreatorStarMapSettings::StarMapTwinkleIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapTwinkleSaturation) == 0x000018, "Member 'FSkyCreatorStarMapSettings::StarMapTwinkleSaturation' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapTwinkleSpeed) == 0x00001C, "Member 'FSkyCreatorStarMapSettings::StarMapTwinkleSpeed' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapHorizonThreshold) == 0x000020, "Member 'FSkyCreatorStarMapSettings::StarMapHorizonThreshold' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, StarMapAtmosphereThreshold) == 0x000024, "Member 'FSkyCreatorStarMapSettings::StarMapAtmosphereThreshold' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, NightHorizonColor) == 0x000028, "Member 'FSkyCreatorStarMapSettings::NightHorizonColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorStarMapSettings, NightZenithColor) == 0x000038, "Member 'FSkyCreatorStarMapSettings::NightZenithColor' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorWeatherFXSettings
// 0x0164 (0x0164 - 0x0000)
struct FSkyCreatorWeatherFXSettings final
{
public:
	float                                         RainAmount;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RainColor;                                         // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainGravity;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainLifetimeMin;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainLifetimeMax;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSizeMin;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSizeMax;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainMaskHardness;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RainSplashColor;                                   // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashLifetimeMin;                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashLifetimeMax;                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSizeMin;                                 // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSizeMax;                                 // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashVolumetricScale;                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashVolumetricDensity;                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowAmount;                                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SnowColor;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowType;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowGravity;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowTurbulence;                                    // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowLifetimeMin;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowLifetimeMax;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSizeMin;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSizeMax;                                       // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowMaskHardness;                                  // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableLightnings;                                  // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightningSpawnIntervalMin;                         // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnIntervalMax;                         // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightningColorMin;                                 // 0x0094(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightningColorMax;                                 // 0x00A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningLifetime;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltSpawnChance;                          // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltWidthMin;                             // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltWidthMax;                             // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltLengthMin;                            // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltLengthMax;                            // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltCurveFrequency;                       // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltCurveStrengthMin;                     // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltCurveStrengthMax;                     // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltJitterStrength;                       // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBranchSpawnChance;                        // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBranchScaleMin;                           // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBranchScaleMax;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowAmount;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RainbowColor;                                      // 0x00EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowRadius;                                     // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowThickness;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryRainbowColor;                             // 0x0104(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryRainbowRadius;                            // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondaryRainbowThickness;                         // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindAmount;                              // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindDensity;                             // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricWindColor;                               // 0x0124(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindFogDensityContribution;              // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindGravity;                             // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindPrecipitationGravityWeight;          // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistAmount;                              // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistDensity;                             // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricMistColor;                               // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistFogDensityContribution;              // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistGravity;                             // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistPrecipitationGravityWeight;          // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorWeatherFXSettings) == 0x000004, "Wrong alignment on FSkyCreatorWeatherFXSettings");
static_assert(sizeof(FSkyCreatorWeatherFXSettings) == 0x000164, "Wrong size on FSkyCreatorWeatherFXSettings");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainAmount) == 0x000000, "Member 'FSkyCreatorWeatherFXSettings::RainAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainColor) == 0x000004, "Member 'FSkyCreatorWeatherFXSettings::RainColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainGravity) == 0x000014, "Member 'FSkyCreatorWeatherFXSettings::RainGravity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainLifetimeMin) == 0x000018, "Member 'FSkyCreatorWeatherFXSettings::RainLifetimeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainLifetimeMax) == 0x00001C, "Member 'FSkyCreatorWeatherFXSettings::RainLifetimeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSizeMin) == 0x000020, "Member 'FSkyCreatorWeatherFXSettings::RainSizeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSizeMax) == 0x000024, "Member 'FSkyCreatorWeatherFXSettings::RainSizeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainMaskHardness) == 0x000028, "Member 'FSkyCreatorWeatherFXSettings::RainMaskHardness' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashColor) == 0x00002C, "Member 'FSkyCreatorWeatherFXSettings::RainSplashColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashLifetimeMin) == 0x00003C, "Member 'FSkyCreatorWeatherFXSettings::RainSplashLifetimeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashLifetimeMax) == 0x000040, "Member 'FSkyCreatorWeatherFXSettings::RainSplashLifetimeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashSizeMin) == 0x000044, "Member 'FSkyCreatorWeatherFXSettings::RainSplashSizeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashSizeMax) == 0x000048, "Member 'FSkyCreatorWeatherFXSettings::RainSplashSizeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashVolumetricScale) == 0x00004C, "Member 'FSkyCreatorWeatherFXSettings::RainSplashVolumetricScale' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainSplashVolumetricDensity) == 0x000050, "Member 'FSkyCreatorWeatherFXSettings::RainSplashVolumetricDensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowAmount) == 0x000054, "Member 'FSkyCreatorWeatherFXSettings::SnowAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowColor) == 0x000058, "Member 'FSkyCreatorWeatherFXSettings::SnowColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowType) == 0x000068, "Member 'FSkyCreatorWeatherFXSettings::SnowType' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowGravity) == 0x00006C, "Member 'FSkyCreatorWeatherFXSettings::SnowGravity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowTurbulence) == 0x000070, "Member 'FSkyCreatorWeatherFXSettings::SnowTurbulence' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowLifetimeMin) == 0x000074, "Member 'FSkyCreatorWeatherFXSettings::SnowLifetimeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowLifetimeMax) == 0x000078, "Member 'FSkyCreatorWeatherFXSettings::SnowLifetimeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowSizeMin) == 0x00007C, "Member 'FSkyCreatorWeatherFXSettings::SnowSizeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowSizeMax) == 0x000080, "Member 'FSkyCreatorWeatherFXSettings::SnowSizeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SnowMaskHardness) == 0x000084, "Member 'FSkyCreatorWeatherFXSettings::SnowMaskHardness' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, EnableLightnings) == 0x000088, "Member 'FSkyCreatorWeatherFXSettings::EnableLightnings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningSpawnIntervalMin) == 0x00008C, "Member 'FSkyCreatorWeatherFXSettings::LightningSpawnIntervalMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningSpawnIntervalMax) == 0x000090, "Member 'FSkyCreatorWeatherFXSettings::LightningSpawnIntervalMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningColorMin) == 0x000094, "Member 'FSkyCreatorWeatherFXSettings::LightningColorMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningColorMax) == 0x0000A4, "Member 'FSkyCreatorWeatherFXSettings::LightningColorMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningLifetime) == 0x0000B4, "Member 'FSkyCreatorWeatherFXSettings::LightningLifetime' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltSpawnChance) == 0x0000B8, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltSpawnChance' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltWidthMin) == 0x0000BC, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltWidthMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltWidthMax) == 0x0000C0, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltWidthMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltLengthMin) == 0x0000C4, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltLengthMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltLengthMax) == 0x0000C8, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltLengthMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltCurveFrequency) == 0x0000CC, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltCurveFrequency' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltCurveStrengthMin) == 0x0000D0, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltCurveStrengthMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltCurveStrengthMax) == 0x0000D4, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltCurveStrengthMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBoltJitterStrength) == 0x0000D8, "Member 'FSkyCreatorWeatherFXSettings::LightningBoltJitterStrength' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBranchSpawnChance) == 0x0000DC, "Member 'FSkyCreatorWeatherFXSettings::LightningBranchSpawnChance' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBranchScaleMin) == 0x0000E0, "Member 'FSkyCreatorWeatherFXSettings::LightningBranchScaleMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, LightningBranchScaleMax) == 0x0000E4, "Member 'FSkyCreatorWeatherFXSettings::LightningBranchScaleMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainbowAmount) == 0x0000E8, "Member 'FSkyCreatorWeatherFXSettings::RainbowAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainbowColor) == 0x0000EC, "Member 'FSkyCreatorWeatherFXSettings::RainbowColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainbowRadius) == 0x0000FC, "Member 'FSkyCreatorWeatherFXSettings::RainbowRadius' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, RainbowThickness) == 0x000100, "Member 'FSkyCreatorWeatherFXSettings::RainbowThickness' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SecondaryRainbowColor) == 0x000104, "Member 'FSkyCreatorWeatherFXSettings::SecondaryRainbowColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SecondaryRainbowRadius) == 0x000114, "Member 'FSkyCreatorWeatherFXSettings::SecondaryRainbowRadius' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, SecondaryRainbowThickness) == 0x000118, "Member 'FSkyCreatorWeatherFXSettings::SecondaryRainbowThickness' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricWindAmount) == 0x00011C, "Member 'FSkyCreatorWeatherFXSettings::VolumetricWindAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricWindDensity) == 0x000120, "Member 'FSkyCreatorWeatherFXSettings::VolumetricWindDensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricWindColor) == 0x000124, "Member 'FSkyCreatorWeatherFXSettings::VolumetricWindColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricWindFogDensityContribution) == 0x000134, "Member 'FSkyCreatorWeatherFXSettings::VolumetricWindFogDensityContribution' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricWindGravity) == 0x000138, "Member 'FSkyCreatorWeatherFXSettings::VolumetricWindGravity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricWindPrecipitationGravityWeight) == 0x00013C, "Member 'FSkyCreatorWeatherFXSettings::VolumetricWindPrecipitationGravityWeight' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricMistAmount) == 0x000140, "Member 'FSkyCreatorWeatherFXSettings::VolumetricMistAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricMistDensity) == 0x000144, "Member 'FSkyCreatorWeatherFXSettings::VolumetricMistDensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricMistColor) == 0x000148, "Member 'FSkyCreatorWeatherFXSettings::VolumetricMistColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricMistFogDensityContribution) == 0x000158, "Member 'FSkyCreatorWeatherFXSettings::VolumetricMistFogDensityContribution' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricMistGravity) == 0x00015C, "Member 'FSkyCreatorWeatherFXSettings::VolumetricMistGravity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherFXSettings, VolumetricMistPrecipitationGravityWeight) == 0x000160, "Member 'FSkyCreatorWeatherFXSettings::VolumetricMistPrecipitationGravityWeight' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorMaterialFXSettings
// 0x009C (0x009C - 0x0000)
struct FSkyCreatorMaterialFXSettings final
{
public:
	float                                         WetnessAmount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           WetnessColor;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesAmount;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PuddlesColor;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterAmount;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterScaleMin;                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterScaleMax;                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterFadingRate;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesAmount;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesIntensity;                              // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesSizeMin;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesSizeMax;                                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesDamping;                                // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesIntensity;                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesSpeed;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsAmount;                                   // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsIntensity;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsScaleMin;                                 // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsScaleMax;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsFadingRate;                               // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksAmount;                                 // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksIntensity;                              // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksSizeMin;                                // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksSizeMax;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksFadingRate;                             // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksTrailFadingRate;                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowAmount;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SnowColor;                                         // 0x0084(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowIntensity;                                     // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesThreshold;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorMaterialFXSettings) == 0x000004, "Wrong alignment on FSkyCreatorMaterialFXSettings");
static_assert(sizeof(FSkyCreatorMaterialFXSettings) == 0x00009C, "Wrong size on FSkyCreatorMaterialFXSettings");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, WetnessAmount) == 0x000000, "Member 'FSkyCreatorMaterialFXSettings::WetnessAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, WetnessColor) == 0x000004, "Member 'FSkyCreatorMaterialFXSettings::WetnessColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, PuddlesAmount) == 0x000014, "Member 'FSkyCreatorMaterialFXSettings::PuddlesAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, PuddlesColor) == 0x000018, "Member 'FSkyCreatorMaterialFXSettings::PuddlesColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainSplatterAmount) == 0x000028, "Member 'FSkyCreatorMaterialFXSettings::RainSplatterAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainSplatterScaleMin) == 0x00002C, "Member 'FSkyCreatorMaterialFXSettings::RainSplatterScaleMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainSplatterScaleMax) == 0x000030, "Member 'FSkyCreatorMaterialFXSettings::RainSplatterScaleMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainSplatterFadingRate) == 0x000034, "Member 'FSkyCreatorMaterialFXSettings::RainSplatterFadingRate' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainRipplesAmount) == 0x000038, "Member 'FSkyCreatorMaterialFXSettings::RainRipplesAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainRipplesIntensity) == 0x00003C, "Member 'FSkyCreatorMaterialFXSettings::RainRipplesIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainRipplesSizeMin) == 0x000040, "Member 'FSkyCreatorMaterialFXSettings::RainRipplesSizeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainRipplesSizeMax) == 0x000044, "Member 'FSkyCreatorMaterialFXSettings::RainRipplesSizeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainRipplesDamping) == 0x000048, "Member 'FSkyCreatorMaterialFXSettings::RainRipplesDamping' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, WindRipplesIntensity) == 0x00004C, "Member 'FSkyCreatorMaterialFXSettings::WindRipplesIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, WindRipplesSpeed) == 0x000050, "Member 'FSkyCreatorMaterialFXSettings::WindRipplesSpeed' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainDropsAmount) == 0x000054, "Member 'FSkyCreatorMaterialFXSettings::RainDropsAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainDropsIntensity) == 0x000058, "Member 'FSkyCreatorMaterialFXSettings::RainDropsIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainDropsScaleMin) == 0x00005C, "Member 'FSkyCreatorMaterialFXSettings::RainDropsScaleMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainDropsScaleMax) == 0x000060, "Member 'FSkyCreatorMaterialFXSettings::RainDropsScaleMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainDropsFadingRate) == 0x000064, "Member 'FSkyCreatorMaterialFXSettings::RainDropsFadingRate' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainStreaksAmount) == 0x000068, "Member 'FSkyCreatorMaterialFXSettings::RainStreaksAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainStreaksIntensity) == 0x00006C, "Member 'FSkyCreatorMaterialFXSettings::RainStreaksIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainStreaksSizeMin) == 0x000070, "Member 'FSkyCreatorMaterialFXSettings::RainStreaksSizeMin' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainStreaksSizeMax) == 0x000074, "Member 'FSkyCreatorMaterialFXSettings::RainStreaksSizeMax' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainStreaksFadingRate) == 0x000078, "Member 'FSkyCreatorMaterialFXSettings::RainStreaksFadingRate' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, RainStreaksTrailFadingRate) == 0x00007C, "Member 'FSkyCreatorMaterialFXSettings::RainStreaksTrailFadingRate' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, SnowAmount) == 0x000080, "Member 'FSkyCreatorMaterialFXSettings::SnowAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, SnowColor) == 0x000084, "Member 'FSkyCreatorMaterialFXSettings::SnowColor' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, SnowIntensity) == 0x000094, "Member 'FSkyCreatorMaterialFXSettings::SnowIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorMaterialFXSettings, SnowSparklesThreshold) == 0x000098, "Member 'FSkyCreatorMaterialFXSettings::SnowSparklesThreshold' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorWindSettings
// 0x0020 (0x0020 - 0x0000)
struct FSkyCreatorWindSettings final
{
public:
	float                                         CloudWindDirection;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudWindSpeed;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudWindSkewAmount;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNoiseShapeWindDirection;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNoiseShapeWindSpeedHorizontal;                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudNoiseDetailWindSpeedVertical;                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirection;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorWindSettings) == 0x000004, "Wrong alignment on FSkyCreatorWindSettings");
static_assert(sizeof(FSkyCreatorWindSettings) == 0x000020, "Wrong size on FSkyCreatorWindSettings");
static_assert(offsetof(FSkyCreatorWindSettings, CloudWindDirection) == 0x000000, "Member 'FSkyCreatorWindSettings::CloudWindDirection' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, CloudWindSpeed) == 0x000004, "Member 'FSkyCreatorWindSettings::CloudWindSpeed' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, CloudWindSkewAmount) == 0x000008, "Member 'FSkyCreatorWindSettings::CloudWindSkewAmount' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, CloudNoiseShapeWindDirection) == 0x00000C, "Member 'FSkyCreatorWindSettings::CloudNoiseShapeWindDirection' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, CloudNoiseShapeWindSpeedHorizontal) == 0x000010, "Member 'FSkyCreatorWindSettings::CloudNoiseShapeWindSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, CloudNoiseDetailWindSpeedVertical) == 0x000014, "Member 'FSkyCreatorWindSettings::CloudNoiseDetailWindSpeedVertical' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, WindDirection) == 0x000018, "Member 'FSkyCreatorWindSettings::WindDirection' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWindSettings, WindSpeed) == 0x00001C, "Member 'FSkyCreatorWindSettings::WindSpeed' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorPostProcessSettings
// 0x000C (0x000C - 0x0000)
struct FSkyCreatorPostProcessSettings final
{
public:
	float                                         BloomIntensity;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureCompensation;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorPostProcessSettings) == 0x000004, "Wrong alignment on FSkyCreatorPostProcessSettings");
static_assert(sizeof(FSkyCreatorPostProcessSettings) == 0x00000C, "Wrong size on FSkyCreatorPostProcessSettings");
static_assert(offsetof(FSkyCreatorPostProcessSettings, BloomIntensity) == 0x000000, "Member 'FSkyCreatorPostProcessSettings::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FSkyCreatorPostProcessSettings, BloomThreshold) == 0x000004, "Member 'FSkyCreatorPostProcessSettings::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FSkyCreatorPostProcessSettings, ExposureCompensation) == 0x000008, "Member 'FSkyCreatorPostProcessSettings::ExposureCompensation' has a wrong offset!");

// ScriptStruct SkyCreatorPlugin.SkyCreatorWeatherSettings
// 0x04E8 (0x04E8 - 0x0000)
struct FSkyCreatorWeatherSettings final
{
public:
	struct FSkyCreatorSkyAtmosphereSettings       SkyAtmosphereSettings;                             // 0x0000(0x0080)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorVolumetricCloudSettings     VolumetricCloudSettings;                           // 0x0080(0x00A8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorBackgroundCloudSettings     BackgroundCloudSettings;                           // 0x0128(0x0024)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyLightSettings            SkyLightSettings;                                  // 0x014C(0x002C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSunLightSettings            SunLightSettings;                                  // 0x0178(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorMoonLightSettings           MoonLightSettings;                                 // 0x01C0(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorExponentialHeightFogSettings ExponentialHeightFogSettings;                      // 0x0208(0x006C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorStarMapSettings             StarMapSettings;                                   // 0x0274(0x0048)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherFXSettings           WeatherFXSettings;                                 // 0x02BC(0x0164)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorMaterialFXSettings          MaterialFXSettings;                                // 0x0420(0x009C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWindSettings                WindSettings;                                      // 0x04BC(0x0020)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorPostProcessSettings         PostProcessSettings;                               // 0x04DC(0x000C)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyCreatorWeatherSettings) == 0x000004, "Wrong alignment on FSkyCreatorWeatherSettings");
static_assert(sizeof(FSkyCreatorWeatherSettings) == 0x0004E8, "Wrong size on FSkyCreatorWeatherSettings");
static_assert(offsetof(FSkyCreatorWeatherSettings, SkyAtmosphereSettings) == 0x000000, "Member 'FSkyCreatorWeatherSettings::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, VolumetricCloudSettings) == 0x000080, "Member 'FSkyCreatorWeatherSettings::VolumetricCloudSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, BackgroundCloudSettings) == 0x000128, "Member 'FSkyCreatorWeatherSettings::BackgroundCloudSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, SkyLightSettings) == 0x00014C, "Member 'FSkyCreatorWeatherSettings::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, SunLightSettings) == 0x000178, "Member 'FSkyCreatorWeatherSettings::SunLightSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, MoonLightSettings) == 0x0001C0, "Member 'FSkyCreatorWeatherSettings::MoonLightSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, ExponentialHeightFogSettings) == 0x000208, "Member 'FSkyCreatorWeatherSettings::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, StarMapSettings) == 0x000274, "Member 'FSkyCreatorWeatherSettings::StarMapSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, WeatherFXSettings) == 0x0002BC, "Member 'FSkyCreatorWeatherSettings::WeatherFXSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, MaterialFXSettings) == 0x000420, "Member 'FSkyCreatorWeatherSettings::MaterialFXSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, WindSettings) == 0x0004BC, "Member 'FSkyCreatorWeatherSettings::WindSettings' has a wrong offset!");
static_assert(offsetof(FSkyCreatorWeatherSettings, PostProcessSettings) == 0x0004DC, "Member 'FSkyCreatorWeatherSettings::PostProcessSettings' has a wrong offset!");

}

