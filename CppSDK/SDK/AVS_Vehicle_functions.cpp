#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVS_Vehicle

#include "Basic.hpp"

#include "AVS_Vehicle_classes.hpp"
#include "AVS_Vehicle_parameters.hpp"


namespace SDK
{

// Function AVS_Vehicle.AVS_Vehicle_C.25 TPS
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::Two5_TPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "25 TPS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.AddWheel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Wheel_C*                 NewWheel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::AddWheel(class UVehicle_Wheel_C* NewWheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "AddWheel");

	Params::AVS_Vehicle_C_AddWheel Parms{};

	Parms.NewWheel = NewWheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.AnyWheelContact
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    WheelContact                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::AnyWheelContact(bool* WheelContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "AnyWheelContact");

	Params::AVS_Vehicle_C_AnyWheelContact Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WheelContact != nullptr)
		*WheelContact = Parms.WheelContact;
}


// Function AVS_Vehicle.AVS_Vehicle_C.ApplyCOM
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ApplyCOM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ApplyCOM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.AutomaticShifterPosition
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::AutomaticShifterPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "AutomaticShifterPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.AVS_PrintDebugMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Error_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::AVS_PrintDebugMessage(const class FString& Message, bool Error_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "AVS_PrintDebugMessage");

	Params::AVS_Vehicle_C_AVS_PrintDebugMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Error_ = Error_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.AVS_Tick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::AVS_Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "AVS_Tick");

	Params::AVS_Vehicle_C_AVS_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.CalculateSteering
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::CalculateSteering()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CalculateSteering");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ChangeGear
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ChangeGear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ChangeGear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.Cleanup
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "Cleanup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ConstructComponents
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ConstructComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ConstructComponents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ConstructWheels
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ConstructWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ConstructWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.CopyInputsFromHost
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::CopyInputsFromHost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CopyInputsFromHost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.CreateBoneConstraint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bManualAttachment                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UVehicleConstraint*               VehicleConstraint                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::CreateBoneConstraint(bool bManualAttachment, const struct FTransform& RelativeTransform, class UVehicleConstraint** VehicleConstraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CreateBoneConstraint");

	Params::AVS_Vehicle_C_CreateBoneConstraint Parms{};

	Parms.bManualAttachment = bManualAttachment;
	Parms.RelativeTransform = std::move(RelativeTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (VehicleConstraint != nullptr)
		*VehicleConstraint = Parms.VehicleConstraint;
}


// Function AVS_Vehicle.AVS_Vehicle_C.CreateHitchConstraints
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bManualAttachment                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UVehicleConstraint*               VehicleConstraint                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPhysicsHandleComponent*          PhysicsHandle                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::CreateHitchConstraints(bool bManualAttachment, const struct FTransform& RelativeTransform, class UVehicleConstraint** VehicleConstraint, class UPhysicsHandleComponent** PhysicsHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CreateHitchConstraints");

	Params::AVS_Vehicle_C_CreateHitchConstraints Parms{};

	Parms.bManualAttachment = bManualAttachment;
	Parms.RelativeTransform = std::move(RelativeTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (VehicleConstraint != nullptr)
		*VehicleConstraint = Parms.VehicleConstraint;

	if (PhysicsHandle != nullptr)
		*PhysicsHandle = Parms.PhysicsHandle;
}


// Function AVS_Vehicle.AVS_Vehicle_C.CreateNewConstraint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bManualAttachment                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UVehicleConstraint*               VehicleConstraint                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::CreateNewConstraint(bool bManualAttachment, const struct FTransform& RelativeTransform, class UVehicleConstraint** VehicleConstraint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CreateNewConstraint");

	Params::AVS_Vehicle_C_CreateNewConstraint Parms{};

	Parms.bManualAttachment = bManualAttachment;
	Parms.RelativeTransform = std::move(RelativeTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (VehicleConstraint != nullptr)
		*VehicleConstraint = Parms.VehicleConstraint;
}


// Function AVS_Vehicle.AVS_Vehicle_C.CreateNewWheelController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bManualAttachment                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       RelativeTransform                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMeshComponent*             Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::CreateNewWheelController(bool bManualAttachment, const struct FTransform& RelativeTransform, class UStaticMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CreateNewWheelController");

	Params::AVS_Vehicle_C_CreateNewWheelController Parms{};

	Parms.bManualAttachment = bManualAttachment;
	Parms.RelativeTransform = std::move(RelativeTransform);

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function AVS_Vehicle.AVS_Vehicle_C.CreateSuspensionPreview
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Wheel_C*                 Wheel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::CreateSuspensionPreview(class UVehicle_Wheel_C* Wheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CreateSuspensionPreview");

	Params::AVS_Vehicle_C_CreateSuspensionPreview Parms{};

	Parms.Wheel = Wheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.CreateWheelMesh
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Wheel_C*                 WheelComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              NewMesh                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::CreateWheelMesh(class UVehicle_Wheel_C* WheelComponent, class UPrimitiveComponent** NewMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "CreateWheelMesh");

	Params::AVS_Vehicle_C_CreateWheelMesh Parms{};

	Parms.WheelComponent = WheelComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (NewMesh != nullptr)
		*NewMesh = Parms.NewMesh;
}


// Function AVS_Vehicle.AVS_Vehicle_C.DebugDraw
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::DebugDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DebugDraw");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.DebugPassiveText
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::DebugPassiveText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DebugPassiveText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.DestroyOwnedComponent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::DestroyOwnedComponent(class UActorComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DestroyOwnedComponent");

	Params::AVS_Vehicle_C_DestroyOwnedComponent Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.DestroyWheelMesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Wheel_C*                 WheelComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::DestroyWheelMesh(class UVehicle_Wheel_C* WheelComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DestroyWheelMesh");

	Params::AVS_Vehicle_C_DestroyWheelMesh Parms{};

	Parms.WheelComponent = WheelComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.DetachAllWheels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::DetachAllWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DetachAllWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.DeterminePassiveState
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AAVS_Vehicle_C::DeterminePassiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DeterminePassiveState");

	Params::AVS_Vehicle_C_DeterminePassiveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_Vehicle.AVS_Vehicle_C.DoStabilityControl
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::DoStabilityControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "DoStabilityControl");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.EngineSimluation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::EngineSimluation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "EngineSimluation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ExecuteUbergraph_AVS_Vehicle
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::ExecuteUbergraph_AVS_Vehicle(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ExecuteUbergraph_AVS_Vehicle");

	Params::AVS_Vehicle_C_ExecuteUbergraph_AVS_Vehicle Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GearChanged
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_PreviousGear                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_CurrentGear                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GearChanged(int32 Param_PreviousGear, int32 Param_CurrentGear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GearChanged");

	Params::AVS_Vehicle_C_GearChanged Parms{};

	Parms.Param_PreviousGear = Param_PreviousGear;
	Parms.Param_CurrentGear = Param_CurrentGear;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetAcceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_Acceleration                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetAcceleration(double* Param_Acceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetAcceleration");

	Params::AVS_Vehicle_C_GetAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Acceleration != nullptr)
		*Param_Acceleration = Parms.Param_Acceleration;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetAirSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_AirSpeed                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetAirSpeed(double* Param_AirSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetAirSpeed");

	Params::AVS_Vehicle_C_GetAirSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_AirSpeed != nullptr)
		*Param_AirSpeed = Parms.Param_AirSpeed;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetAllWheels
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UVehicle_Wheel_C*>         Param_Wheels                                           (Parm, OutParm, ContainsInstancedReference)

void AAVS_Vehicle_C::GetAllWheels(TArray<class UVehicle_Wheel_C*>* Param_Wheels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetAllWheels");

	Params::AVS_Vehicle_C_GetAllWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Wheels != nullptr)
		*Param_Wheels = std::move(Parms.Param_Wheels);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetBrake
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_Brake                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetBrake(double* Param_Brake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetBrake");

	Params::AVS_Vehicle_C_GetBrake Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Brake != nullptr)
		*Param_Brake = Parms.Param_Brake;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetBrakeApplied
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsBrakeApplied                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetBrakeApplied(bool* Param_IsBrakeApplied)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetBrakeApplied");

	Params::AVS_Vehicle_C_GetBrakeApplied Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsBrakeApplied != nullptr)
		*Param_IsBrakeApplied = Parms.Param_IsBrakeApplied;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetCurrentGear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Gear                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVehicleGear                     Param_CurrentGear                                      (Parm, OutParm, NoDestructor)

void AAVS_Vehicle_C::GetCurrentGear(int32* Param_Gear, struct FVehicleGear* Param_CurrentGear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetCurrentGear");

	Params::AVS_Vehicle_C_GetCurrentGear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Gear != nullptr)
		*Param_Gear = Parms.Param_Gear;

	if (Param_CurrentGear != nullptr)
		*Param_CurrentGear = std::move(Parms.Param_CurrentGear);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetCurrentSteering
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  CurrentSteering                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetCurrentSteering(double* CurrentSteering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetCurrentSteering");

	Params::AVS_Vehicle_C_GetCurrentSteering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentSteering != nullptr)
		*CurrentSteering = Parms.CurrentSteering;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetCurrentSteeringInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_SteeringInput                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetCurrentSteeringInput(double* Param_SteeringInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetCurrentSteeringInput");

	Params::AVS_Vehicle_C_GetCurrentSteeringInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SteeringInput != nullptr)
		*Param_SteeringInput = Parms.Param_SteeringInput;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetEngineRunning
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_EngineRunning                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetEngineRunning(bool* Param_EngineRunning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetEngineRunning");

	Params::AVS_Vehicle_C_GetEngineRunning Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_EngineRunning != nullptr)
		*Param_EngineRunning = Parms.Param_EngineRunning;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetExactCenterOfMass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ExactCOM                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetExactCenterOfMass(struct FVector* ExactCOM, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetExactCenterOfMass");

	Params::AVS_Vehicle_C_GetExactCenterOfMass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ExactCOM != nullptr)
		*ExactCOM = std::move(Parms.ExactCOM);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetHandbrakeApplied
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    IsHandbrakeApplied                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetHandbrakeApplied(bool* IsHandbrakeApplied)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetHandbrakeApplied");

	Params::AVS_Vehicle_C_GetHandbrakeApplied Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsHandbrakeApplied != nullptr)
		*IsHandbrakeApplied = Parms.IsHandbrakeApplied;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetHostTrailerRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         Param_HostTrailerRotation                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AAVS_Vehicle_C::GetHostTrailerRotation(struct FRotator* Param_HostTrailerRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetHostTrailerRotation");

	Params::AVS_Vehicle_C_GetHostTrailerRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_HostTrailerRotation != nullptr)
		*Param_HostTrailerRotation = std::move(Parms.Param_HostTrailerRotation);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetInitializationState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_Initialized                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetInitializationState(bool* Param_Initialized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetInitializationState");

	Params::AVS_Vehicle_C_GetInitializationState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Initialized != nullptr)
		*Param_Initialized = Parms.Param_Initialized;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetLightsActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LightGroup                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetLightsActive(class FName LightGroup, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetLightsActive");

	Params::AVS_Vehicle_C_GetLightsActive Parms{};

	Parms.LightGroup = LightGroup;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function AVS_Vehicle.AVS_Vehicle_C.getRPM
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_RPM                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetRPM(double* Param_RPM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "getRPM");

	Params::AVS_Vehicle_C_GetRPM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_RPM != nullptr)
		*Param_RPM = Parms.Param_RPM;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetSelectedGear
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   GearNumber                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVehicleGear                     SelectedGear                                           (Parm, OutParm, NoDestructor)

void AAVS_Vehicle_C::GetSelectedGear(int32* GearNumber, struct FVehicleGear* SelectedGear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetSelectedGear");

	Params::AVS_Vehicle_C_GetSelectedGear Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GearNumber != nullptr)
		*GearNumber = Parms.GearNumber;

	if (SelectedGear != nullptr)
		*SelectedGear = std::move(Parms.SelectedGear);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetShifterPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EShifterPositions                       ShifterPos                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetShifterPosition(EShifterPositions* ShifterPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetShifterPosition");

	Params::AVS_Vehicle_C_GetShifterPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShifterPos != nullptr)
		*ShifterPos = Parms.ShifterPos;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetSlip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_Slip                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetSlip(double* Param_Slip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetSlip");

	Params::AVS_Vehicle_C_GetSlip Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Slip != nullptr)
		*Param_Slip = Parms.Param_Slip;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetSpeedUnitData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSpeedUnit                       Param_SpeedUnit                                        (Parm, OutParm, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetSpeedUnitData(struct FSpeedUnit* Param_SpeedUnit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetSpeedUnitData");

	Params::AVS_Vehicle_C_GetSpeedUnitData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SpeedUnit != nullptr)
		*Param_SpeedUnit = std::move(Parms.Param_SpeedUnit);
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetTargetSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_TargetSpeed                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetTargetSpeed(double* Param_TargetSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetTargetSpeed");

	Params::AVS_Vehicle_C_GetTargetSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_TargetSpeed != nullptr)
		*Param_TargetSpeed = Parms.Param_TargetSpeed;
}


// Function AVS_Vehicle.AVS_Vehicle_C.getThrottle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_Throttle                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetThrottle(double* Param_Throttle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "getThrottle");

	Params::AVS_Vehicle_C_GetThrottle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Throttle != nullptr)
		*Param_Throttle = Parms.Param_Throttle;
}


// Function AVS_Vehicle.AVS_Vehicle_C.getTorque
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_Torque                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetTorque(double* Param_Torque)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "getTorque");

	Params::AVS_Vehicle_C_GetTorque Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Torque != nullptr)
		*Param_Torque = Parms.Param_Torque;
}


// Function AVS_Vehicle.AVS_Vehicle_C.GetVehicleMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::GetVehicleMesh(class UMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "GetVehicleMesh");

	Params::AVS_Vehicle_C_GetVehicleMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitAudio
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitAudio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitCOM
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitCOM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitCOM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitExhausts
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitExhausts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitExhausts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitLights
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitLights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitLights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitSpeedUnit
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitSpeedUnit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitSpeedUnit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitVehicleMesh
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasValidMesh                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::InitVehicleMesh(bool* HasValidMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitVehicleMesh");

	Params::AVS_Vehicle_C_InitVehicleMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasValidMesh != nullptr)
		*HasValidMesh = Parms.HasValidMesh;
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitWheelReprojectionExperiment
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitWheelReprojectionExperiment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitWheelReprojectionExperiment");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.InitWheels
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::InitWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "InitWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.IsCinematic
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_IsCinematic                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::IsCinematic(bool* Param_IsCinematic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "IsCinematic");

	Params::AVS_Vehicle_C_IsCinematic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsCinematic != nullptr)
		*Param_IsCinematic = Parms.Param_IsCinematic;
}


// Function AVS_Vehicle.AVS_Vehicle_C.isOwningClient
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    OwningClient                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::IsOwningClient(bool* OwningClient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "isOwningClient");

	Params::AVS_Vehicle_C_IsOwningClient Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OwningClient != nullptr)
		*OwningClient = Parms.OwningClient;
}


// Function AVS_Vehicle.AVS_Vehicle_C.MoveShifterPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MoveUp                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EShifterPositions                       NewPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::MoveShifterPosition(bool MoveUp, EShifterPositions* NewPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "MoveShifterPosition");

	Params::AVS_Vehicle_C_MoveShifterPosition Parms{};

	Parms.MoveUp = MoveUp;

	UObject::ProcessEvent(Func, &Parms);

	if (NewPos != nullptr)
		*NewPos = Parms.NewPos;
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_BrakeInput
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_BrakeInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_BrakeInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_EngineRunning
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_EngineRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_EngineRunning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_HandbrakeApplied
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_HandbrakeApplied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_HandbrakeApplied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_ServerEngineRunning
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_ServerEngineRunning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_ServerEngineRunning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_Shifter
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_Shifter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_Shifter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_SteeringInput
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_SteeringInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_SteeringInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OnRep_ThrottleInput
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::OnRep_ThrottleInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OnRep_ThrottleInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.OwnerChanged
// (Event, Protected, BlueprintEvent)

void AAVS_Vehicle_C::OwnerChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "OwnerChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.PassiveStateChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewPassiveState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::PassiveStateChanged(bool NewPassiveState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "PassiveStateChanged");

	Params::AVS_Vehicle_C_PassiveStateChanged Parms{};

	Parms.NewPassiveState = NewPassiveState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.PassiveTickBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::PassiveTickBP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "PassiveTickBP");

	Params::AVS_Vehicle_C_PassiveTickBP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.PostConstructInit
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::PostConstructInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "PostConstructInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAVS_Vehicle_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ReceiveDestroyed
// (Event, Public, BlueprintEvent)

void AAVS_Vehicle_C::ReceiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ReceiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ReceivePossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      NewController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::ReceivePossessed(class AController* NewController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ReceivePossessed");

	Params::AVS_Vehicle_C_ReceivePossessed Parms{};

	Parms.NewController = NewController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ReceiveUnpossessed
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      OldController                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::ReceiveUnpossessed(class AController* OldController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ReceiveUnpossessed");

	Params::AVS_Vehicle_C_ReceiveUnpossessed Parms{};

	Parms.OldController = OldController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RefreshContactModification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Instant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RefreshContactModification(bool Instant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RefreshContactModification");

	Params::AVS_Vehicle_C_RefreshContactModification Parms{};

	Parms.Instant = Instant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.Reinit TPS
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::Reinit_TPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "Reinit TPS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RemoveWheel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Wheel_C*                 Wheel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RemoveWheel(class UVehicle_Wheel_C* Wheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RemoveWheel");

	Params::AVS_Vehicle_C_RemoveWheel Parms{};

	Parms.Wheel = Wheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ReprojectWheels
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ReprojectWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ReprojectWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ResetAllWheels
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ResetAllWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ResetAllWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Brake
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Brake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RPC_Server_Brake(double Param_Brake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_Brake");

	Params::AVS_Vehicle_C_RPC_Server_Brake Parms{};

	Parms.Param_Brake = Param_Brake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_EngineRunning
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_EngineRunning                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RPC_Server_EngineRunning(bool Param_EngineRunning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_EngineRunning");

	Params::AVS_Vehicle_C_RPC_Server_EngineRunning Parms{};

	Parms.Param_EngineRunning = Param_EngineRunning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Handbrake
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Handbrake                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RPC_Server_Handbrake(bool Handbrake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_Handbrake");

	Params::AVS_Vehicle_C_RPC_Server_Handbrake Parms{};

	Parms.Handbrake = Handbrake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Shifter
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EShifterPositions                       ShifterPosition                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RPC_Server_Shifter(EShifterPositions ShifterPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_Shifter");

	Params::AVS_Vehicle_C_RPC_Server_Shifter Parms{};

	Parms.ShifterPosition = ShifterPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Steering
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RPC_Server_Steering(double Axis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_Steering");

	Params::AVS_Vehicle_C_RPC_Server_Steering Parms{};

	Parms.Axis = Axis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_Throttle
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Throttle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::RPC_Server_Throttle(double Param_Throttle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_Throttle");

	Params::AVS_Vehicle_C_RPC_Server_Throttle Parms{};

	Parms.Param_Throttle = Param_Throttle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RPC_Server_TrailerRotation
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         ServerTrailerRotation                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AAVS_Vehicle_C::RPC_Server_TrailerRotation(const struct FRotator& ServerTrailerRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RPC_Server_TrailerRotation");

	Params::AVS_Vehicle_C_RPC_Server_TrailerRotation Parms{};

	Parms.ServerTrailerRotation = std::move(ServerTrailerRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.RunContactMod
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::RunContactMod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "RunContactMod");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SendTrailerRotationRPC
// (BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::SendTrailerRotationRPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SendTrailerRotationRPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetBrakeInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Brake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetBrakeInput(double Param_Brake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetBrakeInput");

	Params::AVS_Vehicle_C_SetBrakeInput Parms{};

	Parms.Param_Brake = Param_Brake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.setCenterOfMassOffset
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          RelativeCOM                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetCenterOfMassOffset(const struct FVector& RelativeCOM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "setCenterOfMassOffset");

	Params::AVS_Vehicle_C_SetCenterOfMassOffset Parms{};

	Parms.RelativeCOM = std::move(RelativeCOM);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetEngineRunning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_EngineRunning                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetEngineRunning(bool Param_EngineRunning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetEngineRunning");

	Params::AVS_Vehicle_C_SetEngineRunning Parms{};

	Parms.Param_EngineRunning = Param_EngineRunning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetExactCenterOfMass
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewCenterOfMass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetExactCenterOfMass(const struct FVector& NewCenterOfMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetExactCenterOfMass");

	Params::AVS_Vehicle_C_SetExactCenterOfMass Parms{};

	Parms.NewCenterOfMass = std::move(NewCenterOfMass);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetGearArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVehicleGear>             Param_Gears                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAVS_Vehicle_C::SetGearArray(TArray<struct FVehicleGear>& Param_Gears)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetGearArray");

	Params::AVS_Vehicle_C_SetGearArray Parms{};

	Parms.Param_Gears = std::move(Param_Gears);

	UObject::ProcessEvent(Func, &Parms);

	Param_Gears = std::move(Parms.Param_Gears);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetGearItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVehicleGear                     NewGearSettings                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void AAVS_Vehicle_C::SetGearItem(int32 Param_Index, const struct FVehicleGear& NewGearSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetGearItem");

	Params::AVS_Vehicle_C_SetGearItem Parms{};

	Parms.Param_Index = Param_Index;
	Parms.NewGearSettings = std::move(NewGearSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetHandbrakeInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Handbrake                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetHandbrakeInput(bool Handbrake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetHandbrakeInput");

	Params::AVS_Vehicle_C_SetHandbrakeInput Parms{};

	Parms.Handbrake = Handbrake;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetInputHost
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAVS_Vehicle_C*                   Param_InputHost                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetInputHost(class AAVS_Vehicle_C* Param_InputHost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetInputHost");

	Params::AVS_Vehicle_C_SetInputHost Parms{};

	Parms.Param_InputHost = Param_InputHost;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetLightsActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LightGroup                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetLightsActive(class FName LightGroup, bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetLightsActive");

	Params::AVS_Vehicle_C_SetLightsActive Parms{};

	Parms.LightGroup = LightGroup;
	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetLocalEngineRunning
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_EngineRunning                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetLocalEngineRunning(bool Param_EngineRunning)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetLocalEngineRunning");

	Params::AVS_Vehicle_C_SetLocalEngineRunning Parms{};

	Parms.Param_EngineRunning = Param_EngineRunning;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetManualGear
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   GearNum                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetManualGear(int32 GearNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetManualGear");

	Params::AVS_Vehicle_C_SetManualGear Parms{};

	Parms.GearNum = GearNum;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetMeshMaterial
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStaticMeshComponent*             Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UMaterialInterface*               Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetMeshMaterial(class UStaticMeshComponent* Mesh, class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetMeshMaterial");

	Params::AVS_Vehicle_C_SetMeshMaterial Parms{};

	Parms.Mesh = Mesh;
	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetPhysics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Simulate_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetPhysics(bool Simulate_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetPhysics");

	Params::AVS_Vehicle_C_SetPhysics Parms{};

	Parms.Simulate_ = Simulate_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetShifterPosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EShifterPositions                       Shifter_Position                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetShifterPosition(EShifterPositions Shifter_Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetShifterPosition");

	Params::AVS_Vehicle_C_SetShifterPosition Parms{};

	Parms.Shifter_Position = Shifter_Position;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetSteeringInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Steering                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetSteeringInput(double Param_Steering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetSteeringInput");

	Params::AVS_Vehicle_C_SetSteeringInput Parms{};

	Parms.Param_Steering = Param_Steering;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetThrottleAndBrakeInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Throttle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetThrottleAndBrakeInput(double Param_Throttle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetThrottleAndBrakeInput");

	Params::AVS_Vehicle_C_SetThrottleAndBrakeInput Parms{};

	Parms.Param_Throttle = Param_Throttle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetThrottleInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Param_Throttle                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetThrottleInput(double Param_Throttle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetThrottleInput");

	Params::AVS_Vehicle_C_SetThrottleInput Parms{};

	Parms.Param_Throttle = Param_Throttle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetTrailerSyncMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Hitch_C*                 TowHitch                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UVehicle_Hitch_C*                 TrailerHitch                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetTrailerSyncMode(class UVehicle_Hitch_C* TowHitch, class UVehicle_Hitch_C* TrailerHitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetTrailerSyncMode");

	Params::AVS_Vehicle_C_SetTrailerSyncMode Parms{};

	Parms.TowHitch = TowHitch;
	Parms.TrailerHitch = TrailerHitch;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetupSkeletalMeshes
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::SetupSkeletalMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetupSkeletalMeshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SetupWheelContactModification
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RegisterSuccess                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::SetupWheelContactModification(bool* RegisterSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SetupWheelContactModification");

	Params::AVS_Vehicle_C_SetupWheelContactModification Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RegisterSuccess != nullptr)
		*RegisterSuccess = Parms.RegisterSuccess;
}


// Function AVS_Vehicle.AVS_Vehicle_C.ShowDebugMenu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Display                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::ShowDebugMenu(bool Display)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ShowDebugMenu");

	Params::AVS_Vehicle_C_ShowDebugMenu Parms{};

	Parms.Display = Display;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.StartEngine
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::StartEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "StartEngine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.StartupEngine
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::StartupEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "StartupEngine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SuspensionPreview
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::SuspensionPreview()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SuspensionPreview");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.SyncTrailer
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::SyncTrailer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "SyncTrailer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.TeleportVehicle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    KeepRelativeVelocity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::TeleportVehicle(const struct FVector& Location, const struct FRotator& Rotation, bool KeepRelativeVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "TeleportVehicle");

	Params::AVS_Vehicle_C_TeleportVehicle Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.KeepRelativeVelocity = KeepRelativeVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.TeleportWheels
// (Event, Protected, BlueprintEvent)

void AAVS_Vehicle_C::TeleportWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "TeleportWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.TickCosmetics
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::TickCosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "TickCosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.TickInputs
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::TickInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "TickInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.TickWheels
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::TickWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "TickWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ToggleLightsActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LightGroup                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Active                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::ToggleLightsActive(class FName LightGroup, bool* Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ToggleLightsActive");

	Params::AVS_Vehicle_C_ToggleLightsActive Parms{};

	Parms.LightGroup = LightGroup;

	UObject::ProcessEvent(Func, &Parms);

	if (Active != nullptr)
		*Active = Parms.Active;
}


// Function AVS_Vehicle.AVS_Vehicle_C.UnhitchAll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UnhitchAll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UnhitchAll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateBrakes
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UpdateBrakes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateBrakes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateForces
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UpdateForces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateForces");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateInputs
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UpdateInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateLightDecorations
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_LightController_C*       LightController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::UpdateLightDecorations(class UVehicle_LightController_C* LightController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateLightDecorations");

	Params::AVS_Vehicle_C_UpdateLightDecorations Parms{};

	Parms.LightController = LightController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateLights
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UpdateLights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateLights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateLinearDamping
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UpdateLinearDamping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateLinearDamping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateWheelLocks
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UpdateWheelLocks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateWheelLocks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UpdateWheelTorque
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UVehicle_Wheel_C*                 Wheel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_Vehicle_C::UpdateWheelTorque(class UVehicle_Wheel_C* Wheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UpdateWheelTorque");

	Params::AVS_Vehicle_C_UpdateWheelTorque Parms{};

	Parms.Wheel = Wheel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_Vehicle.AVS_Vehicle_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.ValidateTransmission
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::ValidateTransmission()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "ValidateTransmission");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.WakeIfThrottled
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::WakeIfThrottled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "WakeIfThrottled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.WakePhysics
// (Private, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::WakePhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "WakePhysics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_Vehicle.AVS_Vehicle_C.WakeWheelsForMovement
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void AAVS_Vehicle_C::WakeWheelsForMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_Vehicle_C", "WakeWheelsForMovement");

	UObject::ProcessEvent(Func, nullptr);
}

}

