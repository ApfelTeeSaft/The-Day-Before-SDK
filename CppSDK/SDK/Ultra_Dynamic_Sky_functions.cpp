#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Ultra_Dynamic_Sky

#include "Basic.hpp"

#include "Ultra_Dynamic_Sky_classes.hpp"
#include "Ultra_Dynamic_Sky_parameters.hpp"


namespace SDK
{

// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Approximate Real Sun Moon and Stars
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Month                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Day                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Year                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Time_of_Day                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Param_Time_Zone                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Sun_Vector                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Moon_Vector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Real_Phase                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Phase_Alignment                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Celestial_Orbit                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Celestial_Yaw                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Approximate_Real_Sun_Moon_and_Stars(int32 Param_Month, int32 Param_Day, int32 Param_Year, double Param_Time_of_Day, double Param_Time_Zone, struct FVector* Sun_Vector, struct FVector* Moon_Vector, double* Real_Phase, struct FVector* Phase_Alignment, double* Celestial_Orbit, struct FLinearColor* Celestial_Yaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Approximate Real Sun Moon and Stars");

	Params::Ultra_Dynamic_Sky_C_Approximate_Real_Sun_Moon_and_Stars Parms{};

	Parms.Param_Month = Param_Month;
	Parms.Param_Day = Param_Day;
	Parms.Param_Year = Param_Year;
	Parms.Param_Time_of_Day = Param_Time_of_Day;
	Parms.Param_Time_Zone = Param_Time_Zone;

	UObject::ProcessEvent(Func, &Parms);

	if (Sun_Vector != nullptr)
		*Sun_Vector = std::move(Parms.Sun_Vector);

	if (Moon_Vector != nullptr)
		*Moon_Vector = std::move(Parms.Moon_Vector);

	if (Real_Phase != nullptr)
		*Real_Phase = Parms.Real_Phase;

	if (Phase_Alignment != nullptr)
		*Phase_Alignment = std::move(Parms.Phase_Alignment);

	if (Celestial_Orbit != nullptr)
		*Celestial_Orbit = Parms.Celestial_Orbit;

	if (Celestial_Yaw != nullptr)
		*Celestial_Yaw = std::move(Parms.Celestial_Yaw);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Change Settings Based on Platform and Scalability
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Change_Settings_Based_on_Platform_and_Scalability()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Change Settings Based on Platform and Scalability");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Check for Daylight Savings Time
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Check_for_Daylight_Savings_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Check for Daylight Savings Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Construction Script Function
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Run_By_Counterpart                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Construction_Script_Function(bool Run_By_Counterpart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Construction Script Function");

	Params::Ultra_Dynamic_Sky_C_Construction_Script_Function Parms{};

	Parms.Run_By_Counterpart = Run_By_Counterpart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ExecuteUbergraph_Ultra_Dynamic_Sky
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::ExecuteUbergraph_Ultra_Dynamic_Sky(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ExecuteUbergraph_Ultra_Dynamic_Sky");

	Params::Ultra_Dynamic_Sky_C_ExecuteUbergraph_Ultra_Dynamic_Sky Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Force Valid Day
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Force_Valid_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Force Valid Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Current Date and Time
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Current_Date_and_Time                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Current_Date_and_Time(struct FDateTime* Current_Date_and_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Current Date and Time");

	Params::Ultra_Dynamic_Sky_C_Get_Current_Date_and_Time Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Date_and_Time != nullptr)
		*Current_Date_and_Time = std::move(Parms.Current_Date_and_Time);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Get Time of Day in Real Time Format
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimecode                        Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Get_Time_of_Day_in_Real_Time_Format(struct FTimecode* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Get Time of Day in Real Time Format");

	Params::Ultra_Dynamic_Sky_C_Get_Time_of_Day_in_Real_Time_Format Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = std::move(Parms.Time);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Increment Day
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Increment_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Increment Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.InterpSkylightTimer
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::InterpSkylightTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "InterpSkylightTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Midnight
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Midnight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Midnight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.OnRep_Replicated Time of Day
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::OnRep_Replicated_Time_of_Day()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "OnRep_Replicated Time of Day");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Recapture_SkyLight
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Recapture_SkyLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Recapture_SkyLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AUltra_Dynamic_Sky_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ReceiveTick");

	Params::Ultra_Dynamic_Sky_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Restart Inside Cloud Fog
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Restart_Inside_Cloud_Fog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Restart Inside Cloud Fog");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.ScatteringTimerEvent
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::ScatteringTimerEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "ScatteringTimerEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Cloud Timing
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Cloud_Timing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Cloud Timing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Date and Time
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Date_Time                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Set_Date_and_Time(const struct FDateTime& Date_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Date and Time");

	Params::Ultra_Dynamic_Sky_C_Set_Date_and_Time Parms{};

	Parms.Date_Time = std::move(Date_Time);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Sun and Moon Root Rotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Set_Sun_and_Moon_Root_Rotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Sun and Moon Root Rotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Set Time of Day using Time Code
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTimecode                        Time_Code                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Set_Time_of_Day_using_Time_Code(const struct FTimecode& Time_Code)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Set Time of Day using Time Code");

	Params::Ultra_Dynamic_Sky_C_Set_Time_of_Day_using_Time_Code Parms{};

	Parms.Time_Code = std::move(Time_Code);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.SetScattering
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::SetScattering(double Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "SetScattering");

	Params::Ultra_Dynamic_Sky_C_SetScattering Parms{};

	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.SetSkylightOffset
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::SetSkylightOffset(double Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "SetSkylightOffset");

	Params::Ultra_Dynamic_Sky_C_SetSkylightOffset Parms{};

	Parms.Offset = Offset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.SetSunColor
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCurveLinearColor*                TargetSunColor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::SetSunColor(class UCurveLinearColor* TargetSunColor, double Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "SetSunColor");

	Params::Ultra_Dynamic_Sky_C_SetSunColor Parms{};

	Parms.TargetSunColor = TargetSunColor;
	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.SunlightColorTimer
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::SunlightColorTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "SunlightColorTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sunrise__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Sunrise__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sunrise__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Sunset__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Sunset__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Sunset__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Active Variables
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Active_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Active Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Current Volumetric Clouds MID
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Current_Volumetric_Clouds_MID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Current Volumetric Clouds MID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Directional Lights
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Move_Static_Lights                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AUltra_Dynamic_Sky_C::Update_Directional_Lights(bool Move_Static_Lights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Directional Lights");

	Params::Ultra_Dynamic_Sky_C_Update_Directional_Lights Parms{};

	Parms.Move_Static_Lights = Move_Static_Lights;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Lights
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Lights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Lights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Replicated Time
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Replicated_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Replicated Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Replicated ToD
// (BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Replicated_ToD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Replicated ToD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Static Cloud Lighting
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Static_Cloud_Lighting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Static Cloud Lighting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Static Variables
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Static_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Static Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.Update Variables Controlled by Weather
// (Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::Update_Variables_Controlled_by_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "Update Variables Controlled by Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Ultra_Dynamic_Sky.Ultra_Dynamic_Sky_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUltra_Dynamic_Sky_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Ultra_Dynamic_Sky_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

