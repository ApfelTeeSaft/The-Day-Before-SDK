#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Explosion_Molotov

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Explosion_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Explosion_Molotov.Explosion_Molotov_C
// 0x0170 (0x0430 - 0x02C0)
class AExplosion_Molotov_C final : public AExplosion_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Explosion_Molotov_C;                // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere_0;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightFloor;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLightWall;                                    // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Wall;                                      // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_Floor;                                     // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_AfterWall;                                 // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Timeline_1_NewTrack_1_2E82E29644AC2CD7FF1739B00A7ABCEA; // 0x02F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_NewTrack_0_2E82E29644AC2CD7FF1739B00A7ABCEA; // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_2E82E29644AC2CD7FF1739B00A7ABCEA; // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Timeline_0_NewTrack_1_B836F8DE45015D1A9FBE209662F00863; // 0x0318(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_B836F8DE45015D1A9FBE209662F00863; // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_B836F8DE45015D1A9FBE209662F00863; // 0x032C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32D[0x3];                                      // 0x032D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Damage;                                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeDamage;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndOverlapMolotov;                                 // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_End_Overlap;                                 // 0x0350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFire;                                            // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEndFire;                                         // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35A[0x6];                                      // 0x035A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DecalBeforeMolotov;                                // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FindStaticObject;                                  // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     StaticObjects;                                     // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTransform                             Spawn_transform;                                   // 0x0380(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Point_Light_Delay;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      Object_Types;                                      // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 DecalExplosion;                                    // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Decal;                                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckTimer;                                        // 0x0408(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal_Decal;                                      // 0x0410(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateMolotovAfterWall();
	void AddDecalEvent();
	void BndEvt__Explosion_Molotov_Sphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__Explosion_Molotov_Sphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CheckSurface();
	void CreateDecal();
	void DecalMolotov(double Radius);
	void DecalMolotovPerSecond(const TArray<struct FHitResult>& Objects);
	void EventEndMolotovOverlap(class ASurvivalPlayer_C* Player, double Param_Damage, const struct FVector& Origin, double Radius, double Param_TimeDamage);
	void ExecuteUbergraph_Explosion_Molotov(int32 EntryPoint);
	void MolotovDamagePerSecondEnd();
	void RadialDamageMolotov();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ScaleDecal(class AActor* Param_Decal);
	void SpawnDecalMolotov();
	void StartMolotov(bool HasSurface, const struct FVector& Normal_decal);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Explosion_Molotov_C">();
	}
	static class AExplosion_Molotov_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AExplosion_Molotov_C>();
	}
};
static_assert(alignof(AExplosion_Molotov_C) == 0x000010, "Wrong alignment on AExplosion_Molotov_C");
static_assert(sizeof(AExplosion_Molotov_C) == 0x000430, "Wrong size on AExplosion_Molotov_C");
static_assert(offsetof(AExplosion_Molotov_C, UberGraphFrame_Explosion_Molotov_C) == 0x0002C0, "Member 'AExplosion_Molotov_C::UberGraphFrame_Explosion_Molotov_C' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Sphere_0) == 0x0002C8, "Member 'AExplosion_Molotov_C::Sphere_0' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, PointLightFloor) == 0x0002D0, "Member 'AExplosion_Molotov_C::PointLightFloor' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, PointLightWall) == 0x0002D8, "Member 'AExplosion_Molotov_C::PointLightWall' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Niagara_Wall) == 0x0002E0, "Member 'AExplosion_Molotov_C::Niagara_Wall' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Niagara_Floor) == 0x0002E8, "Member 'AExplosion_Molotov_C::Niagara_Floor' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Niagara_AfterWall) == 0x0002F0, "Member 'AExplosion_Molotov_C::Niagara_AfterWall' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_1_NewTrack_1_2E82E29644AC2CD7FF1739B00A7ABCEA) == 0x0002F8, "Member 'AExplosion_Molotov_C::Timeline_1_NewTrack_1_2E82E29644AC2CD7FF1739B00A7ABCEA' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_1_NewTrack_0_2E82E29644AC2CD7FF1739B00A7ABCEA) == 0x000308, "Member 'AExplosion_Molotov_C::Timeline_1_NewTrack_0_2E82E29644AC2CD7FF1739B00A7ABCEA' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_1__Direction_2E82E29644AC2CD7FF1739B00A7ABCEA) == 0x00030C, "Member 'AExplosion_Molotov_C::Timeline_1__Direction_2E82E29644AC2CD7FF1739B00A7ABCEA' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_1) == 0x000310, "Member 'AExplosion_Molotov_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_0_NewTrack_1_B836F8DE45015D1A9FBE209662F00863) == 0x000318, "Member 'AExplosion_Molotov_C::Timeline_0_NewTrack_1_B836F8DE45015D1A9FBE209662F00863' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_0_NewTrack_0_B836F8DE45015D1A9FBE209662F00863) == 0x000328, "Member 'AExplosion_Molotov_C::Timeline_0_NewTrack_0_B836F8DE45015D1A9FBE209662F00863' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_0__Direction_B836F8DE45015D1A9FBE209662F00863) == 0x00032C, "Member 'AExplosion_Molotov_C::Timeline_0__Direction_B836F8DE45015D1A9FBE209662F00863' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timeline_0) == 0x000330, "Member 'AExplosion_Molotov_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Damage) == 0x000338, "Member 'AExplosion_Molotov_C::Damage' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, TimeDamage) == 0x000340, "Member 'AExplosion_Molotov_C::TimeDamage' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, EndOverlapMolotov) == 0x000348, "Member 'AExplosion_Molotov_C::EndOverlapMolotov' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Timer_End_Overlap) == 0x000350, "Member 'AExplosion_Molotov_C::Timer_End_Overlap' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, IsFire) == 0x000358, "Member 'AExplosion_Molotov_C::IsFire' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, IsEndFire) == 0x000359, "Member 'AExplosion_Molotov_C::IsEndFire' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, DecalBeforeMolotov) == 0x000360, "Member 'AExplosion_Molotov_C::DecalBeforeMolotov' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, FindStaticObject) == 0x000368, "Member 'AExplosion_Molotov_C::FindStaticObject' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, StaticObjects) == 0x000370, "Member 'AExplosion_Molotov_C::StaticObjects' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Spawn_transform) == 0x000380, "Member 'AExplosion_Molotov_C::Spawn_transform' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Point_Light_Delay) == 0x0003E0, "Member 'AExplosion_Molotov_C::Point_Light_Delay' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Object_Types) == 0x0003E8, "Member 'AExplosion_Molotov_C::Object_Types' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, DecalExplosion) == 0x0003F8, "Member 'AExplosion_Molotov_C::DecalExplosion' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Decal) == 0x000400, "Member 'AExplosion_Molotov_C::Decal' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, CheckTimer) == 0x000408, "Member 'AExplosion_Molotov_C::CheckTimer' has a wrong offset!");
static_assert(offsetof(AExplosion_Molotov_C, Normal_Decal) == 0x000410, "Member 'AExplosion_Molotov_C::Normal_Decal' has a wrong offset!");

}

