#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HuntingRifleCrosshair

#include "Basic.hpp"


namespace SDK::Params
{

// Function WBP_HuntingRifleCrosshair.WBP_HuntingRifleCrosshair_C.Aim
// 0x0001 (0x0001 - 0x0000)
struct WBP_HuntingRifleCrosshair_C_Aim final
{
public:
	bool                                          Param_Aim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HuntingRifleCrosshair_C_Aim) == 0x000001, "Wrong alignment on WBP_HuntingRifleCrosshair_C_Aim");
static_assert(sizeof(WBP_HuntingRifleCrosshair_C_Aim) == 0x000001, "Wrong size on WBP_HuntingRifleCrosshair_C_Aim");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Aim, Param_Aim) == 0x000000, "Member 'WBP_HuntingRifleCrosshair_C_Aim::Param_Aim' has a wrong offset!");

// Function WBP_HuntingRifleCrosshair.WBP_HuntingRifleCrosshair_C.ExecuteUbergraph_WBP_HuntingRifleCrosshair
// 0x0018 (0x0018 - 0x0000)
struct WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Aim;                                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair) == 0x000008, "Wrong alignment on WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair");
static_assert(sizeof(WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair) == 0x000018, "Wrong size on WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair, EntryPoint) == 0x000000, "Member 'WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair, K2Node_Event_Aim) == 0x000010, "Member 'WBP_HuntingRifleCrosshair_C_ExecuteUbergraph_WBP_HuntingRifleCrosshair::K2Node_Event_Aim' has a wrong offset!");

// Function WBP_HuntingRifleCrosshair.WBP_HuntingRifleCrosshair_C.Shoot
// 0x0040 (0x0040 - 0x0000)
struct WBP_HuntingRifleCrosshair_C_Shoot final
{
public:
	bool                                          Shooting;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HuntingRifleCrosshair_C_Shoot) == 0x000008, "Wrong alignment on WBP_HuntingRifleCrosshair_C_Shoot");
static_assert(sizeof(WBP_HuntingRifleCrosshair_C_Shoot) == 0x000040, "Wrong size on WBP_HuntingRifleCrosshair_C_Shoot");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, Shooting) == 0x000000, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::Shooting' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, Result) == 0x000001, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::Result' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, Temp_real_Variable) == 0x000008, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, Temp_real_Variable_1) == 0x000018, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, Temp_bool_Variable) == 0x000020, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, K2Node_Select_Default) == 0x000028, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, CallFunc_PlayAnimation_ReturnValue) == 0x000030, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HuntingRifleCrosshair_C_Shoot, CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast) == 0x000038, "Member 'WBP_HuntingRifleCrosshair_C_Shoot::CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast' has a wrong offset!");

}

