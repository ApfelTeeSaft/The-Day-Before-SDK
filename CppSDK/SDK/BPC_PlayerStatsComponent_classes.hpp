#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_PlayerStatsComponent

#include "Basic.hpp"

#include "E_HouseType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_TrainStatType_structs.hpp"
#include "StatsStruct_structs.hpp"
#include "StatType_structs.hpp"
#include "PerkStatEnum_structs.hpp"
#include "Survival_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPC_PlayerStatsComponent.BPC_PlayerStatsComponent_C
// 0x0780 (0x0820 - 0x00A0)
class UBPC_PlayerStatsComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        HealthRegenerationSpeed;                           // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthDecreaseSpeed;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HungerDecreaseSpeed;                               // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             HungerEnd;                                         // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ColdEnd;                                           // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             HealthEnd;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NoHealth;                                          // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StaminaDecreaseSpeed;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaRegeneartionSpeed;                          // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StaminaUse;                                        // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             StaminaEnd;                                        // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          NoStamina;                                         // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CriticalHealth;                                    // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CriticalHunger;                                    // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CriticalCold;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CriticalStamina;                                   // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SatietyHunger;                                     // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Thirst;                                            // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirstMax;                                         // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirstDecreaseSpeed;                               // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CriticalThirst;                                    // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ThirstEnd;                                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<EStatType, double>                       Stats;                                             // 0x0180(0x0050)(Edit, BlueprintVisible)
	bool                                          PlayerDead;                                        // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InCar;                                             // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrueSkyController_C*                DaySystem;                                         // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaAimSpeed;                                   // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      CharRef;                                           // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HungerDecreaseMultiplier;                          // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCriticalHealth;                                  // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCriticalHunger;                                  // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCriticalCold;                                    // 0x01FA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FB[0x5];                                      // 0x01FB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStaminaCritical;                                 // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UFMODAudioComponent*                    ColdCritSound;                                     // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          StaminaHitted;                                     // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BlizzardController_C*               BlizzController;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    StomachGurgle;                                     // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    CritHealthSound;                                   // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCriticalThirst;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NonEffectedMaxStamina;                             // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EffectedStamina;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBleeding;                                        // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HealthRegenerationMultiplier;                      // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirstDecreaseMultiplier;                          // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullHunger;                                        // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullThirst;                                        // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FullThirstTime;                                    // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FullHungerTime;                                    // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InsideColdIncreaseSpeed;                           // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SwimmingColdDecreaseSpeed;                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlizzardColdDecreaseSpeed;                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWet;                                             // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFreezing;                                        // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWarming;                                         // 0x029A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29B[0x5];                                      // 0x029B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BlizzardPPCustom;                                  // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tutorial;                                          // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxHealth;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxStamina;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Crawling;                                          // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StaminaThirstyMultiplier;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BleedingChanceMultiplier;                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HungerDecreaseAditional;                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirstDecreaseAdditional;                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaRegeneartionMultiplier;                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CraftSpeedMultiplier;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthRegenAddMultiplier;                          // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClimbSpeedRate;                                    // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnCrawling;                                        // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        WetColdMultiplier;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             MildIntoxication;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ModerateIntoxication;                              // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             SevereIntoxication;                                // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             CriticalIntoxication;                              // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        ChangedIntoxication;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrunkDehydration;                                  // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BleedingDuration;                                  // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxFakeHealth;                                     // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ChangeAdrenalin;                                   // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdrenalinHealth;                                   // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AdrenalinTimer;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AdrenalinLevel;                                    // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NonEffectStaminaDecrease;                          // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ConsumptionStaminaWeight;                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdrenalinStaminaDecrease;                          // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeightMaxStamina;                                  // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeightStaminaDecrease;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SatietyEffect;                                     // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DC[0x4];                                      // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HungerCriticalMaxStamina;                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HungerIsZero;                                      // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHungerZero;                                   // 0x03F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SatietyThirst;                                     // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F9[0x7];                                      // 0x03F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ThirstCriticalMaxStamina;                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThirstIsZero;                                      // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerThirstZero;                                   // 0x0410(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    BreathSound;                                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHPChange;                                        // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnStatChange;                                      // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnStartCritical;                                   // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsDeadDue;                                         // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StaminaRegeneartion;                               // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_452[0x6];                                      // 0x0452(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StaminaRegeneartionDelay;                          // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    Breath_Sound_Female;                               // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FStatsStruct                           PlayerGameStat;                                    // 0x0468(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x04A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousHealth;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TakedDamageAmount;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerHungerThirstZero;                             // 0x04D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HungerThirstDamage;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FallingFor2Seconds;                                // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HungerFrequency;                                   // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThirstFrequency;                                   // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HungerTimer;                                       // 0x04F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ThirstTimer;                                       // 0x04F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnThirstUpdate;                                    // 0x0500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHungerUpdate;                                    // 0x0510(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             StatUpd;                                           // 0x0520(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        StaminaTrainLimit;                                 // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TrainStaminaValue;                                 // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PistolRSMulti;                                     // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReloadSpeedMultiplierAdd;                          // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_TrainStatType, int32>                  TrainCounter;                                      // 0x0550(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        LockpickMastery;                                   // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeavyBleeding;                                   // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StaminaNegativeEffectMultiplier;                   // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LootSpeedMultiplier;                               // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealAmountCount;                                   // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealSpeedMultiply;                                 // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReviveSpeedMultiply;                               // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UsableDiscountMultiply;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ItemDiscountMultiply;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PistolRC;                                          // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarSteal;                                          // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarRepair;                                         // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarRefill;                                         // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_HouseType                                   Where_Am_I_;                                       // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HungerRegenTimer;                                  // 0x0610(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ThirstRegenTimer;                                  // 0x0618(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Regen_Timer;                                       // 0x0620(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           NegateTimer;                                       // 0x0628(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         LockpickCount;                                     // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PerkActivate;                                      // 0x0638(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        MedicAmount;                                       // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MedicSpeed;                                        // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BuffDuration;                                      // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirstPerk;                                        // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HungerPerk;                                        // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HoldBreath;                                        // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponSwitch;                                      // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarbineRS;                                         // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShotgunRS;                                         // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SubmachineRS;                                      // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AssaultRS;                                         // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HandgunRS;                                         // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponEndurance;                                   // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ArmorEndurance;                                    // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CraftDiscount;                                     // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RepairDiscount;                                    // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeightPerk;                                        // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LootSpeedPerk;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaPerk;                                       // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InventorySlot;                                     // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SprintSpeed;                                       // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FriendlyFire;                                      // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StaminaDrain;                                      // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NotAffectedWeightMax;                              // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeightMaxMultiplier;                               // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AdrenalineActive;                                  // 0x0710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711[0x7];                                      // 0x0711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStatTrainChanged;                                // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<E_TrainStatType, int32>                  TrainCounterMax;                                   // 0x0728(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             PlayerStatSave;                                    // 0x0778(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 StatSaveString;                                    // 0x0788(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EStatType>                             StatSaveEnums;                                     // 0x0798(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        RegenAmount;                                       // 0x07A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SwimmingTime;                                      // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SwimmingDamageTimer;                               // 0x07B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             PlayerTrainStatSave;                               // 0x07C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        AssaultRSMulti;                                    // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShotgunRSMulti;                                    // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarbineRSMulti;                                    // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AssaultRC;                                         // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShotgunRC;                                         // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CarbineRC;                                         // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_TrainStatType                               Stat_Train_Type;                                   // 0x0800(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_801[0x7];                                      // 0x0801(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerTrainSave;                                   // 0x0808(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          NotifSkipper;                                      // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdrenalinHealthChange();
	void BreathSystemStats();
	void Calculate_Health();
	void Calculate_Stamina_Decrease(double Param_ConsumptionStaminaWeight);
	void CalculateAdrenalin();
	void CalculateCold(double ColdSpeed);
	void CalculateEffectEvent();
	void CalculateEffects();
	void CalculateFakeHealth();
	void CalculateHealthMax(bool HungerZero);
	void CalculateHunger();
	void CalculateHungerDecreaseSpeed();
	void CalculateIntoxication();
	void CalculateMaxStamina(double Effect, const EStatType Key);
	void CalculateRegenerationSpeed();
	void CalculateStamina(bool Use);
	void CalculateThirst();
	void CalculateThirstDecrease();
	void CanUseStaminaAmount(double StaminaAmount, bool* Can);
	void Change_Intoxication_by_Value(double Param_Value);
	void Change_Weight_Max_by_Value(double Param_Value);
	void Change_Weight_MaxLowSpeed_by_Value(double Param_Value);
	void ChangeAdrenalinByValue(double Param_Value);
	void ChangeCold(double Param_Value);
	void ChangeFakeHealth(double Param_Value);
	void ChangeHealth(double Param_Value);
	void ChangeHunger(double Param_Value);
	void ChangeThirst(double Param_Value);
	void ChangeWeightByValue(double Param_Value);
	void CheckDecreaseStat(EStatType StatType, double AddValue);
	void CheckFullHeal(double AddHealth);
	void ChestEffect(bool On_);
	void ColdEnd__DelegateSignature();
	void CriticalIntoxication__DelegateSignature();
	void DamageHungerThirstZero();
	double DecodeStatSave(EStatType Enumerator);
	void DecodeTrainStatSave(const class FString& SavedString, E_TrainStatType Type, int32* Param_Value);
	void DisableSounds();
	void Discount(E_TrainStatType Stat);
	void DisplayStats();
	void EffectPlayerSpeed(double CurrentHunger);
	void ExecuteUbergraph_BPC_PlayerStatsComponent(int32 EntryPoint);
	void GetBleedingChanceMultiplier(double* Param_Value);
	void GetBleedingSpeed(double* Param_Value);
	double GetCarIsolation(class ASurvivalPlayer_C* Player);
	void GetCriticalHealthValue(double* CriticalHealthValue);
	void GetDamage(double Damage);
	void GetStat(const EStatType Key, double* Param_Value);
	double GetStatDivide_A_by_B(EStatType A, EStatType B);
	double GetStatDivide_A_by_float(EStatType A, double Float);
	void GetTrainStatString(class FString* TrainStatString);
	void GTA(E_TrainStatType Stat);
	void HealedAmount(double HealAmount);
	void Health_Regen();
	void HealthEnd__DelegateSignature(class ASurvivalPlayer_C* Player);
	void HealUpgrade(E_TrainStatType Stat);
	void Hunger_Regen_Tick();
	void Hunger_Tick();
	void HungerEnd__DelegateSignature();
	void Immune(E_TrainStatType Stat);
	void InfoAboutDamage(double RealDamage, bool IsHeadshot, bool IsTargetDead);
	void InitFakeHealth();
	void Initialize_health_regen();
	void InitializeAllTimers();
	void InitializeHungerTimer();
	void InitializeThirstTimer();
	void LoadMainStats();
	void LoadTrainStats(const class FString& StatString);
	void LoadTrainStats_Client(const class FString& StatsString);
	void LoadTrainStats_Server(const class FString& StatsString);
	void LoadTrainStatsValues();
	void Lockpick(E_TrainStatType Stat);
	void LockPickAmount();
	void LootSpeed(E_TrainStatType Stat);
	void MildIntoxication__DelegateSignature(bool On);
	void ModerateIntoxication__DelegateSignature(bool On);
	void NegateAllEffectsTimer();
	void OnCrawling__DelegateSignature(bool Param_Crawling);
	void OnDeathEvent();
	void OnHPChange__DelegateSignature();
	void OnHungerUpdate__DelegateSignature(double HungerLevel, double CriticalHungerLevel);
	void OnPlayerDie();
	void OnStaminaCritical__DelegateSignature();
	void OnStartCritical__DelegateSignature(bool NewParam);
	void OnStatChange__DelegateSignature(EStatType StatKey);
	void OnStatTrainChanged__DelegateSignature(E_TrainStatType Stat);
	void OnThirstUpdate__DelegateSignature(double ThirstLevel, double CriticalThirstLevel);
	void PerkActivate__DelegateSignature(EPerkStatEnum StatType, double Multiplier);
	void PerkStatUpdate(EPerkStatEnum StatType, double Multiplier);
	void PlayerStatSave__DelegateSignature(const class FString& HpHuThAd);
	void PlayerTrainStatSave__DelegateSignature(const class FString& TrainStat);
	void RC(E_TrainStatType Stat);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Refuel(E_TrainStatType Stat);
	void RemoveAllEffects();
	void ResetCheck();
	void ResetCheckAdrenalin();
	void ResetStaminaRegeneration();
	void ResetTimers();
	void Revive(E_TrainStatType Stat);
	void RS(E_TrainStatType Stat);
	void SaveMainStats();
	void SaveTrainStats();
	void SaveTrainStats_Server(const class FString& Param_Stats);
	void SetBleedingDuration(double Duration);
	void SetFullStats();
	double SetStat(const EStatType Key, const double Param_Value);
	void SetStatSaveStringLocal(const class FString& Param_StatSaveString);
	void SetTrainState(E_TrainStatType Type, int32 Param_Value);
	void SevereIntoxication__DelegateSignature();
	void STakedDamage(class ASurvivalPlayer_C* Target, double Damage, bool DontAnimate, bool EffectDamage, bool HungerDamage);
	void StaminaDecreaseHitted();
	void StaminaEnd__DelegateSignature();
	void StaminaHit(double HitTime);
	void StaminaUpgrade(E_TrainStatType Stat);
	void StatCounterUpd(E_TrainStatType Stat, int32 Count);
	void StatsCalculation();
	void StatTrainUpdate(E_TrainStatType StatType);
	void StatUpd__DelegateSignature(E_TrainStatType StatType);
	void StopBleeding();
	void SwimmingDamage();
	void ThirstEnd__DelegateSignature();
	void ThirstRegenTick();
	void ThirstTick();
	void TickSwimmingDamage();
	void UseStamina(bool Use);
	void UseStaminaInAction(double Param_Value);
	void Weight(E_TrainStatType Stat);
	void WheelRepair(E_TrainStatType Stat);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPC_PlayerStatsComponent_C">();
	}
	static class UBPC_PlayerStatsComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPC_PlayerStatsComponent_C>();
	}
};
static_assert(alignof(UBPC_PlayerStatsComponent_C) == 0x000008, "Wrong alignment on UBPC_PlayerStatsComponent_C");
static_assert(sizeof(UBPC_PlayerStatsComponent_C) == 0x000820, "Wrong size on UBPC_PlayerStatsComponent_C");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBPC_PlayerStatsComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealthRegenerationSpeed) == 0x0000A8, "Member 'UBPC_PlayerStatsComponent_C::HealthRegenerationSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealthDecreaseSpeed) == 0x0000B0, "Member 'UBPC_PlayerStatsComponent_C::HealthDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerDecreaseSpeed) == 0x0000B8, "Member 'UBPC_PlayerStatsComponent_C::HungerDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerEnd) == 0x0000C0, "Member 'UBPC_PlayerStatsComponent_C::HungerEnd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ColdEnd) == 0x0000D0, "Member 'UBPC_PlayerStatsComponent_C::ColdEnd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealthEnd) == 0x0000E0, "Member 'UBPC_PlayerStatsComponent_C::HealthEnd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NoHealth) == 0x0000F0, "Member 'UBPC_PlayerStatsComponent_C::NoHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaDecreaseSpeed) == 0x0000F8, "Member 'UBPC_PlayerStatsComponent_C::StaminaDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaRegeneartionSpeed) == 0x000100, "Member 'UBPC_PlayerStatsComponent_C::StaminaRegeneartionSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaUse) == 0x000108, "Member 'UBPC_PlayerStatsComponent_C::StaminaUse' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaEnd) == 0x000110, "Member 'UBPC_PlayerStatsComponent_C::StaminaEnd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NoStamina) == 0x000120, "Member 'UBPC_PlayerStatsComponent_C::NoStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CriticalHealth) == 0x000128, "Member 'UBPC_PlayerStatsComponent_C::CriticalHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CriticalHunger) == 0x000130, "Member 'UBPC_PlayerStatsComponent_C::CriticalHunger' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CriticalCold) == 0x000138, "Member 'UBPC_PlayerStatsComponent_C::CriticalCold' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CriticalStamina) == 0x000140, "Member 'UBPC_PlayerStatsComponent_C::CriticalStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SatietyHunger) == 0x000148, "Member 'UBPC_PlayerStatsComponent_C::SatietyHunger' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Thirst) == 0x000150, "Member 'UBPC_PlayerStatsComponent_C::Thirst' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstMax) == 0x000158, "Member 'UBPC_PlayerStatsComponent_C::ThirstMax' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstDecreaseSpeed) == 0x000160, "Member 'UBPC_PlayerStatsComponent_C::ThirstDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CriticalThirst) == 0x000168, "Member 'UBPC_PlayerStatsComponent_C::CriticalThirst' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstEnd) == 0x000170, "Member 'UBPC_PlayerStatsComponent_C::ThirstEnd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Stats) == 0x000180, "Member 'UBPC_PlayerStatsComponent_C::Stats' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PlayerDead) == 0x0001D0, "Member 'UBPC_PlayerStatsComponent_C::PlayerDead' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, InCar) == 0x0001D1, "Member 'UBPC_PlayerStatsComponent_C::InCar' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, DaySystem) == 0x0001D8, "Member 'UBPC_PlayerStatsComponent_C::DaySystem' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaAimSpeed) == 0x0001E0, "Member 'UBPC_PlayerStatsComponent_C::StaminaAimSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CharRef) == 0x0001E8, "Member 'UBPC_PlayerStatsComponent_C::CharRef' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerDecreaseMultiplier) == 0x0001F0, "Member 'UBPC_PlayerStatsComponent_C::HungerDecreaseMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsCriticalHealth) == 0x0001F8, "Member 'UBPC_PlayerStatsComponent_C::IsCriticalHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsCriticalHunger) == 0x0001F9, "Member 'UBPC_PlayerStatsComponent_C::IsCriticalHunger' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsCriticalCold) == 0x0001FA, "Member 'UBPC_PlayerStatsComponent_C::IsCriticalCold' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnStaminaCritical) == 0x000200, "Member 'UBPC_PlayerStatsComponent_C::OnStaminaCritical' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ColdCritSound) == 0x000210, "Member 'UBPC_PlayerStatsComponent_C::ColdCritSound' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaHitted) == 0x000218, "Member 'UBPC_PlayerStatsComponent_C::StaminaHitted' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BlizzController) == 0x000220, "Member 'UBPC_PlayerStatsComponent_C::BlizzController' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StomachGurgle) == 0x000228, "Member 'UBPC_PlayerStatsComponent_C::StomachGurgle' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CritHealthSound) == 0x000230, "Member 'UBPC_PlayerStatsComponent_C::CritHealthSound' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsCriticalThirst) == 0x000238, "Member 'UBPC_PlayerStatsComponent_C::IsCriticalThirst' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NonEffectedMaxStamina) == 0x000240, "Member 'UBPC_PlayerStatsComponent_C::NonEffectedMaxStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, EffectedStamina) == 0x000248, "Member 'UBPC_PlayerStatsComponent_C::EffectedStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsBleeding) == 0x000250, "Member 'UBPC_PlayerStatsComponent_C::IsBleeding' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealthRegenerationMultiplier) == 0x000258, "Member 'UBPC_PlayerStatsComponent_C::HealthRegenerationMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstDecreaseMultiplier) == 0x000260, "Member 'UBPC_PlayerStatsComponent_C::ThirstDecreaseMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, FullHunger) == 0x000268, "Member 'UBPC_PlayerStatsComponent_C::FullHunger' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, FullThirst) == 0x000269, "Member 'UBPC_PlayerStatsComponent_C::FullThirst' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, FullThirstTime) == 0x000270, "Member 'UBPC_PlayerStatsComponent_C::FullThirstTime' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, FullHungerTime) == 0x000278, "Member 'UBPC_PlayerStatsComponent_C::FullHungerTime' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, InsideColdIncreaseSpeed) == 0x000280, "Member 'UBPC_PlayerStatsComponent_C::InsideColdIncreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SwimmingColdDecreaseSpeed) == 0x000288, "Member 'UBPC_PlayerStatsComponent_C::SwimmingColdDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BlizzardColdDecreaseSpeed) == 0x000290, "Member 'UBPC_PlayerStatsComponent_C::BlizzardColdDecreaseSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsWet) == 0x000298, "Member 'UBPC_PlayerStatsComponent_C::IsWet' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsFreezing) == 0x000299, "Member 'UBPC_PlayerStatsComponent_C::IsFreezing' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsWarming) == 0x00029A, "Member 'UBPC_PlayerStatsComponent_C::IsWarming' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BlizzardPPCustom) == 0x0002A0, "Member 'UBPC_PlayerStatsComponent_C::BlizzardPPCustom' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Tutorial) == 0x0002A8, "Member 'UBPC_PlayerStatsComponent_C::Tutorial' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, MaxHealth) == 0x0002B0, "Member 'UBPC_PlayerStatsComponent_C::MaxHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, MaxStamina) == 0x0002B8, "Member 'UBPC_PlayerStatsComponent_C::MaxStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Crawling) == 0x0002C0, "Member 'UBPC_PlayerStatsComponent_C::Crawling' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaThirstyMultiplier) == 0x0002C8, "Member 'UBPC_PlayerStatsComponent_C::StaminaThirstyMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NewVar_0) == 0x0002D0, "Member 'UBPC_PlayerStatsComponent_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BleedingChanceMultiplier) == 0x0002D8, "Member 'UBPC_PlayerStatsComponent_C::BleedingChanceMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerDecreaseAditional) == 0x0002E0, "Member 'UBPC_PlayerStatsComponent_C::HungerDecreaseAditional' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstDecreaseAdditional) == 0x0002E8, "Member 'UBPC_PlayerStatsComponent_C::ThirstDecreaseAdditional' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaRegeneartionMultiplier) == 0x0002F0, "Member 'UBPC_PlayerStatsComponent_C::StaminaRegeneartionMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CraftSpeedMultiplier) == 0x0002F8, "Member 'UBPC_PlayerStatsComponent_C::CraftSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealthRegenAddMultiplier) == 0x000300, "Member 'UBPC_PlayerStatsComponent_C::HealthRegenAddMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ClimbSpeedRate) == 0x000308, "Member 'UBPC_PlayerStatsComponent_C::ClimbSpeedRate' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnCrawling) == 0x000310, "Member 'UBPC_PlayerStatsComponent_C::OnCrawling' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WetColdMultiplier) == 0x000320, "Member 'UBPC_PlayerStatsComponent_C::WetColdMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, MildIntoxication) == 0x000328, "Member 'UBPC_PlayerStatsComponent_C::MildIntoxication' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ModerateIntoxication) == 0x000338, "Member 'UBPC_PlayerStatsComponent_C::ModerateIntoxication' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SevereIntoxication) == 0x000348, "Member 'UBPC_PlayerStatsComponent_C::SevereIntoxication' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CriticalIntoxication) == 0x000358, "Member 'UBPC_PlayerStatsComponent_C::CriticalIntoxication' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ChangedIntoxication) == 0x000368, "Member 'UBPC_PlayerStatsComponent_C::ChangedIntoxication' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, DrunkDehydration) == 0x000370, "Member 'UBPC_PlayerStatsComponent_C::DrunkDehydration' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BleedingDuration) == 0x000378, "Member 'UBPC_PlayerStatsComponent_C::BleedingDuration' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, MaxFakeHealth) == 0x000380, "Member 'UBPC_PlayerStatsComponent_C::MaxFakeHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ChangeAdrenalin) == 0x000388, "Member 'UBPC_PlayerStatsComponent_C::ChangeAdrenalin' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AdrenalinHealth) == 0x000390, "Member 'UBPC_PlayerStatsComponent_C::AdrenalinHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AdrenalinTimer) == 0x000398, "Member 'UBPC_PlayerStatsComponent_C::AdrenalinTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AdrenalinLevel) == 0x0003A0, "Member 'UBPC_PlayerStatsComponent_C::AdrenalinLevel' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Value) == 0x0003A8, "Member 'UBPC_PlayerStatsComponent_C::Value' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NonEffectStaminaDecrease) == 0x0003B0, "Member 'UBPC_PlayerStatsComponent_C::NonEffectStaminaDecrease' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ConsumptionStaminaWeight) == 0x0003B8, "Member 'UBPC_PlayerStatsComponent_C::ConsumptionStaminaWeight' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AdrenalinStaminaDecrease) == 0x0003C0, "Member 'UBPC_PlayerStatsComponent_C::AdrenalinStaminaDecrease' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WeightMaxStamina) == 0x0003C8, "Member 'UBPC_PlayerStatsComponent_C::WeightMaxStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WeightStaminaDecrease) == 0x0003D0, "Member 'UBPC_PlayerStatsComponent_C::WeightStaminaDecrease' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SatietyEffect) == 0x0003D8, "Member 'UBPC_PlayerStatsComponent_C::SatietyEffect' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerCriticalMaxStamina) == 0x0003E0, "Member 'UBPC_PlayerStatsComponent_C::HungerCriticalMaxStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerIsZero) == 0x0003E8, "Member 'UBPC_PlayerStatsComponent_C::HungerIsZero' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TimerHungerZero) == 0x0003F0, "Member 'UBPC_PlayerStatsComponent_C::TimerHungerZero' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SatietyThirst) == 0x0003F8, "Member 'UBPC_PlayerStatsComponent_C::SatietyThirst' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstCriticalMaxStamina) == 0x000400, "Member 'UBPC_PlayerStatsComponent_C::ThirstCriticalMaxStamina' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstIsZero) == 0x000408, "Member 'UBPC_PlayerStatsComponent_C::ThirstIsZero' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TimerThirstZero) == 0x000410, "Member 'UBPC_PlayerStatsComponent_C::TimerThirstZero' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BreathSound) == 0x000418, "Member 'UBPC_PlayerStatsComponent_C::BreathSound' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnHPChange) == 0x000420, "Member 'UBPC_PlayerStatsComponent_C::OnHPChange' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnStatChange) == 0x000430, "Member 'UBPC_PlayerStatsComponent_C::OnStatChange' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnStartCritical) == 0x000440, "Member 'UBPC_PlayerStatsComponent_C::OnStartCritical' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsDeadDue) == 0x000450, "Member 'UBPC_PlayerStatsComponent_C::IsDeadDue' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaRegeneartion) == 0x000451, "Member 'UBPC_PlayerStatsComponent_C::StaminaRegeneartion' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaRegeneartionDelay) == 0x000458, "Member 'UBPC_PlayerStatsComponent_C::StaminaRegeneartionDelay' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Breath_Sound_Female) == 0x000460, "Member 'UBPC_PlayerStatsComponent_C::Breath_Sound_Female' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PlayerGameStat) == 0x000468, "Member 'UBPC_PlayerStatsComponent_C::PlayerGameStat' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PreviousLocation) == 0x0004A8, "Member 'UBPC_PlayerStatsComponent_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PreviousHealth) == 0x0004C0, "Member 'UBPC_PlayerStatsComponent_C::PreviousHealth' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TakedDamageAmount) == 0x0004C8, "Member 'UBPC_PlayerStatsComponent_C::TakedDamageAmount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TimerHungerThirstZero) == 0x0004D0, "Member 'UBPC_PlayerStatsComponent_C::TimerHungerThirstZero' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerThirstDamage) == 0x0004D8, "Member 'UBPC_PlayerStatsComponent_C::HungerThirstDamage' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, FallingFor2Seconds) == 0x0004E0, "Member 'UBPC_PlayerStatsComponent_C::FallingFor2Seconds' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerFrequency) == 0x0004E8, "Member 'UBPC_PlayerStatsComponent_C::HungerFrequency' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstFrequency) == 0x0004EC, "Member 'UBPC_PlayerStatsComponent_C::ThirstFrequency' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerTimer) == 0x0004F0, "Member 'UBPC_PlayerStatsComponent_C::HungerTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstTimer) == 0x0004F8, "Member 'UBPC_PlayerStatsComponent_C::ThirstTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnThirstUpdate) == 0x000500, "Member 'UBPC_PlayerStatsComponent_C::OnThirstUpdate' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnHungerUpdate) == 0x000510, "Member 'UBPC_PlayerStatsComponent_C::OnHungerUpdate' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StatUpd) == 0x000520, "Member 'UBPC_PlayerStatsComponent_C::StatUpd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaTrainLimit) == 0x000530, "Member 'UBPC_PlayerStatsComponent_C::StaminaTrainLimit' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TrainStaminaValue) == 0x000538, "Member 'UBPC_PlayerStatsComponent_C::TrainStaminaValue' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PistolRSMulti) == 0x000540, "Member 'UBPC_PlayerStatsComponent_C::PistolRSMulti' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ReloadSpeedMultiplierAdd) == 0x000548, "Member 'UBPC_PlayerStatsComponent_C::ReloadSpeedMultiplierAdd' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TrainCounter) == 0x000550, "Member 'UBPC_PlayerStatsComponent_C::TrainCounter' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, LockpickMastery) == 0x0005A0, "Member 'UBPC_PlayerStatsComponent_C::LockpickMastery' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, IsHeavyBleeding) == 0x0005A8, "Member 'UBPC_PlayerStatsComponent_C::IsHeavyBleeding' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaNegativeEffectMultiplier) == 0x0005B0, "Member 'UBPC_PlayerStatsComponent_C::StaminaNegativeEffectMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, LootSpeedMultiplier) == 0x0005B8, "Member 'UBPC_PlayerStatsComponent_C::LootSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealAmountCount) == 0x0005C0, "Member 'UBPC_PlayerStatsComponent_C::HealAmountCount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HealSpeedMultiply) == 0x0005C8, "Member 'UBPC_PlayerStatsComponent_C::HealSpeedMultiply' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ReviveSpeedMultiply) == 0x0005D0, "Member 'UBPC_PlayerStatsComponent_C::ReviveSpeedMultiply' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, UsableDiscountMultiply) == 0x0005D8, "Member 'UBPC_PlayerStatsComponent_C::UsableDiscountMultiply' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ItemDiscountMultiply) == 0x0005E0, "Member 'UBPC_PlayerStatsComponent_C::ItemDiscountMultiply' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PistolRC) == 0x0005E8, "Member 'UBPC_PlayerStatsComponent_C::PistolRC' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CarSteal) == 0x0005F0, "Member 'UBPC_PlayerStatsComponent_C::CarSteal' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CarRepair) == 0x0005F8, "Member 'UBPC_PlayerStatsComponent_C::CarRepair' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CarRefill) == 0x000600, "Member 'UBPC_PlayerStatsComponent_C::CarRefill' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Where_Am_I_) == 0x000608, "Member 'UBPC_PlayerStatsComponent_C::Where_Am_I_' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerRegenTimer) == 0x000610, "Member 'UBPC_PlayerStatsComponent_C::HungerRegenTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstRegenTimer) == 0x000618, "Member 'UBPC_PlayerStatsComponent_C::ThirstRegenTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Regen_Timer) == 0x000620, "Member 'UBPC_PlayerStatsComponent_C::Regen_Timer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NegateTimer) == 0x000628, "Member 'UBPC_PlayerStatsComponent_C::NegateTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, LockpickCount) == 0x000630, "Member 'UBPC_PlayerStatsComponent_C::LockpickCount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PerkActivate) == 0x000638, "Member 'UBPC_PlayerStatsComponent_C::PerkActivate' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, MedicAmount) == 0x000648, "Member 'UBPC_PlayerStatsComponent_C::MedicAmount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, MedicSpeed) == 0x000650, "Member 'UBPC_PlayerStatsComponent_C::MedicSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, BuffDuration) == 0x000658, "Member 'UBPC_PlayerStatsComponent_C::BuffDuration' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ThirstPerk) == 0x000660, "Member 'UBPC_PlayerStatsComponent_C::ThirstPerk' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HungerPerk) == 0x000668, "Member 'UBPC_PlayerStatsComponent_C::HungerPerk' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HoldBreath) == 0x000670, "Member 'UBPC_PlayerStatsComponent_C::HoldBreath' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WeaponSwitch) == 0x000678, "Member 'UBPC_PlayerStatsComponent_C::WeaponSwitch' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CarbineRS) == 0x000680, "Member 'UBPC_PlayerStatsComponent_C::CarbineRS' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ShotgunRS) == 0x000688, "Member 'UBPC_PlayerStatsComponent_C::ShotgunRS' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SubmachineRS) == 0x000690, "Member 'UBPC_PlayerStatsComponent_C::SubmachineRS' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AssaultRS) == 0x000698, "Member 'UBPC_PlayerStatsComponent_C::AssaultRS' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, HandgunRS) == 0x0006A0, "Member 'UBPC_PlayerStatsComponent_C::HandgunRS' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WeaponEndurance) == 0x0006A8, "Member 'UBPC_PlayerStatsComponent_C::WeaponEndurance' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ArmorEndurance) == 0x0006B0, "Member 'UBPC_PlayerStatsComponent_C::ArmorEndurance' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CraftDiscount) == 0x0006B8, "Member 'UBPC_PlayerStatsComponent_C::CraftDiscount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, RepairDiscount) == 0x0006C0, "Member 'UBPC_PlayerStatsComponent_C::RepairDiscount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WeightPerk) == 0x0006C8, "Member 'UBPC_PlayerStatsComponent_C::WeightPerk' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, LootSpeedPerk) == 0x0006D0, "Member 'UBPC_PlayerStatsComponent_C::LootSpeedPerk' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaPerk) == 0x0006D8, "Member 'UBPC_PlayerStatsComponent_C::StaminaPerk' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, InventorySlot) == 0x0006E0, "Member 'UBPC_PlayerStatsComponent_C::InventorySlot' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SprintSpeed) == 0x0006E8, "Member 'UBPC_PlayerStatsComponent_C::SprintSpeed' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, FriendlyFire) == 0x0006F0, "Member 'UBPC_PlayerStatsComponent_C::FriendlyFire' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StaminaDrain) == 0x0006F8, "Member 'UBPC_PlayerStatsComponent_C::StaminaDrain' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NotAffectedWeightMax) == 0x000700, "Member 'UBPC_PlayerStatsComponent_C::NotAffectedWeightMax' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, WeightMaxMultiplier) == 0x000708, "Member 'UBPC_PlayerStatsComponent_C::WeightMaxMultiplier' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AdrenalineActive) == 0x000710, "Member 'UBPC_PlayerStatsComponent_C::AdrenalineActive' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, OnStatTrainChanged) == 0x000718, "Member 'UBPC_PlayerStatsComponent_C::OnStatTrainChanged' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, TrainCounterMax) == 0x000728, "Member 'UBPC_PlayerStatsComponent_C::TrainCounterMax' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PlayerStatSave) == 0x000778, "Member 'UBPC_PlayerStatsComponent_C::PlayerStatSave' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StatSaveString) == 0x000788, "Member 'UBPC_PlayerStatsComponent_C::StatSaveString' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, StatSaveEnums) == 0x000798, "Member 'UBPC_PlayerStatsComponent_C::StatSaveEnums' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, RegenAmount) == 0x0007A8, "Member 'UBPC_PlayerStatsComponent_C::RegenAmount' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SwimmingTime) == 0x0007B0, "Member 'UBPC_PlayerStatsComponent_C::SwimmingTime' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, SwimmingDamageTimer) == 0x0007B8, "Member 'UBPC_PlayerStatsComponent_C::SwimmingDamageTimer' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PlayerTrainStatSave) == 0x0007C0, "Member 'UBPC_PlayerStatsComponent_C::PlayerTrainStatSave' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AssaultRSMulti) == 0x0007D0, "Member 'UBPC_PlayerStatsComponent_C::AssaultRSMulti' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ShotgunRSMulti) == 0x0007D8, "Member 'UBPC_PlayerStatsComponent_C::ShotgunRSMulti' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CarbineRSMulti) == 0x0007E0, "Member 'UBPC_PlayerStatsComponent_C::CarbineRSMulti' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, AssaultRC) == 0x0007E8, "Member 'UBPC_PlayerStatsComponent_C::AssaultRC' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, ShotgunRC) == 0x0007F0, "Member 'UBPC_PlayerStatsComponent_C::ShotgunRC' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, CarbineRC) == 0x0007F8, "Member 'UBPC_PlayerStatsComponent_C::CarbineRC' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, Stat_Train_Type) == 0x000800, "Member 'UBPC_PlayerStatsComponent_C::Stat_Train_Type' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, PlayerTrainSave) == 0x000808, "Member 'UBPC_PlayerStatsComponent_C::PlayerTrainSave' has a wrong offset!");
static_assert(offsetof(UBPC_PlayerStatsComponent_C, NotifSkipper) == 0x000818, "Member 'UBPC_PlayerStatsComponent_C::NotifSkipper' has a wrong offset!");

}

