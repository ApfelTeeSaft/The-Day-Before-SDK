#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WI_Workbench

#include "Basic.hpp"

#include "WI_Workbench_classes.hpp"
#include "WI_Workbench_parameters.hpp"


namespace SDK
{

// Function WI_Workbench.WI_Workbench_C.GetActiveAttachment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFItemInfo                       Item                                                   (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void IWI_Workbench_C::GetActiveAttachment(bool* Result, struct FFItemInfo* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "GetActiveAttachment");

	Params::WI_Workbench_C_GetActiveAttachment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Item != nullptr)
		*Item = std::move(Parms.Item);
}


// Function WI_Workbench.WI_Workbench_C.GetBaseAttachment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAttachmentInfo                  Attchment                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWI_Workbench_C::GetBaseAttachment(bool* Result, struct FAttachmentInfo* Attchment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "GetBaseAttachment");

	Params::WI_Workbench_C_GetBaseAttachment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Attchment != nullptr)
		*Attchment = std::move(Parms.Attchment);
}


// Function WI_Workbench.WI_Workbench_C.GetDependencyAttachment
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TypesOfModes                          Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFItemInfo                       Item                                                   (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// E_DependenciesRule                      Rule                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWI_Workbench_C::GetDependencyAttachment(E_TypesOfModes* Result, struct FFItemInfo* Item, E_DependenciesRule* Rule)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "GetDependencyAttachment");

	Params::WI_Workbench_C_GetDependencyAttachment Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Item != nullptr)
		*Item = std::move(Parms.Item);

	if (Rule != nullptr)
		*Rule = Parms.Rule;
}


// Function WI_Workbench.WI_Workbench_C.GetLocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Locked                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWI_Workbench_C::GetLocked(bool* Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "GetLocked");

	Params::WI_Workbench_C_GetLocked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Locked != nullptr)
		*Locked = Parms.Locked;
}


// Function WI_Workbench.WI_Workbench_C.OnLockOperation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lock                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWI_Workbench_C::OnLockOperation(double Duration, bool Lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "OnLockOperation");

	Params::WI_Workbench_C_OnLockOperation Parms{};

	Parms.Duration = Duration;
	Parms.Lock = Lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_Workbench.WI_Workbench_C.OnPushMessage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWE_MessageTypes                        Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWI_Workbench_C::OnPushMessage(EWE_MessageTypes Type, const class FText& Text, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "OnPushMessage");

	Params::WI_Workbench_C_OnPushMessage Parms{};

	Parms.Type = Type;
	Parms.Text = std::move(Text);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_Workbench.WI_Workbench_C.OnUpdateAttachments
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       NewItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void IWI_Workbench_C::OnUpdateAttachments(const struct FFItemInfo& NewItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "OnUpdateAttachments");

	Params::WI_Workbench_C_OnUpdateAttachments Parms{};

	Parms.NewItem = std::move(NewItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WI_Workbench.WI_Workbench_C.RevalidateAttachments
// (Public, BlueprintCallable, BlueprintEvent)

void IWI_Workbench_C::RevalidateAttachments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "RevalidateAttachments");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WI_Workbench.WI_Workbench_C.SetPositionActiveAttachment
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IWI_Workbench_C::SetPositionActiveAttachment(int32 NewPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WI_Workbench_C", "SetPositionActiveAttachment");

	Params::WI_Workbench_C_SetPositionActiveAttachment Parms{};

	Parms.NewPosition = NewPosition;

	UObject::ProcessEvent(Func, &Parms);
}

}

