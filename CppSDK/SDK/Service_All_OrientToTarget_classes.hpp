#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Service_All_OrientToTarget

#include "Basic.hpp"

#include "E_ActorOrVector_structs.hpp"
#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Service_All_OrientToTarget.Service_All_OrientToTarget_C
// 0x0068 (0x0100 - 0x0098)
class UService_All_OrientToTarget_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class APawn*                                  Pawn;                                              // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_ActorOrVector                               TargetLoc;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 Target;                                            // 0x00B0(0x0028)(Edit, BlueprintVisible)
	bool                                          RotateWhenStand_;                                  // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinInterpSpeed;                                    // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxInterpSpeed;                                    // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ErrorTolerance;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaS;                                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Service_All_OrientToTarget(int32 EntryPoint);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Service_All_OrientToTarget_C">();
	}
	static class UService_All_OrientToTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UService_All_OrientToTarget_C>();
	}
};
static_assert(alignof(UService_All_OrientToTarget_C) == 0x000008, "Wrong alignment on UService_All_OrientToTarget_C");
static_assert(sizeof(UService_All_OrientToTarget_C) == 0x000100, "Wrong size on UService_All_OrientToTarget_C");
static_assert(offsetof(UService_All_OrientToTarget_C, UberGraphFrame) == 0x000098, "Member 'UService_All_OrientToTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, Pawn) == 0x0000A0, "Member 'UService_All_OrientToTarget_C::Pawn' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, TargetLoc) == 0x0000A8, "Member 'UService_All_OrientToTarget_C::TargetLoc' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, Target) == 0x0000B0, "Member 'UService_All_OrientToTarget_C::Target' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, RotateWhenStand_) == 0x0000D8, "Member 'UService_All_OrientToTarget_C::RotateWhenStand_' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, MinInterpSpeed) == 0x0000E0, "Member 'UService_All_OrientToTarget_C::MinInterpSpeed' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, MaxInterpSpeed) == 0x0000E8, "Member 'UService_All_OrientToTarget_C::MaxInterpSpeed' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, ErrorTolerance) == 0x0000F0, "Member 'UService_All_OrientToTarget_C::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(UService_All_OrientToTarget_C, DeltaS) == 0x0000F8, "Member 'UService_All_OrientToTarget_C::DeltaS' has a wrong offset!");

}

