#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_BaseSlot

#include "Basic.hpp"

#include "W_BaseSlot_classes.hpp"
#include "W_BaseSlot_parameters.hpp"


namespace SDK
{

// Function W_BaseSlot.W_BaseSlot_C.AddCount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_AddCount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::AddCount(int32 Param_AddCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "AddCount");

	Params::W_BaseSlot_C_AddCount Parms{};

	Parms.Param_AddCount = Param_AddCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.AddItem
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FContainerPickupsInfo            Param_PickupInfo                                       (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UW_BaseSlot_C::AddItem(const struct FContainerPickupsInfo& Param_PickupInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "AddItem");

	Params::W_BaseSlot_C_AddItem Parms{};

	Parms.Param_PickupInfo = std::move(Param_PickupInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.BndEvt__W_BaseSlot_Button_CounterMinus_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature
// (BlueprintEvent)

void UW_BaseSlot_C::BndEvt__W_BaseSlot_Button_CounterMinus_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "BndEvt__W_BaseSlot_Button_CounterMinus_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.BndEvt__W_BaseSlot_Button_CounterPlus_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature
// (BlueprintEvent)

void UW_BaseSlot_C::BndEvt__W_BaseSlot_Button_CounterPlus_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "BndEvt__W_BaseSlot_Button_CounterPlus_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.Canstack
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_Canstack                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::Canstack(bool* Param_Canstack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "Canstack");

	Params::W_BaseSlot_C_Canstack Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Canstack != nullptr)
		*Param_Canstack = Parms.Param_Canstack;
}


// Function W_BaseSlot.W_BaseSlot_C.Change Sell Status
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SlotStatus                            Param_Status                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::Change_Sell_Status(E_SlotStatus Param_Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "Change Sell Status");

	Params::W_BaseSlot_C_Change_Sell_Status Parms{};

	Parms.Param_Status = Param_Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.ChangeCount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::ChangeCount(int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "ChangeCount");

	Params::W_BaseSlot_C_ChangeCount Parms{};

	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.ChangeStatus
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_SlotStatus                            Param_Status                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::ChangeStatus(E_SlotStatus Param_Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "ChangeStatus");

	Params::W_BaseSlot_C_ChangeStatus Parms{};

	Parms.Param_Status = Param_Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.ClearSelection
// (BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "ClearSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.ClearSlot
// (BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::ClearSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "ClearSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.ExecuteUbergraph_W_BaseSlot
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::ExecuteUbergraph_W_BaseSlot(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "ExecuteUbergraph_W_BaseSlot");

	Params::W_BaseSlot_C_ExecuteUbergraph_W_BaseSlot Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.Get Pivot Index
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Param_DragOffset                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::Get_Pivot_Index(const struct FVector2D& Param_DragOffset, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "Get Pivot Index");

	Params::W_BaseSlot_C_Get_Pivot_Index Parms{};

	Parms.Param_DragOffset = std::move(Param_DragOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function W_BaseSlot.W_BaseSlot_C.GetEquipmentMark
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_BaseSlot_C::GetEquipmentMark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetEquipmentMark");

	Params::W_BaseSlot_C_GetEquipmentMark Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseSlot.W_BaseSlot_C.GetItemPrice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Param_Price                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetItemPrice(double* Param_Price)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetItemPrice");

	Params::W_BaseSlot_C_GetItemPrice Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Price != nullptr)
		*Param_Price = Parms.Param_Price;
}


// Function W_BaseSlot.W_BaseSlot_C.OccupySlot
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_OccupantIndex                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::OccupySlot(int32 Param_OccupantIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OccupySlot");

	Params::W_BaseSlot_C_OccupySlot Parms{};

	Parms.Param_OccupantIndex = Param_OccupantIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.OnDragCancelled
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnDragCancelled");

	Params::W_BaseSlot_C_OnDragCancelled Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.OnDragDetected
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnDragDetected");

	Params::W_BaseSlot_C_OnDragDetected Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);

	if (Operation != nullptr)
		*Operation = Parms.Operation;
}


// Function W_BaseSlot.W_BaseSlot_C.OnDragEnter
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnDragEnter");

	Params::W_BaseSlot_C_OnDragEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.OnDragLeave
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnDragLeave");

	Params::W_BaseSlot_C_OnDragLeave Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.OnDrop
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_BaseSlot_C::OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnDrop");

	Params::W_BaseSlot_C_OnDrop Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseSlot.W_BaseSlot_C.OnMouseButtonDoubleClick
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        InMyGeometry                                           (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    InMouseEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_BaseSlot_C::OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnMouseButtonDoubleClick");

	Params::W_BaseSlot_C_OnMouseButtonDoubleClick Parms{};

	Parms.InMyGeometry = std::move(InMyGeometry);
	Parms.InMouseEvent = std::move(InMouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseSlot.W_BaseSlot_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_BaseSlot_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnMouseButtonDown");

	Params::W_BaseSlot_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseSlot.W_BaseSlot_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_BaseSlot_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnMouseEnter");

	Params::W_BaseSlot_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_BaseSlot_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "OnMouseLeave");

	Params::W_BaseSlot_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "PreConstruct");

	Params::W_BaseSlot_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.SelectSlot
// (BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::SelectSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SelectSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.SetCollisionEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In_Is_Enabled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::SetCollisionEnabled(bool In_Is_Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SetCollisionEnabled");

	Params::W_BaseSlot_C_SetCollisionEnabled Parms{};

	Parms.In_Is_Enabled = In_Is_Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.SetDefaultSlotImages
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::SetDefaultSlotImages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SetDefaultSlotImages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.SetEquipmentMark
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVisible                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::SetEquipmentMark(bool Param_IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SetEquipmentMark");

	Params::W_BaseSlot_C_SetEquipmentMark Parms{};

	Parms.Param_IsVisible = Param_IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.SetPrice
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::SetPrice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SetPrice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.SetSellPrice
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::SetSellPrice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SetSellPrice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.Unhover
// (BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::Unhover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "Unhover");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.Update Pickup Info
// (Public, BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::Update_Pickup_Info()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "Update Pickup Info");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.UpdateDragMove
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDragDropOperation*               DragDropOperation                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::UpdateDragMove(class UDragDropOperation* DragDropOperation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "UpdateDragMove");

	Params::W_BaseSlot_C_UpdateDragMove Parms{};

	Parms.DragDropOperation = DragDropOperation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.UpdateIcon
// (BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::UpdateIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "UpdateIcon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.UpdateItemCounter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::UpdateItemCounter(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "UpdateItemCounter");

	Params::W_BaseSlot_C_UpdateItemCounter Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseSlot.W_BaseSlot_C.UpdateItemName
// (Protected, BlueprintCallable, BlueprintEvent)

void UW_BaseSlot_C::UpdateItemName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "UpdateItemName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseSlot.W_BaseSlot_C.GetCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   MaxStack                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetCount(int32* MaxStack, int32* Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetCount");

	Params::W_BaseSlot_C_GetCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxStack != nullptr)
		*MaxStack = Parms.MaxStack;

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function W_BaseSlot.W_BaseSlot_C.GetDefaultSlotBrushes
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      BG_Brush                                               (Parm, OutParm)
// struct FSlateBrush                      Gradient_Brush                                         (Parm, OutParm)
// struct FSlateBrush                      Highlight_Brush                                        (Parm, OutParm)
// struct FSlateBrush                      Hover_Brush                                            (Parm, OutParm)
// struct FSlateBrush                      Item_Brush                                             (Parm, OutParm)

void UW_BaseSlot_C::GetDefaultSlotBrushes(struct FSlateBrush* BG_Brush, struct FSlateBrush* Gradient_Brush, struct FSlateBrush* Highlight_Brush, struct FSlateBrush* Hover_Brush, struct FSlateBrush* Item_Brush) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetDefaultSlotBrushes");

	Params::W_BaseSlot_C_GetDefaultSlotBrushes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BG_Brush != nullptr)
		*BG_Brush = std::move(Parms.BG_Brush);

	if (Gradient_Brush != nullptr)
		*Gradient_Brush = std::move(Parms.Gradient_Brush);

	if (Highlight_Brush != nullptr)
		*Highlight_Brush = std::move(Parms.Highlight_Brush);

	if (Hover_Brush != nullptr)
		*Hover_Brush = std::move(Parms.Hover_Brush);

	if (Item_Brush != nullptr)
		*Item_Brush = std::move(Parms.Item_Brush);
}


// Function W_BaseSlot.W_BaseSlot_C.GetItemBrush
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      SlateBrush                                             (Parm, OutParm)

void UW_BaseSlot_C::GetItemBrush(struct FSlateBrush* SlateBrush) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetItemBrush");

	Params::W_BaseSlot_C_GetItemBrush Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SlateBrush != nullptr)
		*SlateBrush = std::move(Parms.SlateBrush);
}


// Function W_BaseSlot.W_BaseSlot_C.GetItemId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetItemId(int32* ItemId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetItemId");

	Params::W_BaseSlot_C_GetItemId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;
}


// Function W_BaseSlot.W_BaseSlot_C.GetItemSlotDimension
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetItemSlotDimension(int32* X, int32* Y) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetItemSlotDimension");

	Params::W_BaseSlot_C_GetItemSlotDimension Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;
}


// Function W_BaseSlot.W_BaseSlot_C.GetItemWeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  Weight                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetItemWeight(double* Weight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetItemWeight");

	Params::W_BaseSlot_C_GetItemWeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weight != nullptr)
		*Weight = Parms.Weight;
}


// Function W_BaseSlot.W_BaseSlot_C.GetNumberOfSlotsUsed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Number                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetNumberOfSlotsUsed(int32* Number) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetNumberOfSlotsUsed");

	Params::W_BaseSlot_C_GetNumberOfSlotsUsed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Number != nullptr)
		*Number = Parms.Number;
}


// Function W_BaseSlot.W_BaseSlot_C.GetOcupantIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   OcupantIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetOcupantIndex(int32* OcupantIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetOcupantIndex");

	Params::W_BaseSlot_C_GetOcupantIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OcupantIndex != nullptr)
		*OcupantIndex = Parms.OcupantIndex;
}


// Function W_BaseSlot.W_BaseSlot_C.GetParentContainer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UW_BaseContainer_C*               Param_ParentContainer                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetParentContainer(class UW_BaseContainer_C** Param_ParentContainer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetParentContainer");

	Params::W_BaseSlot_C_GetParentContainer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ParentContainer != nullptr)
		*Param_ParentContainer = Parms.Param_ParentContainer;
}


// Function W_BaseSlot.W_BaseSlot_C.GetPickupInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FContainerPickupsInfo            Param_PickupInfo                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UW_BaseSlot_C::GetPickupInfo(struct FContainerPickupsInfo* Param_PickupInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetPickupInfo");

	Params::W_BaseSlot_C_GetPickupInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PickupInfo != nullptr)
		*Param_PickupInfo = std::move(Parms.Param_PickupInfo);
}


// Function W_BaseSlot.W_BaseSlot_C.GetSlotBrushes
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      Hover2_Brush                                           (Parm, OutParm)
// struct FSlateBrush                      Hover_Brush                                            (Parm, OutParm)
// struct FSlateBrush                      BG_Brush                                               (Parm, OutParm)
// struct FSlateBrush                      Gradient_Brush                                         (Parm, OutParm)
// struct FSlateBrush                      Highlight_Brush                                        (Parm, OutParm)
// struct FSlateBrush                      Item_Brush                                             (Parm, OutParm)

void UW_BaseSlot_C::GetSlotBrushes(struct FSlateBrush* Hover2_Brush, struct FSlateBrush* Hover_Brush, struct FSlateBrush* BG_Brush, struct FSlateBrush* Gradient_Brush, struct FSlateBrush* Highlight_Brush, struct FSlateBrush* Item_Brush) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetSlotBrushes");

	Params::W_BaseSlot_C_GetSlotBrushes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hover2_Brush != nullptr)
		*Hover2_Brush = std::move(Parms.Hover2_Brush);

	if (Hover_Brush != nullptr)
		*Hover_Brush = std::move(Parms.Hover_Brush);

	if (BG_Brush != nullptr)
		*BG_Brush = std::move(Parms.BG_Brush);

	if (Gradient_Brush != nullptr)
		*Gradient_Brush = std::move(Parms.Gradient_Brush);

	if (Highlight_Brush != nullptr)
		*Highlight_Brush = std::move(Parms.Highlight_Brush);

	if (Item_Brush != nullptr)
		*Item_Brush = std::move(Parms.Item_Brush);
}


// Function W_BaseSlot.W_BaseSlot_C.GetSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Param_SlotIndex                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetSlotIndex(int32* Param_SlotIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetSlotIndex");

	Params::W_BaseSlot_C_GetSlotIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SlotIndex != nullptr)
		*Param_SlotIndex = Parms.Param_SlotIndex;
}


// Function W_BaseSlot.W_BaseSlot_C.GetSlotSize
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        SlotSize                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetSlotSize(struct FVector2D* SlotSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetSlotSize");

	Params::W_BaseSlot_C_GetSlotSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SlotSize != nullptr)
		*SlotSize = std::move(Parms.SlotSize);
}


// Function W_BaseSlot.W_BaseSlot_C.GetStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_SlotStatus                            Param_Status                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::GetStatus(E_SlotStatus* Param_Status) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "GetStatus");

	Params::W_BaseSlot_C_GetStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Status != nullptr)
		*Param_Status = Parms.Param_Status;
}


// Function W_BaseSlot.W_BaseSlot_C.HasItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Has                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::HasItem(bool* Has) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "HasItem");

	Params::W_BaseSlot_C_HasItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Has != nullptr)
		*Has = Parms.Has;
}


// Function W_BaseSlot.W_BaseSlot_C.IsEmpty?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bIsEmpty                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::IsEmpty_(bool* bIsEmpty) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "IsEmpty?");

	Params::W_BaseSlot_C_IsEmpty_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsEmpty != nullptr)
		*bIsEmpty = Parms.bIsEmpty;
}


// Function W_BaseSlot.W_BaseSlot_C.isRotated?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseSlot_C::IsRotated_(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "isRotated?");

	Params::W_BaseSlot_C_IsRotated_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function W_BaseSlot.W_BaseSlot_C.SwapVector
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UW_BaseSlot_C::SwapVector(const struct FVector2D& Vector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseSlot_C", "SwapVector");

	Params::W_BaseSlot_C_SwapVector Parms{};

	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

