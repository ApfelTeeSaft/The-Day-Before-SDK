#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SGInventoryWorker

#include "Basic.hpp"

#include "SGInventoryWorker_classes.hpp"
#include "SGInventoryWorker_parameters.hpp"


namespace SDK
{

// Function SGInventoryWorker.SGInventoryWorker_C.AddGuideItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USGInventoryWorker_C::AddGuideItems(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "AddGuideItems");

	Params::SGInventoryWorker_C_AddGuideItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function SGInventoryWorker.SGInventoryWorker_C.ExecuteUbergraph_SGInventoryWorker
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USGInventoryWorker_C::ExecuteUbergraph_SGInventoryWorker(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "ExecuteUbergraph_SGInventoryWorker");

	Params::SGInventoryWorker_C_ExecuteUbergraph_SGInventoryWorker Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SGInventoryWorker.SGInventoryWorker_C.FetchCustom
// (BlueprintCallable, BlueprintEvent)

void USGInventoryWorker_C::FetchCustom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "FetchCustom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.FetchInventory
// (BlueprintCallable, BlueprintEvent)

void USGInventoryWorker_C::FetchInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "FetchInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.IsSGStashExist
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Exist                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USGInventoryWorker_C::IsSGStashExist(bool* Exist)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "IsSGStashExist");

	Params::SGInventoryWorker_C_IsSGStashExist Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Exist != nullptr)
		*Exist = Parms.Exist;
}


// Function SGInventoryWorker.SGInventoryWorker_C.PastServerTimeLocal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        TimeP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void USGInventoryWorker_C::PastServerTimeLocal(const struct FDateTime& TimeP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "PastServerTimeLocal");

	Params::SGInventoryWorker_C_PastServerTimeLocal Parms{};

	Parms.TimeP = std::move(TimeP);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SGInventoryWorker.SGInventoryWorker_C.PushInventory
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTDBJsonObject*                   Json                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   StrAr                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void USGInventoryWorker_C::PushInventory(class UTDBJsonObject* Json, const TArray<class FString>& StrAr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "PushInventory");

	Params::SGInventoryWorker_C_PushInventory Parms{};

	Parms.Json = Json;
	Parms.StrAr = std::move(StrAr);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SGInventoryWorker.SGInventoryWorker_C.RealServerTime
// (BlueprintCallable, BlueprintEvent)

void USGInventoryWorker_C::RealServerTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "RealServerTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.RealServerTimeLocal
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void USGInventoryWorker_C::RealServerTimeLocal(const struct FDateTime& Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "RealServerTimeLocal");

	Params::SGInventoryWorker_C_RealServerTimeLocal Parms{};

	Parms.Time = std::move(Time);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SGInventoryWorker.SGInventoryWorker_C.RealServerTimeServ
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void USGInventoryWorker_C::RealServerTimeServ()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "RealServerTimeServ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void USGInventoryWorker_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.ServTimeUpload
// (BlueprintCallable, BlueprintEvent)

void USGInventoryWorker_C::ServTimeUpload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "ServTimeUpload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.StashPlayerInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Param_Arr                                              (Parm, OutParm)

void USGInventoryWorker_C::StashPlayerInventory(TArray<class FString>* Param_Arr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "StashPlayerInventory");

	Params::SGInventoryWorker_C_StashPlayerInventory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Arr != nullptr)
		*Param_Arr = std::move(Parms.Param_Arr);
}


// Function SGInventoryWorker.SGInventoryWorker_C.TimeCashReady?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Rdy_                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void USGInventoryWorker_C::TimeCashReady_(bool* Rdy_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "TimeCashReady?");

	Params::SGInventoryWorker_C_TimeCashReady_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rdy_ != nullptr)
		*Rdy_ = Parms.Rdy_;
}


// Function SGInventoryWorker.SGInventoryWorker_C.TimeReady__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void USGInventoryWorker_C::TimeReady__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SGInventoryWorker_C", "TimeReady__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}

}

