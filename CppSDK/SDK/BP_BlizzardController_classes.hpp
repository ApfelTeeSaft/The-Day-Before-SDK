#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlizzardController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlizzardController.BP_BlizzardController_C
// 0x0130 (0x03C0 - 0x0290)
class ABP_BlizzardController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               BlizzardParticle;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               SnowParticle;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    Wind;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBlizzard;                                        // 0x02B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinBlizzardDelay;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxBlizzardDelay;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlizzardDelay;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinBlizzardDuration;                               // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxBlizzardDuration;                               // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlizzardDuration;                                  // 0x02E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnBlizzardStart;                                   // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBlizzardStop;                                    // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UParticleSystemComponent*               BlizzardFX;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AUltra_Dynamic_Sky_BP_C*                UltraSky;                                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTimerHandle                           HeightUpTimerHandle;                               // 0x0320(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HeightDownTimerHandle;                             // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitionBlizzardOn;                              // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitionBlizzardOff;                             // 0x0331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_332[0x6];                                      // 0x0332(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionBlizzardTime;                            // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionDuration;                                // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AddLocation;                                       // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHouse;                                           // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerActive;                                      // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      BlizzardMat;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BlizzardDynMat_Centre;                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BlizzardDynMat_Sides;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BlizzardMaxOpacity;                                // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InBunker;                                          // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastSavedLocation;                                 // 0x0390(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceBlizzard;                                     // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          FollowPlayer;                                      // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlizzardParticlesOn;                               // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB[0x5];                                      // 0x03AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 FollowTarget;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFollowCustomTarget;                              // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowTargetNow;                                   // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateBlizzardParticles(bool IsOn);
	void BunkerEntered();
	void BunkerLeaved();
	void CalculateNextBlizzard(bool Param_ForceBlizzard);
	void ExecuteUbergraph_BP_BlizzardController(int32 EntryPoint);
	void FollowCustomTarget();
	void FollowLocalPlayer();
	void FollowLocalPlayerV2();
	void HeightDown();
	void HeightUp();
	void OnBlizzardStart__DelegateSignature();
	void OnBlizzardStop__DelegateSignature();
	void OnHouseEnter();
	void OnHouseLeave();
	void PlayWind();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetFollowTarget(class AActor* Target, bool FollowNow);
	void StartBlizzard();
	void StopBlizzard();
	void StopWind();
	void UpdateBlizzardFogAndLight(double DeltaTime);
	void UpdateBlizzardFogAndLightV2(double DeltaTime);
	void WaitBlizzard();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlizzardController_C">();
	}
	static class ABP_BlizzardController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BlizzardController_C>();
	}
};
static_assert(alignof(ABP_BlizzardController_C) == 0x000008, "Wrong alignment on ABP_BlizzardController_C");
static_assert(sizeof(ABP_BlizzardController_C) == 0x0003C0, "Wrong size on ABP_BlizzardController_C");
static_assert(offsetof(ABP_BlizzardController_C, UberGraphFrame) == 0x000290, "Member 'ABP_BlizzardController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardParticle) == 0x000298, "Member 'ABP_BlizzardController_C::BlizzardParticle' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, SnowParticle) == 0x0002A0, "Member 'ABP_BlizzardController_C::SnowParticle' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, Wind) == 0x0002A8, "Member 'ABP_BlizzardController_C::Wind' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_BlizzardController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, IsBlizzard) == 0x0002B8, "Member 'ABP_BlizzardController_C::IsBlizzard' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, MinBlizzardDelay) == 0x0002C0, "Member 'ABP_BlizzardController_C::MinBlizzardDelay' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, MaxBlizzardDelay) == 0x0002C8, "Member 'ABP_BlizzardController_C::MaxBlizzardDelay' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardDelay) == 0x0002D0, "Member 'ABP_BlizzardController_C::BlizzardDelay' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, MinBlizzardDuration) == 0x0002D8, "Member 'ABP_BlizzardController_C::MinBlizzardDuration' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, MaxBlizzardDuration) == 0x0002E0, "Member 'ABP_BlizzardController_C::MaxBlizzardDuration' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardDuration) == 0x0002E8, "Member 'ABP_BlizzardController_C::BlizzardDuration' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, OnBlizzardStart) == 0x0002F0, "Member 'ABP_BlizzardController_C::OnBlizzardStart' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, OnBlizzardStop) == 0x000300, "Member 'ABP_BlizzardController_C::OnBlizzardStop' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardFX) == 0x000310, "Member 'ABP_BlizzardController_C::BlizzardFX' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, UltraSky) == 0x000318, "Member 'ABP_BlizzardController_C::UltraSky' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, HeightUpTimerHandle) == 0x000320, "Member 'ABP_BlizzardController_C::HeightUpTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, HeightDownTimerHandle) == 0x000328, "Member 'ABP_BlizzardController_C::HeightDownTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, TransitionBlizzardOn) == 0x000330, "Member 'ABP_BlizzardController_C::TransitionBlizzardOn' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, TransitionBlizzardOff) == 0x000331, "Member 'ABP_BlizzardController_C::TransitionBlizzardOff' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, TransitionBlizzardTime) == 0x000338, "Member 'ABP_BlizzardController_C::TransitionBlizzardTime' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, TransitionDuration) == 0x000340, "Member 'ABP_BlizzardController_C::TransitionDuration' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, AddLocation) == 0x000348, "Member 'ABP_BlizzardController_C::AddLocation' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, InHouse) == 0x000360, "Member 'ABP_BlizzardController_C::InHouse' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, PlayerActive) == 0x000361, "Member 'ABP_BlizzardController_C::PlayerActive' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardMat) == 0x000368, "Member 'ABP_BlizzardController_C::BlizzardMat' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardDynMat_Centre) == 0x000370, "Member 'ABP_BlizzardController_C::BlizzardDynMat_Centre' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardDynMat_Sides) == 0x000378, "Member 'ABP_BlizzardController_C::BlizzardDynMat_Sides' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardMaxOpacity) == 0x000380, "Member 'ABP_BlizzardController_C::BlizzardMaxOpacity' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, InBunker) == 0x000388, "Member 'ABP_BlizzardController_C::InBunker' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, LastSavedLocation) == 0x000390, "Member 'ABP_BlizzardController_C::LastSavedLocation' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, ForceBlizzard) == 0x0003A8, "Member 'ABP_BlizzardController_C::ForceBlizzard' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, FollowPlayer) == 0x0003A9, "Member 'ABP_BlizzardController_C::FollowPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, BlizzardParticlesOn) == 0x0003AA, "Member 'ABP_BlizzardController_C::BlizzardParticlesOn' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, FollowTarget) == 0x0003B0, "Member 'ABP_BlizzardController_C::FollowTarget' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, IsFollowCustomTarget) == 0x0003B8, "Member 'ABP_BlizzardController_C::IsFollowCustomTarget' has a wrong offset!");
static_assert(offsetof(ABP_BlizzardController_C, FollowTargetNow) == 0x0003B9, "Member 'ABP_BlizzardController_C::FollowTargetNow' has a wrong offset!");

}

