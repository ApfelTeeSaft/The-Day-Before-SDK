#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvivalPlayer_V2

#include "Basic.hpp"

#include "FGrenadeInfo_structs.hpp"
#include "Engine_structs.hpp"
#include "MovementType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StanceState_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "SurvivalPlayer_Test_classes.hpp"
#include "Enum_PlayerState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "WE_NewDeathScreenState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SurvivalPlayer_V2.SurvivalPlayer_V2_C
// 0x07D0 (0x4DE0 - 0x4610)
#pragma pack(push, 0x1)
class alignas(0x10) ASurvivalPlayer_V2_C : public ASurvivalPlayer_Test_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_SurvivalPlayer_V2_C;                // 0x4610(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      FlowmapBrush_NPC;                                  // 0x4618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_Taunt_C*                           BPC_Taunt;                                         // 0x4620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_CH_Ambient;                                     // 0x4628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_CH_Garbage;                                     // 0x4630(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_CH_Leaves;                                      // 0x4638(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UIconComponent_C*                       IconComponent;                                     // 0x4640(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAnimationURO*                          AnimationURO;                                      // 0x4648(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_TickIntervalController_C*          BPC_TickIntervalController;                        // 0x4650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   MotionBlur;                                        // 0x4658(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPlayerCutsceneComponent_C*             PlayerCutsceneComponent;                           // 0x4660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WP_Check_Source;                                   // 0x4668(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereProjectileNear;                              // 0x4670(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         MB_AimTimeline_Strength_9F3BD84C47A467CB33BF269C179C850E; // 0x4678(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MB_AimTimeline__Direction_9F3BD84C47A467CB33BF269C179C850E; // 0x467C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_467D[0x3];                                     // 0x467D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MB_AimTimeline;                                    // 0x4680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicBlendIdle_NewTrack_0_76D8F57447EA41D946F93F9F627BA0A0; // 0x4688(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PhysicBlendIdle__Direction_76D8F57447EA41D946F93F9F627BA0A0; // 0x468C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_468D[0x3];                                     // 0x468D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PhysicBlendIdle;                                   // 0x4690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Strength_Multiplyer;                               // 0x4698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalHas_Movement_Input;                           // 0x46A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	MovementType::EMovementType                   LOCALmOVEMENTtYPE;                                 // 0x46A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46A2[0x6];                                     // 0x46A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TrajectorySpline_C*                 Trajectory;                                        // 0x46A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Skin_Material;                                     // 0x46B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Throw_Weapon;                                      // 0x46B8(0x0030)(Edit, BlueprintVisible, Net, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 Throw_weapon_name;                                 // 0x46E8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          BreathHolded;                                      // 0x46F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46F9[0x7];                                     // 0x46F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BreathHoldValue;                                   // 0x4700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BreathActiveTimer;                                 // 0x4708(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LastHairMaterial;                                  // 0x4710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     NewVar_City_Ambient;                               // 0x4718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FFMODEventInstance                     City_Reverb;                                       // 0x4720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 ExplosiveItem;                                     // 0x4728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeRSpawn;                                     // 0x4730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4731[0x7];                                     // 0x4731(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimeGrenadeInHand;                                 // 0x4738(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	ESpawnActorCollisionHandlingMethod            Collision_Handling_Override;                       // 0x4740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4741[0x7];                                     // 0x4741(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimeHandleDrawTrajectory;                          // 0x4748(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivateGrenadeWithTrajectory;                     // 0x4750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4751[0x7];                                     // 0x4751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage_to_Play;                                   // 0x4758(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimePressedLeftMouse;                              // 0x4760(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimePressed;                                       // 0x4768(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DelayThrow;                                        // 0x4769(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_476A[0x6];                                     // 0x476A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DelayGrenade;                                      // 0x4770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterruptedThrowAnim;                              // 0x4778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeKeyDown;                                    // 0x4779(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FastThrowGrenade;                                  // 0x477A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_477B[0x5];                                     // 0x477B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 FakeGrenade;                                       // 0x4780(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFGrenadeInfo                          ThrowableInfo;                                     // 0x4788(0x0348)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	Enum_PlayerState                              CurrentState;                                      // 0x4AD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_PlayerState                              Initial_Player_State;                              // 0x4AD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AD2[0x6];                                     // 0x4AD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USurviveAnimator1_Sound_C*              Anim_Ref;                                          // 0x4AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Do_Debug_;                                         // 0x4AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AE1[0x7];                                     // 0x4AE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Player_Elevation;                                  // 0x4AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinVertigoElevation;                               // 0x4AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVertigo_;                                        // 0x4AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExperementingVertigo;                              // 0x4AF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AFA[0x6];                                     // 0x4AFA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VertigoEndTrace_Z_only_;                           // 0x4B00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               VertigoLineTrace_Debug_;                           // 0x4B18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EdgeFrontForward;                                  // 0x4B19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EdgeLeft;                                          // 0x4B1A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EdgeBack;                                          // 0x4B1B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EdgeRight;                                         // 0x4B1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B1D[0x3];                                     // 0x4B1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Player_Evalation;                                  // 0x4B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinVertigoEvaltion;                                // 0x4B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxVertigo;                                        // 0x4B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODBreathingDefault_0;                            // 0x4B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODHealthBreathing;                               // 0x4B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODStaminaLow;                                    // 0x4B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODNearProjectile;                                // 0x4B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODVertigo;                                       // 0x4B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODBreathingCrouch;                               // 0x4B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventBreathingCrouch;                          // 0x4B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventBreathingStamina;                         // 0x4B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventBreathingHealth;                          // 0x4B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventDefaultBreathing;                         // 0x4B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventNearProjectile;                           // 0x4B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    FMODBreathingAim;                                  // 0x4B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventBreathingAim;                             // 0x4B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             FModEventBreathingVertigo;                         // 0x4BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentPlayerFOV;                                  // 0x4BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FOVAimGrenade;                                     // 0x4BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeverDestroy;                                      // 0x4BB8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BB9[0x7];                                     // 0x4BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Explosion;                                         // 0x4BC0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AExplosive_Item_C*                      As_Explosive_Item;                                 // 0x4BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponAngleToWall;                                 // 0x4BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockingHit;                                       // 0x4BD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BD9[0x7];                                     // 0x4BD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     Ambient_Hub;                                       // 0x4BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SpawnInHub;                                        // 0x4BE8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BE9[0x7];                                     // 0x4BE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LinearMotionBlurCage_C*             BP_LinearMotionBlurCage;                           // 0x4BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AimGrenadePressed;                                 // 0x4BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4BF9[0x3];                                     // 0x4BF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           RememberStandingCameraMode;                        // 0x4BFC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C04[0x4];                                     // 0x4C04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ScopeBase_C*                        RememberScope;                                     // 0x4C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedToDelete_RememberScoping;                      // 0x4C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C11[0x7];                                     // 0x4C11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFMODEventInstance                     City_Abandoned;                                    // 0x4C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         Gravity_Scale_Default;                             // 0x4C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeLMB;                                        // 0x4C24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GrenadeRMB;                                        // 0x4C25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockGrenade;                                      // 0x4C26(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C27[0x1];                                     // 0x4C27(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PowerThrowGrenade;                                 // 0x4C28(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C2C[0x4];                                     // 0x4C2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimePressedRightMouse;                             // 0x4C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnInputActionWeaponSlot5;                          // 0x4C38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           TimerExplosive;                                    // 0x4C48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RingOut;                                           // 0x4C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeftTilt;                                        // 0x4C51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C52[0x6];                                     // 0x4C52(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultLeftTilt;                                   // 0x4C58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftTilt;                                          // 0x4C70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightTilt;                                         // 0x4C88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UATPCCameraLocationObjectV2_C*          ATPCLocObject;                                     // 0x4CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerInCutscene;                                  // 0x4CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CA9[0x7];                                     // 0x4CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HipFireAlpha;                                      // 0x4CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHipFire;                                         // 0x4CB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CB9[0x7];                                     // 0x4CB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotOnHipFire;                                      // 0x4CC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                TargetTilt;                                        // 0x4CD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TiltInterpSpeed;                                   // 0x4CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentTilt;                                       // 0x4CF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               GPSOrigRot;                                        // 0x4D10(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                GPSLocOffset;                                      // 0x4D28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitialCutscene;                                   // 0x4D40(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4D41[0x7];                                     // 0x4D41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Char_Yaw;                                          // 0x4D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevLocation;                                      // 0x4D50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class FString>                           Komnata_Stages;                                    // 0x4D68(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           MeleeTimer;                                        // 0x4DB8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MeleeCooldown;                                     // 0x4DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DC4[0x4];                                     // 0x4DC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChairParent_C*                         As_Chair_Parent;                                   // 0x4DC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInCraftStation;                                  // 0x4DD0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_Grenade_Server(TSoftClassPtr<class UClass> Param_Class);
	void ActivateEquippedGrenadeInHand(TSoftClassPtr<class UClass> Param_Class);
	void ActivateGrenade_Multicast_(TSoftClassPtr<class UClass> Param_Class);
	void ActivateGrenadeTimer();
	void AnimGetGrenade_Multicast_(class UClass* GrenadeFake, bool EquipNew);
	void AnimGetGrenade_Server(class UClass* NewParam, bool EquipNew);
	void AnimThrowIntro_Multicast_();
	void AnimThrowIntroServer();
	void AnimThrowLoop_Multicast_();
	void AnimThrowLoopServer();
	void AnimThrowOutro_Multicast_();
	void AnimThrowOutroServer();
	void BarTips();
	void BlockBreathhold();
	void BndEvt__SurvivalPlayer_V2_CapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__SurvivalPlayer_V2_CapsuleComponent_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__SurvivalPlayer_V2_CapsuleComponent_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BreathHoldingTimer();
	void BreathingVertigo();
	void CalculateVariables();
	void CallThrowableEquipAnim(class UClass* ThrowableFakeClass, bool EquipNew);
	bool CanThrowGrenade();
	void Change_Grenade_Client();
	void Change_Grenade_Server(const class FString& Name_Grenade, TSoftClassPtr<class UClass> Param_Throw_Weapon);
	void Change_Material_Param_Color(TArray<class USkeletalMeshComponent*>& Array, class FName ParameterName, const struct FLinearColor& Value);
	void ChangeGrenadeWeapon(class FString* GrenadeWeaponName, TSoftClassPtr<class UClass>* ThrowWeapon);
	void CheckBlackSkin();
	void CheckBlendshapes();
	void CheckBreathingAim();
	void CheckBreathingCrouch();
	void CheckBreathingHealth();
	void CheckBreathingStamina();
	void CheckBreathingVertigo();
	void CheckGrenade(TSoftClassPtr<class UClass> GrenadeType, int32 Power, class UClass* GrenadeTypeOut1, TSoftClassPtr<class UClass>* GrenadeTypeOutSoft);
	void CheckSpeedFastThrow(int32 Power);
	void CheckSpeedThrow(int32 Power);
	void DestroyGrenade_OnDeath();
	void DirectionalLightSwitch(const class FString& LightName);
	void DrawTrajectory();
	void EquipGPS(bool Equip);
	void ExecuteUbergraph_SurvivalPlayer_V2(int32 EntryPoint);
	void FullyLoad();
	void GetMapIconData(struct FVector* Location, class UTexture2D** Icon, struct FVector2D* IconSize, double* RotationYaw, class AActor** WorldActor, class FText* Param_Name, class FText* Description);
	void GetPlayerLocationMPC();
	void Greedisgood();
	void GrenadeAdd(const class FString& Param_WeaponName);
	void GrenadeDelay();
	void Grenadedrop(const class FString& Param_WeaponName);
	void GrenadeInput(bool Pressed);
	void HasGrenade_0(bool* Has);
	void HideHairUnderHelmet(bool Hide);
	void Incline();
	void InitLocalPlayer();
	void InpActEvt_AimGrenade_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_AimGrenade_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_R_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_WeaponSlot5_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InputBlockTimer();
	void LaunchCuscene();
	void LaunchGrenade(const struct FVector& LaunchVelocity, const struct FTransform& InTransform);
	void MakePresenceNoise();
	void ManuallyThrowGrenade();
	void MB_AimTimeline__FinishedFunc();
	void MB_AimTimeline__UpdateFunc();
	bool Melee_Allowed();
	void MeleeDamageRegister();
	void MeleeHitCooldown();
	void MeleeHitMontage_Multi(class UAnimMontage* MontageToPlay);
	void MeleeHitMontage_Serv(class UAnimMontage* MontageToPlay);
	void NearProjectileEvent();
	void NearStopEvent();
	void OnBlendOut_1669EBB84AC1B94C5912A58629E5AA97(class FName NotifyName);
	void OnBlendOut_33C67341434F3CB91CA39A8F029F3A4C(class FName NotifyName);
	void OnBlendOut_6066947F49F379D3D0B8DC9F7EFC6D60(class FName NotifyName);
	void OnBlendOut_656C0E4D428A7045BFE53F85725725BD(class FName NotifyName);
	void OnBlendOut_65893BD6430BE4F65A2F4CACCA44AF05(class FName NotifyName);
	void OnBlendOut_675B9AAA4F60EF91AD36C191E4A47DF2(class FName NotifyName);
	void OnBlendOut_8DF1166C4911BA8C088AFAA5F2BCCA70(class FName NotifyName);
	void OnBlendOut_8E6CCF18441D865B51ED2EB5C2966332(class FName NotifyName);
	void OnBlendOut_E2592D914BA5B2B1DFAA76849084B433(class FName NotifyName);
	void OnBlendOut_E9C8ADBA45339B324A1D5587B37FE9FF(class FName NotifyName);
	void OnCompleted_1669EBB84AC1B94C5912A58629E5AA97(class FName NotifyName);
	void OnCompleted_33C67341434F3CB91CA39A8F029F3A4C(class FName NotifyName);
	void OnCompleted_6066947F49F379D3D0B8DC9F7EFC6D60(class FName NotifyName);
	void OnCompleted_656C0E4D428A7045BFE53F85725725BD(class FName NotifyName);
	void OnCompleted_65893BD6430BE4F65A2F4CACCA44AF05(class FName NotifyName);
	void OnCompleted_675B9AAA4F60EF91AD36C191E4A47DF2(class FName NotifyName);
	void OnCompleted_8DF1166C4911BA8C088AFAA5F2BCCA70(class FName NotifyName);
	void OnCompleted_8E6CCF18441D865B51ED2EB5C2966332(class FName NotifyName);
	void OnCompleted_E2592D914BA5B2B1DFAA76849084B433(class FName NotifyName);
	void OnCompleted_E9C8ADBA45339B324A1D5587B37FE9FF(class FName NotifyName);
	void OnInputActionWeaponSlot5__DelegateSignature(const struct FFGrenadeInfo& GrenadeInfo, bool ToggleWidget);
	void OnInterrupted_1669EBB84AC1B94C5912A58629E5AA97(class FName NotifyName);
	void OnInterrupted_33C67341434F3CB91CA39A8F029F3A4C(class FName NotifyName);
	void OnInterrupted_6066947F49F379D3D0B8DC9F7EFC6D60(class FName NotifyName);
	void OnInterrupted_656C0E4D428A7045BFE53F85725725BD(class FName NotifyName);
	void OnInterrupted_65893BD6430BE4F65A2F4CACCA44AF05(class FName NotifyName);
	void OnInterrupted_675B9AAA4F60EF91AD36C191E4A47DF2(class FName NotifyName);
	void OnInterrupted_8DF1166C4911BA8C088AFAA5F2BCCA70(class FName NotifyName);
	void OnInterrupted_8E6CCF18441D865B51ED2EB5C2966332(class FName NotifyName);
	void OnInterrupted_E2592D914BA5B2B1DFAA76849084B433(class FName NotifyName);
	void OnInterrupted_E9C8ADBA45339B324A1D5587B37FE9FF(class FName NotifyName);
	void OnLoaded_1EDA011740E46022603AA282A7671A6C(class UObject* Loaded);
	void OnLoaded_425B03D44FA2BFF24289B3B238542A45(class UObject* Loaded);
	void OnLoaded_47F51BD74828EE2EFD69F8A8FC71A473(class UObject* Loaded);
	void OnLoaded_6850128E42CC1EF1A78BEB9A2DA3F79D(class UObject* Loaded);
	void OnLoaded_781A12FE42B264CEC81795AFA669B632(class UObject* Loaded);
	void OnLoaded_823A6EE14AB3086EF869EFB09215CBEA(class UObject* Loaded);
	void OnLoaded_8A68070B435D0E0BF597D8A571E40D2C(class UObject* Loaded);
	void OnLoaded_8E4976244743D1493EBFE487E981899F(class UObject* Loaded);
	void OnLoaded_BE668B2A446983FF67E8FE94E91D9969(class UObject* Loaded);
	void OnLoaded_D78FD1D54DDDD45FF568D1B13D1E2F2E(class UObject* Loaded);
	void OnLoaded_F25D68804776B4FF53DB44ABD31E2B2F(class UObject* Loaded);
	void OnNotifyBegin_1669EBB84AC1B94C5912A58629E5AA97(class FName NotifyName);
	void OnNotifyBegin_33C67341434F3CB91CA39A8F029F3A4C(class FName NotifyName);
	void OnNotifyBegin_6066947F49F379D3D0B8DC9F7EFC6D60(class FName NotifyName);
	void OnNotifyBegin_656C0E4D428A7045BFE53F85725725BD(class FName NotifyName);
	void OnNotifyBegin_65893BD6430BE4F65A2F4CACCA44AF05(class FName NotifyName);
	void OnNotifyBegin_675B9AAA4F60EF91AD36C191E4A47DF2(class FName NotifyName);
	void OnNotifyBegin_8DF1166C4911BA8C088AFAA5F2BCCA70(class FName NotifyName);
	void OnNotifyBegin_8E6CCF18441D865B51ED2EB5C2966332(class FName NotifyName);
	void OnNotifyBegin_E2592D914BA5B2B1DFAA76849084B433(class FName NotifyName);
	void OnNotifyBegin_E9C8ADBA45339B324A1D5587B37FE9FF(class FName NotifyName);
	void OnNotifyEnd_1669EBB84AC1B94C5912A58629E5AA97(class FName NotifyName);
	void OnNotifyEnd_33C67341434F3CB91CA39A8F029F3A4C(class FName NotifyName);
	void OnNotifyEnd_6066947F49F379D3D0B8DC9F7EFC6D60(class FName NotifyName);
	void OnNotifyEnd_656C0E4D428A7045BFE53F85725725BD(class FName NotifyName);
	void OnNotifyEnd_65893BD6430BE4F65A2F4CACCA44AF05(class FName NotifyName);
	void OnNotifyEnd_675B9AAA4F60EF91AD36C191E4A47DF2(class FName NotifyName);
	void OnNotifyEnd_8DF1166C4911BA8C088AFAA5F2BCCA70(class FName NotifyName);
	void OnNotifyEnd_8E6CCF18441D865B51ED2EB5C2966332(class FName NotifyName);
	void OnNotifyEnd_E2592D914BA5B2B1DFAA76849084B433(class FName NotifyName);
	void OnNotifyEnd_E9C8ADBA45339B324A1D5587B37FE9FF(class FName NotifyName);
	void OnRep_As_Chair_Parent();
	void OnRep_Throw_weapon();
	void OptimizeComponents();
	void OwningClientZombieWasKilled(const class AZombie_C*& KilledZombie);
	void PhysicBlendIdle__FinishedFunc();
	void PhysicBlendIdle__UpdateFunc();
	void PlayerPersonalization();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Register_Melee_Damage();
	void ResetGrenadeInput();
	void ResetTimer();
	void ResetTimerExplosive();
	void Ressurect(const struct FVector& Param_Pos, const struct FRotator& Param_Rot, EWE_NewDeathScreenState Param_RessurectPlace);
	void ScoreTypeGrenade(uint8* ScoreGrenade);
	class UAnimMontage* Select_Melee_Anim();
	void SelectSkinMaterial();
	void ServerCraftStation(bool Param_IsInCraftStation);
	void ServerSetPlayerInCutscene(bool NewValue);
	void Set_Player_Location();
	void SetAiming(bool IsAim, bool FPS, bool NotReplicate);
	void SetAnimInstClassForServer();
	void SetCameraElevator();
	void SetSkeletalCloth(class USkinnedMeshComponent* SkeletalMesh, TSoftObjectPtr<class USkeletalMesh> NewMesh);
	void SetSprint(bool SprintActive);
	void SetStance(EStanceState NewStance);
	void SetWallOffsetAngle_Server(bool Param_BlockingHit, double Param_WeaponAngleToWall);
	void SitOnChairServer(class AActor* Hightlight, bool Param_Sit);
	void SpawnFakeGrenade(class UClass* GrenadeFake, class AActor* Target);
	struct FTimerHandle SpawnTrajectory(TDelegate<void()> Delegate);
	void StartTimerBeforeExplosive();
	void Throw_Equipped_Grenade(const struct FVector& Impulse, const struct FTransform& SpawnTransform, TSoftClassPtr<class UClass> Param_Class, double TimeGrenadeIn_Hand, bool TimerActivate, bool DestroyLevers, int32 Power);
	void Throw_grenade_server(const struct FVector& Impulse, const struct FTransform& Spawn_transform, double Time_Grenade_Handle_in_Hand, bool TimerActivate, bool DestroyLevers, int32 Power);
	void ThrowEquippedGrenadeMulti(const struct FVector& Impulse, const struct FTransform& SpawnTransform, double TimeGrenadeIn_Hand, bool TimerActivate, bool DestroyLevers, TSoftClassPtr<class UClass> Param_Class, int32 Power);
	void Timer_Activate_Grenade_Server();
	bool Update_Overlapping_House_Box();
	void UserConstructionScript();
	void WP_Aiming(bool Aim);
	void WP_GetAimCamera(class UCameraComponent** Param_Camera);
	void WP_LineTrace();
	void Zombie_Was_Killed(class AZombie_C*& KilledZombie);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SurvivalPlayer_V2_C">();
	}
	static class ASurvivalPlayer_V2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASurvivalPlayer_V2_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASurvivalPlayer_V2_C) == 0x000010, "Wrong alignment on ASurvivalPlayer_V2_C");
static_assert(sizeof(ASurvivalPlayer_V2_C) == 0x004DE0, "Wrong size on ASurvivalPlayer_V2_C");
static_assert(offsetof(ASurvivalPlayer_V2_C, UberGraphFrame_SurvivalPlayer_V2_C) == 0x004610, "Member 'ASurvivalPlayer_V2_C::UberGraphFrame_SurvivalPlayer_V2_C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FlowmapBrush_NPC) == 0x004618, "Member 'ASurvivalPlayer_V2_C::FlowmapBrush_NPC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BPC_Taunt) == 0x004620, "Member 'ASurvivalPlayer_V2_C::BPC_Taunt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, NS_CH_Ambient) == 0x004628, "Member 'ASurvivalPlayer_V2_C::NS_CH_Ambient' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, NS_CH_Garbage) == 0x004630, "Member 'ASurvivalPlayer_V2_C::NS_CH_Garbage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, NS_CH_Leaves) == 0x004638, "Member 'ASurvivalPlayer_V2_C::NS_CH_Leaves' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, IconComponent) == 0x004640, "Member 'ASurvivalPlayer_V2_C::IconComponent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, AnimationURO) == 0x004648, "Member 'ASurvivalPlayer_V2_C::AnimationURO' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BPC_TickIntervalController) == 0x004650, "Member 'ASurvivalPlayer_V2_C::BPC_TickIntervalController' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MotionBlur) == 0x004658, "Member 'ASurvivalPlayer_V2_C::MotionBlur' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PlayerCutsceneComponent) == 0x004660, "Member 'ASurvivalPlayer_V2_C::PlayerCutsceneComponent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, WP_Check_Source) == 0x004668, "Member 'ASurvivalPlayer_V2_C::WP_Check_Source' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, SphereProjectileNear) == 0x004670, "Member 'ASurvivalPlayer_V2_C::SphereProjectileNear' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MB_AimTimeline_Strength_9F3BD84C47A467CB33BF269C179C850E) == 0x004678, "Member 'ASurvivalPlayer_V2_C::MB_AimTimeline_Strength_9F3BD84C47A467CB33BF269C179C850E' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MB_AimTimeline__Direction_9F3BD84C47A467CB33BF269C179C850E) == 0x00467C, "Member 'ASurvivalPlayer_V2_C::MB_AimTimeline__Direction_9F3BD84C47A467CB33BF269C179C850E' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MB_AimTimeline) == 0x004680, "Member 'ASurvivalPlayer_V2_C::MB_AimTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PhysicBlendIdle_NewTrack_0_76D8F57447EA41D946F93F9F627BA0A0) == 0x004688, "Member 'ASurvivalPlayer_V2_C::PhysicBlendIdle_NewTrack_0_76D8F57447EA41D946F93F9F627BA0A0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PhysicBlendIdle__Direction_76D8F57447EA41D946F93F9F627BA0A0) == 0x00468C, "Member 'ASurvivalPlayer_V2_C::PhysicBlendIdle__Direction_76D8F57447EA41D946F93F9F627BA0A0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PhysicBlendIdle) == 0x004690, "Member 'ASurvivalPlayer_V2_C::PhysicBlendIdle' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Strength_Multiplyer) == 0x004698, "Member 'ASurvivalPlayer_V2_C::Strength_Multiplyer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, LocalHas_Movement_Input) == 0x0046A0, "Member 'ASurvivalPlayer_V2_C::LocalHas_Movement_Input' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, LOCALmOVEMENTtYPE) == 0x0046A1, "Member 'ASurvivalPlayer_V2_C::LOCALmOVEMENTtYPE' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Trajectory) == 0x0046A8, "Member 'ASurvivalPlayer_V2_C::Trajectory' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Skin_Material) == 0x0046B0, "Member 'ASurvivalPlayer_V2_C::Skin_Material' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Throw_Weapon) == 0x0046B8, "Member 'ASurvivalPlayer_V2_C::Throw_Weapon' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Throw_weapon_name) == 0x0046E8, "Member 'ASurvivalPlayer_V2_C::Throw_weapon_name' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BreathHolded) == 0x0046F8, "Member 'ASurvivalPlayer_V2_C::BreathHolded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BreathHoldValue) == 0x004700, "Member 'ASurvivalPlayer_V2_C::BreathHoldValue' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BreathActiveTimer) == 0x004708, "Member 'ASurvivalPlayer_V2_C::BreathActiveTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, LastHairMaterial) == 0x004710, "Member 'ASurvivalPlayer_V2_C::LastHairMaterial' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, NewVar_City_Ambient) == 0x004718, "Member 'ASurvivalPlayer_V2_C::NewVar_City_Ambient' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, City_Reverb) == 0x004720, "Member 'ASurvivalPlayer_V2_C::City_Reverb' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, ExplosiveItem) == 0x004728, "Member 'ASurvivalPlayer_V2_C::ExplosiveItem' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, GrenadeRSpawn) == 0x004730, "Member 'ASurvivalPlayer_V2_C::GrenadeRSpawn' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TimeGrenadeInHand) == 0x004738, "Member 'ASurvivalPlayer_V2_C::TimeGrenadeInHand' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Collision_Handling_Override) == 0x004740, "Member 'ASurvivalPlayer_V2_C::Collision_Handling_Override' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TimeHandleDrawTrajectory) == 0x004748, "Member 'ASurvivalPlayer_V2_C::TimeHandleDrawTrajectory' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, ActivateGrenadeWithTrajectory) == 0x004750, "Member 'ASurvivalPlayer_V2_C::ActivateGrenadeWithTrajectory' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Montage_to_Play) == 0x004758, "Member 'ASurvivalPlayer_V2_C::Montage_to_Play' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TimePressedLeftMouse) == 0x004760, "Member 'ASurvivalPlayer_V2_C::TimePressedLeftMouse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TimePressed) == 0x004768, "Member 'ASurvivalPlayer_V2_C::TimePressed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, DelayThrow) == 0x004769, "Member 'ASurvivalPlayer_V2_C::DelayThrow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, DelayGrenade) == 0x004770, "Member 'ASurvivalPlayer_V2_C::DelayGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, InterruptedThrowAnim) == 0x004778, "Member 'ASurvivalPlayer_V2_C::InterruptedThrowAnim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, GrenadeKeyDown) == 0x004779, "Member 'ASurvivalPlayer_V2_C::GrenadeKeyDown' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FastThrowGrenade) == 0x00477A, "Member 'ASurvivalPlayer_V2_C::FastThrowGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FakeGrenade) == 0x004780, "Member 'ASurvivalPlayer_V2_C::FakeGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, ThrowableInfo) == 0x004788, "Member 'ASurvivalPlayer_V2_C::ThrowableInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, CurrentState) == 0x004AD0, "Member 'ASurvivalPlayer_V2_C::CurrentState' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Initial_Player_State) == 0x004AD1, "Member 'ASurvivalPlayer_V2_C::Initial_Player_State' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Anim_Ref) == 0x004AD8, "Member 'ASurvivalPlayer_V2_C::Anim_Ref' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Do_Debug_) == 0x004AE0, "Member 'ASurvivalPlayer_V2_C::Do_Debug_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Player_Elevation) == 0x004AE8, "Member 'ASurvivalPlayer_V2_C::Player_Elevation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MinVertigoElevation) == 0x004AF0, "Member 'ASurvivalPlayer_V2_C::MinVertigoElevation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, IsVertigo_) == 0x004AF8, "Member 'ASurvivalPlayer_V2_C::IsVertigo_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, ExperementingVertigo) == 0x004AF9, "Member 'ASurvivalPlayer_V2_C::ExperementingVertigo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, VertigoEndTrace_Z_only_) == 0x004B00, "Member 'ASurvivalPlayer_V2_C::VertigoEndTrace_Z_only_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, VertigoLineTrace_Debug_) == 0x004B18, "Member 'ASurvivalPlayer_V2_C::VertigoLineTrace_Debug_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, EdgeFrontForward) == 0x004B19, "Member 'ASurvivalPlayer_V2_C::EdgeFrontForward' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, EdgeLeft) == 0x004B1A, "Member 'ASurvivalPlayer_V2_C::EdgeLeft' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, EdgeBack) == 0x004B1B, "Member 'ASurvivalPlayer_V2_C::EdgeBack' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, EdgeRight) == 0x004B1C, "Member 'ASurvivalPlayer_V2_C::EdgeRight' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Player_Evalation) == 0x004B20, "Member 'ASurvivalPlayer_V2_C::Player_Evalation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MinVertigoEvaltion) == 0x004B28, "Member 'ASurvivalPlayer_V2_C::MinVertigoEvaltion' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MaxVertigo) == 0x004B30, "Member 'ASurvivalPlayer_V2_C::MaxVertigo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODBreathingDefault_0) == 0x004B38, "Member 'ASurvivalPlayer_V2_C::FMODBreathingDefault_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODHealthBreathing) == 0x004B40, "Member 'ASurvivalPlayer_V2_C::FMODHealthBreathing' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODStaminaLow) == 0x004B48, "Member 'ASurvivalPlayer_V2_C::FMODStaminaLow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODNearProjectile) == 0x004B50, "Member 'ASurvivalPlayer_V2_C::FMODNearProjectile' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODVertigo) == 0x004B58, "Member 'ASurvivalPlayer_V2_C::FMODVertigo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODBreathingCrouch) == 0x004B60, "Member 'ASurvivalPlayer_V2_C::FMODBreathingCrouch' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventBreathingCrouch) == 0x004B68, "Member 'ASurvivalPlayer_V2_C::FModEventBreathingCrouch' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventBreathingStamina) == 0x004B70, "Member 'ASurvivalPlayer_V2_C::FModEventBreathingStamina' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventBreathingHealth) == 0x004B78, "Member 'ASurvivalPlayer_V2_C::FModEventBreathingHealth' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventDefaultBreathing) == 0x004B80, "Member 'ASurvivalPlayer_V2_C::FModEventDefaultBreathing' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventNearProjectile) == 0x004B88, "Member 'ASurvivalPlayer_V2_C::FModEventNearProjectile' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FMODBreathingAim) == 0x004B90, "Member 'ASurvivalPlayer_V2_C::FMODBreathingAim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventBreathingAim) == 0x004B98, "Member 'ASurvivalPlayer_V2_C::FModEventBreathingAim' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FModEventBreathingVertigo) == 0x004BA0, "Member 'ASurvivalPlayer_V2_C::FModEventBreathingVertigo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, CurrentPlayerFOV) == 0x004BA8, "Member 'ASurvivalPlayer_V2_C::CurrentPlayerFOV' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, FOVAimGrenade) == 0x004BB0, "Member 'ASurvivalPlayer_V2_C::FOVAimGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, LeverDestroy) == 0x004BB8, "Member 'ASurvivalPlayer_V2_C::LeverDestroy' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Explosion) == 0x004BC0, "Member 'ASurvivalPlayer_V2_C::Explosion' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, As_Explosive_Item) == 0x004BC8, "Member 'ASurvivalPlayer_V2_C::As_Explosive_Item' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, WeaponAngleToWall) == 0x004BD0, "Member 'ASurvivalPlayer_V2_C::WeaponAngleToWall' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BlockingHit) == 0x004BD8, "Member 'ASurvivalPlayer_V2_C::BlockingHit' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Ambient_Hub) == 0x004BE0, "Member 'ASurvivalPlayer_V2_C::Ambient_Hub' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, SpawnInHub) == 0x004BE8, "Member 'ASurvivalPlayer_V2_C::SpawnInHub' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BP_LinearMotionBlurCage) == 0x004BF0, "Member 'ASurvivalPlayer_V2_C::BP_LinearMotionBlurCage' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, AimGrenadePressed) == 0x004BF8, "Member 'ASurvivalPlayer_V2_C::AimGrenadePressed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, RememberStandingCameraMode) == 0x004BFC, "Member 'ASurvivalPlayer_V2_C::RememberStandingCameraMode' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, RememberScope) == 0x004C08, "Member 'ASurvivalPlayer_V2_C::RememberScope' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, NeedToDelete_RememberScoping) == 0x004C10, "Member 'ASurvivalPlayer_V2_C::NeedToDelete_RememberScoping' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, City_Abandoned) == 0x004C18, "Member 'ASurvivalPlayer_V2_C::City_Abandoned' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Gravity_Scale_Default) == 0x004C20, "Member 'ASurvivalPlayer_V2_C::Gravity_Scale_Default' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, GrenadeLMB) == 0x004C24, "Member 'ASurvivalPlayer_V2_C::GrenadeLMB' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, GrenadeRMB) == 0x004C25, "Member 'ASurvivalPlayer_V2_C::GrenadeRMB' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, BlockGrenade) == 0x004C26, "Member 'ASurvivalPlayer_V2_C::BlockGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PowerThrowGrenade) == 0x004C28, "Member 'ASurvivalPlayer_V2_C::PowerThrowGrenade' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TimePressedRightMouse) == 0x004C30, "Member 'ASurvivalPlayer_V2_C::TimePressedRightMouse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, OnInputActionWeaponSlot5) == 0x004C38, "Member 'ASurvivalPlayer_V2_C::OnInputActionWeaponSlot5' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TimerExplosive) == 0x004C48, "Member 'ASurvivalPlayer_V2_C::TimerExplosive' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, RingOut) == 0x004C50, "Member 'ASurvivalPlayer_V2_C::RingOut' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, IsLeftTilt) == 0x004C51, "Member 'ASurvivalPlayer_V2_C::IsLeftTilt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, DefaultLeftTilt) == 0x004C58, "Member 'ASurvivalPlayer_V2_C::DefaultLeftTilt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, LeftTilt) == 0x004C70, "Member 'ASurvivalPlayer_V2_C::LeftTilt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, RightTilt) == 0x004C88, "Member 'ASurvivalPlayer_V2_C::RightTilt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, ATPCLocObject) == 0x004CA0, "Member 'ASurvivalPlayer_V2_C::ATPCLocObject' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PlayerInCutscene) == 0x004CA8, "Member 'ASurvivalPlayer_V2_C::PlayerInCutscene' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, HipFireAlpha) == 0x004CB0, "Member 'ASurvivalPlayer_V2_C::HipFireAlpha' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, InHipFire) == 0x004CB8, "Member 'ASurvivalPlayer_V2_C::InHipFire' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, RotOnHipFire) == 0x004CC0, "Member 'ASurvivalPlayer_V2_C::RotOnHipFire' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TargetTilt) == 0x004CD8, "Member 'ASurvivalPlayer_V2_C::TargetTilt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, TiltInterpSpeed) == 0x004CF0, "Member 'ASurvivalPlayer_V2_C::TiltInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, CurrentTilt) == 0x004CF8, "Member 'ASurvivalPlayer_V2_C::CurrentTilt' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, GPSOrigRot) == 0x004D10, "Member 'ASurvivalPlayer_V2_C::GPSOrigRot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, GPSLocOffset) == 0x004D28, "Member 'ASurvivalPlayer_V2_C::GPSLocOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, InitialCutscene) == 0x004D40, "Member 'ASurvivalPlayer_V2_C::InitialCutscene' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Char_Yaw) == 0x004D48, "Member 'ASurvivalPlayer_V2_C::Char_Yaw' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, PrevLocation) == 0x004D50, "Member 'ASurvivalPlayer_V2_C::PrevLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, Komnata_Stages) == 0x004D68, "Member 'ASurvivalPlayer_V2_C::Komnata_Stages' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MeleeTimer) == 0x004DB8, "Member 'ASurvivalPlayer_V2_C::MeleeTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, MeleeCooldown) == 0x004DC0, "Member 'ASurvivalPlayer_V2_C::MeleeCooldown' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, As_Chair_Parent) == 0x004DC8, "Member 'ASurvivalPlayer_V2_C::As_Chair_Parent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_V2_C, IsInCraftStation) == 0x004DD0, "Member 'ASurvivalPlayer_V2_C::IsInCraftStation' has a wrong offset!");

}

