#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeneralChanceByType

#include "Basic.hpp"

#include "ELootTypes_structs.hpp"
#include "ItemIdGenerateChance_structs.hpp"
#include "SlotRarity_structs.hpp"
#include "CountChance_structs.hpp"


namespace SDK
{

// UserDefinedStruct GeneralChanceByType.GeneralChanceByType
// 0x0030 (0x0030 - 0x0000)
struct FGeneralChanceByType final
{
public:
	ELootTypes                                    Type_14_1F743DAF446B4129E21A6390926D1028;          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Chance_5_F505844C4E1E6E15E53E3792C8367527;         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FItemIdGenerateChance>          Items_9_A3FE33834021EDAB49CDF196E43A1FDA;          // 0x0008(0x0010)(Edit, BlueprintVisible)
	ESlotRarity                                   Tier_31_3F4797974AD54994F6638BB20977268C;          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GenerateRandomonType_16_006F231A43BF62F6CDF5CE9AEC624E74; // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCountChance>                   CountChanceRandom_28_6AAFFEB84D92C29622CF18A455179A39; // 0x0020(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(FGeneralChanceByType) == 0x000008, "Wrong alignment on FGeneralChanceByType");
static_assert(sizeof(FGeneralChanceByType) == 0x000030, "Wrong size on FGeneralChanceByType");
static_assert(offsetof(FGeneralChanceByType, Type_14_1F743DAF446B4129E21A6390926D1028) == 0x000000, "Member 'FGeneralChanceByType::Type_14_1F743DAF446B4129E21A6390926D1028' has a wrong offset!");
static_assert(offsetof(FGeneralChanceByType, Chance_5_F505844C4E1E6E15E53E3792C8367527) == 0x000004, "Member 'FGeneralChanceByType::Chance_5_F505844C4E1E6E15E53E3792C8367527' has a wrong offset!");
static_assert(offsetof(FGeneralChanceByType, Items_9_A3FE33834021EDAB49CDF196E43A1FDA) == 0x000008, "Member 'FGeneralChanceByType::Items_9_A3FE33834021EDAB49CDF196E43A1FDA' has a wrong offset!");
static_assert(offsetof(FGeneralChanceByType, Tier_31_3F4797974AD54994F6638BB20977268C) == 0x000018, "Member 'FGeneralChanceByType::Tier_31_3F4797974AD54994F6638BB20977268C' has a wrong offset!");
static_assert(offsetof(FGeneralChanceByType, GenerateRandomonType_16_006F231A43BF62F6CDF5CE9AEC624E74) == 0x000019, "Member 'FGeneralChanceByType::GenerateRandomonType_16_006F231A43BF62F6CDF5CE9AEC624E74' has a wrong offset!");
static_assert(offsetof(FGeneralChanceByType, CountChanceRandom_28_6AAFFEB84D92C29622CF18A455179A39) == 0x000020, "Member 'FGeneralChanceByType::CountChanceRandom_28_6AAFFEB84D92C29622CF18A455179A39' has a wrong offset!");

}

