#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Quest

#include "Basic.hpp"

#include "BP_Quest_classes.hpp"
#include "BP_Quest_parameters.hpp"


namespace SDK
{

// Function BP_Quest.BP_Quest_C.ActivateQuest
// (BlueprintCallable, BlueprintEvent)

void ABP_Quest_C::ActivateQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Quest_C", "ActivateQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Quest.BP_Quest_C.ConstructRootObjectiveCollection
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ObjCollection_C*              Param_RootObjectiveCollection                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Quest_C::ConstructRootObjectiveCollection(class UBP_ObjCollection_C** Param_RootObjectiveCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Quest_C", "ConstructRootObjectiveCollection");

	Params::BP_Quest_C_ConstructRootObjectiveCollection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_RootObjectiveCollection != nullptr)
		*Param_RootObjectiveCollection = Parms.Param_RootObjectiveCollection;
}


// Function BP_Quest.BP_Quest_C.ExecuteUbergraph_BP_Quest
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Quest_C::ExecuteUbergraph_BP_Quest(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Quest_C", "ExecuteUbergraph_BP_Quest");

	Params::BP_Quest_C_ExecuteUbergraph_BP_Quest Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Quest.BP_Quest_C.OnActivated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_Objective_C*                  Param_RootObjectiveCollection                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Quest_C::OnActivated__DelegateSignature(class UBP_Objective_C* Param_RootObjectiveCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Quest_C", "OnActivated__DelegateSignature");

	Params::BP_Quest_C_OnActivated__DelegateSignature Parms{};

	Parms.Param_RootObjectiveCollection = Param_RootObjectiveCollection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Quest.BP_Quest_C.PopulateObjectives
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ObjCollection_C*              RootObjCollection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Quest_C::PopulateObjectives(class UBP_ObjCollection_C* RootObjCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Quest_C", "PopulateObjectives");

	Params::BP_Quest_C_PopulateObjectives Parms{};

	Parms.RootObjCollection = RootObjCollection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Quest.BP_Quest_C.GetRootObjectiveCollection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UBP_ObjCollection_C*              RootObjCollection                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Quest_C::GetRootObjectiveCollection(class UBP_ObjCollection_C** RootObjCollection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Quest_C", "GetRootObjectiveCollection");

	Params::BP_Quest_C_GetRootObjectiveCollection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RootObjCollection != nullptr)
		*RootObjCollection = Parms.RootObjCollection;
}

}

