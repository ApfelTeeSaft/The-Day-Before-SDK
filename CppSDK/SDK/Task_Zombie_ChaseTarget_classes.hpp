#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Task_Zombie_ChaseTarget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Task_Zombie_ChaseTarget.Task_Zombie_ChaseTarget_C
// 0x0098 (0x0140 - 0x00A8)
class UTask_Zombie_ChaseTarget_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 Target;                                            // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 StopRun;                                           // 0x00D8(0x0028)(Edit, BlueprintVisible)
	class AZombie_C*                              Zombie;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaitingTimer;                                      // 0x0108(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 Attack;                                            // 0x0110(0x0028)(Edit, BlueprintVisible)
	class UAIMovementComponent_C*                 AIMovementComp;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void Can_Start_Running(bool* StartRunning);
	void Continue_Chasing();
	void ExecuteUbergraph_Task_Zombie_ChaseTarget(int32 EntryPoint);
	void IsAttackSetted(bool* AttackIsSetted);
	void OnEndAttack();
	void OnFinishTask();
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void RestartMovement();
	void WaitTillStart();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Task_Zombie_ChaseTarget_C">();
	}
	static class UTask_Zombie_ChaseTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTask_Zombie_ChaseTarget_C>();
	}
};
static_assert(alignof(UTask_Zombie_ChaseTarget_C) == 0x000008, "Wrong alignment on UTask_Zombie_ChaseTarget_C");
static_assert(sizeof(UTask_Zombie_ChaseTarget_C) == 0x000140, "Wrong size on UTask_Zombie_ChaseTarget_C");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, UberGraphFrame) == 0x0000A8, "Member 'UTask_Zombie_ChaseTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, Target) == 0x0000B0, "Member 'UTask_Zombie_ChaseTarget_C::Target' has a wrong offset!");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, StopRun) == 0x0000D8, "Member 'UTask_Zombie_ChaseTarget_C::StopRun' has a wrong offset!");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, Zombie) == 0x000100, "Member 'UTask_Zombie_ChaseTarget_C::Zombie' has a wrong offset!");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, WaitingTimer) == 0x000108, "Member 'UTask_Zombie_ChaseTarget_C::WaitingTimer' has a wrong offset!");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, Attack) == 0x000110, "Member 'UTask_Zombie_ChaseTarget_C::Attack' has a wrong offset!");
static_assert(offsetof(UTask_Zombie_ChaseTarget_C, AIMovementComp) == 0x000138, "Member 'UTask_Zombie_ChaseTarget_C::AIMovementComp' has a wrong offset!");

}

