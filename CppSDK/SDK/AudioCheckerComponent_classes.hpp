#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioCheckerComponent

#include "Basic.hpp"

#include "S_AudioCheckStruct_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AudioCheckerComponent.AudioCheckerComponent_C
// 0x0098 (0x0138 - 0x00A0)
class UAudioCheckerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FTimerHandle                           CullDistanceTimer;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UFMODAudioComponent*>            PlayingSoundArray;                                 // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         TimerFrequency;                                    // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFMODEvent*>                     FMODEventArray;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                DistanceArray;                                     // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UFMODEvent*, struct FS_AudioCheckStruct> Data;                                              // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void CheckCullDistance();
	void ExecuteUbergraph_AudioCheckerComponent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RegisterSoftSound(TSoftObjectPtr<class UFMODEvent>& FMODEvent, double CullDistance);
	void RegisterSound(class UFMODEvent*& FMODEvent, double CullDistance);
	void UnregisterSoftSound(TSoftObjectPtr<class UFMODEvent>& FMODEvent);
	void UnregisterSound(class UFMODEvent*& FMODEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AudioCheckerComponent_C">();
	}
	static class UAudioCheckerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioCheckerComponent_C>();
	}
};
static_assert(alignof(UAudioCheckerComponent_C) == 0x000008, "Wrong alignment on UAudioCheckerComponent_C");
static_assert(sizeof(UAudioCheckerComponent_C) == 0x000138, "Wrong size on UAudioCheckerComponent_C");
static_assert(offsetof(UAudioCheckerComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UAudioCheckerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAudioCheckerComponent_C, CullDistanceTimer) == 0x0000A8, "Member 'UAudioCheckerComponent_C::CullDistanceTimer' has a wrong offset!");
static_assert(offsetof(UAudioCheckerComponent_C, PlayingSoundArray) == 0x0000B0, "Member 'UAudioCheckerComponent_C::PlayingSoundArray' has a wrong offset!");
static_assert(offsetof(UAudioCheckerComponent_C, TimerFrequency) == 0x0000C0, "Member 'UAudioCheckerComponent_C::TimerFrequency' has a wrong offset!");
static_assert(offsetof(UAudioCheckerComponent_C, FMODEventArray) == 0x0000C8, "Member 'UAudioCheckerComponent_C::FMODEventArray' has a wrong offset!");
static_assert(offsetof(UAudioCheckerComponent_C, DistanceArray) == 0x0000D8, "Member 'UAudioCheckerComponent_C::DistanceArray' has a wrong offset!");
static_assert(offsetof(UAudioCheckerComponent_C, Data) == 0x0000E8, "Member 'UAudioCheckerComponent_C::Data' has a wrong offset!");

}

