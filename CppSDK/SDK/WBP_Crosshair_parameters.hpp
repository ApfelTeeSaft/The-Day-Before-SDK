#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Crosshair

#include "Basic.hpp"

#include "BPE_Weapon_Type_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_Crosshair.WBP_Crosshair_C.Aiming
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_C_Aiming final
{
public:
	bool                                          Aim;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_Aiming) == 0x000001, "Wrong alignment on WBP_Crosshair_C_Aiming");
static_assert(sizeof(WBP_Crosshair_C_Aiming) == 0x000001, "Wrong size on WBP_Crosshair_C_Aiming");
static_assert(offsetof(WBP_Crosshair_C_Aiming, Aim) == 0x000000, "Member 'WBP_Crosshair_C_Aiming::Aim' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.ExecuteUbergraph_WBP_Crosshair
// 0x0180 (0x0180 - 0x0000)
struct WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(double ReloadDuration)>        K2Node_CreateDelegate_OutputDelegate_1;            // 0x004C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_Duration;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Aim_1;                          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool Aim)>                     K2Node_CreateDelegate_OutputDelegate_2;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Crosshair_C>      K2Node_DynamicCast_AsBPI_Crosshair;                // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Shoot_Result;                             // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x009C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Crosshair_C>      K2Node_DynamicCast_AsBPI_Crosshair_1;              // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetCrosshaierByWeaponType_CrosshairWidget; // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Aim;                            // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              K2Node_CustomEvent_WeaponType;                     // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x5];                                       // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetCrosshaierByWeaponType_CrosshairWidget_1; // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Crosshair_C>      K2Node_DynamicCast_AsBPI_Crosshair_2;              // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Crosshair_C>      K2Node_DynamicCast_AsBPI_Crosshair_3;              // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0114(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Crosshair_C>      K2Node_DynamicCast_AsBPI_Crosshair_4;              // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_TimerExistsHandle_ReturnValue;         // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair) == 0x000008, "Wrong alignment on WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair");
static_assert(sizeof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair) == 0x000180, "Wrong size on WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, EntryPoint) == 0x000000, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsSurvival_Player) == 0x000028, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000038, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000048, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CreateDelegate_OutputDelegate_1) == 0x00004C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CustomEvent_Duration) == 0x000060, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CustomEvent_Duration' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000068, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CustomEvent_Aim_1) == 0x000070, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CustomEvent_Aim_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CreateDelegate_OutputDelegate_2) == 0x000074, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsBPI_Crosshair) == 0x000088, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsBPI_Crosshair' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Shoot_Result) == 0x000099, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Shoot_Result' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CreateDelegate_OutputDelegate_3) == 0x00009C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsBPI_Crosshair_1) == 0x0000B0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsBPI_Crosshair_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess_2) == 0x0000C0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetCrosshaierByWeaponType_CrosshairWidget) == 0x0000C8, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetCrosshaierByWeaponType_CrosshairWidget' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Not_PreBool_ReturnValue) == 0x0000D0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CustomEvent_Aim) == 0x0000D1, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CustomEvent_Aim' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_CustomEvent_WeaponType) == 0x0000D2, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_CustomEvent_WeaponType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_GetCrosshaierByWeaponType_CrosshairWidget_1) == 0x0000D8, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_GetCrosshaierByWeaponType_CrosshairWidget_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000E0, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_IsDesignTime) == 0x0000E1, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsBPI_Crosshair_2) == 0x0000E8, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsBPI_Crosshair_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess_3) == 0x0000F8, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsBPI_Crosshair_3) == 0x000100, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsBPI_Crosshair_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess_4) == 0x000110, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_MyGeometry) == 0x000114, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_Event_InDeltaTime) == 0x00014C, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_AsBPI_Crosshair_4) == 0x000150, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_AsBPI_Crosshair_4' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, K2Node_DynamicCast_bSuccess_5) == 0x000160, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000168, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Not_PreBool_ReturnValue_2) == 0x000170, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_K2_TimerExistsHandle_ReturnValue) == 0x000171, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_K2_TimerExistsHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_BooleanOR_ReturnValue) == 0x000172, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Not_PreBool_ReturnValue_3) == 0x000173, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_BooleanAND_ReturnValue) == 0x000174, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000178, "Member 'WBP_Crosshair_C_ExecuteUbergraph_WBP_Crosshair::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.GetCrosshaierByWeaponType
// 0x0010 (0x0010 - 0x0000)
struct WBP_Crosshair_C_GetCrosshaierByWeaponType final
{
public:
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CrosshairWidget;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_GetCrosshaierByWeaponType) == 0x000008, "Wrong alignment on WBP_Crosshair_C_GetCrosshaierByWeaponType");
static_assert(sizeof(WBP_Crosshair_C_GetCrosshaierByWeaponType) == 0x000010, "Wrong size on WBP_Crosshair_C_GetCrosshaierByWeaponType");
static_assert(offsetof(WBP_Crosshair_C_GetCrosshaierByWeaponType, WeaponType) == 0x000000, "Member 'WBP_Crosshair_C_GetCrosshaierByWeaponType::WeaponType' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_GetCrosshaierByWeaponType, CrosshairWidget) == 0x000008, "Member 'WBP_Crosshair_C_GetCrosshaierByWeaponType::CrosshairWidget' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_Crosshair_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_Crosshair_C_PreConstruct");
static_assert(sizeof(WBP_Crosshair_C_PreConstruct) == 0x000001, "Wrong size on WBP_Crosshair_C_PreConstruct");
static_assert(offsetof(WBP_Crosshair_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_Crosshair_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.Reloading
// 0x0008 (0x0008 - 0x0000)
struct WBP_Crosshair_C_Reloading final
{
public:
	double                                        Duration;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_Reloading) == 0x000008, "Wrong alignment on WBP_Crosshair_C_Reloading");
static_assert(sizeof(WBP_Crosshair_C_Reloading) == 0x000008, "Wrong size on WBP_Crosshair_C_Reloading");
static_assert(offsetof(WBP_Crosshair_C_Reloading, Duration) == 0x000000, "Member 'WBP_Crosshair_C_Reloading::Duration' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.SetReloadingProgress
// 0x0010 (0x0010 - 0x0000)
struct WBP_Crosshair_C_SetReloadingProgress final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_SetReloadingProgress) == 0x000008, "Wrong alignment on WBP_Crosshair_C_SetReloadingProgress");
static_assert(sizeof(WBP_Crosshair_C_SetReloadingProgress) == 0x000010, "Wrong size on WBP_Crosshair_C_SetReloadingProgress");
static_assert(offsetof(WBP_Crosshair_C_SetReloadingProgress, Percent) == 0x000000, "Member 'WBP_Crosshair_C_SetReloadingProgress::Percent' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_SetReloadingProgress, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000008, "Member 'WBP_Crosshair_C_SetReloadingProgress::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_Crosshair_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_Tick) == 0x000004, "Wrong alignment on WBP_Crosshair_C_Tick");
static_assert(sizeof(WBP_Crosshair_C_Tick) == 0x00003C, "Wrong size on WBP_Crosshair_C_Tick");
static_assert(offsetof(WBP_Crosshair_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_Crosshair_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_Crosshair_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_Crosshair.WBP_Crosshair_C.TrailerAim
// 0x0002 (0x0002 - 0x0000)
struct WBP_Crosshair_C_TrailerAim final
{
public:
	bool                                          Aim;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              WeaponType;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_Crosshair_C_TrailerAim) == 0x000001, "Wrong alignment on WBP_Crosshair_C_TrailerAim");
static_assert(sizeof(WBP_Crosshair_C_TrailerAim) == 0x000002, "Wrong size on WBP_Crosshair_C_TrailerAim");
static_assert(offsetof(WBP_Crosshair_C_TrailerAim, Aim) == 0x000000, "Member 'WBP_Crosshair_C_TrailerAim::Aim' has a wrong offset!");
static_assert(offsetof(WBP_Crosshair_C_TrailerAim, WeaponType) == 0x000001, "Member 'WBP_Crosshair_C_TrailerAim::WeaponType' has a wrong offset!");

}

