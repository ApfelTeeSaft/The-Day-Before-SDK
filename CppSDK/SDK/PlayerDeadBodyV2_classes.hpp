#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerDeadBodyV2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EDeadBodyState_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EDeadBodyEnvType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PlayerDeadBodyV2.PlayerDeadBodyV2_C
// 0x0120 (0x03B0 - 0x0290)
class APlayerDeadBodyV2_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       WaterDetectionSphere;                              // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 beard;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 HelmetSlot;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ArmorSlot;                                         // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PantsSlot;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BackpackSlot;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 OuterwearSlot;                                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair1;                                             // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair2;                                             // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultLifeTime;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   BoneName__Pelvis_;                                 // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALootPoint_C*                           LootPoint;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   ProfileName;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EBPE_Weapon_Type, double>                Impulses;                                          // 0x0308(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FTimerHandle                           DestroyBodyTimerHamdle;                            // 0x0358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  Player;                                            // 0x0360(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      SurvivalOwner;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PhysicsCorrectionTimer;                            // 0x0370(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RagdollVelocity;                                   // 0x0378(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDeadBodyState                                CurrentState;                                      // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDeadBodyEnvType                              CurrentEnvType;                                    // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_392[0x2];                                      // 0x0392(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName__Spine_1_;                                // 0x0394(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaterZ;                                            // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WaterBoneActiveCount;                              // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Female;                                            // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateDeadBody(const TArray<struct FDropItemEntry>& DroppedItems, const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Param_Player, class APawn* Killer, bool RadialDamage, bool Animed);
	void ApplyPhysics(const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Killer, bool RadialDamage);
	void ApplyWaterFloatForce();
	void BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__PlayerDeadBodyV2_WaterDetectionSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BodyWaterForce(class FName InSocketName, double Force);
	void CopyMaterials(class USkeletalMeshComponent* TargetMesh, class USkeletalMesh* NewMesh);
	void CopyMeshes(class APawn* Param_Player);
	void CopySkeletal(class USkeletalMeshComponent* TargetSkeletal, class USkeletalMeshComponent* NewSkeletal);
	void CopySkeletals(TArray<class USkeletalMeshComponent*>& TargetSkeletal, TArray<class USkeletalMeshComponent*>& NewSkeletal);
	void Create_Loot(TArray<struct FDropItemEntry>& DroppedItems, class APawn* Param_Player, int32 B);
	void CreateDropBox(class APawn* Param_Player);
	void DelayedPhysics(const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Killer, bool RadialDamage, bool Animed);
	void DestroyBody();
	void Die(TArray<struct FDropItemEntry>& DroppedItems, const struct FVector& HitVector, const struct FVector& OnDeathVelocity, class FName HitBoneName, class APawn* Param_Player, class APawn* Killer, bool RadialDamage, bool Animed);
	void Enable_SMTicks(bool Enable);
	void ExecuteUbergraph_PlayerDeadBodyV2(int32 EntryPoint);
	void GetBoneName__Pelvis_(class FName* BoneName);
	void GetImpulse(class APawn* Killer, double* Impulse);
	void LimitPhysicsVelocity(const struct FVector& Velocity, struct FVector* ResultVelocity);
	void OnEnvTypeChanged();
	void OnStateChanged();
	void OnToggleDeadBodyTimer(bool NewState);
	void Phase_Shift(class AActor* Param_Player);
	void PhysicsCorrection();
	void ReceiveBeginPlay();
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void SetCurrentEnvType(EDeadBodyEnvType NewEnvType);
	void SetCurrentState(EDeadBodyState NewState);
	void TakeOffClothes(class FName Param_Name);
	void TakeOffClothesMulti(class FName Param_Name);
	void UpdateMeshView(class USkeletalMeshComponent* EquipmentSlot, class USkeletalMesh* NewMesh, class UMaterial* NewMaterial);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerDeadBodyV2_C">();
	}
	static class APlayerDeadBodyV2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APlayerDeadBodyV2_C>();
	}
};
static_assert(alignof(APlayerDeadBodyV2_C) == 0x000008, "Wrong alignment on APlayerDeadBodyV2_C");
static_assert(sizeof(APlayerDeadBodyV2_C) == 0x0003B0, "Wrong size on APlayerDeadBodyV2_C");
static_assert(offsetof(APlayerDeadBodyV2_C, UberGraphFrame) == 0x000290, "Member 'APlayerDeadBodyV2_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, WaterDetectionSphere) == 0x000298, "Member 'APlayerDeadBodyV2_C::WaterDetectionSphere' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, SkeletalMesh) == 0x0002A0, "Member 'APlayerDeadBodyV2_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, beard) == 0x0002A8, "Member 'APlayerDeadBodyV2_C::beard' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, HelmetSlot) == 0x0002B0, "Member 'APlayerDeadBodyV2_C::HelmetSlot' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, ArmorSlot) == 0x0002B8, "Member 'APlayerDeadBodyV2_C::ArmorSlot' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, PantsSlot) == 0x0002C0, "Member 'APlayerDeadBodyV2_C::PantsSlot' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, BackpackSlot) == 0x0002C8, "Member 'APlayerDeadBodyV2_C::BackpackSlot' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, OuterwearSlot) == 0x0002D0, "Member 'APlayerDeadBodyV2_C::OuterwearSlot' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, Hair1) == 0x0002D8, "Member 'APlayerDeadBodyV2_C::Hair1' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, Hair2) == 0x0002E0, "Member 'APlayerDeadBodyV2_C::Hair2' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, DefaultLifeTime) == 0x0002E8, "Member 'APlayerDeadBodyV2_C::DefaultLifeTime' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, BoneName__Pelvis_) == 0x0002F0, "Member 'APlayerDeadBodyV2_C::BoneName__Pelvis_' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, LootPoint) == 0x0002F8, "Member 'APlayerDeadBodyV2_C::LootPoint' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, ProfileName) == 0x000300, "Member 'APlayerDeadBodyV2_C::ProfileName' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, Impulses) == 0x000308, "Member 'APlayerDeadBodyV2_C::Impulses' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, DestroyBodyTimerHamdle) == 0x000358, "Member 'APlayerDeadBodyV2_C::DestroyBodyTimerHamdle' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, Player) == 0x000360, "Member 'APlayerDeadBodyV2_C::Player' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, SurvivalOwner) == 0x000368, "Member 'APlayerDeadBodyV2_C::SurvivalOwner' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, PhysicsCorrectionTimer) == 0x000370, "Member 'APlayerDeadBodyV2_C::PhysicsCorrectionTimer' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, RagdollVelocity) == 0x000378, "Member 'APlayerDeadBodyV2_C::RagdollVelocity' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, CurrentState) == 0x000390, "Member 'APlayerDeadBodyV2_C::CurrentState' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, CurrentEnvType) == 0x000391, "Member 'APlayerDeadBodyV2_C::CurrentEnvType' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, BoneName__Spine_1_) == 0x000394, "Member 'APlayerDeadBodyV2_C::BoneName__Spine_1_' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, WaterZ) == 0x0003A0, "Member 'APlayerDeadBodyV2_C::WaterZ' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, WaterBoneActiveCount) == 0x0003A8, "Member 'APlayerDeadBodyV2_C::WaterBoneActiveCount' has a wrong offset!");
static_assert(offsetof(APlayerDeadBodyV2_C, Female) == 0x0003AC, "Member 'APlayerDeadBodyV2_C::Female' has a wrong offset!");

}

