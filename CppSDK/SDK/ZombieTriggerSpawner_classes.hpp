#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZombieTriggerSpawner

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_AIType_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ZombieTriggerSpawner.ZombieTriggerSpawner_C
// 0x00A0 (0x0330 - 0x0290)
class AZombieTriggerSpawner_C final : public AActor
{
public:
	class USphereComponent*                       SpawnRadius;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          CleaningTrigger;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SpawnTrigger;                                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        SpawningRadius;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayBetweenSpawn;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BeginSpawnDelay;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnOnce_;                                        // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnWithChance_;                                  // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Chance;                                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AIType                                      AIType;                                            // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         SpawnedAIs;                                        // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         TypeIndex;                                         // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CountIndex;                                        // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnLoc;                                          // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SpawnRot;                                          // 0x0310(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         ZombieFullCount;                                   // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZombieCounter;                                     // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ZombieTriggerSpawner_C">();
	}
	static class AZombieTriggerSpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZombieTriggerSpawner_C>();
	}
};
static_assert(alignof(AZombieTriggerSpawner_C) == 0x000008, "Wrong alignment on AZombieTriggerSpawner_C");
static_assert(sizeof(AZombieTriggerSpawner_C) == 0x000330, "Wrong size on AZombieTriggerSpawner_C");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnRadius) == 0x000290, "Member 'AZombieTriggerSpawner_C::SpawnRadius' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, CleaningTrigger) == 0x000298, "Member 'AZombieTriggerSpawner_C::CleaningTrigger' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnTrigger) == 0x0002A0, "Member 'AZombieTriggerSpawner_C::SpawnTrigger' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, DefaultSceneRoot) == 0x0002A8, "Member 'AZombieTriggerSpawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawningRadius) == 0x0002B0, "Member 'AZombieTriggerSpawner_C::SpawningRadius' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, DelayBetweenSpawn) == 0x0002B8, "Member 'AZombieTriggerSpawner_C::DelayBetweenSpawn' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, BeginSpawnDelay) == 0x0002C0, "Member 'AZombieTriggerSpawner_C::BeginSpawnDelay' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnOnce_) == 0x0002C8, "Member 'AZombieTriggerSpawner_C::SpawnOnce_' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnWithChance_) == 0x0002C9, "Member 'AZombieTriggerSpawner_C::SpawnWithChance_' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, Chance) == 0x0002D0, "Member 'AZombieTriggerSpawner_C::Chance' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, AIType) == 0x0002D8, "Member 'AZombieTriggerSpawner_C::AIType' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnedAIs) == 0x0002E0, "Member 'AZombieTriggerSpawner_C::SpawnedAIs' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, TypeIndex) == 0x0002F0, "Member 'AZombieTriggerSpawner_C::TypeIndex' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, CountIndex) == 0x0002F4, "Member 'AZombieTriggerSpawner_C::CountIndex' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnLoc) == 0x0002F8, "Member 'AZombieTriggerSpawner_C::SpawnLoc' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, SpawnRot) == 0x000310, "Member 'AZombieTriggerSpawner_C::SpawnRot' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, ZombieFullCount) == 0x000328, "Member 'AZombieTriggerSpawner_C::ZombieFullCount' has a wrong offset!");
static_assert(offsetof(AZombieTriggerSpawner_C, ZombieCounter) == 0x00032C, "Member 'AZombieTriggerSpawner_C::ZombieCounter' has a wrong offset!");

}

