#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SurvPC

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "E_TabType_structs.hpp"
#include "DropItemEntry_structs.hpp"
#include "LootGeneratorType_structs.hpp"
#include "AISpawnZoneType_structs.hpp"
#include "LG2_LootRareType_structs.hpp"


namespace SDK::Params
{

// Function BPI_SurvPC.BPI_SurvPC_C.AddSkillPoint
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_AddSkillPoint final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_AddSkillPoint) == 0x000004, "Wrong alignment on BPI_SurvPC_C_AddSkillPoint");
static_assert(sizeof(BPI_SurvPC_C_AddSkillPoint) == 0x000008, "Wrong size on BPI_SurvPC_C_AddSkillPoint");
static_assert(offsetof(BPI_SurvPC_C_AddSkillPoint, Value) == 0x000000, "Member 'BPI_SurvPC_C_AddSkillPoint::Value' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_AddSkillPoint, Success) == 0x000004, "Member 'BPI_SurvPC_C_AddSkillPoint::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.AddXP
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_AddXP final
{
public:
	double                                        XP;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Sender;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BPI_SurvPC_C_AddXP) == 0x000008, "Wrong alignment on BPI_SurvPC_C_AddXP");
static_assert(sizeof(BPI_SurvPC_C_AddXP) == 0x000020, "Wrong size on BPI_SurvPC_C_AddXP");
static_assert(offsetof(BPI_SurvPC_C_AddXP, XP) == 0x000000, "Member 'BPI_SurvPC_C_AddXP::XP' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_AddXP, Sender) == 0x000008, "Member 'BPI_SurvPC_C_AddXP::Sender' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.BlockControlRotation
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_BlockControlRotation final
{
public:
	bool                                          SetBlock;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_BlockControlRotation) == 0x000001, "Wrong alignment on BPI_SurvPC_C_BlockControlRotation");
static_assert(sizeof(BPI_SurvPC_C_BlockControlRotation) == 0x000001, "Wrong size on BPI_SurvPC_C_BlockControlRotation");
static_assert(offsetof(BPI_SurvPC_C_BlockControlRotation, SetBlock) == 0x000000, "Member 'BPI_SurvPC_C_BlockControlRotation::SetBlock' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.CloseTabsWindow
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_CloseTabsWindow final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_CloseTabsWindow) == 0x000001, "Wrong alignment on BPI_SurvPC_C_CloseTabsWindow");
static_assert(sizeof(BPI_SurvPC_C_CloseTabsWindow) == 0x000001, "Wrong size on BPI_SurvPC_C_CloseTabsWindow");
static_assert(offsetof(BPI_SurvPC_C_CloseTabsWindow, Success) == 0x000000, "Member 'BPI_SurvPC_C_CloseTabsWindow::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.CreateContainerAtLocation
// 0x0078 (0x0078 - 0x0000)
struct BPI_SurvPC_C_CreateContainerAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELootGeneratorType                            GenericLootType;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CustomAsset;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   ContainerName;                                     // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FVector                                CustomOffset;                                      // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CustomMesh;                                        // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttachTo;                                          // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   SocketName;                                        // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Return;                                            // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_CreateContainerAtLocation) == 0x000008, "Wrong alignment on BPI_SurvPC_C_CreateContainerAtLocation");
static_assert(sizeof(BPI_SurvPC_C_CreateContainerAtLocation) == 0x000078, "Wrong size on BPI_SurvPC_C_CreateContainerAtLocation");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, Location) == 0x000000, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, GenericLootType) == 0x000018, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::GenericLootType' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, CustomAsset) == 0x000020, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::CustomAsset' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, ContainerName) == 0x000028, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::ContainerName' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, CustomOffset) == 0x000040, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::CustomOffset' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, CustomMesh) == 0x000058, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::CustomMesh' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, AttachTo) == 0x000060, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::AttachTo' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, SocketName) == 0x000068, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::SocketName' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerAtLocation, Return) == 0x000070, "Member 'BPI_SurvPC_C_CreateContainerAtLocation::Return' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.CreateContainerWithDrop
// 0x0058 (0x0058 - 0x0000)
struct BPI_SurvPC_C_CreateContainerWithDrop final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ContainerName;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                ContainerOffset;                                   // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDropItemEntry>                 DropItems;                                         // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_CreateContainerWithDrop) == 0x000008, "Wrong alignment on BPI_SurvPC_C_CreateContainerWithDrop");
static_assert(sizeof(BPI_SurvPC_C_CreateContainerWithDrop) == 0x000058, "Wrong size on BPI_SurvPC_C_CreateContainerWithDrop");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerWithDrop, Location) == 0x000000, "Member 'BPI_SurvPC_C_CreateContainerWithDrop::Location' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerWithDrop, ContainerName) == 0x000018, "Member 'BPI_SurvPC_C_CreateContainerWithDrop::ContainerName' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerWithDrop, ContainerOffset) == 0x000028, "Member 'BPI_SurvPC_C_CreateContainerWithDrop::ContainerOffset' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerWithDrop, DropItems) == 0x000040, "Member 'BPI_SurvPC_C_CreateContainerWithDrop::DropItems' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_CreateContainerWithDrop, Return) == 0x000050, "Member 'BPI_SurvPC_C_CreateContainerWithDrop::Return' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetBeginner
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_GetBeginner final
{
public:
	bool                                          bIsBeginner;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetBeginner) == 0x000001, "Wrong alignment on BPI_SurvPC_C_GetBeginner");
static_assert(sizeof(BPI_SurvPC_C_GetBeginner) == 0x000001, "Wrong size on BPI_SurvPC_C_GetBeginner");
static_assert(offsetof(BPI_SurvPC_C_GetBeginner, bIsBeginner) == 0x000000, "Member 'BPI_SurvPC_C_GetBeginner::bIsBeginner' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetBlackScreenWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetBlackScreenWidget final
{
public:
	class UW_BlackScreen_C*                       Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetBlackScreenWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetBlackScreenWidget");
static_assert(sizeof(BPI_SurvPC_C_GetBlackScreenWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetBlackScreenWidget");
static_assert(offsetof(BPI_SurvPC_C_GetBlackScreenWidget, Widget) == 0x000000, "Member 'BPI_SurvPC_C_GetBlackScreenWidget::Widget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetCarGameWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetCarGameWidget final
{
public:
	class UWBP_CarGame_C*                         CarGameWidget;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetCarGameWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetCarGameWidget");
static_assert(sizeof(BPI_SurvPC_C_GetCarGameWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetCarGameWidget");
static_assert(offsetof(BPI_SurvPC_C_GetCarGameWidget, CarGameWidget) == 0x000000, "Member 'BPI_SurvPC_C_GetCarGameWidget::CarGameWidget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetCarUpgradeWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetCarUpgradeWidget final
{
public:
	class UW_CarUpgradeMenu_C*                    Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetCarUpgradeWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetCarUpgradeWidget");
static_assert(sizeof(BPI_SurvPC_C_GetCarUpgradeWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetCarUpgradeWidget");
static_assert(offsetof(BPI_SurvPC_C_GetCarUpgradeWidget, Widget) == 0x000000, "Member 'BPI_SurvPC_C_GetCarUpgradeWidget::Widget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetCraftWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetCraftWidget final
{
public:
	class UUI_CraftWindow_C*                      NewCraftWidget;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetCraftWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetCraftWidget");
static_assert(sizeof(BPI_SurvPC_C_GetCraftWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetCraftWidget");
static_assert(offsetof(BPI_SurvPC_C_GetCraftWidget, NewCraftWidget) == 0x000000, "Member 'BPI_SurvPC_C_GetCraftWidget::NewCraftWidget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetCraftWindowOpened
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_GetCraftWindowOpened final
{
public:
	bool                                          Opened;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetCraftWindowOpened) == 0x000001, "Wrong alignment on BPI_SurvPC_C_GetCraftWindowOpened");
static_assert(sizeof(BPI_SurvPC_C_GetCraftWindowOpened) == 0x000001, "Wrong size on BPI_SurvPC_C_GetCraftWindowOpened");
static_assert(offsetof(BPI_SurvPC_C_GetCraftWindowOpened, Opened) == 0x000000, "Member 'BPI_SurvPC_C_GetCraftWindowOpened::Opened' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetCurrentXP
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetCurrentXP final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetCurrentXP) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetCurrentXP");
static_assert(sizeof(BPI_SurvPC_C_GetCurrentXP) == 0x000008, "Wrong size on BPI_SurvPC_C_GetCurrentXP");
static_assert(offsetof(BPI_SurvPC_C_GetCurrentXP, Value) == 0x000000, "Member 'BPI_SurvPC_C_GetCurrentXP::Value' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetInventoryMessageWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetInventoryMessageWidget final
{
public:
	class UW_CapacityMessage_C*                   Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetInventoryMessageWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetInventoryMessageWidget");
static_assert(sizeof(BPI_SurvPC_C_GetInventoryMessageWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetInventoryMessageWidget");
static_assert(offsetof(BPI_SurvPC_C_GetInventoryMessageWidget, Widget) == 0x000000, "Member 'BPI_SurvPC_C_GetInventoryMessageWidget::Widget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetInventoryWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetInventoryWidget final
{
public:
	class UMPInGameInventory_C*                   Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetInventoryWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetInventoryWidget");
static_assert(sizeof(BPI_SurvPC_C_GetInventoryWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetInventoryWidget");
static_assert(offsetof(BPI_SurvPC_C_GetInventoryWidget, Widget) == 0x000000, "Member 'BPI_SurvPC_C_GetInventoryWidget::Widget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetLootZoneType
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_GetLootZoneType final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELG2_LootRareType                             Type;                                              // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetLootZoneType) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetLootZoneType");
static_assert(sizeof(BPI_SurvPC_C_GetLootZoneType) == 0x000020, "Wrong size on BPI_SurvPC_C_GetLootZoneType");
static_assert(offsetof(BPI_SurvPC_C_GetLootZoneType, Location) == 0x000000, "Member 'BPI_SurvPC_C_GetLootZoneType::Location' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_GetLootZoneType, Type) == 0x000018, "Member 'BPI_SurvPC_C_GetLootZoneType::Type' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetMaxXP
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetMaxXP final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetMaxXP) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetMaxXP");
static_assert(sizeof(BPI_SurvPC_C_GetMaxXP) == 0x000008, "Wrong size on BPI_SurvPC_C_GetMaxXP");
static_assert(offsetof(BPI_SurvPC_C_GetMaxXP, Value) == 0x000000, "Member 'BPI_SurvPC_C_GetMaxXP::Value' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetPlayerGUI
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetPlayerGUI final
{
public:
	class UUIW_PlayerMain_C*                      GUI;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetPlayerGUI) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetPlayerGUI");
static_assert(sizeof(BPI_SurvPC_C_GetPlayerGUI) == 0x000008, "Wrong size on BPI_SurvPC_C_GetPlayerGUI");
static_assert(offsetof(BPI_SurvPC_C_GetPlayerGUI, GUI) == 0x000000, "Member 'BPI_SurvPC_C_GetPlayerGUI::GUI' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetPlayerRef
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetPlayerRef final
{
public:
	class ASurvivalPlayer_C*                      SurvivalPlayer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetPlayerRef) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetPlayerRef");
static_assert(sizeof(BPI_SurvPC_C_GetPlayerRef) == 0x000008, "Wrong size on BPI_SurvPC_C_GetPlayerRef");
static_assert(offsetof(BPI_SurvPC_C_GetPlayerRef, SurvivalPlayer) == 0x000000, "Member 'BPI_SurvPC_C_GetPlayerRef::SurvivalPlayer' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetQuestComponents
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_GetQuestComponents final
{
public:
	class UQuestComponent*                        Quest;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UQuestTrackerComponent*                 QuestTracker;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetQuestComponents) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetQuestComponents");
static_assert(sizeof(BPI_SurvPC_C_GetQuestComponents) == 0x000010, "Wrong size on BPI_SurvPC_C_GetQuestComponents");
static_assert(offsetof(BPI_SurvPC_C_GetQuestComponents, Quest) == 0x000000, "Member 'BPI_SurvPC_C_GetQuestComponents::Quest' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_GetQuestComponents, QuestTracker) == 0x000008, "Member 'BPI_SurvPC_C_GetQuestComponents::QuestTracker' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetResurrectLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_SurvPC_C_GetResurrectLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetResurrectLocation) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetResurrectLocation");
static_assert(sizeof(BPI_SurvPC_C_GetResurrectLocation) == 0x000018, "Wrong size on BPI_SurvPC_C_GetResurrectLocation");
static_assert(offsetof(BPI_SurvPC_C_GetResurrectLocation, Location) == 0x000000, "Member 'BPI_SurvPC_C_GetResurrectLocation::Location' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetSkillPoints
// 0x0004 (0x0004 - 0x0000)
struct BPI_SurvPC_C_GetSkillPoints final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetSkillPoints) == 0x000004, "Wrong alignment on BPI_SurvPC_C_GetSkillPoints");
static_assert(sizeof(BPI_SurvPC_C_GetSkillPoints) == 0x000004, "Wrong size on BPI_SurvPC_C_GetSkillPoints");
static_assert(offsetof(BPI_SurvPC_C_GetSkillPoints, Value) == 0x000000, "Member 'BPI_SurvPC_C_GetSkillPoints::Value' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetSpawnZoneType
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_GetSpawnZoneType final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAISpawnZoneType                              Type;                                              // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetSpawnZoneType) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetSpawnZoneType");
static_assert(sizeof(BPI_SurvPC_C_GetSpawnZoneType) == 0x000020, "Wrong size on BPI_SurvPC_C_GetSpawnZoneType");
static_assert(offsetof(BPI_SurvPC_C_GetSpawnZoneType, Location) == 0x000000, "Member 'BPI_SurvPC_C_GetSpawnZoneType::Location' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_GetSpawnZoneType, Type) == 0x000018, "Member 'BPI_SurvPC_C_GetSpawnZoneType::Type' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetTabsWidget
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_GetTabsWidget final
{
public:
	class UW_TabsWindow_C*                        Widget;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetTabsWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetTabsWidget");
static_assert(sizeof(BPI_SurvPC_C_GetTabsWidget) == 0x000008, "Wrong size on BPI_SurvPC_C_GetTabsWidget");
static_assert(offsetof(BPI_SurvPC_C_GetTabsWidget, Widget) == 0x000000, "Member 'BPI_SurvPC_C_GetTabsWidget::Widget' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetTeleportingToStash
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_GetTeleportingToStash final
{
public:
	bool                                          From_Raid;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetTeleportingToStash) == 0x000001, "Wrong alignment on BPI_SurvPC_C_GetTeleportingToStash");
static_assert(sizeof(BPI_SurvPC_C_GetTeleportingToStash) == 0x000001, "Wrong size on BPI_SurvPC_C_GetTeleportingToStash");
static_assert(offsetof(BPI_SurvPC_C_GetTeleportingToStash, From_Raid) == 0x000000, "Member 'BPI_SurvPC_C_GetTeleportingToStash::From_Raid' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetTutorStage
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_GetTutorStage final
{
public:
	class FString                                 StageName;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetTutorStage) == 0x000008, "Wrong alignment on BPI_SurvPC_C_GetTutorStage");
static_assert(sizeof(BPI_SurvPC_C_GetTutorStage) == 0x000010, "Wrong size on BPI_SurvPC_C_GetTutorStage");
static_assert(offsetof(BPI_SurvPC_C_GetTutorStage, StageName) == 0x000000, "Member 'BPI_SurvPC_C_GetTutorStage::StageName' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.GetWidgetIsOpened
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_GetWidgetIsOpened final
{
public:
	bool                                          WidgetIsOpened;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_GetWidgetIsOpened) == 0x000001, "Wrong alignment on BPI_SurvPC_C_GetWidgetIsOpened");
static_assert(sizeof(BPI_SurvPC_C_GetWidgetIsOpened) == 0x000001, "Wrong size on BPI_SurvPC_C_GetWidgetIsOpened");
static_assert(offsetof(BPI_SurvPC_C_GetWidgetIsOpened, WidgetIsOpened) == 0x000000, "Member 'BPI_SurvPC_C_GetWidgetIsOpened::WidgetIsOpened' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.HidePlayers
// 0x0002 (0x0002 - 0x0000)
struct BPI_SurvPC_C_HidePlayers final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideAll;                                           // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_HidePlayers) == 0x000001, "Wrong alignment on BPI_SurvPC_C_HidePlayers");
static_assert(sizeof(BPI_SurvPC_C_HidePlayers) == 0x000002, "Wrong size on BPI_SurvPC_C_HidePlayers");
static_assert(offsetof(BPI_SurvPC_C_HidePlayers, Hide) == 0x000000, "Member 'BPI_SurvPC_C_HidePlayers::Hide' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_HidePlayers, HideAll) == 0x000001, "Member 'BPI_SurvPC_C_HidePlayers::HideAll' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.HideQuestUI
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_HideQuestUI final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_HideQuestUI) == 0x000001, "Wrong alignment on BPI_SurvPC_C_HideQuestUI");
static_assert(sizeof(BPI_SurvPC_C_HideQuestUI) == 0x000001, "Wrong size on BPI_SurvPC_C_HideQuestUI");
static_assert(offsetof(BPI_SurvPC_C_HideQuestUI, Hide) == 0x000000, "Member 'BPI_SurvPC_C_HideQuestUI::Hide' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.IsRendered?
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_IsRendered_ final
{
public:
	class AActor*                                 Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRendered;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_IsRendered_) == 0x000008, "Wrong alignment on BPI_SurvPC_C_IsRendered_");
static_assert(sizeof(BPI_SurvPC_C_IsRendered_) == 0x000010, "Wrong size on BPI_SurvPC_C_IsRendered_");
static_assert(offsetof(BPI_SurvPC_C_IsRendered_, Pawn) == 0x000000, "Member 'BPI_SurvPC_C_IsRendered_::Pawn' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_IsRendered_, IsRendered) == 0x000008, "Member 'BPI_SurvPC_C_IsRendered_::IsRendered' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.LoadPlayerPos
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_LoadPlayerPos final
{
public:
	bool                                          Exist;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlayerPos;                                         // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_LoadPlayerPos) == 0x000008, "Wrong alignment on BPI_SurvPC_C_LoadPlayerPos");
static_assert(sizeof(BPI_SurvPC_C_LoadPlayerPos) == 0x000020, "Wrong size on BPI_SurvPC_C_LoadPlayerPos");
static_assert(offsetof(BPI_SurvPC_C_LoadPlayerPos, Exist) == 0x000000, "Member 'BPI_SurvPC_C_LoadPlayerPos::Exist' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_LoadPlayerPos, PlayerPos) == 0x000008, "Member 'BPI_SurvPC_C_LoadPlayerPos::PlayerPos' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.OnChangeQuestHintMulticast
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_OnChangeQuestHintMulticast final
{
public:
	class FString                                 Hint;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_OnChangeQuestHintMulticast) == 0x000008, "Wrong alignment on BPI_SurvPC_C_OnChangeQuestHintMulticast");
static_assert(sizeof(BPI_SurvPC_C_OnChangeQuestHintMulticast) == 0x000010, "Wrong size on BPI_SurvPC_C_OnChangeQuestHintMulticast");
static_assert(offsetof(BPI_SurvPC_C_OnChangeQuestHintMulticast, Hint) == 0x000000, "Member 'BPI_SurvPC_C_OnChangeQuestHintMulticast::Hint' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.OpenTabsWindow
// 0x0003 (0x0003 - 0x0000)
struct BPI_SurvPC_C_OpenTabsWindow final
{
public:
	E_TabType                                     Focus;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WithVehicle;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Succes;                                            // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_OpenTabsWindow) == 0x000001, "Wrong alignment on BPI_SurvPC_C_OpenTabsWindow");
static_assert(sizeof(BPI_SurvPC_C_OpenTabsWindow) == 0x000003, "Wrong size on BPI_SurvPC_C_OpenTabsWindow");
static_assert(offsetof(BPI_SurvPC_C_OpenTabsWindow, Focus) == 0x000000, "Member 'BPI_SurvPC_C_OpenTabsWindow::Focus' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_OpenTabsWindow, WithVehicle) == 0x000001, "Member 'BPI_SurvPC_C_OpenTabsWindow::WithVehicle' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_OpenTabsWindow, Succes) == 0x000002, "Member 'BPI_SurvPC_C_OpenTabsWindow::Succes' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetCraftWindowOpened
// 0x0002 (0x0002 - 0x0000)
struct BPI_SurvPC_C_SetCraftWindowOpened final
{
public:
	bool                                          NewOpened;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetCraftWindowOpened) == 0x000001, "Wrong alignment on BPI_SurvPC_C_SetCraftWindowOpened");
static_assert(sizeof(BPI_SurvPC_C_SetCraftWindowOpened) == 0x000002, "Wrong size on BPI_SurvPC_C_SetCraftWindowOpened");
static_assert(offsetof(BPI_SurvPC_C_SetCraftWindowOpened, NewOpened) == 0x000000, "Member 'BPI_SurvPC_C_SetCraftWindowOpened::NewOpened' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetCraftWindowOpened, Success) == 0x000001, "Member 'BPI_SurvPC_C_SetCraftWindowOpened::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetDialogueWidget
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_SetDialogueWidget final
{
public:
	class UADSDialogue*                           Dialogue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   NPC_Name;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetDialogueWidget) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SetDialogueWidget");
static_assert(sizeof(BPI_SurvPC_C_SetDialogueWidget) == 0x000010, "Wrong size on BPI_SurvPC_C_SetDialogueWidget");
static_assert(offsetof(BPI_SurvPC_C_SetDialogueWidget, Dialogue) == 0x000000, "Member 'BPI_SurvPC_C_SetDialogueWidget::Dialogue' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetDialogueWidget, NPC_Name) == 0x000008, "Member 'BPI_SurvPC_C_SetDialogueWidget::NPC_Name' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetPlayerRef
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_SetPlayerRef final
{
public:
	class ASurvivalPlayer_C*                      Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetPlayerRef) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SetPlayerRef");
static_assert(sizeof(BPI_SurvPC_C_SetPlayerRef) == 0x000010, "Wrong size on BPI_SurvPC_C_SetPlayerRef");
static_assert(offsetof(BPI_SurvPC_C_SetPlayerRef, Player) == 0x000000, "Member 'BPI_SurvPC_C_SetPlayerRef::Player' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetPlayerRef, Success) == 0x000008, "Member 'BPI_SurvPC_C_SetPlayerRef::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetQuestHint
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_SetQuestHint final
{
public:
	class FString                                 Hint;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Title;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetQuestHint) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SetQuestHint");
static_assert(sizeof(BPI_SurvPC_C_SetQuestHint) == 0x000020, "Wrong size on BPI_SurvPC_C_SetQuestHint");
static_assert(offsetof(BPI_SurvPC_C_SetQuestHint, Hint) == 0x000000, "Member 'BPI_SurvPC_C_SetQuestHint::Hint' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetQuestHint, Title) == 0x000010, "Member 'BPI_SurvPC_C_SetQuestHint::Title' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetResurrectLocation
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_SetResurrectLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetResurrectLocation) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SetResurrectLocation");
static_assert(sizeof(BPI_SurvPC_C_SetResurrectLocation) == 0x000020, "Wrong size on BPI_SurvPC_C_SetResurrectLocation");
static_assert(offsetof(BPI_SurvPC_C_SetResurrectLocation, Location) == 0x000000, "Member 'BPI_SurvPC_C_SetResurrectLocation::Location' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetResurrectLocation, Success) == 0x000018, "Member 'BPI_SurvPC_C_SetResurrectLocation::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetTeleportingToStash
// 0x0001 (0x0001 - 0x0000)
struct BPI_SurvPC_C_SetTeleportingToStash final
{
public:
	bool                                          From_Raid;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetTeleportingToStash) == 0x000001, "Wrong alignment on BPI_SurvPC_C_SetTeleportingToStash");
static_assert(sizeof(BPI_SurvPC_C_SetTeleportingToStash) == 0x000001, "Wrong size on BPI_SurvPC_C_SetTeleportingToStash");
static_assert(offsetof(BPI_SurvPC_C_SetTeleportingToStash, From_Raid) == 0x000000, "Member 'BPI_SurvPC_C_SetTeleportingToStash::From_Raid' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetUpgradeScreen
// 0x0018 (0x0018 - 0x0000)
struct BPI_SurvPC_C_SetUpgradeScreen final
{
public:
	bool                                          NewEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_RB_Vehicle_C*                       Vehicle;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetUpgradeScreen) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SetUpgradeScreen");
static_assert(sizeof(BPI_SurvPC_C_SetUpgradeScreen) == 0x000018, "Wrong size on BPI_SurvPC_C_SetUpgradeScreen");
static_assert(offsetof(BPI_SurvPC_C_SetUpgradeScreen, NewEnabled) == 0x000000, "Member 'BPI_SurvPC_C_SetUpgradeScreen::NewEnabled' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetUpgradeScreen, Vehicle) == 0x000008, "Member 'BPI_SurvPC_C_SetUpgradeScreen::Vehicle' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetUpgradeScreen, Success) == 0x000010, "Member 'BPI_SurvPC_C_SetUpgradeScreen::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SetYouDiedScreen
// 0x0018 (0x0018 - 0x0000)
struct BPI_SurvPC_C_SetYouDiedScreen final
{
public:
	bool                                          NewEnabled;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DayCount;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResurrectionTimer;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SetYouDiedScreen) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SetYouDiedScreen");
static_assert(sizeof(BPI_SurvPC_C_SetYouDiedScreen) == 0x000018, "Wrong size on BPI_SurvPC_C_SetYouDiedScreen");
static_assert(offsetof(BPI_SurvPC_C_SetYouDiedScreen, NewEnabled) == 0x000000, "Member 'BPI_SurvPC_C_SetYouDiedScreen::NewEnabled' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetYouDiedScreen, DayCount) == 0x000004, "Member 'BPI_SurvPC_C_SetYouDiedScreen::DayCount' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetYouDiedScreen, ResurrectionTimer) == 0x000008, "Member 'BPI_SurvPC_C_SetYouDiedScreen::ResurrectionTimer' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_SetYouDiedScreen, Success) == 0x000010, "Member 'BPI_SurvPC_C_SetYouDiedScreen::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.ShowCityLabel
// 0x0020 (0x0020 - 0x0000)
struct BPI_SurvPC_C_ShowCityLabel final
{
public:
	class FText                                   CityName;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_ShowCityLabel) == 0x000008, "Wrong alignment on BPI_SurvPC_C_ShowCityLabel");
static_assert(sizeof(BPI_SurvPC_C_ShowCityLabel) == 0x000020, "Wrong size on BPI_SurvPC_C_ShowCityLabel");
static_assert(offsetof(BPI_SurvPC_C_ShowCityLabel, CityName) == 0x000000, "Member 'BPI_SurvPC_C_ShowCityLabel::CityName' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_ShowCityLabel, Success) == 0x000018, "Member 'BPI_SurvPC_C_ShowCityLabel::Success' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.SwitchQuest
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_SwitchQuest final
{
public:
	class UQuestV2_C*                             Quest;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_SwitchQuest) == 0x000008, "Wrong alignment on BPI_SurvPC_C_SwitchQuest");
static_assert(sizeof(BPI_SurvPC_C_SwitchQuest) == 0x000008, "Wrong size on BPI_SurvPC_C_SwitchQuest");
static_assert(offsetof(BPI_SurvPC_C_SwitchQuest, Quest) == 0x000000, "Member 'BPI_SurvPC_C_SwitchQuest::Quest' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.ThrowQuestTrigger
// 0x0010 (0x0010 - 0x0000)
struct BPI_SurvPC_C_ThrowQuestTrigger final
{
public:
	class FString                                 Trigger;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_ThrowQuestTrigger) == 0x000008, "Wrong alignment on BPI_SurvPC_C_ThrowQuestTrigger");
static_assert(sizeof(BPI_SurvPC_C_ThrowQuestTrigger) == 0x000010, "Wrong size on BPI_SurvPC_C_ThrowQuestTrigger");
static_assert(offsetof(BPI_SurvPC_C_ThrowQuestTrigger, Trigger) == 0x000000, "Member 'BPI_SurvPC_C_ThrowQuestTrigger::Trigger' has a wrong offset!");

// Function BPI_SurvPC.BPI_SurvPC_C.UseSkillPoint
// 0x0008 (0x0008 - 0x0000)
struct BPI_SurvPC_C_UseSkillPoint final
{
public:
	int32                                         NumPoints;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_SurvPC_C_UseSkillPoint) == 0x000004, "Wrong alignment on BPI_SurvPC_C_UseSkillPoint");
static_assert(sizeof(BPI_SurvPC_C_UseSkillPoint) == 0x000008, "Wrong size on BPI_SurvPC_C_UseSkillPoint");
static_assert(offsetof(BPI_SurvPC_C_UseSkillPoint, NumPoints) == 0x000000, "Member 'BPI_SurvPC_C_UseSkillPoint::NumPoints' has a wrong offset!");
static_assert(offsetof(BPI_SurvPC_C_UseSkillPoint, Success) == 0x000004, "Member 'BPI_SurvPC_C_UseSkillPoint::Success' has a wrong offset!");

}

