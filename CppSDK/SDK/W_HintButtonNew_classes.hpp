#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_HintButtonNew

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_HintButtonType_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_HintButtonNew.W_HintButtonNew_C
// 0x0280 (0x0500 - 0x0280)
class UW_HintButtonNew_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Pressed;                                           // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       ToggleFocus;                                       // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button_Hint;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG;                                          // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_KeyIcon;                                     // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_KeyIcon;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                Spacer;                                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_ButtonText;                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Key;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   ButtonKey;                                         // 0x02D0(0x0018)(Edit, BlueprintVisible)
	class FText                                   ButtonText;                                        // 0x02E8(0x0018)(Edit, BlueprintVisible)
	FMulticastInlineDelegateProperty_             OnClicked;                                         // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ButtonType;                                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPressed;                                         // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnReleased;                                        // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             FillingCompleted;                                  // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UPaperSprite*                           Sprite;                                            // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Width;                                             // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Height;                                            // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         SmallButtonFontType;                               // 0x0358(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSlateFontInfo                         LageButtonFontType;                                // 0x03B0(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash)
	E_HintButtonType                              ButtonType_;                                       // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTextHidden;                                     // 0x0409(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_40A[0x2];                                      // 0x040A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColorAndOpacity;                         // 0x040C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ButtonTextColorAndOpacity;                         // 0x041C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ButtonKeyColorAndOpacity;                          // 0x042C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsImageUsing;                                     // 0x043C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43D[0x3];                                      // 0x043D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColorAndOpacity_Disabled;                // 0x0440(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           ButtonTextColorAndOpacity_Disabled;                // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsButtonEnabled;                                  // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowBG;                                           // 0x0461(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnUnhovered;                                       // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FWidgetTransform                       ButtonTextTransform;                               // 0x0488(0x0038)(Edit, BlueprintVisible, NoDestructor)
	struct FWidgetTransform                       TextKeyTransform;                                  // 0x04C0(0x0038)(Edit, BlueprintVisible, NoDestructor)
	bool                                          bIsNeedShadowText;                                 // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bIsNeedHover;                                      // 0x04F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__Button_Hint_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__Button_Hint_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void BndEvt__Button_Hint_K2Node_ComponentBoundEvent_2_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__W_HintButtonNew_Button_Hint_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__W_HintButtonNew_Button_Hint_K2Node_ComponentBoundEvent_4_OnButtonHoverEvent__DelegateSignature();
	void ExecuteUbergraph_W_HintButtonNew(int32 EntryPoint);
	void FillingCompleted__DelegateSignature();
	void ImageFilled(class UImage* Image_Fill);
	void OnClicked__DelegateSignature();
	void OnFocus(bool NewState);
	void OnHovered__DelegateSignature();
	void OnPlayAnimation(class UWidgetAnimation* Animation, bool NewState);
	void OnPressed__DelegateSignature();
	void OnReleased__DelegateSignature();
	void OnUnhovered__DelegateSignature();
	void PreConstruct(bool IsDesignTime);
	void PressedButtonAnimation();
	void SetBackgroundColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetButtonEnabled(bool InIsEnabled);
	void SetButtonTextColorAndOpacity(const struct FLinearColor& InColorAndOpacity);
	void SetText(const class FText& Text);
	void SetTextHidden(bool bInIsHidden);
	void Unhovered();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_HintButtonNew_C">();
	}
	static class UW_HintButtonNew_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_HintButtonNew_C>();
	}
};
static_assert(alignof(UW_HintButtonNew_C) == 0x000008, "Wrong alignment on UW_HintButtonNew_C");
static_assert(sizeof(UW_HintButtonNew_C) == 0x000500, "Wrong size on UW_HintButtonNew_C");
static_assert(offsetof(UW_HintButtonNew_C, UberGraphFrame) == 0x000280, "Member 'UW_HintButtonNew_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Pressed) == 0x000288, "Member 'UW_HintButtonNew_C::Pressed' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ToggleFocus) == 0x000290, "Member 'UW_HintButtonNew_C::ToggleFocus' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Button_Hint) == 0x000298, "Member 'UW_HintButtonNew_C::Button_Hint' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Image_BG) == 0x0002A0, "Member 'UW_HintButtonNew_C::Image_BG' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Image_KeyIcon) == 0x0002A8, "Member 'UW_HintButtonNew_C::Image_KeyIcon' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, SizeBox_KeyIcon) == 0x0002B0, "Member 'UW_HintButtonNew_C::SizeBox_KeyIcon' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Spacer) == 0x0002B8, "Member 'UW_HintButtonNew_C::Spacer' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, TextBlock_ButtonText) == 0x0002C0, "Member 'UW_HintButtonNew_C::TextBlock_ButtonText' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, TextBlock_Key) == 0x0002C8, "Member 'UW_HintButtonNew_C::TextBlock_Key' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonKey) == 0x0002D0, "Member 'UW_HintButtonNew_C::ButtonKey' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonText) == 0x0002E8, "Member 'UW_HintButtonNew_C::ButtonText' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, OnClicked) == 0x000300, "Member 'UW_HintButtonNew_C::OnClicked' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonType) == 0x000310, "Member 'UW_HintButtonNew_C::ButtonType' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, OnPressed) == 0x000318, "Member 'UW_HintButtonNew_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, OnReleased) == 0x000328, "Member 'UW_HintButtonNew_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, FillingCompleted) == 0x000338, "Member 'UW_HintButtonNew_C::FillingCompleted' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Sprite) == 0x000348, "Member 'UW_HintButtonNew_C::Sprite' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Width) == 0x000350, "Member 'UW_HintButtonNew_C::Width' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, Height) == 0x000354, "Member 'UW_HintButtonNew_C::Height' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, SmallButtonFontType) == 0x000358, "Member 'UW_HintButtonNew_C::SmallButtonFontType' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, LageButtonFontType) == 0x0003B0, "Member 'UW_HintButtonNew_C::LageButtonFontType' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonType_) == 0x000408, "Member 'UW_HintButtonNew_C::ButtonType_' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, bIsTextHidden) == 0x000409, "Member 'UW_HintButtonNew_C::bIsTextHidden' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, BackgroundColorAndOpacity) == 0x00040C, "Member 'UW_HintButtonNew_C::BackgroundColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonTextColorAndOpacity) == 0x00041C, "Member 'UW_HintButtonNew_C::ButtonTextColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonKeyColorAndOpacity) == 0x00042C, "Member 'UW_HintButtonNew_C::ButtonKeyColorAndOpacity' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, bIsImageUsing) == 0x00043C, "Member 'UW_HintButtonNew_C::bIsImageUsing' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, BackgroundColorAndOpacity_Disabled) == 0x000440, "Member 'UW_HintButtonNew_C::BackgroundColorAndOpacity_Disabled' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonTextColorAndOpacity_Disabled) == 0x000450, "Member 'UW_HintButtonNew_C::ButtonTextColorAndOpacity_Disabled' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, bIsButtonEnabled) == 0x000460, "Member 'UW_HintButtonNew_C::bIsButtonEnabled' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, bShowBG) == 0x000461, "Member 'UW_HintButtonNew_C::bShowBG' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, OnHovered) == 0x000468, "Member 'UW_HintButtonNew_C::OnHovered' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, OnUnhovered) == 0x000478, "Member 'UW_HintButtonNew_C::OnUnhovered' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, ButtonTextTransform) == 0x000488, "Member 'UW_HintButtonNew_C::ButtonTextTransform' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, TextKeyTransform) == 0x0004C0, "Member 'UW_HintButtonNew_C::TextKeyTransform' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, bIsNeedShadowText) == 0x0004F8, "Member 'UW_HintButtonNew_C::bIsNeedShadowText' has a wrong offset!");
static_assert(offsetof(UW_HintButtonNew_C, bIsNeedHover) == 0x0004F9, "Member 'UW_HintButtonNew_C::bIsNeedHover' has a wrong offset!");

}

