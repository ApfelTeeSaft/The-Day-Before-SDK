#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Shoot

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "BTTask_BlueprintBase_New_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Shoot.Shoot_C
// 0x0080 (0x0130 - 0x00B0)
class UShoot_C final : public UBTTask_BlueprintBase_New_C
{
public:
	struct FBlackboardKeySelector                 Target;                                            // 0x00B0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 Location;                                          // 0x00D8(0x0028)(Edit, BlueprintVisible)
	class AMainBanditAI_C*                        bandit;                                            // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Location_;                                         // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Target_;                                           // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ItemIndex;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                ItemScore;                                         // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Shoot_C">();
	}
	static class UShoot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShoot_C>();
	}
};
static_assert(alignof(UShoot_C) == 0x000008, "Wrong alignment on UShoot_C");
static_assert(sizeof(UShoot_C) == 0x000130, "Wrong size on UShoot_C");
static_assert(offsetof(UShoot_C, Target) == 0x0000B0, "Member 'UShoot_C::Target' has a wrong offset!");
static_assert(offsetof(UShoot_C, Location) == 0x0000D8, "Member 'UShoot_C::Location' has a wrong offset!");
static_assert(offsetof(UShoot_C, bandit) == 0x000100, "Member 'UShoot_C::bandit' has a wrong offset!");
static_assert(offsetof(UShoot_C, Location_) == 0x000108, "Member 'UShoot_C::Location_' has a wrong offset!");
static_assert(offsetof(UShoot_C, Target_) == 0x000109, "Member 'UShoot_C::Target_' has a wrong offset!");
static_assert(offsetof(UShoot_C, ItemIndex) == 0x000110, "Member 'UShoot_C::ItemIndex' has a wrong offset!");
static_assert(offsetof(UShoot_C, ItemScore) == 0x000120, "Member 'UShoot_C::ItemScore' has a wrong offset!");

}

