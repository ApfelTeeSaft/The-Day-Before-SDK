#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Weaponry

#include "Basic.hpp"

#include "BPI_Weaponry_classes.hpp"
#include "BPI_Weaponry_parameters.hpp"


namespace SDK
{

// Function BPI_Weaponry.BPI_Weaponry_C.WP_Aiming
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Aim                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_Aiming(bool Aim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_Aiming");

	Params::BPI_Weaponry_C_WP_Aiming Parms{};

	Parms.Aim = Aim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_Anim_Weapon_Equiped
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Weapon_C*                     NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_Anim_Weapon_Equiped(class ABP_Weapon_C* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_Anim_Weapon_Equiped");

	Params::BPI_Weaponry_C_WP_Anim_Weapon_Equiped Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_EquipWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_EquipWeapon(class FName WeaponName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_EquipWeapon");

	Params::BPI_Weaponry_C_WP_EquipWeapon Parms{};

	Parms.WeaponName = WeaponName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetAimCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 Camera                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_GetAimCamera(class UCameraComponent** Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_GetAimCamera");

	Params::BPI_Weaponry_C_WP_GetAimCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Camera != nullptr)
		*Camera = Parms.Camera;
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetLefHandEffectorTransform
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasEffector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_GetLefHandEffectorTransform(struct FTransform* Transform, bool* HasEffector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_GetLefHandEffectorTransform");

	Params::BPI_Weaponry_C_WP_GetLefHandEffectorTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);

	if (HasEffector != nullptr)
		*HasEffector = Parms.HasEffector;
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetRotationInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_GetRotationInput(struct FVector2D* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_GetRotationInput");

	Params::BPI_Weaponry_C_WP_GetRotationInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetShootDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ShootDirection                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_GetShootDirection(struct FVector* ShootDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_GetShootDirection");

	Params::BPI_Weaponry_C_WP_GetShootDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShootDirection != nullptr)
		*ShootDirection = std::move(Parms.ShootDirection);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetSkeletalMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkinnedMesh                                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_GetSkeletalMesh(class USkeletalMeshComponent** SkinnedMesh, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_GetSkeletalMesh");

	Params::BPI_Weaponry_C_WP_GetSkeletalMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkinnedMesh != nullptr)
		*SkinnedMesh = Parms.SkinnedMesh;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_GetWeaponType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBPE_Weapon_Type                        WeaponType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_GetWeaponType(EBPE_Weapon_Type* WeaponType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_GetWeaponType");

	Params::BPI_Weaponry_C_WP_GetWeaponType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponType != nullptr)
		*WeaponType = Parms.WeaponType;
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_HasWeaponOrBroken
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_HasWeaponOrBroken(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_HasWeaponOrBroken");

	Params::BPI_Weaponry_C_WP_HasWeaponOrBroken Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_MeleeActivation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_MeleeActivation(bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_MeleeActivation");

	Params::BPI_Weaponry_C_WP_MeleeActivation Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_PlayGunTail
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFMODEvent*                       TailSound                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_PlayGunTail(class UFMODEvent* TailSound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_PlayGunTail");

	Params::BPI_Weaponry_C_WP_PlayGunTail Parms{};

	Parms.TailSound = TailSound;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_SetRecoilPower
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RecoilPower                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weaponry_C::WP_SetRecoilPower(double RecoilPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_SetRecoilPower");

	Params::BPI_Weaponry_C_WP_SetRecoilPower Parms{};

	Parms.RecoilPower = RecoilPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_Weaponry.BPI_Weaponry_C.WP_UnequipWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Weaponry_C::WP_UnequipWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Weaponry_C", "WP_UnequipWeapon");

	UObject::ProcessEvent(Func, nullptr);
}

}

