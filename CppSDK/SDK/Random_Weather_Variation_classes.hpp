#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Random_Weather_Variation

#include "Basic.hpp"

#include "UDS_WeatherTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "UDS_Season_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Random_Weather_Variation.Random_Weather_Variation_C
// 0x01C8 (0x0268 - 0x00A0)
class URandom_Weather_Variation_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AUltra_Dynamic_Weather_C*               UDW;                                               // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Weather_Intensity;                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Cloud_Coverage;                             // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow;                                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Wind_Intensity;                             // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Material_Snow;                              // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Random_Material_Wetness;                           // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUDS_WeatherTypes                             Current_Random_Weather_Type;                       // 0x00E0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Summer_;               // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Autumn_;               // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Winter_;               // 0x0188(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EUDS_WeatherTypes, double>               Weather_Type_Probabilities__Spring_;               // 0x01D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Current_Lerp_Alpha;                                // 0x0228(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Timer_Length;                              // 0x0230(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Weather_Intensity;                             // 0x0238(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Cloud_Coverage;                                // 0x0240(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        _Snow_0;                                           // 0x0248(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Wind_Intensity;                                // 0x0250(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Material_Snow;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Old_Material_Wetness;                              // 0x0260(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Random_Weather_Variation(int32 EntryPoint);
	void Increment_Random_Weather();
	void Initialize(class AUltra_Dynamic_Weather_C* Param_UDW, const TMap<EUDS_WeatherTypes, double>& Summer_Probabilities, const TMap<EUDS_WeatherTypes, double>& Autumn_Probabilities, const TMap<EUDS_WeatherTypes, double>& Winter_Probabilities, const TMap<EUDS_WeatherTypes, double>& Spring_Probabilities, bool Start_with_Random_Type);
	void ReceiveTick(float DeltaSeconds);
	void Reset_Timer();
	void Select_New_Random_Weather_Type(bool Filter_Probability_List);
	void Start_Timer_to_Change_Weather_Type();
	void Update_Old_Variables();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Random_Weather_Variation_C">();
	}
	static class URandom_Weather_Variation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<URandom_Weather_Variation_C>();
	}
};
static_assert(alignof(URandom_Weather_Variation_C) == 0x000008, "Wrong alignment on URandom_Weather_Variation_C");
static_assert(sizeof(URandom_Weather_Variation_C) == 0x000268, "Wrong size on URandom_Weather_Variation_C");
static_assert(offsetof(URandom_Weather_Variation_C, UberGraphFrame) == 0x0000A0, "Member 'URandom_Weather_Variation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, UDW) == 0x0000A8, "Member 'URandom_Weather_Variation_C::UDW' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Weather_Intensity) == 0x0000B0, "Member 'URandom_Weather_Variation_C::Random_Weather_Intensity' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Cloud_Coverage) == 0x0000B8, "Member 'URandom_Weather_Variation_C::Random_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, _Snow) == 0x0000C0, "Member 'URandom_Weather_Variation_C::_Snow' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Wind_Intensity) == 0x0000C8, "Member 'URandom_Weather_Variation_C::Random_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Material_Snow) == 0x0000D0, "Member 'URandom_Weather_Variation_C::Random_Material_Snow' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Random_Material_Wetness) == 0x0000D8, "Member 'URandom_Weather_Variation_C::Random_Material_Wetness' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Current_Random_Weather_Type) == 0x0000E0, "Member 'URandom_Weather_Variation_C::Current_Random_Weather_Type' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Type_Probabilities__Summer_) == 0x0000E8, "Member 'URandom_Weather_Variation_C::Weather_Type_Probabilities__Summer_' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Type_Probabilities__Autumn_) == 0x000138, "Member 'URandom_Weather_Variation_C::Weather_Type_Probabilities__Autumn_' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Type_Probabilities__Winter_) == 0x000188, "Member 'URandom_Weather_Variation_C::Weather_Type_Probabilities__Winter_' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Weather_Type_Probabilities__Spring_) == 0x0001D8, "Member 'URandom_Weather_Variation_C::Weather_Type_Probabilities__Spring_' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Current_Lerp_Alpha) == 0x000228, "Member 'URandom_Weather_Variation_C::Current_Lerp_Alpha' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Current_Timer_Length) == 0x000230, "Member 'URandom_Weather_Variation_C::Current_Timer_Length' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Old_Weather_Intensity) == 0x000238, "Member 'URandom_Weather_Variation_C::Old_Weather_Intensity' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Old_Cloud_Coverage) == 0x000240, "Member 'URandom_Weather_Variation_C::Old_Cloud_Coverage' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, _Snow_0) == 0x000248, "Member 'URandom_Weather_Variation_C::_Snow_0' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Old_Wind_Intensity) == 0x000250, "Member 'URandom_Weather_Variation_C::Old_Wind_Intensity' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Old_Material_Snow) == 0x000258, "Member 'URandom_Weather_Variation_C::Old_Material_Snow' has a wrong offset!");
static_assert(offsetof(URandom_Weather_Variation_C, Old_Material_Wetness) == 0x000260, "Member 'URandom_Weather_Variation_C::Old_Material_Wetness' has a wrong offset!");

}

