#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ScopeBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ScopeBase.BP_ScopeBase_C.ExecuteUbergraph_BP_ScopeBase
// 0x0080 (0x0080 - 0x0000)
struct BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Aim;                            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_FPP;                            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool Aim, bool FPP)>           K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_FPFunctions_C>     K2Node_DynamicCast_AsBI_FPFunctions;               // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_1;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_FPFunctions_C>     K2Node_DynamicCast_AsBI_FPFunctions_1;             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue_2;            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_FPFunctions_C>     K2Node_DynamicCast_AsBI_FPFunctions_2;             // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase) == 0x000008, "Wrong alignment on BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase");
static_assert(sizeof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase) == 0x000080, "Wrong size on BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, EntryPoint) == 0x000000, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_CustomEvent_Aim) == 0x000004, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_CustomEvent_Aim' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_CustomEvent_FPP) == 0x000005, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_CustomEvent_FPP' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, CallFunc_GetAnimInstance_ReturnValue) == 0x000020, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_DynamicCast_AsBI_FPFunctions) == 0x000028, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_DynamicCast_AsBI_FPFunctions' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, CallFunc_GetAnimInstance_ReturnValue_1) == 0x000040, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::CallFunc_GetAnimInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_DynamicCast_AsBI_FPFunctions_1) == 0x000048, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_DynamicCast_AsBI_FPFunctions_1' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, CallFunc_GetAnimInstance_ReturnValue_2) == 0x000060, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::CallFunc_GetAnimInstance_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_DynamicCast_AsBI_FPFunctions_2) == 0x000068, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_DynamicCast_AsBI_FPFunctions_2' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_DynamicCast_bSuccess_2) == 0x000078, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase, K2Node_Event_DeltaSeconds) == 0x00007C, "Member 'BP_ScopeBase_C_ExecuteUbergraph_BP_ScopeBase::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_ScopeBase.BP_ScopeBase_C.OnAim
// 0x0002 (0x0002 - 0x0000)
struct BP_ScopeBase_C_OnAim final
{
public:
	bool                                          Param_Aim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FPP;                                               // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_OnAim) == 0x000001, "Wrong alignment on BP_ScopeBase_C_OnAim");
static_assert(sizeof(BP_ScopeBase_C_OnAim) == 0x000002, "Wrong size on BP_ScopeBase_C_OnAim");
static_assert(offsetof(BP_ScopeBase_C_OnAim, Param_Aim) == 0x000000, "Member 'BP_ScopeBase_C_OnAim::Param_Aim' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_OnAim, FPP) == 0x000001, "Member 'BP_ScopeBase_C_OnAim::FPP' has a wrong offset!");

// Function BP_ScopeBase.BP_ScopeBase_C.PlaceholderOffset
// 0x01A0 (0x01A0 - 0x0000)
struct BP_ScopeBase_C_PlaceholderOffset final
{
public:
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0000(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBI_FPFunctions_C>     K2Node_DynamicCast_AsBI_FPFunctions;               // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWallBlock_WallBlock_;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_PlaceholderOffset) == 0x000010, "Wrong alignment on BP_ScopeBase_C_PlaceholderOffset");
static_assert(sizeof(BP_ScopeBase_C_PlaceholderOffset) == 0x0001A0, "Wrong size on BP_ScopeBase_C_PlaceholderOffset");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000000, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, K2Node_SwitchName_CmpSuccess) == 0x000061, "Member 'BP_ScopeBase_C_PlaceholderOffset::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_SelectFloat_ReturnValue) == 0x000068, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_GetSocketTransform_ReturnValue) == 0x000070, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_BreakTransform_Location) == 0x0000D0, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_BreakTransform_Rotation) == 0x0000E8, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_BreakTransform_Scale) == 0x000100, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_InverseTransformLocation_ReturnValue) == 0x000118, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_GetAnimInstance_ReturnValue) == 0x000130, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_BreakVector_X) == 0x000138, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_BreakVector_Y) == 0x000140, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_BreakVector_Z) == 0x000148, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, K2Node_DynamicCast_AsBI_FPFunctions) == 0x000150, "Member 'BP_ScopeBase_C_PlaceholderOffset::K2Node_DynamicCast_AsBI_FPFunctions' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, K2Node_DynamicCast_bSuccess) == 0x000160, "Member 'BP_ScopeBase_C_PlaceholderOffset::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000168, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_GetWallBlock_WallBlock_) == 0x000170, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_GetWallBlock_WallBlock_' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000178, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffset, CallFunc_MakeVector_ReturnValue) == 0x000180, "Member 'BP_ScopeBase_C_PlaceholderOffset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BP_ScopeBase.BP_ScopeBase_C.PlaceholderOffsetEquip
// 0x0180 (0x0180 - 0x0000)
struct BP_ScopeBase_C_PlaceholderOffsetEquip final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0020(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformLocation_ReturnValue;     // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_PlaceholderOffsetEquip) == 0x000010, "Wrong alignment on BP_ScopeBase_C_PlaceholderOffsetEquip");
static_assert(sizeof(BP_ScopeBase_C_PlaceholderOffsetEquip) == 0x000180, "Wrong size on BP_ScopeBase_C_PlaceholderOffsetEquip");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000020, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, K2Node_SwitchName_CmpSuccess) == 0x000080, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_GetSocketTransform_ReturnValue) == 0x000090, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_BreakTransform_Location) == 0x0000F0, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_BreakTransform_Rotation) == 0x000108, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_BreakTransform_Scale) == 0x000120, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_InverseTransformLocation_ReturnValue) == 0x000138, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_InverseTransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_BreakVector_X) == 0x000150, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_BreakVector_Y) == 0x000158, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_BreakVector_Z) == 0x000160, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ScopeBase_C_PlaceholderOffsetEquip, CallFunc_MakeVector_ReturnValue_1) == 0x000168, "Member 'BP_ScopeBase_C_PlaceholderOffsetEquip::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function BP_ScopeBase.BP_ScopeBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_ScopeBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_ScopeBase_C_ReceiveTick");
static_assert(sizeof(BP_ScopeBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_ScopeBase_C_ReceiveTick");
static_assert(offsetof(BP_ScopeBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_ScopeBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_ScopeBase.BP_ScopeBase_C.SpecificBeginPlayDueToWeapon
// 0x0001 (0x0001 - 0x0000)
struct BP_ScopeBase_C_SpecificBeginPlayDueToWeapon final
{
public:
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_SpecificBeginPlayDueToWeapon) == 0x000001, "Wrong alignment on BP_ScopeBase_C_SpecificBeginPlayDueToWeapon");
static_assert(sizeof(BP_ScopeBase_C_SpecificBeginPlayDueToWeapon) == 0x000001, "Wrong size on BP_ScopeBase_C_SpecificBeginPlayDueToWeapon");
static_assert(offsetof(BP_ScopeBase_C_SpecificBeginPlayDueToWeapon, K2Node_SwitchName_CmpSuccess) == 0x000000, "Member 'BP_ScopeBase_C_SpecificBeginPlayDueToWeapon::K2Node_SwitchName_CmpSuccess' has a wrong offset!");

// Function BP_ScopeBase.BP_ScopeBase_C.StopAim
// 0x0018 (0x0018 - 0x0000)
struct BP_ScopeBase_C_StopAim final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ScopeBase_C_StopAim) == 0x000008, "Wrong alignment on BP_ScopeBase_C_StopAim");
static_assert(sizeof(BP_ScopeBase_C_StopAim) == 0x000018, "Wrong size on BP_ScopeBase_C_StopAim");
static_assert(offsetof(BP_ScopeBase_C_StopAim, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_ScopeBase_C_StopAim::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

}

