#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FWD_BP

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function FWD_BP.FWD_BP_C.BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x0108 (0x0108 - 0x0000)
struct FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00E8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000108, "Wrong size on FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'FWD_BP_C_BndEvt__FWD_BP_Box_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.ExecuteUbergraph_FWD_BP
// 0x04B8 (0x04B8 - 0x0000)
struct FWD_BP_C_ExecuteUbergraph_FWD_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisKeyEvent_AxisValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0008(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_8;                        // 0x0020(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_7;                        // 0x0038(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0050(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_6;                        // 0x0068(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_5;                        // 0x0080(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x0098(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_4;                        // 0x00B0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_3;                        // 0x00C8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_2;                        // 0x00E0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_3;                            // 0x00F8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_1;                        // 0x0110(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key;                          // 0x0128(0x0018)(HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_4;                            // 0x0140(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputKeyEvent_Key_9;                        // 0x0160(0x0018)(HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0198(0x00E8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue_1;              // 0x0298(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_10;                       // 0x02B8(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x02E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0318(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_2;                          // 0x0330(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_2;                          // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_2;                          // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0348(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0360(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x0378(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFGearSkeletalMeshComponent*            CallFunc_getMesh_ReturnValue;                      // 0x0390(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_3;                          // 0x0398(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_3;                          // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_3;                          // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x03B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_7;                 // 0x03D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_5;                            // 0x03E8(0x0018)(HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0400(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0418(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_11;                       // 0x0430(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputKeyEvent_Key_12;                       // 0x0448(0x0018)(HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0460(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisKeyEvent_AxisValue_2;              // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisKeyEvent_AxisValue_1;              // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0480(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_injectMouseDX_mx_ImplicitCast;            // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0498(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_injectMouseDZ_mz_ImplicitCast;            // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2;   // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_injectMouseDY_my_ImplicitCast;            // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_ExecuteUbergraph_FWD_BP) == 0x000008, "Wrong alignment on FWD_BP_C_ExecuteUbergraph_FWD_BP");
static_assert(sizeof(FWD_BP_C_ExecuteUbergraph_FWD_BP) == 0x0004B8, "Wrong size on FWD_BP_C_ExecuteUbergraph_FWD_BP");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, EntryPoint) == 0x000000, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputAxisKeyEvent_AxisValue) == 0x000004, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputAxisKeyEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, Temp_struct_Variable) == 0x000008, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_8) == 0x000020, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_8' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_7) == 0x000038, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_7' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, Temp_struct_Variable_1) == 0x000050, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_6) == 0x000068, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_6' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_5) == 0x000080, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_5' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, Temp_struct_Variable_2) == 0x000098, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_4) == 0x0000B0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_4' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_3) == 0x0000C8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_3' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_2) == 0x0000E0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, Temp_struct_Variable_3) == 0x0000F8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_1) == 0x000110, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key) == 0x000128, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, Temp_struct_Variable_4) == 0x000140, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_Event_DeltaSeconds) == 0x000158, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_HasAuthority_ReturnValue) == 0x00015C, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_9) == 0x000160, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_9' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000178, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_ComponentBoundEvent_OtherActor) == 0x000180, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_ComponentBoundEvent_OtherComp) == 0x000188, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000190, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_ComponentBoundEvent_bFromSweep) == 0x000194, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_ComponentBoundEvent_SweepResult) == 0x000198, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_DynamicCast_AsSurvival_Player) == 0x000280, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_DynamicCast_bSuccess) == 0x000288, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_GetController_ReturnValue) == 0x000290, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_GetController_ReturnValue_1) == 0x000298, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_GetController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_X) == 0x0002A0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Y) == 0x0002A8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Z) == 0x0002B0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_10) == 0x0002B8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_10' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue) == 0x0002D0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_1) == 0x0002E8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_X_1) == 0x000300, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Y_1) == 0x000308, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Z_1) == 0x000310, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_2) == 0x000318, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_X_2) == 0x000330, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Y_2) == 0x000338, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Z_2) == 0x000340, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_3) == 0x000348, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_4) == 0x000360, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_5) == 0x000378, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_getMesh_ReturnValue) == 0x000390, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_getMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_X_3) == 0x000398, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Y_3) == 0x0003A0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_BreakVector_Z_3) == 0x0003A8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x0003B0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_6) == 0x0003B8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_MakeVector_ReturnValue_7) == 0x0003D0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_MakeVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, Temp_struct_Variable_5) == 0x0003E8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000400, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000418, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_11) == 0x000430, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_11' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputKeyEvent_Key_12) == 0x000448, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputKeyEvent_Key_12' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000460, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputAxisKeyEvent_AxisValue_2) == 0x000468, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputAxisKeyEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000470, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, K2Node_InputAxisKeyEvent_AxisValue_1) == 0x000478, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::K2Node_InputAxisKeyEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000480, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000488, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_injectMouseDX_mx_ImplicitCast) == 0x000490, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_injectMouseDX_mx_ImplicitCast' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000498, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_injectMouseDZ_mz_ImplicitCast) == 0x0004A0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_injectMouseDZ_mz_ImplicitCast' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2) == 0x0004A8, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(FWD_BP_C_ExecuteUbergraph_FWD_BP, CallFunc_injectMouseDY_my_ImplicitCast) == 0x0004B0, "Member 'FWD_BP_C_ExecuteUbergraph_FWD_BP::CallFunc_injectMouseDY_my_ImplicitCast' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2");
static_assert(sizeof(FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2");
static_assert(offsetof(FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_2::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3");
static_assert(sizeof(FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3");
static_assert(offsetof(FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_MiddleMouseButton_K2Node_InputKeyEvent_3::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_10
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_10::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadEight_K2Node_InputKeyEvent_9
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadEight_K2Node_InputKeyEvent_9::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_7
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_7::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadOne_K2Node_InputKeyEvent_8
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadOne_K2Node_InputKeyEvent_8::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_5::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadSeven_K2Node_InputKeyEvent_6::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_11::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12");
static_assert(sizeof(FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12");
static_assert(offsetof(FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_NumPadTwo_K2Node_InputKeyEvent_12::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_R_K2Node_InputKeyEvent_4
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4");
static_assert(sizeof(FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4");
static_assert(offsetof(FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_R_K2Node_InputKeyEvent_4::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0");
static_assert(sizeof(FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0");
static_assert(offsetof(FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_0::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1
// 0x0018 (0x0018 - 0x0000)
struct FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1) == 0x000008, "Wrong alignment on FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1");
static_assert(sizeof(FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1) == 0x000018, "Wrong size on FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1");
static_assert(offsetof(FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1, Key) == 0x000000, "Member 'FWD_BP_C_InpActEvt_RightMouseButton_K2Node_InputKeyEvent_1::Key' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2
// 0x0004 (0x0004 - 0x0000)
struct FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2) == 0x000004, "Wrong alignment on FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2");
static_assert(sizeof(FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2) == 0x000004, "Wrong size on FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2");
static_assert(offsetof(FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2, AxisValue) == 0x000000, "Member 'FWD_BP_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_2::AxisValue' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0
// 0x0004 (0x0004 - 0x0000)
struct FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0) == 0x000004, "Wrong alignment on FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0");
static_assert(sizeof(FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0) == 0x000004, "Wrong size on FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0");
static_assert(offsetof(FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0, AxisValue) == 0x000000, "Member 'FWD_BP_C_InpAxisKeyEvt_MouseX_K2Node_InputAxisKeyEvent_0::AxisValue' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1
// 0x0004 (0x0004 - 0x0000)
struct FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1) == 0x000004, "Wrong alignment on FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1");
static_assert(sizeof(FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1) == 0x000004, "Wrong size on FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1");
static_assert(offsetof(FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1, AxisValue) == 0x000000, "Member 'FWD_BP_C_InpAxisKeyEvt_MouseY_K2Node_InputAxisKeyEvent_1::AxisValue' has a wrong offset!");

// Function FWD_BP.FWD_BP_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct FWD_BP_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FWD_BP_C_ReceiveTick) == 0x000004, "Wrong alignment on FWD_BP_C_ReceiveTick");
static_assert(sizeof(FWD_BP_C_ReceiveTick) == 0x000004, "Wrong size on FWD_BP_C_ReceiveTick");
static_assert(offsetof(FWD_BP_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'FWD_BP_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

