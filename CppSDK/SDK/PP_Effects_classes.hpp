#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PP_Effects

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "StatType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass PP_Effects.PP_Effects_C
// 0x0BB0 (0x0E40 - 0x0290)
class APP_Effects_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SwitcherTimeline_Alpha_4415ACF84CFC89961F41D1BD505576A3; // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SwitcherTimeline__Direction_4415ACF84CFC89961F41D1BD505576A3; // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SwitcherTimeline;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Food_PP;                                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class APostProcessVolume*                     PPVolume;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      SurvivorOwner;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBPC_PlayerStatsComponent_C*            BPC_PlayerStatsComponent;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FoodVenPP;                                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DeathDesPP;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DeathBlurPP;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScopePP;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScopeEffectOnTimer;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScopeEffectOffTimer;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ScopeEffectFrequency;                              // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ScopeEffectMaskPosX;                               // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ScopeEffectMaskPosY;                               // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ScopeEffectRadius;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BleedingPP;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HitEffectPP;                                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HitEffectTimer;                                    // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectFrequency;                                // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthModifier;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthModifierUpperBound;                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            HitEffectBloodCurve;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectBloodDuration;                            // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DirtPP;                                            // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ShortRangeBlood_PP;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BloodEffectCurveShow1;                             // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BloodEffectCurveShow2;                             // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FirstBloodEffectTime;                              // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondBloodEffectTime;                             // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThirdBloodEffectTime;                              // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ZombieCloseEffectFrequency;                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BloodEffectDuration;                               // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39C[0x4];                                      // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BloodEffectFirstTimer;                             // 0x03A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BloodEffectSecondTimer;                            // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BloodEffectThirdTimer;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstBloodEffectIsActive;                          // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SecondBloodEffectIsActive;                         // 0x03B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThirdBloodEffectIsActive;                          // 0x03BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstDirtEffectIsActive;                           // 0x03BB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SecondDirtEffectIsActive;                          // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DirtEffectFrequency;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirtEffectDuration;                                // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirstDirtEffectTime;                               // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondDirtEffectTime;                              // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DirtEffectFirstTimer;                              // 0x03D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DirtEffectSecondTimer;                             // 0x03E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DirtEffectCruveShow1;                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DirtEffectCruveShow2;                              // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DirtEffectCruveShow3;                              // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BleedingEffectCurve;                               // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BleedingVignetteCurve;                             // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          BleedingEffectActive;                              // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_411[0x7];                                      // 0x0411(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BleedingEffectTimer;                               // 0x0418(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BleedingEffectProgressTimer;                       // 0x0420(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DisableBleedingEffectTimer;                        // 0x0428(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BleedingVingetteTimer;                             // 0x0430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           AvailableBleedingEffectParameters;                 // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           StartupBleedingEffectParameters;                   // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   CurrentBleedingEffectParameter;                    // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   VignetteParameterName;                             // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BleedingEffectTime;                                // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BleedingEffectDuration;                            // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BleedingEffectTickRate;                            // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BleedingEffectOnStopValue;                         // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BleedingVignetteDuration;                          // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BleedingVignetteTime;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VignetteOnStopValue;                               // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, double>                     HitEffectBloodParameterTimeMap;                    // 0x04A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HitEffectBloodActive;                              // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F1[0x7];                                      // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HitEffectBlurCurve;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitEffectBlurParameterName;                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectBlurDuration;                             // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectBlurTime;                                 // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitEffectBlurActive;                               // 0x0518(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_519[0x7];                                      // 0x0519(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HitEffectDesaturationCurve;                        // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitEffectDesaturationParameterName;                // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectDesaturationDuration;                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectDesaturationTime;                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitEffectDesaturationActive;                       // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HitEffectVignetteCurve;                            // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HitEffectVignetteParameterName;                    // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectVignetteDuration;                         // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectVignetteTime;                             // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitEffectVignetteActive;                           // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HitEffectStopTimer;                                // 0x0570(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, double>                     HitEffectBloodParameterValueMap;                   // 0x0578(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        HitEffectBlurStopValue;                            // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectDesaturationStopValue;                    // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectVignetteStopValue;                        // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectFastStopSlowModifier;                     // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitEffectFastStopInProgress;                       // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FoodEffectOnTimer;                                 // 0x05F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           FoodEffectOffTimer;                                // 0x05F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FoodEffectFrequency;                               // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FoodEffectActive;                                  // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FoodEffectDesaturationParameterName;               // 0x060C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   FoodEffectVingetteParameterName;                   // 0x0614(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61C[0x4];                                      // 0x061C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FoodLevel;                                         // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScopeEffectActive;                                 // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ScopeEffectValue;                                  // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScopeEffectSpeedModifier;                          // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScopeEffectMaxValue;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EffectValue;                                       // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetEffectValue;                                 // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FoodEffectLowerBound;                              // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FoodEffectUpperBound;                              // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            DeathEffectCurve;                                  // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DeathEffectTimer;                                  // 0x0670(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeathEffectFrequency;                              // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeathEffectDuration;                               // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeathEffectTime;                                   // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeathEffectDesaturationParameterName;              // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DeathEffectBlurParameterName;                      // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A8[0x8];                                      // 0x06A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   DefaultPPVSettings;                                // 0x06B0(0x06E0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FWeightedBlendable>             Effects;                                           // 0x0D90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        FoodHungerLevel;                                   // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FoodThirstLevel;                                   // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               LensDistortionPP;                                  // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BleedingEffectCallbackFrequency;                   // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CriticalBleedingIsActive;                          // 0x0DBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BodyCriticalEffectIsActive;                        // 0x0DBD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DBE[0x2];                                      // 0x0DBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerCutsceneComponent_C*             CutsceneComponent;                                 // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       SurvivorCamera;                                    // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        HitModifier;                                       // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            HitEffectShortVignetteCurve;                       // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        HitEffectShortVignetteDuration;                    // 0x0DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HPStatusPP;                                        // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FastHitPP;                                         // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FastHitEffectTime;                                 // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Abberation;                                        // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AbberTimer;                                        // 0x0E08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AbberTimeGlobal;                                   // 0x0E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HPTarget;                                          // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HPTimerVar;                                        // 0x0E20(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar;                                            // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E29[0x7];                                      // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTimerHandle>                   TimersArray;                                       // 0x0E30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AbberationPregress();
	void AbberationStart();
	void AbberationStop();
	void Apply_Death_Effect();
	void ApplyDirtyEffect();
	void ApplyEffects();
	void ApplyZombieCloseBloodEffect();
	void BleedingEffect();
	void BleedingEffectCallback();
	void BleedingEffectEnabled(bool Enabled);
	void BloodFirstEffect();
	void BloodSecondEffect();
	void BloodThirdEffect();
	void CalculateHealthModifier();
	void ClearAllEffects();
	void Death_Effect_Progress();
	void Depth_Of_Field_Blur();
	void DirtFirstEffect();
	void DirtSecondEffect();
	void DisableBleedingEffect();
	void DisableBleedingEffectProcess();
	void Enable_Body_Critical_Hit_Effect(bool Enable);
	void Enable_Critical_Bleeding_Effect(bool Enable);
	void EnableBleedingEffect();
	void ExecuteUbergraph_PP_Effects(int32 EntryPoint);
	void Fast_Hit_Effect_Progress();
	void FirstBloodEffectSetup();
	void FirstDirtEffectSetup();
	void FoodEffectDecreasing();
	void FoodEffectInceasing();
	void FoodEffectStartDecrease(double TargetValue, bool Death);
	void FoodEffectStartIncrease(double TargetValue);
	void GetBleedingEffectParameterName(class FName* ParameterName);
	void GetCriticalBleedingIsActive(bool* Param_CriticalBleedingIsActive);
	class FName GetParameterByAngle(double Angle);
	void GetWeightPP(class UMaterialInstance* Material, float* Weight);
	void HitEffect(double Angle);
	void HitEffectBloodProgress();
	void HitEffectBlurProgress();
	void HitEffectDesaturationProgress();
	void HitEffectFastStop();
	void HitEffectFastStopBloodProgress();
	void HitEffectFastStopBlurProgress();
	void HitEffectFastStopDesaturationProgress();
	void HitEffectFastStopProgress();
	void HitEffectFastStopVignetteProgress();
	bool HitEffectIsActive();
	void HitEffectOff();
	void HitEffectProgress();
	void HitEffectVignetteProgress();
	void HPChange();
	void HPProgress();
	void Initialize();
	void Initialize_Effects();
	void OnAiming(bool Aim);
	void OnEndCutscene();
	void OnHungerTick(double HungerLevel, double CriticalHungerLevel);
	void OnStartCutscene();
	void OnThirstTick(double ThirstLevel, double CriticalThirstLevel);
	void PP_Switcher(bool Off_);
	void ReceiveBeginPlay();
	void ResetDeathEffect();
	void ScopeEffectOffProgress();
	void ScopeEffectOnProgress();
	void SecondBloodEffectSetup();
	void SecondDirtEffectSetup();
	void SetNewCamera(class UCameraComponent* New_Camera);
	void SetupBleedingVignetteEffect();
	void SetWeightPP(class UMaterialInstance* Material, double Weight);
	void SwitcherTimeline__FinishedFunc();
	void SwitcherTimeline__UpdateFunc();
	void Testobcih();
	void ThirdBloodEffectSetup();
	void VignetteBleedingEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PP_Effects_C">();
	}
	static class APP_Effects_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APP_Effects_C>();
	}
};
static_assert(alignof(APP_Effects_C) == 0x000010, "Wrong alignment on APP_Effects_C");
static_assert(sizeof(APP_Effects_C) == 0x000E40, "Wrong size on APP_Effects_C");
static_assert(offsetof(APP_Effects_C, UberGraphFrame) == 0x000290, "Member 'APP_Effects_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DefaultSceneRoot) == 0x000298, "Member 'APP_Effects_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SwitcherTimeline_Alpha_4415ACF84CFC89961F41D1BD505576A3) == 0x0002A0, "Member 'APP_Effects_C::SwitcherTimeline_Alpha_4415ACF84CFC89961F41D1BD505576A3' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SwitcherTimeline__Direction_4415ACF84CFC89961F41D1BD505576A3) == 0x0002A4, "Member 'APP_Effects_C::SwitcherTimeline__Direction_4415ACF84CFC89961F41D1BD505576A3' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SwitcherTimeline) == 0x0002A8, "Member 'APP_Effects_C::SwitcherTimeline' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, Food_PP) == 0x0002B0, "Member 'APP_Effects_C::Food_PP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, PPVolume) == 0x0002B8, "Member 'APP_Effects_C::PPVolume' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SurvivorOwner) == 0x0002C0, "Member 'APP_Effects_C::SurvivorOwner' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BPC_PlayerStatsComponent) == 0x0002C8, "Member 'APP_Effects_C::BPC_PlayerStatsComponent' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodVenPP) == 0x0002D0, "Member 'APP_Effects_C::FoodVenPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathDesPP) == 0x0002D8, "Member 'APP_Effects_C::DeathDesPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathBlurPP) == 0x0002E0, "Member 'APP_Effects_C::DeathBlurPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopePP) == 0x0002E8, "Member 'APP_Effects_C::ScopePP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectOnTimer) == 0x0002F0, "Member 'APP_Effects_C::ScopeEffectOnTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectOffTimer) == 0x0002F8, "Member 'APP_Effects_C::ScopeEffectOffTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectFrequency) == 0x000300, "Member 'APP_Effects_C::ScopeEffectFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectMaskPosX) == 0x000308, "Member 'APP_Effects_C::ScopeEffectMaskPosX' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectMaskPosY) == 0x000310, "Member 'APP_Effects_C::ScopeEffectMaskPosY' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectRadius) == 0x000318, "Member 'APP_Effects_C::ScopeEffectRadius' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingPP) == 0x000320, "Member 'APP_Effects_C::BleedingPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectPP) == 0x000328, "Member 'APP_Effects_C::HitEffectPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectTimer) == 0x000330, "Member 'APP_Effects_C::HitEffectTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectFrequency) == 0x000338, "Member 'APP_Effects_C::HitEffectFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HealthModifier) == 0x000340, "Member 'APP_Effects_C::HealthModifier' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HealthModifierUpperBound) == 0x000348, "Member 'APP_Effects_C::HealthModifierUpperBound' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBloodCurve) == 0x000350, "Member 'APP_Effects_C::HitEffectBloodCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBloodDuration) == 0x000358, "Member 'APP_Effects_C::HitEffectBloodDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtPP) == 0x000360, "Member 'APP_Effects_C::DirtPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ShortRangeBlood_PP) == 0x000368, "Member 'APP_Effects_C::ShortRangeBlood_PP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BloodEffectCurveShow1) == 0x000370, "Member 'APP_Effects_C::BloodEffectCurveShow1' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BloodEffectCurveShow2) == 0x000378, "Member 'APP_Effects_C::BloodEffectCurveShow2' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FirstBloodEffectTime) == 0x000380, "Member 'APP_Effects_C::FirstBloodEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SecondBloodEffectTime) == 0x000384, "Member 'APP_Effects_C::SecondBloodEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ThirdBloodEffectTime) == 0x000388, "Member 'APP_Effects_C::ThirdBloodEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ZombieCloseEffectFrequency) == 0x000390, "Member 'APP_Effects_C::ZombieCloseEffectFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BloodEffectDuration) == 0x000398, "Member 'APP_Effects_C::BloodEffectDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BloodEffectFirstTimer) == 0x0003A0, "Member 'APP_Effects_C::BloodEffectFirstTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BloodEffectSecondTimer) == 0x0003A8, "Member 'APP_Effects_C::BloodEffectSecondTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BloodEffectThirdTimer) == 0x0003B0, "Member 'APP_Effects_C::BloodEffectThirdTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FirstBloodEffectIsActive) == 0x0003B8, "Member 'APP_Effects_C::FirstBloodEffectIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SecondBloodEffectIsActive) == 0x0003B9, "Member 'APP_Effects_C::SecondBloodEffectIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ThirdBloodEffectIsActive) == 0x0003BA, "Member 'APP_Effects_C::ThirdBloodEffectIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FirstDirtEffectIsActive) == 0x0003BB, "Member 'APP_Effects_C::FirstDirtEffectIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SecondDirtEffectIsActive) == 0x0003BC, "Member 'APP_Effects_C::SecondDirtEffectIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectFrequency) == 0x0003C0, "Member 'APP_Effects_C::DirtEffectFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectDuration) == 0x0003C8, "Member 'APP_Effects_C::DirtEffectDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FirstDirtEffectTime) == 0x0003CC, "Member 'APP_Effects_C::FirstDirtEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SecondDirtEffectTime) == 0x0003D0, "Member 'APP_Effects_C::SecondDirtEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectFirstTimer) == 0x0003D8, "Member 'APP_Effects_C::DirtEffectFirstTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectSecondTimer) == 0x0003E0, "Member 'APP_Effects_C::DirtEffectSecondTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectCruveShow1) == 0x0003E8, "Member 'APP_Effects_C::DirtEffectCruveShow1' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectCruveShow2) == 0x0003F0, "Member 'APP_Effects_C::DirtEffectCruveShow2' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DirtEffectCruveShow3) == 0x0003F8, "Member 'APP_Effects_C::DirtEffectCruveShow3' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectCurve) == 0x000400, "Member 'APP_Effects_C::BleedingEffectCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingVignetteCurve) == 0x000408, "Member 'APP_Effects_C::BleedingVignetteCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectActive) == 0x000410, "Member 'APP_Effects_C::BleedingEffectActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectTimer) == 0x000418, "Member 'APP_Effects_C::BleedingEffectTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectProgressTimer) == 0x000420, "Member 'APP_Effects_C::BleedingEffectProgressTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DisableBleedingEffectTimer) == 0x000428, "Member 'APP_Effects_C::DisableBleedingEffectTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingVingetteTimer) == 0x000430, "Member 'APP_Effects_C::BleedingVingetteTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, AvailableBleedingEffectParameters) == 0x000438, "Member 'APP_Effects_C::AvailableBleedingEffectParameters' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, StartupBleedingEffectParameters) == 0x000448, "Member 'APP_Effects_C::StartupBleedingEffectParameters' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, CurrentBleedingEffectParameter) == 0x000458, "Member 'APP_Effects_C::CurrentBleedingEffectParameter' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, VignetteParameterName) == 0x000460, "Member 'APP_Effects_C::VignetteParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectTime) == 0x000468, "Member 'APP_Effects_C::BleedingEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectDuration) == 0x000470, "Member 'APP_Effects_C::BleedingEffectDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectTickRate) == 0x000478, "Member 'APP_Effects_C::BleedingEffectTickRate' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectOnStopValue) == 0x000480, "Member 'APP_Effects_C::BleedingEffectOnStopValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingVignetteDuration) == 0x000488, "Member 'APP_Effects_C::BleedingVignetteDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingVignetteTime) == 0x000490, "Member 'APP_Effects_C::BleedingVignetteTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, VignetteOnStopValue) == 0x000498, "Member 'APP_Effects_C::VignetteOnStopValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBloodParameterTimeMap) == 0x0004A0, "Member 'APP_Effects_C::HitEffectBloodParameterTimeMap' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBloodActive) == 0x0004F0, "Member 'APP_Effects_C::HitEffectBloodActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBlurCurve) == 0x0004F8, "Member 'APP_Effects_C::HitEffectBlurCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBlurParameterName) == 0x000500, "Member 'APP_Effects_C::HitEffectBlurParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBlurDuration) == 0x000508, "Member 'APP_Effects_C::HitEffectBlurDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBlurTime) == 0x000510, "Member 'APP_Effects_C::HitEffectBlurTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBlurActive) == 0x000518, "Member 'APP_Effects_C::HitEffectBlurActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectDesaturationCurve) == 0x000520, "Member 'APP_Effects_C::HitEffectDesaturationCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectDesaturationParameterName) == 0x000528, "Member 'APP_Effects_C::HitEffectDesaturationParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectDesaturationDuration) == 0x000530, "Member 'APP_Effects_C::HitEffectDesaturationDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectDesaturationTime) == 0x000538, "Member 'APP_Effects_C::HitEffectDesaturationTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectDesaturationActive) == 0x000540, "Member 'APP_Effects_C::HitEffectDesaturationActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectVignetteCurve) == 0x000548, "Member 'APP_Effects_C::HitEffectVignetteCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectVignetteParameterName) == 0x000550, "Member 'APP_Effects_C::HitEffectVignetteParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectVignetteDuration) == 0x000558, "Member 'APP_Effects_C::HitEffectVignetteDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectVignetteTime) == 0x000560, "Member 'APP_Effects_C::HitEffectVignetteTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectVignetteActive) == 0x000568, "Member 'APP_Effects_C::HitEffectVignetteActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectStopTimer) == 0x000570, "Member 'APP_Effects_C::HitEffectStopTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBloodParameterValueMap) == 0x000578, "Member 'APP_Effects_C::HitEffectBloodParameterValueMap' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectBlurStopValue) == 0x0005C8, "Member 'APP_Effects_C::HitEffectBlurStopValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectDesaturationStopValue) == 0x0005D0, "Member 'APP_Effects_C::HitEffectDesaturationStopValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectVignetteStopValue) == 0x0005D8, "Member 'APP_Effects_C::HitEffectVignetteStopValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectFastStopSlowModifier) == 0x0005E0, "Member 'APP_Effects_C::HitEffectFastStopSlowModifier' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectFastStopInProgress) == 0x0005E8, "Member 'APP_Effects_C::HitEffectFastStopInProgress' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectOnTimer) == 0x0005F0, "Member 'APP_Effects_C::FoodEffectOnTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectOffTimer) == 0x0005F8, "Member 'APP_Effects_C::FoodEffectOffTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectFrequency) == 0x000600, "Member 'APP_Effects_C::FoodEffectFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectActive) == 0x000608, "Member 'APP_Effects_C::FoodEffectActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectDesaturationParameterName) == 0x00060C, "Member 'APP_Effects_C::FoodEffectDesaturationParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectVingetteParameterName) == 0x000614, "Member 'APP_Effects_C::FoodEffectVingetteParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodLevel) == 0x000620, "Member 'APP_Effects_C::FoodLevel' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectActive) == 0x000628, "Member 'APP_Effects_C::ScopeEffectActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectValue) == 0x000630, "Member 'APP_Effects_C::ScopeEffectValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectSpeedModifier) == 0x000638, "Member 'APP_Effects_C::ScopeEffectSpeedModifier' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, ScopeEffectMaxValue) == 0x000640, "Member 'APP_Effects_C::ScopeEffectMaxValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, EffectValue) == 0x000648, "Member 'APP_Effects_C::EffectValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, TargetEffectValue) == 0x000650, "Member 'APP_Effects_C::TargetEffectValue' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectLowerBound) == 0x000658, "Member 'APP_Effects_C::FoodEffectLowerBound' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodEffectUpperBound) == 0x000660, "Member 'APP_Effects_C::FoodEffectUpperBound' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectCurve) == 0x000668, "Member 'APP_Effects_C::DeathEffectCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectTimer) == 0x000670, "Member 'APP_Effects_C::DeathEffectTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectFrequency) == 0x000678, "Member 'APP_Effects_C::DeathEffectFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectDuration) == 0x000680, "Member 'APP_Effects_C::DeathEffectDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectTime) == 0x000688, "Member 'APP_Effects_C::DeathEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectDesaturationParameterName) == 0x000690, "Member 'APP_Effects_C::DeathEffectDesaturationParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DeathEffectBlurParameterName) == 0x000698, "Member 'APP_Effects_C::DeathEffectBlurParameterName' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, Camera) == 0x0006A0, "Member 'APP_Effects_C::Camera' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, DefaultPPVSettings) == 0x0006B0, "Member 'APP_Effects_C::DefaultPPVSettings' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, Effects) == 0x000D90, "Member 'APP_Effects_C::Effects' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodHungerLevel) == 0x000DA0, "Member 'APP_Effects_C::FoodHungerLevel' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FoodThirstLevel) == 0x000DA8, "Member 'APP_Effects_C::FoodThirstLevel' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, LensDistortionPP) == 0x000DB0, "Member 'APP_Effects_C::LensDistortionPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BleedingEffectCallbackFrequency) == 0x000DB8, "Member 'APP_Effects_C::BleedingEffectCallbackFrequency' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, CriticalBleedingIsActive) == 0x000DBC, "Member 'APP_Effects_C::CriticalBleedingIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, BodyCriticalEffectIsActive) == 0x000DBD, "Member 'APP_Effects_C::BodyCriticalEffectIsActive' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, CutsceneComponent) == 0x000DC0, "Member 'APP_Effects_C::CutsceneComponent' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, SurvivorCamera) == 0x000DC8, "Member 'APP_Effects_C::SurvivorCamera' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitModifier) == 0x000DD0, "Member 'APP_Effects_C::HitModifier' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectShortVignetteCurve) == 0x000DD8, "Member 'APP_Effects_C::HitEffectShortVignetteCurve' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HitEffectShortVignetteDuration) == 0x000DE0, "Member 'APP_Effects_C::HitEffectShortVignetteDuration' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HPStatusPP) == 0x000DE8, "Member 'APP_Effects_C::HPStatusPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FastHitPP) == 0x000DF0, "Member 'APP_Effects_C::FastHitPP' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, FastHitEffectTime) == 0x000DF8, "Member 'APP_Effects_C::FastHitEffectTime' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, Abberation) == 0x000E00, "Member 'APP_Effects_C::Abberation' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, AbberTimer) == 0x000E08, "Member 'APP_Effects_C::AbberTimer' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, AbberTimeGlobal) == 0x000E10, "Member 'APP_Effects_C::AbberTimeGlobal' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HPTarget) == 0x000E18, "Member 'APP_Effects_C::HPTarget' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, HPTimerVar) == 0x000E20, "Member 'APP_Effects_C::HPTimerVar' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, NewVar) == 0x000E28, "Member 'APP_Effects_C::NewVar' has a wrong offset!");
static_assert(offsetof(APP_Effects_C, TimersArray) == 0x000E30, "Member 'APP_Effects_C::TimersArray' has a wrong offset!");

}

