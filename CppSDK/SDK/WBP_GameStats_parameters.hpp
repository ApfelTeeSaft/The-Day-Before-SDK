#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GameStats

#include "Basic.hpp"

#include "E_StatEndGame_structs.hpp"


namespace SDK::Params
{

// Function WBP_GameStats.WBP_GameStats_C.LoadStats
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_GameStats_C_LoadStats final
{
public:
	TMap<E_StatEndGame, int64>                    EndGameStat;                                       // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int64>                                 CallFunc_Map_Values_Values;                        // 0x0058(0x0010)(ReferenceParm)
	TArray<E_StatEndGame>                         CallFunc_Map_Keys_Keys;                            // 0x0068(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_StatCell_C*>                  K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_StatCell_C*                          CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_StatEndGame                                 CallFunc_GetStatsType_StatType;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Array_Get_Item_1;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_GameStats_C_LoadStats) == 0x000008, "Wrong alignment on WBP_GameStats_C_LoadStats");
static_assert(sizeof(WBP_GameStats_C_LoadStats) == 0x0000B8, "Wrong size on WBP_GameStats_C_LoadStats");
static_assert(offsetof(WBP_GameStats_C_LoadStats, EndGameStat) == 0x000000, "Member 'WBP_GameStats_C_LoadStats::EndGameStat' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, Temp_int_Array_Index_Variable) == 0x000050, "Member 'WBP_GameStats_C_LoadStats::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Map_Values_Values) == 0x000058, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Map_Keys_Keys) == 0x000068, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, Temp_int_Loop_Counter_Variable) == 0x000078, "Member 'WBP_GameStats_C_LoadStats::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Add_IntInt_ReturnValue) == 0x00007C, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, K2Node_MakeArray_Array) == 0x000080, "Member 'WBP_GameStats_C_LoadStats::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Array_Length_ReturnValue) == 0x000090, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Array_Get_Item) == 0x000098, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_GetStatsType_StatType) == 0x0000A1, "Member 'WBP_GameStats_C_LoadStats::CallFunc_GetStatsType_StatType' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Array_Find_ReturnValue) == 0x0000A4, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000A8, "Member 'WBP_GameStats_C_LoadStats::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_GameStats_C_LoadStats, CallFunc_Array_Get_Item_1) == 0x0000B0, "Member 'WBP_GameStats_C_LoadStats::CallFunc_Array_Get_Item_1' has a wrong offset!");

}

