#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameHUD

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "E_NewLocation_structs.hpp"
#include "E_ActorType_structs.hpp"
#include "InfoType_structs.hpp"
#include "WE_UIMode_structs.hpp"
#include "MarkType_structs.hpp"
#include "E_NotificationType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_GameHUD.BPI_GameHUD_C
// 0x0000 (0x0028 - 0x0028)
class IBPI_GameHUD_C final : public IInterface
{
public:
	void AddMark(class FName Key, class AActor* ActorRef, bool Quest, bool ShowByLocation, const struct FVector& Location, EMarkType Type, bool* Success, class UW_Mark_C** WMark);
	void AddNewNotification(E_NotificationType NotificationType, const class FText& Title, const class FText& Body, bool* Success);
	void BannerNewLocation(E_NewLocation Location);
	void CanEnterVehicle(bool bCan, int32 SeatIndex);
	void GetDeathScreen__Widget_(class UWidget** Widget);
	void GetDefaultUIMode(EWE_UIMode* ReturnedMode);
	void GetDragInventoryItemsAllowed(bool* Enabled);
	void GetFurnitureCatalogRef(class UWBP_FurnitureShopButtons_C** FurnitureShopButtons);
	void GetGUI(class UUIW_PlayerMain_C** GUI);
	void GetGUIHidden(bool* Hidden);
	void GetInventoryTutorial(bool* Enabled);
	void GetInventoryWidget(class UMPInGameInventory_C** Widget);
	void GetItemInfoWidget(class UW_ItemInfo_C** Widget);
	void GetTutorialRewardWidget(class UWBP_TutorialItemReward_C** Widget);
	void GetTutorialSlidesWidget(class UWBP_SlidesTutorial_C** Widget);
	void GetUIMode(EWE_UIMode* ReturnedMode);
	void GetVehicleInteract(bool* Interact);
	void GetWorkBenchWidgetRef(class UWBP_Workbench_C** WorkbenchWidgetRef);
	void HideAlarmSystem();
	void HideAllUI();
	void HideAttackHint();
	void HideBandageUsingHint();
	void HideBannerNewLocation();
	void HideBleedingHint();
	void HideChoosePoint();
	void HideCraftHint();
	void HideDoorHint();
	void HideInventoryItemHint();
	void HideMacheteHint();
	void HideNewLocNotification();
	void HideWakingUpWidget();
	void HideWaterUsingHint();
	void IsShopWidgetOpen(bool* IsOpen);
	void IsStashWidgetOpen(bool* IsStashOpen);
	void ItemTypeToText(EInfoType ItemType, class FText* Text);
	void Notify_BrokenWeapon();
	void Notify_UndamagedWeapon();
	void NotifyNewLocation(const class FText& RegionName, const class FText& LocationName, bool IsCity);
	void RemoveInputHintByStage(const class FString& _Stage);
	void RemoveMark(class FName Key, bool* Success);
	void RemoveNotification(E_NotificationType NotificationType, bool* Success);
	void ResetUIModeToDefault();
	void SetAllowDragInventoryItems(bool Enable);
	void SetDragWidget(class UDragWidget_C* Widget, bool* Success);
	void SetFurnitureCatalogRef(class UWBP_FurnitureShopButtons_C* FurnitureCatalog);
	void SetInventoryTutorial(bool Enabled);
	void SetKilledByInfo(TSoftObjectPtr<class UPaperSprite> WeaponIcon, const class FString& Nickname, bool IsValid);
	void SetShopOpen(bool In_Is_Open);
	void SetStashOpen(bool InIsOpen);
	void SetUIMode(EWE_UIMode NewMode);
	void SetVehicleInteract(bool VehicleInteract);
	void SetWorkbenchWidgetRef(class UWBP_Workbench_C* WorkbenchWidgetRef);
	void ShowAlarmSystem();
	void ShowAllUI();
	void ShowAttackHint();
	void ShowBandageUsingHint();
	void ShowBinocularsHint();
	void ShowBinocularsOverlay(bool Show);
	void ShowBleedingHint(class AActor* RagActor);
	void ShowChoosePoint();
	void ShowColdHint(class AActor* Cold_Actor);
	void ShowCraftHint();
	void ShowDoorHint();
	void ShowFirstRaidHint(bool Show);
	void ShowFoodUsingHint();
	void ShowHPHint();
	void ShowHungerHint();
	void ShowInventoryHint();
	void ShowLastDoorHint();
	void ShowMacheteHint();
	void ShowRadialInteraction(bool Show, class UObject* Object, E_ActorType ObjectType);
	void ShowThirstHint();
	void ShowTutorial3DWidget(bool Show);
	void ShowWakingUpWidget();
	void ShowWaterUsingHint();
	void SurrenderButtonPressed(bool Pressed);
	void SurrenderRevive(bool Revive, const class FString& PlayerName);
	void SurrenderShow(bool Show, const class FString& KillerName);
	void UpdateInventorySlotsAvailableForDismanle(bool Check, bool Enable);
	void UpdateInventorySlotsAvaliableForSell(bool bCheck);
	void WorkRPStartTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_GameHUD_C">();
	}
	static class IBPI_GameHUD_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_GameHUD_C>();
	}
};
static_assert(alignof(IBPI_GameHUD_C) == 0x000008, "Wrong alignment on IBPI_GameHUD_C");
static_assert(sizeof(IBPI_GameHUD_C) == 0x000028, "Wrong size on IBPI_GameHUD_C");

}

