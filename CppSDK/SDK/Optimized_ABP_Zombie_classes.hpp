#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Optimized_ABP_Zombie

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_AIMovementType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass Optimized_ABP_Zombie.Optimized_ABP_Zombie_C
// 0x0150 (0x04A0 - 0x0350)
class UOptimized_ABP_Zombie_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0358(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0360(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0368(0x0020)()
	class AZombie_C*                              Zombie;                                            // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityValue;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimationAngle;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SurfaceTypeParameter;                              // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRightFoot;                                       // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseIK;                                             // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AA[0x6];                                      // 0x03AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RightFootJointTargetLocation;                      // 0x03B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftFootJointTargetLocation;                       // 0x03C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftFootJointTargetDesiredLocation;                // 0x03E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightFootJointTargetDesiredLocation;               // 0x03F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Interp_Speed;                                      // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAuthoritive;                                     // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CharacterRotationLastFrame;                        // 0x0418(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               CharacterRotation;                                 // 0x0430(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Target;                                            // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Interp;                                            // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lean;                                              // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAIMovementComponent_C*                 AIMovementComp;                                    // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStopping;                                        // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AIMovementType                              MovementType;                                      // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Accelerating;                                      // 0x046A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VelocityFromAnimation;                             // 0x046B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CalculateLean;                                     // 0x046C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtLocation;                                    // 0x0470(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target_Actor;                                      // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAtTarget;                                      // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void CalculateLeaning(double DeltaTime);
	void CalculateLookAtLocation();
	void ExecuteUbergraph_Optimized_ABP_Zombie(int32 EntryPoint);
	void InterpolateJointTargetLocations();
	void OnSetTargetActor(class AActor* TargetActor);
	void StartCalculateLeaning();
	void StopCalculateLeaning();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Optimized_ABP_Zombie_C">();
	}
	static class UOptimized_ABP_Zombie_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOptimized_ABP_Zombie_C>();
	}
};
static_assert(alignof(UOptimized_ABP_Zombie_C) == 0x000010, "Wrong alignment on UOptimized_ABP_Zombie_C");
static_assert(sizeof(UOptimized_ABP_Zombie_C) == 0x0004A0, "Wrong size on UOptimized_ABP_Zombie_C");
static_assert(offsetof(UOptimized_ABP_Zombie_C, UberGraphFrame) == 0x000350, "Member 'UOptimized_ABP_Zombie_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, AnimBlueprintExtension_PropertyAccess) == 0x000358, "Member 'UOptimized_ABP_Zombie_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, AnimBlueprintExtension_Base) == 0x000360, "Member 'UOptimized_ABP_Zombie_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, AnimGraphNode_Root) == 0x000368, "Member 'UOptimized_ABP_Zombie_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Zombie) == 0x000388, "Member 'UOptimized_ABP_Zombie_C::Zombie' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, VelocityValue) == 0x000390, "Member 'UOptimized_ABP_Zombie_C::VelocityValue' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, AnimationAngle) == 0x000398, "Member 'UOptimized_ABP_Zombie_C::AnimationAngle' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, SurfaceTypeParameter) == 0x0003A0, "Member 'UOptimized_ABP_Zombie_C::SurfaceTypeParameter' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, IsRightFoot) == 0x0003A8, "Member 'UOptimized_ABP_Zombie_C::IsRightFoot' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, UseIK) == 0x0003A9, "Member 'UOptimized_ABP_Zombie_C::UseIK' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, RightFootJointTargetLocation) == 0x0003B0, "Member 'UOptimized_ABP_Zombie_C::RightFootJointTargetLocation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, LeftFootJointTargetLocation) == 0x0003C8, "Member 'UOptimized_ABP_Zombie_C::LeftFootJointTargetLocation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, LeftFootJointTargetDesiredLocation) == 0x0003E0, "Member 'UOptimized_ABP_Zombie_C::LeftFootJointTargetDesiredLocation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, RightFootJointTargetDesiredLocation) == 0x0003F8, "Member 'UOptimized_ABP_Zombie_C::RightFootJointTargetDesiredLocation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Interp_Speed) == 0x000410, "Member 'UOptimized_ABP_Zombie_C::Interp_Speed' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, IsAuthoritive) == 0x000414, "Member 'UOptimized_ABP_Zombie_C::IsAuthoritive' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, CharacterRotationLastFrame) == 0x000418, "Member 'UOptimized_ABP_Zombie_C::CharacterRotationLastFrame' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, CharacterRotation) == 0x000430, "Member 'UOptimized_ABP_Zombie_C::CharacterRotation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Target) == 0x000448, "Member 'UOptimized_ABP_Zombie_C::Target' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Interp) == 0x000450, "Member 'UOptimized_ABP_Zombie_C::Interp' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Lean) == 0x000458, "Member 'UOptimized_ABP_Zombie_C::Lean' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, AIMovementComp) == 0x000460, "Member 'UOptimized_ABP_Zombie_C::AIMovementComp' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, IsStopping) == 0x000468, "Member 'UOptimized_ABP_Zombie_C::IsStopping' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, MovementType) == 0x000469, "Member 'UOptimized_ABP_Zombie_C::MovementType' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Accelerating) == 0x00046A, "Member 'UOptimized_ABP_Zombie_C::Accelerating' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, VelocityFromAnimation) == 0x00046B, "Member 'UOptimized_ABP_Zombie_C::VelocityFromAnimation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, CalculateLean) == 0x00046C, "Member 'UOptimized_ABP_Zombie_C::CalculateLean' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, LookAtLocation) == 0x000470, "Member 'UOptimized_ABP_Zombie_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, Target_Actor) == 0x000488, "Member 'UOptimized_ABP_Zombie_C::Target_Actor' has a wrong offset!");
static_assert(offsetof(UOptimized_ABP_Zombie_C, LookAtTarget) == 0x000490, "Member 'UOptimized_ABP_Zombie_C::LookAtTarget' has a wrong offset!");

}

