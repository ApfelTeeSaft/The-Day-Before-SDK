#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_BaseContainer

#include "Basic.hpp"

#include "W_BaseContainer_classes.hpp"
#include "W_BaseContainer_parameters.hpp"


namespace SDK
{

// Function W_BaseContainer.W_BaseContainer_C.AddHostedData
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    RemoveHostFromContainer                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::AddHostedData(class UW_BaseSlot_C* Param_Slot, bool RemoveHostFromContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "AddHostedData");

	Params::W_BaseContainer_C_AddHostedData Parms{};

	Parms.Param_Slot = Param_Slot;
	Parms.RemoveHostFromContainer = RemoveHostFromContainer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.AddItemBySlotIndex
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UW_BaseContainer_C::AddItemBySlotIndex(int32 Param_Index, const struct FContainerPickupsInfo& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "AddItemBySlotIndex");

	Params::W_BaseContainer_C_AddItemBySlotIndex Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.AddItemSomewhere
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FContainerPickupsInfo            Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UW_BaseContainer_C::AddItemSomewhere(const struct FContainerPickupsInfo& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "AddItemSomewhere");

	Params::W_BaseContainer_C_AddItemSomewhere Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.AddSplitedItemToSlot
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SplitCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::AddSplitedItemToSlot(int32 SplitCount, class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "AddSplitedItemToSlot");

	Params::W_BaseContainer_C_AddSplitedItemToSlot Parms{};

	Parms.SplitCount = SplitCount;
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.BindSplitWidgetEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSplitWidget_C*             SplitWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::BindSplitWidgetEvents(class UW_BaseSplitWidget_C* SplitWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "BindSplitWidgetEvents");

	Params::W_BaseContainer_C_BindSplitWidgetEvents Parms{};

	Parms.SplitWidget = SplitWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.CalculateHighlighterDim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UW_BaseSlot_C*>            Slots                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FVector2D                        Dimention                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::CalculateHighlighterDim(TArray<class UW_BaseSlot_C*>& Slots, struct FVector2D* Dimention)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CalculateHighlighterDim");

	Params::W_BaseContainer_C_CalculateHighlighterDim Parms{};

	Parms.Slots = std::move(Slots);

	UObject::ProcessEvent(Func, &Parms);

	Slots = std::move(Parms.Slots);

	if (Dimention != nullptr)
		*Dimention = std::move(Parms.Dimention);
}


// Function W_BaseContainer.W_BaseContainer_C.CalculateHighlighterPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UW_BaseSlot_C*>            HighlightedSlots                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector2D UW_BaseContainer_C::CalculateHighlighterPosition(TArray<class UW_BaseSlot_C*>& HighlightedSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CalculateHighlighterPosition");

	Params::W_BaseContainer_C_CalculateHighlighterPosition Parms{};

	Parms.HighlightedSlots = std::move(HighlightedSlots);

	UObject::ProcessEvent(Func, &Parms);

	HighlightedSlots = std::move(Parms.HighlightedSlots);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.Can Drop On Slot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Can                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::Can_Drop_On_Slot(class UW_BaseContainer_C* SenderContainer, class UW_BaseSlot_C* RecipientSlot, bool* Can)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Can Drop On Slot");

	Params::W_BaseContainer_C_Can_Drop_On_Slot Parms{};

	Parms.SenderContainer = SenderContainer;
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);

	if (Can != nullptr)
		*Can = Parms.Can;
}


// Function W_BaseContainer.W_BaseContainer_C.Can Stack On Slot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       SenderItemInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSizeX                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSizeY                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Canstack                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UW_BaseSlot_C*>            TargetSlotsArray                                       (Parm, OutParm, ContainsInstancedReference)

void UW_BaseContainer_C::Can_Stack_On_Slot(const struct FFItemInfo& SenderItemInfo, class UW_BaseSlot_C* RecipientSlot, int32 ItemSizeX, int32 ItemSizeY, bool IsRotated, bool* Canstack, TArray<class UW_BaseSlot_C*>* TargetSlotsArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Can Stack On Slot");

	Params::W_BaseContainer_C_Can_Stack_On_Slot Parms{};

	Parms.SenderItemInfo = std::move(SenderItemInfo);
	Parms.RecipientSlot = RecipientSlot;
	Parms.ItemSizeX = ItemSizeX;
	Parms.ItemSizeY = ItemSizeY;
	Parms.IsRotated = IsRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Canstack != nullptr)
		*Canstack = Parms.Canstack;

	if (TargetSlotsArray != nullptr)
		*TargetSlotsArray = std::move(Parms.TargetSlotsArray);
}


// Function W_BaseContainer.W_BaseContainer_C.CanDrag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Can                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::CanDrag(class UW_BaseSlot_C* Param_Slot, bool* Can)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CanDrag");

	Params::W_BaseContainer_C_CanDrag Parms{};

	Parms.Param_Slot = Param_Slot;

	UObject::ProcessEvent(Func, &Parms);

	if (Can != nullptr)
		*Can = Parms.Can;
}


// Function W_BaseContainer.W_BaseContainer_C.CanDragItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::CanDragItem(class UW_BaseSlot_C* Param_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CanDragItem");

	Params::W_BaseContainer_C_CanDragItem Parms{};

	Parms.Param_Slot = Param_Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.ChangeCountOfHostedItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::ChangeCountOfHostedItem(int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ChangeCountOfHostedItem");

	Params::W_BaseContainer_C_ChangeCountOfHostedItem Parms{};

	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.ChangeItemCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::ChangeItemCount(int32 SlotIndex, int32 NewCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ChangeItemCount");

	Params::W_BaseContainer_C_ChangeItemCount Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.NewCount = NewCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.ClearContainer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_BaseContainer_C::ClearContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ClearContainer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.ClearHostedData
// (BlueprintCallable, BlueprintEvent)

void UW_BaseContainer_C::ClearHostedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ClearHostedData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_BaseContainer_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.ContainerEvent_ItemIndexChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BaseContainerType                     Param_ContainerType                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OldIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::ContainerEvent_ItemIndexChanged__DelegateSignature(E_BaseContainerType Param_ContainerType, int32 OldIndex, int32 NewIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ContainerEvent_ItemIndexChanged__DelegateSignature");

	Params::W_BaseContainer_C_ContainerEvent_ItemIndexChanged__DelegateSignature Parms{};

	Parms.Param_ContainerType = Param_ContainerType;
	Parms.OldIndex = OldIndex;
	Parms.NewIndex = NewIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.ContainerEvent_SplitItemBetweenSlots__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BaseContainerType                     Param_ContainerType                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SenderSlotIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RecipientSlotIndex                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SplitCount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::ContainerEvent_SplitItemBetweenSlots__DelegateSignature(E_BaseContainerType Param_ContainerType, int32 SenderSlotIndex, int32 RecipientSlotIndex, int32 SplitCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ContainerEvent_SplitItemBetweenSlots__DelegateSignature");

	Params::W_BaseContainer_C_ContainerEvent_SplitItemBetweenSlots__DelegateSignature Parms{};

	Parms.Param_ContainerType = Param_ContainerType;
	Parms.SenderSlotIndex = SenderSlotIndex;
	Parms.RecipientSlotIndex = RecipientSlotIndex;
	Parms.SplitCount = SplitCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.CreateGrid
// (Protected, BlueprintCallable, BlueprintEvent)

void UW_BaseContainer_C::CreateGrid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CreateGrid");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_BaseContainer_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.ExecuteUbergraph_W_BaseContainer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::ExecuteUbergraph_W_BaseContainer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ExecuteUbergraph_W_BaseContainer");

	Params::W_BaseContainer_C_ExecuteUbergraph_W_BaseContainer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.FindAndCheckTargetLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSizeX                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSizeY                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Candrop                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UW_BaseSlot_C*>            TargetSlotsArray                                       (Parm, OutParm, ContainsInstancedReference)

void UW_BaseContainer_C::FindAndCheckTargetLocation(class UW_BaseSlot_C* RecipientSlot, int32 ItemSizeX, int32 ItemSizeY, bool IsRotated, bool* Candrop, TArray<class UW_BaseSlot_C*>* TargetSlotsArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "FindAndCheckTargetLocation");

	Params::W_BaseContainer_C_FindAndCheckTargetLocation Parms{};

	Parms.RecipientSlot = RecipientSlot;
	Parms.ItemSizeX = ItemSizeX;
	Parms.ItemSizeY = ItemSizeY;
	Parms.IsRotated = IsRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (Candrop != nullptr)
		*Candrop = Parms.Candrop;

	if (TargetSlotsArray != nullptr)
		*TargetSlotsArray = std::move(Parms.TargetSlotsArray);
}


// Function W_BaseContainer.W_BaseContainer_C.FindEnvirons
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemSizeX                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSizeY                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   BaseIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UW_BaseSlot_C*>            Slots                                                  (Parm, OutParm, ContainsInstancedReference)

void UW_BaseContainer_C::FindEnvirons(int32 ItemSizeX, int32 ItemSizeY, int32 BaseIndex, TArray<class UW_BaseSlot_C*>* Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "FindEnvirons");

	Params::W_BaseContainer_C_FindEnvirons Parms{};

	Parms.ItemSizeX = ItemSizeX;
	Parms.ItemSizeY = ItemSizeY;
	Parms.BaseIndex = BaseIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Slots != nullptr)
		*Slots = std::move(Parms.Slots);
}


// Function W_BaseContainer.W_BaseContainer_C.Get Recipient Slot with Offset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   X_SenderSlotSize                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y_SenderSlotSize                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RealRecipientSlotIndex                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DropPivotIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::Get_Recipient_Slot_with_Offset(int32 X_SenderSlotSize, int32 Y_SenderSlotSize, bool IsRotated, int32 RealRecipientSlotIndex, int32 DropPivotIndex, bool* Result, class UW_BaseSlot_C** RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Get Recipient Slot with Offset");

	Params::W_BaseContainer_C_Get_Recipient_Slot_with_Offset Parms{};

	Parms.X_SenderSlotSize = X_SenderSlotSize;
	Parms.Y_SenderSlotSize = Y_SenderSlotSize;
	Parms.IsRotated = IsRotated;
	Parms.RealRecipientSlotIndex = RealRecipientSlotIndex;
	Parms.DropPivotIndex = DropPivotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (RecipientSlot != nullptr)
		*RecipientSlot = Parms.RecipientSlot;
}


// Function W_BaseContainer.W_BaseContainer_C.GetFirstValidItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetFirstValidItem(int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetFirstValidItem");

	Params::W_BaseContainer_C_GetFirstValidItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function W_BaseContainer.W_BaseContainer_C.GetIndexOfHostedItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetIndexOfHostedItem(int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetIndexOfHostedItem");

	Params::W_BaseContainer_C_GetIndexOfHostedItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function W_BaseContainer.W_BaseContainer_C.GetItemRef
// (Public, BlueprintCallable, BlueprintEvent)

void UW_BaseContainer_C::GetItemRef()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetItemRef");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.GetNumItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UW_BaseContainer_C::GetNumItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetNumItems");

	Params::W_BaseContainer_C_GetNumItems Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.GetSlotByIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    Value                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetSlotByIndex(int32 SlotIndex, class UW_BaseSlot_C** Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetSlotByIndex");

	Params::W_BaseContainer_C_GetSlotByIndex Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function W_BaseContainer.W_BaseContainer_C.GetSlotSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FF_SlotSettings                  Param_SlotSettings                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetSlotSettings(struct FF_SlotSettings* Param_SlotSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetSlotSettings");

	Params::W_BaseContainer_C_GetSlotSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SlotSettings != nullptr)
		*Param_SlotSettings = std::move(Parms.Param_SlotSettings);
}


// Function W_BaseContainer.W_BaseContainer_C.HighlightSlots
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        SlotDim                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::HighlightSlots(int32 SlotIndex, const struct FVector2D& SlotDim, bool IsRotated, class UW_BaseSlot_C* SlotRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "HighlightSlots");

	Params::W_BaseContainer_C_HighlightSlots Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.SlotDim = std::move(SlotDim);
	Parms.IsRotated = IsRotated;
	Parms.SlotRef = SlotRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.IsHostRotationChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bIsHostRotationChanged                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::IsHostRotationChanged(bool* Param_bIsHostRotationChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "IsHostRotationChanged");

	Params::W_BaseContainer_C_IsHostRotationChanged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bIsHostRotationChanged != nullptr)
		*Param_bIsHostRotationChanged = Parms.Param_bIsHostRotationChanged;
}


// Function W_BaseContainer.W_BaseContainer_C.IsItemPriceless
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ItemId                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_BaseContainer_C::IsItemPriceless(const int32& ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "IsItemPriceless");

	Params::W_BaseContainer_C_IsItemPriceless Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.MoveHighlighter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UW_BaseSlot_C*>            HighlightedSlots                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Candrop                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::MoveHighlighter(class UW_BaseSlot_C* SlotRef, TArray<class UW_BaseSlot_C*>& HighlightedSlots, bool Candrop, bool Rotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "MoveHighlighter");

	Params::W_BaseContainer_C_MoveHighlighter Parms{};

	Parms.SlotRef = SlotRef;
	Parms.HighlightedSlots = std::move(HighlightedSlots);
	Parms.Candrop = Candrop;
	Parms.Rotated = Rotated;

	UObject::ProcessEvent(Func, &Parms);

	HighlightedSlots = std::move(Parms.HighlightedSlots);
}


// Function W_BaseContainer.W_BaseContainer_C.MoveHostedItemToSlot
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::MoveHostedItemToSlot(class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "MoveHostedItemToSlot");

	Params::W_BaseContainer_C_MoveHostedItemToSlot Parms{};

	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.OccupySlotsForSizeOfItem
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemSlotSizeX                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSlotSizeY                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSlotIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::OccupySlotsForSizeOfItem(int32 ItemSlotSizeX, int32 ItemSlotSizeY, int32 ItemSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OccupySlotsForSizeOfItem");

	Params::W_BaseContainer_C_OccupySlotsForSizeOfItem Parms{};

	Parms.ItemSlotSizeX = ItemSlotSizeX;
	Parms.ItemSlotSizeY = ItemSlotSizeY;
	Parms.ItemSlotIndex = ItemSlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.OnDragCancelled
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OnDragCancelled");

	Params::W_BaseContainer_C_OnDragCancelled Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.OnDragLeave
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OnDragLeave");

	Params::W_BaseContainer_C_OnDragLeave Parms{};

	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.OnDrop
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// class UDragDropOperation*               Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_BaseContainer_C::OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OnDrop");

	Params::W_BaseContainer_C_OnDrop Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.PointerEvent = std::move(PointerEvent);
	Parms.Operation = Operation;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_BaseContainer_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.OnKeyDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_BaseContainer_C::OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OnKeyDown");

	Params::W_BaseContainer_C_OnKeyDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.OnKeyUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FKeyEvent                        InKeyEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_BaseContainer_C::OnKeyUp(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "OnKeyUp");

	Params::W_BaseContainer_C_OnKeyUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InKeyEvent = std::move(InKeyEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.RecalculateHighlighterSize
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  SingleSlotSizeX                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  SingleSlotSizeY                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Dimention                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceBetweenSlots                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Size                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::RecalculateHighlighterSize(double SingleSlotSizeX, double SingleSlotSizeY, const struct FVector2D& Dimention, double DistanceBetweenSlots, struct FVector2D* Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "RecalculateHighlighterSize");

	Params::W_BaseContainer_C_RecalculateHighlighterSize Parms{};

	Parms.SingleSlotSizeX = SingleSlotSizeX;
	Parms.SingleSlotSizeY = SingleSlotSizeY;
	Parms.Dimention = std::move(Dimention);
	Parms.DistanceBetweenSlots = DistanceBetweenSlots;

	UObject::ProcessEvent(Func, &Parms);

	if (Size != nullptr)
		*Size = std::move(Parms.Size);
}


// Function W_BaseContainer.W_BaseContainer_C.Remove Item By Slot Index
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::Remove_Item_By_Slot_Index(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Remove Item By Slot Index");

	Params::W_BaseContainer_C_Remove_Item_By_Slot_Index Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.ReturnHostedDataToSlot
// (Public, BlueprintCallable, BlueprintEvent)

void UW_BaseContainer_C::ReturnHostedDataToSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "ReturnHostedDataToSlot");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.SelfTestForSlots
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UW_BaseContainer_C::SelfTestForSlots(class UW_BaseContainer_C* SenderContainer, class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SelfTestForSlots");

	Params::W_BaseContainer_C_SelfTestForSlots Parms{};

	Parms.SenderContainer = SenderContainer;
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_BaseContainer.W_BaseContainer_C.SetCapacity
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Length                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SetCapacity(int32 Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SetCapacity");

	Params::W_BaseContainer_C_SetCapacity Parms{};

	Parms.Length = Length;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SetCollisionEnabled
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In_Is_Enabled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SetCollisionEnabled(bool In_Is_Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SetCollisionEnabled");

	Params::W_BaseContainer_C_SetCollisionEnabled Parms{};

	Parms.In_Is_Enabled = In_Is_Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SetHighlighterBrush
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Dim                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Candrop                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPaperSprite*                     BG_Sprite1                                             (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UW_BaseContainer_C::SetHighlighterBrush(const struct FVector2D& Dim, bool IsRotated, bool Candrop, class UPaperSprite** BG_Sprite1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SetHighlighterBrush");

	Params::W_BaseContainer_C_SetHighlighterBrush Parms{};

	Parms.Dim = std::move(Dim);
	Parms.IsRotated = IsRotated;
	Parms.Candrop = Candrop;

	UObject::ProcessEvent(Func, &Parms);

	if (BG_Sprite1 != nullptr)
		*BG_Sprite1 = Parms.BG_Sprite1;
}


// Function W_BaseContainer.W_BaseContainer_C.SetHostedItemRotate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Rotated                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SetHostedItemRotate(bool Rotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SetHostedItemRotate");

	Params::W_BaseContainer_C_SetHostedItemRotate Parms{};

	Parms.Rotated = Rotated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SetHostRotationChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bIsHostRotationChanged                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SetHostRotationChanged(bool Param_bIsHostRotationChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SetHostRotationChanged");

	Params::W_BaseContainer_C_SetHostRotationChanged Parms{};

	Parms.Param_bIsHostRotationChanged = Param_bIsHostRotationChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.Slot Event Stack Binding
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       SenderItemInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::Slot_Event_Stack_Binding(const struct FFItemInfo& SenderItemInfo, class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Slot Event Stack Binding");

	Params::W_BaseContainer_C_Slot_Event_Stack_Binding Parms{};

	Parms.SenderItemInfo = std::move(SenderItemInfo);
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_DragCanceled__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_DragCanceled__DelegateSignature(class UW_BaseSlot_C* SlotRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_DragCanceled__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_DragCanceled__DelegateSignature Parms{};

	Parms.SlotRef = SlotRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_DragCanceled_Binding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_DragCanceled_Binding(class UW_BaseSlot_C* SlotRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_DragCanceled_Binding");

	Params::W_BaseContainer_C_SlotEvent_DragCanceled_Binding Parms{};

	Parms.SlotRef = SlotRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_DragEnter__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_DragEnter__DelegateSignature(class UW_BaseSlot_C* SlotRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_DragEnter__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_DragEnter__DelegateSignature Parms{};

	Parms.SlotRef = SlotRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_DragLeave__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_DragLeave__DelegateSignature(class UW_BaseSlot_C* SlotRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_DragLeave__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_DragLeave__DelegateSignature Parms{};

	Parms.SlotRef = SlotRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_DragStarted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseDragWidget_C*              DragWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_DragStarted__DelegateSignature(class UW_BaseSlot_C* SlotRef, class UW_BaseDragWidget_C* DragWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_DragStarted__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_DragStarted__DelegateSignature Parms{};

	Parms.SlotRef = SlotRef;
	Parms.DragWidget = DragWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_DragStarted_Binding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    SlotRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseDragWidget_C*              DragWidget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_DragStarted_Binding(class UW_BaseSlot_C* SlotRef, class UW_BaseDragWidget_C* DragWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_DragStarted_Binding");

	Params::W_BaseContainer_C_SlotEvent_DragStarted_Binding Parms{};

	Parms.SlotRef = SlotRef;
	Parms.DragWidget = DragWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_Drop__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_Drop__DelegateSignature(class UW_BaseContainer_C* SenderContainer, class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_Drop__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_Drop__DelegateSignature Parms{};

	Parms.SenderContainer = SenderContainer;
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_Drop_Binding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_Drop_Binding(class UW_BaseContainer_C* SenderContainer, class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_Drop_Binding");

	Params::W_BaseContainer_C_SlotEvent_Drop_Binding Parms{};

	Parms.SenderContainer = SenderContainer;
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_Hover__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_Hover__DelegateSignature(class UW_BaseSlot_C* Param_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_Hover__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_Hover__DelegateSignature Parms{};

	Parms.Param_Slot = Param_Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_MouseButtonDoubleClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_BaseContainer_C::SlotEvent_MouseButtonDoubleClicked__DelegateSignature(class UW_BaseSlot_C* Param_Slot, const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_MouseButtonDoubleClicked__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_MouseButtonDoubleClicked__DelegateSignature Parms{};

	Parms.Param_Slot = Param_Slot;
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_MouseButtonPressed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FPointerEvent                    PointerEvent                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_BaseContainer_C::SlotEvent_MouseButtonPressed__DelegateSignature(class UW_BaseSlot_C* Param_Slot, const struct FPointerEvent& PointerEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_MouseButtonPressed__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_MouseButtonPressed__DelegateSignature Parms{};

	Parms.Param_Slot = Param_Slot;
	Parms.PointerEvent = std::move(PointerEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_Stack__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       SenderItemInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_Stack__DelegateSignature(const struct FFItemInfo& SenderItemInfo, class UW_BaseSlot_C* RecipientSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_Stack__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_Stack__DelegateSignature Parms{};

	Parms.SenderItemInfo = std::move(SenderItemInfo);
	Parms.RecipientSlot = RecipientSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_StatusChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// E_SlotStatus                            Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_StatusChanged__DelegateSignature(class UW_BaseSlot_C* Param_Slot, E_SlotStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_StatusChanged__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_StatusChanged__DelegateSignature Parms{};

	Parms.Param_Slot = Param_Slot;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SlotEvent_Unhover__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    Param_Slot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SlotEvent_Unhover__DelegateSignature(class UW_BaseSlot_C* Param_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SlotEvent_Unhover__DelegateSignature");

	Params::W_BaseContainer_C_SlotEvent_Unhover__DelegateSignature Parms{};

	Parms.Param_Slot = Param_Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SplitWidgetEvent_OnAccept_Binding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SplitWidgetEvent_OnAccept_Binding(int32 Count, class UW_BaseSlot_C* RecipientSlot, class UW_BaseContainer_C* SenderContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SplitWidgetEvent_OnAccept_Binding");

	Params::W_BaseContainer_C_SplitWidgetEvent_OnAccept_Binding Parms{};

	Parms.Count = Count;
	Parms.RecipientSlot = RecipientSlot;
	Parms.SenderContainer = SenderContainer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SplitWidgetEvent_OnAcceptFull_Binding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseSlot_C*                    RecipientSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SplitWidgetEvent_OnAcceptFull_Binding(class UW_BaseSlot_C* RecipientSlot, class UW_BaseContainer_C* SenderContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SplitWidgetEvent_OnAcceptFull_Binding");

	Params::W_BaseContainer_C_SplitWidgetEvent_OnAcceptFull_Binding Parms{};

	Parms.RecipientSlot = RecipientSlot;
	Parms.SenderContainer = SenderContainer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.SplitWidgetEvent_OnCancel_Binding
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BaseContainer_C*               SenderContainer                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::SplitWidgetEvent_OnCancel_Binding(class UW_BaseContainer_C* SenderContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "SplitWidgetEvent_OnCancel_Binding");

	Params::W_BaseContainer_C_SplitWidgetEvent_OnCancel_Binding Parms{};

	Parms.SenderContainer = SenderContainer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_BaseContainer.W_BaseContainer_C.UnbindSlplitWidgetEvents
// (BlueprintCallable, BlueprintEvent)

void UW_BaseContainer_C::UnbindSlplitWidgetEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "UnbindSlplitWidgetEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_BaseContainer.W_BaseContainer_C.CalculateHighlighterSize
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        SlotDim                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRotated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        HighlighterSize                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::CalculateHighlighterSize(const struct FVector2D& SlotDim, bool IsRotated, struct FVector2D* HighlighterSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CalculateHighlighterSize");

	Params::W_BaseContainer_C_CalculateHighlighterSize Parms{};

	Parms.SlotDim = std::move(SlotDim);
	Parms.IsRotated = IsRotated;

	UObject::ProcessEvent(Func, &Parms);

	if (HighlighterSize != nullptr)
		*HighlighterSize = std::move(Parms.HighlighterSize);
}


// Function W_BaseContainer.W_BaseContainer_C.CanAddItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FContainerPickupsInfo            Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Can                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToStack                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::CanAddItem(const struct FContainerPickupsInfo& Item, bool* Can, bool* ToStack) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "CanAddItem");

	Params::W_BaseContainer_C_CanAddItem Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);

	if (Can != nullptr)
		*Can = Parms.Can;

	if (ToStack != nullptr)
		*ToStack = Parms.ToStack;
}


// Function W_BaseContainer.W_BaseContainer_C.Get Capacity
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Used                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCapacity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::Get_Capacity(int32* Used, int32* MaxCapacity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Get Capacity");

	Params::W_BaseContainer_C_Get_Capacity Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Used != nullptr)
		*Used = Parms.Used;

	if (MaxCapacity != nullptr)
		*MaxCapacity = Parms.MaxCapacity;
}


// Function W_BaseContainer.W_BaseContainer_C.Get Drop Offset
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   PivotIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   X_SlotSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y_SlotSize                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   X_Offset                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y_Offset                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::Get_Drop_Offset(int32 PivotIndex, int32 X_SlotSize, int32 Y_SlotSize, int32* X_Offset, int32* Y_Offset) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "Get Drop Offset");

	Params::W_BaseContainer_C_Get_Drop_Offset Parms{};

	Parms.PivotIndex = PivotIndex;
	Parms.X_SlotSize = X_SlotSize;
	Parms.Y_SlotSize = Y_SlotSize;

	UObject::ProcessEvent(Func, &Parms);

	if (X_Offset != nullptr)
		*X_Offset = Parms.X_Offset;

	if (Y_Offset != nullptr)
		*Y_Offset = Parms.Y_Offset;
}


// Function W_BaseContainer.W_BaseContainer_C.GetContainerType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// E_BaseContainerType                     Param_ContainerType                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetContainerType(E_BaseContainerType* Param_ContainerType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetContainerType");

	Params::W_BaseContainer_C_GetContainerType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ContainerType != nullptr)
		*Param_ContainerType = Parms.Param_ContainerType;
}


// Function W_BaseContainer.W_BaseContainer_C.GetCountOfHostedItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetCountOfHostedItem(int32* Count) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetCountOfHostedItem");

	Params::W_BaseContainer_C_GetCountOfHostedItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function W_BaseContainer.W_BaseContainer_C.GetDataOfHostedItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FContainerPickupsInfo            Param_DataOfHostedItem                                 (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UW_BaseContainer_C::GetDataOfHostedItem(struct FContainerPickupsInfo* Param_DataOfHostedItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetDataOfHostedItem");

	Params::W_BaseContainer_C_GetDataOfHostedItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_DataOfHostedItem != nullptr)
		*Param_DataOfHostedItem = std::move(Parms.Param_DataOfHostedItem);
}


// Function W_BaseContainer.W_BaseContainer_C.GetEmptySlot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FContainerPickupsInfo            Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    EmptySlotFound_                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    SlotRef                                                (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetEmptySlot(const struct FContainerPickupsInfo& Item, bool* EmptySlotFound_, class UW_BaseSlot_C** SlotRef) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetEmptySlot");

	Params::W_BaseContainer_C_GetEmptySlot Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);

	if (EmptySlotFound_ != nullptr)
		*EmptySlotFound_ = Parms.EmptySlotFound_;

	if (SlotRef != nullptr)
		*SlotRef = Parms.SlotRef;
}


// Function W_BaseContainer.W_BaseContainer_C.GetIndexBySlotLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ColumnIndex_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RowIndex_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetIndexBySlotLocation(int32 ColumnIndex_, int32 RowIndex_, int32* SlotIndex, bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetIndexBySlotLocation");

	Params::W_BaseContainer_C_GetIndexBySlotLocation Parms{};

	Parms.ColumnIndex_ = ColumnIndex_;
	Parms.RowIndex_ = RowIndex_;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function W_BaseContainer.W_BaseContainer_C.GetItemsWeight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  Weight                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetItemsWeight(double* Weight) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetItemsWeight");

	Params::W_BaseContainer_C_GetItemsWeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Weight != nullptr)
		*Weight = Parms.Weight;
}


// Function W_BaseContainer.W_BaseContainer_C.GetSizeOfHostedItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetSizeOfHostedItem(int32* X, int32* Y) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetSizeOfHostedItem");

	Params::W_BaseContainer_C_GetSizeOfHostedItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;
}


// Function W_BaseContainer.W_BaseContainer_C.GetSlotByItemId
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    Slot_Ref                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    SlotFound_                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetSlotByItemId(int32 ItemId, class UW_BaseSlot_C** Slot_Ref, bool* SlotFound_) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetSlotByItemId");

	Params::W_BaseContainer_C_GetSlotByItemId Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Slot_Ref != nullptr)
		*Slot_Ref = Parms.Slot_Ref;

	if (SlotFound_ != nullptr)
		*SlotFound_ = Parms.SlotFound_;
}


// Function W_BaseContainer.W_BaseContainer_C.GetSlotByName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class FName                             ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UW_BaseSlot_C*                    SlotWidget                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetSlotByName(class FName ItemName, class UW_BaseSlot_C** SlotWidget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetSlotByName");

	Params::W_BaseContainer_C_GetSlotByName Parms{};

	Parms.ItemName = ItemName;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotWidget != nullptr)
		*SlotWidget = Parms.SlotWidget;
}


// Function W_BaseContainer.W_BaseContainer_C.GetSlotLocationByIndex
// (Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ColumnIndex_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RowIndex_                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::GetSlotLocationByIndex(int32 SlotIndex, int32* ColumnIndex_, int32* RowIndex_) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "GetSlotLocationByIndex");

	Params::W_BaseContainer_C_GetSlotLocationByIndex Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (ColumnIndex_ != nullptr)
		*ColumnIndex_ = Parms.ColumnIndex_;

	if (RowIndex_ != nullptr)
		*RowIndex_ = Parms.RowIndex_;
}


// Function W_BaseContainer.W_BaseContainer_C.IsContainerHost?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::IsContainerHost_(bool* Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "IsContainerHost?");

	Params::W_BaseContainer_C_IsContainerHost_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function W_BaseContainer.W_BaseContainer_C.IsHostedItemRotate?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Rotated                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::IsHostedItemRotate_(bool* Rotated) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "IsHostedItemRotate?");

	Params::W_BaseContainer_C_IsHostedItemRotate_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotated != nullptr)
		*Rotated = Parms.Rotated;
}


// Function W_BaseContainer.W_BaseContainer_C.NeedSplitEventForHostingItem?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Res                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_BaseContainer_C::NeedSplitEventForHostingItem_(bool* Res) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_BaseContainer_C", "NeedSplitEventForHostingItem?");

	Params::W_BaseContainer_C_NeedSplitEventForHostingItem_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Res != nullptr)
		*Res = Parms.Res;
}

}

