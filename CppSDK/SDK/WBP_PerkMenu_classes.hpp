#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PerkMenu

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "WS_CharaterPerks_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_PerkMenu.WBP_PerkMenu_C
// 0x0220 (0x04A0 - 0x0280)
class UWBP_PerkMenu_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Show_PerkDialogue;                                 // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UInvalidationBox*                       InvalidationBox_1;                                 // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Text_CurrentPoints;                                // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_PageNumber;                              // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMG_LabelText_C*                       UMG_LabelText_Negative;                            // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMG_LabelText_C*                       UMG_LabelText_Positive;                            // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMG_LabelText_C*                       UMG_LabelText_Selected;                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      UniformGridPanel__Perks_Negative;                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      UniformGridPanel__Perks_Positive;                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      UniformGridPanel__Perks_Selected;                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Perks_Negative;                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Perks_Picked_Negative;                 // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Perks_Picked_Positive;                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Perks_Positive;                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_DialoguePerks_C*                     W_DialoguePerks;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_ModalWindowButton_C*                 W_HintButton_Accept;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_ModalWindowButton_C*                 W_HintButton_Back;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CraftErrorMessage_C*               WBP_CraftErrorMessage;                             // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             AcceptButtonCalled_PerkMenu_ED;                    // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             BackButtonCalled_PerkMenu_ED;                      // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Curr_Real_Points;                                  // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_CharacterCreate_C*                 WBP_CharacterCreate;                               // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             BackButtonTraits;                                  // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           UpdatingCheckPoints;                               // 0x0358(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_PerkCard_C*>                  Last_Picked_Perk;                                  // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         PositiveTotalPoint;                                // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NegativeTotalPoint;                                // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWS_CharaterPerks                      GivenInfo;                                         // 0x0378(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         TraitsPerRow_Main;                                 // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TraitsPerRow_Selected;                             // 0x0434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinTraitsNumber;                                   // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSelectedPerksNumber;                            // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_PerkCard_C*>                  PositivePerks;                                     // 0x0440(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_PerkCard_C*>                  NegativePerks;                                     // 0x0450(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UW_PerkCard_C*>                  SelectedPerks;                                     // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UCharacterCreateSave_C*                 GI_Character_Save_Ref;                             // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_PerkCard_C*>                  EmptyPerksSlots;                                   // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWBP_PerkInfo_C*                        Perk_Info;                                         // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultPerkPoints;                                 // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerkTestSave_C*                        Perk_Save_Ref;                                     // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void Accept_Message();
	void Accept_Confirmation_Perks();
	void AcceptButtonCalled_PerkMenu_ED__DelegateSignature();
	void AddChildrenPerks();
	void BackButtonCalled_PerkMenu_ED__DelegateSignature();
	void BackButtonTraits__DelegateSignature();
	void BindedEvent_HandlePressOnCard(class UW_PerkCard_C* GivenPerkCard);
	void BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_2_PressedAccept_PerkDialogue_ED__DelegateSignature();
	void BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_3_PressedDecline_PerkDialogue_ED__DelegateSignature();
	void BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_6_OnClickedNotification__DelegateSignature();
	void BndEvt__WBP_PerkMenu_W_HintButton_Accept_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature();
	void BndEvt__WBP_PerkMenu_W_HintButton_Back_K2Node_ComponentBoundEvent_7_OnPressed__DelegateSignature();
	void CallErrorMessage_MaximumTraits();
	void CallErrorMessage_NotEnoughPoints();
	void CheckPerksCount(class UW_PerkCard_C* Perk, bool* CanAdd);
	void CheckPickedTraits();
	void CheckPoints();
	void ClearSelectedPerks();
	void CreateEmptyPerksSlots();
	void Decline_Confirmation_Perks();
	void Destruct();
	void ExecuteUbergraph_WBP_PerkMenu(int32 EntryPoint);
	void FillWithEmptySlots(class UUniformGridPanel* GridPanel);
	void GetMaxSelectedPerksNumber(int32* Param_MaxSelectedPerksNumber);
	void GetSelectedPerks(TArray<class UW_PerkCard_C*>* Param_SelectedPerks);
	void OnInitialized();
	void PreConstruct(bool IsDesignTime);
	void ReaclculateSelectedPerksPositions();
	void RemovePerk(class UW_PerkCard_C* PerkCard);
	void Show_Message();
	void ShowEmptySlots();
	void ShowNotification();
	void UpdatedTraitPointsCount();
	void UpdatePerkPoints(class UW_PerkCard_C* GivenPerkCard);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_PerkMenu_C">();
	}
	static class UWBP_PerkMenu_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_PerkMenu_C>();
	}
};
static_assert(alignof(UWBP_PerkMenu_C) == 0x000008, "Wrong alignment on UWBP_PerkMenu_C");
static_assert(sizeof(UWBP_PerkMenu_C) == 0x0004A0, "Wrong size on UWBP_PerkMenu_C");
static_assert(offsetof(UWBP_PerkMenu_C, UberGraphFrame) == 0x000280, "Member 'UWBP_PerkMenu_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, Show_PerkDialogue) == 0x000288, "Member 'UWBP_PerkMenu_C::Show_PerkDialogue' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, InvalidationBox_1) == 0x000290, "Member 'UWBP_PerkMenu_C::InvalidationBox_1' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, Text_CurrentPoints) == 0x000298, "Member 'UWBP_PerkMenu_C::Text_CurrentPoints' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, TextBlock_PageNumber) == 0x0002A0, "Member 'UWBP_PerkMenu_C::TextBlock_PageNumber' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UMG_LabelText_Negative) == 0x0002A8, "Member 'UWBP_PerkMenu_C::UMG_LabelText_Negative' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UMG_LabelText_Positive) == 0x0002B0, "Member 'UWBP_PerkMenu_C::UMG_LabelText_Positive' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UMG_LabelText_Selected) == 0x0002B8, "Member 'UWBP_PerkMenu_C::UMG_LabelText_Selected' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UniformGridPanel__Perks_Negative) == 0x0002C0, "Member 'UWBP_PerkMenu_C::UniformGridPanel__Perks_Negative' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UniformGridPanel__Perks_Positive) == 0x0002C8, "Member 'UWBP_PerkMenu_C::UniformGridPanel__Perks_Positive' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UniformGridPanel__Perks_Selected) == 0x0002D0, "Member 'UWBP_PerkMenu_C::UniformGridPanel__Perks_Selected' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, VerticalBox_Perks_Negative) == 0x0002D8, "Member 'UWBP_PerkMenu_C::VerticalBox_Perks_Negative' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, VerticalBox_Perks_Picked_Negative) == 0x0002E0, "Member 'UWBP_PerkMenu_C::VerticalBox_Perks_Picked_Negative' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, VerticalBox_Perks_Picked_Positive) == 0x0002E8, "Member 'UWBP_PerkMenu_C::VerticalBox_Perks_Picked_Positive' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, VerticalBox_Perks_Positive) == 0x0002F0, "Member 'UWBP_PerkMenu_C::VerticalBox_Perks_Positive' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, W_DialoguePerks) == 0x0002F8, "Member 'UWBP_PerkMenu_C::W_DialoguePerks' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, W_HintButton_Accept) == 0x000300, "Member 'UWBP_PerkMenu_C::W_HintButton_Accept' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, W_HintButton_Back) == 0x000308, "Member 'UWBP_PerkMenu_C::W_HintButton_Back' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, WBP_CraftErrorMessage) == 0x000310, "Member 'UWBP_PerkMenu_C::WBP_CraftErrorMessage' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, AcceptButtonCalled_PerkMenu_ED) == 0x000318, "Member 'UWBP_PerkMenu_C::AcceptButtonCalled_PerkMenu_ED' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, BackButtonCalled_PerkMenu_ED) == 0x000328, "Member 'UWBP_PerkMenu_C::BackButtonCalled_PerkMenu_ED' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, Curr_Real_Points) == 0x000338, "Member 'UWBP_PerkMenu_C::Curr_Real_Points' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, WBP_CharacterCreate) == 0x000340, "Member 'UWBP_PerkMenu_C::WBP_CharacterCreate' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, BackButtonTraits) == 0x000348, "Member 'UWBP_PerkMenu_C::BackButtonTraits' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, UpdatingCheckPoints) == 0x000358, "Member 'UWBP_PerkMenu_C::UpdatingCheckPoints' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, Last_Picked_Perk) == 0x000360, "Member 'UWBP_PerkMenu_C::Last_Picked_Perk' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, PositiveTotalPoint) == 0x000370, "Member 'UWBP_PerkMenu_C::PositiveTotalPoint' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, NegativeTotalPoint) == 0x000374, "Member 'UWBP_PerkMenu_C::NegativeTotalPoint' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, GivenInfo) == 0x000378, "Member 'UWBP_PerkMenu_C::GivenInfo' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, TraitsPerRow_Main) == 0x000430, "Member 'UWBP_PerkMenu_C::TraitsPerRow_Main' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, TraitsPerRow_Selected) == 0x000434, "Member 'UWBP_PerkMenu_C::TraitsPerRow_Selected' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, MinTraitsNumber) == 0x000438, "Member 'UWBP_PerkMenu_C::MinTraitsNumber' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, MaxSelectedPerksNumber) == 0x00043C, "Member 'UWBP_PerkMenu_C::MaxSelectedPerksNumber' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, PositivePerks) == 0x000440, "Member 'UWBP_PerkMenu_C::PositivePerks' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, NegativePerks) == 0x000450, "Member 'UWBP_PerkMenu_C::NegativePerks' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, SelectedPerks) == 0x000460, "Member 'UWBP_PerkMenu_C::SelectedPerks' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, GI_Character_Save_Ref) == 0x000470, "Member 'UWBP_PerkMenu_C::GI_Character_Save_Ref' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, EmptyPerksSlots) == 0x000478, "Member 'UWBP_PerkMenu_C::EmptyPerksSlots' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, Perk_Info) == 0x000488, "Member 'UWBP_PerkMenu_C::Perk_Info' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, DefaultPerkPoints) == 0x000490, "Member 'UWBP_PerkMenu_C::DefaultPerkPoints' has a wrong offset!");
static_assert(offsetof(UWBP_PerkMenu_C, Perk_Save_Ref) == 0x000498, "Member 'UWBP_PerkMenu_C::Perk_Save_Ref' has a wrong offset!");

}

