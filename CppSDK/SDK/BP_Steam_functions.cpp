#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Steam

#include "Basic.hpp"

#include "BP_Steam_classes.hpp"
#include "BP_Steam_parameters.hpp"


namespace SDK
{

// Function BP_Steam.BP_Steam_C.Activate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Steam_C::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "Activate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Steam.BP_Steam_C.CauseDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Steam_C::CauseDamage(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "CauseDamage");

	Params::BP_Steam_C_CauseDamage Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Steam.BP_Steam_C.Deactivate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Steam_C::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "Deactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Steam.BP_Steam_C.ExecuteUbergraph_BP_Steam
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Steam_C::ExecuteUbergraph_BP_Steam(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "ExecuteUbergraph_BP_Steam");

	Params::BP_Steam_C_ExecuteUbergraph_BP_Steam Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Steam.BP_Steam_C.GetEmptyHitInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitInfo                                                (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Steam_C::GetEmptyHitInfo(struct FHitResult* HitInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "GetEmptyHitInfo");

	Params::BP_Steam_C_GetEmptyHitInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HitInfo != nullptr)
		*HitInfo = std::move(Parms.HitInfo);
}


// Function BP_Steam.BP_Steam_C.OnActivate
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Steam_C::OnActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "OnActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Steam.BP_Steam_C.OnBreak
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Steam_C::OnBreak()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "OnBreak");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Steam.BP_Steam_C.OnDeactivate
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_Steam_C::OnDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "OnDeactivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Steam.BP_Steam_C.ReceiveActorBeginOverlap
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Steam_C::ReceiveActorBeginOverlap(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "ReceiveActorBeginOverlap");

	Params::BP_Steam_C_ReceiveActorBeginOverlap Parms{};

	Parms.OtherActor = OtherActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Steam.BP_Steam_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Steam_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Steam.BP_Steam_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Steam_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Steam_C", "ReceiveTick");

	Params::BP_Steam_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

