#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Header

#include "Basic.hpp"


namespace SDK::Params
{

// Function W_Header.W_Header_C.ExecuteUbergraph_W_Header
// 0x0028 (0x0028 - 0x0000)
struct W_Header_C_ExecuteUbergraph_W_Header final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0008(0x0018)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Header_C_ExecuteUbergraph_W_Header) == 0x000008, "Wrong alignment on W_Header_C_ExecuteUbergraph_W_Header");
static_assert(sizeof(W_Header_C_ExecuteUbergraph_W_Header) == 0x000028, "Wrong size on W_Header_C_ExecuteUbergraph_W_Header");
static_assert(offsetof(W_Header_C_ExecuteUbergraph_W_Header, EntryPoint) == 0x000000, "Member 'W_Header_C_ExecuteUbergraph_W_Header::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Header_C_ExecuteUbergraph_W_Header, CallFunc_TextToUpper_ReturnValue) == 0x000008, "Member 'W_Header_C_ExecuteUbergraph_W_Header::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Header_C_ExecuteUbergraph_W_Header, K2Node_Event_IsDesignTime) == 0x000020, "Member 'W_Header_C_ExecuteUbergraph_W_Header::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function W_Header.W_Header_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Header_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Header_C_PreConstruct) == 0x000001, "Wrong alignment on W_Header_C_PreConstruct");
static_assert(sizeof(W_Header_C_PreConstruct) == 0x000001, "Wrong size on W_Header_C_PreConstruct");
static_assert(offsetof(W_Header_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Header_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

