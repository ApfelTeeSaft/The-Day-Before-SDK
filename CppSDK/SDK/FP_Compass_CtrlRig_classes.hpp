#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FP_Compass_CtrlRig

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "ControlRig_classes.hpp"
#include "RigVM_structs.hpp"
#include "RigVM_classes.hpp"


namespace SDK
{

// ControlRigBlueprintGeneratedClass FP_Compass_CtrlRig.FP_Compass_CtrlRig_C
// 0x00C8 (0x04C0 - 0x03F8)
class UFP_Compass_CtrlRig_C final : public UControlRig
{
public:
	uint8                                         Pad_3F8[0x8];                                      // 0x03F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetHandRTransform;                              // 0x0400(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ChestOffsetTransform;                              // 0x0460(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FP_Compass_CtrlRig_C">();
	}
	static class UFP_Compass_CtrlRig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFP_Compass_CtrlRig_C>();
	}
};
static_assert(alignof(UFP_Compass_CtrlRig_C) == 0x000010, "Wrong alignment on UFP_Compass_CtrlRig_C");
static_assert(sizeof(UFP_Compass_CtrlRig_C) == 0x0004C0, "Wrong size on UFP_Compass_CtrlRig_C");
static_assert(offsetof(UFP_Compass_CtrlRig_C, OffsetHandRTransform) == 0x000400, "Member 'UFP_Compass_CtrlRig_C::OffsetHandRTransform' has a wrong offset!");
static_assert(offsetof(UFP_Compass_CtrlRig_C, ChestOffsetTransform) == 0x000460, "Member 'UFP_Compass_CtrlRig_C::ChestOffsetTransform' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass FP_Compass_CtrlRig.RigVMMemory_Literal
// 0x0168 (0x0190 - 0x0028)
class FP_Compass_CtrlRig::URigVMMemory_Literal final : public URigVMMemoryStorage
{
public:
	struct FRigElementKey                         RigVMModel___RigUnit_SetTransform_Item__Const;     // 0x0028(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ERigVMTransformSpace                          RigVMModel___RigUnit_SetTransform_Space__Const;    // 0x0034(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetTransform_bInitial__Const; // 0x0035(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___GetTransform_Item__Const;             // 0x0038(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___RigUnit_SetTransform_Weight__Const;   // 0x0044(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          RigVMModel___RigUnit_SetTransform_bPropagateToChildren__Const; // 0x0048(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___RigUnit_SetRelativeTransformForItem_Child__Const; // 0x004C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_ItemA__Const;  // 0x0058(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_ItemB__Const;  // 0x0064(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_PrimaryAxis__Const; // 0x0070(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_SecondaryAxis__Const; // 0x0088(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EControlRigVectorKind                         RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const; // 0x00A0(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const; // 0x00A4(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_StretchStartRatio__Const; // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_StretchMaximumRatio__Const; // 0x00B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RigVMModel___TwoBoneIKSimplePerItem_ItemALength__Const; // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRigUnit_TwoBoneIKSimple_DebugSettings RigVMModel___TwoBoneIKSimplePerItem_DebugSettings__Const; // 0x00C0(0x0070)(Edit, EditConst, NonTransactional, NoDestructor)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const; // 0x0130(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const; // 0x013C(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const; // 0x0148(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FRigElementKey                         RigVMModel___GetTransform_1_1_Item__Const;         // 0x0154(0x000C)(Edit, EditConst, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const; // 0x0160(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const; // 0x0178(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass FP_Compass_CtrlRig.RigVMMemory_Literal", true>();
	}
	static class FP_Compass_CtrlRig::URigVMMemory_Literal* GetDefaultObj()
	{
		return GetDefaultObjImpl<FP_Compass_CtrlRig::URigVMMemory_Literal>();
	}
};
static_assert(alignof(FP_Compass_CtrlRig::URigVMMemory_Literal) == 0x000010, "Wrong alignment on FP_Compass_CtrlRig::URigVMMemory_Literal");
static_assert(sizeof(FP_Compass_CtrlRig::URigVMMemory_Literal) == 0x000190, "Wrong size on FP_Compass_CtrlRig::URigVMMemory_Literal");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Item__Const) == 0x000028, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Space__Const) == 0x000034, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Space__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_bInitial__Const) == 0x000035, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_bInitial__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___GetTransform_Item__Const) == 0x000038, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___GetTransform_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_Weight__Const) == 0x000044, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_Weight__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetTransform_bPropagateToChildren__Const) == 0x000048, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetTransform_bPropagateToChildren__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___RigUnit_SetRelativeTransformForItem_Child__Const) == 0x00004C, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___RigUnit_SetRelativeTransformForItem_Child__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_ItemA__Const) == 0x000058, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_ItemA__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_ItemB__Const) == 0x000064, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_ItemB__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PrimaryAxis__Const) == 0x000070, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PrimaryAxis__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_SecondaryAxis__Const) == 0x000088, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_SecondaryAxis__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const) == 0x0000A0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PoleVectorKind__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const) == 0x0000A4, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_PoleVectorSpace__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_StretchStartRatio__Const) == 0x0000B0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_StretchStartRatio__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_StretchMaximumRatio__Const) == 0x0000B4, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_StretchMaximumRatio__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_ItemALength__Const) == 0x0000B8, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_ItemALength__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_DebugSettings__Const) == 0x0000C0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_DebugSettings__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const) == 0x000130, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemA__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const) == 0x00013C, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_ItemB__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const) == 0x000148, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_EffectorItem__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___GetTransform_1_1_Item__Const) == 0x000154, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___GetTransform_1_1_Item__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const) == 0x000160, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_PrimaryAxis__Const' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Literal, RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const) == 0x000178, "Member 'FP_Compass_CtrlRig::URigVMMemory_Literal::RigVMModel___TwoBoneIKSimplePerItem_1_SecondaryAxis__Const' has a wrong offset!");

// RigVMMemoryStorageGeneratorClass FP_Compass_CtrlRig.RigVMMemory_Work
// 0x0328 (0x0350 - 0x0028)
class FP_Compass_CtrlRig::URigVMMemory_Work final : public URigVMMemoryStorage
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_Transform;               // 0x0030(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_CachedIndex;             // 0x0090(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetTransform_CachedIndex;     // 0x00A0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_CachedChild; // 0x00B0(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_SetRelativeTransformForItem_CachedParent; // 0x00C0(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___GetTransform_1_Transform;             // 0x00D0(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_CachedIndex;           // 0x0130(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_Transform;       // 0x0140(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_CachedIndex;     // 0x01A0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_PoleVector;    // 0x01B0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex; // 0x01C8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex; // 0x01D8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex; // 0x01E8(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex; // 0x01F8(0x0010)(Edit, EditConst, NonTransactional)
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RigVMModel___GetTransform_1_1_Transform;           // 0x0210(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___GetTransform_1_1_CachedIndex;         // 0x0270(0x0010)(Edit, EditConst, NonTransactional)
	struct FTransform                             RigVMModel___RigUnit_GetTransform_1_Transform;     // 0x0280(0x0060)(Edit, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___RigUnit_GetTransform_1_CachedIndex;   // 0x02E0(0x0010)(Edit, EditConst, NonTransactional)
	struct FVector                                RigVMModel___TwoBoneIKSimplePerItem_1_PoleVector;  // 0x02F0(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex; // 0x0308(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex; // 0x0318(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex; // 0x0328(0x0010)(Edit, EditConst, NonTransactional)
	TArray<struct FCachedRigElement>              RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex; // 0x0338(0x0010)(Edit, EditConst, NonTransactional)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RigVMMemoryStorageGeneratorClass FP_Compass_CtrlRig.RigVMMemory_Work", true>();
	}
	static class FP_Compass_CtrlRig::URigVMMemory_Work* GetDefaultObj()
	{
		return GetDefaultObjImpl<FP_Compass_CtrlRig::URigVMMemory_Work>();
	}
};
static_assert(alignof(FP_Compass_CtrlRig::URigVMMemory_Work) == 0x000010, "Wrong alignment on FP_Compass_CtrlRig::URigVMMemory_Work");
static_assert(sizeof(FP_Compass_CtrlRig::URigVMMemory_Work) == 0x000350, "Wrong size on FP_Compass_CtrlRig::URigVMMemory_Work");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_Transform) == 0x000030, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_CachedIndex) == 0x000090, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetTransform_CachedIndex) == 0x0000A0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_CachedChild) == 0x0000B0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_CachedChild' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_SetRelativeTransformForItem_CachedParent) == 0x0000C0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_SetRelativeTransformForItem_CachedParent' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_Transform) == 0x0000D0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_CachedIndex) == 0x000130, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_Transform) == 0x000140, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_Transform' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_CachedIndex) == 0x0001A0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_PoleVector) == 0x0001B0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_PoleVector' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex) == 0x0001C8, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex) == 0x0001D8, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex) == 0x0001E8, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex) == 0x0001F8, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_CachedPoleVectorSpaceIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_1_Transform) == 0x000210, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___GetTransform_1_1_CachedIndex) == 0x000270, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___GetTransform_1_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_Transform) == 0x000280, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_Transform' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___RigUnit_GetTransform_1_CachedIndex) == 0x0002E0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___RigUnit_GetTransform_1_CachedIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_PoleVector) == 0x0002F0, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_PoleVector' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex) == 0x000308, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemAIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex) == 0x000318, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedItemBIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex) == 0x000328, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedEffectorItemIndex' has a wrong offset!");
static_assert(offsetof(FP_Compass_CtrlRig::URigVMMemory_Work, RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex) == 0x000338, "Member 'FP_Compass_CtrlRig::URigVMMemory_Work::RigVMModel___TwoBoneIKSimplePerItem_1_CachedPoleVectorSpaceIndex' has a wrong offset!");

}

