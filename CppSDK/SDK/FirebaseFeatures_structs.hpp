#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FirebaseFeatures

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum FirebaseFeatures.EAdMobPresentationState
// NumValues: 0x0005
enum class EAdMobPresentationState : uint8
{
	Hidden                                   = 0,
	CoveringUI                               = 1,
	VideoHasStarted                          = 2,
	VideoHasCompleted                        = 3,
	EAdMobPresentationState_MAX              = 4,
};

// Enum FirebaseFeatures.EFirestoreError
// NumValues: 0x0012
enum class EFirestoreError : uint8
{
	Ok                                       = 0,
	Cancelled                                = 1,
	Unknown                                  = 2,
	InvalidArgument                          = 3,
	DeadlineExceeded                         = 4,
	NotFound                                 = 5,
	AlreadyExists                            = 6,
	PermissionDenied                         = 7,
	ResourceExhausted                        = 8,
	FailedPrecondition                       = 9,
	Aborted                                  = 10,
	OutOfRange                               = 11,
	Unimplemented                            = 12,
	Internal                                 = 13,
	Unavailable                              = 14,
	DataLoss                                 = 15,
	Unauthenticated                          = 16,
	EFirestoreError_MAX                      = 17,
};

// Enum FirebaseFeatures.EFbAdMobError
// NumValues: 0x000A
enum class EFbAdMobError : uint8
{
	None                                     = 0,
	Uninitialized                            = 1,
	AlreadyInitialized                       = 2,
	LoadInProgress                           = 3,
	InternalError                            = 4,
	InvalidRequest                           = 5,
	NetworkError                             = 6,
	NoFill                                   = 7,
	NoWindowToken                            = 8,
	EFbAdMobError_MAX                        = 9,
};

// Enum FirebaseFeatures.EFirebaseStorageError
// NumValues: 0x000E
enum class EFirebaseStorageError : uint8
{
	None                                     = 0,
	Unknown                                  = 1,
	ObjectNotFound                           = 2,
	BucketNotFound                           = 3,
	ProjectNotFound                          = 4,
	QuotaExceeded                            = 5,
	Unauthenticated                          = 6,
	Unauthorized                             = 7,
	RetryLimitExceeded                       = 8,
	NonMatchingChecksum                      = 9,
	DownloadSizeExceeded                     = 10,
	Cancelled                                = 11,
	FileNotFound                             = 100,
	EFirebaseStorageError_MAX                = 101,
};

// Enum FirebaseFeatures.EFirebaseFunctionsError
// NumValues: 0x0012
enum class EFirebaseFunctionsError : uint8
{
	None                                     = 0,
	Cancelled                                = 1,
	Unknown                                  = 2,
	InvalidArgument                          = 3,
	DeadlineExceeded                         = 4,
	NotFound                                 = 5,
	AlreadyExists                            = 6,
	PermissionDenied                         = 7,
	Unauthenticated                          = 16,
	ResourceExhausted                        = 8,
	FailedPrecondition                       = 9,
	Aborted                                  = 10,
	OutOfRange                               = 11,
	Unimplemented                            = 12,
	Internal                                 = 13,
	Unavailable                              = 14,
	DataLoss                                 = 15,
	EFirebaseFunctionsError_MAX              = 17,
};

// Enum FirebaseFeatures.EFirebaseDatabaseError
// NumValues: 0x0010
enum class EFirebaseDatabaseError : uint8
{
	None                                     = 0,
	Disconnected                             = 1,
	ExpiredToken                             = 2,
	InvalidToken                             = 3,
	MaxRetries                               = 4,
	NetworkError                             = 5,
	OperationFailed                          = 6,
	OverriddenBySet                          = 7,
	PermissionDenied                         = 8,
	Unavailable                              = 9,
	UnknownError                             = 10,
	WriteCanceled                            = 11,
	InvalidVariantType                       = 12,
	ConflictingOperationInProgress           = 13,
	TransactionAbortedByUser                 = 14,
	EFirebaseDatabaseError_MAX               = 15,
};

// Enum FirebaseFeatures.EFirebaseAuthError
// NumValues: 0x0051
enum class EFirebaseAuthError : uint8
{
	None                                     = 0,
	Unimplemented                            = 255,
	Failure                                  = 1,
	InvalidCustomToken                       = 2,
	CustomTokenMismatch                      = 3,
	InvalidCredential                        = 4,
	UserDisabled                             = 5,
	AccountExistsWithDifferentCredentials    = 6,
	OperationNotAllowed                      = 7,
	EmailAlreadyInUse                        = 8,
	RequiresRecentLogin                      = 9,
	CredentialAlreadyInUse                   = 10,
	InvalidEmail                             = 11,
	WrongPassword                            = 12,
	TooManyRequests                          = 13,
	UserNotFound                             = 14,
	ProviderAlreadyLinked                    = 15,
	NoSuchProvider                           = 16,
	InvalidUserToken                         = 17,
	UserTokenExpired                         = 18,
	NetworkRequestFailed                     = 19,
	InvalidApiKey                            = 20,
	AppNotAuthorized                         = 21,
	UserMismatch                             = 22,
	WeakPassword                             = 23,
	NoSignedInUser                           = 24,
	ApiNotAvailable                          = 25,
	ExpiredActionCode                        = 26,
	InvalidActionCode                        = 27,
	InvalidMessagePayload                    = 28,
	InvalidPhoneNumber                       = 29,
	MissingPhoneNumber                       = 30,
	InvalidRecipientEmail                    = 31,
	InvalidSender                            = 32,
	InvalidVerificationCode                  = 33,
	InvalidVerificationId                    = 34,
	MissingVerificationCode                  = 35,
	MissingVerificationId                    = 36,
	MissingEmail                             = 37,
	MissingPassword                          = 38,
	QuotaExceeded                            = 39,
	RetryPhoneAuth                           = 40,
	SessionExpired                           = 41,
	AppNotVerified                           = 42,
	AppVerificationFailed                    = 43,
	CaptchaCheckFailed                       = 44,
	InvalidAppCredential                     = 45,
	MissingAppCredential                     = 46,
	InvalidClientId                          = 47,
	InvalidContinueUri                       = 48,
	MissingContinueUri                       = 49,
	KeychainError                            = 50,
	MissingAppToken                          = 51,
	MissingIosBundleId                       = 52,
	NotificationNotForwarded                 = 53,
	UnauthorizedDomain                       = 54,
	WebContextAlreadyPresented               = 55,
	WebContextCancelled                      = 56,
	DynamicLinkNotActivated                  = 57,
	Cancelled                                = 58,
	InvalidProviderId                        = 59,
	WebInternalError                         = 60,
	WebStorateUnsupported                    = 61,
	TenantIdMismatch                         = 62,
	UnsupportedTenantOperation               = 63,
	InvalidLinkDomain                        = 64,
	RejectedCredential                       = 65,
	PhoneNumberNotFound                      = 66,
	InvalidTenantId                          = 67,
	MissingClientIdentifier                  = 68,
	MissingMultiFactorSession                = 69,
	MissingMultiFactorInfo                   = 70,
	InvalidMultiFactorSession                = 71,
	MultiFactorInfoNotFound                  = 72,
	AdminRestrictedOperation                 = 73,
	UnverifiedEmail                          = 74,
	SecondFactorAlreadyEnrolled              = 75,
	MaximumSecondFactorCountExceeded         = 76,
	UnsupportedFirstFactor                   = 77,
	EmailChangeNeedsVerification             = 78,
	EFirebaseAuthError_MAX                   = 256,
};

// Enum FirebaseFeatures.EFirebaseMessagingError
// NumValues: 0x0006
enum class EFirebaseMessagingError : uint8
{
	None                                     = 0,
	FailedToRegisterForRemoteNotifications   = 1,
	InvalidTopicName                         = 2,
	NoRegistrationToken                      = 3,
	Unknown                                  = 4,
	EFirebaseMessagingError_MAX              = 5,
};

// Enum FirebaseFeatures.ELinkMatchStrength
// NumValues: 0x0005
enum class ELinkMatchStrength : uint8
{
	NoMatch                                  = 0,
	WeakMatch                                = 1,
	StrongMatch                              = 2,
	PerfectMatch                             = 3,
	ELinkMatchStrength_MAX                   = 4,
};

// Enum FirebaseFeatures.ETransactionResult
// NumValues: 0x0003
enum class ETransactionResult : uint8
{
	Success                                  = 0,
	Abort                                    = 1,
	ETransactionResult_MAX                   = 2,
};

// Enum FirebaseFeatures.EDatabaseLogLevel
// NumValues: 0x0007
enum class EDatabaseLogLevel : uint8
{
	Verbose                                  = 0,
	Debug                                    = 1,
	Info                                     = 2,
	Warning                                  = 3,
	Error                                    = 4,
	Assert                                   = 5,
	EDatabaseLogLevel_MAX                    = 6,
};

// Enum FirebaseFeatures.EDocumentChangeType
// NumValues: 0x0004
enum class EDocumentChangeType : uint8
{
	Added                                    = 0,
	Modified                                 = 1,
	Removed                                  = 2,
	EDocumentChangeType_MAX                  = 3,
};

// Enum FirebaseFeatures.EFirestoreServerTimestampBehavior
// NumValues: 0x0004
enum class EFirestoreServerTimestampBehavior : uint8
{
	Estimate                                 = 1,
	Previous                                 = 2,
	Default                                  = 0,
	EFirestoreServerTimestampBehavior_MAX    = 3,
};

// Enum FirebaseFeatures.EPathLength
// NumValues: 0x0004
enum class EPathLength : uint8
{
	PathLengthDefault                        = 0,
	PathLengthShort                          = 1,
	PathLengthUnguessable                    = 2,
	EPathLength_MAX                          = 3,
};

// Enum FirebaseFeatures.EAdMobGender
// NumValues: 0x0004
enum class EAdMobGender : uint8
{
	Unknown                                  = 0,
	Male                                     = 1,
	Female                                   = 2,
	EAdMobGender_MAX                         = 3,
};

// Enum FirebaseFeatures.EAdMobChildDirectedTreatmentState
// NumValues: 0x0004
enum class EAdMobChildDirectedTreatmentState : uint8
{
	Unknown                                  = 0,
	Tagged                                   = 1,
	NotTagged                                = 2,
	EAdMobChildDirectedTreatmentState_MAX    = 3,
};

// Enum FirebaseFeatures.EAdMobBannerViewPosition
// NumValues: 0x0007
enum class EAdMobBannerViewPosition : uint8
{
	Top                                      = 0,
	Bottom                                   = 1,
	TopLeft                                  = 2,
	TopRight                                 = 3,
	BottomLeft                               = 4,
	BottomRight                              = 5,
	EAdMobBannerViewPosition_MAX             = 6,
};

// Enum FirebaseFeatures.EAdMobInterstitialAdPresentationState
// NumValues: 0x0003
enum class EAdMobInterstitialAdPresentationState : uint8
{
	PresentationStateHidden                  = 0,
	PresentationStateCoveringUI              = 1,
	EAdMobInterstitialAdPresentationState_MAX = 2,
};

// Enum FirebaseFeatures.EFirestoreFieldValueType
// NumValues: 0x000C
enum class EFirestoreFieldValueType : uint8
{
	Null                                     = 0,
	Boolean                                  = 1,
	Integer                                  = 2,
	Double                                   = 3,
	Timestamp                                = 4,
	String                                   = 5,
	Blob                                     = 6,
	Reference                                = 7,
	GeoPoint                                 = 8,
	Array                                    = 9,
	Map                                      = 10,
	EFirestoreFieldValueType_MAX             = 11,
};

// Enum FirebaseFeatures.EAppCheckProvider
// NumValues: 0x0006
enum class EAppCheckProvider : uint8
{
	None                                     = 0,
	PlayIntegrity                            = 1,
	DeviceCheck                              = 2,
	AppAttest                                = 3,
	Debug                                    = 4,
	EAppCheckProvider_MAX                    = 5,
};

// Enum FirebaseFeatures.EFirebaseSDKCreateApp
// NumValues: 0x0003
enum class EFirebaseSDKCreateApp : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	EFirebaseSDKCreateApp_MAX                = 2,
};

// Enum FirebaseFeatures.EFirebaseVariantType
// NumValues: 0x000B
enum class EFirebaseVariantType : uint8
{
	Null                                     = 0,
	Int64                                    = 1,
	Double                                   = 2,
	Bool                                     = 3,
	StaticString                             = 4,
	MutableString                            = 5,
	Vector                                   = 6,
	Map                                      = 7,
	StaticBlob                               = 8,
	MutableBlob                              = 9,
	EFirebaseVariantType_MAX                 = 10,
};

// Enum FirebaseFeatures.EFirestoreSetOptionsType
// NumValues: 0x0004
enum class EFirestoreSetOptionsType : uint8
{
	Overwrite                                = 0,
	MergeAll                                 = 1,
	MergeSpecific                            = 2,
	EFirestoreSetOptionsType_MAX             = 3,
};

// Enum FirebaseFeatures.EFirestoreSource
// NumValues: 0x0004
enum class EFirestoreSource : uint8
{
	Default                                  = 0,
	Server                                   = 1,
	Cache                                    = 2,
	EFirestoreSource_MAX                     = 3,
};

// Enum FirebaseFeatures.EFirestoreQueryDirection
// NumValues: 0x0003
enum class EFirestoreQueryDirection : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EFirestoreQueryDirection_MAX             = 2,
};

// Enum FirebaseFeatures.EFirebaseConfigFetchActivationBranch
// NumValues: 0x0003
enum class EFirebaseConfigFetchActivationBranch : uint8
{
	Activated                                = 0,
	NotActivated                             = 1,
	EFirebaseConfigFetchActivationBranch_MAX = 2,
};

// Enum FirebaseFeatures.EFirebaseValueSource
// NumValues: 0x0004
enum class EFirebaseValueSource : uint8
{
	StaticValue                              = 0,
	RemoteValue                              = 1,
	DefaultValue                             = 2,
	EFirebaseValueSource_MAX                 = 3,
};

// Enum FirebaseFeatures.EFirebaseLastFetchStatus
// NumValues: 0x0004
enum class EFirebaseLastFetchStatus : uint8
{
	Success                                  = 0,
	Failure                                  = 1,
	Pending                                  = 2,
	EFirebaseLastFetchStatus_MAX             = 3,
};

// Enum FirebaseFeatures.EFirebaseFetchFailureReason
// NumValues: 0x0004
enum class EFirebaseFetchFailureReason : uint8
{
	Invalid                                  = 0,
	Throttled                                = 1,
	Error                                    = 2,
	EFirebaseFetchFailureReason_MAX          = 3,
};

// Enum FirebaseFeatures.EFirebaseConfigSetting
// NumValues: 0x0002
enum class EFirebaseConfigSetting : uint8
{
	SettingDeveloperMode                     = 0,
	EFirebaseConfigSetting_MAX               = 1,
};

// Enum FirebaseFeatures.EFetchFailureReason
// NumValues: 0x0004
enum class EFetchFailureReason : uint8
{
	Invalid                                  = 0,
	Throttled                                = 1,
	Error                                    = 2,
	EFetchFailureReason_MAX                  = 3,
};

// Enum FirebaseFeatures.EFirebaseStorageBlueprintExecutionPin
// NumValues: 0x0003
enum class EFirebaseStorageBlueprintExecutionPin : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	EFirebaseStorageBlueprintExecutionPin_MAX = 2,
};

// ScriptStruct FirebaseFeatures.AdMobRewardItem
// 0x0018 (0x0018 - 0x0000)
struct FAdMobRewardItem final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RewardType;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdMobRewardItem) == 0x000008, "Wrong alignment on FAdMobRewardItem");
static_assert(sizeof(FAdMobRewardItem) == 0x000018, "Wrong size on FAdMobRewardItem");
static_assert(offsetof(FAdMobRewardItem, Amount) == 0x000000, "Member 'FAdMobRewardItem::Amount' has a wrong offset!");
static_assert(offsetof(FAdMobRewardItem, RewardType) == 0x000008, "Member 'FAdMobRewardItem::RewardType' has a wrong offset!");

// ScriptStruct FirebaseFeatures.Credential
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FCredential final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCredential) == 0x000008, "Wrong alignment on FCredential");
static_assert(sizeof(FCredential) == 0x000008, "Wrong size on FCredential");

// ScriptStruct FirebaseFeatures.FirebaseStorageController
// 0x0001 (0x0001 - 0x0000)
struct FFirebaseStorageController final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirebaseStorageController) == 0x000001, "Wrong alignment on FFirebaseStorageController");
static_assert(sizeof(FFirebaseStorageController) == 0x000001, "Wrong size on FFirebaseStorageController");

// ScriptStruct FirebaseFeatures.FirestoreDocumentSnapshot
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFirestoreDocumentSnapshot final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreDocumentSnapshot) == 0x000008, "Wrong alignment on FFirestoreDocumentSnapshot");
static_assert(sizeof(FFirestoreDocumentSnapshot) == 0x000010, "Wrong size on FFirestoreDocumentSnapshot");

// ScriptStruct FirebaseFeatures.FirebaseTrace
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FFirebaseTrace final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirebaseTrace) == 0x000008, "Wrong alignment on FFirebaseTrace");
static_assert(sizeof(FFirebaseTrace) == 0x000060, "Wrong size on FFirebaseTrace");

// ScriptStruct FirebaseFeatures.FirebaseInstallationsAuthToken
// 0x0018 (0x0018 - 0x0000)
struct FFirebaseInstallationsAuthToken final
{
public:
	class FString                                 AuthToken;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expiration;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseInstallationsAuthToken) == 0x000008, "Wrong alignment on FFirebaseInstallationsAuthToken");
static_assert(sizeof(FFirebaseInstallationsAuthToken) == 0x000018, "Wrong size on FFirebaseInstallationsAuthToken");
static_assert(offsetof(FFirebaseInstallationsAuthToken, AuthToken) == 0x000000, "Member 'FFirebaseInstallationsAuthToken::AuthToken' has a wrong offset!");
static_assert(offsetof(FFirebaseInstallationsAuthToken, Expiration) == 0x000010, "Member 'FFirebaseInstallationsAuthToken::Expiration' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseVariant
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFirebaseVariant final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirebaseVariant) == 0x000008, "Wrong alignment on FFirebaseVariant");
static_assert(sizeof(FFirebaseVariant) == 0x000018, "Wrong size on FFirebaseVariant");

// ScriptStruct FirebaseFeatures.FirebaseConfigKeyValueVariant
// 0x0028 (0x0028 - 0x0000)
struct FFirebaseConfigKeyValueVariant final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFirebaseVariant                       Value;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseConfigKeyValueVariant) == 0x000008, "Wrong alignment on FFirebaseConfigKeyValueVariant");
static_assert(sizeof(FFirebaseConfigKeyValueVariant) == 0x000028, "Wrong size on FFirebaseConfigKeyValueVariant");
static_assert(offsetof(FFirebaseConfigKeyValueVariant, Key) == 0x000000, "Member 'FFirebaseConfigKeyValueVariant::Key' has a wrong offset!");
static_assert(offsetof(FFirebaseConfigKeyValueVariant, Value) == 0x000010, "Member 'FFirebaseConfigKeyValueVariant::Value' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirestoreTransaction
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFirestoreTransaction final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreTransaction) == 0x000008, "Wrong alignment on FFirestoreTransaction");
static_assert(sizeof(FFirestoreTransaction) == 0x000008, "Wrong size on FFirestoreTransaction");

// ScriptStruct FirebaseFeatures.IOSParameters
// 0x0070 (0x0070 - 0x0000)
struct FIOSParameters final
{
public:
	class FString                                 BundleId;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FallbackUrl;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomScheme;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpadFallbackUrl;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpadBundleId;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AppStoreId;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MinimumVersion;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIOSParameters) == 0x000008, "Wrong alignment on FIOSParameters");
static_assert(sizeof(FIOSParameters) == 0x000070, "Wrong size on FIOSParameters");
static_assert(offsetof(FIOSParameters, BundleId) == 0x000000, "Member 'FIOSParameters::BundleId' has a wrong offset!");
static_assert(offsetof(FIOSParameters, FallbackUrl) == 0x000010, "Member 'FIOSParameters::FallbackUrl' has a wrong offset!");
static_assert(offsetof(FIOSParameters, CustomScheme) == 0x000020, "Member 'FIOSParameters::CustomScheme' has a wrong offset!");
static_assert(offsetof(FIOSParameters, IpadFallbackUrl) == 0x000030, "Member 'FIOSParameters::IpadFallbackUrl' has a wrong offset!");
static_assert(offsetof(FIOSParameters, IpadBundleId) == 0x000040, "Member 'FIOSParameters::IpadBundleId' has a wrong offset!");
static_assert(offsetof(FIOSParameters, AppStoreId) == 0x000050, "Member 'FIOSParameters::AppStoreId' has a wrong offset!");
static_assert(offsetof(FIOSParameters, MinimumVersion) == 0x000060, "Member 'FIOSParameters::MinimumVersion' has a wrong offset!");

// ScriptStruct FirebaseFeatures.ForceResendingToken
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FForceResendingToken final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FForceResendingToken) == 0x000008, "Wrong alignment on FForceResendingToken");
static_assert(sizeof(FForceResendingToken) == 0x000008, "Wrong size on FForceResendingToken");

// ScriptStruct FirebaseFeatures.AppleSignInCredential
// 0x0080 (0x0080 - 0x0000)
struct FAppleSignInCredential final
{
public:
	class FString                                 IdentityToken;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AuthorizationCode;                                 // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 State;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 User;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AuthorizedScopes;                                  // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 FullName;                                          // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Nonce;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppleSignInCredential) == 0x000008, "Wrong alignment on FAppleSignInCredential");
static_assert(sizeof(FAppleSignInCredential) == 0x000080, "Wrong size on FAppleSignInCredential");
static_assert(offsetof(FAppleSignInCredential, IdentityToken) == 0x000000, "Member 'FAppleSignInCredential::IdentityToken' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, AuthorizationCode) == 0x000010, "Member 'FAppleSignInCredential::AuthorizationCode' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, State) == 0x000020, "Member 'FAppleSignInCredential::State' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, User) == 0x000030, "Member 'FAppleSignInCredential::User' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, AuthorizedScopes) == 0x000040, "Member 'FAppleSignInCredential::AuthorizedScopes' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, FullName) == 0x000050, "Member 'FAppleSignInCredential::FullName' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, Email) == 0x000060, "Member 'FAppleSignInCredential::Email' has a wrong offset!");
static_assert(offsetof(FAppleSignInCredential, Nonce) == 0x000070, "Member 'FAppleSignInCredential::Nonce' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseConfigKeyValue
// 0x0020 (0x0020 - 0x0000)
struct FFirebaseConfigKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseConfigKeyValue) == 0x000008, "Wrong alignment on FFirebaseConfigKeyValue");
static_assert(sizeof(FFirebaseConfigKeyValue) == 0x000020, "Wrong size on FFirebaseConfigKeyValue");
static_assert(offsetof(FFirebaseConfigKeyValue, Key) == 0x000000, "Member 'FFirebaseConfigKeyValue::Key' has a wrong offset!");
static_assert(offsetof(FFirebaseConfigKeyValue, Value) == 0x000010, "Member 'FFirebaseConfigKeyValue::Value' has a wrong offset!");

// ScriptStruct FirebaseFeatures.GeneratedDynamicLink
// 0x0030 (0x0030 - 0x0000)
struct FGeneratedDynamicLink final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Warnings;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Error;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeneratedDynamicLink) == 0x000008, "Wrong alignment on FGeneratedDynamicLink");
static_assert(sizeof(FGeneratedDynamicLink) == 0x000030, "Wrong size on FGeneratedDynamicLink");
static_assert(offsetof(FGeneratedDynamicLink, URL) == 0x000000, "Member 'FGeneratedDynamicLink::URL' has a wrong offset!");
static_assert(offsetof(FGeneratedDynamicLink, Warnings) == 0x000010, "Member 'FGeneratedDynamicLink::Warnings' has a wrong offset!");
static_assert(offsetof(FGeneratedDynamicLink, Error) == 0x000020, "Member 'FGeneratedDynamicLink::Error' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseAndroidNotificationParams
// 0x0010 (0x0010 - 0x0000)
struct FFirebaseAndroidNotificationParams final
{
public:
	class FString                                 ChannelId;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseAndroidNotificationParams) == 0x000008, "Wrong alignment on FFirebaseAndroidNotificationParams");
static_assert(sizeof(FFirebaseAndroidNotificationParams) == 0x000010, "Wrong size on FFirebaseAndroidNotificationParams");
static_assert(offsetof(FFirebaseAndroidNotificationParams, ChannelId) == 0x000000, "Member 'FFirebaseAndroidNotificationParams::ChannelId' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseNotification
// 0x00D0 (0x00D0 - 0x0000)
struct FFirebaseNotification final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Icon;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sound;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Badge;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Color;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClickAction;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyLocKey;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         BodyLocArgs;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TitleLocKey;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TitleLocArgs;                                      // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FFirebaseAndroidNotificationParams     Android;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseNotification) == 0x000008, "Wrong alignment on FFirebaseNotification");
static_assert(sizeof(FFirebaseNotification) == 0x0000D0, "Wrong size on FFirebaseNotification");
static_assert(offsetof(FFirebaseNotification, Title) == 0x000000, "Member 'FFirebaseNotification::Title' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Body) == 0x000010, "Member 'FFirebaseNotification::Body' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Icon) == 0x000020, "Member 'FFirebaseNotification::Icon' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Sound) == 0x000030, "Member 'FFirebaseNotification::Sound' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Badge) == 0x000040, "Member 'FFirebaseNotification::Badge' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Tag) == 0x000050, "Member 'FFirebaseNotification::Tag' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Color) == 0x000060, "Member 'FFirebaseNotification::Color' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, ClickAction) == 0x000070, "Member 'FFirebaseNotification::ClickAction' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, BodyLocKey) == 0x000080, "Member 'FFirebaseNotification::BodyLocKey' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, BodyLocArgs) == 0x000090, "Member 'FFirebaseNotification::BodyLocArgs' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, TitleLocKey) == 0x0000A0, "Member 'FFirebaseNotification::TitleLocKey' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, TitleLocArgs) == 0x0000B0, "Member 'FFirebaseNotification::TitleLocArgs' has a wrong offset!");
static_assert(offsetof(FFirebaseNotification, Android) == 0x0000C0, "Member 'FFirebaseNotification::Android' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseMessage
// 0x01F0 (0x01F0 - 0x0000)
struct FFirebaseMessage final
{
public:
	class FString                                 From;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 To;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CollapseKey;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Data;                                              // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 RawData;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageId;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessageType;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Priority;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeToLive;                                        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorDescription;                                  // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFirebaseNotification                  Notification;                                      // 0x00E8(0x00D0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bNotificationOpened;                               // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Link;                                              // 0x01C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalPriority;                                  // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SentTime;                                          // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsValid;                                          // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirebaseMessage) == 0x000008, "Wrong alignment on FFirebaseMessage");
static_assert(sizeof(FFirebaseMessage) == 0x0001F0, "Wrong size on FFirebaseMessage");
static_assert(offsetof(FFirebaseMessage, From) == 0x000000, "Member 'FFirebaseMessage::From' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, To) == 0x000010, "Member 'FFirebaseMessage::To' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, CollapseKey) == 0x000020, "Member 'FFirebaseMessage::CollapseKey' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Data) == 0x000030, "Member 'FFirebaseMessage::Data' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, RawData) == 0x000080, "Member 'FFirebaseMessage::RawData' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, MessageId) == 0x000090, "Member 'FFirebaseMessage::MessageId' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, MessageType) == 0x0000A0, "Member 'FFirebaseMessage::MessageType' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Priority) == 0x0000B0, "Member 'FFirebaseMessage::Priority' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, TimeToLive) == 0x0000C0, "Member 'FFirebaseMessage::TimeToLive' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Error) == 0x0000C8, "Member 'FFirebaseMessage::Error' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, ErrorDescription) == 0x0000D8, "Member 'FFirebaseMessage::ErrorDescription' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Notification) == 0x0000E8, "Member 'FFirebaseMessage::Notification' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, bNotificationOpened) == 0x0001B8, "Member 'FFirebaseMessage::bNotificationOpened' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, Link) == 0x0001C0, "Member 'FFirebaseMessage::Link' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, OriginalPriority) == 0x0001D0, "Member 'FFirebaseMessage::OriginalPriority' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, SentTime) == 0x0001E0, "Member 'FFirebaseMessage::SentTime' has a wrong offset!");
static_assert(offsetof(FFirebaseMessage, bIsValid) == 0x0001E8, "Member 'FFirebaseMessage::bIsValid' has a wrong offset!");

// ScriptStruct FirebaseFeatures.AdSize
// 0x0008 (0x0008 - 0x0000)
struct FAdSize final
{
public:
	int32                                         Height;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdSize) == 0x000004, "Wrong alignment on FAdSize");
static_assert(sizeof(FAdSize) == 0x000008, "Wrong size on FAdSize");
static_assert(offsetof(FAdSize, Height) == 0x000000, "Member 'FAdSize::Height' has a wrong offset!");
static_assert(offsetof(FAdSize, Width) == 0x000004, "Member 'FAdSize::Width' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirestoreSetOptions
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFirestoreSetOptions final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreSetOptions) == 0x000008, "Wrong alignment on FFirestoreSetOptions");
static_assert(sizeof(FFirestoreSetOptions) == 0x000008, "Wrong size on FFirestoreSetOptions");

// ScriptStruct FirebaseFeatures.GoogleAnalyticsParameters
// 0x0050 (0x0050 - 0x0000)
struct FGoogleAnalyticsParameters final
{
public:
	class FString                                 Source;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Medium;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Campaign;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Term;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoogleAnalyticsParameters) == 0x000008, "Wrong alignment on FGoogleAnalyticsParameters");
static_assert(sizeof(FGoogleAnalyticsParameters) == 0x000050, "Wrong size on FGoogleAnalyticsParameters");
static_assert(offsetof(FGoogleAnalyticsParameters, Source) == 0x000000, "Member 'FGoogleAnalyticsParameters::Source' has a wrong offset!");
static_assert(offsetof(FGoogleAnalyticsParameters, Medium) == 0x000010, "Member 'FGoogleAnalyticsParameters::Medium' has a wrong offset!");
static_assert(offsetof(FGoogleAnalyticsParameters, Campaign) == 0x000020, "Member 'FGoogleAnalyticsParameters::Campaign' has a wrong offset!");
static_assert(offsetof(FGoogleAnalyticsParameters, Term) == 0x000030, "Member 'FGoogleAnalyticsParameters::Term' has a wrong offset!");
static_assert(offsetof(FGoogleAnalyticsParameters, Content) == 0x000040, "Member 'FGoogleAnalyticsParameters::Content' has a wrong offset!");

// ScriptStruct FirebaseFeatures.ProviderList
// 0x0010 (0x0010 - 0x0000)
struct FProviderList final
{
public:
	TArray<class FString>                         Providers;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FProviderList) == 0x000008, "Wrong alignment on FProviderList");
static_assert(sizeof(FProviderList) == 0x000010, "Wrong size on FProviderList");
static_assert(offsetof(FProviderList, Providers) == 0x000000, "Member 'FProviderList::Providers' has a wrong offset!");

// ScriptStruct FirebaseFeatures.UserInfoInterface
// 0x0060 (0x0060 - 0x0000)
struct FUserInfoInterface final
{
public:
	class FString                                 Uid;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Email;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhotoUrl;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProviderId;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PhoneNumber;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserInfoInterface) == 0x000008, "Wrong alignment on FUserInfoInterface");
static_assert(sizeof(FUserInfoInterface) == 0x000060, "Wrong size on FUserInfoInterface");
static_assert(offsetof(FUserInfoInterface, Uid) == 0x000000, "Member 'FUserInfoInterface::Uid' has a wrong offset!");
static_assert(offsetof(FUserInfoInterface, Email) == 0x000010, "Member 'FUserInfoInterface::Email' has a wrong offset!");
static_assert(offsetof(FUserInfoInterface, DisplayName) == 0x000020, "Member 'FUserInfoInterface::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserInfoInterface, PhotoUrl) == 0x000030, "Member 'FUserInfoInterface::PhotoUrl' has a wrong offset!");
static_assert(offsetof(FUserInfoInterface, ProviderId) == 0x000040, "Member 'FUserInfoInterface::ProviderId' has a wrong offset!");
static_assert(offsetof(FUserInfoInterface, PhoneNumber) == 0x000050, "Member 'FUserInfoInterface::PhoneNumber' has a wrong offset!");

// ScriptStruct FirebaseFeatures.AdditionalUserInfo
// 0x0078 (0x0078 - 0x0000)
struct FAdditionalUserInfo final
{
public:
	class FString                                 ProviderId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserName;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FFirebaseVariant, struct FFirebaseVariant> Profile;                                           // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCredential                            UpdatedCredential;                                 // 0x0070(0x0008)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdditionalUserInfo) == 0x000008, "Wrong alignment on FAdditionalUserInfo");
static_assert(sizeof(FAdditionalUserInfo) == 0x000078, "Wrong size on FAdditionalUserInfo");
static_assert(offsetof(FAdditionalUserInfo, ProviderId) == 0x000000, "Member 'FAdditionalUserInfo::ProviderId' has a wrong offset!");
static_assert(offsetof(FAdditionalUserInfo, UserName) == 0x000010, "Member 'FAdditionalUserInfo::UserName' has a wrong offset!");
static_assert(offsetof(FAdditionalUserInfo, Profile) == 0x000020, "Member 'FAdditionalUserInfo::Profile' has a wrong offset!");
static_assert(offsetof(FAdditionalUserInfo, UpdatedCredential) == 0x000070, "Member 'FAdditionalUserInfo::UpdatedCredential' has a wrong offset!");

// ScriptStruct FirebaseFeatures.UserMetadata
// 0x0010 (0x0010 - 0x0000)
struct FUserMetadata final
{
public:
	int64                                         LastSignInTimestamp;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         CreationTtimestamp;                                // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserMetadata) == 0x000008, "Wrong alignment on FUserMetadata");
static_assert(sizeof(FUserMetadata) == 0x000010, "Wrong size on FUserMetadata");
static_assert(offsetof(FUserMetadata, LastSignInTimestamp) == 0x000000, "Member 'FUserMetadata::LastSignInTimestamp' has a wrong offset!");
static_assert(offsetof(FUserMetadata, CreationTtimestamp) == 0x000008, "Member 'FUserMetadata::CreationTtimestamp' has a wrong offset!");

// ScriptStruct FirebaseFeatures.SignInResult
// 0x0090 (0x0090 - 0x0000)
struct FSignInResult final
{
public:
	class UUser*                                  User;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAdditionalUserInfo                    Info;                                              // 0x0008(0x0078)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUserMetadata                          Meta;                                              // 0x0080(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSignInResult) == 0x000008, "Wrong alignment on FSignInResult");
static_assert(sizeof(FSignInResult) == 0x000090, "Wrong size on FSignInResult");
static_assert(offsetof(FSignInResult, User) == 0x000000, "Member 'FSignInResult::User' has a wrong offset!");
static_assert(offsetof(FSignInResult, Info) == 0x000008, "Member 'FSignInResult::Info' has a wrong offset!");
static_assert(offsetof(FSignInResult, Meta) == 0x000080, "Member 'FSignInResult::Meta' has a wrong offset!");

// ScriptStruct FirebaseFeatures.AdMobAdRequest
// 0x0080 (0x0080 - 0x0000)
struct FAdMobAdRequest final
{
public:
	TArray<class FString>                         TestDeviceIds;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Keywords;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Extras;                                            // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         BirthdayDay;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayMonth;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BirthdayYear;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdMobGender                                  Gender;                                            // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAdMobChildDirectedTreatmentState             TaggedForChildDirectedTreatment;                   // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E[0x2];                                       // 0x007E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAdMobAdRequest) == 0x000008, "Wrong alignment on FAdMobAdRequest");
static_assert(sizeof(FAdMobAdRequest) == 0x000080, "Wrong size on FAdMobAdRequest");
static_assert(offsetof(FAdMobAdRequest, TestDeviceIds) == 0x000000, "Member 'FAdMobAdRequest::TestDeviceIds' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, Keywords) == 0x000010, "Member 'FAdMobAdRequest::Keywords' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, Extras) == 0x000020, "Member 'FAdMobAdRequest::Extras' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, BirthdayDay) == 0x000070, "Member 'FAdMobAdRequest::BirthdayDay' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, BirthdayMonth) == 0x000074, "Member 'FAdMobAdRequest::BirthdayMonth' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, BirthdayYear) == 0x000078, "Member 'FAdMobAdRequest::BirthdayYear' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, Gender) == 0x00007C, "Member 'FAdMobAdRequest::Gender' has a wrong offset!");
static_assert(offsetof(FAdMobAdRequest, TaggedForChildDirectedTreatment) == 0x00007D, "Member 'FAdMobAdRequest::TaggedForChildDirectedTreatment' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirestoreTimestamp
// 0x0010 (0x0010 - 0x0000)
struct FFirestoreTimestamp final
{
public:
	int64                                         Seconds;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Nanoseconds;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreTimestamp) == 0x000008, "Wrong alignment on FFirestoreTimestamp");
static_assert(sizeof(FFirestoreTimestamp) == 0x000010, "Wrong size on FFirestoreTimestamp");
static_assert(offsetof(FFirestoreTimestamp, Seconds) == 0x000000, "Member 'FFirestoreTimestamp::Seconds' has a wrong offset!");
static_assert(offsetof(FFirestoreTimestamp, Nanoseconds) == 0x000008, "Member 'FFirestoreTimestamp::Nanoseconds' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseStorageMetadata
// 0x0001 (0x0001 - 0x0000)
struct FFirebaseStorageMetadata final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirebaseStorageMetadata) == 0x000001, "Wrong alignment on FFirebaseStorageMetadata");
static_assert(sizeof(FFirebaseStorageMetadata) == 0x000001, "Wrong size on FFirebaseStorageMetadata");

// ScriptStruct FirebaseFeatures.MutableData
// 0x0001 (0x0001 - 0x0000)
struct FMutableData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutableData) == 0x000001, "Wrong alignment on FMutableData");
static_assert(sizeof(FMutableData) == 0x000001, "Wrong size on FMutableData");

// ScriptStruct FirebaseFeatures.FederatedOAuthProviderData
// 0x0070 (0x0070 - 0x0000)
struct FFederatedOAuthProviderData final
{
public:
	class FString                                 ProviderId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Scopes;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            CustomParameters;                                  // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFederatedOAuthProviderData) == 0x000008, "Wrong alignment on FFederatedOAuthProviderData");
static_assert(sizeof(FFederatedOAuthProviderData) == 0x000070, "Wrong size on FFederatedOAuthProviderData");
static_assert(offsetof(FFederatedOAuthProviderData, ProviderId) == 0x000000, "Member 'FFederatedOAuthProviderData::ProviderId' has a wrong offset!");
static_assert(offsetof(FFederatedOAuthProviderData, Scopes) == 0x000010, "Member 'FFederatedOAuthProviderData::Scopes' has a wrong offset!");
static_assert(offsetof(FFederatedOAuthProviderData, CustomParameters) == 0x000020, "Member 'FFederatedOAuthProviderData::CustomParameters' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FederatedAuthProvider
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FFederatedAuthProvider final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFederatedAuthProvider) == 0x000008, "Wrong alignment on FFederatedAuthProvider");
static_assert(sizeof(FFederatedAuthProvider) == 0x000010, "Wrong size on FFederatedAuthProvider");

// ScriptStruct FirebaseFeatures.FirebaseHttpsCallableReference
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFirebaseHttpsCallableReference final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirebaseHttpsCallableReference) == 0x000008, "Wrong alignment on FFirebaseHttpsCallableReference");
static_assert(sizeof(FFirebaseHttpsCallableReference) == 0x000008, "Wrong size on FFirebaseHttpsCallableReference");

// ScriptStruct FirebaseFeatures.FirestoreSnapshotMetadata
// 0x0002 (0x0002 - 0x0000)
struct FFirestoreSnapshotMetadata final
{
public:
	bool                                          bHasPendingWrites;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFromCache;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirestoreSnapshotMetadata) == 0x000001, "Wrong alignment on FFirestoreSnapshotMetadata");
static_assert(sizeof(FFirestoreSnapshotMetadata) == 0x000002, "Wrong size on FFirestoreSnapshotMetadata");
static_assert(offsetof(FFirestoreSnapshotMetadata, bHasPendingWrites) == 0x000000, "Member 'FFirestoreSnapshotMetadata::bHasPendingWrites' has a wrong offset!");
static_assert(offsetof(FFirestoreSnapshotMetadata, bIsFromCache) == 0x000001, "Member 'FFirestoreSnapshotMetadata::bIsFromCache' has a wrong offset!");

// ScriptStruct FirebaseFeatures.ITunesConnectAnalyticsParameters
// 0x0030 (0x0030 - 0x0000)
struct FITunesConnectAnalyticsParameters final
{
public:
	class FString                                 ProviderToken;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AffiliateToken;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CampaignToken;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FITunesConnectAnalyticsParameters) == 0x000008, "Wrong alignment on FITunesConnectAnalyticsParameters");
static_assert(sizeof(FITunesConnectAnalyticsParameters) == 0x000030, "Wrong size on FITunesConnectAnalyticsParameters");
static_assert(offsetof(FITunesConnectAnalyticsParameters, ProviderToken) == 0x000000, "Member 'FITunesConnectAnalyticsParameters::ProviderToken' has a wrong offset!");
static_assert(offsetof(FITunesConnectAnalyticsParameters, AffiliateToken) == 0x000010, "Member 'FITunesConnectAnalyticsParameters::AffiliateToken' has a wrong offset!");
static_assert(offsetof(FITunesConnectAnalyticsParameters, CampaignToken) == 0x000020, "Member 'FITunesConnectAnalyticsParameters::CampaignToken' has a wrong offset!");

// ScriptStruct FirebaseFeatures.AndroidParameters
// 0x0028 (0x0028 - 0x0000)
struct FAndroidParameters final
{
public:
	class FString                                 PackageName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FallbackUrl;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumVersion;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAndroidParameters) == 0x000008, "Wrong alignment on FAndroidParameters");
static_assert(sizeof(FAndroidParameters) == 0x000028, "Wrong size on FAndroidParameters");
static_assert(offsetof(FAndroidParameters, PackageName) == 0x000000, "Member 'FAndroidParameters::PackageName' has a wrong offset!");
static_assert(offsetof(FAndroidParameters, FallbackUrl) == 0x000010, "Member 'FAndroidParameters::FallbackUrl' has a wrong offset!");
static_assert(offsetof(FAndroidParameters, MinimumVersion) == 0x000020, "Member 'FAndroidParameters::MinimumVersion' has a wrong offset!");

// ScriptStruct FirebaseFeatures.SocialMetaTagParameters
// 0x0030 (0x0030 - 0x0000)
struct FSocialMetaTagParameters final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImageUrl;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSocialMetaTagParameters) == 0x000008, "Wrong alignment on FSocialMetaTagParameters");
static_assert(sizeof(FSocialMetaTagParameters) == 0x000030, "Wrong size on FSocialMetaTagParameters");
static_assert(offsetof(FSocialMetaTagParameters, Title) == 0x000000, "Member 'FSocialMetaTagParameters::Title' has a wrong offset!");
static_assert(offsetof(FSocialMetaTagParameters, Description) == 0x000010, "Member 'FSocialMetaTagParameters::Description' has a wrong offset!");
static_assert(offsetof(FSocialMetaTagParameters, ImageUrl) == 0x000020, "Member 'FSocialMetaTagParameters::ImageUrl' has a wrong offset!");

// ScriptStruct FirebaseFeatures.DynamicLinkOptions
// 0x0001 (0x0001 - 0x0000)
struct FDynamicLinkOptions final
{
public:
	EPathLength                                   PathLength;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicLinkOptions) == 0x000001, "Wrong alignment on FDynamicLinkOptions");
static_assert(sizeof(FDynamicLinkOptions) == 0x000001, "Wrong size on FDynamicLinkOptions");
static_assert(offsetof(FDynamicLinkOptions, PathLength) == 0x000000, "Member 'FDynamicLinkOptions::PathLength' has a wrong offset!");

// ScriptStruct FirebaseFeatures.DynamicLinkComponents
// 0x0168 (0x0168 - 0x0000)
struct FDynamicLinkComponents final
{
public:
	class FString                                 Link;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DomainUriPrefix;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGoogleAnalyticsParameters             GoogleAnalyticsParameters;                         // 0x0020(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FIOSParameters                         IOSParameters;                                     // 0x0070(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FITunesConnectAnalyticsParameters      ITunesConnectAnalyticsParameters;                  // 0x00E0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAndroidParameters                     AndroidParameters;                                 // 0x0110(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSocialMetaTagParameters               SocialMetaTagParameters;                           // 0x0138(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicLinkComponents) == 0x000008, "Wrong alignment on FDynamicLinkComponents");
static_assert(sizeof(FDynamicLinkComponents) == 0x000168, "Wrong size on FDynamicLinkComponents");
static_assert(offsetof(FDynamicLinkComponents, Link) == 0x000000, "Member 'FDynamicLinkComponents::Link' has a wrong offset!");
static_assert(offsetof(FDynamicLinkComponents, DomainUriPrefix) == 0x000010, "Member 'FDynamicLinkComponents::DomainUriPrefix' has a wrong offset!");
static_assert(offsetof(FDynamicLinkComponents, GoogleAnalyticsParameters) == 0x000020, "Member 'FDynamicLinkComponents::GoogleAnalyticsParameters' has a wrong offset!");
static_assert(offsetof(FDynamicLinkComponents, IOSParameters) == 0x000070, "Member 'FDynamicLinkComponents::IOSParameters' has a wrong offset!");
static_assert(offsetof(FDynamicLinkComponents, ITunesConnectAnalyticsParameters) == 0x0000E0, "Member 'FDynamicLinkComponents::ITunesConnectAnalyticsParameters' has a wrong offset!");
static_assert(offsetof(FDynamicLinkComponents, AndroidParameters) == 0x000110, "Member 'FDynamicLinkComponents::AndroidParameters' has a wrong offset!");
static_assert(offsetof(FDynamicLinkComponents, SocialMetaTagParameters) == 0x000138, "Member 'FDynamicLinkComponents::SocialMetaTagParameters' has a wrong offset!");

// ScriptStruct FirebaseFeatures.AdMobBoundingBox
// 0x0010 (0x0010 - 0x0000)
struct FAdMobBoundingBox final
{
public:
	int32                                         Height;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdMobBoundingBox) == 0x000004, "Wrong alignment on FAdMobBoundingBox");
static_assert(sizeof(FAdMobBoundingBox) == 0x000010, "Wrong size on FAdMobBoundingBox");
static_assert(offsetof(FAdMobBoundingBox, Height) == 0x000000, "Member 'FAdMobBoundingBox::Height' has a wrong offset!");
static_assert(offsetof(FAdMobBoundingBox, Width) == 0x000004, "Member 'FAdMobBoundingBox::Width' has a wrong offset!");
static_assert(offsetof(FAdMobBoundingBox, X) == 0x000008, "Member 'FAdMobBoundingBox::X' has a wrong offset!");
static_assert(offsetof(FAdMobBoundingBox, Y) == 0x00000C, "Member 'FAdMobBoundingBox::Y' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirestoreFieldPath
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFirestoreFieldPath final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreFieldPath) == 0x000008, "Wrong alignment on FFirestoreFieldPath");
static_assert(sizeof(FFirestoreFieldPath) == 0x000008, "Wrong size on FFirestoreFieldPath");

// ScriptStruct FirebaseFeatures.FirestoreGeoPoint
// 0x0008 (0x0008 - 0x0000)
struct FFirestoreGeoPoint final
{
public:
	float                                         Latitude;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirestoreGeoPoint) == 0x000004, "Wrong alignment on FFirestoreGeoPoint");
static_assert(sizeof(FFirestoreGeoPoint) == 0x000008, "Wrong size on FFirestoreGeoPoint");
static_assert(offsetof(FFirestoreGeoPoint, Latitude) == 0x000000, "Member 'FFirestoreGeoPoint::Latitude' has a wrong offset!");
static_assert(offsetof(FFirestoreGeoPoint, Longitude) == 0x000004, "Member 'FFirestoreGeoPoint::Longitude' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirestoreFieldValue
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FFirestoreFieldValue final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreFieldValue) == 0x000008, "Wrong alignment on FFirestoreFieldValue");
static_assert(sizeof(FFirestoreFieldValue) == 0x000008, "Wrong size on FFirestoreFieldValue");

// ScriptStruct FirebaseFeatures.FirebaseAppOptions
// 0x0070 (0x0070 - 0x0000)
struct FFirebaseAppOptions final
{
public:
	class FString                                 AppID;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 APIKey;                                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MessagingSenderID;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DatabaseURL;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GATrackingID;                                      // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StorageBucket;                                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProjectID;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseAppOptions) == 0x000008, "Wrong alignment on FFirebaseAppOptions");
static_assert(sizeof(FFirebaseAppOptions) == 0x000070, "Wrong size on FFirebaseAppOptions");
static_assert(offsetof(FFirebaseAppOptions, AppID) == 0x000000, "Member 'FFirebaseAppOptions::AppID' has a wrong offset!");
static_assert(offsetof(FFirebaseAppOptions, APIKey) == 0x000010, "Member 'FFirebaseAppOptions::APIKey' has a wrong offset!");
static_assert(offsetof(FFirebaseAppOptions, MessagingSenderID) == 0x000020, "Member 'FFirebaseAppOptions::MessagingSenderID' has a wrong offset!");
static_assert(offsetof(FFirebaseAppOptions, DatabaseURL) == 0x000030, "Member 'FFirebaseAppOptions::DatabaseURL' has a wrong offset!");
static_assert(offsetof(FFirebaseAppOptions, GATrackingID) == 0x000040, "Member 'FFirebaseAppOptions::GATrackingID' has a wrong offset!");
static_assert(offsetof(FFirebaseAppOptions, StorageBucket) == 0x000050, "Member 'FFirebaseAppOptions::StorageBucket' has a wrong offset!");
static_assert(offsetof(FFirebaseAppOptions, ProjectID) == 0x000060, "Member 'FFirebaseAppOptions::ProjectID' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirestoreSettings
// 0x0018 (0x0018 - 0x0000)
struct FFirestoreSettings final
{
public:
	class FString                                 Host;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSslEnabled;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistenceEnabled;                               // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFirestoreSettings) == 0x000008, "Wrong alignment on FFirestoreSettings");
static_assert(sizeof(FFirestoreSettings) == 0x000018, "Wrong size on FFirestoreSettings");
static_assert(offsetof(FFirestoreSettings, Host) == 0x000000, "Member 'FFirestoreSettings::Host' has a wrong offset!");
static_assert(offsetof(FFirestoreSettings, bSslEnabled) == 0x000010, "Member 'FFirestoreSettings::bSslEnabled' has a wrong offset!");
static_assert(offsetof(FFirestoreSettings, bPersistenceEnabled) == 0x000011, "Member 'FFirestoreSettings::bPersistenceEnabled' has a wrong offset!");

// ScriptStruct FirebaseFeatures.WriteBatch
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FWriteBatch final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWriteBatch) == 0x000008, "Wrong alignment on FWriteBatch");
static_assert(sizeof(FWriteBatch) == 0x000008, "Wrong size on FWriteBatch");

// ScriptStruct FirebaseFeatures.QuerySnapshotListenerHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FQuerySnapshotListenerHandle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuerySnapshotListenerHandle) == 0x000008, "Wrong alignment on FQuerySnapshotListenerHandle");
static_assert(sizeof(FQuerySnapshotListenerHandle) == 0x000018, "Wrong size on FQuerySnapshotListenerHandle");

// ScriptStruct FirebaseFeatures.FirebaseConfigInfo
// 0x0018 (0x0018 - 0x0000)
struct FFirebaseConfigInfo final
{
public:
	int64                                         FetchTime;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFirebaseLastFetchStatus                      LastFetchStatus;                                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFirebaseFetchFailureReason                   LastFetchFailureReason;                            // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ThrottledEndTime;                                  // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseConfigInfo) == 0x000008, "Wrong alignment on FFirebaseConfigInfo");
static_assert(sizeof(FFirebaseConfigInfo) == 0x000018, "Wrong size on FFirebaseConfigInfo");
static_assert(offsetof(FFirebaseConfigInfo, FetchTime) == 0x000000, "Member 'FFirebaseConfigInfo::FetchTime' has a wrong offset!");
static_assert(offsetof(FFirebaseConfigInfo, LastFetchStatus) == 0x000008, "Member 'FFirebaseConfigInfo::LastFetchStatus' has a wrong offset!");
static_assert(offsetof(FFirebaseConfigInfo, LastFetchFailureReason) == 0x000009, "Member 'FFirebaseConfigInfo::LastFetchFailureReason' has a wrong offset!");
static_assert(offsetof(FFirebaseConfigInfo, ThrottledEndTime) == 0x000010, "Member 'FFirebaseConfigInfo::ThrottledEndTime' has a wrong offset!");

// ScriptStruct FirebaseFeatures.FirebaseValueInfo
// 0x0002 (0x0002 - 0x0000)
struct FFirebaseValueInfo final
{
public:
	EFirebaseValueSource                          Source;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConversionSuccessful;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFirebaseValueInfo) == 0x000001, "Wrong alignment on FFirebaseValueInfo");
static_assert(sizeof(FFirebaseValueInfo) == 0x000002, "Wrong size on FFirebaseValueInfo");
static_assert(offsetof(FFirebaseValueInfo, Source) == 0x000000, "Member 'FFirebaseValueInfo::Source' has a wrong offset!");
static_assert(offsetof(FFirebaseValueInfo, bConversionSuccessful) == 0x000001, "Member 'FFirebaseValueInfo::bConversionSuccessful' has a wrong offset!");

// ScriptStruct FirebaseFeatures.UserProfile
// 0x0030 (0x0030 - 0x0000)
struct FUserProfile final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetDisplayName;                                 // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PhotoUrl;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetPhotoUrl;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserProfile) == 0x000008, "Wrong alignment on FUserProfile");
static_assert(sizeof(FUserProfile) == 0x000030, "Wrong size on FUserProfile");
static_assert(offsetof(FUserProfile, DisplayName) == 0x000000, "Member 'FUserProfile::DisplayName' has a wrong offset!");
static_assert(offsetof(FUserProfile, bResetDisplayName) == 0x000010, "Member 'FUserProfile::bResetDisplayName' has a wrong offset!");
static_assert(offsetof(FUserProfile, PhotoUrl) == 0x000018, "Member 'FUserProfile::PhotoUrl' has a wrong offset!");
static_assert(offsetof(FUserProfile, bResetPhotoUrl) == 0x000028, "Member 'FUserProfile::bResetPhotoUrl' has a wrong offset!");

}

