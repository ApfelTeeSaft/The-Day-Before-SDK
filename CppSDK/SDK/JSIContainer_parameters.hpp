#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JSIContainer

#include "Basic.hpp"

#include "FItemInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ContainerType_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "ContainerPickupsInfo_structs.hpp"
#include "JSItemType_structs.hpp"
#include "Engine_structs.hpp"
#include "SlotRarity_structs.hpp"
#include "InputCore_structs.hpp"
#include "DefaultItemInfo_structs.hpp"


namespace SDK::Params
{

// Function JSIContainer.JSIContainer_C.AddMultipleInventoryItems
// 0x0288 (0x0288 - 0x0000)
struct JSIContainer_C_AddMultipleInventoryItems final
{
public:
	TArray<int32>                                 ItemIDs;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 NotAdded;                                          // 0x0010(0x0010)(Parm, OutParm)
	TArray<int32>                                 IDNotAdded;                                        // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added;                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_ItemInfo;             // 0x0058(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef;          // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewInventoryItem_StackRemainder;       // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddMultipleInventoryItems) == 0x000008, "Wrong alignment on JSIContainer_C_AddMultipleInventoryItems");
static_assert(sizeof(JSIContainer_C_AddMultipleInventoryItems) == 0x000288, "Wrong size on JSIContainer_C_AddMultipleInventoryItems");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, ItemIDs) == 0x000000, "Member 'JSIContainer_C_AddMultipleInventoryItems::ItemIDs' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, NotAdded) == 0x000010, "Member 'JSIContainer_C_AddMultipleInventoryItems::NotAdded' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, IDNotAdded) == 0x000020, "Member 'JSIContainer_C_AddMultipleInventoryItems::IDNotAdded' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, Temp_int_Array_Index_Variable) == 0x000034, "Member 'JSIContainer_C_AddMultipleInventoryItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'JSIContainer_C_AddMultipleInventoryItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_Added) == 0x00004C, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_SlotIndex) == 0x000050, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_ItemInfo) == 0x000058, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_SlotItemRef) == 0x000278, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddMultipleInventoryItems, CallFunc_AddNewInventoryItem_StackRemainder) == 0x000280, "Member 'JSIContainer_C_AddMultipleInventoryItems::CallFunc_AddNewInventoryItem_StackRemainder' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddNewInventoryItem
// 0x1288 (0x1288 - 0x0000)
struct JSIContainer_C_AddNewInventoryItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryToStack_;                                       // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CustomInfo;                                        // 0x0018(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0238(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x023C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             ItemInfo;                                          // 0x0240(0x0220)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0460(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         StackRemainder;                                    // 0x0468(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ArrayElement;                                      // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IdenticalVector;                                   // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OrigDim;                                           // 0x0480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FromDataSource;                                    // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OrigSlotVec;                                       // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             TempItemInfo;                                      // 0x04A8(0x0220)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         FreeSpace;                                         // 0x06C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             K2Node_SetFieldsInStruct_StructOut;                // 0x06D0(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x08F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x08F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0900(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0910(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0911(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_912[0x2];                                      // 0x0912(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0914(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count;                        // 0x091C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0920(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0921(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_922[0x6];                                      // 0x0922(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0928(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0938(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0939(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x093A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x093B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x093C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x093D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x093E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x093F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0944(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_1;                      // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0950(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0954(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0958(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_959[0x3];                                      // 0x0959(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_979[0x3];                                      // 0x0979(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x097C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0980(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0988(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x098C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x098D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x098E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewItem_Added;                         // 0x098F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewItem_AddedToSlot;                   // 0x0990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_994[0x4];                                      // 0x0994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_AddNewItem_Info;                          // 0x0998(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewItem_SlotItemRef;                   // 0x0BB8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0BC0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0BD0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0BE0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0BE1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0BE2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE3[0x1];                                      // 0x0BE3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0BE4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0BE8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0BE9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BEA[0x6];                                      // 0x0BEA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0BF0(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0E10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E11[0x7];                                      // 0x0E11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_1;                           // 0x0E18(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             K2Node_Select_Default_2;                           // 0x0E28(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x1048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1049[0x3];                                     // 0x1049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x104C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewItem_Added_1;                       // 0x1050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1051[0x3];                                     // 0x1051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewItem_AddedToSlot_1;                 // 0x1054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewItem_Info_1;                        // 0x1058(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewItem_SlotItemRef_1;                 // 0x1278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_3;                           // 0x1280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x1281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1282[0x2];                                     // 0x1282(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x1284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddNewInventoryItem) == 0x000008, "Wrong alignment on JSIContainer_C_AddNewInventoryItem");
static_assert(sizeof(JSIContainer_C_AddNewInventoryItem) == 0x001288, "Wrong size on JSIContainer_C_AddNewInventoryItem");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ItemId) == 0x000000, "Member 'JSIContainer_C_AddNewInventoryItem::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Count) == 0x000008, "Member 'JSIContainer_C_AddNewInventoryItem::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ToSlot) == 0x00000C, "Member 'JSIContainer_C_AddNewInventoryItem::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Rotated_) == 0x000010, "Member 'JSIContainer_C_AddNewInventoryItem::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, TryRotated_) == 0x000011, "Member 'JSIContainer_C_AddNewInventoryItem::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, TryToStack_) == 0x000012, "Member 'JSIContainer_C_AddNewInventoryItem::TryToStack_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CustomInfo) == 0x000018, "Member 'JSIContainer_C_AddNewInventoryItem::CustomInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Added) == 0x000238, "Member 'JSIContainer_C_AddNewInventoryItem::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, SlotIndex) == 0x00023C, "Member 'JSIContainer_C_AddNewInventoryItem::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ItemInfo) == 0x000240, "Member 'JSIContainer_C_AddNewInventoryItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, SlotItemRef) == 0x000460, "Member 'JSIContainer_C_AddNewInventoryItem::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, StackRemainder) == 0x000468, "Member 'JSIContainer_C_AddNewInventoryItem::StackRemainder' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, ArrayElement) == 0x000470, "Member 'JSIContainer_C_AddNewInventoryItem::ArrayElement' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, IdenticalVector) == 0x000478, "Member 'JSIContainer_C_AddNewInventoryItem::IdenticalVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, OrigDim) == 0x000480, "Member 'JSIContainer_C_AddNewInventoryItem::OrigDim' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, FromDataSource) == 0x000490, "Member 'JSIContainer_C_AddNewInventoryItem::FromDataSource' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, OrigSlotVec) == 0x000498, "Member 'JSIContainer_C_AddNewInventoryItem::OrigSlotVec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, TempItemInfo) == 0x0004A8, "Member 'JSIContainer_C_AddNewInventoryItem::TempItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, FreeSpace) == 0x0006C8, "Member 'JSIContainer_C_AddNewInventoryItem::FreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CurrentCount) == 0x0006CC, "Member 'JSIContainer_C_AddNewInventoryItem::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, K2Node_SetFieldsInStruct_StructOut) == 0x0006D0, "Member 'JSIContainer_C_AddNewInventoryItem::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BreakVector2D_X) == 0x0008F0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BreakVector2D_Y) == 0x0008F8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_MakeVector2D_ReturnValue) == 0x000900, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Greater_IntInt_ReturnValue) == 0x000910, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000911, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetCount_Count) == 0x000914, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetCount_Count_1) == 0x000918, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_UpdateCount_Count) == 0x00091C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000920, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable) == 0x000921, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Conv_NameToString_ReturnValue) == 0x000928, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable_1) == 0x000938, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000939, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable_2) == 0x00093A, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue) == 0x00093B, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable_3) == 0x00093C, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable_4) == 0x00093D, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Greater_IntInt_ReturnValue_2) == 0x00093E, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Greater_IntInt_ReturnValue_3) == 0x00093F, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Array_Length_ReturnValue) == 0x000940, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Add_IntInt_ReturnValue) == 0x000944, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_UpdateCount_Count_1) == 0x000948, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_UpdateCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00094C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000950, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_int_Loop_Counter_Variable) == 0x000954, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Less_IntInt_ReturnValue) == 0x000958, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x00095C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue) == 0x000960, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BreakVector2D_X_1) == 0x000968, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BreakVector2D_Y_1) == 0x000970, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x000978, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_int_Array_Index_Variable) == 0x00097C, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Array_Get_Item) == 0x000980, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000988, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x00098C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_1) == 0x00098D, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_BooleanAND_ReturnValue_2) == 0x00098E, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_Added) == 0x00098F, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_AddedToSlot) == 0x000990, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_Info) == 0x000998, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_SlotItemRef) == 0x000BB8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Concat_StrStr_ReturnValue) == 0x000BC0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000BD0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x000BE0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, K2Node_Select_Default) == 0x000BE1, "Member 'JSIContainer_C_AddNewInventoryItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue_2) == 0x000BE2, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_SelectInt_ReturnValue) == 0x000BE4, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000BE8, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, Temp_bool_Variable_5) == 0x000BE9, "Member 'JSIContainer_C_AddNewInventoryItem::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetDataTableRowFromName_OutRow) == 0x000BF0, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000E10, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, K2Node_Select_Default_1) == 0x000E18, "Member 'JSIContainer_C_AddNewInventoryItem::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, K2Node_Select_Default_2) == 0x000E28, "Member 'JSIContainer_C_AddNewInventoryItem::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_IsValid_ReturnValue) == 0x001048, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_SelectInt_ReturnValue_1) == 0x00104C, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_Added_1) == 0x001050, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_Added_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_AddedToSlot_1) == 0x001054, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_AddedToSlot_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_Info_1) == 0x001058, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_Info_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_AddNewItem_SlotItemRef_1) == 0x001278, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_AddNewItem_SlotItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, K2Node_Select_Default_3) == 0x001280, "Member 'JSIContainer_C_AddNewInventoryItem::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_Not_PreBool_ReturnValue_3) == 0x001281, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem, CallFunc_SelectInt_ReturnValue_2) == 0x001284, "Member 'JSIContainer_C_AddNewInventoryItem::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddNewInventoryItem_CustomVector
// 0x0D28 (0x0D28 - 0x0000)
struct JSIContainer_C_AddNewInventoryItem_CustomVector final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlotVector;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OriginalSize;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CustomInfo;                                        // 0x0030(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0250(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0254(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             ItemInfo;                                          // 0x0258(0x0220)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0478(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0480(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0481(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0482(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_483[0x5];                                      // 0x0483(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0488(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x06A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x06A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AA[0x6];                                      // 0x06AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             K2Node_Select_Default;                             // 0x06B0(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D4[0x4];                                      // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             K2Node_SetFieldsInStruct_StructOut;                // 0x08D8(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewItem_Added;                         // 0x0AF8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF9[0x3];                                      // 0x0AF9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewItem_AddedToSlot;                   // 0x0AFC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewItem_Info;                          // 0x0B00(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewItem_SlotItemRef;                   // 0x0D20(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddNewInventoryItem_CustomVector) == 0x000008, "Wrong alignment on JSIContainer_C_AddNewInventoryItem_CustomVector");
static_assert(sizeof(JSIContainer_C_AddNewInventoryItem_CustomVector) == 0x000D28, "Wrong size on JSIContainer_C_AddNewInventoryItem_CustomVector");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, ItemId) == 0x000000, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, Count) == 0x000008, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, ToSlot) == 0x00000C, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, SlotVector) == 0x000010, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, OriginalSize) == 0x000020, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::OriginalSize' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CustomInfo) == 0x000030, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CustomInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, Added) == 0x000250, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, SlotIndex) == 0x000254, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, ItemInfo) == 0x000258, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, SlotItemRef) == 0x000478, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000480, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_Less_IntInt_ReturnValue) == 0x000481, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, Temp_bool_Variable) == 0x000482, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_GetDataTableRowFromName_OutRow) == 0x000488, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0006A8, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_IsValid_ReturnValue) == 0x0006A9, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, K2Node_Select_Default) == 0x0006B0, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_SelectInt_ReturnValue) == 0x0008D0, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, K2Node_SetFieldsInStruct_StructOut) == 0x0008D8, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_Added) == 0x000AF8, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_AddedToSlot) == 0x000AFC, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_Info) == 0x000B00, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewInventoryItem_CustomVector, CallFunc_AddNewItem_SlotItemRef) == 0x000D20, "Member 'JSIContainer_C_AddNewInventoryItem_CustomVector::CallFunc_AddNewItem_SlotItemRef' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddNewItem
// 0x0A88 (0x0A88 - 0x0000)
struct JSIContainer_C_AddNewItem final
{
public:
	int32                                         ToSlot;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Image;                                             // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FVector2D                              SlotVector;                                        // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlotRarity                                   Rarity;                                            // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             ItemInfo;                                          // 0x0050(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          SetVector;                                         // 0x0270(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Added;                                             // 0x0271(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_272[0x2];                                      // 0x0272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddedToSlot;                                       // 0x0274(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             Info;                                              // 0x0278(0x0220)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0498(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             LocalItemInfo;                                     // 0x04A0(0x0220)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          IsDesiredSlot_;                                    // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C1[0x3];                                      // 0x06C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AddToSlot;                                         // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SlotInvalid_;                                      // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RowIndex;                                          // 0x06CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex;                                       // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                NewSlotPadding;                                    // 0x06D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            NewItem;                                           // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    ArrayOfItemFound;                                  // 0x06F0(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            ItemFound;                                         // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue;                       // 0x0708(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CountIn_OutInt;                           // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0714(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             K2Node_SetFieldsInStruct_StructOut;                // 0x0718(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0938(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x093C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0941(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0942(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0943(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0944(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x094C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0951(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0952(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0953(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_954[0x4];                                      // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculateWeight_Weight;                   // 0x0958(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0978(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_979[0x7];                                      // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0980(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0988(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0990(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_994[0x4];                                      // 0x0994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0998(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x09A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x09A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A5[0x3];                                      // 0x09A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x09A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x09AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x09B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x09B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B2[0x6];                                      // 0x09B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x09B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x09C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x09CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x09CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x09CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9CF[0x1];                                      // 0x09CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x09D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x09D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x09D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x09D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x09D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x09D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x09DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x09EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x09F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x09F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x09F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9FC[0x4];                                      // 0x09FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0A00(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x0A08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0A0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0A10(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A11[0x3];                                      // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0A14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0A18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1C[0x4];                                      // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0A20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0A28(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0A30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A34[0x4];                                      // 0x0A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x0A38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x0A40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0A48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x0A4C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0A50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A51[0x3];                                      // 0x0A51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0A54(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0A58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x0A59(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0A5A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5B[0x5];                                      // 0x0A5B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Map_Find_Value;                           // 0x0A60(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0A68(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A69[0x7];                                      // 0x0A69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_AddChildToOverlay_ReturnValue;            // 0x0A70(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0A78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0A7C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0A80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_AddNewItem) == 0x000008, "Wrong alignment on JSIContainer_C_AddNewItem");
static_assert(sizeof(JSIContainer_C_AddNewItem) == 0x000A88, "Wrong size on JSIContainer_C_AddNewItem");
static_assert(offsetof(JSIContainer_C_AddNewItem, ToSlot) == 0x000000, "Member 'JSIContainer_C_AddNewItem::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Image) == 0x000008, "Member 'JSIContainer_C_AddNewItem::Image' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SlotVector) == 0x000038, "Member 'JSIContainer_C_AddNewItem::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Rarity) == 0x000048, "Member 'JSIContainer_C_AddNewItem::Rarity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ItemInfo) == 0x000050, "Member 'JSIContainer_C_AddNewItem::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SetVector) == 0x000270, "Member 'JSIContainer_C_AddNewItem::SetVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Added) == 0x000271, "Member 'JSIContainer_C_AddNewItem::Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, AddedToSlot) == 0x000274, "Member 'JSIContainer_C_AddNewItem::AddedToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Info) == 0x000278, "Member 'JSIContainer_C_AddNewItem::Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SlotItemRef) == 0x000498, "Member 'JSIContainer_C_AddNewItem::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, LocalItemInfo) == 0x0004A0, "Member 'JSIContainer_C_AddNewItem::LocalItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, IsDesiredSlot_) == 0x0006C0, "Member 'JSIContainer_C_AddNewItem::IsDesiredSlot_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, AddToSlot) == 0x0006C4, "Member 'JSIContainer_C_AddNewItem::AddToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, SlotInvalid_) == 0x0006C8, "Member 'JSIContainer_C_AddNewItem::SlotInvalid_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, RowIndex) == 0x0006CC, "Member 'JSIContainer_C_AddNewItem::RowIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ColumnIndex) == 0x0006D0, "Member 'JSIContainer_C_AddNewItem::ColumnIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, NewSlotPadding) == 0x0006D4, "Member 'JSIContainer_C_AddNewItem::NewSlotPadding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, NewItem) == 0x0006E8, "Member 'JSIContainer_C_AddNewItem::NewItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ArrayOfItemFound) == 0x0006F0, "Member 'JSIContainer_C_AddNewItem::ArrayOfItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, ItemFound) == 0x000700, "Member 'JSIContainer_C_AddNewItem::ItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Create_ReturnValue) == 0x000708, "Member 'JSIContainer_C_AddNewItem::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_CountIn_OutInt) == 0x000710, "Member 'JSIContainer_C_AddNewItem::CallFunc_CountIn_OutInt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_SelectInt_ReturnValue) == 0x000714, "Member 'JSIContainer_C_AddNewItem::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, K2Node_SetFieldsInStruct_StructOut) == 0x000718, "Member 'JSIContainer_C_AddNewItem::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Variable) == 0x000938, "Member 'JSIContainer_C_AddNewItem::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue) == 0x00093C, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_bool_Variable) == 0x000940, "Member 'JSIContainer_C_AddNewItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Not_PreBool_ReturnValue) == 0x000941, "Member 'JSIContainer_C_AddNewItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_bool_Variable_1) == 0x000942, "Member 'JSIContainer_C_AddNewItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x000943, "Member 'JSIContainer_C_AddNewItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Loop_Counter_Variable) == 0x000944, "Member 'JSIContainer_C_AddNewItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x000948, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Array_Index_Variable) == 0x00094C, "Member 'JSIContainer_C_AddNewItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_IsValid_ReturnValue) == 0x000950, "Member 'JSIContainer_C_AddNewItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000951, "Member 'JSIContainer_C_AddNewItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue) == 0x000952, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_IsEmptySlot_isEmpty) == 0x000953, "Member 'JSIContainer_C_AddNewItem::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_CalculateWeight_Weight) == 0x000958, "Member 'JSIContainer_C_AddNewItem::CallFunc_CalculateWeight_Weight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000960, "Member 'JSIContainer_C_AddNewItem::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000968, "Member 'JSIContainer_C_AddNewItem::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000970, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000978, "Member 'JSIContainer_C_AddNewItem::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_X) == 0x000980, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_Y) == 0x000988, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue) == 0x000990, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Get_Item) == 0x000998, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_2) == 0x0009A0, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0009A4, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue_1) == 0x0009A8, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_3) == 0x0009AC, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0009B0, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_1) == 0x0009B1, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_CalculateSize_ReturnValue) == 0x0009B8, "Member 'JSIContainer_C_AddNewItem::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Add_ReturnValue) == 0x0009C8, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Not_PreBool_ReturnValue_2) == 0x0009CC, "Member 'JSIContainer_C_AddNewItem::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_2) == 0x0009CD, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_3) == 0x0009CE, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetEmptySlot_SlotIndex) == 0x0009D0, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetEmptySlot_Found_) == 0x0009D4, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Less_IntInt_ReturnValue) == 0x0009D5, "Member 'JSIContainer_C_AddNewItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_IsValid_ReturnValue_1) == 0x0009D6, "Member 'JSIContainer_C_AddNewItem::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0009D7, "Member 'JSIContainer_C_AddNewItem::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_4) == 0x0009D8, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetPaddingBySlotIndex_Padding) == 0x0009DC, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x0009EC, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetPaddingBySlotIndex_Row) == 0x0009F0, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, Temp_int_Variable_1) == 0x0009F4, "Member 'JSIContainer_C_AddNewItem::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_5) == 0x0009F8, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Get_Item_1) == 0x000A00, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x000A08, "Member 'JSIContainer_C_AddNewItem::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Length_ReturnValue) == 0x000A0C, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000A10, "Member 'JSIContainer_C_AddNewItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Add_IntInt_ReturnValue_6) == 0x000A14, "Member 'JSIContainer_C_AddNewItem::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Add_ReturnValue_1) == 0x000A18, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_X_1) == 0x000A20, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_Y_1) == 0x000A28, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue_2) == 0x000A30, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_X_2) == 0x000A38, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BreakVector2D_Y_2) == 0x000A40, "Member 'JSIContainer_C_AddNewItem::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000A48, "Member 'JSIContainer_C_AddNewItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_FTrunc_ReturnValue_3) == 0x000A4C, "Member 'JSIContainer_C_AddNewItem::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000A50, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000A54, "Member 'JSIContainer_C_AddNewItem::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_4) == 0x000A58, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x000A59, "Member 'JSIContainer_C_AddNewItem::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_BooleanAND_ReturnValue_5) == 0x000A5A, "Member 'JSIContainer_C_AddNewItem::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Map_Find_Value) == 0x000A60, "Member 'JSIContainer_C_AddNewItem::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Map_Find_ReturnValue) == 0x000A68, "Member 'JSIContainer_C_AddNewItem::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_AddChildToOverlay_ReturnValue) == 0x000A70, "Member 'JSIContainer_C_AddNewItem::CallFunc_AddChildToOverlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Array_Length_ReturnValue_1) == 0x000A78, "Member 'JSIContainer_C_AddNewItem::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000A7C, "Member 'JSIContainer_C_AddNewItem::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_AddNewItem, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000A80, "Member 'JSIContainer_C_AddNewItem::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.AddSortHighlightedTypes
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_AddSortHighlightedTypes final
{
public:
	TArray<EJSItemType>                           Types;                                             // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(JSIContainer_C_AddSortHighlightedTypes) == 0x000008, "Wrong alignment on JSIContainer_C_AddSortHighlightedTypes");
static_assert(sizeof(JSIContainer_C_AddSortHighlightedTypes) == 0x000010, "Wrong size on JSIContainer_C_AddSortHighlightedTypes");
static_assert(offsetof(JSIContainer_C_AddSortHighlightedTypes, Types) == 0x000000, "Member 'JSIContainer_C_AddSortHighlightedTypes::Types' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CalculateSize
// 0x00F8 (0x00F8 - 0x0000)
struct JSIContainer_C_CalculateSize final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast;     // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1;   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2;   // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_B_ImplicitCast_3;   // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CalculateSize) == 0x000008, "Wrong alignment on JSIContainer_C_CalculateSize");
static_assert(sizeof(JSIContainer_C_CalculateSize) == 0x0000F8, "Wrong size on JSIContainer_C_CalculateSize");
static_assert(offsetof(JSIContainer_C_CalculateSize, SlotVector) == 0x000000, "Member 'JSIContainer_C_CalculateSize::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, ReturnValue) == 0x000010, "Member 'JSIContainer_C_CalculateSize::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000020, "Member 'JSIContainer_C_CalculateSize::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_X) == 0x000028, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_X_1) == 0x000038, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_BreakVector2D_Y_1) == 0x000040, "Member 'JSIContainer_C_CalculateSize::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CalculateSize::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000060, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000068, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000070, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000078, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000080, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000090, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'JSIContainer_C_CalculateSize::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x0000A0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x0000A8, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x0000B0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x0000B8, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x0000C0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_MakeVector2D_ReturnValue) == 0x0000C8, "Member 'JSIContainer_C_CalculateSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_B_ImplicitCast) == 0x0000D8, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1) == 0x0000E0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2) == 0x0000E8, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSize, CallFunc_Multiply_DoubleDouble_B_ImplicitCast_3) == 0x0000F0, "Member 'JSIContainer_C_CalculateSize::CallFunc_Multiply_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CalculateSizeCustom
// 0x00D0 (0x00D0 - 0x0000)
struct JSIContainer_C_CalculateSizeCustom final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CSlotSize;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CalculateSizeCustom) == 0x000008, "Wrong alignment on JSIContainer_C_CalculateSizeCustom");
static_assert(sizeof(JSIContainer_C_CalculateSizeCustom) == 0x0000D0, "Wrong size on JSIContainer_C_CalculateSizeCustom");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, SlotVector) == 0x000000, "Member 'JSIContainer_C_CalculateSizeCustom::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CSlotSize) == 0x000010, "Member 'JSIContainer_C_CalculateSizeCustom::CSlotSize' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, ReturnValue) == 0x000020, "Member 'JSIContainer_C_CalculateSizeCustom::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_X) == 0x000030, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_X_1) == 0x000040, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_BreakVector2D_Y_1) == 0x000048, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000078, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000090, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000098, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_MakeVector2D_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000B0, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000B8, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000C0, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateSizeCustom, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000C8, "Member 'JSIContainer_C_CalculateSizeCustom::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CalculateWeight
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_CalculateWeight final
{
public:
	double                                        Weight;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TotalWeight;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CalculateWeight) == 0x000008, "Wrong alignment on JSIContainer_C_CalculateWeight");
static_assert(sizeof(JSIContainer_C_CalculateWeight) == 0x000048, "Wrong size on JSIContainer_C_CalculateWeight");
static_assert(offsetof(JSIContainer_C_CalculateWeight, Weight) == 0x000000, "Member 'JSIContainer_C_CalculateWeight::Weight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, TotalWeight) == 0x000008, "Member 'JSIContainer_C_CalculateWeight::TotalWeight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_CalculateWeight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_CalculateWeight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_GetCount_Count) == 0x00002C, "Member 'JSIContainer_C_CalculateWeight::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000038, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CalculateWeight, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CalculateWeight::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Call Container On Container
// 0x03B8 (0x03B8 - 0x0000)
struct JSIContainer_C_Call_Container_On_Container final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ToSlotRef;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_DragRotated_;                                // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CachedItemInfo;                                    // 0x0028(0x0220)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x024A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x024B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x024C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0260(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_272[0x6];                                      // 0x0272(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer;              // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0288(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckMoneyMoveToCase_Allow;               // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_1;                // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer_1;            // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x02B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_2;                // 0x02C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer_2;            // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTutorial_Locked;                     // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckTutorial_IsCase;                     // 0x02E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_3;        // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_3;                // 0x02F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0300(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer_3;            // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_4;        // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_4;                // 0x0318(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0329(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x6];                                      // 0x032A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer_4;            // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0340(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x3];                                      // 0x0349(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CalculateItemsLeftAfterAddOrEquip_OutputPin; // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0353(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AA_Item_C*                              CallFunc_FindItemOnGround_AItem;                   // 0x0358(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindItemOnGround_Found;                   // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0362(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0363(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0365(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HandleContainerOnContainer_Handled_;      // 0x0366(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0367(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_5;        // 0x0370(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD;                 // 0x0390(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x03A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget;                // 0x03A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x03B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x03B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Call_Container_On_Container) == 0x000008, "Wrong alignment on JSIContainer_C_Call_Container_On_Container");
static_assert(sizeof(JSIContainer_C_Call_Container_On_Container) == 0x0003B8, "Wrong size on JSIContainer_C_Call_Container_On_Container");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, FromContainer) == 0x000000, "Member 'JSIContainer_C_Call_Container_On_Container::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, ToContainer) == 0x000008, "Member 'JSIContainer_C_Call_Container_On_Container::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, SlotRef) == 0x000010, "Member 'JSIContainer_C_Call_Container_On_Container::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, ToSlotRef) == 0x000018, "Member 'JSIContainer_C_Call_Container_On_Container::ToSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, ToSlot) == 0x000020, "Member 'JSIContainer_C_Call_Container_On_Container::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, Param_DragRotated_) == 0x000024, "Member 'JSIContainer_C_Call_Container_On_Container::Param_DragRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, TryRotated_) == 0x000025, "Member 'JSIContainer_C_Call_Container_On_Container::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CachedItemInfo) == 0x000028, "Member 'JSIContainer_C_Call_Container_On_Container::CachedItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue) == 0x000248, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_1) == 0x000249, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_2) == 0x00024A, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_3) == 0x00024B, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanAND_ReturnValue) == 0x00024C, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerController_ReturnValue) == 0x000250, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanAND_ReturnValue_1) == 0x000258, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000260, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess) == 0x000270, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanAND_ReturnValue_2) == 0x000271, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerRef_SurvivalPlayer) == 0x000278, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerRef_SurvivalPlayer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_4) == 0x000280, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_5) == 0x000281, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerController_ReturnValue_1) == 0x000288, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_CheckMoneyMoveToCase_Allow) == 0x000290, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_CheckMoneyMoveToCase_Allow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsBPI_Surv_PC_1) == 0x000298, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsBPI_Surv_PC_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess_1) == 0x0002A8, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerRef_SurvivalPlayer_1) == 0x0002B0, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerRef_SurvivalPlayer_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerController_ReturnValue_2) == 0x0002B8, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsBPI_Surv_PC_2) == 0x0002C0, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsBPI_Surv_PC_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess_2) == 0x0002D0, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerRef_SurvivalPlayer_2) == 0x0002D8, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerRef_SurvivalPlayer_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_6) == 0x0002E0, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_7) == 0x0002E1, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_CheckTutorial_Locked) == 0x0002E2, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_CheckTutorial_Locked' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_CheckTutorial_IsCase) == 0x0002E3, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_CheckTutorial_IsCase' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerController_ReturnValue_3) == 0x0002E8, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerController_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsBPI_Surv_PC_3) == 0x0002F0, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsBPI_Surv_PC_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess_3) == 0x000300, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerRef_SurvivalPlayer_3) == 0x000308, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerRef_SurvivalPlayer_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerController_ReturnValue_4) == 0x000310, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerController_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsBPI_Surv_PC_4) == 0x000318, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsBPI_Surv_PC_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess_4) == 0x000328, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_8) == 0x000329, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerRef_SurvivalPlayer_4) == 0x000330, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerRef_SurvivalPlayer_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000338, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsSurvival_Player) == 0x000340, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess_5) == 0x000348, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_CalculateItemsLeftAfterAddOrEquip_OutputPin) == 0x00034C, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_CalculateItemsLeftAfterAddOrEquip_OutputPin' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_Greater_IntInt_ReturnValue) == 0x000350, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000351, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000352, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanOR_ReturnValue) == 0x000353, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_FindItemOnGround_AItem) == 0x000358, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_FindItemOnGround_AItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_FindItemOnGround_Found) == 0x000360, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_FindItemOnGround_Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000361, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_Less_IntInt_ReturnValue) == 0x000362, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000363, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000364, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_Array_Contains_ReturnValue) == 0x000365, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_HandleContainerOnContainer_Handled_) == 0x000366, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_HandleContainerOnContainer_Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanOR_ReturnValue_1) == 0x000367, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanOR_ReturnValue_2) == 0x000368, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanOR_ReturnValue_3) == 0x000369, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetPlayerController_ReturnValue_5) == 0x000370, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetPlayerController_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_Array_Length_ReturnValue) == 0x000378, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetHUD_ReturnValue) == 0x000380, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000388, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_AsBPI_Game_HUD) == 0x000390, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_AsBPI_Game_HUD' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, K2Node_DynamicCast_bSuccess_6) == 0x0003A0, "Member 'JSIContainer_C_Call_Container_On_Container::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_BooleanAND_ReturnValue_3) == 0x0003A1, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_GetInventoryWidget_Widget) == 0x0003A8, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_GetInventoryWidget_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_9) == 0x0003B0, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_IsValid_ReturnValue_10) == 0x0003B1, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Call_Container_On_Container, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0003B2, "Member 'JSIContainer_C_Call_Container_On_Container::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CancelHighlights
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_CancelHighlights final
{
public:
	bool                                          Drop;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0014)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CancelHighlights) == 0x000008, "Wrong alignment on JSIContainer_C_CancelHighlights");
static_assert(sizeof(JSIContainer_C_CancelHighlights) == 0x000050, "Wrong size on JSIContainer_C_CancelHighlights");
static_assert(offsetof(JSIContainer_C_CancelHighlights, Drop) == 0x000000, "Member 'JSIContainer_C_CancelHighlights::Drop' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, Temp_int_Array_Index_Variable) == 0x000004, "Member 'JSIContainer_C_CancelHighlights::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'JSIContainer_C_CancelHighlights::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'JSIContainer_C_CancelHighlights::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'JSIContainer_C_CancelHighlights::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CancelHighlights, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CancelHighlights::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanItAllFitIn
// 0x0140 (0x0140 - 0x0000)
struct JSIContainer_C_CanItAllFitIn final
{
public:
	TArray<class UJSI_Slot_C*>                    Param_ArrayOfItems;                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          CanFit_;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotsThatCanFit;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreScan;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentIndex;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotVY;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotVX;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            FoundSlot;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    AllSlots;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_3;                               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_4;                               // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_5;                               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue_1;    // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_12;                // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_4;           // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_13;                // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_5;           // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanItAllFitIn) == 0x000008, "Wrong alignment on JSIContainer_C_CanItAllFitIn");
static_assert(sizeof(JSIContainer_C_CanItAllFitIn) == 0x000140, "Wrong size on JSIContainer_C_CanItAllFitIn");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Param_ArrayOfItems) == 0x000000, "Member 'JSIContainer_C_CanItAllFitIn::Param_ArrayOfItems' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CanFit_) == 0x000010, "Member 'JSIContainer_C_CanItAllFitIn::CanFit_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, SlotsThatCanFit) == 0x000014, "Member 'JSIContainer_C_CanItAllFitIn::SlotsThatCanFit' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, IgnoreScan) == 0x000018, "Member 'JSIContainer_C_CanItAllFitIn::IgnoreScan' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CurrentIndex) == 0x00001C, "Member 'JSIContainer_C_CanItAllFitIn::CurrentIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, SlotVY) == 0x000020, "Member 'JSIContainer_C_CanItAllFitIn::SlotVY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, SlotVX) == 0x000024, "Member 'JSIContainer_C_CanItAllFitIn::SlotVX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, FoundSlot) == 0x000028, "Member 'JSIContainer_C_CanItAllFitIn::FoundSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, AllSlots) == 0x000030, "Member 'JSIContainer_C_CanItAllFitIn::AllSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Variable) == 0x000048, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Variable_1) == 0x00004C, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_bool_Variable) == 0x000054, "Member 'JSIContainer_C_CanItAllFitIn::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Not_PreBool_ReturnValue) == 0x000055, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_IsEmptySlot_isEmpty) == 0x000056, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Variable_2) == 0x000058, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_bool_Variable_1) == 0x000060, "Member 'JSIContainer_C_CanItAllFitIn::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Array_Index_Variable) == 0x000064, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Not_PreBool_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Variable_3) == 0x00006C, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_2) == 0x000070, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Loop_Counter_Variable) == 0x000074, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Less_IntInt_ReturnValue) == 0x000078, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_3) == 0x00007C, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Array_Index_Variable_1) == 0x000080, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_bool_True_if_break_was_hit_Variable) == 0x000084, "Member 'JSIContainer_C_CanItAllFitIn::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Get_Item) == 0x000088, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Not_PreBool_ReturnValue_2) == 0x000090, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_BreakVector2D_X) == 0x000098, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_BreakVector2D_Y) == 0x0000A0, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_FTrunc_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_FTrunc_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Get_Item_1) == 0x0000B0, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000B8, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Length_ReturnValue_2) == 0x0000BC, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000C0, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000C4, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000C5, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Variable_4) == 0x0000C8, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000CC, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_7) == 0x0000D0, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000D4, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_8) == 0x0000D8, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x0000DC, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000E0, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Loop_Counter_Variable_1) == 0x0000E4, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_IsEmptySlot_isEmpty_1) == 0x0000F0, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F1, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_BooleanAND_ReturnValue) == 0x0000F2, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_9) == 0x0000F4, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, Temp_int_Variable_5) == 0x0000F8, "Member 'JSIContainer_C_CanItAllFitIn::Temp_int_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_10) == 0x0000FC, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000100, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000104, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_BooleanAND_ReturnValue_1) == 0x000108, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_GetSlotIndexByColumnRow_ReturnValue_1) == 0x00010C, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_GetSlotIndexByColumnRow_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000110, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Array_Get_Item_3) == 0x000118, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000120, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_11) == 0x000124, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x000128, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_BooleanAND_ReturnValue_2) == 0x000129, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_12) == 0x00012C, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_LessEqual_IntInt_ReturnValue_4) == 0x000130, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_LessEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_Add_IntInt_ReturnValue_13) == 0x000134, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_Add_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_LessEqual_IntInt_ReturnValue_5) == 0x000138, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_LessEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000139, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x00013A, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanItAllFitIn, CallFunc_BooleanAND_ReturnValue_3) == 0x00013B, "Member 'JSIContainer_C_CanItAllFitIn::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanResize?
// 0x0248 (0x0248 - 0x0000)
struct JSIContainer_C_CanResize_ final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToX;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToY;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    HostingSlotsArray;                                 // 0x0018(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    FreedHostingSlotsArray;                            // 0x0028(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    FreedHostingSlots;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    HostingSlots;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            SlotFound;                                         // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array;                            // 0x0088(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_1;                          // 0x00A8(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_2;                          // 0x00E0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_3;                          // 0x0118(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_4;                          // 0x0128(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_5;                          // 0x0138(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x2];                                      // 0x015A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_11;                // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x017E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x017F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_182[0x2];                                      // 0x0182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_12;                // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_13;                // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_14;                // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_15;                // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_4;                     // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_16;                // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_17;                // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Map_Find_Value;                           // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EA[0x2];                                      // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_5;                     // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_4;           // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FE[0x2];                                      // 0x01FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_18;                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_6;                     // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_19;                // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_7;                     // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_20;                // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_21;                // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_5;           // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue_1;    // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Map_Find_Value_1;                         // 0x0238(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanResize_) == 0x000008, "Wrong alignment on JSIContainer_C_CanResize_");
static_assert(sizeof(JSIContainer_C_CanResize_) == 0x000248, "Wrong size on JSIContainer_C_CanResize_");
static_assert(offsetof(JSIContainer_C_CanResize_, SlotRef) == 0x000000, "Member 'JSIContainer_C_CanResize_::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, AddToX) == 0x000008, "Member 'JSIContainer_C_CanResize_::AddToX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, AddToY) == 0x00000C, "Member 'JSIContainer_C_CanResize_::AddToY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Result) == 0x000010, "Member 'JSIContainer_C_CanResize_::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, HostingSlotsArray) == 0x000018, "Member 'JSIContainer_C_CanResize_::HostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, FreedHostingSlotsArray) == 0x000028, "Member 'JSIContainer_C_CanResize_::FreedHostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, FreedHostingSlots) == 0x000038, "Member 'JSIContainer_C_CanResize_::FreedHostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, HostingSlots) == 0x000048, "Member 'JSIContainer_C_CanResize_::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, SlotFound) == 0x000058, "Member 'JSIContainer_C_CanResize_::SlotFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Y) == 0x000060, "Member 'JSIContainer_C_CanResize_::Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, X) == 0x000064, "Member 'JSIContainer_C_CanResize_::X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable) == 0x000068, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable_1) == 0x000070, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_CanResize_::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable_2) == 0x00007C, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_2) == 0x000080, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array) == 0x000088, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Get_Item) == 0x000098, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_CanResize_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_1) == 0x0000A8, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B9, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000BA, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X) == 0x0000C0, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y) == 0x0000C8, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue) == 0x0000D0, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000D4, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000DC, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_2) == 0x0000E0, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_3) == 0x0000F0, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanOR_ReturnValue) == 0x0000F1, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X_1) == 0x0000F8, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y_1) == 0x000100, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_1) == 0x000108, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_2) == 0x00010C, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_RemoveItem_ReturnValue) == 0x000110, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_3) == 0x000118, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_4) == 0x000128, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, K2Node_MakeArray_Array_5) == 0x000138, "Member 'JSIContainer_C_CanResize_::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Add_ReturnValue) == 0x000148, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Add_ReturnValue_1) == 0x00014C, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Variable_3) == 0x000150, "Member 'JSIContainer_C_CanResize_::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_5) == 0x000154, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsValid_ReturnValue) == 0x000158, "Member 'JSIContainer_C_CanResize_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsEmptySlot_isEmpty) == 0x000159, "Member 'JSIContainer_C_CanResize_::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_6) == 0x00015C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsValid_ReturnValue_1) == 0x000160, "Member 'JSIContainer_C_CanResize_::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue) == 0x000161, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsEmptySlot_isEmpty_1) == 0x000162, "Member 'JSIContainer_C_CanResize_::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_7) == 0x000164, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000168, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_8) == 0x00016C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_9) == 0x000170, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_10) == 0x000174, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_11) == 0x000178, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00017C, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00017D, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanAND_ReturnValue) == 0x00017E, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanAND_ReturnValue_1) == 0x00017F, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BooleanAND_ReturnValue_2) == 0x000180, "Member 'JSIContainer_C_CanResize_::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000181, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Loop_Counter_Variable) == 0x000184, "Member 'JSIContainer_C_CanResize_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Less_IntInt_ReturnValue_4) == 0x000188, "Member 'JSIContainer_C_CanResize_::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_12) == 0x00018C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, Temp_int_Array_Index_Variable) == 0x000190, "Member 'JSIContainer_C_CanResize_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Get_Item_1) == 0x000198, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001A0, "Member 'JSIContainer_C_CanResize_::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_Add_ReturnValue_2) == 0x0001A4, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x0001A8, "Member 'JSIContainer_C_CanResize_::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_13) == 0x0001AC, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X_2) == 0x0001B0, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y_2) == 0x0001B8, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_3) == 0x0001C0, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_14) == 0x0001C4, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_15) == 0x0001C8, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_4) == 0x0001CC, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001D0, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_16) == 0x0001D4, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x0001D8, "Member 'JSIContainer_C_CanResize_::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_17) == 0x0001DC, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Map_Find_Value) == 0x0001E0, "Member 'JSIContainer_C_CanResize_::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Map_Find_ReturnValue) == 0x0001E8, "Member 'JSIContainer_C_CanResize_::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0001E9, "Member 'JSIContainer_C_CanResize_::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_5) == 0x0001EC, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001F0, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0001F4, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0001F8, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_4) == 0x0001F9, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0001FA, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Greater_IntInt_ReturnValue_3) == 0x0001FB, "Member 'JSIContainer_C_CanResize_::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_IsValid_ReturnValue_2) == 0x0001FC, "Member 'JSIContainer_C_CanResize_::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Not_PreBool_ReturnValue) == 0x0001FD, "Member 'JSIContainer_C_CanResize_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_18) == 0x000200, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_X_3) == 0x000208, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_BreakVector2D_Y_3) == 0x000210, "Member 'JSIContainer_C_CanResize_::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_6) == 0x000218, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_19) == 0x00021C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000220, "Member 'JSIContainer_C_CanResize_::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_FTrunc_ReturnValue_7) == 0x000224, "Member 'JSIContainer_C_CanResize_::CallFunc_FTrunc_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_20) == 0x000228, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Add_IntInt_ReturnValue_21) == 0x00022C, "Member 'JSIContainer_C_CanResize_::CallFunc_Add_IntInt_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_LessEqual_IntInt_ReturnValue_5) == 0x000230, "Member 'JSIContainer_C_CanResize_::CallFunc_LessEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_GetSlotIndexByColumnRow_ReturnValue_1) == 0x000234, "Member 'JSIContainer_C_CanResize_::CallFunc_GetSlotIndexByColumnRow_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Map_Find_Value_1) == 0x000238, "Member 'JSIContainer_C_CanResize_::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_Map_Find_ReturnValue_1) == 0x000240, "Member 'JSIContainer_C_CanResize_::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanResize_, CallFunc_isRotated__ReturnValue) == 0x000241, "Member 'JSIContainer_C_CanResize_::CallFunc_isRotated__ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanStack?
// 0x0268 (0x0268 - 0x0000)
struct JSIContainer_C_CanStack_ final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             ItemInfo;                                          // 0x0008(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Canstack;                                          // 0x0228(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentCount;                                      // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CountOut_OutInt;                          // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0255(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0256(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_257[0x1];                                      // 0x0257(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanStack_) == 0x000008, "Wrong alignment on JSIContainer_C_CanStack_");
static_assert(sizeof(JSIContainer_C_CanStack_) == 0x000268, "Wrong size on JSIContainer_C_CanStack_");
static_assert(offsetof(JSIContainer_C_CanStack_, Container) == 0x000000, "Member 'JSIContainer_C_CanStack_::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, ItemInfo) == 0x000008, "Member 'JSIContainer_C_CanStack_::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, Canstack) == 0x000228, "Member 'JSIContainer_C_CanStack_::Canstack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CurrentCount) == 0x00022C, "Member 'JSIContainer_C_CanStack_::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_CountOut_OutInt) == 0x000230, "Member 'JSIContainer_C_CanStack_::CallFunc_CountOut_OutInt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Array_Length_ReturnValue) == 0x000234, "Member 'JSIContainer_C_CanStack_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Max_ReturnValue) == 0x000238, "Member 'JSIContainer_C_CanStack_::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, Temp_int_Array_Index_Variable) == 0x00023C, "Member 'JSIContainer_C_CanStack_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Array_Get_Item) == 0x000240, "Member 'JSIContainer_C_CanStack_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_GetCount_Count) == 0x000248, "Member 'JSIContainer_C_CanStack_::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, Temp_int_Loop_Counter_Variable) == 0x00024C, "Member 'JSIContainer_C_CanStack_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Subtract_IntInt_ReturnValue) == 0x000250, "Member 'JSIContainer_C_CanStack_::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000254, "Member 'JSIContainer_C_CanStack_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Greater_IntInt_ReturnValue) == 0x000255, "Member 'JSIContainer_C_CanStack_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Less_IntInt_ReturnValue) == 0x000256, "Member 'JSIContainer_C_CanStack_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Add_IntInt_ReturnValue) == 0x000258, "Member 'JSIContainer_C_CanStack_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00025C, "Member 'JSIContainer_C_CanStack_::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStack_, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000260, "Member 'JSIContainer_C_CanStack_::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CanStackSingleSlot?
// 0x0278 (0x0278 - 0x0000)
struct JSIContainer_C_CanStackSingleSlot_ final
{
public:
	struct FFItemInfo                             Info;                                              // 0x0000(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0220(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0228(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_236[0x2];                                      // 0x0236(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23E[0x2];                                      // 0x023E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0244(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0245(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_246[0x2];                                      // 0x0246(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0248(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_255[0x3];                                      // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0260(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CountOut_OutInt;                          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x026D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x026E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x026F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0271(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CanStackSingleSlot_) == 0x000008, "Wrong alignment on JSIContainer_C_CanStackSingleSlot_");
static_assert(sizeof(JSIContainer_C_CanStackSingleSlot_) == 0x000278, "Wrong size on JSIContainer_C_CanStackSingleSlot_");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Info) == 0x000000, "Member 'JSIContainer_C_CanStackSingleSlot_::Info' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Sucess) == 0x000220, "Member 'JSIContainer_C_CanStackSingleSlot_::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, ItemRef) == 0x000228, "Member 'JSIContainer_C_CanStackSingleSlot_::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Temp_int_Array_Index_Variable) == 0x000230, "Member 'JSIContainer_C_CanStackSingleSlot_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000234, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000235, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Temp_int_Loop_Counter_Variable) == 0x000238, "Member 'JSIContainer_C_CanStackSingleSlot_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_BooleanAND_ReturnValue) == 0x00023C, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_BooleanAND_ReturnValue_1) == 0x00023D, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Add_IntInt_ReturnValue) == 0x000240, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Temp_bool_Variable) == 0x000244, "Member 'JSIContainer_C_CanStackSingleSlot_::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, Temp_bool_Variable_1) == 0x000245, "Member 'JSIContainer_C_CanStackSingleSlot_::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Array_Get_Item) == 0x000248, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Array_Length_ReturnValue) == 0x000250, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Less_IntInt_ReturnValue) == 0x000254, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_GetCount_Count) == 0x000258, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Max_ReturnValue) == 0x00025C, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Array_Get_Item_1) == 0x000260, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_CountOut_OutInt) == 0x000268, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_CountOut_OutInt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Not_PreBool_ReturnValue) == 0x00026C, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_Less_IntInt_ReturnValue_1) == 0x00026D, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00026E, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_IsValid_ReturnValue) == 0x00026F, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, K2Node_Select_Default) == 0x000270, "Member 'JSIContainer_C_CanStackSingleSlot_::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CanStackSingleSlot_, CallFunc_BooleanAND_ReturnValue_2) == 0x000271, "Member 'JSIContainer_C_CanStackSingleSlot_::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemCount
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_ChangeItemCount final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemCount) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemCount");
static_assert(sizeof(JSIContainer_C_ChangeItemCount) == 0x000018, "Wrong size on JSIContainer_C_ChangeItemCount");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, ItemRef) == 0x000000, "Member 'JSIContainer_C_ChangeItemCount::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, NewCount) == 0x000008, "Member 'JSIContainer_C_ChangeItemCount::NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, Changed_) == 0x00000C, "Member 'JSIContainer_C_ChangeItemCount::Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'JSIContainer_C_ChangeItemCount::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, CallFunc_Greater_IntInt_ReturnValue) == 0x00000E, "Member 'JSIContainer_C_ChangeItemCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemCount, CallFunc_UpdateCount_Count) == 0x000010, "Member 'JSIContainer_C_ChangeItemCount::CallFunc_UpdateCount_Count' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemImage
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_ChangeItemImage final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           NewTexture;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_UpdateImage_Updated;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemImage) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemImage");
static_assert(sizeof(JSIContainer_C_ChangeItemImage) == 0x000018, "Wrong size on JSIContainer_C_ChangeItemImage");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, ItemRef) == 0x000000, "Member 'JSIContainer_C_ChangeItemImage::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, NewTexture) == 0x000008, "Member 'JSIContainer_C_ChangeItemImage::NewTexture' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, Changed_) == 0x000010, "Member 'JSIContainer_C_ChangeItemImage::Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_IsValid_ReturnValue_1) == 0x000012, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemImage, CallFunc_UpdateImage_Updated) == 0x000014, "Member 'JSIContainer_C_ChangeItemImage::CallFunc_UpdateImage_Updated' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemRarity
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_ChangeItemRarity final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESlotRarity                                   NewRarity;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Changed_;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ChangeRarity_Changed_;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemRarity) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemRarity");
static_assert(sizeof(JSIContainer_C_ChangeItemRarity) == 0x000010, "Wrong size on JSIContainer_C_ChangeItemRarity");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, ItemRef) == 0x000000, "Member 'JSIContainer_C_ChangeItemRarity::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, NewRarity) == 0x000008, "Member 'JSIContainer_C_ChangeItemRarity::NewRarity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, Changed_) == 0x000009, "Member 'JSIContainer_C_ChangeItemRarity::Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, CallFunc_ChangeRarity_Changed_) == 0x00000A, "Member 'JSIContainer_C_ChangeItemRarity::CallFunc_ChangeRarity_Changed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemRarity, CallFunc_IsValid_ReturnValue) == 0x00000B, "Member 'JSIContainer_C_ChangeItemRarity::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ChangeItemsInteract
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_ChangeItemsInteract final
{
public:
	bool                                          Interact_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ChangeItemsInteract) == 0x000008, "Wrong alignment on JSIContainer_C_ChangeItemsInteract");
static_assert(sizeof(JSIContainer_C_ChangeItemsInteract) == 0x000038, "Wrong size on JSIContainer_C_ChangeItemsInteract");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Interact_) == 0x000000, "Member 'JSIContainer_C_ChangeItemsInteract::Interact_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_byte_Variable) == 0x000001, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_int_Array_Index_Variable) == 0x000004, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_byte_Variable_1) == 0x000010, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, Temp_bool_Variable) == 0x000011, "Member 'JSIContainer_C_ChangeItemsInteract::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, K2Node_Select_Default) == 0x000012, "Member 'JSIContainer_C_ChangeItemsInteract::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, K2Node_MakeStruct_LinearColor) == 0x000014, "Member 'JSIContainer_C_ChangeItemsInteract::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ChangeItemsInteract, CallFunc_Less_IntInt_ReturnValue) == 0x000034, "Member 'JSIContainer_C_ChangeItemsInteract::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckAvailableItemsByName
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_CheckAvailableItemsByName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AvailableItems;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckAvailableItemsByName) == 0x000008, "Wrong alignment on JSIContainer_C_CheckAvailableItemsByName");
static_assert(sizeof(JSIContainer_C_CheckAvailableItemsByName) == 0x000048, "Wrong size on JSIContainer_C_CheckAvailableItemsByName");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, Param_Name) == 0x000000, "Member 'JSIContainer_C_CheckAvailableItemsByName::Param_Name' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, Count) == 0x000008, "Member 'JSIContainer_C_CheckAvailableItemsByName::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, Found) == 0x00000C, "Member 'JSIContainer_C_CheckAvailableItemsByName::Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, AvailableItems) == 0x000010, "Member 'JSIContainer_C_CheckAvailableItemsByName::AvailableItems' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, Temp_int_Array_Index_Variable) == 0x000014, "Member 'JSIContainer_C_CheckAvailableItemsByName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'JSIContainer_C_CheckAvailableItemsByName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_Abs_Int_ReturnValue) == 0x000034, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000038, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000039, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_SelectInt_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckAvailableItemsByName, CallFunc_Add_IntInt_ReturnValue_1) == 0x000040, "Member 'JSIContainer_C_CheckAvailableItemsByName::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckCanRemoveBackpack
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_CheckCanRemoveBackpack final
{
public:
	class UJSIContainer_C*                        Pocket;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          NotAllowed1;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotAllowed;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckCanRemoveBackpack) == 0x000008, "Wrong alignment on JSIContainer_C_CheckCanRemoveBackpack");
static_assert(sizeof(JSIContainer_C_CheckCanRemoveBackpack) == 0x000058, "Wrong size on JSIContainer_C_CheckCanRemoveBackpack");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, Pocket) == 0x000000, "Member 'JSIContainer_C_CheckCanRemoveBackpack::Pocket' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, NotAllowed1) == 0x000008, "Member 'JSIContainer_C_CheckCanRemoveBackpack::NotAllowed1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, NotAllowed) == 0x000009, "Member 'JSIContainer_C_CheckCanRemoveBackpack::NotAllowed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, Temp_bool_True_if_break_was_hit_Variable) == 0x00000A, "Member 'JSIContainer_C_CheckCanRemoveBackpack::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, Temp_int_Array_Index_Variable) == 0x000014, "Member 'JSIContainer_C_CheckCanRemoveBackpack::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'JSIContainer_C_CheckCanRemoveBackpack::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_BreakVector2D_X) == 0x000030, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_FTrunc_ReturnValue) == 0x000040, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Subtract_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Multiply_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Add_IntInt_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckCanRemoveBackpack, CallFunc_Greater_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_CheckCanRemoveBackpack::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckEquippedSlots
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_CheckEquippedSlots final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMPInGameInventory_C*                   Inventory;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckEquippedSlots) == 0x000008, "Wrong alignment on JSIContainer_C_CheckEquippedSlots");
static_assert(sizeof(JSIContainer_C_CheckEquippedSlots) == 0x000020, "Wrong size on JSIContainer_C_CheckEquippedSlots");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, FromContainer) == 0x000000, "Member 'JSIContainer_C_CheckEquippedSlots::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, Inventory) == 0x000008, "Member 'JSIContainer_C_CheckEquippedSlots::Inventory' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, ReturnValue) == 0x000010, "Member 'JSIContainer_C_CheckEquippedSlots::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000012, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000013, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x000014, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x000015, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x000016, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x000017, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x000018, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue) == 0x000019, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue_1) == 0x00001A, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue_2) == 0x00001B, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue_3) == 0x00001C, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue_4) == 0x00001D, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue_5) == 0x00001E, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckEquippedSlots, CallFunc_BooleanOR_ReturnValue_6) == 0x00001F, "Member 'JSIContainer_C_CheckEquippedSlots::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckIsEmptySlot
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_CheckIsEmptySlot final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotDimension;                                     // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotEmpty;                                          // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckIsEmptySlot) == 0x000008, "Wrong alignment on JSIContainer_C_CheckIsEmptySlot");
static_assert(sizeof(JSIContainer_C_CheckIsEmptySlot) == 0x000028, "Wrong size on JSIContainer_C_CheckIsEmptySlot");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, Param_Index) == 0x000000, "Member 'JSIContainer_C_CheckIsEmptySlot::Param_Index' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, SlotDimension) == 0x000008, "Member 'JSIContainer_C_CheckIsEmptySlot::SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, NotEmpty) == 0x000018, "Member 'JSIContainer_C_CheckIsEmptySlot::NotEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, CallFunc_GetEmptySlot_SlotIndex) == 0x00001C, "Member 'JSIContainer_C_CheckIsEmptySlot::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, CallFunc_GetEmptySlot_Found_) == 0x000020, "Member 'JSIContainer_C_CheckIsEmptySlot::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000021, "Member 'JSIContainer_C_CheckIsEmptySlot::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlot, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'JSIContainer_C_CheckIsEmptySlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckIsEmptySlots
// 0x0030 (0x0030 - 0x0000)
struct JSIContainer_C_CheckIsEmptySlots final
{
public:
	TArray<class UJSI_Slot_C*>                    Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Return;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckIsEmptySlots) == 0x000008, "Wrong alignment on JSIContainer_C_CheckIsEmptySlots");
static_assert(sizeof(JSIContainer_C_CheckIsEmptySlots) == 0x000030, "Wrong size on JSIContainer_C_CheckIsEmptySlots");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, Array) == 0x000000, "Member 'JSIContainer_C_CheckIsEmptySlots::Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, Return) == 0x000010, "Member 'JSIContainer_C_CheckIsEmptySlots::Return' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'JSIContainer_C_CheckIsEmptySlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, Temp_int_Array_Index_Variable) == 0x000018, "Member 'JSIContainer_C_CheckIsEmptySlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'JSIContainer_C_CheckIsEmptySlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_CheckIsEmptySlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, CallFunc_IsEmptySlot_isEmpty) == 0x000028, "Member 'JSIContainer_C_CheckIsEmptySlots::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, CallFunc_Less_IntInt_ReturnValue) == 0x000029, "Member 'JSIContainer_C_CheckIsEmptySlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckIsEmptySlots, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_CheckIsEmptySlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckItemBeforeEquip
// 0x0688 (0x0688 - 0x0000)
struct JSIContainer_C_CheckItemBeforeEquip final
{
public:
	struct FFItemInfo                             ItemInfo;                                          // 0x0000(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFItemInfo                             Result;                                            // 0x0220(0x0220)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0450(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             K2Node_SetFieldsInStruct_StructOut;                // 0x0460(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckItemBeforeEquip) == 0x000008, "Wrong alignment on JSIContainer_C_CheckItemBeforeEquip");
static_assert(sizeof(JSIContainer_C_CheckItemBeforeEquip) == 0x000688, "Wrong size on JSIContainer_C_CheckItemBeforeEquip");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, ItemInfo) == 0x000000, "Member 'JSIContainer_C_CheckItemBeforeEquip::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, Result) == 0x000220, "Member 'JSIContainer_C_CheckItemBeforeEquip::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, CallFunc_BreakVector2D_X) == 0x000440, "Member 'JSIContainer_C_CheckItemBeforeEquip::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, CallFunc_BreakVector2D_Y) == 0x000448, "Member 'JSIContainer_C_CheckItemBeforeEquip::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, CallFunc_MakeVector2D_ReturnValue) == 0x000450, "Member 'JSIContainer_C_CheckItemBeforeEquip::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, K2Node_SetFieldsInStruct_StructOut) == 0x000460, "Member 'JSIContainer_C_CheckItemBeforeEquip::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckItemBeforeEquip, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000680, "Member 'JSIContainer_C_CheckItemBeforeEquip::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckMoneyMoveToCase
// 0x0088 (0x0088 - 0x0000)
struct JSIContainer_C_CheckMoneyMoveToCase final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Allow;                                             // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer;              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC_1;                // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer_1;            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckMoneyMoveToCase) == 0x000008, "Wrong alignment on JSIContainer_C_CheckMoneyMoveToCase");
static_assert(sizeof(JSIContainer_C_CheckMoneyMoveToCase) == 0x000088, "Wrong size on JSIContainer_C_CheckMoneyMoveToCase");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, FromContainer) == 0x000000, "Member 'JSIContainer_C_CheckMoneyMoveToCase::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, ToContainer) == 0x000008, "Member 'JSIContainer_C_CheckMoneyMoveToCase::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, SlotRef) == 0x000010, "Member 'JSIContainer_C_CheckMoneyMoveToCase::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, Allow) == 0x000018, "Member 'JSIContainer_C_CheckMoneyMoveToCase::Allow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000028, "Member 'JSIContainer_C_CheckMoneyMoveToCase::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'JSIContainer_C_CheckMoneyMoveToCase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_GetPlayerRef_SurvivalPlayer) == 0x000040, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_GetPlayerRef_SurvivalPlayer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_IsValid_ReturnValue) == 0x000049, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004A, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00004B, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00004C, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004D, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_BooleanOR_ReturnValue) == 0x00004E, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_BooleanOR_ReturnValue_1) == 0x00004F, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_BooleanOR_ReturnValue_2) == 0x000050, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000051, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_GetPlayerController_ReturnValue_1) == 0x000058, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, K2Node_DynamicCast_AsBPI_Surv_PC_1) == 0x000060, "Member 'JSIContainer_C_CheckMoneyMoveToCase::K2Node_DynamicCast_AsBPI_Surv_PC_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'JSIContainer_C_CheckMoneyMoveToCase::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_GetPlayerRef_SurvivalPlayer_1) == 0x000078, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_GetPlayerRef_SurvivalPlayer_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_IsValid_ReturnValue_1) == 0x000080, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckMoneyMoveToCase, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000081, "Member 'JSIContainer_C_CheckMoneyMoveToCase::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CheckTutorial
// 0x00E0 (0x00E0 - 0x0000)
struct JSIContainer_C_CheckTutorial final
{
public:
	class UJSI_Slot_C*                            Param_Slot;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        OnContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        FromContainer;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCase;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget;                // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetStashTutorialItemToTake_StashTutorialItemToTake; // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPocketContainer_Result;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_GetPocketContainer_Container;             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CallFunc_GetPlayerRef_SurvivalPlayer;              // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFreePickup_bFreePickup;                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_3;    // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_4;    // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsBeginner_IsBeginner;                 // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_GetPointedItemSlot_PointedItemSlot;       // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMPContainerWidget_C*                   CallFunc_GetMainContainer_ContainerWidget;         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_5;    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_6;    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_7;    // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_8;    // 0x00BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetStashTutorialItemToTake_StashTutorialItemToTake_1; // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_9;    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetFreePickup_bFreePickup_1;              // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetPointedItemSlot_PointedItemSlot_1;     // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_10;   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CheckTutorial) == 0x000008, "Wrong alignment on JSIContainer_C_CheckTutorial");
static_assert(sizeof(JSIContainer_C_CheckTutorial) == 0x0000E0, "Wrong size on JSIContainer_C_CheckTutorial");
static_assert(offsetof(JSIContainer_C_CheckTutorial, Param_Slot) == 0x000000, "Member 'JSIContainer_C_CheckTutorial::Param_Slot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, OnContainer) == 0x000008, "Member 'JSIContainer_C_CheckTutorial::OnContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, FromContainer) == 0x000010, "Member 'JSIContainer_C_CheckTutorial::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, Locked) == 0x000018, "Member 'JSIContainer_C_CheckTutorial::Locked' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, IsCase) == 0x000019, "Member 'JSIContainer_C_CheckTutorial::IsCase' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetHUD_ReturnValue) == 0x000028, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, K2Node_DynamicCast_AsBPI_Game_HUD) == 0x000030, "Member 'JSIContainer_C_CheckTutorial::K2Node_DynamicCast_AsBPI_Game_HUD' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'JSIContainer_C_CheckTutorial::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetInventoryWidget_Widget) == 0x000048, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetInventoryWidget_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000050, "Member 'JSIContainer_C_CheckTutorial::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000051, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetStashTutorialItemToTake_StashTutorialItemToTake) == 0x000058, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetStashTutorialItemToTake_StashTutorialItemToTake' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPocketContainer_Result) == 0x000060, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPocketContainer_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPocketContainer_Container) == 0x000068, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPocketContainer_Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_CheckTutorial::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000071, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_BooleanOR_ReturnValue) == 0x000072, "Member 'JSIContainer_C_CheckTutorial::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000073, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_Not_PreBool_ReturnValue) == 0x000074, "Member 'JSIContainer_C_CheckTutorial::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPlayerController_ReturnValue_1) == 0x000078, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x000080, "Member 'JSIContainer_C_CheckTutorial::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, K2Node_DynamicCast_bSuccess_1) == 0x000090, "Member 'JSIContainer_C_CheckTutorial::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPlayerRef_SurvivalPlayer) == 0x000098, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPlayerRef_SurvivalPlayer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetFreePickup_bFreePickup) == 0x0000A0, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetFreePickup_bFreePickup' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_IsValid_ReturnValue) == 0x0000A1, "Member 'JSIContainer_C_CheckTutorial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_IsValid_ReturnValue_1) == 0x0000A2, "Member 'JSIContainer_C_CheckTutorial::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_IsValid_ReturnValue_2) == 0x0000A3, "Member 'JSIContainer_C_CheckTutorial::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_3) == 0x0000A4, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_4) == 0x0000A5, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x0000A6, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetIsBeginner_IsBeginner) == 0x0000A7, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetIsBeginner_IsBeginner' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPointedItemSlot_PointedItemSlot) == 0x0000A8, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPointedItemSlot_PointedItemSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetMainContainer_ContainerWidget) == 0x0000B0, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetMainContainer_ContainerWidget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_5) == 0x0000B8, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_6) == 0x0000B9, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_7) == 0x0000BA, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_IsValid_ReturnValue_3) == 0x0000BB, "Member 'JSIContainer_C_CheckTutorial::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_IsValid_ReturnValue_4) == 0x0000BC, "Member 'JSIContainer_C_CheckTutorial::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_8) == 0x0000BD, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_IsValid_ReturnValue_5) == 0x0000BE, "Member 'JSIContainer_C_CheckTutorial::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetStashTutorialItemToTake_StashTutorialItemToTake_1) == 0x0000C0, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetStashTutorialItemToTake_StashTutorialItemToTake_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_9) == 0x0000C8, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetFreePickup_bFreePickup_1) == 0x0000C9, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetFreePickup_bFreePickup_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_GetPointedItemSlot_PointedItemSlot_1) == 0x0000D0, "Member 'JSIContainer_C_CheckTutorial::CallFunc_GetPointedItemSlot_PointedItemSlot_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CheckTutorial, CallFunc_EqualEqual_ObjectObject_ReturnValue_10) == 0x0000D8, "Member 'JSIContainer_C_CheckTutorial::CallFunc_EqualEqual_ObjectObject_ReturnValue_10' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ClearContainer
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_ClearContainer final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ClearContainer) == 0x000008, "Wrong alignment on JSIContainer_C_ClearContainer");
static_assert(sizeof(JSIContainer_C_ClearContainer) == 0x000038, "Wrong size on JSIContainer_C_ClearContainer");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'JSIContainer_C_ClearContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'JSIContainer_C_ClearContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Array_Index_Variable) == 0x000008, "Member 'JSIContainer_C_ClearContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'JSIContainer_C_ClearContainer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'JSIContainer_C_ClearContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'JSIContainer_C_ClearContainer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Less_IntInt_ReturnValue) == 0x000024, "Member 'JSIContainer_C_ClearContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000034, "Member 'JSIContainer_C_ClearContainer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainer, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x000035, "Member 'JSIContainer_C_ClearContainer::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ClearContainerOccupation
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_ClearContainerOccupation final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ClearContainerOccupation) == 0x000008, "Wrong alignment on JSIContainer_C_ClearContainerOccupation");
static_assert(sizeof(JSIContainer_C_ClearContainerOccupation) == 0x000020, "Wrong size on JSIContainer_C_ClearContainerOccupation");
static_assert(offsetof(JSIContainer_C_ClearContainerOccupation, Temp_int_Array_Index_Variable) == 0x000000, "Member 'JSIContainer_C_ClearContainerOccupation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainerOccupation, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'JSIContainer_C_ClearContainerOccupation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainerOccupation, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_ClearContainerOccupation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainerOccupation, CallFunc_Array_Length_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_ClearContainerOccupation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainerOccupation, CallFunc_Array_Get_Item) == 0x000010, "Member 'JSIContainer_C_ClearContainerOccupation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ClearContainerOccupation, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_ClearContainerOccupation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.CombineItemRequest
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_CombineItemRequest final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRec;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotDropped;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerEventDispatcher_;                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FreeCap;                                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count_1;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_1;                      // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_2;                      // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count_3;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_CombineItemRequest) == 0x000008, "Wrong alignment on JSIContainer_C_CombineItemRequest");
static_assert(sizeof(JSIContainer_C_CombineItemRequest) == 0x000050, "Wrong size on JSIContainer_C_CombineItemRequest");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, FromContainer) == 0x000000, "Member 'JSIContainer_C_CombineItemRequest::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, SlotRec) == 0x000008, "Member 'JSIContainer_C_CombineItemRequest::SlotRec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, SlotDropped) == 0x000010, "Member 'JSIContainer_C_CombineItemRequest::SlotDropped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, TriggerEventDispatcher_) == 0x000018, "Member 'JSIContainer_C_CombineItemRequest::TriggerEventDispatcher_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, FreeCap) == 0x00001C, "Member 'JSIContainer_C_CombineItemRequest::FreeCap' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_GetCount_Count) == 0x000020, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count) == 0x000024, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_GetCount_Count_1) == 0x000028, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000034, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count_1) == 0x000038, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count_2) == 0x00003C, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000040, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_Greater_IntInt_ReturnValue) == 0x000041, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_UpdateCount_Count_3) == 0x000044, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_UpdateCount_Count_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_CombineItemRequest, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_CombineItemRequest::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DeleteItemInfo
// 0x0003 (0x0003 - 0x0000)
struct JSIContainer_C_DeleteItemInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DeleteItemInfo) == 0x000001, "Wrong alignment on JSIContainer_C_DeleteItemInfo");
static_assert(sizeof(JSIContainer_C_DeleteItemInfo) == 0x000003, "Wrong size on JSIContainer_C_DeleteItemInfo");
static_assert(offsetof(JSIContainer_C_DeleteItemInfo, ReturnValue) == 0x000000, "Member 'JSIContainer_C_DeleteItemInfo::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DeleteItemInfo, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'JSIContainer_C_DeleteItemInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DeleteItemInfo, CallFunc_Array_Contains_ReturnValue) == 0x000002, "Member 'JSIContainer_C_DeleteItemInfo::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DeleteSelectItem
// 0x0003 (0x0003 - 0x0000)
struct JSIContainer_C_DeleteSelectItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DeleteSelectItem) == 0x000001, "Wrong alignment on JSIContainer_C_DeleteSelectItem");
static_assert(sizeof(JSIContainer_C_DeleteSelectItem) == 0x000003, "Wrong size on JSIContainer_C_DeleteSelectItem");
static_assert(offsetof(JSIContainer_C_DeleteSelectItem, ReturnValue) == 0x000000, "Member 'JSIContainer_C_DeleteSelectItem::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DeleteSelectItem, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000001, "Member 'JSIContainer_C_DeleteSelectItem::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DeleteSelectItem, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'JSIContainer_C_DeleteSelectItem::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Drop_ContainerOnContainerUnhandled__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            DroppedSlotRef;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotReceiverRef;                                   // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlotIndex;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightMouseButton;                                  // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature");
static_assert(sizeof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, FromContainer) == 0x000000, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, ToContainer) == 0x000008, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, DroppedSlotRef) == 0x000010, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::DroppedSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, SlotReceiverRef) == 0x000018, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::SlotReceiverRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, ToSlotIndex) == 0x000020, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::ToSlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, Rotated_) == 0x000024, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature, RightMouseButton) == 0x000025, "Member 'JSIContainer_C_Drop_ContainerOnContainerUnhandled__DelegateSignature::RightMouseButton' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Drop_ItemOverItem__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_Drop_ItemOverItem__DelegateSignature final
{
public:
	class UJSI_Slot_C*                            ItemReceiver;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemDropped;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ItemReceiverContainer;                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ItemDroppedContainer;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Drop_ItemOverItem__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_Drop_ItemOverItem__DelegateSignature");
static_assert(sizeof(JSIContainer_C_Drop_ItemOverItem__DelegateSignature) == 0x000020, "Wrong size on JSIContainer_C_Drop_ItemOverItem__DelegateSignature");
static_assert(offsetof(JSIContainer_C_Drop_ItemOverItem__DelegateSignature, ItemReceiver) == 0x000000, "Member 'JSIContainer_C_Drop_ItemOverItem__DelegateSignature::ItemReceiver' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ItemOverItem__DelegateSignature, ItemDropped) == 0x000008, "Member 'JSIContainer_C_Drop_ItemOverItem__DelegateSignature::ItemDropped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ItemOverItem__DelegateSignature, ItemReceiverContainer) == 0x000010, "Member 'JSIContainer_C_Drop_ItemOverItem__DelegateSignature::ItemReceiverContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Drop_ItemOverItem__DelegateSignature, ItemDroppedContainer) == 0x000018, "Member 'JSIContainer_C_Drop_ItemOverItem__DelegateSignature::ItemDroppedContainer' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DropInfo_ContainerToContainer__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature final
{
public:
	class UJSIContainer_C*                        From;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        To;                                                // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            FromSlotRef;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ToSlotRef;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ToEmptySlot_;                                      // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MovedAll_;                                         // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature");
static_assert(sizeof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature");
static_assert(offsetof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature, From) == 0x000000, "Member 'JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature::From' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature, To) == 0x000008, "Member 'JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature::To' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature, FromSlotRef) == 0x000010, "Member 'JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature::FromSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature, ToSlotRef) == 0x000018, "Member 'JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature::ToSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature, ToEmptySlot_) == 0x000020, "Member 'JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature::ToEmptySlot_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature, MovedAll_) == 0x000021, "Member 'JSIContainer_C_DropInfo_ContainerToContainer__DelegateSignature::MovedAll_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DropInfo_OnItemEquippedChange__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped_;                                         // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToPockets_;                                        // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature");
static_assert(sizeof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature) == 0x000020, "Wrong size on JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature");
static_assert(offsetof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature, FromContainer) == 0x000000, "Member 'JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature, ToContainer) == 0x000008, "Member 'JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature, SlotRef) == 0x000010, "Member 'JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature, Equipped_) == 0x000018, "Member 'JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature::Equipped_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature, ToPockets_) == 0x000019, "Member 'JSIContainer_C_DropInfo_OnItemEquippedChange__DelegateSignature::ToPockets_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.DropInfo_SplitPerformed__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature final
{
public:
	class UJSI_Slot_C*                            SourceSlotRef;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            NewSplitSlotRef;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ContainerSource;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ContainerReceiver;                                 // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         SplitAmount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountRemaining;                                   // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature");
static_assert(sizeof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature");
static_assert(offsetof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature, SourceSlotRef) == 0x000000, "Member 'JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature::SourceSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature, NewSplitSlotRef) == 0x000008, "Member 'JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature::NewSplitSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature, ContainerSource) == 0x000010, "Member 'JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature::ContainerSource' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature, ContainerReceiver) == 0x000018, "Member 'JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature::ContainerReceiver' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature, SplitAmount) == 0x000020, "Member 'JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature::SplitAmount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature, AmountRemaining) == 0x000024, "Member 'JSIContainer_C_DropInfo_SplitPerformed__DelegateSignature::AmountRemaining' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Equip Item
// 0x06D8 (0x06D8 - 0x0000)
struct JSIContainer_C_Equip_Item final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CustomInfo;                                        // 0x0018(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class UJSIContainer_C*                        SlotContainer;                                     // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerEquippedEvent_;                             // 0x0240(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x0241(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            SlotItemRef;                                       // 0x0248(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   NewLocalVar_1;                                     // 0x0250(0x0018)(Edit, BlueprintVisible)
	struct FVector2D                              CallFunc_CalculateSizeCustom_ReturnValue;          // 0x0268(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_CustomVector_Added;   // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_CustomVector_SlotIndex; // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_CustomVector_ItemInfo; // 0x0280(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef; // 0x04A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_GetDataTableRowFromName_OutRow;           // 0x04B0(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x06D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x06D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x06D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Equip_Item) == 0x000008, "Wrong alignment on JSIContainer_C_Equip_Item");
static_assert(sizeof(JSIContainer_C_Equip_Item) == 0x0006D8, "Wrong size on JSIContainer_C_Equip_Item");
static_assert(offsetof(JSIContainer_C_Equip_Item, ItemId) == 0x000000, "Member 'JSIContainer_C_Equip_Item::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, SlotVector) == 0x000008, "Member 'JSIContainer_C_Equip_Item::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CustomInfo) == 0x000018, "Member 'JSIContainer_C_Equip_Item::CustomInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, SlotContainer) == 0x000238, "Member 'JSIContainer_C_Equip_Item::SlotContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, TriggerEquippedEvent_) == 0x000240, "Member 'JSIContainer_C_Equip_Item::TriggerEquippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, Equipped) == 0x000241, "Member 'JSIContainer_C_Equip_Item::Equipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, SlotItemRef) == 0x000248, "Member 'JSIContainer_C_Equip_Item::SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, NewLocalVar_1) == 0x000250, "Member 'JSIContainer_C_Equip_Item::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_CalculateSizeCustom_ReturnValue) == 0x000268, "Member 'JSIContainer_C_Equip_Item::CallFunc_CalculateSizeCustom_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_AddNewInventoryItem_CustomVector_Added) == 0x000278, "Member 'JSIContainer_C_Equip_Item::CallFunc_AddNewInventoryItem_CustomVector_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_AddNewInventoryItem_CustomVector_SlotIndex) == 0x00027C, "Member 'JSIContainer_C_Equip_Item::CallFunc_AddNewInventoryItem_CustomVector_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_AddNewInventoryItem_CustomVector_ItemInfo) == 0x000280, "Member 'JSIContainer_C_Equip_Item::CallFunc_AddNewInventoryItem_CustomVector_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef) == 0x0004A0, "Member 'JSIContainer_C_Equip_Item::CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_IsValid_ReturnValue) == 0x0004A8, "Member 'JSIContainer_C_Equip_Item::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_GetDataTableRowFromName_OutRow) == 0x0004B0, "Member 'JSIContainer_C_Equip_Item::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0006D0, "Member 'JSIContainer_C_Equip_Item::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_IsEquipped__ReturnValue) == 0x0006D1, "Member 'JSIContainer_C_Equip_Item::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Equip_Item, CallFunc_Not_PreBool_ReturnValue) == 0x0006D2, "Member 'JSIContainer_C_Equip_Item::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.EventSelectItem__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_EventSelectItem__DelegateSignature final
{
public:
	class UJSI_Slot_C*                            Item;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        Container;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_EventSelectItem__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_EventSelectItem__DelegateSignature");
static_assert(sizeof(JSIContainer_C_EventSelectItem__DelegateSignature) == 0x000010, "Wrong size on JSIContainer_C_EventSelectItem__DelegateSignature");
static_assert(offsetof(JSIContainer_C_EventSelectItem__DelegateSignature, Item) == 0x000000, "Member 'JSIContainer_C_EventSelectItem__DelegateSignature::Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_EventSelectItem__DelegateSignature, Container) == 0x000008, "Member 'JSIContainer_C_EventSelectItem__DelegateSignature::Container' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ExecuteUbergraph_JSIContainer
// 0x0DB0 (0x0DB0 - 0x0000)
struct JSIContainer_C_ExecuteUbergraph_JSIContainer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array;                            // 0x0030(0x0010)(ReferenceParm, ContainsInstancedReference)
	EContainerType                                Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue;                       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_1;                          // 0x0068(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_2;                          // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_3;                          // 0x0098(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          Temp_bool_Variable;                                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_4;                         // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_4;                          // 0x00B8(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_5;                         // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_6;                         // 0x00D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_5;                          // 0x00D8(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_6;                          // 0x00E8(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_7;                         // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_7;                          // 0x0120(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          Temp_bool_Variable_1;                              // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_8;                         // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    K2Node_MakeArray_Array_8;                          // 0x0140(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          Temp_bool_Variable_2;                              // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0152(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0153(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Design_;                        // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Columns;                        // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Rows;                           // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent_1;                       // 0x0190(0x0078)()
	class UDragDropOperation*                     K2Node_Event_Operation_1;                          // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation;          // 0x0210(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget;                  // 0x0220(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry_1;                         // 0x022C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0268(0x0078)()
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EB[0x1];                                      // 0x02EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x02F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDefaultItemInfo                       CallFunc_Array_Get_Item_9;                         // 0x0300(0x0040)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_GetDataTableRowFromName_OutRow;           // 0x0348(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0568(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0569(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x056A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56B[0x5];                                      // 0x056B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_CalculateSizeCustom_ReturnValue;          // 0x0570(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_CustomVector_Added;   // 0x0580(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_CustomVector_SlotIndex; // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_CustomVector_ItemInfo; // 0x0588(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef; // 0x07A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetLength_ReturnValue;                    // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x07B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_10;                        // 0x07B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_11;                        // 0x07C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x07C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C9[0x3];                                      // 0x07C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x07CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x07D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x07D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D5[0x3];                                      // 0x07D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x07D8(0x0078)(ConstParm)
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation_1;        // 0x0850(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0858(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget_1;                // 0x0860(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0868(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_869[0x3];                                      // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x086C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x0870(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0871(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x0872(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0873(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_874[0x4];                                      // 0x0874(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0878(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0890(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetInventoryItemsByType_Found_;           // 0x0891(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_892[0x6];                                      // 0x0892(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    CallFunc_GetInventoryItemsByType_ItemsFound;       // 0x0898(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x08A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x08AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported__1;            // 0x08AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AE[0x2];                                      // 0x08AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragDropOperation*                     K2Node_CustomEvent_Target;                         // 0x08B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_CanDrop;                        // 0x08B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Leave;                          // 0x08B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8BA[0x6];                                      // 0x08BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDragWidget_C*                          K2Node_DynamicCast_AsDrag_Widget_2;                // 0x08C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x08C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8CA[0x2];                                      // 0x08CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x08CC(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0904(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0908(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported__2;            // 0x090C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90D[0x3];                                      // 0x090D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_12;                        // 0x0910(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x0918(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_919[0x3];                                      // 0x0919(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CountOut_OutInt;                          // 0x091C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0920(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0924(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_925[0x3];                                      // 0x0925(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        K2Node_CustomEvent_Container;                      // 0x0928(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            K2Node_CustomEvent_SlotRef;                        // 0x0930(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_CustomEvent_Button;                         // 0x0938(0x0018)(HasGetValueTypeHash)
	TDelegate<void(class UJSIContainer_C* Container, class UJSI_Slot_C* SlotRef, const struct FKey& Button)> K2Node_CreateDelegate_OutputDelegate;              // 0x0950(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0960(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0961(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0962(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0963(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0964(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x096C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x096D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96E[0x2];                                      // 0x096E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0970(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0974(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_975[0x3];                                      // 0x0975(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x097C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x098C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0991(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0992(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0993(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0994(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_995[0xB];                                      // 0x0995(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x09A0(0x00D0)()
	class UImage*                                 CallFunc_SpawnObject_ReturnValue;                  // 0x0A70(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPanelSlot*                             CallFunc_AddChild_ReturnValue;                     // 0x0A78(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0A80(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0A90(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0A98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0A99(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0A9A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0A9B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0A9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0A9D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EContainerType                                Temp_byte_Variable_1;                              // 0x0A9E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9F[0x1];                                      // 0x0A9F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x0AA4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0AA5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA6[0x2];                                      // 0x0AA6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0AA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0AAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAD[0x3];                                      // 0x0AAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue_1;      // 0x0AB0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0AB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0AB9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ABA[0x6];                                      // 0x0ABA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UJSIContainer_C*                  Temp_object_Variable;                              // 0x0AC0(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDefaultItemInfo                       CallFunc_Array_Get_Item_13;                        // 0x0AC8(0x0040)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0B0D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added;                // 0x0B0E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B0F[0x1];                                      // 0x0B0F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex;            // 0x0B10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B14[0x4];                                      // 0x0B14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_ItemInfo;             // 0x0B18(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef;          // 0x0D38(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewInventoryItem_StackRemainder;       // 0x0D40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue_1;          // 0x0D44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0D45(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D46[0x2];                                      // 0x0D46(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0D48(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0D58(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0D60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D64[0x4];                                      // 0x0D64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0D68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD;                 // 0x0D70(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0D80(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D81[0x7];                                      // 0x0D81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget;                // 0x0D88(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x0D90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D91[0x3];                                      // 0x0D91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0D94(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0D98(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D99[0x7];                                      // 0x0D99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0DA0(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ExecuteUbergraph_JSIContainer) == 0x000010, "Wrong alignment on JSIContainer_C_ExecuteUbergraph_JSIContainer");
static_assert(sizeof(JSIContainer_C_ExecuteUbergraph_JSIContainer) == 0x000DB0, "Wrong size on JSIContainer_C_ExecuteUbergraph_JSIContainer");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, EntryPoint) == 0x000000, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::EntryPoint' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsSurvival_Player) == 0x000020, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array) == 0x000030, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_byte_Variable) == 0x000040, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Create_ReturnValue) == 0x000050, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Array_Index_Variable) == 0x000058, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_1) == 0x000068, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_2) == 0x000078, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_2) == 0x000080, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_3) == 0x000090, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_3) == 0x000098, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable) == 0x0000A8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_4) == 0x0000B0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_4) == 0x0000B8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_5) == 0x0000C8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_6) == 0x0000D0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_5) == 0x0000D8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_6) == 0x0000E8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Multiply_IntInt_ReturnValue) == 0x0000F8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000100, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_7) == 0x000108, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_MakeVector2D_ReturnValue) == 0x000110, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_7) == 0x000120, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_1) == 0x000130, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_8) == 0x000138, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_MakeArray_Array_8) == 0x000140, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_MakeArray_Array_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_2) == 0x000150, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_IsClosed_Variable) == 0x000151, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Has_Been_Initd_Variable) == 0x000152, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_IsDesignTime) == 0x000153, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Design_) == 0x000154, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Design_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000158, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Add_ReturnValue) == 0x00015C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Loop_Counter_Variable_1) == 0x000160, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000168, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x000170, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000174, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_3) == 0x000178, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Select_Default) == 0x000179, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Add_ReturnValue_1) == 0x00017C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetSlotIndex_Result) == 0x000180, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Columns) == 0x000184, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Columns' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Rows) == 0x000188, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Rows' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_PointerEvent_1) == 0x000190, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_PointerEvent_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Operation_1) == 0x000208, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Operation_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsJig_SDrag_Operation) == 0x000210, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsJig_SDrag_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_1) == 0x000218, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsDrag_Widget) == 0x000220, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsDrag_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_2) == 0x000228, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_MyGeometry_1) == 0x00022C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_MyGeometry_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_PointerEvent) == 0x000268, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_Operation) == 0x0002E0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002E8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002E9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanOR_ReturnValue) == 0x0002EA, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue) == 0x0002EC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x0002F0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue) == 0x0002F1, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue_1) == 0x0002F4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0002F8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0002F9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_9) == 0x000300, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue) == 0x000340, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetDataTableRowFromName_OutRow) == 0x000348, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000568, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_NotEqual_NameName_ReturnValue) == 0x000569, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Has_Been_Initd_Variable_1) == 0x00056A, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_CalculateSizeCustom_ReturnValue) == 0x000570, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_CalculateSizeCustom_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_Added) == 0x000580, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotIndex) == 0x000584, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_ItemInfo) == 0x000588, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef) == 0x0007A8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetLength_ReturnValue) == 0x0007B0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0007B4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_10) == 0x0007B8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_11) == 0x0007C0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Not_PreBool_ReturnValue) == 0x0007C8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Variable) == 0x0007CC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_2) == 0x0007D0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_IsClosed_Variable_1) == 0x0007D4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_MouseEvent) == 0x0007D8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsJig_SDrag_Operation_1) == 0x000850, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsJig_SDrag_Operation_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_3) == 0x000858, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsDrag_Widget_1) == 0x000860, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsDrag_Widget_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_4) == 0x000868, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetEmptySlot_SlotIndex) == 0x00086C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetEmptySlot_Found_) == 0x000870, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000871, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsSupportedType__Supported_) == 0x000872, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000873, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BreakVector2D_X) == 0x000878, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BreakVector2D_Y) == 0x000880, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000888, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000890, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetInventoryItemsByType_Found_) == 0x000891, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetInventoryItemsByType_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetInventoryItemsByType_ItemsFound) == 0x000898, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetInventoryItemsByType_ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue_2) == 0x0008A8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_IntInt_ReturnValue) == 0x0008AC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsSupportedType__Supported__1) == 0x0008AD, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsSupportedType__Supported__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Target) == 0x0008B0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Target' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_CanDrop) == 0x0008B8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_CanDrop' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Leave) == 0x0008B9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Leave' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsDrag_Widget_2) == 0x0008C0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsDrag_Widget_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_5) == 0x0008C8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_1) == 0x0008C9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_MyGeometry) == 0x0008CC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Event_InDeltaTime) == 0x000904, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Array_Index_Variable_1) == 0x000908, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsSupportedType__Supported__2) == 0x00090C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsSupportedType__Supported__2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_12) == 0x000910, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Has_Been_Initd_Variable_2) == 0x000918, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_CountOut_OutInt) == 0x00091C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_CountOut_OutInt' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Max_ReturnValue) == 0x000920, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000924, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Container) == 0x000928, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_SlotRef) == 0x000930, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CustomEvent_Button) == 0x000938, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CustomEvent_Button' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CreateDelegate_OutputDelegate) == 0x000950, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000960, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000961, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue_1) == 0x000962, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_2) == 0x000963, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Variable_1) == 0x000964, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_3) == 0x000968, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_3) == 0x00096C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_IsClosed_Variable_2) == 0x00096D, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000970, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000974, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000978, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CreateDelegate_OutputDelegate_1) == 0x00097C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x00098C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000990, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000991, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsValid_ReturnValue_4) == 0x000992, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000993, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue_2) == 0x000994, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x0009A0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_SpawnObject_ReturnValue) == 0x000A70, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddChild_ReturnValue) == 0x000A78, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CreateDelegate_OutputDelegate_2) == 0x000A80, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000A90, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_IsLocallyControlled_ReturnValue) == 0x000A98, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_4) == 0x000A99, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_5) == 0x000A9A, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_6) == 0x000A9B, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Select_Default_1) == 0x000A9C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_Variable_7) == 0x000A9D, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_byte_Variable_1) == 0x000A9E, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Variable_2) == 0x000AA0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_Select_Default_2) == 0x000AA4, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000AA5, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_4) == 0x000AA8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_bool_True_if_break_was_hit_Variable) == 0x000AAC, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddChildToUniformGrid_ReturnValue_1) == 0x000AB0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddChildToUniformGrid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Not_PreBool_ReturnValue_2) == 0x000AB8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue_3) == 0x000AB9, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_object_Variable) == 0x000AC0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Get_Item_13) == 0x000AC8, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Get_Item_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Array_Length_ReturnValue_3) == 0x000B08, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Less_IntInt_ReturnValue_2) == 0x000B0C, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000B0D, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_Added) == 0x000B0E, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_SlotIndex) == 0x000B10, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_ItemInfo) == 0x000B18, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_SlotItemRef) == 0x000D38, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_AddNewInventoryItem_StackRemainder) == 0x000D40, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_AddNewInventoryItem_StackRemainder' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_NotEqual_NameName_ReturnValue_1) == 0x000D44, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_NotEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_BooleanAND_ReturnValue_4) == 0x000D45, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_CreateDelegate_OutputDelegate_3) == 0x000D48, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetPlayerController_ReturnValue_1) == 0x000D58, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_int_Variable_3) == 0x000D60, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetHUD_ReturnValue) == 0x000D68, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_AsBPI_Game_HUD) == 0x000D70, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_AsBPI_Game_HUD' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, K2Node_DynamicCast_bSuccess_6) == 0x000D80, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_GetInventoryWidget_Widget) == 0x000D88, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_GetInventoryWidget_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x000D90, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_Add_IntInt_ReturnValue_5) == 0x000D94, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000D98, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ExecuteUbergraph_JSIContainer, Temp_struct_Variable) == 0x000DA0, "Member 'JSIContainer_C_ExecuteUbergraph_JSIContainer::Temp_struct_Variable' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.FlipSlotDim
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_FlipSlotDim final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Flipped;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_FlipSlotDim) == 0x000008, "Wrong alignment on JSIContainer_C_FlipSlotDim");
static_assert(sizeof(JSIContainer_C_FlipSlotDim) == 0x000040, "Wrong size on JSIContainer_C_FlipSlotDim");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, SlotVector) == 0x000000, "Member 'JSIContainer_C_FlipSlotDim::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, Flipped) == 0x000010, "Member 'JSIContainer_C_FlipSlotDim::Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, CallFunc_BreakVector2D_X) == 0x000020, "Member 'JSIContainer_C_FlipSlotDim::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, CallFunc_BreakVector2D_Y) == 0x000028, "Member 'JSIContainer_C_FlipSlotDim::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_FlipSlotDim, CallFunc_MakeVector2D_ReturnValue) == 0x000030, "Member 'JSIContainer_C_FlipSlotDim::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GenerateEmptySlots
// 0x0120 (0x0120 - 0x0000)
struct JSIContainer_C_GenerateEmptySlots final
{
public:
	int32                                         MinRows;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinColumns;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0xF];                                       // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x0020(0x00D0)()
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 CallFunc_SpawnObject_ReturnValue;                  // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GenerateEmptySlots) == 0x000010, "Wrong alignment on JSIContainer_C_GenerateEmptySlots");
static_assert(sizeof(JSIContainer_C_GenerateEmptySlots) == 0x000120, "Wrong size on JSIContainer_C_GenerateEmptySlots");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, MinRows) == 0x000000, "Member 'JSIContainer_C_GenerateEmptySlots::MinRows' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, MinColumns) == 0x000004, "Member 'JSIContainer_C_GenerateEmptySlots::MinColumns' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, Temp_int_Variable) == 0x000008, "Member 'JSIContainer_C_GenerateEmptySlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x000020, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, Temp_int_Variable_1) == 0x0000F4, "Member 'JSIContainer_C_GenerateEmptySlots::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_SpawnObject_ReturnValue) == 0x0000F8, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000100, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000108, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x00010C, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000110, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000114, "Member 'JSIContainer_C_GenerateEmptySlots::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GenerateEmptySlots (OnDrag)
// 0x00D8 (0x00D8 - 0x0000)
struct JSIContainer_C_GenerateEmptySlots__OnDrag_ final
{
public:
	class UJSI_Slot_C*                            JSISlot;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          OnlyReset;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Create_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridSlot*                       CallFunc_AddChildToUniformGrid_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0040(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndex_Result;                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EContainerType                                Temp_byte_Variable;                                // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveChild_ReturnValue;                  // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GenerateEmptySlots__OnDrag_) == 0x000008, "Wrong alignment on JSIContainer_C_GenerateEmptySlots__OnDrag_");
static_assert(sizeof(JSIContainer_C_GenerateEmptySlots__OnDrag_) == 0x0000D8, "Wrong size on JSIContainer_C_GenerateEmptySlots__OnDrag_");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, JSISlot) == 0x000000, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::JSISlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, OnlyReset) == 0x000008, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::OnlyReset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Create_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_int_Variable) == 0x000018, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_AddChildToUniformGrid_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_AddChildToUniformGrid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_struct_Variable) == 0x000040, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_GetSlotIndex_Result) == 0x000050, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_GetSlotIndex_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Subtract_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000058, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_BreakVector2D_X) == 0x000060, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_BreakVector2D_Y) == 0x000068, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000070, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_MakeVector2D_ReturnValue) == 0x000078, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_BreakVector2D_X_1) == 0x000088, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_BreakVector2D_Y_1) == 0x000090, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_bool_Variable) == 0x000098, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Round_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Add_IntInt_ReturnValue_2) == 0x0000A0, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Round_ReturnValue_1) == 0x0000A4, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_bool_Variable_1) == 0x0000A8, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000AC, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_bool_Variable_2) == 0x0000B1, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_bool_Variable_3) == 0x0000B2, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_byte_Variable) == 0x0000B3, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, Temp_int_Variable_1) == 0x0000B4, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, K2Node_Select_Default) == 0x0000B8, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000B9, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000BC, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_RemoveChild_ReturnValue) == 0x0000C8, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_RemoveChild_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Array_Length_ReturnValue) == 0x0000CC, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GenerateEmptySlots__OnDrag_, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'JSIContainer_C_GenerateEmptySlots__OnDrag_::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Get Max YDimension
// 0x0048 (0x0048 - 0x0000)
struct JSIContainer_C_Get_Max_YDimension final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotsCount;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Result;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Get_Max_YDimension) == 0x000008, "Wrong alignment on JSIContainer_C_Get_Max_YDimension");
static_assert(sizeof(JSIContainer_C_Get_Max_YDimension) == 0x000048, "Wrong size on JSIContainer_C_Get_Max_YDimension");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, Container) == 0x000000, "Member 'JSIContainer_C_Get_Max_YDimension::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, SlotsCount) == 0x000008, "Member 'JSIContainer_C_Get_Max_YDimension::SlotsCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, Result) == 0x00000C, "Member 'JSIContainer_C_Get_Max_YDimension::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_Get_Max_YDimension::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'JSIContainer_C_Get_Max_YDimension::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_BreakVector2D_X) == 0x000028, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_Round_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Get_Max_YDimension, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_Get_Max_YDimension::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetColumnRowBySlotIndex
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetColumnRowBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Column;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempRow;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TempColumn;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetColumnRowBySlotIndex) == 0x000004, "Wrong alignment on JSIContainer_C_GetColumnRowBySlotIndex");
static_assert(sizeof(JSIContainer_C_GetColumnRowBySlotIndex) == 0x000020, "Wrong size on JSIContainer_C_GetColumnRowBySlotIndex");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, Column) == 0x000004, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, Row) == 0x000008, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, TempRow) == 0x00000C, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::TempRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, TempColumn) == 0x000010, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::TempColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetColumnRowBySlotIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetColumnRowBySlotIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerCapacity
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetContainerCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetContainerCapacity) == 0x000004, "Wrong alignment on JSIContainer_C_GetContainerCapacity");
static_assert(sizeof(JSIContainer_C_GetContainerCapacity) == 0x000008, "Wrong size on JSIContainer_C_GetContainerCapacity");
static_assert(offsetof(JSIContainer_C_GetContainerCapacity, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetContainerCapacity::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerCapacity, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetContainerCapacity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerHierarchy
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_GetContainerHierarchy final
{
public:
	TArray<class UJSIContainer_C*>                Containers;                                        // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSIContainer_C*>                FoundContainers;                                   // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSIContainer_C*                        CurrentContainer;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetContainerHierarchy) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainerHierarchy");
static_assert(sizeof(JSIContainer_C_GetContainerHierarchy) == 0x000038, "Wrong size on JSIContainer_C_GetContainerHierarchy");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, Containers) == 0x000000, "Member 'JSIContainer_C_GetContainerHierarchy::Containers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, FoundContainers) == 0x000010, "Member 'JSIContainer_C_GetContainerHierarchy::FoundContainers' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CurrentContainer) == 0x000020, "Member 'JSIContainer_C_GetContainerHierarchy::CurrentContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_Array_Add_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000031, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_BooleanOR_ReturnValue) == 0x000032, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerHierarchy, CallFunc_IsValid_ReturnValue_1) == 0x000033, "Member 'JSIContainer_C_GetContainerHierarchy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetContainerName
// 0x00C0 (0x00C0 - 0x0000)
struct JSIContainer_C_GetContainerName final
{
public:
	class FText                                   Param_ContainerName;                               // 0x0000(0x0018)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0050)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0090(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x00A8(0x0018)()
};
static_assert(alignof(JSIContainer_C_GetContainerName) == 0x000008, "Wrong alignment on JSIContainer_C_GetContainerName");
static_assert(sizeof(JSIContainer_C_GetContainerName) == 0x0000C0, "Wrong size on JSIContainer_C_GetContainerName");
static_assert(offsetof(JSIContainer_C_GetContainerName, Param_ContainerName) == 0x000000, "Member 'JSIContainer_C_GetContainerName::Param_ContainerName' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, Temp_bool_Variable) == 0x000018, "Member 'JSIContainer_C_GetContainerName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000020, "Member 'JSIContainer_C_GetContainerName::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetContainerName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'JSIContainer_C_GetContainerName::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, K2Node_MakeArray_Array) == 0x000080, "Member 'JSIContainer_C_GetContainerName::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, CallFunc_Format_ReturnValue) == 0x000090, "Member 'JSIContainer_C_GetContainerName::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetContainerName, K2Node_Select_Default) == 0x0000A8, "Member 'JSIContainer_C_GetContainerName::K2Node_Select_Default' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetCountFreeSlots
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_GetCountFreeSlots final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         L_FreeSlots;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    CallFunc_Map_Values_Values;                        // 0x0028(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetCountFreeSlots) == 0x000008, "Wrong alignment on JSIContainer_C_GetCountFreeSlots");
static_assert(sizeof(JSIContainer_C_GetCountFreeSlots) == 0x000050, "Wrong size on JSIContainer_C_GetCountFreeSlots");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, Value) == 0x000000, "Member 'JSIContainer_C_GetCountFreeSlots::Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, L_FreeSlots) == 0x000004, "Member 'JSIContainer_C_GetCountFreeSlots::L_FreeSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'JSIContainer_C_GetCountFreeSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'JSIContainer_C_GetCountFreeSlots::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, Temp_int_Array_Index_Variable) == 0x000014, "Member 'JSIContainer_C_GetCountFreeSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, Temp_int_Variable) == 0x00001C, "Member 'JSIContainer_C_GetCountFreeSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Map_Values_Values) == 0x000028, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_IsEmptySlot_isEmpty) == 0x000049, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetCountFreeSlots, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'JSIContainer_C_GetCountFreeSlots::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetDropSlotWithOffset
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_GetDropSlotWithOffset final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SizeY;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PivotIndex;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex1;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetDropOffset_X_Offset;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDropOffset_Y_Offset;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotLocationByIndex_ColumnIndex_;      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotLocationByIndex_RowIndex_;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetIndexBySlotLocation_SlotIndex;         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIndexBySlotLocation_Result;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetDropSlotWithOffset) == 0x000004, "Wrong alignment on JSIContainer_C_GetDropSlotWithOffset");
static_assert(sizeof(JSIContainer_C_GetDropSlotWithOffset) == 0x000038, "Wrong size on JSIContainer_C_GetDropSlotWithOffset");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, SizeX) == 0x000000, "Member 'JSIContainer_C_GetDropSlotWithOffset::SizeX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, SizeY) == 0x000004, "Member 'JSIContainer_C_GetDropSlotWithOffset::SizeY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, SlotIndex) == 0x000008, "Member 'JSIContainer_C_GetDropSlotWithOffset::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, PivotIndex) == 0x00000C, "Member 'JSIContainer_C_GetDropSlotWithOffset::PivotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, SlotIndex1) == 0x000010, "Member 'JSIContainer_C_GetDropSlotWithOffset::SlotIndex1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, Result) == 0x000014, "Member 'JSIContainer_C_GetDropSlotWithOffset::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_GetDropOffset_X_Offset) == 0x000018, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_GetDropOffset_X_Offset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_GetDropOffset_Y_Offset) == 0x00001C, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_GetDropOffset_Y_Offset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_GetSlotLocationByIndex_ColumnIndex_) == 0x000020, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_GetSlotLocationByIndex_ColumnIndex_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_GetSlotLocationByIndex_RowIndex_) == 0x000024, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_GetSlotLocationByIndex_RowIndex_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_GetIndexBySlotLocation_SlotIndex) == 0x000030, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_GetIndexBySlotLocation_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropSlotWithOffset, CallFunc_GetIndexBySlotLocation_Result) == 0x000034, "Member 'JSIContainer_C_GetDropSlotWithOffset::CallFunc_GetIndexBySlotLocation_Result' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetEmptySlot
// 0x0120 (0x0120 - 0x0000)
struct JSIContainer_C_GetEmptySlot final
{
public:
	struct FVector2D                              SlotVector;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OccupyAfterCheck;                                  // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndex;                                         // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HaveFreeSpaceBySize;                               // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OccupiedSlotsCurrent;                              // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         SkipToSlot;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreScan;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            FoundItem;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotVY;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotVX;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_2;                               // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A3[0x1];                                       // 0x00A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB[0x1];                                       // 0x00BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_4;                               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue_1;    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0100(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_2;                    // 0x010A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x010B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_4;           // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10F[0x1];                                      // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_9;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_5;           // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_10;                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_6;           // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetEmptySlot) == 0x000008, "Wrong alignment on JSIContainer_C_GetEmptySlot");
static_assert(sizeof(JSIContainer_C_GetEmptySlot) == 0x000120, "Wrong size on JSIContainer_C_GetEmptySlot");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotVector) == 0x000000, "Member 'JSIContainer_C_GetEmptySlot::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, OccupyAfterCheck) == 0x000010, "Member 'JSIContainer_C_GetEmptySlot::OccupyAfterCheck' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotIndex) == 0x000014, "Member 'JSIContainer_C_GetEmptySlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Found_) == 0x000018, "Member 'JSIContainer_C_GetEmptySlot::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, HaveFreeSpaceBySize) == 0x000019, "Member 'JSIContainer_C_GetEmptySlot::HaveFreeSpaceBySize' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, OccupiedSlotsCurrent) == 0x000020, "Member 'JSIContainer_C_GetEmptySlot::OccupiedSlotsCurrent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SkipToSlot) == 0x000030, "Member 'JSIContainer_C_GetEmptySlot::SkipToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, IgnoreScan) == 0x000034, "Member 'JSIContainer_C_GetEmptySlot::IgnoreScan' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, FoundItem) == 0x000038, "Member 'JSIContainer_C_GetEmptySlot::FoundItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotVY) == 0x000040, "Member 'JSIContainer_C_GetEmptySlot::SlotVY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, SlotVX) == 0x000044, "Member 'JSIContainer_C_GetEmptySlot::SlotVX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CurrentIndex) == 0x000048, "Member 'JSIContainer_C_GetEmptySlot::CurrentIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable) == 0x00004C, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BreakVector2D_X) == 0x000050, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BreakVector2D_Y) == 0x000058, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_FTrunc_ReturnValue) == 0x000060, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_FTrunc_ReturnValue_1) == 0x000064, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue) == 0x000068, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable) == 0x00006C, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable_1) == 0x000074, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable_2) == 0x000075, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue_1) == 0x000076, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable_1) == 0x000078, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable_3) == 0x000080, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue_2) == 0x000081, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable_2) == 0x000084, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_2) == 0x000088, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable_3) == 0x00008C, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable_4) == 0x000090, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_3) == 0x000094, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue_3) == 0x000098, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_4) == 0x00009C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue) == 0x0000A1, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_bool_Variable_5) == 0x0000A2, "Member 'JSIContainer_C_GetEmptySlot::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Length_ReturnValue) == 0x0000A4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Get_Item) == 0x0000B0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEmptySlot_isEmpty) == 0x0000B8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000B9, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, K2Node_Select_Default) == 0x0000BA, "Member 'JSIContainer_C_GetEmptySlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000BC, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000C4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_2) == 0x0000C8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_6) == 0x0000CC, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x0000D0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000D4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Get_Item_1) == 0x0000D8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, Temp_int_Variable_4) == 0x0000E0, "Member 'JSIContainer_C_GetEmptySlot::Temp_int_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_7) == 0x0000E4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x0000E8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_8) == 0x0000EC, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_GetSlotIndexByColumnRow_ReturnValue_1) == 0x0000F0, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_GetSlotIndexByColumnRow_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x0000F4, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0000F8, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Array_Get_Item_2) == 0x000100, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_3) == 0x000108, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEmptySlot_isEmpty_1) == 0x000109, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_IsEmptySlot_isEmpty_2) == 0x00010A, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_IsEmptySlot_isEmpty_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x00010B, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_4) == 0x00010C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_4) == 0x00010D, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_5) == 0x00010E, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_9) == 0x000110, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_5) == 0x000114, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_Add_IntInt_ReturnValue_10) == 0x000118, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_Add_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_LessEqual_IntInt_ReturnValue_6) == 0x00011C, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_LessEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00011D, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00011E, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEmptySlot, CallFunc_BooleanAND_ReturnValue_6) == 0x00011F, "Member 'JSIContainer_C_GetEmptySlot::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetEquippedItemRef
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetEquippedItemRef final
{
public:
	bool                                          Found_;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetEquippedItemRef) == 0x000008, "Wrong alignment on JSIContainer_C_GetEquippedItemRef");
static_assert(sizeof(JSIContainer_C_GetEquippedItemRef) == 0x000020, "Wrong size on JSIContainer_C_GetEquippedItemRef");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, Found_) == 0x000000, "Member 'JSIContainer_C_GetEquippedItemRef::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, ItemRef) == 0x000008, "Member 'JSIContainer_C_GetEquippedItemRef::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_Array_Get_Item) == 0x000010, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetEquippedItemRef, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetEquippedItemRef::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetInventoryItemsByID
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_GetInventoryItemsByID final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetInventoryItemsByID) == 0x000008, "Wrong alignment on JSIContainer_C_GetInventoryItemsByID");
static_assert(sizeof(JSIContainer_C_GetInventoryItemsByID) == 0x000050, "Wrong size on JSIContainer_C_GetInventoryItemsByID");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, ItemId) == 0x000000, "Member 'JSIContainer_C_GetInventoryItemsByID::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, Found_) == 0x000004, "Member 'JSIContainer_C_GetInventoryItemsByID::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, ItemsFound) == 0x000008, "Member 'JSIContainer_C_GetInventoryItemsByID::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, ItemsFoundArray) == 0x000018, "Member 'JSIContainer_C_GetInventoryItemsByID::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSIContainer_C_GetInventoryItemsByID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'JSIContainer_C_GetInventoryItemsByID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004D, "Member 'JSIContainer_C_GetInventoryItemsByID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetInventoryItemsByName
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_GetInventoryItemsByName final
{
public:
	class FName                                   ItemName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0010(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetInventoryItemsByName) == 0x000008, "Wrong alignment on JSIContainer_C_GetInventoryItemsByName");
static_assert(sizeof(JSIContainer_C_GetInventoryItemsByName) == 0x000058, "Wrong size on JSIContainer_C_GetInventoryItemsByName");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, ItemName) == 0x000000, "Member 'JSIContainer_C_GetInventoryItemsByName::ItemName' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, Found_) == 0x000008, "Member 'JSIContainer_C_GetInventoryItemsByName::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, ItemsFound) == 0x000010, "Member 'JSIContainer_C_GetInventoryItemsByName::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, ItemsFoundArray) == 0x000020, "Member 'JSIContainer_C_GetInventoryItemsByName::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, Temp_int_Array_Index_Variable) == 0x000030, "Member 'JSIContainer_C_GetInventoryItemsByName::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, Temp_int_Loop_Counter_Variable) == 0x000034, "Member 'JSIContainer_C_GetInventoryItemsByName::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Array_Get_Item) == 0x000040, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Array_Add_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_Less_IntInt_ReturnValue) == 0x000054, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByName, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000055, "Member 'JSIContainer_C_GetInventoryItemsByName::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetInventoryItemsByType
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_GetInventoryItemsByType final
{
public:
	EJSItemType                                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetInventoryItemsByType) == 0x000008, "Wrong alignment on JSIContainer_C_GetInventoryItemsByType");
static_assert(sizeof(JSIContainer_C_GetInventoryItemsByType) == 0x000050, "Wrong size on JSIContainer_C_GetInventoryItemsByType");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Type) == 0x000000, "Member 'JSIContainer_C_GetInventoryItemsByType::Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Found_) == 0x000001, "Member 'JSIContainer_C_GetInventoryItemsByType::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, ItemsFound) == 0x000008, "Member 'JSIContainer_C_GetInventoryItemsByType::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, ItemsFoundArray) == 0x000018, "Member 'JSIContainer_C_GetInventoryItemsByType::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSIContainer_C_GetInventoryItemsByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'JSIContainer_C_GetInventoryItemsByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetInventoryItemsByType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004D, "Member 'JSIContainer_C_GetInventoryItemsByType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemBySlotIndex
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetItemBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemBySlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemBySlotIndex");
static_assert(sizeof(JSIContainer_C_GetItemBySlotIndex) == 0x000020, "Wrong size on JSIContainer_C_GetItemBySlotIndex");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetItemBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, Found) == 0x000004, "Member 'JSIContainer_C_GetItemBySlotIndex::Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, Item) == 0x000008, "Member 'JSIContainer_C_GetItemBySlotIndex::Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_Array_Get_Item) == 0x000010, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_IsValid_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x00001D, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemBySlotIndex, CallFunc_IsEmptySlot_isEmpty) == 0x00001E, "Member 'JSIContainer_C_GetItemBySlotIndex::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemByUniqueID
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_GetItemByUniqueID final
{
public:
	int32                                         UniqueId;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Item;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUniqueID_UniqueServerID;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemByUniqueID) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemByUniqueID");
static_assert(sizeof(JSIContainer_C_GetItemByUniqueID) == 0x000038, "Wrong size on JSIContainer_C_GetItemByUniqueID");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, UniqueId) == 0x000000, "Member 'JSIContainer_C_GetItemByUniqueID::UniqueId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Found) == 0x000004, "Member 'JSIContainer_C_GetItemByUniqueID::Found' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Item) == 0x000008, "Member 'JSIContainer_C_GetItemByUniqueID::Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_GetItemByUniqueID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_GetItemByUniqueID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_GetUniqueID_UniqueServerID) == 0x00002C, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemByUniqueID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetItemByUniqueID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemsByRarity
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_GetItemsByRarity final
{
public:
	ESlotRarity                                   Rarity;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found_;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemsFound;                                        // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    ItemsFoundArray;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemsByRarity) == 0x000008, "Wrong alignment on JSIContainer_C_GetItemsByRarity");
static_assert(sizeof(JSIContainer_C_GetItemsByRarity) == 0x000050, "Wrong size on JSIContainer_C_GetItemsByRarity");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Rarity) == 0x000000, "Member 'JSIContainer_C_GetItemsByRarity::Rarity' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Found_) == 0x000001, "Member 'JSIContainer_C_GetItemsByRarity::Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, ItemsFound) == 0x000008, "Member 'JSIContainer_C_GetItemsByRarity::ItemsFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, ItemsFoundArray) == 0x000018, "Member 'JSIContainer_C_GetItemsByRarity::ItemsFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSIContainer_C_GetItemsByRarity::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'JSIContainer_C_GetItemsByRarity::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Greater_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsByRarity, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004D, "Member 'JSIContainer_C_GetItemsByRarity::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetItemsCount
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetItemsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetItemsCount) == 0x000004, "Wrong alignment on JSIContainer_C_GetItemsCount");
static_assert(sizeof(JSIContainer_C_GetItemsCount) == 0x000008, "Wrong size on JSIContainer_C_GetItemsCount");
static_assert(offsetof(JSIContainer_C_GetItemsCount, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetItemsCount::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetItemsCount, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetItemsCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetLength
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetLength final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetLength) == 0x000004, "Wrong alignment on JSIContainer_C_GetLength");
static_assert(sizeof(JSIContainer_C_GetLength) == 0x000008, "Wrong size on JSIContainer_C_GetLength");
static_assert(offsetof(JSIContainer_C_GetLength, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetLength::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLength, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetLength::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetLowestSlotIndex
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_GetLowestSlotIndex final
{
public:
	TArray<class UJSI_Slot_C*>                    Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	int32                                         MinIndex;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Min;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetLowestSlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_GetLowestSlotIndex");
static_assert(sizeof(JSIContainer_C_GetLowestSlotIndex) == 0x000040, "Wrong size on JSIContainer_C_GetLowestSlotIndex");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, Array) == 0x000000, "Member 'JSIContainer_C_GetLowestSlotIndex::Array' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, MinIndex) == 0x000010, "Member 'JSIContainer_C_GetLowestSlotIndex::MinIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, Min) == 0x000014, "Member 'JSIContainer_C_GetLowestSlotIndex::Min' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetLowestSlotIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'JSIContainer_C_GetLowestSlotIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'JSIContainer_C_GetLowestSlotIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_GetLowestSlotIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_GetLowestSlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'JSIContainer_C_GetLowestSlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetLowestSlotIndex, CallFunc_Less_IntInt_ReturnValue_1) == 0x000038, "Member 'JSIContainer_C_GetLowestSlotIndex::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetMaxCountSlots
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetMaxCountSlots final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    CallFunc_Map_Values_Values;                        // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetMaxCountSlots) == 0x000008, "Wrong alignment on JSIContainer_C_GetMaxCountSlots");
static_assert(sizeof(JSIContainer_C_GetMaxCountSlots) == 0x000020, "Wrong size on JSIContainer_C_GetMaxCountSlots");
static_assert(offsetof(JSIContainer_C_GetMaxCountSlots, ReturnValue) == 0x000000, "Member 'JSIContainer_C_GetMaxCountSlots::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCountSlots, CallFunc_Map_Values_Values) == 0x000008, "Member 'JSIContainer_C_GetMaxCountSlots::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetMaxCountSlots, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetMaxCountSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetNumberOfFreeSlots
// 0x0030 (0x0030 - 0x0000)
struct JSIContainer_C_GetNumberOfFreeSlots final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FreeSlots;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetNumberOfFreeSlots) == 0x000008, "Wrong alignment on JSIContainer_C_GetNumberOfFreeSlots");
static_assert(sizeof(JSIContainer_C_GetNumberOfFreeSlots) == 0x000030, "Wrong size on JSIContainer_C_GetNumberOfFreeSlots");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, Num) == 0x000000, "Member 'JSIContainer_C_GetNumberOfFreeSlots::Num' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, FreeSlots) == 0x000004, "Member 'JSIContainer_C_GetNumberOfFreeSlots::FreeSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'JSIContainer_C_GetNumberOfFreeSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GetNumberOfFreeSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_GetNumberOfFreeSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, Temp_int_Variable) == 0x000014, "Member 'JSIContainer_C_GetNumberOfFreeSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x000018, "Member 'JSIContainer_C_GetNumberOfFreeSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_GetNumberOfFreeSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetNumberOfFreeSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetNumberOfFreeSlots, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_GetNumberOfFreeSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetPaddingBySlotIndex
// 0x0138 (0x0138 - 0x0000)
struct JSIContainer_C_GetPaddingBySlotIndex final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                Param_Padding;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Conumn;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RowIndex;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_3;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_4;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_5;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_6;           // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_7;           // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_2;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_3;        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Top_ImplicitCast;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_MakeStruct_Left_ImplicitCast;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetPaddingBySlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_GetPaddingBySlotIndex");
static_assert(sizeof(JSIContainer_C_GetPaddingBySlotIndex) == 0x000138, "Wrong size on JSIContainer_C_GetPaddingBySlotIndex");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, SlotIndex) == 0x000000, "Member 'JSIContainer_C_GetPaddingBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, SlotVector) == 0x000008, "Member 'JSIContainer_C_GetPaddingBySlotIndex::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, Param_Padding) == 0x000018, "Member 'JSIContainer_C_GetPaddingBySlotIndex::Param_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, Conumn) == 0x000028, "Member 'JSIContainer_C_GetPaddingBySlotIndex::Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, Row) == 0x00002C, "Member 'JSIContainer_C_GetPaddingBySlotIndex::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, RowIndex) == 0x000030, "Member 'JSIContainer_C_GetPaddingBySlotIndex::RowIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, ColumnIndex) == 0x000034, "Member 'JSIContainer_C_GetPaddingBySlotIndex::ColumnIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_X) == 0x000040, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_Y) == 0x000048, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000050, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000058, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000068, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_X_1) == 0x000070, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_BreakVector2D_Y_1) == 0x000078, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x000080, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_3) == 0x000090, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_4) == 0x000098, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x0000A0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x0000A8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000B0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x0000B8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_5) == 0x0000C0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_6) == 0x0000C8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_ReturnValue_7) == 0x0000D0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, K2Node_MakeStruct_Margin) == 0x0000D8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x0000E8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x0000EC, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x0000F4, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0000F8, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x000100, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000108, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x000110, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast_2) == 0x000118, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x000120, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, CallFunc_Add_DoubleDouble_B_ImplicitCast_3) == 0x000128, "Member 'JSIContainer_C_GetPaddingBySlotIndex::CallFunc_Add_DoubleDouble_B_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, K2Node_MakeStruct_Top_ImplicitCast) == 0x000130, "Member 'JSIContainer_C_GetPaddingBySlotIndex::K2Node_MakeStruct_Top_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetPaddingBySlotIndex, K2Node_MakeStruct_Left_ImplicitCast) == 0x000134, "Member 'JSIContainer_C_GetPaddingBySlotIndex::K2Node_MakeStruct_Left_ImplicitCast' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetRootContainerRef
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetRootContainerRef final
{
public:
	bool                                          ExcludeEquipTo;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        ContainerRef;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CallFunc_GetRootContainerRef_ContainerRef;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetRootContainerRef) == 0x000008, "Wrong alignment on JSIContainer_C_GetRootContainerRef");
static_assert(sizeof(JSIContainer_C_GetRootContainerRef) == 0x000020, "Wrong size on JSIContainer_C_GetRootContainerRef");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, ExcludeEquipTo) == 0x000000, "Member 'JSIContainer_C_GetRootContainerRef::ExcludeEquipTo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, ContainerRef) == 0x000008, "Member 'JSIContainer_C_GetRootContainerRef::ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_GetRootContainerRef_ContainerRef) == 0x000010, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_GetRootContainerRef_ContainerRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetRootContainerRef, CallFunc_BooleanOR_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetRootContainerRef::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSelecetItemName
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetSelecetItemName final
{
public:
	class FText                                   Param_Name;                                        // 0x0000(0x0018)(Parm, OutParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSelecetItemName) == 0x000008, "Wrong alignment on JSIContainer_C_GetSelecetItemName");
static_assert(sizeof(JSIContainer_C_GetSelecetItemName) == 0x000020, "Wrong size on JSIContainer_C_GetSelecetItemName");
static_assert(offsetof(JSIContainer_C_GetSelecetItemName, Param_Name) == 0x000000, "Member 'JSIContainer_C_GetSelecetItemName::Param_Name' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSelecetItemName, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetSelecetItemName::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSelectItemInfo
// 0x0228 (0x0228 - 0x0000)
struct JSIContainer_C_GetSelectItemInfo final
{
public:
	struct FFItemInfo                             ItemInfo;                                          // 0x0000(0x0220)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSelectItemInfo) == 0x000008, "Wrong alignment on JSIContainer_C_GetSelectItemInfo");
static_assert(sizeof(JSIContainer_C_GetSelectItemInfo) == 0x000228, "Wrong size on JSIContainer_C_GetSelectItemInfo");
static_assert(offsetof(JSIContainer_C_GetSelectItemInfo, ItemInfo) == 0x000000, "Member 'JSIContainer_C_GetSelectItemInfo::ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSelectItemInfo, CallFunc_IsValid_ReturnValue) == 0x000220, "Member 'JSIContainer_C_GetSelectItemInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSlotIndex
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_GetSlotIndex final
{
public:
	int32                                         Result;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSlotIndex) == 0x000004, "Wrong alignment on JSIContainer_C_GetSlotIndex");
static_assert(sizeof(JSIContainer_C_GetSlotIndex) == 0x000008, "Wrong size on JSIContainer_C_GetSlotIndex");
static_assert(offsetof(JSIContainer_C_GetSlotIndex, Result) == 0x000000, "Member 'JSIContainer_C_GetSlotIndex::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'JSIContainer_C_GetSlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSlotIndexByColumnRow
// 0x001C (0x001C - 0x0000)
struct JSIContainer_C_GetSlotIndexByColumnRow final
{
public:
	int32                                         Column;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Row;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSlotIndexByColumnRow) == 0x000004, "Wrong alignment on JSIContainer_C_GetSlotIndexByColumnRow");
static_assert(sizeof(JSIContainer_C_GetSlotIndexByColumnRow) == 0x00001C, "Wrong size on JSIContainer_C_GetSlotIndexByColumnRow");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, Column) == 0x000000, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, Row) == 0x000004, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, ReturnValue) == 0x000008, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, CallFunc_Multiply_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotIndexByColumnRow, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000018, "Member 'JSIContainer_C_GetSlotIndexByColumnRow::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSlotMotherUID
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_GetSlotMotherUID final
{
public:
	bool                                          ReturnContainerID_IfInvalid_;                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UDID;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSlotMotherUID) == 0x000004, "Wrong alignment on JSIContainer_C_GetSlotMotherUID");
static_assert(sizeof(JSIContainer_C_GetSlotMotherUID) == 0x000010, "Wrong size on JSIContainer_C_GetSlotMotherUID");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, ReturnContainerID_IfInvalid_) == 0x000000, "Member 'JSIContainer_C_GetSlotMotherUID::ReturnContainerID_IfInvalid_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, UDID) == 0x000004, "Member 'JSIContainer_C_GetSlotMotherUID::UDID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, CallFunc_SelectInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_GetSlotMotherUID::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotMotherUID, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_GetSlotMotherUID::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetWeight
// 0x0040 (0x0040 - 0x0000)
struct JSIContainer_C_GetWeight final
{
public:
	double                                        Return;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWeight_Weight;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetWeight) == 0x000008, "Wrong alignment on JSIContainer_C_GetWeight");
static_assert(sizeof(JSIContainer_C_GetWeight) == 0x000040, "Wrong size on JSIContainer_C_GetWeight");
static_assert(offsetof(JSIContainer_C_GetWeight, Return) == 0x000000, "Member 'JSIContainer_C_GetWeight::Return' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, Value) == 0x000008, "Member 'JSIContainer_C_GetWeight::Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_GetWeight::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_GetWeight::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetWeight::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetWeight::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_GetWeight::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetWeight::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, CallFunc_GetWeight_Weight) == 0x000030, "Member 'JSIContainer_C_GetWeight::CallFunc_GetWeight_Weight' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetWeight, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000038, "Member 'JSIContainer_C_GetWeight::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HandleContainerOnContainer
// 0x0B18 (0x0B18 - 0x0000)
struct JSIContainer_C_HandleContainerOnContainer final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ToSlotRef;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DraggedRotated_;                                   // 0x0024(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TryRotated_;                                       // 0x0025(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Handled_;                                          // 0x0026(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NewLocalVar_0;                                     // 0x0028(0x0018)(Edit, BlueprintVisible)
	struct FFItemInfo                             TempInfo;                                          // 0x0040(0x0220)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         FreeSpace;                                         // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentCount;                                      // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToEmptySlot_;                                      // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0269(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x026A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x026B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsBeginner_IsBeginner;                 // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A[0x6];                                      // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0280(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0290(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD;                 // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget;                // 0x02B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        CallFunc_StashContainers_ReturnValue;              // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEquippedSlots_ReturnValue;           // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckEquippedSlots_ReturnValue_1;         // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x02C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C6[0x2];                                      // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue_1;                     // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD_1;               // 0x02D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EA[0x6];                                      // 0x02EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget_1;              // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPocketContainer_Result;                // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_GetPocketContainer_Container;             // 0x0300(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_2;        // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHUD*                                   CallFunc_GetHUD_ReturnValue_2;                     // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD_2;               // 0x0330(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget_2;              // 0x0348(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetPocketContainer_Result_1;              // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        CallFunc_GetPocketContainer_Container_1;           // 0x0358(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCanRemoveBackpack_NotAllowed1;       // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0362(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_1;      // 0x0363(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0365(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue_2;      // 0x0366(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0367(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_1;                           // 0x0369(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x036A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x036B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_5;        // 0x036C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_6;        // 0x036D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_7;        // 0x036E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x036F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_8;        // 0x0372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0373(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0375(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0376(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0377(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0390(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0398(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_9;        // 0x03A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_10;       // 0x03AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x03AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SelectRotation_Rotated;                   // 0x03AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count_1;                         // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_11;       // 0x03B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_12;       // 0x03B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_13;       // 0x03B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_14;       // 0x03B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_15;       // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_16;       // 0x03BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_17;       // 0x03BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_18;       // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_6;                  // 0x03BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_7;                  // 0x03BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x03BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_8;                  // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x03C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_19;       // 0x03C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x03C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x03C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x03C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C7[0x1];                                      // 0x03C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count;                        // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_9;                              // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_10;                             // 0x03CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_11;                             // 0x03CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x03CF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x03D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_12;                             // 0x03D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_2;                           // 0x03D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x03D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_3;                           // 0x03D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_9;                 // 0x03D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_10;                // 0x03DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DB[0x5];                                      // 0x03DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x03E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_1;                      // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count_2;                      // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0400(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0401(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0402(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added;                // 0x0403(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex;            // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_ItemInfo;             // 0x0408(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef;          // 0x0628(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewInventoryItem_StackRemainder;       // 0x0630(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_20;       // 0x0634(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0635(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByUID_ItemRemoved;     // 0x0636(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_21;       // 0x0637(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_22;       // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_9;                  // 0x0639(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_11;                // 0x063A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed_1;       // 0x063B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x063C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_12;                // 0x063D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63E[0x2];                                      // 0x063E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_4;                           // 0x0640(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0650(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0660(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default_5;                           // 0x0670(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_CustomVector_Added;   // 0x0680(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x3];                                      // 0x0681(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_CustomVector_SlotIndex; // 0x0684(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_CustomVector_ItemInfo; // 0x0688(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef; // 0x08A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x08B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B1[0x7];                                      // 0x08B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x08B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x08C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x08C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed_2;       // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x08D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DA[0x2];                                      // 0x08DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count_2;                         // 0x08DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default_6;                           // 0x08E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added_1;              // 0x08E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E2[0x2];                                      // 0x08E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex_1;          // 0x08E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_ItemInfo_1;           // 0x08E8(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef_1;        // 0x0B08(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewInventoryItem_StackRemainder_1;     // 0x0B10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_13;                // 0x0B14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0B15(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0B16(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_14;                // 0x0B17(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HandleContainerOnContainer) == 0x000008, "Wrong alignment on JSIContainer_C_HandleContainerOnContainer");
static_assert(sizeof(JSIContainer_C_HandleContainerOnContainer) == 0x000B18, "Wrong size on JSIContainer_C_HandleContainerOnContainer");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, FromContainer) == 0x000000, "Member 'JSIContainer_C_HandleContainerOnContainer::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToContainer) == 0x000008, "Member 'JSIContainer_C_HandleContainerOnContainer::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, SlotRef) == 0x000010, "Member 'JSIContainer_C_HandleContainerOnContainer::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToSlotRef) == 0x000018, "Member 'JSIContainer_C_HandleContainerOnContainer::ToSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToSlot) == 0x000020, "Member 'JSIContainer_C_HandleContainerOnContainer::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, DraggedRotated_) == 0x000024, "Member 'JSIContainer_C_HandleContainerOnContainer::DraggedRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, TryRotated_) == 0x000025, "Member 'JSIContainer_C_HandleContainerOnContainer::TryRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Handled_) == 0x000026, "Member 'JSIContainer_C_HandleContainerOnContainer::Handled_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, NewLocalVar_0) == 0x000028, "Member 'JSIContainer_C_HandleContainerOnContainer::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, TempInfo) == 0x000040, "Member 'JSIContainer_C_HandleContainerOnContainer::TempInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, FreeSpace) == 0x000260, "Member 'JSIContainer_C_HandleContainerOnContainer::FreeSpace' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CurrentCount) == 0x000264, "Member 'JSIContainer_C_HandleContainerOnContainer::CurrentCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, ToEmptySlot_) == 0x000268, "Member 'JSIContainer_C_HandleContainerOnContainer::ToEmptySlot_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable) == 0x000269, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue) == 0x00026A, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsEmptySlot_isEmpty) == 0x00026B, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_int_Loop_Counter_Variable) == 0x00026C, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Add_IntInt_ReturnValue) == 0x000270, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_int_Array_Index_Variable) == 0x000274, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_1) == 0x000278, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetIsBeginner_IsBeginner) == 0x000279, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetIsBeginner_IsBeginner' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPlayerController_ReturnValue) == 0x000280, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Not_PreBool_ReturnValue) == 0x000288, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetHUD_ReturnValue) == 0x000290, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_DynamicCast_AsBPI_Game_HUD) == 0x000298, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_DynamicCast_AsBPI_Game_HUD' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_DynamicCast_bSuccess) == 0x0002A8, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetInventoryWidget_Widget) == 0x0002B0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetInventoryWidget_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_StashContainers_ReturnValue) == 0x0002B8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_StashContainers_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0002C0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_CheckEquippedSlots_ReturnValue) == 0x0002C1, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_CheckEquippedSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_CheckEquippedSlots_ReturnValue_1) == 0x0002C2, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_CheckEquippedSlots_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue) == 0x0002C3, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue) == 0x0002C4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_2) == 0x0002C5, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPlayerController_ReturnValue_1) == 0x0002C8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetHUD_ReturnValue_1) == 0x0002D0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetHUD_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_DynamicCast_AsBPI_Game_HUD_1) == 0x0002D8, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_DynamicCast_AsBPI_Game_HUD_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_DynamicCast_bSuccess_1) == 0x0002E8, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_3) == 0x0002E9, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetInventoryWidget_Widget_1) == 0x0002F0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetInventoryWidget_Widget_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count) == 0x0002F8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPocketContainer_Result) == 0x0002FC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPocketContainer_Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPocketContainer_Container) == 0x000300, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPocketContainer_Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000308, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000309, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPlayerController_ReturnValue_2) == 0x000310, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPlayerController_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_1) == 0x000318, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetHUD_ReturnValue_2) == 0x000320, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetHUD_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_2) == 0x000328, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_DynamicCast_AsBPI_Game_HUD_2) == 0x000330, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_DynamicCast_AsBPI_Game_HUD_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_DynamicCast_bSuccess_2) == 0x000340, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_3) == 0x000341, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetInventoryWidget_Widget_2) == 0x000348, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetInventoryWidget_Widget_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPocketContainer_Result_1) == 0x000350, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPocketContainer_Result_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetPocketContainer_Container_1) == 0x000358, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetPocketContainer_Container_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_CheckCanRemoveBackpack_NotAllowed1) == 0x000360, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_CheckCanRemoveBackpack_NotAllowed1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000361, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000362, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_NotEqual_ObjectObject_ReturnValue_1) == 0x000363, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_NotEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000364, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000365, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_NotEqual_ObjectObject_ReturnValue_2) == 0x000366, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_NotEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000367, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default) == 0x000368, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default_1) == 0x000369, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00036A, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x00036B, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_5) == 0x00036C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_6) == 0x00036D, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_7) == 0x00036E, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_1) == 0x00036F, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_2) == 0x000370, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_4) == 0x000371, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_8) == 0x000372, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x000373, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_5) == 0x000374, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_3) == 0x000375, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000376, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_4) == 0x000377, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_5) == 0x000378, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_6) == 0x000379, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BreakVector2D_X) == 0x000380, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BreakVector2D_Y) == 0x000388, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_7) == 0x000390, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_MakeVector2D_ReturnValue) == 0x000398, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_8) == 0x0003A8, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_9) == 0x0003A9, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_10) == 0x0003AA, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_4) == 0x0003AB, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_SelectRotation_Rotated) == 0x0003AC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_SelectRotation_Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count_1) == 0x0003B0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_11) == 0x0003B4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_12) == 0x0003B5, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_13) == 0x0003B6, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_14) == 0x0003B7, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_5) == 0x0003B8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_15) == 0x0003B9, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_16) == 0x0003BA, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_17) == 0x0003BB, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_18) == 0x0003BC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_6) == 0x0003BD, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_7) == 0x0003BE, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_6) == 0x0003BF, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_7) == 0x0003C0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_8) == 0x0003C1, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Not_PreBool_ReturnValue_1) == 0x0003C2, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_19) == 0x0003C3, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_8) == 0x0003C4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0003C5, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0003C6, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count) == 0x0003C8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_9) == 0x0003CC, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_10) == 0x0003CD, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_11) == 0x0003CE, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0003CF, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x0003D0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_RemoveInventoryItemByRef_Removed) == 0x0003D4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, Temp_bool_Variable_12) == 0x0003D5, "Member 'JSIContainer_C_HandleContainerOnContainer::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default_2) == 0x0003D6, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0003D7, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default_3) == 0x0003D8, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_9) == 0x0003D9, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_10) == 0x0003DA, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Array_Get_Item) == 0x0003E0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Array_Length_ReturnValue) == 0x0003E8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Less_IntInt_ReturnValue) == 0x0003EC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Add_IntInt_ReturnValue_1) == 0x0003F0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0003F4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_1) == 0x0003F8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_UpdateCount_Count_2) == 0x0003FC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_UpdateCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Less_IntInt_ReturnValue_1) == 0x000400, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue_1) == 0x000401, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsVisible_ReturnValue) == 0x000402, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_Added) == 0x000403, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_SlotIndex) == 0x000404, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_ItemInfo) == 0x000408, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_SlotItemRef) == 0x000628, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_StackRemainder) == 0x000630, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_StackRemainder' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_20) == 0x000634, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue_2) == 0x000635, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_RemoveInventoryItemByUID_ItemRemoved) == 0x000636, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_RemoveInventoryItemByUID_ItemRemoved' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_21) == 0x000637, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_22) == 0x000638, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanOR_ReturnValue_9) == 0x000639, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanOR_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_11) == 0x00063A, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_RemoveInventoryItemByRef_Removed_1) == 0x00063B, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_RemoveInventoryItemByRef_Removed_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_isRotated__ReturnValue) == 0x00063C, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_12) == 0x00063D, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default_4) == 0x000640, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BreakVector2D_X_1) == 0x000650, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BreakVector2D_Y_1) == 0x000658, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_MakeVector2D_ReturnValue_1) == 0x000660, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default_5) == 0x000670, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_CustomVector_Added) == 0x000680, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_CustomVector_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotIndex) == 0x000684, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_CustomVector_ItemInfo) == 0x000688, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_CustomVector_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef) == 0x0008A8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue_3) == 0x0008B0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BreakVector2D_X_2) == 0x0008B8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BreakVector2D_Y_2) == 0x0008C0, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_MakeVector2D_ReturnValue_2) == 0x0008C8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_RemoveInventoryItemByRef_Removed_2) == 0x0008D8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_RemoveInventoryItemByRef_Removed_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_Greater_IntInt_ReturnValue_2) == 0x0008D9, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_GetCount_Count_2) == 0x0008DC, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_GetCount_Count_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, K2Node_Select_Default_6) == 0x0008E0, "Member 'JSIContainer_C_HandleContainerOnContainer::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_Added_1) == 0x0008E1, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_Added_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_SlotIndex_1) == 0x0008E4, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_ItemInfo_1) == 0x0008E8, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_ItemInfo_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_SlotItemRef_1) == 0x000B08, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_SlotItemRef_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_AddNewInventoryItem_StackRemainder_1) == 0x000B10, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_AddNewInventoryItem_StackRemainder_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_13) == 0x000B14, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_IsValid_ReturnValue_4) == 0x000B15, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000B16, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HandleContainerOnContainer, CallFunc_BooleanAND_ReturnValue_14) == 0x000B17, "Member 'JSIContainer_C_HandleContainerOnContainer::CallFunc_BooleanAND_ReturnValue_14' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HighlightItemsByType
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_HighlightItemsByType final
{
public:
	TArray<EJSItemType>                           Types;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJSItemType                                   CallFunc_GetType_Type;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HighlightItemsByType) == 0x000008, "Wrong alignment on JSIContainer_C_HighlightItemsByType");
static_assert(sizeof(JSIContainer_C_HighlightItemsByType) == 0x000058, "Wrong size on JSIContainer_C_HighlightItemsByType");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Types) == 0x000000, "Member 'JSIContainer_C_HighlightItemsByType::Types' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Array_Index_Variable) == 0x000020, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'JSIContainer_C_HighlightItemsByType::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Length_ReturnValue_1) == 0x000030, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Get_Item) == 0x000038, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Length_ReturnValue_2) == 0x000044, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_GetType_Type) == 0x000051, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_GetType_Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightItemsByType, CallFunc_Array_Contains_ReturnValue) == 0x000052, "Member 'JSIContainer_C_HighlightItemsByType::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.HighlightSlots
// 0x0260 (0x0260 - 0x0000)
struct JSIContainer_C_HighlightSlots final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              MouseLoc;                                          // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRecRef;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported_;                                        // 0x0039(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PivotIndex;                                        // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotForItem;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ContainerSupported_;                               // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         YLastIndex;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         XLastIndex;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InvalidMove;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemFoundArray;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            ItemFound;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DoubleDouble_ReturnValue;      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDropOffset_X_Offset;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetDropOffset_Y_Offset;                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x011C(0x0014)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty_1;                    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanStack__CanStack;                       // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13D[0x3];                                      // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_4;                        // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_4;                        // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18A[0x6];                                      // 0x018A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem_1;              // 0x0190(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_FlipSlotDim_Flipped;                      // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetEmptySlot_SlotIndex;                   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found_;                      // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetEmptySlot_SlotIndex_1;                 // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEmptySlot_Found__1;                    // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x01BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x01BF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E6[0x2];                                      // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_5;                        // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_5;                        // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_4;                     // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0208(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_5;                // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0216(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0217(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A[0x2];                                      // 0x021A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_6;                        // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_6;                        // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Map_Find_Value;                           // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue_5;                     // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue_2;                  // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_7;                        // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_7;                        // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_6;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_HighlightSlots) == 0x000008, "Wrong alignment on JSIContainer_C_HighlightSlots");
static_assert(sizeof(JSIContainer_C_HighlightSlots) == 0x000260, "Wrong size on JSIContainer_C_HighlightSlots");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotIndex) == 0x000000, "Member 'JSIContainer_C_HighlightSlots::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotVector) == 0x000008, "Member 'JSIContainer_C_HighlightSlots::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, MouseLoc) == 0x000018, "Member 'JSIContainer_C_HighlightSlots::MouseLoc' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotRef) == 0x000028, "Member 'JSIContainer_C_HighlightSlots::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotRecRef) == 0x000030, "Member 'JSIContainer_C_HighlightSlots::SlotRecRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Rotated_) == 0x000038, "Member 'JSIContainer_C_HighlightSlots::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Supported_) == 0x000039, "Member 'JSIContainer_C_HighlightSlots::Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, PivotIndex) == 0x00003C, "Member 'JSIContainer_C_HighlightSlots::PivotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, SlotForItem) == 0x000040, "Member 'JSIContainer_C_HighlightSlots::SlotForItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, ContainerSupported_) == 0x000048, "Member 'JSIContainer_C_HighlightSlots::ContainerSupported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, YLastIndex) == 0x00004C, "Member 'JSIContainer_C_HighlightSlots::YLastIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, XLastIndex) == 0x000050, "Member 'JSIContainer_C_HighlightSlots::XLastIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, InvalidMove) == 0x000054, "Member 'JSIContainer_C_HighlightSlots::InvalidMove' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, ItemFoundArray) == 0x000058, "Member 'JSIContainer_C_HighlightSlots::ItemFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, ItemFound) == 0x000068, "Member 'JSIContainer_C_HighlightSlots::ItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000074, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Variable) == 0x000078, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_1) == 0x00007C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Variable_1) == 0x000080, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_2) == 0x000084, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X) == 0x000090, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y) == 0x000098, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Not_PreBool_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue) == 0x0000B4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000B5, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue) == 0x0000B6, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_isRotated__ReturnValue) == 0x0000B7, "Member 'JSIContainer_C_HighlightSlots::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_1) == 0x0000B8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_1) == 0x0000C0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_2) == 0x0000D0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_2) == 0x0000D8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_EqualEqual_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_EqualEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_1) == 0x0000E4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_SelectInt_ReturnValue) == 0x0000E8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_2) == 0x0000EC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000F0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_SelectInt_ReturnValue_1) == 0x0000F4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetDropOffset_X_Offset) == 0x0000F8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetDropOffset_X_Offset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetDropOffset_Y_Offset) == 0x0000FC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetDropOffset_Y_Offset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_4) == 0x000100, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_5) == 0x000104, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsValid_ReturnValue) == 0x000108, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetCount_Count) == 0x00010C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetHostedSlot_HostingItem) == 0x000110, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsEmptySlot_isEmpty) == 0x000118, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_1) == 0x000119, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, K2Node_MakeStruct_SlateColor) == 0x00011C, "Member 'JSIContainer_C_HighlightSlots::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, Temp_int_Array_Index_Variable) == 0x000130, "Member 'JSIContainer_C_HighlightSlots::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Length_ReturnValue_1) == 0x000134, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsEmptySlot_isEmpty_1) == 0x000138, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsEmptySlot_isEmpty_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000139, "Member 'JSIContainer_C_HighlightSlots::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_1) == 0x00013A, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_2) == 0x00013B, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_CanStack__CanStack) == 0x00013C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_CanStack__CanStack' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000140, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000148, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_3) == 0x000150, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_3) == 0x000158, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000160, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_2) == 0x000168, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_3) == 0x00016C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_6) == 0x000170, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_4) == 0x000178, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_4) == 0x000180, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000188, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_3) == 0x000189, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetHostedSlot_HostingItem_1) == 0x000190, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetHostedSlot_HostingItem_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000198, "Member 'JSIContainer_C_HighlightSlots::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FlipSlotDim_Flipped) == 0x0001A0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FlipSlotDim_Flipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_SlotIndex) == 0x0001B0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_Found_) == 0x0001B4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_Found_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_SlotIndex_1) == 0x0001B8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_SlotIndex_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetEmptySlot_Found__1) == 0x0001BC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetEmptySlot_Found__1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsSupportedType__Supported_) == 0x0001BD, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_IsValid_ReturnValue_1) == 0x0001BE, "Member 'JSIContainer_C_HighlightSlots::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_4) == 0x0001BF, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001C0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001C4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001C8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0001CC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0001D0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0001D4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_7) == 0x0001D8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Add_IntInt_ReturnValue_8) == 0x0001DC, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x0001E0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_3) == 0x0001E4, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanAND_ReturnValue_5) == 0x0001E5, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_5) == 0x0001E8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_5) == 0x0001F0, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0001F8, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_4) == 0x000200, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_4) == 0x000204, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Get_Item) == 0x000208, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Length_ReturnValue_2) == 0x000210, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Less_IntInt_ReturnValue_5) == 0x000214, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Less_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanOR_ReturnValue) == 0x000215, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Not_PreBool_ReturnValue_2) == 0x000216, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000217, "Member 'JSIContainer_C_HighlightSlots::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanOR_ReturnValue_1) == 0x000218, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BooleanOR_ReturnValue_2) == 0x000219, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Array_Add_ReturnValue) == 0x00021C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_6) == 0x000220, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_6) == 0x000228, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Map_Find_Value) == 0x000230, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Map_Find_ReturnValue) == 0x000238, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_5) == 0x00023C, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_Greater_IntInt_ReturnValue) == 0x000240, "Member 'JSIContainer_C_HighlightSlots::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_SelectInt_ReturnValue_2) == 0x000244, "Member 'JSIContainer_C_HighlightSlots::CallFunc_SelectInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_X_7) == 0x000248, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_X_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_BreakVector2D_Y_7) == 0x000250, "Member 'JSIContainer_C_HighlightSlots::CallFunc_BreakVector2D_Y_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_HighlightSlots, CallFunc_FTrunc_ReturnValue_6) == 0x000258, "Member 'JSIContainer_C_HighlightSlots::CallFunc_FTrunc_ReturnValue_6' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Hightlight_DragMove
// 0x0058 (0x0058 - 0x0000)
struct JSIContainer_C_Hightlight_DragMove final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            DragSlotRef;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRec;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PivotIndex;                                        // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Hightlight_DragMove) == 0x000008, "Wrong alignment on JSIContainer_C_Hightlight_DragMove");
static_assert(sizeof(JSIContainer_C_Hightlight_DragMove) == 0x000058, "Wrong size on JSIContainer_C_Hightlight_DragMove");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, SlotIndex) == 0x000000, "Member 'JSIContainer_C_Hightlight_DragMove::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, DragSlotRef) == 0x000008, "Member 'JSIContainer_C_Hightlight_DragMove::DragSlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, SlotRec) == 0x000010, "Member 'JSIContainer_C_Hightlight_DragMove::SlotRec' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, Rotated_) == 0x000018, "Member 'JSIContainer_C_Hightlight_DragMove::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, PivotIndex) == 0x00001C, "Member 'JSIContainer_C_Hightlight_DragMove::PivotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, Temp_bool_Variable) == 0x000020, "Member 'JSIContainer_C_Hightlight_DragMove::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000021, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_Not_PreBool_ReturnValue) == 0x000022, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_IsSupportedType__Supported_) == 0x000023, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BreakVector2D_X) == 0x000028, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_BreakVector2D_Y) == 0x000030, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, CallFunc_MakeVector2D_ReturnValue) == 0x000038, "Member 'JSIContainer_C_Hightlight_DragMove::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Hightlight_DragMove, K2Node_Select_Default) == 0x000048, "Member 'JSIContainer_C_Hightlight_DragMove::K2Node_Select_Default' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Initialize
// 0x0001 (0x0001 - 0x0000)
struct JSIContainer_C_Initialize final
{
public:
	bool                                          Design_;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Initialize) == 0x000001, "Wrong alignment on JSIContainer_C_Initialize");
static_assert(sizeof(JSIContainer_C_Initialize) == 0x000001, "Wrong size on JSIContainer_C_Initialize");
static_assert(offsetof(JSIContainer_C_Initialize, Design_) == 0x000000, "Member 'JSIContainer_C_Initialize::Design_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsEquipped?
// 0x000C (0x000C - 0x0000)
struct JSIContainer_C_IsEquipped_ final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetLength_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsEquipped_) == 0x000004, "Wrong alignment on JSIContainer_C_IsEquipped_");
static_assert(sizeof(JSIContainer_C_IsEquipped_) == 0x00000C, "Wrong size on JSIContainer_C_IsEquipped_");
static_assert(offsetof(JSIContainer_C_IsEquipped_, ReturnValue) == 0x000000, "Member 'JSIContainer_C_IsEquipped_::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsEquipped_, CallFunc_GetLength_ReturnValue) == 0x000004, "Member 'JSIContainer_C_IsEquipped_::CallFunc_GetLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsEquipped_, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'JSIContainer_C_IsEquipped_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsSupportedID?
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_IsSupportedID_ final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsSupportedID_) == 0x000004, "Wrong alignment on JSIContainer_C_IsSupportedID_");
static_assert(sizeof(JSIContainer_C_IsSupportedID_) == 0x000018, "Wrong size on JSIContainer_C_IsSupportedID_");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, ID) == 0x000000, "Member 'JSIContainer_C_IsSupportedID_::ID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, Supported) == 0x000004, "Member 'JSIContainer_C_IsSupportedID_::Supported' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Contains_ReturnValue) == 0x000005, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Greater_IntInt_ReturnValue) == 0x00000D, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Contains_ReturnValue_1) == 0x00000E, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Array_Length_ReturnValue_1) == 0x000010, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedID_, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000014, "Member 'JSIContainer_C_IsSupportedID_::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.IsSupportedType?
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_IsSupportedType_ final
{
public:
	TArray<EJSItemType>                           Param_SupportedItemTypes;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EJSItemType                                   Type;                                              // 0x0010(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemId;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Supported_;                                        // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedID__Supported;                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_IsSupportedType_) == 0x000008, "Wrong alignment on JSIContainer_C_IsSupportedType_");
static_assert(sizeof(JSIContainer_C_IsSupportedType_) == 0x000028, "Wrong size on JSIContainer_C_IsSupportedType_");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, Param_SupportedItemTypes) == 0x000000, "Member 'JSIContainer_C_IsSupportedType_::Param_SupportedItemTypes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, Type) == 0x000010, "Member 'JSIContainer_C_IsSupportedType_::Type' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, ItemId) == 0x000014, "Member 'JSIContainer_C_IsSupportedType_::ItemId' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, Supported_) == 0x000018, "Member 'JSIContainer_C_IsSupportedType_::Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_IsSupportedID__Supported) == 0x000020, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_IsSupportedID__Supported' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_Greater_IntInt_ReturnValue) == 0x000021, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_Array_Contains_ReturnValue) == 0x000022, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_IsSupportedType_, CallFunc_BooleanAND_ReturnValue) == 0x000023, "Member 'JSIContainer_C_IsSupportedType_::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Items Filter Surv
// 0x01A0 (0x01A0 - 0x0000)
struct JSIContainer_C_Items_Filter_Surv final
{
public:
	TArray<int32>                                 UIDArrRemove;                                      // 0x0000(0x0010)(Edit, BlueprintVisible)
	bool                                          bFindTemp;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveItemByUniqueID_Sucess;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F[0x1];                                       // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContainerPickupsInfo>          CallFunc_getItemsInventory_ContainerItems;         // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<struct FContainerPickupsInfo>          CallFunc_getItemsInventory_ContainersData;         // 0x0070(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FContainerPickupsInfo                  CallFunc_Array_Get_Item;                           // 0x0080(0x0068)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FContainerPickupsInfo>          CallFunc_getItemsInventory_ContainerItems_1;       // 0x00F0(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<struct FContainerPickupsInfo>          CallFunc_getItemsInventory_ContainersData_1;       // 0x0100(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FContainerPickupsInfo                  CallFunc_Array_Get_Item_1;                         // 0x0118(0x0068)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0188(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_197[0x1];                                      // 0x0197(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Items_Filter_Surv) == 0x000008, "Wrong alignment on JSIContainer_C_Items_Filter_Surv");
static_assert(sizeof(JSIContainer_C_Items_Filter_Surv) == 0x0001A0, "Wrong size on JSIContainer_C_Items_Filter_Surv");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, UIDArrRemove) == 0x000000, "Member 'JSIContainer_C_Items_Filter_Surv::UIDArrRemove' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, bFindTemp) == 0x000010, "Member 'JSIContainer_C_Items_Filter_Surv::bFindTemp' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Array_Index_Variable) == 0x000018, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_RemoveItemByUniqueID_Sucess) == 0x000020, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_RemoveItemByUniqueID_Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Loop_Counter_Variable_1) == 0x000024, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Add_IntInt_ReturnValue_1) == 0x000028, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Array_Index_Variable_2) == 0x000030, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_bool_True_if_break_was_hit_Variable) == 0x000034, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Not_PreBool_ReturnValue) == 0x000035, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Loop_Counter_Variable_2) == 0x000038, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Add_IntInt_ReturnValue_2) == 0x000040, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Array_Index_Variable_3) == 0x000048, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Greater_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_int_Loop_Counter_Variable_3) == 0x000054, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Add_IntInt_ReturnValue_3) == 0x000058, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, Temp_bool_True_if_break_was_hit_Variable_1) == 0x00005C, "Member 'JSIContainer_C_Items_Filter_Surv::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Not_PreBool_ReturnValue_1) == 0x00005D, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_IsValid_ReturnValue) == 0x00005E, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_getItemsInventory_ContainerItems) == 0x000060, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_getItemsInventory_ContainerItems' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_getItemsInventory_ContainersData) == 0x000070, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_getItemsInventory_ContainersData' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Get_Item) == 0x000080, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Length_ReturnValue_2) == 0x0000E8, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000EC, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_getItemsInventory_ContainerItems_1) == 0x0000F0, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_getItemsInventory_ContainerItems_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_getItemsInventory_ContainersData_1) == 0x000100, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_getItemsInventory_ContainersData_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_BooleanAND_ReturnValue) == 0x000110, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Get_Item_1) == 0x000118, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Length_ReturnValue_3) == 0x000180, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Less_IntInt_ReturnValue_2) == 0x000184, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_BooleanAND_ReturnValue_1) == 0x000185, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Get_Item_2) == 0x000188, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_Length_ReturnValue_4) == 0x000190, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Less_IntInt_ReturnValue_3) == 0x000194, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000195, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000196, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_Filter_Surv, CallFunc_Array_AddUnique_ReturnValue) == 0x000198, "Member 'JSIContainer_C_Items_Filter_Surv::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Items FilterDupl
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_Items_FilterDupl final
{
public:
	TArray<int32>                                 UIDArrTemp;                                        // 0x0000(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Items_FilterDupl) == 0x000008, "Wrong alignment on JSIContainer_C_Items_FilterDupl");
static_assert(sizeof(JSIContainer_C_Items_FilterDupl) == 0x000038, "Wrong size on JSIContainer_C_Items_FilterDupl");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, UIDArrTemp) == 0x000000, "Member 'JSIContainer_C_Items_FilterDupl::UIDArrTemp' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, Temp_int_Array_Index_Variable) == 0x000010, "Member 'JSIContainer_C_Items_FilterDupl::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'JSIContainer_C_Items_FilterDupl::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_Array_Length_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000029, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_Array_Find_ReturnValue) == 0x00002C, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000031, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Items_FilterDupl, CallFunc_Array_AddUnique_ReturnValue) == 0x000034, "Member 'JSIContainer_C_Items_FilterDupl::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ItemsCombined__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_ItemsCombined__DelegateSignature final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotReceiver;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotDropped;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          SlotDroppedRemoved_;                               // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ItemsCombined__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_ItemsCombined__DelegateSignature");
static_assert(sizeof(JSIContainer_C_ItemsCombined__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_ItemsCombined__DelegateSignature");
static_assert(offsetof(JSIContainer_C_ItemsCombined__DelegateSignature, FromContainer) == 0x000000, "Member 'JSIContainer_C_ItemsCombined__DelegateSignature::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ItemsCombined__DelegateSignature, ToContainer) == 0x000008, "Member 'JSIContainer_C_ItemsCombined__DelegateSignature::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ItemsCombined__DelegateSignature, SlotReceiver) == 0x000010, "Member 'JSIContainer_C_ItemsCombined__DelegateSignature::SlotReceiver' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ItemsCombined__DelegateSignature, SlotDropped) == 0x000018, "Member 'JSIContainer_C_ItemsCombined__DelegateSignature::SlotDropped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ItemsCombined__DelegateSignature, SlotDroppedRemoved_) == 0x000020, "Member 'JSIContainer_C_ItemsCombined__DelegateSignature::SlotDroppedRemoved_' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MakeCell
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_MakeCell final
{
public:
	int32                                         CurrentCol;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentRow;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MakeCell) == 0x000004, "Wrong alignment on JSIContainer_C_MakeCell");
static_assert(sizeof(JSIContainer_C_MakeCell) == 0x000008, "Wrong size on JSIContainer_C_MakeCell");
static_assert(offsetof(JSIContainer_C_MakeCell, CurrentCol) == 0x000000, "Member 'JSIContainer_C_MakeCell::CurrentCol' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MakeCell, CurrentRow) == 0x000004, "Member 'JSIContainer_C_MakeCell::CurrentRow' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MoveHighlighter
// 0x01A0 (0x01A0 - 0x0000)
struct JSIContainer_C_MoveHighlighter final
{
public:
	class UJSI_Slot_C*                            ItemSlot;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    Highlighted;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Candrop;                                           // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated;                                           // 0x0019(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DefaultSlotsSize;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            LocSlot;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_RecalculateHighlighterDim_Dimention;      // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           CallFunc_SetHightlightBrush_BG_Sprite1;            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_RecalculateHighlitherPosition_Position;   // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x0080(0x00D0)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_RecalculateHighlighretSize_Size;          // 0x0178(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_195[0x3];                                      // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0198(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MoveHighlighter) == 0x000010, "Wrong alignment on JSIContainer_C_MoveHighlighter");
static_assert(sizeof(JSIContainer_C_MoveHighlighter) == 0x0001A0, "Wrong size on JSIContainer_C_MoveHighlighter");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, ItemSlot) == 0x000000, "Member 'JSIContainer_C_MoveHighlighter::ItemSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, Highlighted) == 0x000008, "Member 'JSIContainer_C_MoveHighlighter::Highlighted' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, Candrop) == 0x000018, "Member 'JSIContainer_C_MoveHighlighter::Candrop' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, Rotated) == 0x000019, "Member 'JSIContainer_C_MoveHighlighter::Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, DefaultSlotsSize) == 0x000020, "Member 'JSIContainer_C_MoveHighlighter::DefaultSlotsSize' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, LocSlot) == 0x000028, "Member 'JSIContainer_C_MoveHighlighter::LocSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_BreakVector2D_X) == 0x000030, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000040, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000048, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_SelectFloat_ReturnValue) == 0x000050, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_RecalculateHighlighterDim_Dimention) == 0x000058, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_RecalculateHighlighterDim_Dimention' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_SetHightlightBrush_BG_Sprite1) == 0x000068, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_SetHightlightBrush_BG_Sprite1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_RecalculateHighlitherPosition_Position) == 0x000070, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_RecalculateHighlitherPosition_Position' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x000080, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_Array_Length_ReturnValue) == 0x000150, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_SelectFloat_ReturnValue_1) == 0x000158, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_SelectFloat_ReturnValue_2) == 0x000160, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_BreakVector2D_X_1) == 0x000168, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_BreakVector2D_Y_1) == 0x000170, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_RecalculateHighlighretSize_Size) == 0x000178, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_RecalculateHighlighretSize_Size' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000188, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_FTrunc_ReturnValue) == 0x000190, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000194, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveHighlighter, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000198, "Member 'JSIContainer_C_MoveHighlighter::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MoveItemToContainer
// 0x04B8 (0x04B8 - 0x0000)
struct JSIContainer_C_MoveItemToContainer final
{
public:
	class UJSIContainer_C*                        ToContainer;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlot;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved_;                                            // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrigCount;                                         // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StackRemainder;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSIContainer_C*                        FromContainer;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_UpdateCount_Count;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed_1;       // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSupportedType__Supported_;              // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCount_Count;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_CustomVector_Added;   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_CustomVector_SlotIndex; // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_CustomVector_ItemInfo; // 0x0058(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef; // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_AddNewInventoryItem_Added;                // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AddNewInventoryItem_SlotIndex;            // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_AddNewInventoryItem_ItemInfo;             // 0x0288(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_AddNewInventoryItem_SlotItemRef;          // 0x04A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AddNewInventoryItem_StackRemainder;       // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x04B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MoveItemToContainer) == 0x000008, "Wrong alignment on JSIContainer_C_MoveItemToContainer");
static_assert(sizeof(JSIContainer_C_MoveItemToContainer) == 0x0004B8, "Wrong size on JSIContainer_C_MoveItemToContainer");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, ToContainer) == 0x000000, "Member 'JSIContainer_C_MoveItemToContainer::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, ItemRef) == 0x000008, "Member 'JSIContainer_C_MoveItemToContainer::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, Count) == 0x000010, "Member 'JSIContainer_C_MoveItemToContainer::Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, ToSlot) == 0x000014, "Member 'JSIContainer_C_MoveItemToContainer::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, Rotated_) == 0x000018, "Member 'JSIContainer_C_MoveItemToContainer::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, Moved_) == 0x000019, "Member 'JSIContainer_C_MoveItemToContainer::Moved_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, OrigCount) == 0x00001C, "Member 'JSIContainer_C_MoveItemToContainer::OrigCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, StackRemainder) == 0x000020, "Member 'JSIContainer_C_MoveItemToContainer::StackRemainder' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, FromContainer) == 0x000028, "Member 'JSIContainer_C_MoveItemToContainer::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000033, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000034, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_Subtract_IntInt_ReturnValue) == 0x000038, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_UpdateCount_Count) == 0x000040, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_RemoveInventoryItemByRef_Removed_1) == 0x000045, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_RemoveInventoryItemByRef_Removed_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000046, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_IsSupportedType__Supported_) == 0x000047, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_IsSupportedType__Supported_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_GetCount_Count) == 0x000048, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_CustomVector_Added) == 0x00004C, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_CustomVector_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotIndex) == 0x000050, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_CustomVector_ItemInfo) == 0x000058, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_CustomVector_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef) == 0x000278, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_CustomVector_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_Added) == 0x000280, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_Added' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_SlotIndex) == 0x000284, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_ItemInfo) == 0x000288, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_ItemInfo' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_SlotItemRef) == 0x0004A8, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_SlotItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_AddNewInventoryItem_StackRemainder) == 0x0004B0, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_AddNewInventoryItem_StackRemainder' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0004B4, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToContainer, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0004B5, "Member 'JSIContainer_C_MoveItemToContainer::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MoveItemToIndexByItemRef
// 0x0158 (0x0158 - 0x0000)
struct JSIContainer_C_MoveItemToIndexByItemRef final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate_;                                           // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved_;                                            // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    HostingSlots;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         TargetRow;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetColumn;                                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVector;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_Select_Default;                             // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MoveItemToIndexByItemRef) == 0x000008, "Wrong alignment on JSIContainer_C_MoveItemToIndexByItemRef");
static_assert(sizeof(JSIContainer_C_MoveItemToIndexByItemRef) == 0x000158, "Wrong size on JSIContainer_C_MoveItemToIndexByItemRef");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, ItemRef) == 0x000000, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, ToIndex) == 0x000008, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Rotate_) == 0x00000C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Rotate_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Moved_) == 0x00000D, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Moved_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, HostingSlots) == 0x000010, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, TargetRow) == 0x000020, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::TargetRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, TargetColumn) == 0x000024, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::TargetColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, SlotIndex) == 0x000028, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, ItemVector) == 0x000030, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::ItemVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Array_Index_Variable) == 0x000044, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Array_Index_Variable_1) == 0x000048, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_bool_Variable) == 0x000054, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Variable) == 0x000058, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_2) == 0x000064, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, Temp_int_Variable_1) == 0x000068, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_3) == 0x00006C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_isRotated__ReturnValue) == 0x000070, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Not_PreBool_ReturnValue) == 0x000071, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetPaddingBySlotIndex_Padding) == 0x000074, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x000084, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetPaddingBySlotIndex_Row) == 0x000088, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Get_Item) == 0x000090, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000AC, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_4) == 0x0000B0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x0000B4, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Get_Item_2) == 0x0000B8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Array_Add_ReturnValue) == 0x0000C0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetHostedSlot_HostingItem) == 0x0000C8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_IsEmptySlot_isEmpty) == 0x0000D0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000D1, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BooleanOR_ReturnValue) == 0x0000D2, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetColumnRowBySlotIndex_Column) == 0x0000D4, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GetColumnRowBySlotIndex_Row) == 0x0000D8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_X) == 0x0000E0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_Y) == 0x0000E8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_NotEqual_IntInt_ReturnValue) == 0x0000F0, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_FTrunc_ReturnValue) == 0x0000F4, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BooleanOR_ReturnValue_1) == 0x0000F8, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_5) == 0x0000FC, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Greater_IntInt_ReturnValue) == 0x000100, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Subtract_IntInt_ReturnValue) == 0x000104, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_FTrunc_ReturnValue_1) == 0x000108, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00010C, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_6) == 0x000110, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_Add_IntInt_ReturnValue_7) == 0x000114, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000118, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000119, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BooleanOR_ReturnValue_2) == 0x00011A, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_X_1) == 0x000120, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_BreakVector2D_Y_1) == 0x000128, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_MakeVector2D_ReturnValue) == 0x000130, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, K2Node_Select_Default) == 0x000140, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexByItemRef, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000150, "Member 'JSIContainer_C_MoveItemToIndexByItemRef::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.MoveItemToIndexBySlotIndex
// 0x0170 (0x0170 - 0x0000)
struct JSIContainer_C_MoveItemToIndexBySlotIndex final
{
public:
	int32                                         ItemSlotIndex;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ToIndex;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotate_;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved_;                                            // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            TheItemRef;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UJSI_Slot_C*>                    HostingSlots;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	int32                                         TargetRow;                                         // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetColumn;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ItemVector;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem;                // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9E[0x2];                                       // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F6[0x2];                                       // 0x00F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x0110(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_GetHostedSlot_HostingItem_1;              // 0x0120(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmptySlot_isEmpty;                      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x012A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12B[0x5];                                      // 0x012B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_MoveItemToIndexBySlotIndex) == 0x000008, "Wrong alignment on JSIContainer_C_MoveItemToIndexBySlotIndex");
static_assert(sizeof(JSIContainer_C_MoveItemToIndexBySlotIndex) == 0x000170, "Wrong size on JSIContainer_C_MoveItemToIndexBySlotIndex");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, ItemSlotIndex) == 0x000000, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::ItemSlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, ToIndex) == 0x000004, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::ToIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Rotate_) == 0x000008, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Rotate_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Moved_) == 0x000009, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Moved_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, TheItemRef) == 0x000010, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::TheItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, HostingSlots) == 0x000018, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::HostingSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, TargetRow) == 0x000028, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::TargetRow' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, TargetColumn) == 0x00002C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::TargetColumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, SlotIndex) == 0x000030, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, ItemVector) == 0x000038, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::ItemVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Array_Index_Variable) == 0x000050, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Variable) == 0x000058, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Variable_1) == 0x000064, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item) == 0x000070, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetHostedSlot_HostingItem) == 0x000080, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetHostedSlot_HostingItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_IsValid_ReturnValue_1) == 0x000089, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Length_ReturnValue_1) == 0x000098, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_isRotated__ReturnValue) == 0x00009C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Not_PreBool_ReturnValue) == 0x00009D, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_X) == 0x0000A0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_Y) == 0x0000A8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_MakeVector2D_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetPaddingBySlotIndex_Padding) == 0x0000C0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x0000D0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetPaddingBySlotIndex_Row) == 0x0000D4, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_int_Loop_Counter_Variable_1) == 0x0000D8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000DC, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_3) == 0x0000E0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item_2) == 0x0000E8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Length_ReturnValue_2) == 0x0000F0, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000F4, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, Temp_bool_Variable) == 0x0000F5, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, K2Node_Select_Default) == 0x0000F8, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_4) == 0x000108, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x00010C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Get_Item_3) == 0x000110, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Array_Add_ReturnValue) == 0x000118, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetHostedSlot_HostingItem_1) == 0x000120, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetHostedSlot_HostingItem_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_IsEmptySlot_isEmpty) == 0x000128, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_IsEmptySlot_isEmpty' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000129, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BooleanOR_ReturnValue) == 0x00012A, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_X_1) == 0x000130, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BreakVector2D_Y_1) == 0x000138, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_FTrunc_ReturnValue) == 0x000140, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_FTrunc_ReturnValue_1) == 0x000144, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_5) == 0x000148, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_6) == 0x00014C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Greater_IntInt_ReturnValue) == 0x000150, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Add_IntInt_ReturnValue_7) == 0x000154, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_Subtract_IntInt_ReturnValue) == 0x000158, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00015C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x00015D, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetColumnRowBySlotIndex_Column) == 0x000160, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GetColumnRowBySlotIndex_Row) == 0x000164, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000168, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BooleanOR_ReturnValue_1) == 0x000169, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00016A, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_BooleanOR_ReturnValue_2) == 0x00016B, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_MoveItemToIndexBySlotIndex, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x00016C, "Member 'JSIContainer_C_MoveItemToIndexBySlotIndex::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.NavigationChange
// 0x0003 (0x0003 - 0x0000)
struct JSIContainer_C_NavigationChange final
{
public:
	EUINavigation                                 Direaction;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_NavigationChange) == 0x000001, "Wrong alignment on JSIContainer_C_NavigationChange");
static_assert(sizeof(JSIContainer_C_NavigationChange) == 0x000003, "Wrong size on JSIContainer_C_NavigationChange");
static_assert(offsetof(JSIContainer_C_NavigationChange, Direaction) == 0x000000, "Member 'JSIContainer_C_NavigationChange::Direaction' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_NavigationChange, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'JSIContainer_C_NavigationChange::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_NavigationChange, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'JSIContainer_C_NavigationChange::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDragEnter
// 0x00B8 (0x00B8 - 0x0000)
struct JSIContainer_C_OnDragEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Param_Operation;                                   // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDragEnter) == 0x000008, "Wrong alignment on JSIContainer_C_OnDragEnter");
static_assert(sizeof(JSIContainer_C_OnDragEnter) == 0x0000B8, "Wrong size on JSIContainer_C_OnDragEnter");
static_assert(offsetof(JSIContainer_C_OnDragEnter, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnDragEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDragEnter, PointerEvent) == 0x000038, "Member 'JSIContainer_C_OnDragEnter::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDragEnter, Param_Operation) == 0x0000B0, "Member 'JSIContainer_C_OnDragEnter::Param_Operation' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDragLeave
// 0x0080 (0x0080 - 0x0000)
struct JSIContainer_C_OnDragLeave final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Param_Operation;                                   // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDragLeave) == 0x000008, "Wrong alignment on JSIContainer_C_OnDragLeave");
static_assert(sizeof(JSIContainer_C_OnDragLeave) == 0x000080, "Wrong size on JSIContainer_C_OnDragLeave");
static_assert(offsetof(JSIContainer_C_OnDragLeave, PointerEvent) == 0x000000, "Member 'JSIContainer_C_OnDragLeave::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDragLeave, Param_Operation) == 0x000078, "Member 'JSIContainer_C_OnDragLeave::Param_Operation' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnDrop
// 0x0128 (0x0128 - 0x0000)
struct JSIContainer_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Param_Operation;                                   // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            Slot_Ref;                                          // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        FromContainer;                                     // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJigSDragOperation_C*                   K2Node_DynamicCast_AsJig_SDrag_Operation;          // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PerfromDrop_Moved;                        // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCount_Count;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_SurvPC_C>         K2Node_DynamicCast_AsBPI_Surv_PC;                  // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMPInGameInventory_C*                   CallFunc_GetInventoryWidget_Widget;                // 0x0108(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnDrop) == 0x000008, "Wrong alignment on JSIContainer_C_OnDrop");
static_assert(sizeof(JSIContainer_C_OnDrop) == 0x000128, "Wrong size on JSIContainer_C_OnDrop");
static_assert(offsetof(JSIContainer_C_OnDrop, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, PointerEvent) == 0x000038, "Member 'JSIContainer_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Param_Operation) == 0x0000B0, "Member 'JSIContainer_C_OnDrop::Param_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_OnDrop::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, Slot_Ref) == 0x0000C0, "Member 'JSIContainer_C_OnDrop::Slot_Ref' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, FromContainer) == 0x0000C8, "Member 'JSIContainer_C_OnDrop::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_AsJig_SDrag_Operation) == 0x0000D0, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_AsJig_SDrag_Operation' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_bSuccess) == 0x0000D8, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_PerfromDrop_Moved) == 0x0000D9, "Member 'JSIContainer_C_OnDrop::CallFunc_PerfromDrop_Moved' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetCount_Count) == 0x0000DC, "Member 'JSIContainer_C_OnDrop::CallFunc_GetCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetPlayerController_ReturnValue) == 0x0000E0, "Member 'JSIContainer_C_OnDrop::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Greater_IntInt_ReturnValue) == 0x0000E8, "Member 'JSIContainer_C_OnDrop::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_AsBPI_Surv_PC) == 0x0000F0, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_AsBPI_Surv_PC' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, K2Node_DynamicCast_bSuccess_1) == 0x000100, "Member 'JSIContainer_C_OnDrop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_GetInventoryWidget_Widget) == 0x000108, "Member 'JSIContainer_C_OnDrop::CallFunc_GetInventoryWidget_Widget' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Not_PreBool_ReturnValue) == 0x000110, "Member 'JSIContainer_C_OnDrop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_Array_Get_Item) == 0x000118, "Member 'JSIContainer_C_OnDrop::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000120, "Member 'JSIContainer_C_OnDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnItemSlotOrRotationChanged__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NewIndex;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated;                                           // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature");
static_assert(sizeof(JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature) == 0x000018, "Wrong size on JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature");
static_assert(offsetof(JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature, Container) == 0x000000, "Member 'JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature, SlotRef) == 0x000008, "Member 'JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature, NewIndex) == 0x000010, "Member 'JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature::NewIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature, Rotated) == 0x000014, "Member 'JSIContainer_C_OnItemSlotOrRotationChanged__DelegateSignature::Rotated' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnItemSplitRequest__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_OnItemSplitRequest__DelegateSignature final
{
public:
	class UJSIContainer_C*                        FromContainer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSIContainer_C*                        ToContainer;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ItemSource;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         ToSlotIndex;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalAmount;                                       // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SplitAmount;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnItemSplitRequest__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_OnItemSplitRequest__DelegateSignature");
static_assert(sizeof(JSIContainer_C_OnItemSplitRequest__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_OnItemSplitRequest__DelegateSignature");
static_assert(offsetof(JSIContainer_C_OnItemSplitRequest__DelegateSignature, FromContainer) == 0x000000, "Member 'JSIContainer_C_OnItemSplitRequest__DelegateSignature::FromContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSplitRequest__DelegateSignature, ToContainer) == 0x000008, "Member 'JSIContainer_C_OnItemSplitRequest__DelegateSignature::ToContainer' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSplitRequest__DelegateSignature, ItemSource) == 0x000010, "Member 'JSIContainer_C_OnItemSplitRequest__DelegateSignature::ItemSource' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSplitRequest__DelegateSignature, ToSlotIndex) == 0x000018, "Member 'JSIContainer_C_OnItemSplitRequest__DelegateSignature::ToSlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSplitRequest__DelegateSignature, TotalAmount) == 0x00001C, "Member 'JSIContainer_C_OnItemSplitRequest__DelegateSignature::TotalAmount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemSplitRequest__DelegateSignature, SplitAmount) == 0x000020, "Member 'JSIContainer_C_OnItemSplitRequest__DelegateSignature::SplitAmount' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnItemStackRequest__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_OnItemStackRequest__DelegateSignature final
{
public:
	class UJSI_Slot_C*                            DroppedItem;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            ReceiverItem;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnItemStackRequest__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_OnItemStackRequest__DelegateSignature");
static_assert(sizeof(JSIContainer_C_OnItemStackRequest__DelegateSignature) == 0x000010, "Wrong size on JSIContainer_C_OnItemStackRequest__DelegateSignature");
static_assert(offsetof(JSIContainer_C_OnItemStackRequest__DelegateSignature, DroppedItem) == 0x000000, "Member 'JSIContainer_C_OnItemStackRequest__DelegateSignature::DroppedItem' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnItemStackRequest__DelegateSignature, ReceiverItem) == 0x000008, "Member 'JSIContainer_C_OnItemStackRequest__DelegateSignature::ReceiverItem' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnKeyDown
// 0x01E8 (0x01E8 - 0x0000)
struct JSIContainer_C_OnKeyDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FKeyEvent                              InKeyEvent;                                        // 0x0038(0x0040)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FEventReply                            ReturnValue;                                       // 0x0078(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Unhandled_ReturnValue;                    // 0x0130(0x00B8)()
};
static_assert(alignof(JSIContainer_C_OnKeyDown) == 0x000008, "Wrong alignment on JSIContainer_C_OnKeyDown");
static_assert(sizeof(JSIContainer_C_OnKeyDown) == 0x0001E8, "Wrong size on JSIContainer_C_OnKeyDown");
static_assert(offsetof(JSIContainer_C_OnKeyDown, MyGeometry) == 0x000000, "Member 'JSIContainer_C_OnKeyDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, InKeyEvent) == 0x000038, "Member 'JSIContainer_C_OnKeyDown::InKeyEvent' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, ReturnValue) == 0x000078, "Member 'JSIContainer_C_OnKeyDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnKeyDown, CallFunc_Unhandled_ReturnValue) == 0x000130, "Member 'JSIContainer_C_OnKeyDown::CallFunc_Unhandled_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnMouseLeave
// 0x0078 (0x0078 - 0x0000)
struct JSIContainer_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(JSIContainer_C_OnMouseLeave) == 0x000008, "Wrong alignment on JSIContainer_C_OnMouseLeave");
static_assert(sizeof(JSIContainer_C_OnMouseLeave) == 0x000078, "Wrong size on JSIContainer_C_OnMouseLeave");
static_assert(offsetof(JSIContainer_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'JSIContainer_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnSlotDoubleClick__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_OnSlotDoubleClick__DelegateSignature final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Button;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnSlotDoubleClick__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_OnSlotDoubleClick__DelegateSignature");
static_assert(sizeof(JSIContainer_C_OnSlotDoubleClick__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_OnSlotDoubleClick__DelegateSignature");
static_assert(offsetof(JSIContainer_C_OnSlotDoubleClick__DelegateSignature, Container) == 0x000000, "Member 'JSIContainer_C_OnSlotDoubleClick__DelegateSignature::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnSlotDoubleClick__DelegateSignature, SlotRef) == 0x000008, "Member 'JSIContainer_C_OnSlotDoubleClick__DelegateSignature::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnSlotDoubleClick__DelegateSignature, Button) == 0x000010, "Member 'JSIContainer_C_OnSlotDoubleClick__DelegateSignature::Button' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnSlotMouseButtonDown__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Button;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature");
static_assert(sizeof(JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature) == 0x000028, "Wrong size on JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature");
static_assert(offsetof(JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature, Container) == 0x000000, "Member 'JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature, SlotRef) == 0x000008, "Member 'JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature, Button) == 0x000010, "Member 'JSIContainer_C_OnSlotMouseButtonDown__DelegateSignature::Button' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.OnStackCountChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_OnStackCountChanged__DelegateSignature final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_OnStackCountChanged__DelegateSignature) == 0x000008, "Wrong alignment on JSIContainer_C_OnStackCountChanged__DelegateSignature");
static_assert(sizeof(JSIContainer_C_OnStackCountChanged__DelegateSignature) == 0x000010, "Wrong size on JSIContainer_C_OnStackCountChanged__DelegateSignature");
static_assert(offsetof(JSIContainer_C_OnStackCountChanged__DelegateSignature, ItemRef) == 0x000000, "Member 'JSIContainer_C_OnStackCountChanged__DelegateSignature::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_OnStackCountChanged__DelegateSignature, NewCount) == 0x000008, "Member 'JSIContainer_C_OnStackCountChanged__DelegateSignature::NewCount' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.PerfromDrop
// 0x00E8 (0x00E8 - 0x0000)
struct JSIContainer_C_PerfromDrop final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SlotVector;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated_;                                          // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Moved;                                             // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    ItemFoundArray;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UJSI_Slot_C*                            ItemFound;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         FromY;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FromX;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x006F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue_1;                 // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetSlotIndexByColumnRow_ReturnValue;      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                CallFunc_GetPaddingBySlotIndex_Padding;            // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_GetPaddingBySlotIndex_Conumn;             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetPaddingBySlotIndex_Row;                // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_3;                         // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_PerfromDrop) == 0x000008, "Wrong alignment on JSIContainer_C_PerfromDrop");
static_assert(sizeof(JSIContainer_C_PerfromDrop) == 0x0000E8, "Wrong size on JSIContainer_C_PerfromDrop");
static_assert(offsetof(JSIContainer_C_PerfromDrop, SlotIndex) == 0x000000, "Member 'JSIContainer_C_PerfromDrop::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, SlotVector) == 0x000008, "Member 'JSIContainer_C_PerfromDrop::SlotVector' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, SlotRef) == 0x000018, "Member 'JSIContainer_C_PerfromDrop::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Rotated_) == 0x000020, "Member 'JSIContainer_C_PerfromDrop::Rotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Moved) == 0x000021, "Member 'JSIContainer_C_PerfromDrop::Moved' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, ItemFoundArray) == 0x000028, "Member 'JSIContainer_C_PerfromDrop::ItemFoundArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, ItemFound) == 0x000038, "Member 'JSIContainer_C_PerfromDrop::ItemFound' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, FromY) == 0x000040, "Member 'JSIContainer_C_PerfromDrop::FromY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, FromX) == 0x000044, "Member 'JSIContainer_C_PerfromDrop::FromX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Array_Index_Variable) == 0x000048, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, Temp_int_Loop_Counter_Variable_1) == 0x000058, "Member 'JSIContainer_C_PerfromDrop::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item) == 0x000060, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Length_ReturnValue) == 0x000068, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_isRotated__ReturnValue) == 0x00006D, "Member 'JSIContainer_C_PerfromDrop::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00006E, "Member 'JSIContainer_C_PerfromDrop::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x00006F, "Member 'JSIContainer_C_PerfromDrop::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanOR_ReturnValue) == 0x000070, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item_2) == 0x000080, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanOR_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_isRotated__ReturnValue_1) == 0x000089, "Member 'JSIContainer_C_PerfromDrop::CallFunc_isRotated__ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Not_PreBool_ReturnValue) == 0x00008A, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Not_PreBool_ReturnValue_1) == 0x00008B, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BreakVector2D_X) == 0x000090, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BreakVector2D_Y) == 0x000098, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_MakeVector2D_ReturnValue) == 0x0000A0, "Member 'JSIContainer_C_PerfromDrop::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_IsValid_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_PerfromDrop::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x0000B1, "Member 'JSIContainer_C_PerfromDrop::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanAND_ReturnValue) == 0x0000B2, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B3, "Member 'JSIContainer_C_PerfromDrop::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetSlotIndexByColumnRow_ReturnValue) == 0x0000B4, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetSlotIndexByColumnRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetPaddingBySlotIndex_Padding) == 0x0000B8, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetPaddingBySlotIndex_Padding' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetPaddingBySlotIndex_Conumn) == 0x0000C8, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetPaddingBySlotIndex_Conumn' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_GetPaddingBySlotIndex_Row) == 0x0000CC, "Member 'JSIContainer_C_PerfromDrop::CallFunc_GetPaddingBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Length_ReturnValue_1) == 0x0000D0, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Array_Get_Item_3) == 0x0000D8, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_PerfromDrop, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000E0, "Member 'JSIContainer_C_PerfromDrop::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct JSIContainer_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_PreConstruct) == 0x000001, "Wrong alignment on JSIContainer_C_PreConstruct");
static_assert(sizeof(JSIContainer_C_PreConstruct) == 0x000001, "Wrong size on JSIContainer_C_PreConstruct");
static_assert(offsetof(JSIContainer_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'JSIContainer_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Re-Init
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_ReMinusInit final
{
public:
	int32                                         Columns;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Rows;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ReMinusInit) == 0x000004, "Wrong alignment on JSIContainer_C_ReMinusInit");
static_assert(sizeof(JSIContainer_C_ReMinusInit) == 0x000008, "Wrong size on JSIContainer_C_ReMinusInit");
static_assert(offsetof(JSIContainer_C_ReMinusInit, Columns) == 0x000000, "Member 'JSIContainer_C_ReMinusInit::Columns' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ReMinusInit, Rows) == 0x000004, "Member 'JSIContainer_C_ReMinusInit::Rows' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RecalculateHighlighretSize
// 0x0098 (0x0098 - 0x0000)
struct JSIContainer_C_RecalculateHighlighretSize final
{
public:
	double                                        SingleSlotSizeX;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SingleSlotSizeY;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Dimention;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceBetweenSlots;                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Size;                                              // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DFloat_ReturnValue;       // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RecalculateHighlighretSize) == 0x000008, "Wrong alignment on JSIContainer_C_RecalculateHighlighretSize");
static_assert(sizeof(JSIContainer_C_RecalculateHighlighretSize) == 0x000098, "Wrong size on JSIContainer_C_RecalculateHighlighretSize");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, SingleSlotSizeX) == 0x000000, "Member 'JSIContainer_C_RecalculateHighlighretSize::SingleSlotSizeX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, SingleSlotSizeY) == 0x000008, "Member 'JSIContainer_C_RecalculateHighlighretSize::SingleSlotSizeY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, Dimention) == 0x000010, "Member 'JSIContainer_C_RecalculateHighlighretSize::Dimention' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, DistanceBetweenSlots) == 0x000020, "Member 'JSIContainer_C_RecalculateHighlighretSize::DistanceBetweenSlots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, Size) == 0x000028, "Member 'JSIContainer_C_RecalculateHighlighretSize::Size' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_BreakVector2D_X) == 0x000038, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_BreakVector2D_Y) == 0x000040, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_Subtract_Vector2DFloat_ReturnValue) == 0x000048, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_Subtract_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000058, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000060, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_MakeVector2D_ReturnValue) == 0x000078, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighretSize, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000088, "Member 'JSIContainer_C_RecalculateHighlighretSize::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RecalculateHighlighterDim
// 0x0080 (0x0080 - 0x0000)
struct JSIContainer_C_RecalculateHighlighterDim final
{
public:
	TArray<class UJSI_Slot_C*>                    Slots;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	struct FVector2D                              Dimention;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column_1;         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row_1;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RecalculateHighlighterDim) == 0x000008, "Wrong alignment on JSIContainer_C_RecalculateHighlighterDim");
static_assert(sizeof(JSIContainer_C_RecalculateHighlighterDim) == 0x000080, "Wrong size on JSIContainer_C_RecalculateHighlighterDim");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, Slots) == 0x000000, "Member 'JSIContainer_C_RecalculateHighlighterDim::Slots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, Dimention) == 0x000010, "Member 'JSIContainer_C_RecalculateHighlighterDim::Dimention' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Subtract_IntInt_ReturnValue) == 0x000030, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_GetColumnRowBySlotIndex_Column) == 0x000040, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_GetColumnRowBySlotIndex_Row) == 0x000044, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_GetColumnRowBySlotIndex_Column_1) == 0x000048, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_GetColumnRowBySlotIndex_Column_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_GetColumnRowBySlotIndex_Row_1) == 0x00004C, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_GetColumnRowBySlotIndex_Row_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000050, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000054, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000060, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000068, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlighterDim, CallFunc_MakeVector2D_ReturnValue) == 0x000070, "Member 'JSIContainer_C_RecalculateHighlighterDim::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RecalculateHighlitherPosition
// 0x00C8 (0x00C8 - 0x0000)
struct JSIContainer_C_RecalculateHighlitherPosition final
{
public:
	TArray<class UJSI_Slot_C*>                    Slots;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
	bool                                          Rotated;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Position;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Column;           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetColumnRowBySlotIndex_Row;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_3;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast_1;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_B_ImplicitCast_1;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RecalculateHighlitherPosition) == 0x000008, "Wrong alignment on JSIContainer_C_RecalculateHighlitherPosition");
static_assert(sizeof(JSIContainer_C_RecalculateHighlitherPosition) == 0x0000C8, "Wrong size on JSIContainer_C_RecalculateHighlitherPosition");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, Slots) == 0x000000, "Member 'JSIContainer_C_RecalculateHighlitherPosition::Slots' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, Rotated) == 0x000010, "Member 'JSIContainer_C_RecalculateHighlitherPosition::Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, Position) == 0x000018, "Member 'JSIContainer_C_RecalculateHighlitherPosition::Position' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Array_Get_Item) == 0x000028, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_GetColumnRowBySlotIndex_Column) == 0x000038, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_GetColumnRowBySlotIndex_Column' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_GetColumnRowBySlotIndex_Row) == 0x00003C, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_GetColumnRowBySlotIndex_Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_FTrunc_ReturnValue) == 0x000040, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Multiply_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_FTrunc_ReturnValue_1) == 0x000054, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x000058, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_BreakVector2D_X) == 0x000060, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_BreakVector2D_Y) == 0x000068, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_FTrunc_ReturnValue_2) == 0x000070, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_FTrunc_ReturnValue_3) == 0x000074, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000078, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Multiply_IntInt_ReturnValue_3) == 0x00007C, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Multiply_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_IntInt_ReturnValue_1) == 0x000084, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000088, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000090, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_MakeVector2D_ReturnValue) == 0x000098, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x0000A8, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_DoubleDouble_A_ImplicitCast_1) == 0x0000B0, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_DoubleDouble_B_ImplicitCast) == 0x0000B8, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_DoubleDouble_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RecalculateHighlitherPosition, CallFunc_Add_DoubleDouble_B_ImplicitCast_1) == 0x0000C0, "Member 'JSIContainer_C_RecalculateHighlitherPosition::CallFunc_Add_DoubleDouble_B_ImplicitCast_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RemoveInventoryItemByRef
// 0x0060 (0x0060 - 0x0000)
struct JSIContainer_C_RemoveInventoryItemByRef final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Removed_;                                          // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RemoveInventoryItemByRef) == 0x000008, "Wrong alignment on JSIContainer_C_RemoveInventoryItemByRef");
static_assert(sizeof(JSIContainer_C_RemoveInventoryItemByRef) == 0x000060, "Wrong size on JSIContainer_C_RemoveInventoryItemByRef");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, SlotRef) == 0x000000, "Member 'JSIContainer_C_RemoveInventoryItemByRef::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Removed) == 0x000008, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Removed_) == 0x000009, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Removed_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_IsValid_ReturnValue) == 0x00000A, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_bool_True_if_break_was_hit_Variable) == 0x000014, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Array_Index_Variable) == 0x000018, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Loop_Counter_Variable_1) == 0x000020, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Add_IntInt_ReturnValue_1) == 0x000024, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_RemoveItem_ReturnValue) == 0x000028, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000038, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Less_IntInt_ReturnValue_1) == 0x000048, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, Temp_int_Array_Index_Variable_1) == 0x00004C, "Member 'JSIContainer_C_RemoveInventoryItemByRef::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveInventoryItemByRef, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'JSIContainer_C_RemoveInventoryItemByRef::CallFunc_Array_Get_Item_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RemoveItemByUniqueID
// 0x0030 (0x0030 - 0x0000)
struct JSIContainer_C_RemoveItemByUniqueID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RemoveInventoryItemByRef_Removed;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetUniqueID_UniqueServerID;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RemoveItemByUniqueID) == 0x000008, "Wrong alignment on JSIContainer_C_RemoveItemByUniqueID");
static_assert(sizeof(JSIContainer_C_RemoveItemByUniqueID) == 0x000030, "Wrong size on JSIContainer_C_RemoveItemByUniqueID");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, ID) == 0x000000, "Member 'JSIContainer_C_RemoveItemByUniqueID::ID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, Sucess) == 0x000004, "Member 'JSIContainer_C_RemoveItemByUniqueID::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, Temp_int_Array_Index_Variable) == 0x000008, "Member 'JSIContainer_C_RemoveItemByUniqueID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'JSIContainer_C_RemoveItemByUniqueID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_RemoveInventoryItemByRef_Removed) == 0x000021, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_RemoveInventoryItemByRef_Removed' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_IsValid_ReturnValue) == 0x000022, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_GetUniqueID_UniqueServerID) == 0x000024, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveItemByUniqueID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_RemoveItemByUniqueID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.RemoveSortHighlightedTypes
// 0x0050 (0x0050 - 0x0000)
struct JSIContainer_C_RemoveSortHighlightedTypes final
{
public:
	TArray<EJSItemType>                           Types;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<int32>                                 RemoveIndexes;                                     // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EJSItemType                                   CallFunc_Array_Get_Item_1;                         // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_RemoveSortHighlightedTypes) == 0x000008, "Wrong alignment on JSIContainer_C_RemoveSortHighlightedTypes");
static_assert(sizeof(JSIContainer_C_RemoveSortHighlightedTypes) == 0x000050, "Wrong size on JSIContainer_C_RemoveSortHighlightedTypes");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Types) == 0x000000, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Types' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, RemoveIndexes) == 0x000010, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::RemoveIndexes' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Array_Index_Variable) == 0x000028, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Get_Item) == 0x000034, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000038, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Less_IntInt_ReturnValue_1) == 0x000049, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_RemoveSortHighlightedTypes, CallFunc_Array_Contains_ReturnValue) == 0x00004A, "Member 'JSIContainer_C_RemoveSortHighlightedTypes::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.ResizeItem
// 0x00F0 (0x00F0 - 0x0000)
struct JSIContainer_C_ResizeItem final
{
public:
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToX;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddToY;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resized_;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ToSlot;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_AddToXY_SlotDimension;                    // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_isRotated__ReturnValue;                   // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResize__Result;                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UJSI_Slot_C*>                    CallFunc_CanResize__HostingSlotsArray;             // 0x0050(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UJSI_Slot_C*>                    CallFunc_CanResize__FreedHostingSlotsArray;        // 0x0060(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculateSize_ReturnValue;                // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ResizeSlot_Size;                          // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_ResizeItem) == 0x000008, "Wrong alignment on JSIContainer_C_ResizeItem");
static_assert(sizeof(JSIContainer_C_ResizeItem) == 0x0000F0, "Wrong size on JSIContainer_C_ResizeItem");
static_assert(offsetof(JSIContainer_C_ResizeItem, SlotRef) == 0x000000, "Member 'JSIContainer_C_ResizeItem::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, AddToX) == 0x000008, "Member 'JSIContainer_C_ResizeItem::AddToX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, AddToY) == 0x00000C, "Member 'JSIContainer_C_ResizeItem::AddToY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Resized_) == 0x000010, "Member 'JSIContainer_C_ResizeItem::Resized_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, ToSlot) == 0x000014, "Member 'JSIContainer_C_ResizeItem::ToSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'JSIContainer_C_ResizeItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_ResizeItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Array_Index_Variable) == 0x000020, "Member 'JSIContainer_C_ResizeItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_AddToXY_SlotDimension) == 0x000028, "Member 'JSIContainer_C_ResizeItem::CallFunc_AddToXY_SlotDimension' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000038, "Member 'JSIContainer_C_ResizeItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Array_Index_Variable_1) == 0x00003C, "Member 'JSIContainer_C_ResizeItem::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, Temp_int_Loop_Counter_Variable_1) == 0x000040, "Member 'JSIContainer_C_ResizeItem::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'JSIContainer_C_ResizeItem::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_isRotated__ReturnValue) == 0x000048, "Member 'JSIContainer_C_ResizeItem::CallFunc_isRotated__ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CanResize__Result) == 0x000049, "Member 'JSIContainer_C_ResizeItem::CallFunc_CanResize__Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CanResize__HostingSlotsArray) == 0x000050, "Member 'JSIContainer_C_ResizeItem::CallFunc_CanResize__HostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CanResize__FreedHostingSlotsArray) == 0x000060, "Member 'JSIContainer_C_ResizeItem::CallFunc_CanResize__FreedHostingSlotsArray' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Get_Item) == 0x000070, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Length_ReturnValue) == 0x000078, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Less_IntInt_ReturnValue) == 0x00007C, "Member 'JSIContainer_C_ResizeItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Get_Item_1) == 0x000080, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'JSIContainer_C_ResizeItem::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x00008C, "Member 'JSIContainer_C_ResizeItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_SelectInt_ReturnValue) == 0x000090, "Member 'JSIContainer_C_ResizeItem::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000098, "Member 'JSIContainer_C_ResizeItem::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_SelectInt_ReturnValue_1) == 0x0000A0, "Member 'JSIContainer_C_ResizeItem::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0000A8, "Member 'JSIContainer_C_ResizeItem::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_MakeVector2D_ReturnValue) == 0x0000B0, "Member 'JSIContainer_C_ResizeItem::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0000C0, "Member 'JSIContainer_C_ResizeItem::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_CalculateSize_ReturnValue) == 0x0000D0, "Member 'JSIContainer_C_ResizeItem::CallFunc_CalculateSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_ResizeItem, CallFunc_ResizeSlot_Size) == 0x0000E0, "Member 'JSIContainer_C_ResizeItem::CallFunc_ResizeSlot_Size' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SelectRotation
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_SelectRotation final
{
public:
	class UJSI_Slot_C*                            ItemRef;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          DroppedRotated_;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rotated;                                           // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SelectRotation) == 0x000008, "Wrong alignment on JSIContainer_C_SelectRotation");
static_assert(sizeof(JSIContainer_C_SelectRotation) == 0x000010, "Wrong size on JSIContainer_C_SelectRotation");
static_assert(offsetof(JSIContainer_C_SelectRotation, ItemRef) == 0x000000, "Member 'JSIContainer_C_SelectRotation::ItemRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, DroppedRotated_) == 0x000008, "Member 'JSIContainer_C_SelectRotation::DroppedRotated_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Rotated) == 0x000009, "Member 'JSIContainer_C_SelectRotation::Rotated' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Temp_bool_Variable) == 0x00000A, "Member 'JSIContainer_C_SelectRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, CallFunc_Not_PreBool_ReturnValue) == 0x00000B, "Member 'JSIContainer_C_SelectRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Temp_bool_Variable_1) == 0x00000C, "Member 'JSIContainer_C_SelectRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, Temp_bool_Variable_2) == 0x00000D, "Member 'JSIContainer_C_SelectRotation::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectRotation, K2Node_Select_Default) == 0x00000E, "Member 'JSIContainer_C_SelectRotation::K2Node_Select_Default' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SelectSlot
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_SelectSlot final
{
public:
	class UJSIContainer_C*                        Container;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Button;                                            // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SelectSlot) == 0x000008, "Wrong alignment on JSIContainer_C_SelectSlot");
static_assert(sizeof(JSIContainer_C_SelectSlot) == 0x000028, "Wrong size on JSIContainer_C_SelectSlot");
static_assert(offsetof(JSIContainer_C_SelectSlot, Container) == 0x000000, "Member 'JSIContainer_C_SelectSlot::Container' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectSlot, SlotRef) == 0x000008, "Member 'JSIContainer_C_SelectSlot::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SelectSlot, Button) == 0x000010, "Member 'JSIContainer_C_SelectSlot::Button' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetBGColorOfDragWidget
// 0x0010 (0x0010 - 0x0000)
struct JSIContainer_C_SetBGColorOfDragWidget final
{
public:
	class UDragDropOperation*                     Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Candrop;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leave;                                             // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetBGColorOfDragWidget) == 0x000008, "Wrong alignment on JSIContainer_C_SetBGColorOfDragWidget");
static_assert(sizeof(JSIContainer_C_SetBGColorOfDragWidget) == 0x000010, "Wrong size on JSIContainer_C_SetBGColorOfDragWidget");
static_assert(offsetof(JSIContainer_C_SetBGColorOfDragWidget, Target) == 0x000000, "Member 'JSIContainer_C_SetBGColorOfDragWidget::Target' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetBGColorOfDragWidget, Candrop) == 0x000008, "Member 'JSIContainer_C_SetBGColorOfDragWidget::Candrop' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetBGColorOfDragWidget, Leave) == 0x000009, "Member 'JSIContainer_C_SetBGColorOfDragWidget::Leave' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetHightlightBrush
// 0x0150 (0x0150 - 0x0000)
struct JSIContainer_C_SetHightlightBrush final
{
public:
	struct FVector2D                              Dim;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Candrop;                                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           BG_Sprite1;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        DefaultContainerSize;                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPaperSprite*                           BG_Sprite;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         Y;                                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X;                                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable;                              // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_1;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable_2;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_3;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable_4;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_5;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable_6;                            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_7;                            // 0x0090(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_8;                            // 0x0098(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_9;                            // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           K2Node_Select_Default;                             // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_Select_Default_1;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_Select_Default_2;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_Select_Default_3;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue_2;                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_3;                      // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0116(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0117(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x011B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_9;          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_10;         // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_11;         // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0125(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_126[0x2];                                      // 0x0126(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           Temp_object_Variable_10;                           // 0x0128(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           K2Node_Select_Default_4;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UPaperSprite*                           Temp_object_Variable_11;                           // 0x0138(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           K2Node_Select_Default_5;                           // 0x0148(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetHightlightBrush) == 0x000008, "Wrong alignment on JSIContainer_C_SetHightlightBrush");
static_assert(sizeof(JSIContainer_C_SetHightlightBrush) == 0x000150, "Wrong size on JSIContainer_C_SetHightlightBrush");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Dim) == 0x000000, "Member 'JSIContainer_C_SetHightlightBrush::Dim' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Candrop) == 0x000010, "Member 'JSIContainer_C_SetHightlightBrush::Candrop' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, BG_Sprite1) == 0x000018, "Member 'JSIContainer_C_SetHightlightBrush::BG_Sprite1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, DefaultContainerSize) == 0x000020, "Member 'JSIContainer_C_SetHightlightBrush::DefaultContainerSize' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, BG_Sprite) == 0x000028, "Member 'JSIContainer_C_SetHightlightBrush::BG_Sprite' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Y) == 0x000030, "Member 'JSIContainer_C_SetHightlightBrush::Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, X) == 0x000034, "Member 'JSIContainer_C_SetHightlightBrush::X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_bool_Variable) == 0x000038, "Member 'JSIContainer_C_SetHightlightBrush::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable) == 0x000040, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_1) == 0x000048, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_bool_Variable_1) == 0x000050, "Member 'JSIContainer_C_SetHightlightBrush::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_2) == 0x000058, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_3) == 0x000060, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_bool_Variable_2) == 0x000068, "Member 'JSIContainer_C_SetHightlightBrush::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_4) == 0x000070, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_5) == 0x000078, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_bool_Variable_3) == 0x000080, "Member 'JSIContainer_C_SetHightlightBrush::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_6) == 0x000088, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_7) == 0x000090, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_8) == 0x000098, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_9) == 0x0000A0, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BreakVector2D_X) == 0x0000A8, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BreakVector2D_Y) == 0x0000B0, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000C0, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_Round_ReturnValue) == 0x0000C4, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_Round_ReturnValue_1) == 0x0000D0, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, K2Node_Select_Default) == 0x0000D8, "Member 'JSIContainer_C_SetHightlightBrush::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, K2Node_Select_Default_1) == 0x0000E0, "Member 'JSIContainer_C_SetHightlightBrush::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, K2Node_Select_Default_2) == 0x0000E8, "Member 'JSIContainer_C_SetHightlightBrush::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, K2Node_Select_Default_3) == 0x0000F0, "Member 'JSIContainer_C_SetHightlightBrush::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BreakVector2D_X_1) == 0x0000F8, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BreakVector2D_Y_1) == 0x000100, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000108, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_Round_ReturnValue_2) == 0x00010C, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_Round_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_Round_ReturnValue_3) == 0x000110, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_Round_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000114, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000115, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BooleanAND_ReturnValue) == 0x000116, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000117, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BooleanAND_ReturnValue_1) == 0x000118, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000119, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x00011A, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x00011B, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BooleanAND_ReturnValue_2) == 0x00011C, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x00011D, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BooleanAND_ReturnValue_3) == 0x00011E, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x00011F, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_9) == 0x000120, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_10) == 0x000121, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BooleanAND_ReturnValue_4) == 0x000122, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_EqualEqual_IntInt_ReturnValue_11) == 0x000123, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_EqualEqual_IntInt_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, CallFunc_BooleanAND_ReturnValue_5) == 0x000124, "Member 'JSIContainer_C_SetHightlightBrush::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_bool_Variable_4) == 0x000125, "Member 'JSIContainer_C_SetHightlightBrush::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_10) == 0x000128, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, K2Node_Select_Default_4) == 0x000130, "Member 'JSIContainer_C_SetHightlightBrush::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_object_Variable_11) == 0x000138, "Member 'JSIContainer_C_SetHightlightBrush::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, Temp_bool_Variable_5) == 0x000140, "Member 'JSIContainer_C_SetHightlightBrush::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SetHightlightBrush, K2Node_Select_Default_5) == 0x000148, "Member 'JSIContainer_C_SetHightlightBrush::K2Node_Select_Default_5' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SetNavigationWidget_Left
// 0x0008 (0x0008 - 0x0000)
struct JSIContainer_C_SetNavigationWidget_Left final
{
public:
	class UWidget*                                NavigationWidget;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SetNavigationWidget_Left) == 0x000008, "Wrong alignment on JSIContainer_C_SetNavigationWidget_Left");
static_assert(sizeof(JSIContainer_C_SetNavigationWidget_Left) == 0x000008, "Wrong size on JSIContainer_C_SetNavigationWidget_Left");
static_assert(offsetof(JSIContainer_C_SetNavigationWidget_Left, NavigationWidget) == 0x000000, "Member 'JSIContainer_C_SetNavigationWidget_Left::NavigationWidget' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.SomeFunctionBool
// 0x0002 (0x0002 - 0x0000)
struct JSIContainer_C_SomeFunctionBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_SomeFunctionBool) == 0x000001, "Wrong alignment on JSIContainer_C_SomeFunctionBool");
static_assert(sizeof(JSIContainer_C_SomeFunctionBool) == 0x000002, "Wrong size on JSIContainer_C_SomeFunctionBool");
static_assert(offsetof(JSIContainer_C_SomeFunctionBool, ReturnValue) == 0x000000, "Member 'JSIContainer_C_SomeFunctionBool::ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_SomeFunctionBool, CallFunc_RandomBool_ReturnValue) == 0x000001, "Member 'JSIContainer_C_SomeFunctionBool::CallFunc_RandomBool_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.TakeAllItems
// 0x0088 (0x0088 - 0x0000)
struct JSIContainer_C_TakeAllItems final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentArrayLenght;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CurrentSlot;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item_2;                         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_TakeAllItems) == 0x000008, "Wrong alignment on JSIContainer_C_TakeAllItems");
static_assert(sizeof(JSIContainer_C_TakeAllItems) == 0x000088, "Wrong size on JSIContainer_C_TakeAllItems");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CurrentIndex) == 0x000000, "Member 'JSIContainer_C_TakeAllItems::CurrentIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CurrentArrayLenght) == 0x000004, "Member 'JSIContainer_C_TakeAllItems::CurrentArrayLenght' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CurrentSlot) == 0x000008, "Member 'JSIContainer_C_TakeAllItems::CurrentSlot' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'JSIContainer_C_TakeAllItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, Temp_int_Loop_Counter_Variable_1) == 0x000014, "Member 'JSIContainer_C_TakeAllItems::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, Temp_int_Array_Index_Variable) == 0x000020, "Member 'JSIContainer_C_TakeAllItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'JSIContainer_C_TakeAllItems::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, Temp_int_Variable) == 0x000028, "Member 'JSIContainer_C_TakeAllItems::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Get_Item) == 0x000030, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Length_ReturnValue_1) == 0x000044, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Less_IntInt_ReturnValue_1) == 0x000049, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Length_ReturnValue_2) == 0x00004C, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000050, "Member 'JSIContainer_C_TakeAllItems::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Add_IntInt_ReturnValue_2) == 0x000054, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Length_ReturnValue_3) == 0x000058, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00005C, "Member 'JSIContainer_C_TakeAllItems::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Get_Item_2) == 0x000060, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000068, "Member 'JSIContainer_C_TakeAllItems::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, K2Node_DynamicCast_AsSurvival_Player) == 0x000070, "Member 'JSIContainer_C_TakeAllItems::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'JSIContainer_C_TakeAllItems::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_Array_Length_ReturnValue_4) == 0x00007C, "Member 'JSIContainer_C_TakeAllItems::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_TakeAllItems, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000080, "Member 'JSIContainer_C_TakeAllItems::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.Tick
// 0x003C (0x003C - 0x0000)
struct JSIContainer_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_Tick) == 0x000004, "Wrong alignment on JSIContainer_C_Tick");
static_assert(sizeof(JSIContainer_C_Tick) == 0x00003C, "Wrong size on JSIContainer_C_Tick");
static_assert(offsetof(JSIContainer_C_Tick, MyGeometry) == 0x000000, "Member 'JSIContainer_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_Tick, InDeltaTime) == 0x000038, "Member 'JSIContainer_C_Tick::InDeltaTime' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.UnequipItem
// 0x0028 (0x0028 - 0x0000)
struct JSIContainer_C_UnequipItem final
{
public:
	bool                                          TriggerUnequippedEvent_;                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Unequipped;                                        // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            SlotRef;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            SlotR;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEquipped__ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_UnequipItem) == 0x000008, "Wrong alignment on JSIContainer_C_UnequipItem");
static_assert(sizeof(JSIContainer_C_UnequipItem) == 0x000028, "Wrong size on JSIContainer_C_UnequipItem");
static_assert(offsetof(JSIContainer_C_UnequipItem, TriggerUnequippedEvent_) == 0x000000, "Member 'JSIContainer_C_UnequipItem::TriggerUnequippedEvent_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, Unequipped) == 0x000001, "Member 'JSIContainer_C_UnequipItem::Unequipped' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, SlotRef) == 0x000008, "Member 'JSIContainer_C_UnequipItem::SlotRef' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, SlotR) == 0x000010, "Member 'JSIContainer_C_UnequipItem::SlotR' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, CallFunc_Array_Get_Item) == 0x000018, "Member 'JSIContainer_C_UnequipItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UnequipItem, CallFunc_IsEquipped__ReturnValue) == 0x000020, "Member 'JSIContainer_C_UnequipItem::CallFunc_IsEquipped__ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.UpdateCountByUniqueID
// 0x0038 (0x0038 - 0x0000)
struct JSIContainer_C_UpdateCountByUniqueID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewCount;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sucess;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJSI_Slot_C*                            CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_UpdateCount_Count;                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUniqueID_UniqueServerID;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_UpdateCountByUniqueID) == 0x000008, "Wrong alignment on JSIContainer_C_UpdateCountByUniqueID");
static_assert(sizeof(JSIContainer_C_UpdateCountByUniqueID) == 0x000038, "Wrong size on JSIContainer_C_UpdateCountByUniqueID");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, ID) == 0x000000, "Member 'JSIContainer_C_UpdateCountByUniqueID::ID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, NewCount) == 0x000004, "Member 'JSIContainer_C_UpdateCountByUniqueID::NewCount' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, Sucess) == 0x000008, "Member 'JSIContainer_C_UpdateCountByUniqueID::Sucess' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'JSIContainer_C_UpdateCountByUniqueID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'JSIContainer_C_UpdateCountByUniqueID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Array_Get_Item) == 0x000020, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_UpdateCount_Count) == 0x00002C, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_UpdateCount_Count' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_GetUniqueID_UniqueServerID) == 0x000030, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_GetUniqueID_UniqueServerID' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateCountByUniqueID, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000034, "Member 'JSIContainer_C_UpdateCountByUniqueID::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.UpdateTitle
// 0x0006 (0x0006 - 0x0000)
struct JSIContainer_C_UpdateTitle final
{
public:
	EContainerType                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_UpdateTitle) == 0x000001, "Wrong alignment on JSIContainer_C_UpdateTitle");
static_assert(sizeof(JSIContainer_C_UpdateTitle) == 0x000006, "Wrong size on JSIContainer_C_UpdateTitle");
static_assert(offsetof(JSIContainer_C_UpdateTitle, Temp_byte_Variable) == 0x000000, "Member 'JSIContainer_C_UpdateTitle::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateTitle, Temp_byte_Variable_1) == 0x000001, "Member 'JSIContainer_C_UpdateTitle::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateTitle, Temp_byte_Variable_2) == 0x000002, "Member 'JSIContainer_C_UpdateTitle::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateTitle, Temp_byte_Variable_3) == 0x000003, "Member 'JSIContainer_C_UpdateTitle::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateTitle, Temp_byte_Variable_4) == 0x000004, "Member 'JSIContainer_C_UpdateTitle::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_UpdateTitle, K2Node_Select_Default) == 0x000005, "Member 'JSIContainer_C_UpdateTitle::K2Node_Select_Default' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetDropOffset
// 0x002C (0x002C - 0x0000)
struct JSIContainer_C_GetDropOffset final
{
public:
	int32                                         SizeX;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SizeY;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PivotIndex;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         X_Offset;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Y_Offset;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotArea;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x001F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_3;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_4;          // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_5;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_6;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_7;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_8;          // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_9;          // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_10;         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_11;         // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetDropOffset) == 0x000004, "Wrong alignment on JSIContainer_C_GetDropOffset");
static_assert(sizeof(JSIContainer_C_GetDropOffset) == 0x00002C, "Wrong size on JSIContainer_C_GetDropOffset");
static_assert(offsetof(JSIContainer_C_GetDropOffset, SizeX) == 0x000000, "Member 'JSIContainer_C_GetDropOffset::SizeX' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, SizeY) == 0x000004, "Member 'JSIContainer_C_GetDropOffset::SizeY' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, PivotIndex) == 0x000008, "Member 'JSIContainer_C_GetDropOffset::PivotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, X_Offset) == 0x00000C, "Member 'JSIContainer_C_GetDropOffset::X_Offset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, Y_Offset) == 0x000010, "Member 'JSIContainer_C_GetDropOffset::Y_Offset' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, SlotArea) == 0x000014, "Member 'JSIContainer_C_GetDropOffset::SlotArea' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_Multiply_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetDropOffset::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_Greater_IntInt_ReturnValue) == 0x00001D, "Member 'JSIContainer_C_GetDropOffset::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00001E, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00001F, "Member 'JSIContainer_C_GetDropOffset::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000020, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_3) == 0x000021, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_4) == 0x000022, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_5) == 0x000023, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_6) == 0x000024, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_7) == 0x000025, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_8) == 0x000026, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_9) == 0x000027, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_10) == 0x000028, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetDropOffset, CallFunc_EqualEqual_IntInt_ReturnValue_11) == 0x000029, "Member 'JSIContainer_C_GetDropOffset::CallFunc_EqualEqual_IntInt_ReturnValue_11' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetIndexBySlotLocation
// 0x0030 (0x0030 - 0x0000)
struct JSIContainer_C_GetIndexBySlotLocation final
{
public:
	int32                                         Row;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Col;                                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RowIndex;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetIndexBySlotLocation) == 0x000004, "Wrong alignment on JSIContainer_C_GetIndexBySlotLocation");
static_assert(sizeof(JSIContainer_C_GetIndexBySlotLocation) == 0x000030, "Wrong size on JSIContainer_C_GetIndexBySlotLocation");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, Row) == 0x000000, "Member 'JSIContainer_C_GetIndexBySlotLocation::Row' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, Col) == 0x000004, "Member 'JSIContainer_C_GetIndexBySlotLocation::Col' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, SlotIndex) == 0x000008, "Member 'JSIContainer_C_GetIndexBySlotLocation::SlotIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, Result) == 0x00000C, "Member 'JSIContainer_C_GetIndexBySlotLocation::Result' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, RowIndex) == 0x000010, "Member 'JSIContainer_C_GetIndexBySlotLocation::RowIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, ColumnIndex) == 0x000014, "Member 'JSIContainer_C_GetIndexBySlotLocation::ColumnIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000020, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_Multiply_IntInt_ReturnValue) == 0x000024, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000028, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetIndexBySlotLocation, CallFunc_Add_IntInt_ReturnValue_1) == 0x00002C, "Member 'JSIContainer_C_GetIndexBySlotLocation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function JSIContainer.JSIContainer_C.GetSlotLocationByIndex
// 0x0020 (0x0020 - 0x0000)
struct JSIContainer_C_GetSlotLocationByIndex final
{
public:
	int32                                         SlotIndex_Loc;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex_;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RowIndex_;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RowIndex;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ColumnIndex;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SlotIndex_Loc_0;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(JSIContainer_C_GetSlotLocationByIndex) == 0x000004, "Wrong alignment on JSIContainer_C_GetSlotLocationByIndex");
static_assert(sizeof(JSIContainer_C_GetSlotLocationByIndex) == 0x000020, "Wrong size on JSIContainer_C_GetSlotLocationByIndex");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, SlotIndex_Loc) == 0x000000, "Member 'JSIContainer_C_GetSlotLocationByIndex::SlotIndex_Loc' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, ColumnIndex_) == 0x000004, "Member 'JSIContainer_C_GetSlotLocationByIndex::ColumnIndex_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, RowIndex_) == 0x000008, "Member 'JSIContainer_C_GetSlotLocationByIndex::RowIndex_' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, RowIndex) == 0x00000C, "Member 'JSIContainer_C_GetSlotLocationByIndex::RowIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, ColumnIndex) == 0x000010, "Member 'JSIContainer_C_GetSlotLocationByIndex::ColumnIndex' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, SlotIndex_Loc_0) == 0x000014, "Member 'JSIContainer_C_GetSlotLocationByIndex::SlotIndex_Loc_0' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, CallFunc_Divide_IntInt_ReturnValue) == 0x000018, "Member 'JSIContainer_C_GetSlotLocationByIndex::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(JSIContainer_C_GetSlotLocationByIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x00001C, "Member 'JSIContainer_C_GetSlotLocationByIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

}

