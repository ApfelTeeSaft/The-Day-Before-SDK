#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIMovementComponent

#include "Basic.hpp"

#include "E_AIMovementType_structs.hpp"
#include "Survival_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "F_RotationCurvesMap_structs.hpp"
#include "Engine_structs.hpp"
#include "F_MovementSettings_structs.hpp"


namespace SDK::Params
{

// Function AIMovementComponent.AIMovementComponent_C.ActivateComponent
// 0x0070 (0x0070 - 0x0000)
struct AIMovementComponent_C_ActivateComponent final
{
public:
	bool                                          TickEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* TargetActor)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AZombie_C*                              K2Node_DynamicCast_AsZombie;                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_ActivateComponent) == 0x000008, "Wrong alignment on AIMovementComponent_C_ActivateComponent");
static_assert(sizeof(AIMovementComponent_C_ActivateComponent) == 0x000070, "Wrong size on AIMovementComponent_C_ActivateComponent");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, TickEnabled) == 0x000000, "Member 'AIMovementComponent_C_ActivateComponent::TickEnabled' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_IsValid_ReturnValue_2) == 0x000003, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_MakeArray_Array) == 0x000008, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_DynamicCast_AsZombie) == 0x000038, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_DynamicCast_AsZombie' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_IsValid_ReturnValue_3) == 0x000041, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_GetComponentByClass_ReturnValue) == 0x000048, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_GetOwner_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_DynamicCast_AsCharacter) == 0x000058, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'AIMovementComponent_C_ActivateComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ActivateComponent, CallFunc_GetAnimInstance_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_ActivateComponent::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.AddCarAvoidingPoint
// 0x01B0 (0x01B0 - 0x0000)
struct AIMovementComponent_C_AddCarAvoidingPoint final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm)
	double                                        ReflectionAvoidDistance;                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RotateAvoidDistance;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointFromReflection;                               // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ChooseFront;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CarBackCenter;                                     // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PointFromRotate;                                   // 0x0068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ForwardVectorRotated;                              // 0x0080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CalcStartLocation;                                 // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleBetweenTwoVectors_Angle;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0180(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0198(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_AddCarAvoidingPoint) == 0x000008, "Wrong alignment on AIMovementComponent_C_AddCarAvoidingPoint");
static_assert(sizeof(AIMovementComponent_C_AddCarAvoidingPoint) == 0x0001B0, "Wrong size on AIMovementComponent_C_AddCarAvoidingPoint");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, InPoints) == 0x000000, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::InPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, OutPoints) == 0x000010, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::OutPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, ReflectionAvoidDistance) == 0x000020, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::ReflectionAvoidDistance' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, RotateAvoidDistance) == 0x000028, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::RotateAvoidDistance' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, PointFromReflection) == 0x000030, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::PointFromReflection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, ChooseFront) == 0x000048, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::ChooseFront' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CarBackCenter) == 0x000050, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CarBackCenter' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, PointFromRotate) == 0x000068, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::PointFromRotate' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, ForwardVectorRotated) == 0x000080, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::ForwardVectorRotated' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CalcStartLocation) == 0x000098, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CalcStartLocation' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0000B0, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000C8, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000E0, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x0000F8, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_GetAngleBetweenTwoVectors_Angle) == 0x000110, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_GetAngleBetweenTwoVectors_Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000118, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000130, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000138, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000150, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Add_VectorVector_ReturnValue) == 0x000168, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000180, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddCarAvoidingPoint, CallFunc_SelectVector_ReturnValue) == 0x000198, "Member 'AIMovementComponent_C_AddCarAvoidingPoint::CallFunc_SelectVector_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.AddRandomPointNearTarget
// 0x01B0 (0x01B0 - 0x0000)
struct AIMovementComponent_C_AddRandomPointNearTarget final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        OutPoints;                                         // 0x0010(0x0010)(Parm, OutParm)
	struct FVector                                RaycastEnd;                                        // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaycastStart;                                      // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewLastPoint;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LastIndex;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Adjustment;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastPoint;                                         // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue;                   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_RandomBool_ReturnValue_1;                 // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorRightVector_ReturnValue;          // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_2;        // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SelectVector_ReturnValue;                 // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_2;      // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_Adjustment_ImplicitCast;        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_AddRandomPointNearTarget) == 0x000008, "Wrong alignment on AIMovementComponent_C_AddRandomPointNearTarget");
static_assert(sizeof(AIMovementComponent_C_AddRandomPointNearTarget) == 0x0001B0, "Wrong size on AIMovementComponent_C_AddRandomPointNearTarget");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, InPoints) == 0x000000, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::InPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, OutPoints) == 0x000010, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::OutPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, RaycastEnd) == 0x000020, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::RaycastEnd' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, RaycastStart) == 0x000038, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::RaycastStart' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, NewLastPoint) == 0x000050, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::NewLastPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, LastIndex) == 0x000068, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::LastIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, Adjustment) == 0x00006C, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::Adjustment' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, LastPoint) == 0x000070, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::LastPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_MapRangeClamped_ReturnValue) == 0x000088, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_GetActorForwardVector_ReturnValue) == 0x000098, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_RandomBool_ReturnValue) == 0x0000B0, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_RandomBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_RandomBool_ReturnValue_1) == 0x0000B1, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_RandomBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_SelectFloat_ReturnValue) == 0x0000B8, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_GetActorRightVector_ReturnValue) == 0x0000C0, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_GetActorRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x0000D8, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000F0, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Array_Add_ReturnValue) == 0x000108, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Array_LastIndex_ReturnValue) == 0x00010C, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x000110, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Conv_DoubleToVector_ReturnValue_2) == 0x000128, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Conv_DoubleToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x000140, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_SelectVector_ReturnValue) == 0x000158, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_SelectVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Multiply_VectorVector_ReturnValue_2) == 0x000170, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Multiply_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x000188, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, K2Node_VariableSet_Adjustment_ImplicitCast) == 0x0001A0, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::K2Node_VariableSet_Adjustment_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AddRandomPointNearTarget, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x0001A8, "Member 'AIMovementComponent_C_AddRandomPointNearTarget::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.AnalyzePath
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_AnalyzePath final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCPPIsStopping_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TimeToChangePointIndex_Change;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_AnalyzePath) == 0x000004, "Wrong alignment on AIMovementComponent_C_AnalyzePath");
static_assert(sizeof(AIMovementComponent_C_AnalyzePath) == 0x000008, "Wrong size on AIMovementComponent_C_AnalyzePath");
static_assert(offsetof(AIMovementComponent_C_AnalyzePath, CurrentIndex) == 0x000000, "Member 'AIMovementComponent_C_AnalyzePath::CurrentIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AnalyzePath, CallFunc_GetCPPIsStopping_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_AnalyzePath::CallFunc_GetCPPIsStopping_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_AnalyzePath, CallFunc_TimeToChangePointIndex_Change) == 0x000005, "Member 'AIMovementComponent_C_AnalyzePath::CallFunc_TimeToChangePointIndex_Change' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.BlockZombie
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_BlockZombie final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_BlockZombie) == 0x000008, "Wrong alignment on AIMovementComponent_C_BlockZombie");
static_assert(sizeof(AIMovementComponent_C_BlockZombie) == 0x000010, "Wrong size on AIMovementComponent_C_BlockZombie");
static_assert(offsetof(AIMovementComponent_C_BlockZombie, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_BlockZombie::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_BlockZombie, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_BlockZombie::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.BlockZombieByWaterTarget
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_BlockZombieByWaterTarget final
{
public:
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_BlockZombieByWaterTarget) == 0x000008, "Wrong alignment on AIMovementComponent_C_BlockZombieByWaterTarget");
static_assert(sizeof(AIMovementComponent_C_BlockZombieByWaterTarget) == 0x000010, "Wrong size on AIMovementComponent_C_BlockZombieByWaterTarget");
static_assert(offsetof(AIMovementComponent_C_BlockZombieByWaterTarget, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_BlockZombieByWaterTarget::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_BlockZombieByWaterTarget, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_BlockZombieByWaterTarget::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Calculate Desired Direction
// 0x00A8 (0x00A8 - 0x0000)
struct AIMovementComponent_C_Calculate_Desired_Direction final
{
public:
	struct FVector                                DesiredDirection;                                  // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ResultDirection;                                   // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetDesiredVector_DesiredVector;           // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Calculate_Desired_Direction) == 0x000008, "Wrong alignment on AIMovementComponent_C_Calculate_Desired_Direction");
static_assert(sizeof(AIMovementComponent_C_Calculate_Desired_Direction) == 0x0000A8, "Wrong size on AIMovementComponent_C_Calculate_Desired_Direction");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, DesiredDirection) == 0x000000, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::DesiredDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, ResultDirection) == 0x000018, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::ResultDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_GetDesiredVector_DesiredVector) == 0x000030, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_GetDesiredVector_DesiredVector' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_FindLookAtRotation_ReturnValue) == 0x000048, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_GetForwardVector_ReturnValue) == 0x000060, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_BreakVector_X) == 0x000078, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_BreakVector_Y) == 0x000080, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_BreakVector_Z) == 0x000088, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Calculate_Desired_Direction, CallFunc_MakeVector_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_Calculate_Desired_Direction::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateCurrentPathPointLocation
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_CalculateCurrentPathPointLocation final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIndexInRange_InRange;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateCurrentPathPointLocation) == 0x000004, "Wrong alignment on AIMovementComponent_C_CalculateCurrentPathPointLocation");
static_assert(sizeof(AIMovementComponent_C_CalculateCurrentPathPointLocation) == 0x000008, "Wrong size on AIMovementComponent_C_CalculateCurrentPathPointLocation");
static_assert(offsetof(AIMovementComponent_C_CalculateCurrentPathPointLocation, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateCurrentPathPointLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateCurrentPathPointLocation, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_CalculateCurrentPathPointLocation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateCurrentPathPointLocation, CallFunc_IsIndexInRange_InRange) == 0x000005, "Member 'AIMovementComponent_C_CalculateCurrentPathPointLocation::CallFunc_IsIndexInRange_InRange' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateDirectionInterpolationSpeed
// 0x0020 (0x0020 - 0x0000)
struct AIMovementComponent_C_CalculateDirectionInterpolationSpeed final
{
public:
	double                                        InterpolationSpeed;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCloseToTarget_IsClose;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateDirectionInterpolationSpeed");
static_assert(sizeof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed) == 0x000020, "Wrong size on AIMovementComponent_C_CalculateDirectionInterpolationSpeed");
static_assert(offsetof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed, InterpolationSpeed) == 0x000000, "Member 'AIMovementComponent_C_CalculateDirectionInterpolationSpeed::InterpolationSpeed' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_CalculateDirectionInterpolationSpeed::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed, CallFunc_IsCloseToTarget_IsClose) == 0x00000C, "Member 'AIMovementComponent_C_CalculateDirectionInterpolationSpeed::CallFunc_IsCloseToTarget_IsClose' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_CalculateDirectionInterpolationSpeed::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateDirectionInterpolationSpeed, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x000018, "Member 'AIMovementComponent_C_CalculateDirectionInterpolationSpeed::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateDistanceToCurrentPoint
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_CalculateDistanceToCurrentPoint final
{
public:
	double                                        CallFunc_Vector_Distance2D_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateDistanceToCurrentPoint) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateDistanceToCurrentPoint");
static_assert(sizeof(AIMovementComponent_C_CalculateDistanceToCurrentPoint) == 0x000008, "Wrong size on AIMovementComponent_C_CalculateDistanceToCurrentPoint");
static_assert(offsetof(AIMovementComponent_C_CalculateDistanceToCurrentPoint, CallFunc_Vector_Distance2D_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateDistanceToCurrentPoint::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateDistanceToTarget
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_CalculateDistanceToTarget final
{
public:
	double                                        CallFunc_Vector_Distance2D_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateDistanceToTarget) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateDistanceToTarget");
static_assert(sizeof(AIMovementComponent_C_CalculateDistanceToTarget) == 0x000008, "Wrong size on AIMovementComponent_C_CalculateDistanceToTarget");
static_assert(offsetof(AIMovementComponent_C_CalculateDistanceToTarget, CallFunc_Vector_Distance2D_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateDistanceToTarget::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateNextPathPointLocation
// 0x0014 (0x0014 - 0x0000)
struct AIMovementComponent_C_CalculateNextPathPointLocation final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIndexInRange_InRange;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateNextPathPointLocation) == 0x000004, "Wrong alignment on AIMovementComponent_C_CalculateNextPathPointLocation");
static_assert(sizeof(AIMovementComponent_C_CalculateNextPathPointLocation) == 0x000014, "Wrong size on AIMovementComponent_C_CalculateNextPathPointLocation");
static_assert(offsetof(AIMovementComponent_C_CalculateNextPathPointLocation, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateNextPathPointLocation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateNextPathPointLocation, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_CalculateNextPathPointLocation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateNextPathPointLocation, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_CalculateNextPathPointLocation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateNextPathPointLocation, CallFunc_IsIndexInRange_InRange) == 0x00000C, "Member 'AIMovementComponent_C_CalculateNextPathPointLocation::CallFunc_IsIndexInRange_InRange' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateNextPathPointLocation, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'AIMovementComponent_C_CalculateNextPathPointLocation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateOwnerDirection
// 0x0060 (0x0060 - 0x0000)
struct AIMovementComponent_C_CalculateOwnerDirection final
{
public:
	struct FVector                                OwnerDirection;                                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateOwnerDirection) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateOwnerDirection");
static_assert(sizeof(AIMovementComponent_C_CalculateOwnerDirection) == 0x000060, "Wrong size on AIMovementComponent_C_CalculateOwnerDirection");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerDirection, OwnerDirection) == 0x000000, "Member 'AIMovementComponent_C_CalculateOwnerDirection::OwnerDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerDirection, CallFunc_GetActorForwardVector_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_CalculateOwnerDirection::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerDirection, CallFunc_BreakVector_X) == 0x000030, "Member 'AIMovementComponent_C_CalculateOwnerDirection::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerDirection, CallFunc_BreakVector_Y) == 0x000038, "Member 'AIMovementComponent_C_CalculateOwnerDirection::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerDirection, CallFunc_BreakVector_Z) == 0x000040, "Member 'AIMovementComponent_C_CalculateOwnerDirection::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerDirection, CallFunc_MakeVector_ReturnValue) == 0x000048, "Member 'AIMovementComponent_C_CalculateOwnerDirection::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateOwnerLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_CalculateOwnerLocation final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateOwnerLocation) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateOwnerLocation");
static_assert(sizeof(AIMovementComponent_C_CalculateOwnerLocation) == 0x000018, "Wrong size on AIMovementComponent_C_CalculateOwnerLocation");
static_assert(offsetof(AIMovementComponent_C_CalculateOwnerLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateOwnerLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateResultVelocity
// 0x00A0 (0x00A0 - 0x0000)
struct AIMovementComponent_C_CalculateResultVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateResultVelocity) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateResultVelocity");
static_assert(sizeof(AIMovementComponent_C_CalculateResultVelocity) == 0x0000A0, "Wrong size on AIMovementComponent_C_CalculateResultVelocity");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, Velocity) == 0x000000, "Member 'AIMovementComponent_C_CalculateResultVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_BreakVector_X) == 0x000038, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_BreakVector_Y) == 0x000040, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_BreakVector_Z) == 0x000048, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_BreakVector_X_1) == 0x000068, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_BreakVector_Y_1) == 0x000070, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_BreakVector_Z_1) == 0x000078, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_MakeVector_ReturnValue) == 0x000080, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateResultVelocity, CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast) == 0x000098, "Member 'AIMovementComponent_C_CalculateResultVelocity::CallFunc_Conv_DoubleToVector_InDouble_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateTargetLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_CalculateTargetLocation final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateTargetLocation) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateTargetLocation");
static_assert(sizeof(AIMovementComponent_C_CalculateTargetLocation) == 0x000018, "Wrong size on AIMovementComponent_C_CalculateTargetLocation");
static_assert(offsetof(AIMovementComponent_C_CalculateTargetLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateTargetLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateTargetLocationDifference
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_CalculateTargetLocationDifference final
{
public:
	double                                        CallFunc_Vector_Distance2D_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateTargetLocationDifference) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateTargetLocationDifference");
static_assert(sizeof(AIMovementComponent_C_CalculateTargetLocationDifference) == 0x000010, "Wrong size on AIMovementComponent_C_CalculateTargetLocationDifference");
static_assert(offsetof(AIMovementComponent_C_CalculateTargetLocationDifference, CallFunc_Vector_Distance2D_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CalculateTargetLocationDifference::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateTargetLocationDifference, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_CalculateTargetLocationDifference::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateVelocity
// 0x0098 (0x0098 - 0x0000)
struct AIMovementComponent_C_CalculateVelocity final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateVelocityValue_VelocityValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalculateResultVelocity_Velocity;         // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateVelocityDirection_Direction;     // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateDirectionInterpolationSpeed_InterpolationSpeed; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetCPPVelocityValue_NewValue_ImplicitCast; // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateVelocity) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateVelocity");
static_assert(sizeof(AIMovementComponent_C_CalculateVelocity) == 0x000098, "Wrong size on AIMovementComponent_C_CalculateVelocity");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, DeltaSeconds) == 0x000000, "Member 'AIMovementComponent_C_CalculateVelocity::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_CalculateVelocityValue_VelocityValue) == 0x000008, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_CalculateVelocityValue_VelocityValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Array_LastIndex_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Array_Get_Item) == 0x000020, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Vector_Distance_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000040, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000044, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_Not_PreBool_ReturnValue) == 0x000045, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_BooleanAND_ReturnValue) == 0x000046, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_CalculateResultVelocity_Velocity) == 0x000048, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_CalculateResultVelocity_Velocity' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_BooleanOR_ReturnValue) == 0x000060, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_SelectFloat_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_CalculateVelocityDirection_Direction) == 0x000070, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_CalculateVelocityDirection_Direction' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_CalculateDirectionInterpolationSpeed_InterpolationSpeed) == 0x000088, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_CalculateDirectionInterpolationSpeed_InterpolationSpeed' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocity, CallFunc_SetCPPVelocityValue_NewValue_ImplicitCast) == 0x000090, "Member 'AIMovementComponent_C_CalculateVelocity::CallFunc_SetCPPVelocityValue_NewValue_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateVelocityDirection
// 0x00D0 (0x00D0 - 0x0000)
struct AIMovementComponent_C_CalculateVelocityDirection final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ResultDirection;                                   // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DesiredDirection;                                  // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OwnerDirection;                                    // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCPPVelocityFromAnimation_ReturnValue;  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Calculate_Desired_Direction_DesiredDirection; // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalculateOwnerDirection_OwnerDirection;   // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_DeltaTime_ImplicitCast;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VInterpTo_InterpSpeed_ImplicitCast;       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateVelocityDirection) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateVelocityDirection");
static_assert(sizeof(AIMovementComponent_C_CalculateVelocityDirection) == 0x0000D0, "Wrong size on AIMovementComponent_C_CalculateVelocityDirection");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, DeltaSeconds) == 0x000000, "Member 'AIMovementComponent_C_CalculateVelocityDirection::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, Direction) == 0x000008, "Member 'AIMovementComponent_C_CalculateVelocityDirection::Direction' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, ResultDirection) == 0x000020, "Member 'AIMovementComponent_C_CalculateVelocityDirection::ResultDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, DesiredDirection) == 0x000038, "Member 'AIMovementComponent_C_CalculateVelocityDirection::DesiredDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, OwnerDirection) == 0x000050, "Member 'AIMovementComponent_C_CalculateVelocityDirection::OwnerDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x00006C, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_GetCPPVelocityFromAnimation_ReturnValue) == 0x000070, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_GetCPPVelocityFromAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000071, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_Calculate_Desired_Direction_DesiredDirection) == 0x000078, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_Calculate_Desired_Direction_DesiredDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_VInterpTo_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_CalculateOwnerDirection_OwnerDirection) == 0x0000A8, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_CalculateOwnerDirection_OwnerDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x0000C0, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_VInterpTo_DeltaTime_ImplicitCast) == 0x0000C8, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_VInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityDirection, CallFunc_VInterpTo_InterpSpeed_ImplicitCast) == 0x0000CC, "Member 'AIMovementComponent_C_CalculateVelocityDirection::CallFunc_VInterpTo_InterpSpeed_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CalculateVelocityValue
// 0x0048 (0x0048 - 0x0000)
struct AIMovementComponent_C_CalculateVelocityValue final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_VelocityValue;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCPPIsStopping_ReturnValue;             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CalculateVelocityValue) == 0x000008, "Wrong alignment on AIMovementComponent_C_CalculateVelocityValue");
static_assert(sizeof(AIMovementComponent_C_CalculateVelocityValue) == 0x000048, "Wrong size on AIMovementComponent_C_CalculateVelocityValue");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, DeltaSeconds) == 0x000000, "Member 'AIMovementComponent_C_CalculateVelocityValue::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, Param_VelocityValue) == 0x000008, "Member 'AIMovementComponent_C_CalculateVelocityValue::Param_VelocityValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_GetCPPIsStopping_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_GetCPPIsStopping_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000014, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_SelectFloat_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_FClamp_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CalculateVelocityValue, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'AIMovementComponent_C_CalculateVelocityValue::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CheckAnimationRotationStop
// 0x000C (0x000C - 0x0000)
struct AIMovementComponent_C_CheckAnimationRotationStop final
{
public:
	bool                                          Stop;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurveValue;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CheckAnimationRotationStop) == 0x000004, "Wrong alignment on AIMovementComponent_C_CheckAnimationRotationStop");
static_assert(sizeof(AIMovementComponent_C_CheckAnimationRotationStop) == 0x00000C, "Wrong size on AIMovementComponent_C_CheckAnimationRotationStop");
static_assert(offsetof(AIMovementComponent_C_CheckAnimationRotationStop, Stop) == 0x000000, "Member 'AIMovementComponent_C_CheckAnimationRotationStop::Stop' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckAnimationRotationStop, CurveValue) == 0x000004, "Member 'AIMovementComponent_C_CheckAnimationRotationStop::CurveValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckAnimationRotationStop, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_CheckAnimationRotationStop::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CheckHittedActor
// 0x0230 (0x0230 - 0x0000)
struct AIMovementComponent_C_CheckHittedActor final
{
public:
	class UObject*                                ActorHitted;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hit_location;                                      // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AZombie_C*                              K2Node_DynamicCast_AsZombie;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_V2_C*                   K2Node_DynamicCast_AsSurvival_Player_V2;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_VehicleMaster_C*                   K2Node_DynamicCast_AsAVS_Vehicle_Master;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x0070(0x0018)(NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue_1;            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00F0(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindRelativeLookAtRotation_ReturnValue;   // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0180(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_188[0x8];                                      // 0x0188(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x0190(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindRelativeLookAtRotation_ReturnValue_1; // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_216[0x2];                                      // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1;  // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CheckHittedActor) == 0x000010, "Wrong alignment on AIMovementComponent_C_CheckHittedActor");
static_assert(sizeof(AIMovementComponent_C_CheckHittedActor) == 0x000230, "Wrong size on AIMovementComponent_C_CheckHittedActor");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, ActorHitted) == 0x000000, "Member 'AIMovementComponent_C_CheckHittedActor::ActorHitted' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, Hit_location) == 0x000008, "Member 'AIMovementComponent_C_CheckHittedActor::Hit_location' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, K2Node_DynamicCast_AsZombie) == 0x000020, "Member 'AIMovementComponent_C_CheckHittedActor::K2Node_DynamicCast_AsZombie' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AIMovementComponent_C_CheckHittedActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000029, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_IsValid_ReturnValue) == 0x00002A, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, K2Node_DynamicCast_AsSurvival_Player_V2) == 0x000030, "Member 'AIMovementComponent_C_CheckHittedActor::K2Node_DynamicCast_AsSurvival_Player_V2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'AIMovementComponent_C_CheckHittedActor::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, K2Node_DynamicCast_AsAVS_Vehicle_Master) == 0x000040, "Member 'AIMovementComponent_C_CheckHittedActor::K2Node_DynamicCast_AsAVS_Vehicle_Master' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'AIMovementComponent_C_CheckHittedActor::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Array_LastIndex_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Array_Get_Item) == 0x000070, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000088, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Vector_Distance_ReturnValue) == 0x0000A0, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x0000B0, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_IsValid_ReturnValue_1) == 0x0000B8, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Array_Length_ReturnValue) == 0x0000BC, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Array_LastIndex_ReturnValue_1) == 0x0000C0, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Greater_IntInt_ReturnValue) == 0x0000C4, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Vector_Distance_ReturnValue_1) == 0x0000E0, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Vector_Distance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000E8, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_GetTransform_ReturnValue) == 0x0000F0, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_FindRelativeLookAtRotation_ReturnValue) == 0x000150, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_FindRelativeLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BreakRotator_Roll) == 0x000168, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BreakRotator_Pitch) == 0x00016C, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BreakRotator_Yaw) == 0x000170, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000174, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Array_Length_ReturnValue_1) == 0x000178, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00017C, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x00017D, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_K2_SetTimer_ReturnValue) == 0x000180, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_GetTransform_ReturnValue_1) == 0x000190, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_FindRelativeLookAtRotation_ReturnValue_1) == 0x0001F0, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_FindRelativeLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BreakRotator_Roll_1) == 0x000208, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BreakRotator_Pitch_1) == 0x00020C, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BreakRotator_Yaw_1) == 0x000210, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000214, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_BooleanAND_ReturnValue) == 0x000215, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000218, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckHittedActor, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1) == 0x000220, "Member 'AIMovementComponent_C_CheckHittedActor::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CheckStartAngleIsTooBig
// 0x0120 (0x0120 - 0x0000)
struct AIMovementComponent_C_CheckStartAngleIsTooBig final
{
public:
	struct FVector                                CallFunc_GetCurrentPathPointLocation_CurrentPathPointLocation; // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Get_Degrees_to_Target_DesiredDegrees;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0048(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0060(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x00C0(0x0018)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindRelativeLookAtRotation_ReturnValue;   // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CheckStartAngleIsTooBig) == 0x000010, "Wrong alignment on AIMovementComponent_C_CheckStartAngleIsTooBig");
static_assert(sizeof(AIMovementComponent_C_CheckStartAngleIsTooBig) == 0x000120, "Wrong size on AIMovementComponent_C_CheckStartAngleIsTooBig");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_GetCurrentPathPointLocation_CurrentPathPointLocation) == 0x000000, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_GetCurrentPathPointLocation_CurrentPathPointLocation' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_GetVelocity_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_VSize_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_Get_Degrees_to_Target_DesiredDegrees) == 0x000038, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_Get_Degrees_to_Target_DesiredDegrees' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000040, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_K2_SetTimer_ReturnValue) == 0x000048, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_GetTransform_ReturnValue) == 0x000060, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_Array_Length_ReturnValue) == 0x0000D8, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_FindRelativeLookAtRotation_ReturnValue) == 0x0000E0, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_FindRelativeLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_Greater_IntInt_ReturnValue) == 0x0000F8, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_BreakRotator_Roll) == 0x0000FC, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_BreakRotator_Pitch) == 0x000100, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_BreakRotator_Yaw) == 0x000104, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_BooleanAND_ReturnValue) == 0x000108, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000109, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckStartAngleIsTooBig, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000110, "Member 'AIMovementComponent_C_CheckStartAngleIsTooBig::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.CheckZombieInFront
// 0x02D0 (0x02D0 - 0x0000)
struct AIMovementComponent_C_CheckZombieInFront final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0098(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0182(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_183[0x1];                                      // 0x0183(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0200(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0208(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AAVS_VehicleMaster_C*                   K2Node_DynamicCast_AsAVS_Vehicle_Master;           // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AZombie_C*                              K2Node_DynamicCast_AsZombie;                       // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27A[0x6];                                      // 0x027A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetReflectionVector_ReturnValue;          // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_DistanceToZombie_ImplicitCast;  // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_CheckZombieInFront) == 0x000008, "Wrong alignment on AIMovementComponent_C_CheckZombieInFront");
static_assert(sizeof(AIMovementComponent_C_CheckZombieInFront) == 0x0002D0, "Wrong size on AIMovementComponent_C_CheckZombieInFront");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_GetOwner_ReturnValue_1) == 0x000010, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_HasAuthority_ReturnValue_1) == 0x000018, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000019, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_GetActorForwardVector_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_LineTraceSingle_OutHit) == 0x000098, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_LineTraceSingle_ReturnValue) == 0x000180, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_bBlockingHit) == 0x000181, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_bInitialOverlap) == 0x000182, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_Time) == 0x000184, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_Distance) == 0x000188, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_Location) == 0x000190, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_ImpactPoint) == 0x0001A8, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_Normal) == 0x0001C0, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_ImpactNormal) == 0x0001D8, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_PhysMat) == 0x0001F0, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_HitActor) == 0x0001F8, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_HitComponent) == 0x000200, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_HitBoneName) == 0x000208, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_BoneName) == 0x000210, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_HitItem) == 0x000218, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_ElementIndex) == 0x00021C, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_FaceIndex) == 0x000220, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_TraceStart) == 0x000228, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakHitResult_TraceEnd) == 0x000240, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000258, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, K2Node_DynamicCast_AsAVS_Vehicle_Master) == 0x000260, "Member 'AIMovementComponent_C_CheckZombieInFront::K2Node_DynamicCast_AsAVS_Vehicle_Master' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, K2Node_DynamicCast_bSuccess) == 0x000268, "Member 'AIMovementComponent_C_CheckZombieInFront::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, K2Node_DynamicCast_AsZombie) == 0x000270, "Member 'AIMovementComponent_C_CheckZombieInFront::K2Node_DynamicCast_AsZombie' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, K2Node_DynamicCast_bSuccess_1) == 0x000278, "Member 'AIMovementComponent_C_CheckZombieInFront::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BooleanAND_ReturnValue) == 0x000279, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_GetReflectionVector_ReturnValue) == 0x000280, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_GetReflectionVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakVector_X) == 0x000298, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakVector_Y) == 0x0002A0, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_BreakVector_Z) == 0x0002A8, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, CallFunc_MakeVector_ReturnValue) == 0x0002B0, "Member 'AIMovementComponent_C_CheckZombieInFront::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_CheckZombieInFront, K2Node_VariableSet_DistanceToZombie_ImplicitCast) == 0x0002C8, "Member 'AIMovementComponent_C_CheckZombieInFront::K2Node_VariableSet_DistanceToZombie_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DebugShowPath
// 0x0050 (0x0050 - 0x0000)
struct AIMovementComponent_C_DebugShowPath final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item_1;                         // 0x0030(0x0018)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DebugShowPath) == 0x000008, "Wrong alignment on AIMovementComponent_C_DebugShowPath");
static_assert(sizeof(AIMovementComponent_C_DebugShowPath) == 0x000050, "Wrong size on AIMovementComponent_C_DebugShowPath");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AIMovementComponent_C_DebugShowPath::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AIMovementComponent_C_DebugShowPath::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Array_Get_Item) == 0x000018, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPath, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'AIMovementComponent_C_DebugShowPath::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DebugShowPathTrack
// 0x0070 (0x0070 - 0x0000)
struct AIMovementComponent_C_DebugShowPathTrack final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DebugShowPathTrack) == 0x000008, "Wrong alignment on AIMovementComponent_C_DebugShowPathTrack");
static_assert(sizeof(AIMovementComponent_C_DebugShowPathTrack) == 0x000070, "Wrong size on AIMovementComponent_C_DebugShowPathTrack");
static_assert(offsetof(AIMovementComponent_C_DebugShowPathTrack, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_DebugShowPathTrack::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPathTrack, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_DebugShowPathTrack::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPathTrack, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_DebugShowPathTrack::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPathTrack, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_DebugShowPathTrack::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPathTrack, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000040, "Member 'AIMovementComponent_C_DebugShowPathTrack::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DebugShowPathTrack, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000058, "Member 'AIMovementComponent_C_DebugShowPathTrack::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DecreasingMovement
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_DecreasingMovement final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DecreasingMovement) == 0x000008, "Wrong alignment on AIMovementComponent_C_DecreasingMovement");
static_assert(sizeof(AIMovementComponent_C_DecreasingMovement) == 0x000010, "Wrong size on AIMovementComponent_C_DecreasingMovement");
static_assert(offsetof(AIMovementComponent_C_DecreasingMovement, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_DecreasingMovement::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DecreasingMovement, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_DecreasingMovement::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DecreasingMovementSetup
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_DecreasingMovementSetup final
{
public:
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TwistDetected_ReturnValue;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetAngleBetweenDirections_Angle;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StartChangingVelocityValue_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DecreasingMovementSetup) == 0x000008, "Wrong alignment on AIMovementComponent_C_DecreasingMovementSetup");
static_assert(sizeof(AIMovementComponent_C_DecreasingMovementSetup) == 0x000018, "Wrong size on AIMovementComponent_C_DecreasingMovementSetup");
static_assert(offsetof(AIMovementComponent_C_DecreasingMovementSetup, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_DecreasingMovementSetup::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DecreasingMovementSetup, CallFunc_TwistDetected_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_DecreasingMovementSetup::CallFunc_TwistDetected_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DecreasingMovementSetup, CallFunc_GetAngleBetweenDirections_Angle) == 0x000008, "Member 'AIMovementComponent_C_DecreasingMovementSetup::CallFunc_GetAngleBetweenDirections_Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DecreasingMovementSetup, K2Node_VariableSet_StartChangingVelocityValue_ImplicitCast) == 0x000010, "Member 'AIMovementComponent_C_DecreasingMovementSetup::K2Node_VariableSet_StartChangingVelocityValue_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DefaultMovement
// 0x0003 (0x0003 - 0x0000)
struct AIMovementComponent_C_DefaultMovement final
{
public:
	bool                                          CallFunc_Time_To_Change_To_Decreasing_State_Change; // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Current_Point_Not_Last_IsNotLast;      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DefaultMovement) == 0x000001, "Wrong alignment on AIMovementComponent_C_DefaultMovement");
static_assert(sizeof(AIMovementComponent_C_DefaultMovement) == 0x000003, "Wrong size on AIMovementComponent_C_DefaultMovement");
static_assert(offsetof(AIMovementComponent_C_DefaultMovement, CallFunc_Time_To_Change_To_Decreasing_State_Change) == 0x000000, "Member 'AIMovementComponent_C_DefaultMovement::CallFunc_Time_To_Change_To_Decreasing_State_Change' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DefaultMovement, CallFunc_Is_Current_Point_Not_Last_IsNotLast) == 0x000001, "Member 'AIMovementComponent_C_DefaultMovement::CallFunc_Is_Current_Point_Not_Last_IsNotLast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DefaultMovement, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'AIMovementComponent_C_DefaultMovement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DetermineRotationCurve
// 0x0110 (0x0110 - 0x0000)
struct AIMovementComponent_C_DetermineRotationCurve final
{
public:
	Survival::EMovementType                       Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_AnimationAngle;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentKey;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_RotationCurvesMap                   CallFunc_Map_Find_Value;                           // 0x0028(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CallFunc_Map_Find_Value_1;                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_RotationCurvesMap                   CallFunc_Map_Find_Value_2;                         // 0x0090(0x0050)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<double>                                CallFunc_Map_Keys_Keys;                            // 0x00E8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DetermineRotationCurve) == 0x000008, "Wrong alignment on AIMovementComponent_C_DetermineRotationCurve");
static_assert(sizeof(AIMovementComponent_C_DetermineRotationCurve) == 0x000110, "Wrong size on AIMovementComponent_C_DetermineRotationCurve");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_DetermineRotationCurve::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, Param_AnimationAngle) == 0x000008, "Member 'AIMovementComponent_C_DetermineRotationCurve::Param_AnimationAngle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CurrentKey) == 0x000010, "Member 'AIMovementComponent_C_DetermineRotationCurve::CurrentKey' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, Temp_int_Array_Index_Variable) == 0x000018, "Member 'AIMovementComponent_C_DetermineRotationCurve::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'AIMovementComponent_C_DetermineRotationCurve::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Find_Value) == 0x000028, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Find_ReturnValue) == 0x000078, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000079, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Find_Value_1) == 0x000080, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Find_ReturnValue_1) == 0x000088, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Find_Value_2) == 0x000090, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Find_ReturnValue_2) == 0x0000E0, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Map_Keys_Keys) == 0x0000E8, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Array_Get_Item) == 0x000100, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DetermineRotationCurve, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'AIMovementComponent_C_DetermineRotationCurve::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DrawAIDebugLine
// 0x0088 (0x0088 - 0x0000)
struct AIMovementComponent_C_DrawAIDebugLine final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LineColor;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DrawDistance;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DrawThickness;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DrawDebugLine_Thickness_ImplicitCast;     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DrawAIDebugLine) == 0x000008, "Wrong alignment on AIMovementComponent_C_DrawAIDebugLine");
static_assert(sizeof(AIMovementComponent_C_DrawAIDebugLine) == 0x000088, "Wrong size on AIMovementComponent_C_DrawAIDebugLine");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, Direction) == 0x000000, "Member 'AIMovementComponent_C_DrawAIDebugLine::Direction' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, LineColor) == 0x000018, "Member 'AIMovementComponent_C_DrawAIDebugLine::LineColor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, DrawDistance) == 0x000028, "Member 'AIMovementComponent_C_DrawAIDebugLine::DrawDistance' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, DrawThickness) == 0x000030, "Member 'AIMovementComponent_C_DrawAIDebugLine::DrawThickness' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_DrawAIDebugLine::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_DrawAIDebugLine::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_DrawAIDebugLine::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawAIDebugLine, CallFunc_DrawDebugLine_Thickness_ImplicitCast) == 0x000080, "Member 'AIMovementComponent_C_DrawAIDebugLine::CallFunc_DrawDebugLine_Thickness_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.DrawPathPoints
// 0x0050 (0x0050 - 0x0000)
struct AIMovementComponent_C_DrawPathPoints final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_DrawPathPoints) == 0x000008, "Wrong alignment on AIMovementComponent_C_DrawPathPoints");
static_assert(sizeof(AIMovementComponent_C_DrawPathPoints) == 0x000050, "Wrong size on AIMovementComponent_C_DrawPathPoints");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AIMovementComponent_C_DrawPathPoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'AIMovementComponent_C_DrawPathPoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_DrawPathPoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, CallFunc_Array_Get_Item) == 0x000010, "Member 'AIMovementComponent_C_DrawPathPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_DrawPathPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, CallFunc_Add_VectorVector_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_DrawPathPoints::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_DrawPathPoints, CallFunc_Less_IntInt_ReturnValue) == 0x000048, "Member 'AIMovementComponent_C_DrawPathPoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.ExecuteUbergraph_AIMovementComponent
// 0x00A0 (0x00A0 - 0x0000)
struct AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StopCalculations_ReturnValue;             // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LastPointIsTarget_IsTarget;               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LastPointIsTarget_IsTarget_1;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_StopCalculations_ReturnValue_1;           // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       K2Node_CustomEvent_MovementType;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_AnimationAngle;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_DeerV2_C*                           K2Node_DynamicCast_AsBP_Deer_V2;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_2;                   // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_3;                   // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_4;                   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_CalculateVelocity_DeltaSeconds_ImplicitCast; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Set_Owner_Rotation_DeltaSeconds_ImplicitCast; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateVelocity_DeltaSeconds_ImplicitCast_1; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Set_Owner_Rotation_DeltaSeconds_ImplicitCast_1; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent) == 0x000008, "Wrong alignment on AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent");
static_assert(sizeof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent) == 0x0000A0, "Wrong size on AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, EntryPoint) == 0x000000, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_StopCalculations_ReturnValue) == 0x000011, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_StopCalculations_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_IsValid_ReturnValue) == 0x000012, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_LastPointIsTarget_IsTarget) == 0x000013, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_LastPointIsTarget_IsTarget' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_LastPointIsTarget_IsTarget_1) == 0x000014, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_LastPointIsTarget_IsTarget_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_GetOwner_ReturnValue_1) == 0x000018, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_HasAuthority_ReturnValue_1) == 0x000020, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_StopCalculations_ReturnValue_1) == 0x000021, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_StopCalculations_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, K2Node_CustomEvent_MovementType) == 0x000022, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::K2Node_CustomEvent_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, K2Node_CustomEvent_AnimationAngle) == 0x000028, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::K2Node_CustomEvent_AnimationAngle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, K2Node_DynamicCast_AsBP_Deer_V2) == 0x000038, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::K2Node_DynamicCast_AsBP_Deer_V2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_GetOwner_ReturnValue_2) == 0x000048, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_GetOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_HasAuthority_ReturnValue_2) == 0x000050, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, K2Node_Event_DeltaSeconds) == 0x000054, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_IsValid_ReturnValue_2) == 0x000058, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_GetOwner_ReturnValue_3) == 0x000060, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_GetOwner_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_HasAuthority_ReturnValue_3) == 0x000068, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_GetOwner_ReturnValue_4) == 0x000070, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_GetOwner_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_HasAuthority_ReturnValue_4) == 0x000078, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_CalculateVelocity_DeltaSeconds_ImplicitCast) == 0x000080, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_CalculateVelocity_DeltaSeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_Set_Owner_Rotation_DeltaSeconds_ImplicitCast) == 0x000088, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_Set_Owner_Rotation_DeltaSeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_CalculateVelocity_DeltaSeconds_ImplicitCast_1) == 0x000090, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_CalculateVelocity_DeltaSeconds_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent, CallFunc_Set_Owner_Rotation_DeltaSeconds_ImplicitCast_1) == 0x000098, "Member 'AIMovementComponent_C_ExecuteUbergraph_AIMovementComponent::CallFunc_Set_Owner_Rotation_DeltaSeconds_ImplicitCast_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.ExtractRotationFromAnimation
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_ExtractRotationFromAnimation final
{
public:
	class FName                                   Param_RotationCurveName;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Param_AnimationAngle;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       Param_MovementType;                                // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetCPPAnimationAngle_NewValue_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_ExtractRotationFromAnimation) == 0x000008, "Wrong alignment on AIMovementComponent_C_ExtractRotationFromAnimation");
static_assert(sizeof(AIMovementComponent_C_ExtractRotationFromAnimation) == 0x000018, "Wrong size on AIMovementComponent_C_ExtractRotationFromAnimation");
static_assert(offsetof(AIMovementComponent_C_ExtractRotationFromAnimation, Param_RotationCurveName) == 0x000000, "Member 'AIMovementComponent_C_ExtractRotationFromAnimation::Param_RotationCurveName' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExtractRotationFromAnimation, Param_AnimationAngle) == 0x000008, "Member 'AIMovementComponent_C_ExtractRotationFromAnimation::Param_AnimationAngle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExtractRotationFromAnimation, Param_MovementType) == 0x000010, "Member 'AIMovementComponent_C_ExtractRotationFromAnimation::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ExtractRotationFromAnimation, CallFunc_SetCPPAnimationAngle_NewValue_ImplicitCast) == 0x000014, "Member 'AIMovementComponent_C_ExtractRotationFromAnimation::CallFunc_SetCPPAnimationAngle_NewValue_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.FinishedAcceleration
// 0x0002 (0x0002 - 0x0000)
struct AIMovementComponent_C_FinishedAcceleration final
{
public:
	bool                                          Finished;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_FinishedAcceleration) == 0x000001, "Wrong alignment on AIMovementComponent_C_FinishedAcceleration");
static_assert(sizeof(AIMovementComponent_C_FinishedAcceleration) == 0x000002, "Wrong size on AIMovementComponent_C_FinishedAcceleration");
static_assert(offsetof(AIMovementComponent_C_FinishedAcceleration, Finished) == 0x000000, "Member 'AIMovementComponent_C_FinishedAcceleration::Finished' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_FinishedAcceleration, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000001, "Member 'AIMovementComponent_C_FinishedAcceleration::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Get Last Point Is Target Actor
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_C_Get_Last_Point_Is_Target_Actor final
{
public:
	bool                                          Param_LastPointIsTargetActor;                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Get_Last_Point_Is_Target_Actor) == 0x000001, "Wrong alignment on AIMovementComponent_C_Get_Last_Point_Is_Target_Actor");
static_assert(sizeof(AIMovementComponent_C_Get_Last_Point_Is_Target_Actor) == 0x000001, "Wrong size on AIMovementComponent_C_Get_Last_Point_Is_Target_Actor");
static_assert(offsetof(AIMovementComponent_C_Get_Last_Point_Is_Target_Actor, Param_LastPointIsTargetActor) == 0x000000, "Member 'AIMovementComponent_C_Get_Last_Point_Is_Target_Actor::Param_LastPointIsTargetActor' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Get Should Skip Calculations
// 0x0040 (0x0040 - 0x0000)
struct AIMovementComponent_C_Get_Should_Skip_Calculations final
{
public:
	bool                                          CallFunc_GetIsMovingCorrectly_bMovingCorrectly;    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDistanceToNextPoint_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Get_Should_Skip_Calculations) == 0x000008, "Wrong alignment on AIMovementComponent_C_Get_Should_Skip_Calculations");
static_assert(sizeof(AIMovementComponent_C_Get_Should_Skip_Calculations) == 0x000040, "Wrong size on AIMovementComponent_C_Get_Should_Skip_Calculations");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_GetIsMovingCorrectly_bMovingCorrectly) == 0x000000, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_GetIsMovingCorrectly_bMovingCorrectly' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_GetDistanceToNextPoint_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_GetDistanceToNextPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000011, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Array_Get_Item) == 0x000018, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Vector_Distance_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000038, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Get_Should_Skip_Calculations, CallFunc_BooleanAND_ReturnValue) == 0x000039, "Member 'AIMovementComponent_C_Get_Should_Skip_Calculations::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetAngleBetweenDirections
// 0x00D8 (0x00D8 - 0x0000)
struct AIMovementComponent_C_GetAngleBetweenDirections final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NextDirection;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentDirection;                                  // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NextPoint;                                         // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentPoint;                                      // 0x0050(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleBetweenTwoVectors_Angle;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue_1;         // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetAngleBetweenDirections) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetAngleBetweenDirections");
static_assert(sizeof(AIMovementComponent_C_GetAngleBetweenDirections) == 0x0000D8, "Wrong size on AIMovementComponent_C_GetAngleBetweenDirections");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, Angle) == 0x000000, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, NextDirection) == 0x000008, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::NextDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CurrentDirection) == 0x000020, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CurrentDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, NextPoint) == 0x000038, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::NextPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CurrentPoint) == 0x000050, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CurrentPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CallFunc_FindLookAtRotation_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CallFunc_GetForwardVector_ReturnValue) == 0x000080, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CallFunc_GetAngleBetweenTwoVectors_Angle) == 0x000098, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CallFunc_GetAngleBetweenTwoVectors_Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CallFunc_Abs_ReturnValue) == 0x0000A0, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CallFunc_FindLookAtRotation_ReturnValue_1) == 0x0000A8, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CallFunc_FindLookAtRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetAngleBetweenDirections, CallFunc_GetForwardVector_ReturnValue_1) == 0x0000C0, "Member 'AIMovementComponent_C_GetAngleBetweenDirections::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetAnimationAngle
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_GetAnimationAngle final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetAnimationAngle) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetAnimationAngle");
static_assert(sizeof(AIMovementComponent_C_GetAnimationAngle) == 0x000008, "Wrong size on AIMovementComponent_C_GetAnimationAngle");
static_assert(offsetof(AIMovementComponent_C_GetAnimationAngle, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetAnimationAngle::ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetCurrentPathPointLocation
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_GetCurrentPathPointLocation final
{
public:
	struct FVector                                Param_CurrentPathPointLocation;                    // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetCurrentPathPointLocation) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetCurrentPathPointLocation");
static_assert(sizeof(AIMovementComponent_C_GetCurrentPathPointLocation) == 0x000018, "Wrong size on AIMovementComponent_C_GetCurrentPathPointLocation");
static_assert(offsetof(AIMovementComponent_C_GetCurrentPathPointLocation, Param_CurrentPathPointLocation) == 0x000000, "Member 'AIMovementComponent_C_GetCurrentPathPointLocation::Param_CurrentPathPointLocation' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetDesiredVector
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_GetDesiredVector final
{
public:
	struct FVector                                DesiredVector;                                     // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetDesiredVector) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetDesiredVector");
static_assert(sizeof(AIMovementComponent_C_GetDesiredVector) == 0x000018, "Wrong size on AIMovementComponent_C_GetDesiredVector");
static_assert(offsetof(AIMovementComponent_C_GetDesiredVector, DesiredVector) == 0x000000, "Member 'AIMovementComponent_C_GetDesiredVector::DesiredVector' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetDistanceToNextPoint
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_GetDistanceToNextPoint final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsIndexInRange_InRange;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetDistanceToNextPoint) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetDistanceToNextPoint");
static_assert(sizeof(AIMovementComponent_C_GetDistanceToNextPoint) == 0x000010, "Wrong size on AIMovementComponent_C_GetDistanceToNextPoint");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToNextPoint, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetDistanceToNextPoint::ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToNextPoint, CallFunc_IsIndexInRange_InRange) == 0x000008, "Member 'AIMovementComponent_C_GetDistanceToNextPoint::CallFunc_IsIndexInRange_InRange' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetDistanceToStop
// 0x00E8 (0x00E8 - 0x0000)
struct AIMovementComponent_C_GetDistanceToStop final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetVelocityModifier;                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SelfVelocityModifier;                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_1;                // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue_1;                      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue_2;                // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue_2;                      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_Value_ImplicitCast;       // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetDistanceToStop) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetDistanceToStop");
static_assert(sizeof(AIMovementComponent_C_GetDistanceToStop) == 0x0000E8, "Wrong size on AIMovementComponent_C_GetDistanceToStop");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetDistanceToStop::ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, TargetVelocityModifier) == 0x000008, "Member 'AIMovementComponent_C_GetDistanceToStop::TargetVelocityModifier' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, SelfVelocityModifier) == 0x000010, "Member 'AIMovementComponent_C_GetDistanceToStop::SelfVelocityModifier' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_GetCPPVelocityValue_ReturnValue_1) == 0x00001C, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_GetCPPVelocityValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_MapRangeClamped_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_GetVelocity_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_VSize_ReturnValue) == 0x000058, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_GetVelocity_ReturnValue_1) == 0x000060, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_GetVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000078, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_VSize_ReturnValue_1) == 0x000080, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000088, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Abs_ReturnValue) == 0x000098, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000A8, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_FMax_ReturnValue) == 0x0000B0, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_GetVelocity_ReturnValue_2) == 0x0000B8, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_GetVelocity_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_VSize_ReturnValue_2) == 0x0000D0, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x0000D8, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetDistanceToStop, CallFunc_MapRangeClamped_Value_ImplicitCast) == 0x0000E0, "Member 'AIMovementComponent_C_GetDistanceToStop::CallFunc_MapRangeClamped_Value_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetIsMovingCorrectly
// 0x00E0 (0x00E0 - 0x0000)
struct AIMovementComponent_C_GetIsMovingCorrectly final
{
public:
	bool                                          bMovingCorrectly;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0040(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindRelativeLookAtRotation_ReturnValue;   // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetIsMovingCorrectly) == 0x000010, "Wrong alignment on AIMovementComponent_C_GetIsMovingCorrectly");
static_assert(sizeof(AIMovementComponent_C_GetIsMovingCorrectly) == 0x0000E0, "Wrong size on AIMovementComponent_C_GetIsMovingCorrectly");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, bMovingCorrectly) == 0x000000, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::bMovingCorrectly' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_GetVelocity_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_VSize_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_GetTransform_ReturnValue) == 0x000040, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_FindRelativeLookAtRotation_ReturnValue) == 0x0000A0, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_FindRelativeLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_BreakRotator_Roll) == 0x0000B8, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_BreakRotator_Pitch) == 0x0000BC, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_BreakRotator_Yaw) == 0x0000C0, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x0000C4, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x0000C8, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000D0, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_GetIsMovingCorrectly, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x0000D8, "Member 'AIMovementComponent_C_GetIsMovingCorrectly::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetIsStopping
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_C_GetIsStopping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetIsStopping) == 0x000001, "Wrong alignment on AIMovementComponent_C_GetIsStopping");
static_assert(sizeof(AIMovementComponent_C_GetIsStopping) == 0x000001, "Wrong size on AIMovementComponent_C_GetIsStopping");
static_assert(offsetof(AIMovementComponent_C_GetIsStopping, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetIsStopping::ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetMovementType
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_C_GetMovementType final
{
public:
	E_AIMovementType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetMovementType) == 0x000001, "Wrong alignment on AIMovementComponent_C_GetMovementType");
static_assert(sizeof(AIMovementComponent_C_GetMovementType) == 0x000001, "Wrong size on AIMovementComponent_C_GetMovementType");
static_assert(offsetof(AIMovementComponent_C_GetMovementType, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetMovementType::ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetVelocityFromAnimation
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_C_GetVelocityFromAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetVelocityFromAnimation) == 0x000001, "Wrong alignment on AIMovementComponent_C_GetVelocityFromAnimation");
static_assert(sizeof(AIMovementComponent_C_GetVelocityFromAnimation) == 0x000001, "Wrong size on AIMovementComponent_C_GetVelocityFromAnimation");
static_assert(offsetof(AIMovementComponent_C_GetVelocityFromAnimation, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetVelocityFromAnimation::ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.GetVelocityValue
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_GetVelocityValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_GetVelocityValue) == 0x000008, "Wrong alignment on AIMovementComponent_C_GetVelocityValue");
static_assert(sizeof(AIMovementComponent_C_GetVelocityValue) == 0x000008, "Wrong size on AIMovementComponent_C_GetVelocityValue");
static_assert(offsetof(AIMovementComponent_C_GetVelocityValue, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_GetVelocityValue::ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.IncreasingMovement
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_IncreasingMovement final
{
public:
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FinishedAcceleration_Finished;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_IncreasingMovement) == 0x000008, "Wrong alignment on AIMovementComponent_C_IncreasingMovement");
static_assert(sizeof(AIMovementComponent_C_IncreasingMovement) == 0x000018, "Wrong size on AIMovementComponent_C_IncreasingMovement");
static_assert(offsetof(AIMovementComponent_C_IncreasingMovement, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_IncreasingMovement::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IncreasingMovement, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_IncreasingMovement::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IncreasingMovement, CallFunc_FinishedAcceleration_Finished) == 0x000010, "Member 'AIMovementComponent_C_IncreasingMovement::CallFunc_FinishedAcceleration_Finished' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.IncreasingMovementSetup
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_IncreasingMovementSetup final
{
public:
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_StartChangingVelocityValue_ImplicitCast; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_IncreasingMovementSetup) == 0x000008, "Wrong alignment on AIMovementComponent_C_IncreasingMovementSetup");
static_assert(sizeof(AIMovementComponent_C_IncreasingMovementSetup) == 0x000010, "Wrong size on AIMovementComponent_C_IncreasingMovementSetup");
static_assert(offsetof(AIMovementComponent_C_IncreasingMovementSetup, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_IncreasingMovementSetup::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IncreasingMovementSetup, K2Node_VariableSet_StartChangingVelocityValue_ImplicitCast) == 0x000008, "Member 'AIMovementComponent_C_IncreasingMovementSetup::K2Node_VariableSet_StartChangingVelocityValue_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.InitializePath
// 0x00A8 (0x00A8 - 0x0000)
struct AIMovementComponent_C_InitializePath final
{
public:
	bool                                          Param_TargetIsActor;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Param_TargetActor;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocationIn;                                  // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Param_PathfindingContext;                          // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class UNavigationQueryFilter>     Param_FilterClass;                                 // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<struct FVector>                        InterPathPoints;                                   // 0x0038(0x0010)(Edit, BlueprintVisible)
	class UNavigationPath*                        Parth;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_AddRandomPointNearTarget_OutPoints;       // 0x0050(0x0010)(ReferenceParm)
	TArray<struct FVector>                        CallFunc_AddCarAvoidingPoint_OutPoints;            // 0x0060(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNavigationPath*                        CallFunc_FindPathToLocationSynchronously_ReturnValue; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_InitializePath) == 0x000008, "Wrong alignment on AIMovementComponent_C_InitializePath");
static_assert(sizeof(AIMovementComponent_C_InitializePath) == 0x0000A8, "Wrong size on AIMovementComponent_C_InitializePath");
static_assert(offsetof(AIMovementComponent_C_InitializePath, Param_TargetIsActor) == 0x000000, "Member 'AIMovementComponent_C_InitializePath::Param_TargetIsActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, Param_TargetActor) == 0x000008, "Member 'AIMovementComponent_C_InitializePath::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, TargetLocationIn) == 0x000010, "Member 'AIMovementComponent_C_InitializePath::TargetLocationIn' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, Param_PathfindingContext) == 0x000028, "Member 'AIMovementComponent_C_InitializePath::Param_PathfindingContext' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, Param_FilterClass) == 0x000030, "Member 'AIMovementComponent_C_InitializePath::Param_FilterClass' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, InterPathPoints) == 0x000038, "Member 'AIMovementComponent_C_InitializePath::InterPathPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, Parth) == 0x000048, "Member 'AIMovementComponent_C_InitializePath::Parth' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, CallFunc_AddRandomPointNearTarget_OutPoints) == 0x000050, "Member 'AIMovementComponent_C_InitializePath::CallFunc_AddRandomPointNearTarget_OutPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, CallFunc_AddCarAvoidingPoint_OutPoints) == 0x000060, "Member 'AIMovementComponent_C_InitializePath::CallFunc_AddCarAvoidingPoint_OutPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000070, "Member 'AIMovementComponent_C_InitializePath::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000088, "Member 'AIMovementComponent_C_InitializePath::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_InitializePath, CallFunc_FindPathToLocationSynchronously_ReturnValue) == 0x0000A0, "Member 'AIMovementComponent_C_InitializePath::CallFunc_FindPathToLocationSynchronously_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Is Current Point Not Last
// 0x0060 (0x0060 - 0x0000)
struct AIMovementComponent_C_Is_Current_Point_Not_Last final
{
public:
	bool                                          IsNotLast;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x0018(0x0018)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item_1;                         // 0x0038(0x0018)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Is_Current_Point_Not_Last) == 0x000008, "Wrong alignment on AIMovementComponent_C_Is_Current_Point_Not_Last");
static_assert(sizeof(AIMovementComponent_C_Is_Current_Point_Not_Last) == 0x000060, "Wrong size on AIMovementComponent_C_Is_Current_Point_Not_Last");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, IsNotLast) == 0x000000, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::IsNotLast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Subtract_IntInt_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Array_Get_Item) == 0x000018, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000031, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000032, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Vector_Distance_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000058, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_BooleanAND_ReturnValue) == 0x000059, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_BooleanOR_ReturnValue) == 0x00005A, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Is_Current_Point_Not_Last, CallFunc_Not_PreBool_ReturnValue) == 0x00005B, "Member 'AIMovementComponent_C_Is_Current_Point_Not_Last::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.IsCloseToTarget
// 0x0005 (0x0005 - 0x0000)
struct AIMovementComponent_C_IsCloseToTarget final
{
public:
	bool                                          IsClose;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_2;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_IsCloseToTarget) == 0x000001, "Wrong alignment on AIMovementComponent_C_IsCloseToTarget");
static_assert(sizeof(AIMovementComponent_C_IsCloseToTarget) == 0x000005, "Wrong size on AIMovementComponent_C_IsCloseToTarget");
static_assert(offsetof(AIMovementComponent_C_IsCloseToTarget, IsClose) == 0x000000, "Member 'AIMovementComponent_C_IsCloseToTarget::IsClose' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsCloseToTarget, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'AIMovementComponent_C_IsCloseToTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsCloseToTarget, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000002, "Member 'AIMovementComponent_C_IsCloseToTarget::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsCloseToTarget, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000003, "Member 'AIMovementComponent_C_IsCloseToTarget::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsCloseToTarget, CallFunc_Less_DoubleDouble_ReturnValue_2) == 0x000004, "Member 'AIMovementComponent_C_IsCloseToTarget::CallFunc_Less_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.IsIndexInRange
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_IsIndexInRange final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InRange;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_IsIndexInRange) == 0x000004, "Wrong alignment on AIMovementComponent_C_IsIndexInRange");
static_assert(sizeof(AIMovementComponent_C_IsIndexInRange) == 0x000018, "Wrong size on AIMovementComponent_C_IsIndexInRange");
static_assert(offsetof(AIMovementComponent_C_IsIndexInRange, Param_Index) == 0x000000, "Member 'AIMovementComponent_C_IsIndexInRange::Param_Index' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsIndexInRange, InRange) == 0x000004, "Member 'AIMovementComponent_C_IsIndexInRange::InRange' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsIndexInRange, CallFunc_Array_Length_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_IsIndexInRange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsIndexInRange, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'AIMovementComponent_C_IsIndexInRange::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsIndexInRange, CallFunc_Array_LastIndex_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_IsIndexInRange::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_IsIndexInRange, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000014, "Member 'AIMovementComponent_C_IsIndexInRange::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.LastPointIsTarget
// 0x0014 (0x0014 - 0x0000)
struct AIMovementComponent_C_LastPointIsTarget final
{
public:
	bool                                          IsTarget;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_LastPointIsTarget) == 0x000004, "Wrong alignment on AIMovementComponent_C_LastPointIsTarget");
static_assert(sizeof(AIMovementComponent_C_LastPointIsTarget) == 0x000014, "Wrong size on AIMovementComponent_C_LastPointIsTarget");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, IsTarget) == 0x000000, "Member 'AIMovementComponent_C_LastPointIsTarget::IsTarget' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_Array_LastIndex_ReturnValue) == 0x00000C, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_LastPointIsTarget, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'AIMovementComponent_C_LastPointIsTarget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.MovementTypeRepNotify
// 0x0198 (0x0198 - 0x0000)
struct AIMovementComponent_C_MovementTypeRepNotify final
{
public:
	struct FF_MovementSettings                    StateSettings;                                     // 0x0000(0x0080)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       CallFunc_GetCPPMovementType_ReturnValue;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0088(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       CallFunc_GetCPPMovementType_ReturnValue_1;         // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    CallFunc_Map_Find_Value_1;                         // 0x0110(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_MovementTypeRepNotify) == 0x000008, "Wrong alignment on AIMovementComponent_C_MovementTypeRepNotify");
static_assert(sizeof(AIMovementComponent_C_MovementTypeRepNotify) == 0x000198, "Wrong size on AIMovementComponent_C_MovementTypeRepNotify");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, StateSettings) == 0x000000, "Member 'AIMovementComponent_C_MovementTypeRepNotify::StateSettings' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, CallFunc_GetCPPMovementType_ReturnValue) == 0x000080, "Member 'AIMovementComponent_C_MovementTypeRepNotify::CallFunc_GetCPPMovementType_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, CallFunc_Map_Find_Value) == 0x000088, "Member 'AIMovementComponent_C_MovementTypeRepNotify::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, CallFunc_Map_Find_ReturnValue) == 0x000108, "Member 'AIMovementComponent_C_MovementTypeRepNotify::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, CallFunc_GetCPPMovementType_ReturnValue_1) == 0x000109, "Member 'AIMovementComponent_C_MovementTypeRepNotify::CallFunc_GetCPPMovementType_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, CallFunc_Map_Find_Value_1) == 0x000110, "Member 'AIMovementComponent_C_MovementTypeRepNotify::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MovementTypeRepNotify, CallFunc_Map_Find_ReturnValue_1) == 0x000190, "Member 'AIMovementComponent_C_MovementTypeRepNotify::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.MulticastRotationCurveNameRepNotify
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_MulticastRotationCurveNameRepNotify final
{
public:
	Survival::EMovementType                       Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_AnimationAngle;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_MulticastRotationCurveNameRepNotify) == 0x000008, "Wrong alignment on AIMovementComponent_C_MulticastRotationCurveNameRepNotify");
static_assert(sizeof(AIMovementComponent_C_MulticastRotationCurveNameRepNotify) == 0x000010, "Wrong size on AIMovementComponent_C_MulticastRotationCurveNameRepNotify");
static_assert(offsetof(AIMovementComponent_C_MulticastRotationCurveNameRepNotify, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_MulticastRotationCurveNameRepNotify::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_MulticastRotationCurveNameRepNotify, Param_AnimationAngle) == 0x000008, "Member 'AIMovementComponent_C_MulticastRotationCurveNameRepNotify::Param_AnimationAngle' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.On Reach Last Point
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_On_Reach_Last_Point final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_On_Reach_Last_Point) == 0x000008, "Wrong alignment on AIMovementComponent_C_On_Reach_Last_Point");
static_assert(sizeof(AIMovementComponent_C_On_Reach_Last_Point) == 0x000010, "Wrong size on AIMovementComponent_C_On_Reach_Last_Point");
static_assert(offsetof(AIMovementComponent_C_On_Reach_Last_Point, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_On_Reach_Last_Point::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Reach_Last_Point, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_On_Reach_Last_Point::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.On Set Target Actor
// 0x0040 (0x0040 - 0x0000)
struct AIMovementComponent_C_On_Set_Target_Actor final
{
public:
	class AActor*                                 Param_TargetActor;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue_1;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0038(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_On_Set_Target_Actor) == 0x000008, "Wrong alignment on AIMovementComponent_C_On_Set_Target_Actor");
static_assert(sizeof(AIMovementComponent_C_On_Set_Target_Actor) == 0x000040, "Wrong size on AIMovementComponent_C_On_Set_Target_Actor");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, Param_TargetActor) == 0x000000, "Member 'AIMovementComponent_C_On_Set_Target_Actor::Param_TargetActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_On_Set_Target_Actor::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_On_Set_Target_Actor::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'AIMovementComponent_C_On_Set_Target_Actor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, CallFunc_GetOwner_ReturnValue_1) == 0x000018, "Member 'AIMovementComponent_C_On_Set_Target_Actor::CallFunc_GetOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, CallFunc_HasAuthority_ReturnValue_1) == 0x000020, "Member 'AIMovementComponent_C_On_Set_Target_Actor::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'AIMovementComponent_C_On_Set_Target_Actor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_On_Set_Target_Actor, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_On_Set_Target_Actor::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.OnReachPathPoint
// 0x0030 (0x0030 - 0x0000)
struct AIMovementComponent_C_OnReachPathPoint final
{
public:
	double                                        CallFunc_GetAngleBetweenDirections_Angle;          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetDistanceToNextPoint_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Current_Point_Not_Last_IsNotLast;      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_OnReachPathPoint) == 0x000008, "Wrong alignment on AIMovementComponent_C_OnReachPathPoint");
static_assert(sizeof(AIMovementComponent_C_OnReachPathPoint) == 0x000030, "Wrong size on AIMovementComponent_C_OnReachPathPoint");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_GetAngleBetweenDirections_Angle) == 0x000000, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_GetAngleBetweenDirections_Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_GetDistanceToNextPoint_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_GetDistanceToNextPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, Temp_int_Variable) == 0x000018, "Member 'AIMovementComponent_C_OnReachPathPoint::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_Less_DoubleDouble_ReturnValue) == 0x00001C, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_Is_Current_Point_Not_Last_IsNotLast) == 0x00001D, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_Is_Current_Point_Not_Last_IsNotLast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_OnReachPathPoint, CallFunc_BooleanOR_ReturnValue) == 0x00002C, "Member 'AIMovementComponent_C_OnReachPathPoint::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.OnRep_PathMovementState
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_C_OnRep_PathMovementState final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_OnRep_PathMovementState) == 0x000001, "Wrong alignment on AIMovementComponent_C_OnRep_PathMovementState");
static_assert(sizeof(AIMovementComponent_C_OnRep_PathMovementState) == 0x000001, "Wrong size on AIMovementComponent_C_OnRep_PathMovementState");
static_assert(offsetof(AIMovementComponent_C_OnRep_PathMovementState, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'AIMovementComponent_C_OnRep_PathMovementState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.PathMovementHandle
// 0x0001 (0x0001 - 0x0000)
struct AIMovementComponent_C_PathMovementHandle final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_PathMovementHandle) == 0x000001, "Wrong alignment on AIMovementComponent_C_PathMovementHandle");
static_assert(sizeof(AIMovementComponent_C_PathMovementHandle) == 0x000001, "Wrong size on AIMovementComponent_C_PathMovementHandle");
static_assert(offsetof(AIMovementComponent_C_PathMovementHandle, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'AIMovementComponent_C_PathMovementHandle::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AIMovementComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on AIMovementComponent_C_ReceiveTick");
static_assert(sizeof(AIMovementComponent_C_ReceiveTick) == 0x000004, "Wrong size on AIMovementComponent_C_ReceiveTick");
static_assert(offsetof(AIMovementComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AIMovementComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.ResetAllVariables
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_ResetAllVariables final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_ResetAllVariables) == 0x000008, "Wrong alignment on AIMovementComponent_C_ResetAllVariables");
static_assert(sizeof(AIMovementComponent_C_ResetAllVariables) == 0x000010, "Wrong size on AIMovementComponent_C_ResetAllVariables");
static_assert(offsetof(AIMovementComponent_C_ResetAllVariables, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_ResetAllVariables::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_ResetAllVariables, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_ResetAllVariables::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Rotation Curve Name Rep Notify
// 0x0050 (0x0050 - 0x0000)
struct AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify final
{
public:
	Survival::EMovementType                       Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Param_AnimationAngle;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_VariableSet_RotationYawZ_ImplicitCast;      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_StartRotationYawZ_ImplicitCast; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify) == 0x000008, "Wrong alignment on AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify");
static_assert(sizeof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify) == 0x000050, "Wrong size on AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, Param_AnimationAngle) == 0x000008, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::Param_AnimationAngle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, K2Node_VariableSet_RotationYawZ_ImplicitCast) == 0x000044, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::K2Node_VariableSet_RotationYawZ_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify, K2Node_VariableSet_StartRotationYawZ_ImplicitCast) == 0x000048, "Member 'AIMovementComponent_C_Rotation_Curve_Name_Rep_Notify::K2Node_VariableSet_StartRotationYawZ_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.RotationExtraction
// 0x01E0 (0x01E0 - 0x0000)
struct AIMovementComponent_C_RotationExtraction final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationCurveValue;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckAnimationRotationStop_Stop;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorRelativeRotation_SweepHitResult; // 0x0030(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_ReplicatedRotationZ_ImplicitCast; // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RInterpTo_DeltaTime_ImplicitCast;         // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_RotationExtraction) == 0x000008, "Wrong alignment on AIMovementComponent_C_RotationExtraction");
static_assert(sizeof(AIMovementComponent_C_RotationExtraction) == 0x0001E0, "Wrong size on AIMovementComponent_C_RotationExtraction");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, DeltaSeconds) == 0x000000, "Member 'AIMovementComponent_C_RotationExtraction::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, RotationCurveValue) == 0x000008, "Member 'AIMovementComponent_C_RotationExtraction::RotationCurveValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_CheckAnimationRotationStop_Stop) == 0x00000C, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_CheckAnimationRotationStop_Stop' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_GetFloatValue_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_K2_SetActorRelativeRotation_SweepHitResult) == 0x000030, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_K2_SetActorRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_MakeRotator_ReturnValue_1) == 0x000118, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000130, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_MakeRotator_ReturnValue_2) == 0x000138, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_ComposeRotators_ReturnValue) == 0x000150, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_BreakRotator_Roll) == 0x000168, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_BreakRotator_Pitch) == 0x00016C, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_BreakRotator_Yaw) == 0x000170, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_MakeRotator_ReturnValue_3) == 0x000178, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_MakeRotator_ReturnValue_4) == 0x000190, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_RInterpTo_ReturnValue) == 0x0001A8, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_BreakRotator_Roll_1) == 0x0001C0, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_BreakRotator_Pitch_1) == 0x0001C4, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_BreakRotator_Yaw_1) == 0x0001C8, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x0001CC, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, K2Node_VariableSet_ReplicatedRotationZ_ImplicitCast) == 0x0001D0, "Member 'AIMovementComponent_C_RotationExtraction::K2Node_VariableSet_ReplicatedRotationZ_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_RInterpTo_DeltaTime_ImplicitCast) == 0x0001D8, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_RInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationExtraction, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x0001DC, "Member 'AIMovementComponent_C_RotationExtraction::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.RotationExtractionSubtick
// 0x0008 (0x0008 - 0x0000)
struct AIMovementComponent_C_RotationExtractionSubtick final
{
public:
	double                                        CallFunc_RotationExtraction_DeltaSeconds_ImplicitCast; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_RotationExtractionSubtick) == 0x000008, "Wrong alignment on AIMovementComponent_C_RotationExtractionSubtick");
static_assert(sizeof(AIMovementComponent_C_RotationExtractionSubtick) == 0x000008, "Wrong size on AIMovementComponent_C_RotationExtractionSubtick");
static_assert(offsetof(AIMovementComponent_C_RotationExtractionSubtick, CallFunc_RotationExtraction_DeltaSeconds_ImplicitCast) == 0x000000, "Member 'AIMovementComponent_C_RotationExtractionSubtick::CallFunc_RotationExtraction_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.RotationSubtick
// 0x0058 (0x0058 - 0x0000)
struct AIMovementComponent_C_RotationSubtick final
{
public:
	struct FRotator                               TargetRotation;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         DeltaTime;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_RotationSubtick) == 0x000008, "Wrong alignment on AIMovementComponent_C_RotationSubtick");
static_assert(sizeof(AIMovementComponent_C_RotationSubtick) == 0x000058, "Wrong size on AIMovementComponent_C_RotationSubtick");
static_assert(offsetof(AIMovementComponent_C_RotationSubtick, TargetRotation) == 0x000000, "Member 'AIMovementComponent_C_RotationSubtick::TargetRotation' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationSubtick, DeltaTime) == 0x000018, "Member 'AIMovementComponent_C_RotationSubtick::DeltaTime' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationSubtick, CallFunc_MakeRotator_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_RotationSubtick::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationSubtick, CallFunc_RInterpTo_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_RotationSubtick::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_RotationSubtick, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000050, "Member 'AIMovementComponent_C_RotationSubtick::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Set Owner Rotation
// 0x00D0 (0x00D0 - 0x0000)
struct AIMovementComponent_C_Set_Owner_Rotation final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalculateOwnerDirection_OwnerDirection;   // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_1;      // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsValidTimerHandle_ReturnValue_2;      // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue_1;                // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_1;       // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue_2;       // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast;    // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_VariableSet_ReplicatedRotationZ_ImplicitCast; // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Set_Owner_Rotation) == 0x000008, "Wrong alignment on AIMovementComponent_C_Set_Owner_Rotation");
static_assert(sizeof(AIMovementComponent_C_Set_Owner_Rotation) == 0x0000D0, "Wrong size on AIMovementComponent_C_Set_Owner_Rotation");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, DeltaSeconds) == 0x000000, "Member 'AIMovementComponent_C_Set_Owner_Rotation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue) == 0x000009, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_K2_SetTimer_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_K2_IsValidTimerHandle_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_K2_IsValidTimerHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_CalculateOwnerDirection_OwnerDirection) == 0x000020, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_CalculateOwnerDirection_OwnerDirection' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x000038, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Roll) == 0x000050, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Pitch) == 0x000054, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Yaw) == 0x000058, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_K2_IsValidTimerHandle_ReturnValue_1) == 0x00005C, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_K2_IsValidTimerHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_K2_IsValidTimerHandle_ReturnValue_2) == 0x00005D, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_K2_IsValidTimerHandle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_K2_SetTimer_ReturnValue_1) == 0x000060, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_K2_SetTimer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_Conv_VectorToRotator_ReturnValue_1) == 0x000068, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_Conv_VectorToRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Roll_1) == 0x000080, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Pitch_1) == 0x000084, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Yaw_1) == 0x000088, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x00008C, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_Conv_VectorToRotator_ReturnValue_2) == 0x000090, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_Conv_VectorToRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0000A8, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Roll_2) == 0x0000AC, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Pitch_2) == 0x0000B0, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_BreakRotator_Yaw_2) == 0x0000B4, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x0000B8, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast) == 0x0000C0, "Member 'AIMovementComponent_C_Set_Owner_Rotation::CallFunc_NearlyEqual_FloatFloat_B_ImplicitCast' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Set_Owner_Rotation, K2Node_VariableSet_ReplicatedRotationZ_ImplicitCast) == 0x0000C8, "Member 'AIMovementComponent_C_Set_Owner_Rotation::K2Node_VariableSet_ReplicatedRotationZ_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetEndSpeedbyAngle
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_SetEndSpeedbyAngle final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetEndSpeedbyAngle) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetEndSpeedbyAngle");
static_assert(sizeof(AIMovementComponent_C_SetEndSpeedbyAngle) == 0x000010, "Wrong size on AIMovementComponent_C_SetEndSpeedbyAngle");
static_assert(offsetof(AIMovementComponent_C_SetEndSpeedbyAngle, Angle) == 0x000000, "Member 'AIMovementComponent_C_SetEndSpeedbyAngle::Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetEndSpeedbyAngle, CallFunc_MapRangeClamped_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_SetEndSpeedbyAngle::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetMovementSettings
// 0x0050 (0x0050 - 0x0000)
struct AIMovementComponent_C_SetMovementSettings final
{
public:
	TMap<E_AIMovementType, struct FF_MovementSettings> NewMovementSettings;                               // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(AIMovementComponent_C_SetMovementSettings) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetMovementSettings");
static_assert(sizeof(AIMovementComponent_C_SetMovementSettings) == 0x000050, "Wrong size on AIMovementComponent_C_SetMovementSettings");
static_assert(offsetof(AIMovementComponent_C_SetMovementSettings, NewMovementSettings) == 0x000000, "Member 'AIMovementComponent_C_SetMovementSettings::NewMovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetMovementSettingsCPP
// 0x0050 (0x0050 - 0x0000)
struct AIMovementComponent_C_SetMovementSettingsCPP final
{
public:
	TMap<Survival::EMovementType, struct FF_MovementSettings> NewMovementSettingsCPP;                            // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(AIMovementComponent_C_SetMovementSettingsCPP) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetMovementSettingsCPP");
static_assert(sizeof(AIMovementComponent_C_SetMovementSettingsCPP) == 0x000050, "Wrong size on AIMovementComponent_C_SetMovementSettingsCPP");
static_assert(offsetof(AIMovementComponent_C_SetMovementSettingsCPP, NewMovementSettingsCPP) == 0x000000, "Member 'AIMovementComponent_C_SetMovementSettingsCPP::NewMovementSettingsCPP' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetMovementType
// 0x0002 (0x0002 - 0x0000)
struct AIMovementComponent_C_SetMovementType final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Survival::EMovementType                       NewParam;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetMovementType) == 0x000001, "Wrong alignment on AIMovementComponent_C_SetMovementType");
static_assert(sizeof(AIMovementComponent_C_SetMovementType) == 0x000002, "Wrong size on AIMovementComponent_C_SetMovementType");
static_assert(offsetof(AIMovementComponent_C_SetMovementType, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetMovementType::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetMovementType, NewParam) == 0x000001, "Member 'AIMovementComponent_C_SetMovementType::NewParam' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetOwnerRotationClient
// 0x0028 (0x0028 - 0x0000)
struct AIMovementComponent_C_SetOwnerRotationClient final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetOwnerRotationClient) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetOwnerRotationClient");
static_assert(sizeof(AIMovementComponent_C_SetOwnerRotationClient) == 0x000028, "Wrong size on AIMovementComponent_C_SetOwnerRotationClient");
static_assert(offsetof(AIMovementComponent_C_SetOwnerRotationClient, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_SetOwnerRotationClient::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerRotationClient, CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue) == 0x000001, "Member 'AIMovementComponent_C_SetOwnerRotationClient::CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerRotationClient, CallFunc_MakeRotator_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_SetOwnerRotationClient::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerRotationClient, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_SetOwnerRotationClient::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerRotationClient, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000024, "Member 'AIMovementComponent_C_SetOwnerRotationClient::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetOwnerVelocity
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_SetOwnerVelocity final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetOwnerVelocity) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetOwnerVelocity");
static_assert(sizeof(AIMovementComponent_C_SetOwnerVelocity) == 0x000018, "Wrong size on AIMovementComponent_C_SetOwnerVelocity");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocity, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_SetOwnerVelocity::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocity, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_SetOwnerVelocity::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocity, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_SetOwnerVelocity::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetOwnerVelocityClient
// 0x0058 (0x0058 - 0x0000)
struct AIMovementComponent_C_SetOwnerVelocityClient final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue; // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetOwnerVelocityClient) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetOwnerVelocityClient");
static_assert(sizeof(AIMovementComponent_C_SetOwnerVelocityClient) == 0x000058, "Wrong size on AIMovementComponent_C_SetOwnerVelocityClient");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocityClient, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_SetOwnerVelocityClient::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocityClient, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_SetOwnerVelocityClient::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocityClient, CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_SetOwnerVelocityClient::CallFunc_IsPlayingNetworkedRootMotionMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocityClient, CallFunc_Normal_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_SetOwnerVelocityClient::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetOwnerVelocityClient, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000040, "Member 'AIMovementComponent_C_SetOwnerVelocityClient::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetPathPoints
// 0x0088 (0x0088 - 0x0000)
struct AIMovementComponent_C_SetPathPoints final
{
public:
	TArray<struct FVector>                        InPoints;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector_NetQuantize>            NewPathPoints;                                     // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_MakeVector_NetQuantize_ReturnValue;       // 0x0068(0x0018)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetPathPoints) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetPathPoints");
static_assert(sizeof(AIMovementComponent_C_SetPathPoints) == 0x000088, "Wrong size on AIMovementComponent_C_SetPathPoints");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, InPoints) == 0x000000, "Member 'AIMovementComponent_C_SetPathPoints::InPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, NewPathPoints) == 0x000010, "Member 'AIMovementComponent_C_SetPathPoints::NewPathPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, Temp_int_Array_Index_Variable) == 0x000024, "Member 'AIMovementComponent_C_SetPathPoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'AIMovementComponent_C_SetPathPoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_Array_Get_Item) == 0x000030, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_BreakVector_X) == 0x000048, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_BreakVector_Y) == 0x000050, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_BreakVector_Z) == 0x000058, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_MakeVector_NetQuantize_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_MakeVector_NetQuantize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetPathPoints, CallFunc_Array_Add_ReturnValue) == 0x000084, "Member 'AIMovementComponent_C_SetPathPoints::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateAcceleration
// 0x0228 (0x0228 - 0x0000)
struct AIMovementComponent_C_SetStateAcceleration final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0018(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x00A0(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value_1;                         // 0x0120(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings_1;            // 0x01A8(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateAcceleration) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateAcceleration");
static_assert(sizeof(AIMovementComponent_C_SetStateAcceleration) == 0x000228, "Wrong size on AIMovementComponent_C_SetStateAcceleration");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateAcceleration::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateAcceleration::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_Conv_IntToByte_ReturnValue) == 0x000014, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_GetValidValue_ReturnValue) == 0x000015, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_Map_Find_Value) == 0x000018, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_Map_Find_ReturnValue) == 0x000098, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, K2Node_MakeStruct_F_MovementSettings) == 0x0000A0, "Member 'AIMovementComponent_C_SetStateAcceleration::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_Map_Find_Value_1) == 0x000120, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, CallFunc_Map_Find_ReturnValue_1) == 0x0001A0, "Member 'AIMovementComponent_C_SetStateAcceleration::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAcceleration, K2Node_MakeStruct_F_MovementSettings_1) == 0x0001A8, "Member 'AIMovementComponent_C_SetStateAcceleration::K2Node_MakeStruct_F_MovementSettings_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateAfterDecreaseAdjustment
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateAfterDecreaseAdjustment final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateAfterDecreaseAdjustment");
static_assert(sizeof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateAfterDecreaseAdjustment");
static_assert(offsetof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateAfterDecreaseAdjustment::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateAfterDecreaseAdjustment::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateAfterDecreaseAdjustment::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateAfterDecreaseAdjustment::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateAfterDecreaseAdjustment, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateAfterDecreaseAdjustment::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateChangePointDist
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateChangePointDist final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateChangePointDist) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateChangePointDist");
static_assert(sizeof(AIMovementComponent_C_SetStateChangePointDist) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateChangePointDist");
static_assert(offsetof(AIMovementComponent_C_SetStateChangePointDist, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateChangePointDist::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateChangePointDist, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateChangePointDist::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateChangePointDist, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateChangePointDist::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateChangePointDist, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateChangePointDist::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateChangePointDist, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateChangePointDist::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateCloseDirInterpSpeed
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateCloseDirInterpSpeed final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateCloseDirInterpSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateCloseDirInterpSpeed");
static_assert(sizeof(AIMovementComponent_C_SetStateCloseDirInterpSpeed) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateCloseDirInterpSpeed");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseDirInterpSpeed, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateCloseDirInterpSpeed::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseDirInterpSpeed, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateCloseDirInterpSpeed::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseDirInterpSpeed, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateCloseDirInterpSpeed::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseDirInterpSpeed, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateCloseDirInterpSpeed::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseDirInterpSpeed, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateCloseDirInterpSpeed::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateCloseToTargetDist
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateCloseToTargetDist final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateCloseToTargetDist) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateCloseToTargetDist");
static_assert(sizeof(AIMovementComponent_C_SetStateCloseToTargetDist) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateCloseToTargetDist");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseToTargetDist, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateCloseToTargetDist::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseToTargetDist, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateCloseToTargetDist::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseToTargetDist, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateCloseToTargetDist::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseToTargetDist, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateCloseToTargetDist::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateCloseToTargetDist, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateCloseToTargetDist::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateDeceleration
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateDeceleration final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateDeceleration) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateDeceleration");
static_assert(sizeof(AIMovementComponent_C_SetStateDeceleration) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateDeceleration");
static_assert(offsetof(AIMovementComponent_C_SetStateDeceleration, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateDeceleration::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDeceleration, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateDeceleration::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDeceleration, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateDeceleration::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDeceleration, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateDeceleration::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDeceleration, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateDeceleration::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateDecreaseStateDist
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateDecreaseStateDist final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateDecreaseStateDist) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateDecreaseStateDist");
static_assert(sizeof(AIMovementComponent_C_SetStateDecreaseStateDist) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateDecreaseStateDist");
static_assert(offsetof(AIMovementComponent_C_SetStateDecreaseStateDist, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateDecreaseStateDist::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDecreaseStateDist, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateDecreaseStateDist::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDecreaseStateDist, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateDecreaseStateDist::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDecreaseStateDist, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateDecreaseStateDist::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateDecreaseStateDist, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateDecreaseStateDist::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateHighestAngle
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateHighestAngle final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateHighestAngle) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateHighestAngle");
static_assert(sizeof(AIMovementComponent_C_SetStateHighestAngle) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateHighestAngle");
static_assert(offsetof(AIMovementComponent_C_SetStateHighestAngle, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateHighestAngle::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateHighestAngle, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateHighestAngle::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateHighestAngle, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateHighestAngle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateHighestAngle, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateHighestAngle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateHighestAngle, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateHighestAngle::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateIncreaseStateDist
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateIncreaseStateDist final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateIncreaseStateDist) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateIncreaseStateDist");
static_assert(sizeof(AIMovementComponent_C_SetStateIncreaseStateDist) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateIncreaseStateDist");
static_assert(offsetof(AIMovementComponent_C_SetStateIncreaseStateDist, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateIncreaseStateDist::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateIncreaseStateDist, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateIncreaseStateDist::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateIncreaseStateDist, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateIncreaseStateDist::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateIncreaseStateDist, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateIncreaseStateDist::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateIncreaseStateDist, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateIncreaseStateDist::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateLowestAngle
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateLowestAngle final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateLowestAngle) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateLowestAngle");
static_assert(sizeof(AIMovementComponent_C_SetStateLowestAngle) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateLowestAngle");
static_assert(offsetof(AIMovementComponent_C_SetStateLowestAngle, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateLowestAngle::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateLowestAngle, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateLowestAngle::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateLowestAngle, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateLowestAngle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateLowestAngle, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateLowestAngle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateLowestAngle, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateLowestAngle::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateMaxDirInterpSpeed
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateMaxDirInterpSpeed final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateMaxDirInterpSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateMaxDirInterpSpeed");
static_assert(sizeof(AIMovementComponent_C_SetStateMaxDirInterpSpeed) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateMaxDirInterpSpeed");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxDirInterpSpeed, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateMaxDirInterpSpeed::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxDirInterpSpeed, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateMaxDirInterpSpeed::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxDirInterpSpeed, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateMaxDirInterpSpeed::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxDirInterpSpeed, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateMaxDirInterpSpeed::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxDirInterpSpeed, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateMaxDirInterpSpeed::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateMaxSpeed
// 0x0228 (0x0228 - 0x0000)
struct AIMovementComponent_C_SetStateMaxSpeed final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0018(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x00A0(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value_1;                         // 0x0120(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x7];                                      // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings_1;            // 0x01A8(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateMaxSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateMaxSpeed");
static_assert(sizeof(AIMovementComponent_C_SetStateMaxSpeed) == 0x000228, "Wrong size on AIMovementComponent_C_SetStateMaxSpeed");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateMaxSpeed::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateMaxSpeed::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_Conv_IntToByte_ReturnValue) == 0x000014, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_GetValidValue_ReturnValue) == 0x000015, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_Map_Find_Value) == 0x000018, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_Map_Find_ReturnValue) == 0x000098, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, K2Node_MakeStruct_F_MovementSettings) == 0x0000A0, "Member 'AIMovementComponent_C_SetStateMaxSpeed::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_Map_Find_Value_1) == 0x000120, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, CallFunc_Map_Find_ReturnValue_1) == 0x0001A0, "Member 'AIMovementComponent_C_SetStateMaxSpeed::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMaxSpeed, K2Node_MakeStruct_F_MovementSettings_1) == 0x0001A8, "Member 'AIMovementComponent_C_SetStateMaxSpeed::K2Node_MakeStruct_F_MovementSettings_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateMinDirInterpSpeed
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateMinDirInterpSpeed final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateMinDirInterpSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateMinDirInterpSpeed");
static_assert(sizeof(AIMovementComponent_C_SetStateMinDirInterpSpeed) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateMinDirInterpSpeed");
static_assert(offsetof(AIMovementComponent_C_SetStateMinDirInterpSpeed, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateMinDirInterpSpeed::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinDirInterpSpeed, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateMinDirInterpSpeed::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinDirInterpSpeed, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateMinDirInterpSpeed::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinDirInterpSpeed, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateMinDirInterpSpeed::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinDirInterpSpeed, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateMinDirInterpSpeed::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateMinSpeed
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateMinSpeed final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateMinSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateMinSpeed");
static_assert(sizeof(AIMovementComponent_C_SetStateMinSpeed) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateMinSpeed");
static_assert(offsetof(AIMovementComponent_C_SetStateMinSpeed, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateMinSpeed::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinSpeed, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateMinSpeed::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinSpeed, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateMinSpeed::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinSpeed, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateMinSpeed::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateMinSpeed, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateMinSpeed::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateSpeedInterpSpeed
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateSpeedInterpSpeed final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateSpeedInterpSpeed) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateSpeedInterpSpeed");
static_assert(sizeof(AIMovementComponent_C_SetStateSpeedInterpSpeed) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateSpeedInterpSpeed");
static_assert(offsetof(AIMovementComponent_C_SetStateSpeedInterpSpeed, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateSpeedInterpSpeed::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateSpeedInterpSpeed, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateSpeedInterpSpeed::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateSpeedInterpSpeed, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateSpeedInterpSpeed::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateSpeedInterpSpeed, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateSpeedInterpSpeed::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateSpeedInterpSpeed, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateSpeedInterpSpeed::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.SetStateTwistCheckDistance
// 0x0118 (0x0118 - 0x0000)
struct AIMovementComponent_C_SetStateTwistCheckDistance final
{
public:
	E_AIMovementType                              Param_MovementType;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FF_MovementSettings                    CallFunc_Map_Find_Value;                           // 0x0010(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_MovementSettings                    K2Node_MakeStruct_F_MovementSettings;              // 0x0098(0x0080)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_SetStateTwistCheckDistance) == 0x000008, "Wrong alignment on AIMovementComponent_C_SetStateTwistCheckDistance");
static_assert(sizeof(AIMovementComponent_C_SetStateTwistCheckDistance) == 0x000118, "Wrong size on AIMovementComponent_C_SetStateTwistCheckDistance");
static_assert(offsetof(AIMovementComponent_C_SetStateTwistCheckDistance, Param_MovementType) == 0x000000, "Member 'AIMovementComponent_C_SetStateTwistCheckDistance::Param_MovementType' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateTwistCheckDistance, NewValue) == 0x000008, "Member 'AIMovementComponent_C_SetStateTwistCheckDistance::NewValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateTwistCheckDistance, CallFunc_Map_Find_Value) == 0x000010, "Member 'AIMovementComponent_C_SetStateTwistCheckDistance::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateTwistCheckDistance, CallFunc_Map_Find_ReturnValue) == 0x000090, "Member 'AIMovementComponent_C_SetStateTwistCheckDistance::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_SetStateTwistCheckDistance, K2Node_MakeStruct_F_MovementSettings) == 0x000098, "Member 'AIMovementComponent_C_SetStateTwistCheckDistance::K2Node_MakeStruct_F_MovementSettings' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.StartMovement
// 0x0038 (0x0038 - 0x0000)
struct AIMovementComponent_C_StartMovement final
{
public:
	bool                                          StartFromAnimation;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    CallFunc_Array_Get_Item;                           // 0x0010(0x0018)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_StartMovement) == 0x000008, "Wrong alignment on AIMovementComponent_C_StartMovement");
static_assert(sizeof(AIMovementComponent_C_StartMovement) == 0x000038, "Wrong size on AIMovementComponent_C_StartMovement");
static_assert(offsetof(AIMovementComponent_C_StartMovement, StartFromAnimation) == 0x000000, "Member 'AIMovementComponent_C_StartMovement::StartFromAnimation' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StartMovement, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_StartMovement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StartMovement, CallFunc_Array_LastIndex_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_StartMovement::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StartMovement, CallFunc_Greater_IntInt_ReturnValue) == 0x00000C, "Member 'AIMovementComponent_C_StartMovement::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StartMovement, CallFunc_Array_Get_Item) == 0x000010, "Member 'AIMovementComponent_C_StartMovement::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StartMovement, CallFunc_Vector_Distance_ReturnValue) == 0x000028, "Member 'AIMovementComponent_C_StartMovement::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StartMovement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_StartMovement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.StopAnimationMovement
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_StopAnimationMovement final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_StopAnimationMovement) == 0x000008, "Wrong alignment on AIMovementComponent_C_StopAnimationMovement");
static_assert(sizeof(AIMovementComponent_C_StopAnimationMovement) == 0x000010, "Wrong size on AIMovementComponent_C_StopAnimationMovement");
static_assert(offsetof(AIMovementComponent_C_StopAnimationMovement, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_StopAnimationMovement::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopAnimationMovement, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_StopAnimationMovement::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.StopCalculations
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_StopCalculations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCPPVelocityValue_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCPPIsStopping_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast;    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_StopCalculations) == 0x000008, "Wrong alignment on AIMovementComponent_C_StopCalculations");
static_assert(sizeof(AIMovementComponent_C_StopCalculations) == 0x000018, "Wrong size on AIMovementComponent_C_StopCalculations");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_StopCalculations::ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_GetCPPVelocityValue_ReturnValue) == 0x000004, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_GetCPPVelocityValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_GetCPPIsStopping_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_GetCPPIsStopping_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_BooleanAND_ReturnValue_1) == 0x00000C, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopCalculations, CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast) == 0x000010, "Member 'AIMovementComponent_C_StopCalculations::CallFunc_NearlyEqual_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.StopExtractionRotationFromAnimation
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_StopExtractionRotationFromAnimation final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_StopExtractionRotationFromAnimation) == 0x000008, "Wrong alignment on AIMovementComponent_C_StopExtractionRotationFromAnimation");
static_assert(sizeof(AIMovementComponent_C_StopExtractionRotationFromAnimation) == 0x000010, "Wrong size on AIMovementComponent_C_StopExtractionRotationFromAnimation");
static_assert(offsetof(AIMovementComponent_C_StopExtractionRotationFromAnimation, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_StopExtractionRotationFromAnimation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopExtractionRotationFromAnimation, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_StopExtractionRotationFromAnimation::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.StopMovementImmediately 
// 0x0010 (0x0010 - 0x0000)
struct AIMovementComponent_C_StopMovementImmediately_ final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_StopMovementImmediately_) == 0x000008, "Wrong alignment on AIMovementComponent_C_StopMovementImmediately_");
static_assert(sizeof(AIMovementComponent_C_StopMovementImmediately_) == 0x000010, "Wrong size on AIMovementComponent_C_StopMovementImmediately_");
static_assert(offsetof(AIMovementComponent_C_StopMovementImmediately_, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_StopMovementImmediately_::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopMovementImmediately_, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_StopMovementImmediately_::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.StopPathOnTooBigAngle
// 0x0100 (0x0100 - 0x0000)
struct AIMovementComponent_C_StopPathOnTooBigAngle final
{
public:
	TArray<struct FVector>                        PathPointsArr;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<struct FVector>                        Param_PathPoints;                                  // 0x0010(0x0010)(Parm, OutParm)
	TArray<struct FVector>                        ResultPath;                                        // 0x0020(0x0010)(Edit, BlueprintVisible)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleBetweenTwoVectors_Angle;          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_StopPathOnTooBigAngle) == 0x000008, "Wrong alignment on AIMovementComponent_C_StopPathOnTooBigAngle");
static_assert(sizeof(AIMovementComponent_C_StopPathOnTooBigAngle) == 0x000100, "Wrong size on AIMovementComponent_C_StopPathOnTooBigAngle");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, PathPointsArr) == 0x000000, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::PathPointsArr' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, Param_PathPoints) == 0x000010, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::Param_PathPoints' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, ResultPath) == 0x000020, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::ResultPath' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Array_Length_ReturnValue_1) == 0x000034, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, Temp_int_Array_Index_Variable) == 0x000038, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Greater_IntInt_ReturnValue) == 0x00003C, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Array_Get_Item) == 0x000040, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Subtract_IntInt_ReturnValue) == 0x000058, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00005C, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000060, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Array_Get_Item_2) == 0x000090, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A8, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0000C0, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_GetAngleBetweenTwoVectors_Angle) == 0x0000D8, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_GetAngleBetweenTwoVectors_Angle' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Abs_ReturnValue) == 0x0000E0, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Conv_DoubleToString_ReturnValue) == 0x0000E8, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_StopPathOnTooBigAngle, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000F8, "Member 'AIMovementComponent_C_StopPathOnTooBigAngle::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Time To Change To Decreasing State
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_Time_To_Change_To_Decreasing_State final
{
public:
	bool                                          Change;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDistanceToNextPoint_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Time_To_Change_To_Decreasing_State) == 0x000008, "Wrong alignment on AIMovementComponent_C_Time_To_Change_To_Decreasing_State");
static_assert(sizeof(AIMovementComponent_C_Time_To_Change_To_Decreasing_State) == 0x000018, "Wrong size on AIMovementComponent_C_Time_To_Change_To_Decreasing_State");
static_assert(offsetof(AIMovementComponent_C_Time_To_Change_To_Decreasing_State, Change) == 0x000000, "Member 'AIMovementComponent_C_Time_To_Change_To_Decreasing_State::Change' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Time_To_Change_To_Decreasing_State, CallFunc_GetDistanceToNextPoint_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_Time_To_Change_To_Decreasing_State::CallFunc_GetDistanceToNextPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Time_To_Change_To_Decreasing_State, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_Time_To_Change_To_Decreasing_State::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.Time to Change to Increasing State
// 0x0002 (0x0002 - 0x0000)
struct AIMovementComponent_C_Time_to_Change_to_Increasing_State final
{
public:
	bool                                          Change;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_Time_to_Change_to_Increasing_State) == 0x000001, "Wrong alignment on AIMovementComponent_C_Time_to_Change_to_Increasing_State");
static_assert(sizeof(AIMovementComponent_C_Time_to_Change_to_Increasing_State) == 0x000002, "Wrong size on AIMovementComponent_C_Time_to_Change_to_Increasing_State");
static_assert(offsetof(AIMovementComponent_C_Time_to_Change_to_Increasing_State, Change) == 0x000000, "Member 'AIMovementComponent_C_Time_to_Change_to_Increasing_State::Change' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_Time_to_Change_to_Increasing_State, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000001, "Member 'AIMovementComponent_C_Time_to_Change_to_Increasing_State::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.TimeToChangePointIndex
// 0x0028 (0x0028 - 0x0000)
struct AIMovementComponent_C_TimeToChangePointIndex final
{
public:
	bool                                          Change;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDistanceToStop_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LastPointIsTarget_IsTarget;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetDistanceToNextPoint_ReturnValue;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_TimeToChangePointIndex) == 0x000008, "Wrong alignment on AIMovementComponent_C_TimeToChangePointIndex");
static_assert(sizeof(AIMovementComponent_C_TimeToChangePointIndex) == 0x000028, "Wrong size on AIMovementComponent_C_TimeToChangePointIndex");
static_assert(offsetof(AIMovementComponent_C_TimeToChangePointIndex, Change) == 0x000000, "Member 'AIMovementComponent_C_TimeToChangePointIndex::Change' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TimeToChangePointIndex, CallFunc_GetDistanceToStop_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_TimeToChangePointIndex::CallFunc_GetDistanceToStop_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TimeToChangePointIndex, CallFunc_LastPointIsTarget_IsTarget) == 0x000010, "Member 'AIMovementComponent_C_TimeToChangePointIndex::CallFunc_LastPointIsTarget_IsTarget' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TimeToChangePointIndex, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000011, "Member 'AIMovementComponent_C_TimeToChangePointIndex::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TimeToChangePointIndex, CallFunc_GetDistanceToNextPoint_ReturnValue) == 0x000018, "Member 'AIMovementComponent_C_TimeToChangePointIndex::CallFunc_GetDistanceToNextPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TimeToChangePointIndex, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000020, "Member 'AIMovementComponent_C_TimeToChangePointIndex::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.TwistDetected
// 0x0018 (0x0018 - 0x0000)
struct AIMovementComponent_C_TwistDetected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_Distance2D_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_TwistDetected) == 0x000008, "Wrong alignment on AIMovementComponent_C_TwistDetected");
static_assert(sizeof(AIMovementComponent_C_TwistDetected) == 0x000018, "Wrong size on AIMovementComponent_C_TwistDetected");
static_assert(offsetof(AIMovementComponent_C_TwistDetected, ReturnValue) == 0x000000, "Member 'AIMovementComponent_C_TwistDetected::ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TwistDetected, CallFunc_Vector_Distance2D_ReturnValue) == 0x000008, "Member 'AIMovementComponent_C_TwistDetected::CallFunc_Vector_Distance2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_TwistDetected, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000010, "Member 'AIMovementComponent_C_TwistDetected::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function AIMovementComponent.AIMovementComponent_C.UnblockZombieFromWaterTarget
// 0x02D0 (0x02D0 - 0x0000)
struct AIMovementComponent_C_UnblockZombieFromWaterTarget final
{
public:
	struct FVector                                Trace_start_location;                              // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_Select_Default;                             // 0x0078(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00A0(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0190(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C2[0x2];                                      // 0x01C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0218(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0240(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0268(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0280(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0298(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_New_NV_Water_C*                     K2Node_DynamicCast_AsBP_New_NV_Water;              // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APhysicsVolume*                         K2Node_DynamicCast_AsPhysics_Volume;               // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AIMovementComponent_C_UnblockZombieFromWaterTarget) == 0x000008, "Wrong alignment on AIMovementComponent_C_UnblockZombieFromWaterTarget");
static_assert(sizeof(AIMovementComponent_C_UnblockZombieFromWaterTarget) == 0x0002D0, "Wrong size on AIMovementComponent_C_UnblockZombieFromWaterTarget");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, Trace_start_location) == 0x000000, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::Trace_start_location' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, Temp_bool_Variable) == 0x000018, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_MakeArray_Array) == 0x000020, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000030, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_MakeArray_Array_1) == 0x000048, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000060, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_Select_Default) == 0x000078, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_Normal_ReturnValue) == 0x000088, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_LineTraceSingle_OutHit) == 0x0000A0, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_LineTraceSingle_ReturnValue) == 0x000188, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000190, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_Add_VectorVector_ReturnValue) == 0x0001A8, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_bBlockingHit) == 0x0001C0, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001C1, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_Time) == 0x0001C4, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_Distance) == 0x0001C8, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_Location) == 0x0001D0, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_ImpactPoint) == 0x0001E8, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_Normal) == 0x000200, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_ImpactNormal) == 0x000218, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_PhysMat) == 0x000230, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_HitActor) == 0x000238, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_HitComponent) == 0x000240, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_HitBoneName) == 0x000248, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_BoneName) == 0x000250, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_HitItem) == 0x000258, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_ElementIndex) == 0x00025C, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_FaceIndex) == 0x000260, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_TraceStart) == 0x000268, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_BreakHitResult_TraceEnd) == 0x000280, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000298, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_DynamicCast_AsBP_New_NV_Water) == 0x0002B0, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_DynamicCast_AsBP_New_NV_Water' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_DynamicCast_bSuccess) == 0x0002B8, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_DynamicCast_AsPhysics_Volume) == 0x0002C0, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_DynamicCast_AsPhysics_Volume' has a wrong offset!");
static_assert(offsetof(AIMovementComponent_C_UnblockZombieFromWaterTarget, K2Node_DynamicCast_bSuccess_1) == 0x0002C8, "Member 'AIMovementComponent_C_UnblockZombieFromWaterTarget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

