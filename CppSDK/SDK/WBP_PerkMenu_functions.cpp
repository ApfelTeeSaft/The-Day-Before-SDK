#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PerkMenu

#include "Basic.hpp"

#include "WBP_PerkMenu_classes.hpp"
#include "WBP_PerkMenu_parameters.hpp"


namespace SDK
{

// Function WBP_PerkMenu.WBP_PerkMenu_C.Accept Message
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::Accept_Message()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "Accept Message");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.Accept_Confirmation_Perks
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::Accept_Confirmation_Perks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "Accept_Confirmation_Perks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.AcceptButtonCalled_PerkMenu_ED__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::AcceptButtonCalled_PerkMenu_ED__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "AcceptButtonCalled_PerkMenu_ED__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.AddChildrenPerks
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::AddChildrenPerks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "AddChildrenPerks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BackButtonCalled_PerkMenu_ED__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::BackButtonCalled_PerkMenu_ED__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BackButtonCalled_PerkMenu_ED__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BackButtonTraits__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::BackButtonTraits__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BackButtonTraits__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BindedEvent_HandlePressOnCard
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PerkCard_C*                    GivenPerkCard                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::BindedEvent_HandlePressOnCard(class UW_PerkCard_C* GivenPerkCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BindedEvent_HandlePressOnCard");

	Params::WBP_PerkMenu_C_BindedEvent_HandlePressOnCard Parms{};

	Parms.GivenPerkCard = GivenPerkCard;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_2_PressedAccept_PerkDialogue_ED__DelegateSignature
// (BlueprintEvent)

void UWBP_PerkMenu_C::BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_2_PressedAccept_PerkDialogue_ED__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_2_PressedAccept_PerkDialogue_ED__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_3_PressedDecline_PerkDialogue_ED__DelegateSignature
// (BlueprintEvent)

void UWBP_PerkMenu_C::BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_3_PressedDecline_PerkDialogue_ED__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_3_PressedDecline_PerkDialogue_ED__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_6_OnClickedNotification__DelegateSignature
// (BlueprintEvent)

void UWBP_PerkMenu_C::BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_6_OnClickedNotification__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BndEvt__WBP_PerkMenu_W_DialoguePerks_K2Node_ComponentBoundEvent_6_OnClickedNotification__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BndEvt__WBP_PerkMenu_W_HintButton_Accept_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature
// (BlueprintEvent)

void UWBP_PerkMenu_C::BndEvt__WBP_PerkMenu_W_HintButton_Accept_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BndEvt__WBP_PerkMenu_W_HintButton_Accept_K2Node_ComponentBoundEvent_0_OnPressed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.BndEvt__WBP_PerkMenu_W_HintButton_Back_K2Node_ComponentBoundEvent_7_OnPressed__DelegateSignature
// (BlueprintEvent)

void UWBP_PerkMenu_C::BndEvt__WBP_PerkMenu_W_HintButton_Back_K2Node_ComponentBoundEvent_7_OnPressed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "BndEvt__WBP_PerkMenu_W_HintButton_Back_K2Node_ComponentBoundEvent_7_OnPressed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.CallErrorMessage_MaximumTraits
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::CallErrorMessage_MaximumTraits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "CallErrorMessage_MaximumTraits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.CallErrorMessage_NotEnoughPoints
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::CallErrorMessage_NotEnoughPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "CallErrorMessage_NotEnoughPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.CheckPerksCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UW_PerkCard_C*                    Perk                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    CanAdd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::CheckPerksCount(class UW_PerkCard_C* Perk, bool* CanAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "CheckPerksCount");

	Params::WBP_PerkMenu_C_CheckPerksCount Parms{};

	Parms.Perk = Perk;

	UObject::ProcessEvent(Func, &Parms);

	if (CanAdd != nullptr)
		*CanAdd = Parms.CanAdd;
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.CheckPickedTraits
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::CheckPickedTraits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "CheckPickedTraits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.CheckPoints
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::CheckPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "CheckPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.ClearSelectedPerks
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::ClearSelectedPerks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "ClearSelectedPerks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.CreateEmptyPerksSlots
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::CreateEmptyPerksSlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "CreateEmptyPerksSlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.Decline_Confirmation_Perks
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::Decline_Confirmation_Perks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "Decline_Confirmation_Perks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_PerkMenu_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.ExecuteUbergraph_WBP_PerkMenu
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::ExecuteUbergraph_WBP_PerkMenu(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "ExecuteUbergraph_WBP_PerkMenu");

	Params::WBP_PerkMenu_C_ExecuteUbergraph_WBP_PerkMenu Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.FillWithEmptySlots
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUniformGridPanel*                GridPanel                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::FillWithEmptySlots(class UUniformGridPanel* GridPanel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "FillWithEmptySlots");

	Params::WBP_PerkMenu_C_FillWithEmptySlots Parms{};

	Parms.GridPanel = GridPanel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.GetMaxSelectedPerksNumber
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Param_MaxSelectedPerksNumber                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::GetMaxSelectedPerksNumber(int32* Param_MaxSelectedPerksNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "GetMaxSelectedPerksNumber");

	Params::WBP_PerkMenu_C_GetMaxSelectedPerksNumber Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_MaxSelectedPerksNumber != nullptr)
		*Param_MaxSelectedPerksNumber = Parms.Param_MaxSelectedPerksNumber;
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.GetSelectedPerks
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UW_PerkCard_C*>            Param_SelectedPerks                                    (Parm, OutParm, ContainsInstancedReference)

void UWBP_PerkMenu_C::GetSelectedPerks(TArray<class UW_PerkCard_C*>* Param_SelectedPerks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "GetSelectedPerks");

	Params::WBP_PerkMenu_C_GetSelectedPerks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_SelectedPerks != nullptr)
		*Param_SelectedPerks = std::move(Parms.Param_SelectedPerks);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.OnInitialized
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UWBP_PerkMenu_C::OnInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "OnInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "PreConstruct");

	Params::WBP_PerkMenu_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.ReaclculateSelectedPerksPositions
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::ReaclculateSelectedPerksPositions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "ReaclculateSelectedPerksPositions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.RemovePerk
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PerkCard_C*                    PerkCard                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::RemovePerk(class UW_PerkCard_C* PerkCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "RemovePerk");

	Params::WBP_PerkMenu_C_RemovePerk Parms{};

	Parms.PerkCard = PerkCard;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.Show Message
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::Show_Message()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "Show Message");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.ShowEmptySlots
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::ShowEmptySlots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "ShowEmptySlots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.ShowNotification
// (BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::ShowNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "ShowNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.UpdatedTraitPointsCount
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_PerkMenu_C::UpdatedTraitPointsCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "UpdatedTraitPointsCount");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_PerkMenu.WBP_PerkMenu_C.UpdatePerkPoints
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_PerkCard_C*                    GivenPerkCard                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_PerkMenu_C::UpdatePerkPoints(class UW_PerkCard_C* GivenPerkCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_PerkMenu_C", "UpdatePerkPoints");

	Params::WBP_PerkMenu_C_UpdatePerkPoints Parms{};

	Parms.GivenPerkCard = GivenPerkCard;

	UObject::ProcessEvent(Func, &Parms);
}

}

