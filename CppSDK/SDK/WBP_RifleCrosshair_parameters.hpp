#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_RifleCrosshair

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_RifleCrosshair.WBP_RifleCrosshair_C.Aim
// 0x0001 (0x0001 - 0x0000)
struct WBP_RifleCrosshair_C_Aim final
{
public:
	bool                                          Param_Aim;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_RifleCrosshair_C_Aim) == 0x000001, "Wrong alignment on WBP_RifleCrosshair_C_Aim");
static_assert(sizeof(WBP_RifleCrosshair_C_Aim) == 0x000001, "Wrong size on WBP_RifleCrosshair_C_Aim");
static_assert(offsetof(WBP_RifleCrosshair_C_Aim, Param_Aim) == 0x000000, "Member 'WBP_RifleCrosshair_C_Aim::Param_Aim' has a wrong offset!");

// Function WBP_RifleCrosshair.WBP_RifleCrosshair_C.DotEvent
// 0x0001 (0x0001 - 0x0000)
struct WBP_RifleCrosshair_C_DotEvent final
{
public:
	bool                                          On_;                                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_RifleCrosshair_C_DotEvent) == 0x000001, "Wrong alignment on WBP_RifleCrosshair_C_DotEvent");
static_assert(sizeof(WBP_RifleCrosshair_C_DotEvent) == 0x000001, "Wrong size on WBP_RifleCrosshair_C_DotEvent");
static_assert(offsetof(WBP_RifleCrosshair_C_DotEvent, On_) == 0x000000, "Member 'WBP_RifleCrosshair_C_DotEvent::On_' has a wrong offset!");

// Function WBP_RifleCrosshair.WBP_RifleCrosshair_C.ExecuteUbergraph_WBP_RifleCrosshair
// 0x0058 (0x0058 - 0x0000)
struct WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Aim;                                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_On_;                            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0030(0x0008)(NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Vector2DInterpTo_ReturnValue;             // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_SetTimerDelegate_Time_ImplicitCast;    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector2DInterpTo_DeltaTime_ImplicitCast;  // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair) == 0x000008, "Wrong alignment on WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair");
static_assert(sizeof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair) == 0x000058, "Wrong size on WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, EntryPoint) == 0x000000, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, K2Node_Event_Aim) == 0x000014, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::K2Node_Event_Aim' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, K2Node_CustomEvent_On_) == 0x000020, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::K2Node_CustomEvent_On_' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000028, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000030, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x000038, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_Vector2DInterpTo_ReturnValue) == 0x000040, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_Vector2DInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_K2_SetTimerDelegate_Time_ImplicitCast) == 0x000050, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_K2_SetTimerDelegate_Time_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair, CallFunc_Vector2DInterpTo_DeltaTime_ImplicitCast) == 0x000054, "Member 'WBP_RifleCrosshair_C_ExecuteUbergraph_WBP_RifleCrosshair::CallFunc_Vector2DInterpTo_DeltaTime_ImplicitCast' has a wrong offset!");

// Function WBP_RifleCrosshair.WBP_RifleCrosshair_C.Shoot
// 0x0078 (0x0078 - 0x0000)
struct WBP_RifleCrosshair_C_Shoot final
{
public:
	bool                                          Shooting;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_2;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      K2Node_DynamicCast_AsSurvival_Player;              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast; // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_RifleCrosshair_C_Shoot) == 0x000008, "Wrong alignment on WBP_RifleCrosshair_C_Shoot");
static_assert(sizeof(WBP_RifleCrosshair_C_Shoot) == 0x000078, "Wrong size on WBP_RifleCrosshair_C_Shoot");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Shooting) == 0x000000, "Member 'WBP_RifleCrosshair_C_Shoot::Shooting' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Result) == 0x000001, "Member 'WBP_RifleCrosshair_C_Shoot::Result' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Temp_real_Variable) == 0x000008, "Member 'WBP_RifleCrosshair_C_Shoot::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'WBP_RifleCrosshair_C_Shoot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Temp_real_Variable_1) == 0x000018, "Member 'WBP_RifleCrosshair_C_Shoot::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Temp_bool_Variable) == 0x000020, "Member 'WBP_RifleCrosshair_C_Shoot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Temp_real_Variable_2) == 0x000028, "Member 'WBP_RifleCrosshair_C_Shoot::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'WBP_RifleCrosshair_C_Shoot::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, CallFunc_K2_GetPawn_ReturnValue) == 0x000038, "Member 'WBP_RifleCrosshair_C_Shoot::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, Temp_bool_Variable_1) == 0x000040, "Member 'WBP_RifleCrosshair_C_Shoot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, K2Node_DynamicCast_AsSurvival_Player) == 0x000048, "Member 'WBP_RifleCrosshair_C_Shoot::K2Node_DynamicCast_AsSurvival_Player' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'WBP_RifleCrosshair_C_Shoot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000051, "Member 'WBP_RifleCrosshair_C_Shoot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, K2Node_Select_Default) == 0x000058, "Member 'WBP_RifleCrosshair_C_Shoot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, K2Node_Select_Default_1) == 0x000060, "Member 'WBP_RifleCrosshair_C_Shoot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, CallFunc_PlayAnimation_ReturnValue) == 0x000068, "Member 'WBP_RifleCrosshair_C_Shoot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_RifleCrosshair_C_Shoot, CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast) == 0x000070, "Member 'WBP_RifleCrosshair_C_Shoot::CallFunc_PlayAnimation_PlaybackSpeed_ImplicitCast' has a wrong offset!");

}

