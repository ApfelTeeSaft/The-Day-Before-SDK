#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ParentZombieAI

#include "Basic.hpp"

#include "E_WalkType_structs.hpp"
#include "Engine_structs.hpp"
#include "ParentAI_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ClimbParams_structs.hpp"
#include "ComponentAndTransform_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "ClimBType_structs.hpp"
#include "E_SmoothSynsPrefab_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ParentZombieAI.ParentZombieAI_C
// 0x0560 (0x0CB0 - 0x0750)
class AParentZombieAI_C : public AParentAI_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_ParentZombieAI_C;                   // 0x0748(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_TrailComponent_C*                   TrailPelvis;                                       // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   TrailRight;                                        // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   TrailLeft;                                         // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  HitMontagesIsPlaying_;                             // 0x0768(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           HeadshotFMontage;                                  // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Stunned;                                           // 0x0780(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_781[0x7];                                      // 0x0781(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeshLocation;                                      // 0x0788(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CapsuleLocation;                                   // 0x07A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFacingUp__R;                                     // 0x07B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B9[0x7];                                      // 0x07B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           GetUpMontage;                                      // 0x07C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DownMontage;                                       // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           UpMontage;                                         // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FastDownMontage;                                   // 0x07D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FastUpMontage;                                     // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         StunnedCount;                                      // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxStunnedCount;                                   // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             VehicleImpactZombie;                               // 0x07F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             VehicleZombieClimbing;                             // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Door_C*                             Door_R;                                            // 0x0800(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HeadshotBMontage;                                  // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HeadshotLMontage;                                  // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HeadshotRMontage;                                  // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StunForwadMontage;                                 // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StunBackwardMontage;                               // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StunRightMontage;                                  // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           StunLeftMontage;                                   // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   DefaultMontage_s;                                  // 0x0840(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   MeleeForwardMontage_ss;                            // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           MeleeLeftMontage;                                  // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MeleeRightMontage;                                 // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FenceDesctuct_;                                    // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_871[0x3];                                      // 0x0871(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoiceSoundTrack;                                   // 0x0874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockFenceDetect;                                  // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   HitMontages;                                       // 0x0880(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanClimb_;                                         // 0x0890(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InClimb_;                                          // 0x0891(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_892[0x6];                                      // 0x0892(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  AttackMontagesIsPlaying_;                          // 0x0898(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           DeathAnimMontage;                                  // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          BT;                                                // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BodyStiffnesTimer;                                 // 0x08B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckDoorTimer;                                    // 0x08C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ClimbIn;                                           // 0x08C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClimbParams                           ClimbParams;                                       // 0x08D0(0x00A8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_978[0x8];                                      // 0x0978(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentAndTransform                 ClimbLedgeLS;                                      // 0x0980(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             ClimbTarget;                                       // 0x0A40(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbActualStartOffset;                            // 0x0AA0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbAnimatedStartOffset;                          // 0x0B00(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbStartTransform;                               // 0x0B60(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     ClimbTimeline;                                     // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0BC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         BreathTrack;                                       // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InHouse;                                           // 0x0BE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE5[0x3];                                      // 0x0BE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DoorRot;                                           // 0x0BE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                DoorLoc;                                           // 0x0C00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MeleeBackwardMontages;                             // 0x0C18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsSpline_;                                         // 0x0C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNavmeshWalking_;                                 // 0x0C29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2A[0x6];                                      // 0x0C2A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           KnockedMontage;                                    // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        FacingUpValue;                                     // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bool;                                              // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C41[0x7];                                      // 0x0C41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ClimbTimer;                                        // 0x0C48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NotSpawned;                                        // 0x0C50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C51[0x7];                                      // 0x0C51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      BonesToHide;                                       // 0x0C58(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_WalkType                                    WalkType;                                          // 0x0CA8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void CalcAccelDecel(bool Default_, double MaxAcceleration, double BrakingDecelerationWalking);
	void CalculateFacingDirection();
	void ChanceToKnock(double HitAngle, const struct FVector& HitLocation, class FName BoneName, double Weight, EBPE_Weapon_Type Selection, int32 RandomInteger);
	void ChanceToStun(double HitAngle, double Weight, class FName BoneName, int32 RandomInteger);
	void ClimbCheck_New();
	void ClimbStart_New(double Height, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType Type, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform);
	void ClimbUpdate_New();
	void ExecuteUbergraph_ParentZombieAI(int32 EntryPoint);
	void GetCapsuleBaseLocation(double ZOffset);
	void GetClimbAsset(EClimbType ClimbType, bool In);
	void HeadStunFunc(EBPE_Weapon_Type Selection, double HitAngle, class FName BoneName, int32 RandomInteger);
	void Hide_Bone(class FName BoneName);
	void HouseBoxEntered(class AHouseBox_C* HouseBox);
	void HouseBoxLeaved(class AHouseBox_C* HouseBox);
	void IsPlayingAttackMontage_(bool* IsPlaying_);
	void IsPlayingHitMontage_();
	void KnockWithChanceFunc(EBPE_Weapon_Type Selection, double HitAngle, const struct FVector& HitLocation, class FName BoneName, int32 RandomInteger);
	void OnRep_WalkType();
	void SetMesh();
	void SetSmoothSyncSettings(E_SmoothSynsPrefab SmoothSyncPrefab);
	void AIInteract(class ABP_Door_C* Door, class UArrowComponent* Arrow);
	void EndDoorAttack();
	void IsBandit_(bool* Param_IsBandit_);
	void IsZombie_(bool* Param_IsZombie_, class APawn** Zombie);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ParentZombieAI_C">();
	}
	static class AParentZombieAI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParentZombieAI_C>();
	}
};
static_assert(alignof(AParentZombieAI_C) == 0x000010, "Wrong alignment on AParentZombieAI_C");
static_assert(sizeof(AParentZombieAI_C) == 0x000CB0, "Wrong size on AParentZombieAI_C");
static_assert(offsetof(AParentZombieAI_C, UberGraphFrame_ParentZombieAI_C) == 0x000748, "Member 'AParentZombieAI_C::UberGraphFrame_ParentZombieAI_C' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, TrailPelvis) == 0x000750, "Member 'AParentZombieAI_C::TrailPelvis' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, TrailRight) == 0x000758, "Member 'AParentZombieAI_C::TrailRight' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, TrailLeft) == 0x000760, "Member 'AParentZombieAI_C::TrailLeft' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, HitMontagesIsPlaying_) == 0x000768, "Member 'AParentZombieAI_C::HitMontagesIsPlaying_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, HeadshotFMontage) == 0x000778, "Member 'AParentZombieAI_C::HeadshotFMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, Stunned) == 0x000780, "Member 'AParentZombieAI_C::Stunned' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, MeshLocation) == 0x000788, "Member 'AParentZombieAI_C::MeshLocation' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, CapsuleLocation) == 0x0007A0, "Member 'AParentZombieAI_C::CapsuleLocation' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, IsFacingUp__R) == 0x0007B8, "Member 'AParentZombieAI_C::IsFacingUp__R' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, GetUpMontage) == 0x0007C0, "Member 'AParentZombieAI_C::GetUpMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, DownMontage) == 0x0007C8, "Member 'AParentZombieAI_C::DownMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, UpMontage) == 0x0007D0, "Member 'AParentZombieAI_C::UpMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, FastDownMontage) == 0x0007D8, "Member 'AParentZombieAI_C::FastDownMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, FastUpMontage) == 0x0007E0, "Member 'AParentZombieAI_C::FastUpMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, StunnedCount) == 0x0007E8, "Member 'AParentZombieAI_C::StunnedCount' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, MaxStunnedCount) == 0x0007EC, "Member 'AParentZombieAI_C::MaxStunnedCount' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, VehicleImpactZombie) == 0x0007F0, "Member 'AParentZombieAI_C::VehicleImpactZombie' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, VehicleZombieClimbing) == 0x0007F8, "Member 'AParentZombieAI_C::VehicleZombieClimbing' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, Door_R) == 0x000800, "Member 'AParentZombieAI_C::Door_R' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, HeadshotBMontage) == 0x000808, "Member 'AParentZombieAI_C::HeadshotBMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, HeadshotLMontage) == 0x000810, "Member 'AParentZombieAI_C::HeadshotLMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, HeadshotRMontage) == 0x000818, "Member 'AParentZombieAI_C::HeadshotRMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, StunForwadMontage) == 0x000820, "Member 'AParentZombieAI_C::StunForwadMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, StunBackwardMontage) == 0x000828, "Member 'AParentZombieAI_C::StunBackwardMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, StunRightMontage) == 0x000830, "Member 'AParentZombieAI_C::StunRightMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, StunLeftMontage) == 0x000838, "Member 'AParentZombieAI_C::StunLeftMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, DefaultMontage_s) == 0x000840, "Member 'AParentZombieAI_C::DefaultMontage_s' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, MeleeForwardMontage_ss) == 0x000850, "Member 'AParentZombieAI_C::MeleeForwardMontage_ss' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, MeleeLeftMontage) == 0x000860, "Member 'AParentZombieAI_C::MeleeLeftMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, MeleeRightMontage) == 0x000868, "Member 'AParentZombieAI_C::MeleeRightMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, FenceDesctuct_) == 0x000870, "Member 'AParentZombieAI_C::FenceDesctuct_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, VoiceSoundTrack) == 0x000874, "Member 'AParentZombieAI_C::VoiceSoundTrack' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, BlockFenceDetect) == 0x000878, "Member 'AParentZombieAI_C::BlockFenceDetect' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, HitMontages) == 0x000880, "Member 'AParentZombieAI_C::HitMontages' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, CanClimb_) == 0x000890, "Member 'AParentZombieAI_C::CanClimb_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, InClimb_) == 0x000891, "Member 'AParentZombieAI_C::InClimb_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, AttackMontagesIsPlaying_) == 0x000898, "Member 'AParentZombieAI_C::AttackMontagesIsPlaying_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, DeathAnimMontage) == 0x0008A8, "Member 'AParentZombieAI_C::DeathAnimMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, BT) == 0x0008B0, "Member 'AParentZombieAI_C::BT' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, BodyStiffnesTimer) == 0x0008B8, "Member 'AParentZombieAI_C::BodyStiffnesTimer' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, CheckDoorTimer) == 0x0008C0, "Member 'AParentZombieAI_C::CheckDoorTimer' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbIn) == 0x0008C8, "Member 'AParentZombieAI_C::ClimbIn' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbParams) == 0x0008D0, "Member 'AParentZombieAI_C::ClimbParams' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbLedgeLS) == 0x000980, "Member 'AParentZombieAI_C::ClimbLedgeLS' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbTarget) == 0x000A40, "Member 'AParentZombieAI_C::ClimbTarget' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbActualStartOffset) == 0x000AA0, "Member 'AParentZombieAI_C::ClimbActualStartOffset' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbAnimatedStartOffset) == 0x000B00, "Member 'AParentZombieAI_C::ClimbAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbStartTransform) == 0x000B60, "Member 'AParentZombieAI_C::ClimbStartTransform' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbTimeline) == 0x000BC0, "Member 'AParentZombieAI_C::ClimbTimeline' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, TargetRotation) == 0x000BC8, "Member 'AParentZombieAI_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, BreathTrack) == 0x000BE0, "Member 'AParentZombieAI_C::BreathTrack' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, InHouse) == 0x000BE4, "Member 'AParentZombieAI_C::InHouse' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, DoorRot) == 0x000BE8, "Member 'AParentZombieAI_C::DoorRot' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, DoorLoc) == 0x000C00, "Member 'AParentZombieAI_C::DoorLoc' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, MeleeBackwardMontages) == 0x000C18, "Member 'AParentZombieAI_C::MeleeBackwardMontages' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, IsSpline_) == 0x000C28, "Member 'AParentZombieAI_C::IsSpline_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, IsNavmeshWalking_) == 0x000C29, "Member 'AParentZombieAI_C::IsNavmeshWalking_' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, KnockedMontage) == 0x000C30, "Member 'AParentZombieAI_C::KnockedMontage' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, FacingUpValue) == 0x000C38, "Member 'AParentZombieAI_C::FacingUpValue' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, Bool) == 0x000C40, "Member 'AParentZombieAI_C::Bool' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, ClimbTimer) == 0x000C48, "Member 'AParentZombieAI_C::ClimbTimer' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, NotSpawned) == 0x000C50, "Member 'AParentZombieAI_C::NotSpawned' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, BonesToHide) == 0x000C58, "Member 'AParentZombieAI_C::BonesToHide' has a wrong offset!");
static_assert(offsetof(AParentZombieAI_C, WalkType) == 0x000CA8, "Member 'AParentZombieAI_C::WalkType' has a wrong offset!");

}

