#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SkyCreatorPlugin

#include "Basic.hpp"

#include "SkyCreatorPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SkyCreatorPlugin.SkyCreator
// 0x10E0 (0x1370 - 0x0290)
class ASkyCreator final : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBillboardComponent*                    billboard;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   Compass;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VolumetricCloud;                                   // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             SunLight;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             MoonLight;                                         // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x02D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               OcclusionCapture;                                  // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureComponent2D*               OcclusionCaptureDistant;                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      WeatherFX;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        MaterialFX;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      RainRipplesFX;                                     // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      RainDropsFX;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      RainStreaksFX;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      RainSplatterFX;                                    // 0x0318(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SkySphereMaterial;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               SkySphereMID;                                      // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEditorTimeOfDay;                               // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditorTimeOfDay;                                   // 0x033C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEditorWeatherSettings;                         // 0x0340(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorEditorWeatherType                  EditorWeatherType;                                 // 0x0341(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyCreatorWeatherPreset*               EditorWeatherPreset;                               // 0x0348(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherSettings             EditorWeatherSettings;                             // 0x0350(0x04E8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsEditorTickEnabled;                              // 0x0838(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_839[0x3];                                      // 0x0839(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfDay;                                         // 0x083C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherSettings             WeatherSettings;                                   // 0x0840(0x04E8)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           CommonMPC;                                         // 0x0D28(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkySphereRadius;                                   // 0x0D30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugVariables;                               // 0x0D34(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlSunPosition;                               // 0x0D35(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorSunPositionType                    SunPositionType;                                   // 0x0D36(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D37[0x1];                                      // 0x0D37(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCelestialPositionData                 SunPositionData;                                   // 0x0D38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bControlMoonPosition;                              // 0x0D40(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorMoonPositionType                   MoonPositionType;                                  // 0x0D41(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D42[0x2];                                      // 0x0D42(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCelestialPositionData                 MoonPositionData;                                  // 0x0D44(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SunriseTime;                                       // 0x0D4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunsetTime;                                        // 0x0D50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDawnOffsetTime;                                 // 0x0D54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDuskOffsetTime;                                 // 0x0D58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDawnTime;                                       // 0x0D5C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunDuskTime;                                       // 0x0D60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunElevation;                                      // 0x0D64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunAzimuth;                                        // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunMinAngleAtDawnDusk;                             // 0x0D6C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunFadeInOutTime;                                  // 0x0D70(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonriseTime;                                      // 0x0D74(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonsetTime;                                       // 0x0D78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonElevation;                                     // 0x0D7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonAzimuth;                                       // 0x0D80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonFadeInOutTime;                                 // 0x0D84(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Latitude;                                          // 0x0D88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Longitude;                                         // 0x0D8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeZone;                                          // 0x0D90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDaylightSavingTime;                               // 0x0D94(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D95[0x3];                                      // 0x0D95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Year;                                              // 0x0D98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0D9C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0DA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA4[0x4];                                      // 0x0DA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Date;                                              // 0x0DA8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLightTransition;                                  // 0x0DB0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB1[0x3];                                      // 0x0DB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunSurfaceBrightness;                              // 0x0DB4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonSurfaceBrightness;                             // 0x0DB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCurrentElevation;                               // 0x0DBC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionStartSunAngle;                           // 0x0DC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionMiddleSunAngle;                          // 0x0DC4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionEndSunAngle;                             // 0x0DC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensityTransitionStartSunAngle;             // 0x0DCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NightIntensityTransitionEndSunAngle;               // 0x0DD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyAtmosphereMobility;                             // 0x0DD4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyAtmosphereTransformMode                   PositionMode;                                      // 0x0DD5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD6[0x2];                                      // 0x0DD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlanetRadius;                                      // 0x0DD8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AtmosphereHeight;                                  // 0x0DDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AerialPespectiveViewDistanceScale;                 // 0x0DE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE4[0x4];                                      // 0x0DE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlanetTopPosition;                                 // 0x0DE8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSampleCountScale;                             // 0x0E00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GodRaysResolution;                                 // 0x0E04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerBottomAltitude;                               // 0x0E08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LayerHeight;                                       // 0x0E0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingStartMaxDistance;                           // 0x0E10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracingMaxDistance;                                // 0x0E14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPerSampleAtmosphericLightTransmittance;           // 0x0E18(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E19[0x7];                                      // 0x0E19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           VolumetricCloudsMPC;                               // 0x0E20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerBottomAltitudePosition;                       // 0x0E28(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LayerTopAltitudePosition;                          // 0x0E40(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CurrentVolumetricCloudMaterial;                    // 0x0E58(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudMID;                                // 0x0E60(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     VolumetricCloudDensitySampleMaterial;              // 0x0E68(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VolumetricCloudDensitySampleMID;                   // 0x0E70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 VolumetricCloudDensitySampleRT;                    // 0x0E78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCinematicQuality;                                 // 0x0E80(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudRenderTargetMode              RenderMode;                                        // 0x0E81(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHighQualityAerialPerspective;                     // 0x0E82(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudShadowSpatialFiltering;                      // 0x0E83(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultiScatteringApproximationOctaveCount;           // 0x0E84(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroundContribution;                               // 0x0E88(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRayMarchVolumeShadow;                             // 0x0E89(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8A[0x2];                                      // 0x0E8A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewSampleCountScale;                              // 0x0E8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReflectionSampleCountScale;                        // 0x0E90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowViewSampleCountScale;                        // 0x0E94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowReflectionSampleCountScale;                  // 0x0E98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowTracingDistance;                             // 0x0E9C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransmittanceThreshold;                            // 0x0EA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudMapScale;                                     // 0x0EA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CloudMapOffset;                                    // 0x0EA8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoverageVariationMapScale;                         // 0x0EB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudNoiseShapeResolution          NoiseShapeResolution;                              // 0x0EBC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudNoiseDetailResolution         NoiseDetailResolution;                             // 0x0EBD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EBE[0x2];                                      // 0x0EBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseShapeScale;                                   // 0x0EC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseDetailScale;                                  // 0x0EC4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurbulenceScale;                                   // 0x0EC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsContrast;                          // 0x0ECC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackgroundCloudsReflectionScale;                   // 0x0ED0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SkyLightMobility;                                  // 0x0ED4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRealTimeCapture;                                  // 0x0ED5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkyLightCaptureTimeSlice;                         // 0x0ED6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsSolidColor;                      // 0x0ED7(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCloudAmbientOcclusion;                            // 0x0ED8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED9[0x3];                                      // 0x0ED9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CloudAmbientOcclusionExtent;                       // 0x0EDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionMapResolutionScale;           // 0x0EE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudAmbientOcclusionApertureScale;                // 0x0EE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            SunLightMobility;                                  // 0x0EE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunConstantIntensity;                             // 0x0EE9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EEA[0x2];                                      // 0x0EEA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunIntensity;                                      // 0x0EEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCurrentIntensity;                               // 0x0EF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunUseTemperature;                                // 0x0EF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF5[0x3];                                      // 0x0EF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunDiskSize;                                       // 0x0EF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunConstantAtmosphereDiskColorScale;              // 0x0EFC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EFD[0x3];                                      // 0x0EFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SunAtmosphereDiskColorScale;                       // 0x0F00(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSunPerPixelAtmosphereTransmittance;               // 0x0F10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudShadowType                    SunCloudShadowType;                                // 0x0F11(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F12[0x2];                                      // 0x0F12(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SunCloudShadowExtent;                              // 0x0F14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCloudShadowMapResolutionScale;                  // 0x0F18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunCloudShadowRaySampleCountScale;                 // 0x0F1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            MoonLightMobility;                                 // 0x0F20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonConstantIntensity;                            // 0x0F21(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F22[0x2];                                      // 0x0F22(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonIntensity;                                     // 0x0F24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCurrentIntensity;                              // 0x0F28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonUseTemperature;                               // 0x0F2C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2D[0x3];                                      // 0x0F2D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonDiskSize;                                      // 0x0F30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonRotation;                                      // 0x0F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhase;                                         // 0x0F38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonPhaseLightIntensityScale;                     // 0x0F3C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3D[0x3];                                      // 0x0F3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonPhaseLightIntensityMinScale;                   // 0x0F40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonPhaseLightIntensityMaxScale;                   // 0x0F44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonConstantAtmosphereDiskColorScale;             // 0x0F48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F49[0x3];                                      // 0x0F49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MoonAtmosphereDiskColorScale;                      // 0x0F4C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoonPerPixelAtmosphereTransmittance;              // 0x0F5C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVolumetricCloudShadowType                    MoonCloudShadowType;                               // 0x0F5D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5E[0x2];                                      // 0x0F5E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoonCloudShadowExtent;                             // 0x0F60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCloudShadowMapResolutionScale;                 // 0x0F64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonCloudShadowRaySampleCountScale;                // 0x0F68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            ExponentialHeightFogMobility;                      // 0x0F6C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableExponentialHeightFog;                       // 0x0F6D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x0F6E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6F[0x1];                                      // 0x0F6F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FogHeightOffset;                                   // 0x0F70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondFogHeightOffset;                             // 0x0F74(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogViewDistance;                         // 0x0F78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7C[0x4];                                      // 0x0F7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             StarMapTexture;                                    // 0x0F80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkyCreatorStarMapRotationType                StarMapRotationType;                               // 0x0F88(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F89[0x7];                                      // 0x0F89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StarMapAdditionalRotation;                         // 0x0F90(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOcclusionCapture;                           // 0x0FA8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOcclusionCaptureRealtimeUpdate;                   // 0x0FA9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOcclusionDebugView;                         // 0x0FAA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAB[0x5];                                      // 0x0FAB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 OcclusionRenderTarget;                             // 0x0FB0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureWidth;                             // 0x0FB8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureHeight;                            // 0x0FBC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureStepDistance;                      // 0x0FC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionBias;                                     // 0x0FC4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OcclusionBlurSamples;                              // 0x0FC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionBlurDistance;                             // 0x0FCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionTransitionHardness;                       // 0x0FD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDistantOcclusionCapture;                    // 0x0FD4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistantOcclusionCaptureRealtimeUpdate;            // 0x0FD5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD6[0x2];                                      // 0x0FD6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 DistantOcclusionRenderTarget;                      // 0x0FD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantOcclusionCaptureWidth;                      // 0x0FE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantOcclusionCaptureStepDistance;               // 0x0FE4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     OcclusionDebugPostProcess;                         // 0x0FE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocation;                                    // 0x0FF0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraLocationSnapped;                             // 0x1008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OcclusionCurrentLocation;                          // 0x1020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionCaptureStepSize;                          // 0x1038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103C[0x4];                                     // 0x103C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DistantCameraLocationSnapped;                      // 0x1040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DistantOcclusionCurrentLocation;                   // 0x1058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistantOcclusionCaptureStepSize;                   // 0x1070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFXHeightCutoff;                             // 0x1074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeatherFXCutoffSoftness;                           // 0x1078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPrecipitationSpawnMode                       PrecipitationSpawnMode;                            // 0x107C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107D[0x3];                                     // 0x107D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrecipitationSpawnRadiusCPU;                       // 0x1080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationSpawnRadiusGPU;                       // 0x1084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationMaxViewDistance;                      // 0x1088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PrecipitationVerticalCheckDistance;                // 0x108C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             PrecipitationCollisionChannel;                     // 0x1090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1091[0x3];                                     // 0x1091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainSpawnRateMaxCPU;                               // 0x1094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSpawnRateMaxGPU;                               // 0x1098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDistanceScaleFactor;                           // 0x109C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainCameraMotionAlignmentScale;                    // 0x10A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainVelocityElongationScale;                       // 0x10A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainVelocityFade;                                  // 0x10A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainIndexOfRefraction;                             // 0x10AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDepthFadeDistance;                             // 0x10B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainCameraFadeDistance;                            // 0x10B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainCameraFadeOffset;                              // 0x10B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSpawnRateMaxCPU;                         // 0x10BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashSpawnRateMaxGPU;                         // 0x10C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashIndexOfRefraction;                       // 0x10C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableRainSplashVolumetric;                        // 0x10C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C9[0x3];                                     // 0x10C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RainSplashDepthFadeDistance;                       // 0x10CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashCameraFadeDistance;                      // 0x10D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplashCameraFadeOffset;                        // 0x10D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpawnRateMaxCPU;                               // 0x10D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSpawnRateMaxGPU;                               // 0x10DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDistanceScaleFactor;                           // 0x10E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowCameraMotionAlignmentScale;                    // 0x10E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowVelocityElongationScale;                       // 0x10E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowDepthFadeDistance;                             // 0x10EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowCameraFadeDistance;                            // 0x10F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowCameraFadeOffset;                              // 0x10F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 LightningsParametersRT;                            // 0x10F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSkyCreatorLightningParameters> LightningParameters;                               // 0x1100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1110[0x8];                                     // 0x1110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentLightningInterval;                          // 0x1118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111C[0x4];                                     // 0x111C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         LightningStrikeSystem;                             // 0x1120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastLightningPosition;                             // 0x1128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        LightningAvailablePositions;                       // 0x1140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         LightningCurrentIndex;                             // 0x1150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSampleCloudDensity;                               // 0x1154(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1155[0x3];                                     // 0x1155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightningMaxSamples;                               // 0x1158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnInnerRadius;                         // 0x115C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningSpawnOuterRadius;                         // 0x1160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningRandomDegreeInConeMax;                    // 0x1164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningBoltEmissiveScale;                        // 0x1168(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116C[0xC];                                     // 0x116C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LightningFlashFadeUpdateRate;                      // 0x1178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashFadeDelta;                           // 0x117C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashEmissiveScale;                       // 0x1180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashEmissiveReflectionScale;             // 0x1184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashRadiusScale;                         // 0x1188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightningFlashFadeSpeed;                           // 0x118C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowDistance;                                   // 0x1190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainbowDepthFadeDistance;                          // 0x1194(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindScale;                               // 0x1198(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindFadeHardness;                        // 0x119C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricWindViewDistance;                        // 0x11A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistScale;                               // 0x11A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistFadeHardness;                        // 0x11A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricMistViewDistance;                        // 0x11AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFXHeightCutoff;                            // 0x11B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialFXCutoffSoftness;                          // 0x11B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseFXSimulations;                               // 0x11B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B9[0x3];                                     // 0x11B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WetnessSlopeAngle;                                 // 0x11BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetnessSlopeSmoothness;                            // 0x11C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesMaskScale;                                  // 0x11C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesRoughness;                                  // 0x11C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesSlopeAngle;                                 // 0x11CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PuddlesSlopeSmoothness;                            // 0x11D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterUpdateRate;                            // 0x11D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterScale;                                 // 0x11D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterSlopeAngle;                            // 0x11DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterSlopeSmoothness;                       // 0x11E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainSplatterDeltaAccumulator;                      // 0x11E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesUpdateRate;                             // 0x11E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesScale;                                  // 0x11EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindRipplesScale;                                  // 0x11F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainRipplesDeltaAccumulator;                       // 0x11F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsUpdateRate;                               // 0x11F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsScale;                                    // 0x11FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsSlopeAngle;                               // 0x1200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsSlopeSmoothness;                          // 0x1204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainDropsDeltaAccumulator;                         // 0x1208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksUpdateRate;                             // 0x120C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksScale;                                  // 0x1210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksSlopeAngle;                             // 0x1214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksSlopeSmoothness;                        // 0x1218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RainStreaksDeltaAccumulator;                       // 0x121C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowMaskScale;                                     // 0x1220(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowScale;                                         // 0x1224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowRoughness;                                     // 0x1228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesScale;                                 // 0x122C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSparklesRoughness;                             // 0x1230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSlopeAngle;                                    // 0x1234(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowSlopeSmoothness;                               // 0x1238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWind;                                       // 0x123C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverride_EditorCloudWindDirection : 1;            // 0x123D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorCloudWindSpeed : 1;                // 0x123D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorCloudWindSkewAmount : 1;           // 0x123D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorCloudNoiseShapeWindDirection : 1;  // 0x123D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorCloudNoiseShapeWindSpeedHorizontal : 1; // 0x123D(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorCloudNoiseDetailWindSpeedVertical : 1; // 0x123D(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorWindDirection : 1;                 // 0x123D(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOverride_EditorWindSpeed : 1;                     // 0x123D(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_123E[0x2];                                     // 0x123E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EditorCloudWindDirection;                          // 0x1240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorCloudWindSpeed;                              // 0x1244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorCloudWindSkewAmount;                         // 0x1248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorCloudNoiseShapeWindDirection;                // 0x124C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorCloudNoiseShapeWindSpeedHorizontal;          // 0x1250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorCloudNoiseDetailWindSpeedVertical;           // 0x1254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorWindDirection;                               // 0x1258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EditorWindSpeed;                                   // 0x125C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudWindOffset;                                   // 0x1260(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudWindSkewDirection;                            // 0x1278(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloudWindSkewForce;                                // 0x1290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1294[0x4];                                     // 0x1294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloudNoiseShapeWindOffset;                         // 0x1298(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CloudNoiseDetailWindOffset;                        // 0x12B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrecipitationWindOffset;                           // 0x12C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VolumetricWindWindOffset;                          // 0x12E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VolumetricMistWindOffset;                          // 0x12F8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseExposureSettings;                              // 0x1310(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtendDefaultLuminanceRange;                      // 0x1311(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1312[0x2];                                     // 0x1312(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PostProcessPriority;                               // 0x1314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           ExposureMethod;                                    // 0x1318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1319[0x7];                                     // 0x1319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            ExposureBiasCurve;                                 // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ExposureMeterMask;                                 // 0x1328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMinBrightness;                             // 0x1330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMaxBrightness;                             // 0x1334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMinEV100;                                  // 0x1338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureMaxEV100;                                  // 0x133C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureSpeedUp;                                   // 0x1340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureSpeedDown;                                 // 0x1344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureLowPercent;                                // 0x1348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHighPercent;                               // 0x134C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramLogMin;                           // 0x1350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramLogMax;                           // 0x1354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramMinEV100;                         // 0x1358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExposureHistogramMaxEV100;                         // 0x135C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLightningStrike;                                 // 0x1360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	bool FindLightningPosition(const struct FVector& Position, struct FVector* OutPosition);
	float GetCloudDensityAtPosition(const struct FVector& Position);
	struct FVector GetLastLightningPosition();
	struct FRotator GetMoonPosition(float Time);
	struct FRotator GetSunPosition(float Time);
	void LerpBackgroundCloudSettings(const struct FSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettingsA, const struct FSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettingsB, float Alpha);
	void LerpExponentialHeightFogSettings(const struct FSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettingsA, const struct FSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettingsB, float Alpha);
	void LerpMaterialFXSettings(const struct FSkyCreatorMaterialFXSettings& InMaterialFXSettingsA, const struct FSkyCreatorMaterialFXSettings& InMaterialFXSettingsB, float Alpha);
	void LerpMoonLightSettings(const struct FSkyCreatorMoonLightSettings& InMoonLightSettingsA, const struct FSkyCreatorMoonLightSettings& InMoonLightSettingsB, float Alpha);
	void LerpPostProcessSettings(const struct FSkyCreatorPostProcessSettings& InPostProcessSettingsA, const struct FSkyCreatorPostProcessSettings& InPostProcessSettingsB, float Alpha);
	void LerpPuddlesAmount(float PuddlesAmountA, float PuddlesAmountB, float Alpha);
	void LerpSkyAtmosphereSettings(const struct FSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettingsA, const struct FSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettingsB, float Alpha);
	void LerpSkyLightSettings(const struct FSkyCreatorSkyLightSettings& InSkyLightSettingsA, const struct FSkyCreatorSkyLightSettings& InSkyLightSettingsB, float Alpha);
	void LerpSnowAmount(float SnowAmountA, float SnowAmountB, float Alpha);
	void LerpStarMapSettings(const struct FSkyCreatorStarMapSettings& InStarMapSettingsA, const struct FSkyCreatorStarMapSettings& InStarMapSettingsB, float Alpha);
	void LerpSunLightSettings(const struct FSkyCreatorSunLightSettings& InSunLightSettingsA, const struct FSkyCreatorSunLightSettings& InSunLightSettingsB, float Alpha);
	void LerpVolumetricCloudSettings(const struct FSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettingsA, const struct FSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettingsB, float Alpha);
	void LerpWeatherFXSettings(const struct FSkyCreatorWeatherFXSettings& InWeatherFXSettingsA, const struct FSkyCreatorWeatherFXSettings& InWeatherFXSettingsB, float Alpha);
	void LerpWeatherSettings(const struct FSkyCreatorWeatherSettings& InWeatherSettingsA, const struct FSkyCreatorWeatherSettings& InWeatherSettingsB, float Alpha);
	void LerpWetnessAmount(float WetnessAmountA, float WetnessAmountB, float Alpha);
	void LerpWindIndependentSettings(const struct FSkyCreatorWindSettings& InWindSettingsA, const struct FSkyCreatorWindSettings& InWindSettingsB, float Alpha);
	void LerpWindSettings(const struct FSkyCreatorWindSettings& InWindSettingsA, const struct FSkyCreatorWindSettings& InWindSettingsB, float Alpha);
	void OnRep_UpdateTime();
	void OnRep_UpdateWeather();
	void RealtimeTimeOfDay(float DeltaSeconds, float DayCycleDuration);
	void SetBackgroundCloudSettings(const struct FSkyCreatorBackgroundCloudSettings& InBackgroundCloudSettings);
	void SetbDaylightSavingTime(bool NewValue);
	void SetCloudMapOffset(const struct FVector2D& NewValue);
	void SetDay(int32 NewValue);
	void SetEditorTimeOfDay(float NewValue);
	void SetEditorWeatherPreset(class USkyCreatorWeatherPreset* NewValue);
	void SetEditorWeatherSettings(const struct FSkyCreatorWeatherSettings& NewValue);
	void SetExponentialHeightFogSettings(const struct FSkyCreatorExponentialHeightFogSettings& InExponentialHeightFogSettings);
	void SetLatitude(float NewValue);
	void SetLayerBottomAltitude(float NewValue);
	void SetLayerHeight(float NewValue);
	void SetLongitude(float NewValue);
	void SetMaterialFXSettings(const struct FSkyCreatorMaterialFXSettings& InMaterialFXSettings);
	void SetMonth(int32 NewValue);
	void SetMoonAtmosphereDiskColorScale(const struct FLinearColor& NewValue);
	void SetMoonAzimuth(float NewValue);
	void SetMoonDiskSize(float NewValue);
	void SetMoonElevation(float NewValue);
	void SetMoonIntensity(float NewValue);
	void SetMoonLightSettings(const struct FSkyCreatorMoonLightSettings& InMoonLightSettings);
	void SetMoonPhase(float NewValue);
	void SetMoonriseTime(float NewValue);
	void SetMoonRotation(float NewValue);
	void SetMoonsetTime(float NewValue);
	void SetMoonSimplePositionSettings(const float InMoonriseTime, const float InMoonsetTime, const float InMoonElevation, const float InMoonAzimuth);
	void SetPostProcessSettings(const struct FSkyCreatorPostProcessSettings& InPostProcessSettings);
	void SetRealPositionSettings(const float InLatitude, const float InLongitude, const float InTimeZone, const bool InbDaylightSavingTime, const int32 InYear, const int32 InMonth, const int32 InDay);
	void SetSkyAtmosphereSettings(const struct FSkyCreatorSkyAtmosphereSettings& InSkyAtmosphereSettings);
	void SetSkyLightSettings(const struct FSkyCreatorSkyLightSettings& InSkyLightSettings);
	void SetStarMapAdditionalRotation(const struct FVector& NewValue);
	void SetStarMapSettings(const struct FSkyCreatorStarMapSettings& InStarMapSettings);
	void SetSunAtmosphereDiskColorScale(const struct FLinearColor& NewValue);
	void SetSunAzimuth(float NewValue);
	void SetSunDawnOffsetTime(float NewValue);
	void SetSunDiskSize(float NewValue);
	void SetSunDuskOffsetTime(float NewValue);
	void SetSunElevation(float NewValue);
	void SetSunIntensity(float NewValue);
	void SetSunLightSettings(const struct FSkyCreatorSunLightSettings& InSunLightSettings);
	void SetSunMinAngleAtDawnDusk(float NewValue);
	void SetSunriseTime(float NewValue);
	void SetSunsetTime(float NewValue);
	void SetSunSimplePositionSettings(const float InSunriseTime, const float InSunsetTime, const float InSunElevation, const float InSunAzimuth);
	void SetTime(float InTime);
	void SetTimeZone(float NewValue);
	void SetVolumetricCloudSettings(const struct FSkyCreatorVolumetricCloudSettings& InVolumetricCloudSettings);
	void SetWeatherFXSettings(const struct FSkyCreatorWeatherFXSettings& InWeatherFXSettings);
	void SetWeatherSettings(const struct FSkyCreatorWeatherSettings& InWeatherSettings);
	void SetWindIndependentSettings(const struct FSkyCreatorWindSettings& InWindSettings);
	void SetWindSettings(const struct FSkyCreatorWindSettings& InWindSettings);
	void SetYear(int32 NewValue);
	void SpawnLightningStrike(const struct FVector& LightningPosition);
	void UpdateSettingsSequencer();

	struct FSkyCreatorBackgroundCloudSettings GetBackgroundCloudSettings() const;
	struct FSkyCreatorExponentialHeightFogSettings GetExponentialHeightFogSettings() const;
	struct FSkyCreatorMoonLightSettings GetMoonLightSettings() const;
	float GetMoonPhase() const;
	struct FSkyCreatorPostProcessSettings GetPostProcessSettings() const;
	struct FSkyCreatorSkyAtmosphereSettings GetSkyAtmosphereSettings() const;
	struct FSkyCreatorSkyLightSettings GetSkyLightSettings() const;
	struct FRotator GetStarMapRotation() const;
	struct FSkyCreatorStarMapSettings GetStarMapSettings() const;
	struct FSkyCreatorSunLightSettings GetSunLightSettings() const;
	float GetTime() const;
	struct FSkyCreatorVolumetricCloudSettings GetVolumetricCloudSettings() const;
	struct FSkyCreatorWeatherFXSettings GetWeatherFXSettings() const;
	struct FSkyCreatorMaterialFXSettings GetWeatherMaterialFXSettings() const;
	struct FSkyCreatorWeatherSettings GetWeatherSettings() const;
	struct FSkyCreatorWindSettings GetWindSettings() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyCreator">();
	}
	static class ASkyCreator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASkyCreator>();
	}
};
static_assert(alignof(ASkyCreator) == 0x000008, "Wrong alignment on ASkyCreator");
static_assert(sizeof(ASkyCreator) == 0x001370, "Wrong size on ASkyCreator");
static_assert(offsetof(ASkyCreator, Root) == 0x000290, "Member 'ASkyCreator::Root' has a wrong offset!");
static_assert(offsetof(ASkyCreator, billboard) == 0x000298, "Member 'ASkyCreator::billboard' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Compass) == 0x0002A0, "Member 'ASkyCreator::Compass' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyAtmosphere) == 0x0002A8, "Member 'ASkyCreator::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloud) == 0x0002B0, "Member 'ASkyCreator::VolumetricCloud' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyLight) == 0x0002B8, "Member 'ASkyCreator::SkyLight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunLight) == 0x0002C0, "Member 'ASkyCreator::SunLight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonLight) == 0x0002C8, "Member 'ASkyCreator::MoonLight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExponentialHeightFog) == 0x0002D0, "Member 'ASkyCreator::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PostProcess) == 0x0002D8, "Member 'ASkyCreator::PostProcess' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCapture) == 0x0002E0, "Member 'ASkyCreator::OcclusionCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureDistant) == 0x0002E8, "Member 'ASkyCreator::OcclusionCaptureDistant' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherFX) == 0x0002F0, "Member 'ASkyCreator::WeatherFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MaterialFX) == 0x0002F8, "Member 'ASkyCreator::MaterialFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesFX) == 0x000300, "Member 'ASkyCreator::RainRipplesFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDropsFX) == 0x000308, "Member 'ASkyCreator::RainDropsFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainStreaksFX) == 0x000310, "Member 'ASkyCreator::RainStreaksFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplatterFX) == 0x000318, "Member 'ASkyCreator::RainSplatterFX' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphere) == 0x000320, "Member 'ASkyCreator::SkySphere' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphereMaterial) == 0x000328, "Member 'ASkyCreator::SkySphereMaterial' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphereMID) == 0x000330, "Member 'ASkyCreator::SkySphereMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bUseEditorTimeOfDay) == 0x000338, "Member 'ASkyCreator::bUseEditorTimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorTimeOfDay) == 0x00033C, "Member 'ASkyCreator::EditorTimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bUseEditorWeatherSettings) == 0x000340, "Member 'ASkyCreator::bUseEditorWeatherSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWeatherType) == 0x000341, "Member 'ASkyCreator::EditorWeatherType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWeatherPreset) == 0x000348, "Member 'ASkyCreator::EditorWeatherPreset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWeatherSettings) == 0x000350, "Member 'ASkyCreator::EditorWeatherSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bIsEditorTickEnabled) == 0x000838, "Member 'ASkyCreator::bIsEditorTickEnabled' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TimeOfDay) == 0x00083C, "Member 'ASkyCreator::TimeOfDay' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherSettings) == 0x000840, "Member 'ASkyCreator::WeatherSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CommonMPC) == 0x000D28, "Member 'ASkyCreator::CommonMPC' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkySphereRadius) == 0x000D30, "Member 'ASkyCreator::SkySphereRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bShowDebugVariables) == 0x000D34, "Member 'ASkyCreator::bShowDebugVariables' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bControlSunPosition) == 0x000D35, "Member 'ASkyCreator::bControlSunPosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunPositionType) == 0x000D36, "Member 'ASkyCreator::SunPositionType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunPositionData) == 0x000D38, "Member 'ASkyCreator::SunPositionData' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bControlMoonPosition) == 0x000D40, "Member 'ASkyCreator::bControlMoonPosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPositionType) == 0x000D41, "Member 'ASkyCreator::MoonPositionType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPositionData) == 0x000D44, "Member 'ASkyCreator::MoonPositionData' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunriseTime) == 0x000D4C, "Member 'ASkyCreator::SunriseTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunsetTime) == 0x000D50, "Member 'ASkyCreator::SunsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDawnOffsetTime) == 0x000D54, "Member 'ASkyCreator::SunDawnOffsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDuskOffsetTime) == 0x000D58, "Member 'ASkyCreator::SunDuskOffsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDawnTime) == 0x000D5C, "Member 'ASkyCreator::SunDawnTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDuskTime) == 0x000D60, "Member 'ASkyCreator::SunDuskTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunElevation) == 0x000D64, "Member 'ASkyCreator::SunElevation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunAzimuth) == 0x000D68, "Member 'ASkyCreator::SunAzimuth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunMinAngleAtDawnDusk) == 0x000D6C, "Member 'ASkyCreator::SunMinAngleAtDawnDusk' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunFadeInOutTime) == 0x000D70, "Member 'ASkyCreator::SunFadeInOutTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonriseTime) == 0x000D74, "Member 'ASkyCreator::MoonriseTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonsetTime) == 0x000D78, "Member 'ASkyCreator::MoonsetTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonElevation) == 0x000D7C, "Member 'ASkyCreator::MoonElevation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonAzimuth) == 0x000D80, "Member 'ASkyCreator::MoonAzimuth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonFadeInOutTime) == 0x000D84, "Member 'ASkyCreator::MoonFadeInOutTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Latitude) == 0x000D88, "Member 'ASkyCreator::Latitude' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Longitude) == 0x000D8C, "Member 'ASkyCreator::Longitude' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TimeZone) == 0x000D90, "Member 'ASkyCreator::TimeZone' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bDaylightSavingTime) == 0x000D94, "Member 'ASkyCreator::bDaylightSavingTime' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Year) == 0x000D98, "Member 'ASkyCreator::Year' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Month) == 0x000D9C, "Member 'ASkyCreator::Month' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Day) == 0x000DA0, "Member 'ASkyCreator::Day' has a wrong offset!");
static_assert(offsetof(ASkyCreator, Date) == 0x000DA8, "Member 'ASkyCreator::Date' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bLightTransition) == 0x000DB0, "Member 'ASkyCreator::bLightTransition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunSurfaceBrightness) == 0x000DB4, "Member 'ASkyCreator::SunSurfaceBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonSurfaceBrightness) == 0x000DB8, "Member 'ASkyCreator::MoonSurfaceBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCurrentElevation) == 0x000DBC, "Member 'ASkyCreator::SunCurrentElevation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransitionStartSunAngle) == 0x000DC0, "Member 'ASkyCreator::TransitionStartSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransitionMiddleSunAngle) == 0x000DC4, "Member 'ASkyCreator::TransitionMiddleSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransitionEndSunAngle) == 0x000DC8, "Member 'ASkyCreator::TransitionEndSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NightIntensityTransitionStartSunAngle) == 0x000DCC, "Member 'ASkyCreator::NightIntensityTransitionStartSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NightIntensityTransitionEndSunAngle) == 0x000DD0, "Member 'ASkyCreator::NightIntensityTransitionEndSunAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyAtmosphereMobility) == 0x000DD4, "Member 'ASkyCreator::SkyAtmosphereMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PositionMode) == 0x000DD5, "Member 'ASkyCreator::PositionMode' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PlanetRadius) == 0x000DD8, "Member 'ASkyCreator::PlanetRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, AtmosphereHeight) == 0x000DDC, "Member 'ASkyCreator::AtmosphereHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, AerialPespectiveViewDistanceScale) == 0x000DE0, "Member 'ASkyCreator::AerialPespectiveViewDistanceScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PlanetTopPosition) == 0x000DE8, "Member 'ASkyCreator::PlanetTopPosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TraceSampleCountScale) == 0x000E00, "Member 'ASkyCreator::TraceSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, GodRaysResolution) == 0x000E04, "Member 'ASkyCreator::GodRaysResolution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerBottomAltitude) == 0x000E08, "Member 'ASkyCreator::LayerBottomAltitude' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerHeight) == 0x000E0C, "Member 'ASkyCreator::LayerHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TracingStartMaxDistance) == 0x000E10, "Member 'ASkyCreator::TracingStartMaxDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TracingMaxDistance) == 0x000E14, "Member 'ASkyCreator::TracingMaxDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bPerSampleAtmosphericLightTransmittance) == 0x000E18, "Member 'ASkyCreator::bPerSampleAtmosphericLightTransmittance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudsMPC) == 0x000E20, "Member 'ASkyCreator::VolumetricCloudsMPC' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerBottomAltitudePosition) == 0x000E28, "Member 'ASkyCreator::LayerBottomAltitudePosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LayerTopAltitudePosition) == 0x000E40, "Member 'ASkyCreator::LayerTopAltitudePosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CurrentVolumetricCloudMaterial) == 0x000E58, "Member 'ASkyCreator::CurrentVolumetricCloudMaterial' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudMID) == 0x000E60, "Member 'ASkyCreator::VolumetricCloudMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudDensitySampleMaterial) == 0x000E68, "Member 'ASkyCreator::VolumetricCloudDensitySampleMaterial' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudDensitySampleMID) == 0x000E70, "Member 'ASkyCreator::VolumetricCloudDensitySampleMID' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricCloudDensitySampleRT) == 0x000E78, "Member 'ASkyCreator::VolumetricCloudDensitySampleRT' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bCinematicQuality) == 0x000E80, "Member 'ASkyCreator::bCinematicQuality' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RenderMode) == 0x000E81, "Member 'ASkyCreator::RenderMode' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bHighQualityAerialPerspective) == 0x000E82, "Member 'ASkyCreator::bHighQualityAerialPerspective' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bCloudShadowSpatialFiltering) == 0x000E83, "Member 'ASkyCreator::bCloudShadowSpatialFiltering' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MultiScatteringApproximationOctaveCount) == 0x000E84, "Member 'ASkyCreator::MultiScatteringApproximationOctaveCount' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bGroundContribution) == 0x000E88, "Member 'ASkyCreator::bGroundContribution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bRayMarchVolumeShadow) == 0x000E89, "Member 'ASkyCreator::bRayMarchVolumeShadow' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ViewSampleCountScale) == 0x000E8C, "Member 'ASkyCreator::ViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ReflectionSampleCountScale) == 0x000E90, "Member 'ASkyCreator::ReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ShadowViewSampleCountScale) == 0x000E94, "Member 'ASkyCreator::ShadowViewSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ShadowReflectionSampleCountScale) == 0x000E98, "Member 'ASkyCreator::ShadowReflectionSampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ShadowTracingDistance) == 0x000E9C, "Member 'ASkyCreator::ShadowTracingDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TransmittanceThreshold) == 0x000EA0, "Member 'ASkyCreator::TransmittanceThreshold' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudMapScale) == 0x000EA4, "Member 'ASkyCreator::CloudMapScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudMapOffset) == 0x000EA8, "Member 'ASkyCreator::CloudMapOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CoverageVariationMapScale) == 0x000EB8, "Member 'ASkyCreator::CoverageVariationMapScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseShapeResolution) == 0x000EBC, "Member 'ASkyCreator::NoiseShapeResolution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseDetailResolution) == 0x000EBD, "Member 'ASkyCreator::NoiseDetailResolution' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseShapeScale) == 0x000EC0, "Member 'ASkyCreator::NoiseShapeScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, NoiseDetailScale) == 0x000EC4, "Member 'ASkyCreator::NoiseDetailScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, TurbulenceScale) == 0x000EC8, "Member 'ASkyCreator::TurbulenceScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, BackgroundCloudsContrast) == 0x000ECC, "Member 'ASkyCreator::BackgroundCloudsContrast' has a wrong offset!");
static_assert(offsetof(ASkyCreator, BackgroundCloudsReflectionScale) == 0x000ED0, "Member 'ASkyCreator::BackgroundCloudsReflectionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SkyLightMobility) == 0x000ED4, "Member 'ASkyCreator::SkyLightMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bRealTimeCapture) == 0x000ED5, "Member 'ASkyCreator::bRealTimeCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSkyLightCaptureTimeSlice) == 0x000ED6, "Member 'ASkyCreator::bSkyLightCaptureTimeSlice' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bLowerHemisphereIsSolidColor) == 0x000ED7, "Member 'ASkyCreator::bLowerHemisphereIsSolidColor' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bCloudAmbientOcclusion) == 0x000ED8, "Member 'ASkyCreator::bCloudAmbientOcclusion' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudAmbientOcclusionExtent) == 0x000EDC, "Member 'ASkyCreator::CloudAmbientOcclusionExtent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudAmbientOcclusionMapResolutionScale) == 0x000EE0, "Member 'ASkyCreator::CloudAmbientOcclusionMapResolutionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudAmbientOcclusionApertureScale) == 0x000EE4, "Member 'ASkyCreator::CloudAmbientOcclusionApertureScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunLightMobility) == 0x000EE8, "Member 'ASkyCreator::SunLightMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunConstantIntensity) == 0x000EE9, "Member 'ASkyCreator::bSunConstantIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunIntensity) == 0x000EEC, "Member 'ASkyCreator::SunIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCurrentIntensity) == 0x000EF0, "Member 'ASkyCreator::SunCurrentIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunUseTemperature) == 0x000EF4, "Member 'ASkyCreator::bSunUseTemperature' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunDiskSize) == 0x000EF8, "Member 'ASkyCreator::SunDiskSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunConstantAtmosphereDiskColorScale) == 0x000EFC, "Member 'ASkyCreator::bSunConstantAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunAtmosphereDiskColorScale) == 0x000F00, "Member 'ASkyCreator::SunAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSunPerPixelAtmosphereTransmittance) == 0x000F10, "Member 'ASkyCreator::bSunPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowType) == 0x000F11, "Member 'ASkyCreator::SunCloudShadowType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowExtent) == 0x000F14, "Member 'ASkyCreator::SunCloudShadowExtent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowMapResolutionScale) == 0x000F18, "Member 'ASkyCreator::SunCloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SunCloudShadowRaySampleCountScale) == 0x000F1C, "Member 'ASkyCreator::SunCloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonLightMobility) == 0x000F20, "Member 'ASkyCreator::MoonLightMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonConstantIntensity) == 0x000F21, "Member 'ASkyCreator::bMoonConstantIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonIntensity) == 0x000F24, "Member 'ASkyCreator::MoonIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCurrentIntensity) == 0x000F28, "Member 'ASkyCreator::MoonCurrentIntensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonUseTemperature) == 0x000F2C, "Member 'ASkyCreator::bMoonUseTemperature' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonDiskSize) == 0x000F30, "Member 'ASkyCreator::MoonDiskSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonRotation) == 0x000F34, "Member 'ASkyCreator::MoonRotation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPhase) == 0x000F38, "Member 'ASkyCreator::MoonPhase' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonPhaseLightIntensityScale) == 0x000F3C, "Member 'ASkyCreator::bMoonPhaseLightIntensityScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPhaseLightIntensityMinScale) == 0x000F40, "Member 'ASkyCreator::MoonPhaseLightIntensityMinScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonPhaseLightIntensityMaxScale) == 0x000F44, "Member 'ASkyCreator::MoonPhaseLightIntensityMaxScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonConstantAtmosphereDiskColorScale) == 0x000F48, "Member 'ASkyCreator::bMoonConstantAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonAtmosphereDiskColorScale) == 0x000F4C, "Member 'ASkyCreator::MoonAtmosphereDiskColorScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bMoonPerPixelAtmosphereTransmittance) == 0x000F5C, "Member 'ASkyCreator::bMoonPerPixelAtmosphereTransmittance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowType) == 0x000F5D, "Member 'ASkyCreator::MoonCloudShadowType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowExtent) == 0x000F60, "Member 'ASkyCreator::MoonCloudShadowExtent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowMapResolutionScale) == 0x000F64, "Member 'ASkyCreator::MoonCloudShadowMapResolutionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MoonCloudShadowRaySampleCountScale) == 0x000F68, "Member 'ASkyCreator::MoonCloudShadowRaySampleCountScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExponentialHeightFogMobility) == 0x000F6C, "Member 'ASkyCreator::ExponentialHeightFogMobility' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableExponentialHeightFog) == 0x000F6D, "Member 'ASkyCreator::bEnableExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableVolumetricFog) == 0x000F6E, "Member 'ASkyCreator::bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(ASkyCreator, FogHeightOffset) == 0x000F70, "Member 'ASkyCreator::FogHeightOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SecondFogHeightOffset) == 0x000F74, "Member 'ASkyCreator::SecondFogHeightOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricFogViewDistance) == 0x000F78, "Member 'ASkyCreator::VolumetricFogViewDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMapTexture) == 0x000F80, "Member 'ASkyCreator::StarMapTexture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMapRotationType) == 0x000F88, "Member 'ASkyCreator::StarMapRotationType' has a wrong offset!");
static_assert(offsetof(ASkyCreator, StarMapAdditionalRotation) == 0x000F90, "Member 'ASkyCreator::StarMapAdditionalRotation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableOcclusionCapture) == 0x000FA8, "Member 'ASkyCreator::bEnableOcclusionCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bOcclusionCaptureRealtimeUpdate) == 0x000FA9, "Member 'ASkyCreator::bOcclusionCaptureRealtimeUpdate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableOcclusionDebugView) == 0x000FAA, "Member 'ASkyCreator::bEnableOcclusionDebugView' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionRenderTarget) == 0x000FB0, "Member 'ASkyCreator::OcclusionRenderTarget' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureWidth) == 0x000FB8, "Member 'ASkyCreator::OcclusionCaptureWidth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureHeight) == 0x000FBC, "Member 'ASkyCreator::OcclusionCaptureHeight' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureStepDistance) == 0x000FC0, "Member 'ASkyCreator::OcclusionCaptureStepDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionBias) == 0x000FC4, "Member 'ASkyCreator::OcclusionBias' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionBlurSamples) == 0x000FC8, "Member 'ASkyCreator::OcclusionBlurSamples' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionBlurDistance) == 0x000FCC, "Member 'ASkyCreator::OcclusionBlurDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionTransitionHardness) == 0x000FD0, "Member 'ASkyCreator::OcclusionTransitionHardness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableDistantOcclusionCapture) == 0x000FD4, "Member 'ASkyCreator::bEnableDistantOcclusionCapture' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bDistantOcclusionCaptureRealtimeUpdate) == 0x000FD5, "Member 'ASkyCreator::bDistantOcclusionCaptureRealtimeUpdate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, DistantOcclusionRenderTarget) == 0x000FD8, "Member 'ASkyCreator::DistantOcclusionRenderTarget' has a wrong offset!");
static_assert(offsetof(ASkyCreator, DistantOcclusionCaptureWidth) == 0x000FE0, "Member 'ASkyCreator::DistantOcclusionCaptureWidth' has a wrong offset!");
static_assert(offsetof(ASkyCreator, DistantOcclusionCaptureStepDistance) == 0x000FE4, "Member 'ASkyCreator::DistantOcclusionCaptureStepDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionDebugPostProcess) == 0x000FE8, "Member 'ASkyCreator::OcclusionDebugPostProcess' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CameraLocation) == 0x000FF0, "Member 'ASkyCreator::CameraLocation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CameraLocationSnapped) == 0x001008, "Member 'ASkyCreator::CameraLocationSnapped' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCurrentLocation) == 0x001020, "Member 'ASkyCreator::OcclusionCurrentLocation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OcclusionCaptureStepSize) == 0x001038, "Member 'ASkyCreator::OcclusionCaptureStepSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, DistantCameraLocationSnapped) == 0x001040, "Member 'ASkyCreator::DistantCameraLocationSnapped' has a wrong offset!");
static_assert(offsetof(ASkyCreator, DistantOcclusionCurrentLocation) == 0x001058, "Member 'ASkyCreator::DistantOcclusionCurrentLocation' has a wrong offset!");
static_assert(offsetof(ASkyCreator, DistantOcclusionCaptureStepSize) == 0x001070, "Member 'ASkyCreator::DistantOcclusionCaptureStepSize' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherFXHeightCutoff) == 0x001074, "Member 'ASkyCreator::WeatherFXHeightCutoff' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WeatherFXCutoffSoftness) == 0x001078, "Member 'ASkyCreator::WeatherFXCutoffSoftness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationSpawnMode) == 0x00107C, "Member 'ASkyCreator::PrecipitationSpawnMode' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationSpawnRadiusCPU) == 0x001080, "Member 'ASkyCreator::PrecipitationSpawnRadiusCPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationSpawnRadiusGPU) == 0x001084, "Member 'ASkyCreator::PrecipitationSpawnRadiusGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationMaxViewDistance) == 0x001088, "Member 'ASkyCreator::PrecipitationMaxViewDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationVerticalCheckDistance) == 0x00108C, "Member 'ASkyCreator::PrecipitationVerticalCheckDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationCollisionChannel) == 0x001090, "Member 'ASkyCreator::PrecipitationCollisionChannel' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSpawnRateMaxCPU) == 0x001094, "Member 'ASkyCreator::RainSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSpawnRateMaxGPU) == 0x001098, "Member 'ASkyCreator::RainSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDistanceScaleFactor) == 0x00109C, "Member 'ASkyCreator::RainDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainCameraMotionAlignmentScale) == 0x0010A0, "Member 'ASkyCreator::RainCameraMotionAlignmentScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainVelocityElongationScale) == 0x0010A4, "Member 'ASkyCreator::RainVelocityElongationScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainVelocityFade) == 0x0010A8, "Member 'ASkyCreator::RainVelocityFade' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainIndexOfRefraction) == 0x0010AC, "Member 'ASkyCreator::RainIndexOfRefraction' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDepthFadeDistance) == 0x0010B0, "Member 'ASkyCreator::RainDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainCameraFadeDistance) == 0x0010B4, "Member 'ASkyCreator::RainCameraFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainCameraFadeOffset) == 0x0010B8, "Member 'ASkyCreator::RainCameraFadeOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashSpawnRateMaxCPU) == 0x0010BC, "Member 'ASkyCreator::RainSplashSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashSpawnRateMaxGPU) == 0x0010C0, "Member 'ASkyCreator::RainSplashSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashIndexOfRefraction) == 0x0010C4, "Member 'ASkyCreator::RainSplashIndexOfRefraction' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EnableRainSplashVolumetric) == 0x0010C8, "Member 'ASkyCreator::EnableRainSplashVolumetric' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashDepthFadeDistance) == 0x0010CC, "Member 'ASkyCreator::RainSplashDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashCameraFadeDistance) == 0x0010D0, "Member 'ASkyCreator::RainSplashCameraFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplashCameraFadeOffset) == 0x0010D4, "Member 'ASkyCreator::RainSplashCameraFadeOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSpawnRateMaxCPU) == 0x0010D8, "Member 'ASkyCreator::SnowSpawnRateMaxCPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSpawnRateMaxGPU) == 0x0010DC, "Member 'ASkyCreator::SnowSpawnRateMaxGPU' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowDistanceScaleFactor) == 0x0010E0, "Member 'ASkyCreator::SnowDistanceScaleFactor' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowCameraMotionAlignmentScale) == 0x0010E4, "Member 'ASkyCreator::SnowCameraMotionAlignmentScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowVelocityElongationScale) == 0x0010E8, "Member 'ASkyCreator::SnowVelocityElongationScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowDepthFadeDistance) == 0x0010EC, "Member 'ASkyCreator::SnowDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowCameraFadeDistance) == 0x0010F0, "Member 'ASkyCreator::SnowCameraFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowCameraFadeOffset) == 0x0010F4, "Member 'ASkyCreator::SnowCameraFadeOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningsParametersRT) == 0x0010F8, "Member 'ASkyCreator::LightningsParametersRT' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningParameters) == 0x001100, "Member 'ASkyCreator::LightningParameters' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CurrentLightningInterval) == 0x001118, "Member 'ASkyCreator::CurrentLightningInterval' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningStrikeSystem) == 0x001120, "Member 'ASkyCreator::LightningStrikeSystem' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LastLightningPosition) == 0x001128, "Member 'ASkyCreator::LastLightningPosition' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningAvailablePositions) == 0x001140, "Member 'ASkyCreator::LightningAvailablePositions' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningCurrentIndex) == 0x001150, "Member 'ASkyCreator::LightningCurrentIndex' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bSampleCloudDensity) == 0x001154, "Member 'ASkyCreator::bSampleCloudDensity' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningMaxSamples) == 0x001158, "Member 'ASkyCreator::LightningMaxSamples' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningSpawnInnerRadius) == 0x00115C, "Member 'ASkyCreator::LightningSpawnInnerRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningSpawnOuterRadius) == 0x001160, "Member 'ASkyCreator::LightningSpawnOuterRadius' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningRandomDegreeInConeMax) == 0x001164, "Member 'ASkyCreator::LightningRandomDegreeInConeMax' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningBoltEmissiveScale) == 0x001168, "Member 'ASkyCreator::LightningBoltEmissiveScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashFadeUpdateRate) == 0x001178, "Member 'ASkyCreator::LightningFlashFadeUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashFadeDelta) == 0x00117C, "Member 'ASkyCreator::LightningFlashFadeDelta' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashEmissiveScale) == 0x001180, "Member 'ASkyCreator::LightningFlashEmissiveScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashEmissiveReflectionScale) == 0x001184, "Member 'ASkyCreator::LightningFlashEmissiveReflectionScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashRadiusScale) == 0x001188, "Member 'ASkyCreator::LightningFlashRadiusScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, LightningFlashFadeSpeed) == 0x00118C, "Member 'ASkyCreator::LightningFlashFadeSpeed' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainbowDistance) == 0x001190, "Member 'ASkyCreator::RainbowDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainbowDepthFadeDistance) == 0x001194, "Member 'ASkyCreator::RainbowDepthFadeDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricWindScale) == 0x001198, "Member 'ASkyCreator::VolumetricWindScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricWindFadeHardness) == 0x00119C, "Member 'ASkyCreator::VolumetricWindFadeHardness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricWindViewDistance) == 0x0011A0, "Member 'ASkyCreator::VolumetricWindViewDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricMistScale) == 0x0011A4, "Member 'ASkyCreator::VolumetricMistScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricMistFadeHardness) == 0x0011A8, "Member 'ASkyCreator::VolumetricMistFadeHardness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricMistViewDistance) == 0x0011AC, "Member 'ASkyCreator::VolumetricMistViewDistance' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MaterialFXHeightCutoff) == 0x0011B0, "Member 'ASkyCreator::MaterialFXHeightCutoff' has a wrong offset!");
static_assert(offsetof(ASkyCreator, MaterialFXCutoffSoftness) == 0x0011B4, "Member 'ASkyCreator::MaterialFXCutoffSoftness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bPauseFXSimulations) == 0x0011B8, "Member 'ASkyCreator::bPauseFXSimulations' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WetnessSlopeAngle) == 0x0011BC, "Member 'ASkyCreator::WetnessSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WetnessSlopeSmoothness) == 0x0011C0, "Member 'ASkyCreator::WetnessSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesMaskScale) == 0x0011C4, "Member 'ASkyCreator::PuddlesMaskScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesRoughness) == 0x0011C8, "Member 'ASkyCreator::PuddlesRoughness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesSlopeAngle) == 0x0011CC, "Member 'ASkyCreator::PuddlesSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PuddlesSlopeSmoothness) == 0x0011D0, "Member 'ASkyCreator::PuddlesSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplatterUpdateRate) == 0x0011D4, "Member 'ASkyCreator::RainSplatterUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplatterScale) == 0x0011D8, "Member 'ASkyCreator::RainSplatterScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplatterSlopeAngle) == 0x0011DC, "Member 'ASkyCreator::RainSplatterSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplatterSlopeSmoothness) == 0x0011E0, "Member 'ASkyCreator::RainSplatterSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainSplatterDeltaAccumulator) == 0x0011E4, "Member 'ASkyCreator::RainSplatterDeltaAccumulator' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesUpdateRate) == 0x0011E8, "Member 'ASkyCreator::RainRipplesUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesScale) == 0x0011EC, "Member 'ASkyCreator::RainRipplesScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, WindRipplesScale) == 0x0011F0, "Member 'ASkyCreator::WindRipplesScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainRipplesDeltaAccumulator) == 0x0011F4, "Member 'ASkyCreator::RainRipplesDeltaAccumulator' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDropsUpdateRate) == 0x0011F8, "Member 'ASkyCreator::RainDropsUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDropsScale) == 0x0011FC, "Member 'ASkyCreator::RainDropsScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDropsSlopeAngle) == 0x001200, "Member 'ASkyCreator::RainDropsSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDropsSlopeSmoothness) == 0x001204, "Member 'ASkyCreator::RainDropsSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainDropsDeltaAccumulator) == 0x001208, "Member 'ASkyCreator::RainDropsDeltaAccumulator' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainStreaksUpdateRate) == 0x00120C, "Member 'ASkyCreator::RainStreaksUpdateRate' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainStreaksScale) == 0x001210, "Member 'ASkyCreator::RainStreaksScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainStreaksSlopeAngle) == 0x001214, "Member 'ASkyCreator::RainStreaksSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainStreaksSlopeSmoothness) == 0x001218, "Member 'ASkyCreator::RainStreaksSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, RainStreaksDeltaAccumulator) == 0x00121C, "Member 'ASkyCreator::RainStreaksDeltaAccumulator' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowMaskScale) == 0x001220, "Member 'ASkyCreator::SnowMaskScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowScale) == 0x001224, "Member 'ASkyCreator::SnowScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowRoughness) == 0x001228, "Member 'ASkyCreator::SnowRoughness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSparklesScale) == 0x00122C, "Member 'ASkyCreator::SnowSparklesScale' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSparklesRoughness) == 0x001230, "Member 'ASkyCreator::SnowSparklesRoughness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSlopeAngle) == 0x001234, "Member 'ASkyCreator::SnowSlopeAngle' has a wrong offset!");
static_assert(offsetof(ASkyCreator, SnowSlopeSmoothness) == 0x001238, "Member 'ASkyCreator::SnowSlopeSmoothness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bEnableWind) == 0x00123C, "Member 'ASkyCreator::bEnableWind' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorCloudWindDirection) == 0x001240, "Member 'ASkyCreator::EditorCloudWindDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorCloudWindSpeed) == 0x001244, "Member 'ASkyCreator::EditorCloudWindSpeed' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorCloudWindSkewAmount) == 0x001248, "Member 'ASkyCreator::EditorCloudWindSkewAmount' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorCloudNoiseShapeWindDirection) == 0x00124C, "Member 'ASkyCreator::EditorCloudNoiseShapeWindDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorCloudNoiseShapeWindSpeedHorizontal) == 0x001250, "Member 'ASkyCreator::EditorCloudNoiseShapeWindSpeedHorizontal' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorCloudNoiseDetailWindSpeedVertical) == 0x001254, "Member 'ASkyCreator::EditorCloudNoiseDetailWindSpeedVertical' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWindDirection) == 0x001258, "Member 'ASkyCreator::EditorWindDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, EditorWindSpeed) == 0x00125C, "Member 'ASkyCreator::EditorWindSpeed' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindOffset) == 0x001260, "Member 'ASkyCreator::CloudWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindSkewDirection) == 0x001278, "Member 'ASkyCreator::CloudWindSkewDirection' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudWindSkewForce) == 0x001290, "Member 'ASkyCreator::CloudWindSkewForce' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudNoiseShapeWindOffset) == 0x001298, "Member 'ASkyCreator::CloudNoiseShapeWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, CloudNoiseDetailWindOffset) == 0x0012B0, "Member 'ASkyCreator::CloudNoiseDetailWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PrecipitationWindOffset) == 0x0012C8, "Member 'ASkyCreator::PrecipitationWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricWindWindOffset) == 0x0012E0, "Member 'ASkyCreator::VolumetricWindWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, VolumetricMistWindOffset) == 0x0012F8, "Member 'ASkyCreator::VolumetricMistWindOffset' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bUseExposureSettings) == 0x001310, "Member 'ASkyCreator::bUseExposureSettings' has a wrong offset!");
static_assert(offsetof(ASkyCreator, bExtendDefaultLuminanceRange) == 0x001311, "Member 'ASkyCreator::bExtendDefaultLuminanceRange' has a wrong offset!");
static_assert(offsetof(ASkyCreator, PostProcessPriority) == 0x001314, "Member 'ASkyCreator::PostProcessPriority' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMethod) == 0x001318, "Member 'ASkyCreator::ExposureMethod' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureBiasCurve) == 0x001320, "Member 'ASkyCreator::ExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMeterMask) == 0x001328, "Member 'ASkyCreator::ExposureMeterMask' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMinBrightness) == 0x001330, "Member 'ASkyCreator::ExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMaxBrightness) == 0x001334, "Member 'ASkyCreator::ExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMinEV100) == 0x001338, "Member 'ASkyCreator::ExposureMinEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureMaxEV100) == 0x00133C, "Member 'ASkyCreator::ExposureMaxEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureSpeedUp) == 0x001340, "Member 'ASkyCreator::ExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureSpeedDown) == 0x001344, "Member 'ASkyCreator::ExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureLowPercent) == 0x001348, "Member 'ASkyCreator::ExposureLowPercent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHighPercent) == 0x00134C, "Member 'ASkyCreator::ExposureHighPercent' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramLogMin) == 0x001350, "Member 'ASkyCreator::ExposureHistogramLogMin' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramLogMax) == 0x001354, "Member 'ASkyCreator::ExposureHistogramLogMax' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramMinEV100) == 0x001358, "Member 'ASkyCreator::ExposureHistogramMinEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, ExposureHistogramMaxEV100) == 0x00135C, "Member 'ASkyCreator::ExposureHistogramMaxEV100' has a wrong offset!");
static_assert(offsetof(ASkyCreator, OnLightningStrike) == 0x001360, "Member 'ASkyCreator::OnLightningStrike' has a wrong offset!");

// Class SkyCreatorPlugin.SkyCreatorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USkyCreatorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CentimetersToKilometers(const float Value);
	static bool CheckCloudDensityAtPosition(class UObject* WorldContextObject, const struct FVector& Position, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget);
	static void ConvertRenderTargetToTexture2D(class UTextureRenderTarget2D* RenderTarget, class UTexture2D** Texture);
	static void CreateAndAssignMID(class UObject* WorldContextObject, class UMaterialInterface* InMaterial, class UMaterialInstanceDynamic** InMID);
	static double ElevationRefraction(double F);
	static bool FindLightningPosition(class UObject* WorldContextObject, bool bSampleCloudDensity, int32 Samples, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget, const struct FVector& Position, float InnerRadius, float OuterRadius, float MinHeight, float MaxHeight, float DensityThreshold, struct FVector* OutPosition);
	static float GetCloudDensityAtPosition(class UObject* WorldContextObject, const struct FVector& Position, class UMaterialParameterCollection* ParameterCollection, class UMaterialInterface* Material, class UTextureRenderTarget2D* RenderTarget);
	static struct FCelestialPositionData GetRealMoonPosition(const float Latitude, const float Longitude, const float TimeZone, const bool bIsDaylightSavingTime, const struct FDateTime& DateTime);
	static struct FCelestialPositionData GetRealSunPosition(const float Latitude, const float Longitude, const float TimeZone, const bool bIsDaylightSavingTime, const struct FDateTime& DateTime);
	static bool IsApplicationForegroundNow();
	static float KilometersToCentimeters(const float Value);

	class UTexture2D* DynamicConvertRenderTargetToTexture2D(class UTextureRenderTarget2D* RenderTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyCreatorFunctionLibrary">();
	}
	static class USkyCreatorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyCreatorFunctionLibrary>();
	}
};
static_assert(alignof(USkyCreatorFunctionLibrary) == 0x000008, "Wrong alignment on USkyCreatorFunctionLibrary");
static_assert(sizeof(USkyCreatorFunctionLibrary) == 0x000028, "Wrong size on USkyCreatorFunctionLibrary");

// Class SkyCreatorPlugin.SkyCreatorWeatherPreset
// 0x0500 (0x0530 - 0x0030)
class USkyCreatorWeatherPreset final : public UDataAsset
{
public:
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyAtmosphereSettings       SkyAtmosphereSettings;                             // 0x0048(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorVolumetricCloudSettings     VolumetricCloudSettings;                           // 0x00C8(0x00A8)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorBackgroundCloudSettings     BackgroundCloudSettings;                           // 0x0170(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSkyLightSettings            SkyLightSettings;                                  // 0x0194(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorSunLightSettings            SunLightSettings;                                  // 0x01C0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorMoonLightSettings           MoonLightSettings;                                 // 0x0208(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorExponentialHeightFogSettings ExponentialHeightFogSettings;                      // 0x0250(0x006C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorStarMapSettings             StarMapSettings;                                   // 0x02BC(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWeatherFXSettings           WeatherFXSettings;                                 // 0x0304(0x0164)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorMaterialFXSettings          WeatherMaterialFXSettings;                         // 0x0468(0x009C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorWindSettings                WindSettings;                                      // 0x0504(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSkyCreatorPostProcessSettings         PostProcessSettings;                               // 0x0524(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	struct FSkyCreatorWeatherSettings GetWeatherPresetSettings();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkyCreatorWeatherPreset">();
	}
	static class USkyCreatorWeatherPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkyCreatorWeatherPreset>();
	}
};
static_assert(alignof(USkyCreatorWeatherPreset) == 0x000008, "Wrong alignment on USkyCreatorWeatherPreset");
static_assert(sizeof(USkyCreatorWeatherPreset) == 0x000530, "Wrong size on USkyCreatorWeatherPreset");
static_assert(offsetof(USkyCreatorWeatherPreset, Description) == 0x000030, "Member 'USkyCreatorWeatherPreset::Description' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, SkyAtmosphereSettings) == 0x000048, "Member 'USkyCreatorWeatherPreset::SkyAtmosphereSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, VolumetricCloudSettings) == 0x0000C8, "Member 'USkyCreatorWeatherPreset::VolumetricCloudSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, BackgroundCloudSettings) == 0x000170, "Member 'USkyCreatorWeatherPreset::BackgroundCloudSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, SkyLightSettings) == 0x000194, "Member 'USkyCreatorWeatherPreset::SkyLightSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, SunLightSettings) == 0x0001C0, "Member 'USkyCreatorWeatherPreset::SunLightSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, MoonLightSettings) == 0x000208, "Member 'USkyCreatorWeatherPreset::MoonLightSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, ExponentialHeightFogSettings) == 0x000250, "Member 'USkyCreatorWeatherPreset::ExponentialHeightFogSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, StarMapSettings) == 0x0002BC, "Member 'USkyCreatorWeatherPreset::StarMapSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, WeatherFXSettings) == 0x000304, "Member 'USkyCreatorWeatherPreset::WeatherFXSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, WeatherMaterialFXSettings) == 0x000468, "Member 'USkyCreatorWeatherPreset::WeatherMaterialFXSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, WindSettings) == 0x000504, "Member 'USkyCreatorWeatherPreset::WindSettings' has a wrong offset!");
static_assert(offsetof(USkyCreatorWeatherPreset, PostProcessSettings) == 0x000524, "Member 'USkyCreatorWeatherPreset::PostProcessSettings' has a wrong offset!");

}

