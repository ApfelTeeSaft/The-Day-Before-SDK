#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AVS_VehicleMaster

#include "Basic.hpp"

#include "AVS_VehicleMaster_classes.hpp"
#include "AVS_VehicleMaster_parameters.hpp"


namespace SDK
{

// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ActivateNiagaraExplosion
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::ActivateNiagaraExplosion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ActivateNiagaraExplosion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Add Impulse On Destroy
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Add_Impulse_On_Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Add Impulse On Destroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AfterExitSurv
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::AfterExitSurv(class AActor* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AfterExitSurv");

	Params::AVS_VehicleMaster_C_AfterExitSurv Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AfterStealReturnToOwner
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::AfterStealReturnToOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AfterStealReturnToOwner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AllowStabilizeVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Allow                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::AllowStabilizeVehicle(bool* Allow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AllowStabilizeVehicle");

	Params::AVS_VehicleMaster_C_AllowStabilizeVehicle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Allow != nullptr)
		*Allow = Parms.Allow;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AnySitsEmpty
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Zaebis1                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   EmptyIndex1                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::AnySitsEmpty(bool* Zaebis1, int32* EmptyIndex1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AnySitsEmpty");

	Params::AVS_VehicleMaster_C_AnySitsEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Zaebis1 != nullptr)
		*Zaebis1 = Parms.Zaebis1;

	if (EmptyIndex1 != nullptr)
		*EmptyIndex1 = Parms.EmptyIndex1;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AnyWheelHasContact
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    HasContact                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::AnyWheelHasContact(bool* HasContact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AnyWheelHasContact");

	Params::AVS_VehicleMaster_C_AnyWheelHasContact Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasContact != nullptr)
		*HasContact = Parms.HasContact;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AttachDoorToBone
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::AttachDoorToBone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AttachDoorToBone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.AttachDoorToMainMesh
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::AttachDoorToMainMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "AttachDoorToMainMesh");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BindOnSurvDeathAndDestroy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_V2_C*             Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::BindOnSurvDeathAndDestroy(class ASurvivalPlayer_V2_C* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BindOnSurvDeathAndDestroy");

	Params::AVS_VehicleMaster_C_BindOnSurvDeathAndDestroy Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_7_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_7_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_7_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_7_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_8_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_8_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_8_ComponentEndOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_5WheelDetection_K2Node_ComponentBoundEvent_8_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Cylinder_BL_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Cylinder_BL_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Cylinder_BL_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Cylinder_BL_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Cylinder_BR_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Cylinder_BR_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Cylinder_BR_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Cylinder_BR_K2Node_ComponentBoundEvent_11_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Cylinder_FR_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Cylinder_FR_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Cylinder_FR_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Cylinder_FR_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Cylynder_FL_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Cylynder_FL_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Cylynder_FL_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Cylynder_FL_K2Node_ComponentBoundEvent_10_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_mMesh_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Sphere1_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Sphere2_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Sphere2_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Sphere2_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Sphere2_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Sphere3_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Sphere3_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Sphere3_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Sphere3_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.BndEvt__AVS_VehicleMaster_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::BndEvt__AVS_VehicleMaster_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "BndEvt__AVS_VehicleMaster_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::AVS_VehicleMaster_C_BndEvt__AVS_VehicleMaster_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CalculateFlat Wheel Number
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FlatWheelNumber                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::CalculateFlat_Wheel_Number(int32* FlatWheelNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CalculateFlat Wheel Number");

	Params::AVS_VehicleMaster_C_CalculateFlat_Wheel_Number Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FlatWheelNumber != nullptr)
		*FlatWheelNumber = Parms.FlatWheelNumber;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CaptureCarTrail
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::CaptureCarTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CaptureCarTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Car StatDecodeAndSet
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_V2_C*             CarsOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Car_StatDecodeAndSet(class ASurvivalPlayer_V2_C* CarsOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Car StatDecodeAndSet");

	Params::AVS_VehicleMaster_C_Car_StatDecodeAndSet Parms{};

	Parms.CarsOwner = CarsOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CarIsEmpty
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Empty                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::CarIsEmpty(bool* Empty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CarIsEmpty");

	Params::AVS_VehicleMaster_C_CarIsEmpty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Empty != nullptr)
		*Empty = Parms.Empty;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ChangeViewTargetWithDelay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            NewViewTarget                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Exit                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ChangeViewTargetWithDelay(double Delay, class APawn* NewViewTarget, bool Exit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ChangeViewTargetWithDelay");

	Params::AVS_VehicleMaster_C_ChangeViewTargetWithDelay Parms{};

	Parms.Delay = Delay;
	Parms.NewViewTarget = NewViewTarget;
	Parms.Exit = Exit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Check Player Neer Engine
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayerNeerEngine                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Check_Player_Neer_Engine(class ASurvivalPlayer_C* Param_Player, bool* PlayerNeerEngine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Check Player Neer Engine");

	Params::AVS_VehicleMaster_C_Check_Player_Neer_Engine Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerNeerEngine != nullptr)
		*PlayerNeerEngine = Parms.PlayerNeerEngine;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Check Player Neer Gas
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayerNeerGas                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Check_Player_Neer_Gas(class ASurvivalPlayer_C* Param_Player, bool* PlayerNeerGas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Check Player Neer Gas");

	Params::AVS_VehicleMaster_C_Check_Player_Neer_Gas Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerNeerGas != nullptr)
		*PlayerNeerGas = Parms.PlayerNeerGas;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CheckForUnderWater
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::CheckForUnderWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CheckForUnderWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CheckForWheelNotTouckWhileUnderWater
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::CheckForWheelNotTouckWhileUnderWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CheckForWheelNotTouckWhileUnderWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CheckOneSits
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Dimension_1                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   ActorsToIgnore                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>                     SocketArray                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    bLock                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::CheckOneSits(int32 Dimension_1, const TArray<class AActor*>& ActorsToIgnore, TArray<class FName>& SocketArray, bool* bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CheckOneSits");

	Params::AVS_VehicleMaster_C_CheckOneSits Parms{};

	Parms.Dimension_1 = Dimension_1;
	Parms.ActorsToIgnore = std::move(ActorsToIgnore);
	Parms.SocketArray = std::move(SocketArray);

	UObject::ProcessEvent(Func, &Parms);

	SocketArray = std::move(Parms.SocketArray);

	if (bLock != nullptr)
		*bLock = Parms.bLock;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CheckPlayerSits
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    CanEnter                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::CheckPlayerSits(class ASurvivalPlayer_C* Param_Player, bool* CanEnter, int32* SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CheckPlayerSits");

	Params::AVS_VehicleMaster_C_CheckPlayerSits Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);

	if (CanEnter != nullptr)
		*CanEnter = Parms.CanEnter;

	if (SitIndex != nullptr)
		*SitIndex = Parms.SitIndex;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CheckZombieKill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AAVS_VehicleMaster_C::CheckZombieKill(class UObject* Object, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CheckZombieKill");

	Params::AVS_VehicleMaster_C_CheckZombieKill Parms{};

	Parms.Object = Object;
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CheckZombieZeroSpeedKill
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::CheckZombieZeroSpeedKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CheckZombieZeroSpeedKill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ChekIfStillOverlapWater
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    StillOverlap                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ChekIfStillOverlapWater(const TArray<class AActor*>& TargetArray, bool* StillOverlap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ChekIfStillOverlapWater");

	Params::AVS_VehicleMaster_C_ChekIfStillOverlapWater Parms{};

	Parms.TargetArray = std::move(TargetArray);

	UObject::ProcessEvent(Func, &Parms);

	if (StillOverlap != nullptr)
		*StillOverlap = Parms.StillOverlap;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ChekIfStillUnderWater
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    StillUnderWater                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ChekIfStillUnderWater(bool* StillUnderWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ChekIfStillUnderWater");

	Params::AVS_VehicleMaster_C_ChekIfStillUnderWater Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StillUnderWater != nullptr)
		*StillUnderWater = Parms.StillUnderWater;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ClientsEnterVehicleAsDriver
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ClientsEnterVehicleAsDriver(class ASurvivalPlayer_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ClientsEnterVehicleAsDriver");

	Params::AVS_VehicleMaster_C_ClientsEnterVehicleAsDriver Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ClientsEnterVehicleAsPassenger
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ClientsEnterVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ClientsEnterVehicleAsPassenger");

	Params::AVS_VehicleMaster_C_ClientsEnterVehicleAsPassenger Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ClientsExitVehicleAsDriver
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ClientsExitVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ClientsExitVehicleAsDriver");

	Params::AVS_VehicleMaster_C_ClientsExitVehicleAsDriver Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ClientsExitVehicleAsPassenger
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ClientsExitVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ClientsExitVehicleAsPassenger");

	Params::AVS_VehicleMaster_C_ClientsExitVehicleAsPassenger Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CodeCarsStat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<double>                          Fuel                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<double>                          Durability                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FString>                   Stats                                                  (Parm, OutParm)

void AAVS_VehicleMaster_C::CodeCarsStat(TArray<double>& Fuel, TArray<double>& Durability, TArray<class FString>* Stats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CodeCarsStat");

	Params::AVS_VehicleMaster_C_CodeCarsStat Parms{};

	Parms.Fuel = std::move(Fuel);
	Parms.Durability = std::move(Durability);

	UObject::ProcessEvent(Func, &Parms);

	Fuel = std::move(Parms.Fuel);
	Durability = std::move(Parms.Durability);

	if (Stats != nullptr)
		*Stats = std::move(Parms.Stats);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.CompareSteamIdtoOwner
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             SurvRef                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::CompareSteamIdtoOwner(const class FString& SteamID, class ASurvivalPlayer_V2_C* SurvRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "CompareSteamIdtoOwner");

	Params::AVS_VehicleMaster_C_CompareSteamIdtoOwner Parms{};

	Parms.SteamID = std::move(SteamID);
	Parms.SurvRef = SurvRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DEBUG_SetFXSpawnRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_SpawnRate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_SpawnRate_ST                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_SpawnRate_ST2                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_SpawnRate_ST3                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Param_SpawnRate_ST4                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::DEBUG_SetFXSpawnRate(float Param_SpawnRate, float Param_SpawnRate_ST, float Param_SpawnRate_ST2, float Param_SpawnRate_ST3, float Param_SpawnRate_ST4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DEBUG_SetFXSpawnRate");

	Params::AVS_VehicleMaster_C_DEBUG_SetFXSpawnRate Parms{};

	Parms.Param_SpawnRate = Param_SpawnRate;
	Parms.Param_SpawnRate_ST = Param_SpawnRate_ST;
	Parms.Param_SpawnRate_ST2 = Param_SpawnRate_ST2;
	Parms.Param_SpawnRate_ST3 = Param_SpawnRate_ST3;
	Parms.Param_SpawnRate_ST4 = Param_SpawnRate_ST4;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.debugtraceMulti
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::DebugtraceMulti(const struct FVector& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "debugtraceMulti");

	Params::AVS_VehicleMaster_C_DebugtraceMulti Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Destroy Car when Nosurv InRange Of
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASurvivalPlayer_C*>        Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Destroy_Car_when_Nosurv_InRange_Of(TArray<class ASurvivalPlayer_C*>& Array, double Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Destroy Car when Nosurv InRange Of");

	Params::AVS_VehicleMaster_C_Destroy_Car_when_Nosurv_InRange_Of Parms{};

	Parms.Array = std::move(Array);
	Parms.Radius = Radius;

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DestroyInteractable
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::DestroyInteractable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DestroyInteractable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DestroySelfWhenTimerOut
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::DestroySelfWhenTimerOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DestroySelfWhenTimerOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DestroyWithSave
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::DestroyWithSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DestroyWithSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DoorAnimation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Open                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::DoorAnimation(int32 SitIndex, bool Open)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DoorAnimation");

	Params::AVS_VehicleMaster_C_DoorAnimation Parms{};

	Parms.SitIndex = SitIndex;
	Parms.Open = Open;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DriverGetInCar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::DriverGetInCar(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DriverGetInCar");

	Params::AVS_VehicleMaster_C_DriverGetInCar Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DriverGetOutCar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::DriverGetOutCar(class ASurvivalPlayer_C* Param_Player, int32 SitIndex, bool SkipAnimation, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DriverGetOutCar");

	Params::AVS_VehicleMaster_C_DriverGetOutCar Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.DurabilityEnd
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::DurabilityEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "DurabilityEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.EncodeCarsStat
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FString>                   Stats                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<double>                          Fuel                                                   (Parm, OutParm)
// TArray<double>                          Durability                                             (Parm, OutParm)

void AAVS_VehicleMaster_C::EncodeCarsStat(TArray<class FString>& Stats, TArray<double>* Fuel, TArray<double>* Durability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "EncodeCarsStat");

	Params::AVS_VehicleMaster_C_EncodeCarsStat Parms{};

	Parms.Stats = std::move(Stats);

	UObject::ProcessEvent(Func, &Parms);

	Stats = std::move(Parms.Stats);

	if (Fuel != nullptr)
		*Fuel = std::move(Parms.Fuel);

	if (Durability != nullptr)
		*Durability = std::move(Parms.Durability);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ENDFCKNGDELAY
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::ENDFCKNGDELAY()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ENDFCKNGDELAY");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.EngineTurnOff
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::EngineTurnOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "EngineTurnOff");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.EngineTurnOn
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::EngineTurnOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "EngineTurnOn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.EnterVehicle
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    FromRancho                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::EnterVehicle(class ASurvivalPlayer_C* Param_Player, int32 SitIndex, bool FromRancho)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "EnterVehicle");

	Params::AVS_VehicleMaster_C_EnterVehicle Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.FromRancho = FromRancho;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ExecuteUbergraph_AVS_VehicleMaster
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ExecuteUbergraph_AVS_VehicleMaster(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ExecuteUbergraph_AVS_VehicleMaster");

	Params::AVS_VehicleMaster_C_ExecuteUbergraph_AVS_VehicleMaster Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ExitCarOnInterrupt
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ExitCarOnInterrupt(int32 SitIndex, class AActor* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ExitCarOnInterrupt");

	Params::AVS_VehicleMaster_C_ExitCarOnInterrupt Parms{};

	Parms.SitIndex = SitIndex;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ExitVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreSpeedLimits                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ExitVehicle(class AActor* Param_Player, bool SkipAnimation, bool SkipExitOnLocation, bool IgnoreSpeedLimits, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ExitVehicle");

	Params::AVS_VehicleMaster_C_ExitVehicle Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipAnimation = SkipAnimation;
	Parms.SkipExitOnLocation = SkipExitOnLocation;
	Parms.IgnoreSpeedLimits = IgnoreSpeedLimits;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.FCKNGDELAY
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::FCKNGDELAY(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "FCKNGDELAY");

	Params::AVS_VehicleMaster_C_FCKNGDELAY Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.FillGas
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::FillGas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "FillGas");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.FixAllWheels
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::FixAllWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "FixAllWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.flashlight
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Flashlight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "flashlight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.FlatWheelEnable
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_CarIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::FlatWheelEnable(int32 WheelIndex, int32 Param_CarIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "FlatWheelEnable");

	Params::AVS_VehicleMaster_C_FlatWheelEnable Parms{};

	Parms.WheelIndex = WheelIndex;
	Parms.Param_CarIndex = Param_CarIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.FuelEnd
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::FuelEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "FuelEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetActorType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ActorType                             ActorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetActorType(E_ActorType* ActorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetActorType");

	Params::AVS_VehicleMaster_C_GetActorType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorType != nullptr)
		*ActorType = Parms.ActorType;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetBoostInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BoostTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BoostCooldownTime                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetBoostInfo(double* BoostTime, double* BoostCooldownTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetBoostInfo");

	Params::AVS_VehicleMaster_C_GetBoostInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BoostTime != nullptr)
		*BoostTime = Parms.BoostTime;

	if (BoostCooldownTime != nullptr)
		*BoostCooldownTime = Parms.BoostCooldownTime;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetCarStatsComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_CarStatsComponent_C*         CarStats                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetCarStatsComponent(class UBPC_CarStatsComponent_C** CarStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetCarStatsComponent");

	Params::AVS_VehicleMaster_C_GetCarStatsComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CarStats != nullptr)
		*CarStats = Parms.CarStats;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetCarTipe
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ECarTipe                                CarTipe                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetCarTipe(ECarTipe* CarTipe)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetCarTipe");

	Params::AVS_VehicleMaster_C_GetCarTipe Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CarTipe != nullptr)
		*CarTipe = Parms.CarTipe;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetCurrentSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   CurrentSpeedKMH                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetCurrentSpeed(float* CurrentSpeedKMH)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetCurrentSpeed");

	Params::AVS_VehicleMaster_C_GetCurrentSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentSpeedKMH != nullptr)
		*CurrentSpeedKMH = Parms.CurrentSpeedKMH;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetDriver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Driver                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_V2_C*             NewParam                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetDriver(class APawn** Driver, class ASurvivalPlayer_V2_C** NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetDriver");

	Params::AVS_VehicleMaster_C_GetDriver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Driver != nullptr)
		*Driver = Parms.Driver;

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetEngineStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Started                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetEngineStarted(bool* Started)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetEngineStarted");

	Params::AVS_VehicleMaster_C_GetEngineStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Started != nullptr)
		*Started = Parms.Started;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetExitPoint
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CorrectLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    YouCantExit                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetExitPoint(int32 SitIndex, class AActor* Param_Player, struct FVector* Location, bool* CorrectLocation, bool* YouCantExit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetExitPoint");

	Params::AVS_VehicleMaster_C_GetExitPoint Parms{};

	Parms.SitIndex = SitIndex;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (CorrectLocation != nullptr)
		*CorrectLocation = Parms.CorrectLocation;

	if (YouCantExit != nullptr)
		*YouCantExit = Parms.YouCantExit;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetIsAccelerating
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAccelerating                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetIsAccelerating(bool* IsAccelerating)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetIsAccelerating");

	Params::AVS_VehicleMaster_C_GetIsAccelerating Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAccelerating != nullptr)
		*IsAccelerating = Parms.IsAccelerating;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetOutAllPlayersInCar
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::GetOutAllPlayersInCar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetOutAllPlayersInCar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetPassengers
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PassengerFL                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PassengerBL                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            PassengerBR                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetPassengers(class APawn** PassengerFL, class APawn** PassengerBL, class APawn** PassengerBR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetPassengers");

	Params::AVS_VehicleMaster_C_GetPassengers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PassengerFL != nullptr)
		*PassengerFL = Parms.PassengerFL;

	if (PassengerBL != nullptr)
		*PassengerBL = Parms.PassengerBL;

	if (PassengerBR != nullptr)
		*PassengerBR = Parms.PassengerBR;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetSteering
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetSteering(double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetSteering");

	Params::AVS_VehicleMaster_C_GetSteering Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetSurfaceAmplitudeMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysMatMultiplier                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetSurfaceAmplitudeMultiplier(EPhysicalSurface SurfaceType, float* PhysMatMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetSurfaceAmplitudeMultiplier");

	Params::AVS_VehicleMaster_C_GetSurfaceAmplitudeMultiplier Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (PhysMatMultiplier != nullptr)
		*PhysMatMultiplier = Parms.PhysMatMultiplier;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetSurfaceDelayMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysMatMultiplier                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetSurfaceDelayMultiplier(EPhysicalSurface SurfaceType, float* PhysMatMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetSurfaceDelayMultiplier");

	Params::AVS_VehicleMaster_C_GetSurfaceDelayMultiplier Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (PhysMatMultiplier != nullptr)
		*PhysMatMultiplier = Parms.PhysMatMultiplier;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetTireVFX
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   NiagaraFX                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Succes                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetTireVFX(EPhysicalSurface Param_Index, class UNiagaraSystem** NiagaraFX, bool* Succes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetTireVFX");

	Params::AVS_VehicleMaster_C_GetTireVFX Parms{};

	Parms.Param_Index = Param_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (NiagaraFX != nullptr)
		*NiagaraFX = Parms.NiagaraFX;

	if (Succes != nullptr)
		*Succes = Parms.Succes;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetVehicleBody
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Body                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetVehicleBody(class USkeletalMeshComponent** Body)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetVehicleBody");

	Params::AVS_VehicleMaster_C_GetVehicleBody Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Body != nullptr)
		*Body = Parms.Body;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetWheelPitches
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<double>                          Pitches                                                (Parm, OutParm)

void AAVS_VehicleMaster_C::GetWheelPitches(TArray<double>* Pitches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetWheelPitches");

	Params::AVS_VehicleMaster_C_GetWheelPitches Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Pitches != nullptr)
		*Pitches = std::move(Parms.Pitches);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.GetWheels
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 LF                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 RF                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 LB                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USphereComponent*                 RB                                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::GetWheels(bool* IsValid, class USphereComponent** LF, class USphereComponent** RF, class USphereComponent** LB, class USphereComponent** RB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "GetWheels");

	Params::AVS_VehicleMaster_C_GetWheels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (LF != nullptr)
		*LF = Parms.LF;

	if (RF != nullptr)
		*RF = Parms.RF;

	if (LB != nullptr)
		*LB = Parms.LB;

	if (RB != nullptr)
		*RB = Parms.RB;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.HasCorrectExitRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AAVS_VehicleMaster_C::HasCorrectExitRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "HasCorrectExitRotation");

	Params::AVS_VehicleMaster_C_HasCorrectExitRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.HasDriver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AAVS_VehicleMaster_C::HasDriver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "HasDriver");

	Params::AVS_VehicleMaster_C_HasDriver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpActEvt_TurnEngine_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpActEvt_TurnEngine_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpActEvt_TurnEngine_K2Node_InputActionEvent_2");

	Params::AVS_VehicleMaster_C_InpActEvt_TurnEngine_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpActEvt_TurnLights_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpActEvt_TurnLights_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpActEvt_TurnLights_K2Node_InputActionEvent_0");

	Params::AVS_VehicleMaster_C_InpActEvt_TurnLights_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Interact_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Interact_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Interact_K2Node_InputActionEvent_1");

	Params::AVS_VehicleMaster_C_Interact_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_1");

	Params::AVS_VehicleMaster_C_InpAxisEvt_ForwardThrottle_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpAxisEvt_HandbrakeAxis_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpAxisEvt_HandbrakeAxis_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpAxisEvt_HandbrakeAxis_K2Node_InputAxisEvent_0");

	Params::AVS_VehicleMaster_C_InpAxisEvt_HandbrakeAxis_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpAxisEvt_LookUp_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpAxisEvt_LookUp_K2Node_InputAxisEvent_3");

	Params::AVS_VehicleMaster_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_2");

	Params::AVS_VehicleMaster_C_InpAxisEvt_SteeringWheels_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::InpAxisEvt_Turn_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "InpAxisEvt_Turn_K2Node_InputAxisEvent_2");

	Params::AVS_VehicleMaster_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.IsInViewport
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AAVS_VehicleMaster_C::IsInViewport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "IsInViewport");

	Params::AVS_VehicleMaster_C_IsInViewport Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.IsLocked?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::IsLocked_(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "IsLocked?");

	Params::AVS_VehicleMaster_C_IsLocked_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.IsPartyMember
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AAVS_VehicleMaster_C::IsPartyMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "IsPartyMember");

	Params::AVS_VehicleMaster_C_IsPartyMember Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.IsPlayerOwner_OrTeamMate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Teammate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::IsPlayerOwner_OrTeamMate(class APawn* Param_Player, bool* Teammate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "IsPlayerOwner_OrTeamMate");

	Params::AVS_VehicleMaster_C_IsPlayerOwner_OrTeamMate Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Teammate != nullptr)
		*Teammate = Parms.Teammate;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.IsUnderWater
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  WaterZlevel                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AAVS_VehicleMaster_C::IsUnderWater(double WaterZlevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "IsUnderWater");

	Params::AVS_VehicleMaster_C_IsUnderWater Parms{};

	Parms.WaterZlevel = WaterZlevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.IsVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsVehicle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::IsVehicle(bool* Param_IsVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "IsVehicle");

	Params::AVS_VehicleMaster_C_IsVehicle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsVehicle != nullptr)
		*Param_IsVehicle = Parms.Param_IsVehicle;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.KillAllPrint
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ASurvivalPlayer_C*>        InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void AAVS_VehicleMaster_C::KillAllPrint(TArray<class ASurvivalPlayer_C*>& InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "KillAllPrint");

	Params::AVS_VehicleMaster_C_KillAllPrint Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);

	InputPin = std::move(Parms.InputPin);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.KillPlayersAndDropOut
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::KillPlayersAndDropOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "KillPlayersAndDropOut");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.KillUnderWater
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::KillUnderWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "KillUnderWater");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.LinearDampingFromFlatTires
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamping_PDA_AVS_C*               DampingDA                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   FlatWheelsNumber                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  OutputPin                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::LinearDampingFromFlatTires(double InputPin, class UDamping_PDA_AVS_C* DampingDA, int32 FlatWheelsNumber, double* OutputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "LinearDampingFromFlatTires");

	Params::AVS_VehicleMaster_C_LinearDampingFromFlatTires Parms{};

	Parms.InputPin = InputPin;
	Parms.DampingDA = DampingDA;
	Parms.FlatWheelsNumber = FlatWheelsNumber;

	UObject::ProcessEvent(Func, &Parms);

	if (OutputPin != nullptr)
		*OutputPin = Parms.OutputPin;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.MakeSpeedDependentNoise
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::MakeSpeedDependentNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "MakeSpeedDependentNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_ChangeCollisionWithDelay
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECollisionChannel                       Channel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECollisionResponse                      NewResponse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_ChangeCollisionWithDelay(double Delay, ECollisionChannel Channel, ECollisionResponse NewResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_ChangeCollisionWithDelay");

	Params::AVS_VehicleMaster_C_Multi_ChangeCollisionWithDelay Parms{};

	Parms.Delay = Delay;
	Parms.Channel = Channel;
	Parms.NewResponse = NewResponse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_CollisionInCar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Multi_CollisionInCar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_CollisionInCar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_EnableSmoothSync
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_EnableSmoothSync(class ASurvivalPlayer_C* Target, bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_EnableSmoothSync");

	Params::AVS_VehicleMaster_C_Multi_EnableSmoothSync Parms{};

	Parms.Target = Target;
	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_FixAllWheels
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Multi_FixAllWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_FixAllWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_FlatWheelsEnable
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_FlatWheelsEnable(int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_FlatWheelsEnable");

	Params::AVS_VehicleMaster_C_Multi_FlatWheelsEnable Parms{};

	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_HitZombieSFX
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location_Location                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_HitZombieSFX(const struct FVector& Location_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_HitZombieSFX");

	Params::AVS_VehicleMaster_C_Multi_HitZombieSFX Parms{};

	Parms.Location_Location = std::move(Location_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_PhysicsToggle
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_PhysicsToggle(bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_PhysicsToggle");

	Params::AVS_VehicleMaster_C_Multi_PhysicsToggle Parms{};

	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_ResetCameraPos
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_ResetCameraPos(class ASurvivalPlayer_C* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_ResetCameraPos");

	Params::AVS_VehicleMaster_C_Multi_ResetCameraPos Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_ResetSurvRotation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_C*                SurvivalPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_ResetSurvRotation(int32 SitIndex, class ASurvivalPlayer_C* SurvivalPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_ResetSurvRotation");

	Params::AVS_VehicleMaster_C_Multi_ResetSurvRotation Parms{};

	Parms.SitIndex = SitIndex;
	Parms.SurvivalPlayer = SurvivalPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_RPClocation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_RPClocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_RPClocation");

	Params::AVS_VehicleMaster_C_Multi_RPClocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_SetPassengerCameraMode
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_SetPassengerCameraMode(class ASurvivalPlayer_C* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_SetPassengerCameraMode");

	Params::AVS_VehicleMaster_C_Multi_SetPassengerCameraMode Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_SetReplication
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_SetReplication(bool Replicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_SetReplication");

	Params::AVS_VehicleMaster_C_Multi_SetReplication Parms{};

	Parms.Replicate = Replicate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_SetSurvIdleAnimation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                SurvivalPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InCar                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Driver                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_SetSurvIdleAnimation(class ASurvivalPlayer_C* SurvivalPlayer, bool InCar, bool Driver, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_SetSurvIdleAnimation");

	Params::AVS_VehicleMaster_C_Multi_SetSurvIdleAnimation Parms{};

	Parms.SurvivalPlayer = SurvivalPlayer;
	Parms.InCar = InCar;
	Parms.Driver = Driver;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_TurnLight
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_TurnLight(bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_TurnLight");

	Params::AVS_VehicleMaster_C_Multi_TurnLight Parms{};

	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multi_Uncrouch
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_V2_C*             Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multi_Uncrouch(class ASurvivalPlayer_V2_C* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multi_Uncrouch");

	Params::AVS_VehicleMaster_C_Multi_Uncrouch Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.MultiCallDecreaseDurability
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::MultiCallDecreaseDurability(double Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "MultiCallDecreaseDurability");

	Params::AVS_VehicleMaster_C_MultiCallDecreaseDurability Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.MulticallEnterVehicleAsDriver
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    FromRancho                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::MulticallEnterVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool FromRancho)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "MulticallEnterVehicleAsDriver");

	Params::AVS_VehicleMaster_C_MulticallEnterVehicleAsDriver Parms{};

	Parms.Param_Player = Param_Player;
	Parms.FromRancho = FromRancho;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.MulticallEnterVehicleAsPassenger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::MulticallEnterVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "MulticallEnterVehicleAsPassenger");

	Params::AVS_VehicleMaster_C_MulticallEnterVehicleAsPassenger Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.MultiCallExitVehicleAsDriver
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::MultiCallExitVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "MultiCallExitVehicleAsDriver");

	Params::AVS_VehicleMaster_C_MultiCallExitVehicleAsDriver Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.MultiCallExitVehicleAsPassenger
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::MultiCallExitVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "MultiCallExitVehicleAsPassenger");

	Params::AVS_VehicleMaster_C_MultiCallExitVehicleAsPassenger Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.multo_SetReplicateMovement
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    bInReplicateMovement                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Multo_SetReplicateMovement(class AActor* Target, bool bInReplicateMovement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "multo_SetReplicateMovement");

	Params::AVS_VehicleMaster_C_Multo_SetReplicateMovement Parms{};

	Parms.Target = Target;
	Parms.bInReplicateMovement = bInReplicateMovement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnBeginInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnBeginInteract(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnBeginInteract");

	Params::AVS_VehicleMaster_C_OnBeginInteract Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnBlendOut_74EEDDDE40927650F01D18B3256F472C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnBlendOut_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnBlendOut_74EEDDDE40927650F01D18B3256F472C");

	Params::AVS_VehicleMaster_C_OnBlendOut_74EEDDDE40927650F01D18B3256F472C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnCompleted_74EEDDDE40927650F01D18B3256F472C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnCompleted_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnCompleted_74EEDDDE40927650F01D18B3256F472C");

	Params::AVS_VehicleMaster_C_OnCompleted_74EEDDDE40927650F01D18B3256F472C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnDeath
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OnDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnDestroy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnDestroy(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnDestroy");

	Params::AVS_VehicleMaster_C_OnDestroy Parms{};

	Parms.DestroyedActor = DestroyedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.oCar
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OCar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "oCar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnFocused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HighlightActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HighlightActorComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// E_InteractType                          InteractType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LateTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnFocused(class APawn* Param_Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnFocused");

	Params::AVS_VehicleMaster_C_OnFocused Parms{};

	Parms.Param_Player = Param_Player;
	Parms.HighlightActor = HighlightActor;
	Parms.HighlightActorComponent = HighlightActorComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractType != nullptr)
		*InteractType = Parms.InteractType;

	if (LateTime != nullptr)
		*LateTime = Parms.LateTime;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnInteract(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnInteract");

	Params::AVS_VehicleMaster_C_OnInteract Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnInteract2
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnInteract2(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnInteract2");

	Params::AVS_VehicleMaster_C_OnInteract2 Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnInteract3
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnInteract3(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnInteract3");

	Params::AVS_VehicleMaster_C_OnInteract3 Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnInteractVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnInteractVehicle(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnInteractVehicle");

	Params::AVS_VehicleMaster_C_OnInteractVehicle Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnInterrupted_74EEDDDE40927650F01D18B3256F472C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnInterrupted_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnInterrupted_74EEDDDE40927650F01D18B3256F472C");

	Params::AVS_VehicleMaster_C_OnInterrupted_74EEDDDE40927650F01D18B3256F472C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnLevelLoaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnLevelLoaded(class FName Level, class AActor* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnLevelLoaded");

	Params::AVS_VehicleMaster_C_OnLevelLoaded Parms{};

	Parms.Level = Level;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnLevelUnloaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnLevelUnloaded(class FName Level, class AActor* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnLevelUnloaded");

	Params::AVS_VehicleMaster_C_OnLevelUnloaded Parms{};

	Parms.Level = Level;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnLocalInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnLocalInteract(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnLocalInteract");

	Params::AVS_VehicleMaster_C_OnLocalInteract Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnLostFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnLostFocus(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnLostFocus");

	Params::AVS_VehicleMaster_C_OnLostFocus Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnNotifyBegin_74EEDDDE40927650F01D18B3256F472C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnNotifyBegin_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnNotifyBegin_74EEDDDE40927650F01D18B3256F472C");

	Params::AVS_VehicleMaster_C_OnNotifyBegin_74EEDDDE40927650F01D18B3256F472C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnNotifyEnd_74EEDDDE40927650F01D18B3256F472C
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NotifyName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnNotifyEnd_74EEDDDE40927650F01D18B3256F472C(class FName NotifyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnNotifyEnd_74EEDDDE40927650F01D18B3256F472C");

	Params::AVS_VehicleMaster_C_OnNotifyEnd_74EEDDDE40927650F01D18B3256F472C Parms{};

	Parms.NotifyName = NotifyName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnRep_bBlockInputs
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OnRep_bBlockInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnRep_bBlockInputs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnRep_EngineStarted
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OnRep_EngineStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnRep_EngineStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnRep_IsDriving
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OnRep_IsDriving()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnRep_IsDriving");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnRep_Sits
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OnRep_Sits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnRep_Sits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnSeen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnSeen(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnSeen");

	Params::AVS_VehicleMaster_C_OnSeen Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnSimulatedPhysicsChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnSimulatedPhysicsChanged(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnSimulatedPhysicsChanged");

	Params::AVS_VehicleMaster_C_OnSimulatedPhysicsChanged Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnSquadCheckComplete
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::OnSquadCheckComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnSquadCheckComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OnStopInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OnStopInteract(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OnStopInteract");

	Params::AVS_VehicleMaster_C_OnStopInteract Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.OwnerDeathOrDestroy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_OwnerDeadOrDestroyed                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::OwnerDeathOrDestroy(bool Param_OwnerDeadOrDestroyed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "OwnerDeathOrDestroy");

	Params::AVS_VehicleMaster_C_OwnerDeathOrDestroy Parms{};

	Parms.Param_OwnerDeadOrDestroyed = Param_OwnerDeadOrDestroyed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.PassengerGetInCar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::PassengerGetInCar(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "PassengerGetInCar");

	Params::AVS_VehicleMaster_C_PassengerGetInCar Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.PassengerGetOutCar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::PassengerGetOutCar(class ASurvivalPlayer_C* Param_Player, int32 SitIndex, bool SkipAnimation, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "PassengerGetOutCar");

	Params::AVS_VehicleMaster_C_PassengerGetOutCar Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.PlayDriverIdleAnim
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::PlayDriverIdleAnim(class ASurvivalPlayer_C* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "PlayDriverIdleAnim");

	Params::AVS_VehicleMaster_C_PlayDriverIdleAnim Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.PlayPassengerIdleAnim
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::PlayPassengerIdleAnim(class ASurvivalPlayer_C* Surv, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "PlayPassengerIdleAnim");

	Params::AVS_VehicleMaster_C_PlayPassengerIdleAnim Parms{};

	Parms.Surv = Surv;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ReceiveAnyDamage");

	Params::AVS_VehicleMaster_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAVS_VehicleMaster_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ReceiveTick");

	Params::AVS_VehicleMaster_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.RemovePlayerFromCarOnLogOut
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::RemovePlayerFromCarOnLogOut(const class ASurvivalPlayer_C*& Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "RemovePlayerFromCarOnLogOut");

	Params::AVS_VehicleMaster_C_RemovePlayerFromCarOnLogOut Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Repair
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Repair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Repair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ReroutePlayerIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Surv                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   NewSitIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnim                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Allow_                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ReroutePlayerIndex(class APawn* Param_Player, int32 SitIndex, bool SkipAnimation, class APawn** Surv, int32* NewSitIndex, bool* SkipAnim, bool* Allow_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ReroutePlayerIndex");

	Params::AVS_VehicleMaster_C_ReroutePlayerIndex Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);

	if (Surv != nullptr)
		*Surv = Parms.Surv;

	if (NewSitIndex != nullptr)
		*NewSitIndex = Parms.NewSitIndex;

	if (SkipAnim != nullptr)
		*SkipAnim = Parms.SkipAnim;

	if (Allow_ != nullptr)
		*Allow_ = Parms.Allow_;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ResetDoOnce_TogglePhysics
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::ResetDoOnce_TogglePhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ResetDoOnce_TogglePhysics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ResetOnMud
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::ResetOnMud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ResetOnMud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ResetOnOther
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::ResetOnOther()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ResetOnOther");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ResetWaterOverlap
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::ResetWaterOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ResetWaterOverlap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Run Lockpicking
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Run_Lockpicking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Run Lockpicking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.RunSetAnimFromCar
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InCar                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Driver                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECarTipe                                CarTipe                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::RunSetAnimFromCar(class ASurvivalPlayer_C* Target, bool InCar, bool Driver, ECarTipe CarTipe, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "RunSetAnimFromCar");

	Params::AVS_VehicleMaster_C_RunSetAnimFromCar Parms{};

	Parms.Target = Target;
	Parms.InCar = InCar;
	Parms.Driver = Driver;
	Parms.CarTipe = CarTipe;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_ApplyDamage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BaseDamage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_ApplyDamage(float BaseDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_ApplyDamage");

	Params::AVS_VehicleMaster_C_Serv_ApplyDamage Parms{};

	Parms.BaseDamage = BaseDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Serv_BlockInputs
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bBlockInputs                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_BlockInputs(bool Param_bBlockInputs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Serv_BlockInputs");

	Params::AVS_VehicleMaster_C_Serv_BlockInputs Parms{};

	Parms.Param_bBlockInputs = Param_bBlockInputs;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_CollisionInCar
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::Serv_CollisionInCar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_CollisionInCar");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_FlatWheelsEnable
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WheelIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_FlatWheelsEnable(int32 WheelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_FlatWheelsEnable");

	Params::AVS_VehicleMaster_C_Serv_FlatWheelsEnable Parms{};

	Parms.WheelIndex = WheelIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_PhysicsToggle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_PhysicsToggle(bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_PhysicsToggle");

	Params::AVS_VehicleMaster_C_Serv_PhysicsToggle Parms{};

	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_ResetCameraPos
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_ResetCameraPos(class ASurvivalPlayer_C* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_ResetCameraPos");

	Params::AVS_VehicleMaster_C_Serv_ResetCameraPos Parms{};

	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_RPClocation
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_RPClocation(const struct FTransform& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_RPClocation");

	Params::AVS_VehicleMaster_C_Serv_RPClocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_SetReplication
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Replicate                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_SetReplication(bool Replicate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_SetReplication");

	Params::AVS_VehicleMaster_C_Serv_SetReplication Parms{};

	Parms.Replicate = Replicate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_SwitchSits
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DesireSitIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_SwitchSits(int32 DesireSitIndex, class AActor* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_SwitchSits");

	Params::AVS_VehicleMaster_C_Serv_SwitchSits Parms{};

	Parms.DesireSitIndex = DesireSitIndex;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_TakenDamage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DontAnimate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EffectDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HungerDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_TakenDamage(class ASurvivalPlayer_C* Surv, double Damage, bool DontAnimate, bool EffectDamage, bool HungerDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_TakenDamage");

	Params::AVS_VehicleMaster_C_Serv_TakenDamage Parms{};

	Parms.Surv = Surv;
	Parms.Damage = Damage;
	Parms.DontAnimate = DontAnimate;
	Parms.EffectDamage = EffectDamage;
	Parms.HungerDamage = HungerDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_ToggleSwitchSitsCD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_SwitchCoolDown                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_ToggleSwitchSitsCD(bool Param_SwitchCoolDown, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_ToggleSwitchSitsCD");

	Params::AVS_VehicleMaster_C_Serv_ToggleSwitchSitsCD Parms{};

	Parms.Param_SwitchCoolDown = Param_SwitchCoolDown;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.serv_TurnLight
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visibility                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Serv_TurnLight(bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "serv_TurnLight");

	Params::AVS_VehicleMaster_C_Serv_TurnLight Parms{};

	Parms.Visibility = Visibility;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ServerCallExitVehicle
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ServerCallExitVehicle(class AActor* Param_Player, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ServerCallExitVehicle");

	Params::AVS_VehicleMaster_C_ServerCallExitVehicle Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ServerCallSetEngineStarted
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_EngineStarted                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ServerCallSetEngineStarted(bool Param_EngineStarted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ServerCallSetEngineStarted");

	Params::AVS_VehicleMaster_C_ServerCallSetEngineStarted Parms{};

	Parms.Param_EngineStarted = Param_EngineStarted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ServerEnterVehicleAsDriver
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    FromRancho                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ServerEnterVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool FromRancho)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ServerEnterVehicleAsDriver");

	Params::AVS_VehicleMaster_C_ServerEnterVehicleAsDriver Parms{};

	Parms.Param_Player = Param_Player;
	Parms.FromRancho = FromRancho;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ServerEnterVehicleAsPassenger
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ServerEnterVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ServerEnterVehicleAsPassenger");

	Params::AVS_VehicleMaster_C_ServerEnterVehicleAsPassenger Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ServerExitVehicleAsDriver
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ServerExitVehicleAsDriver(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ServerExitVehicleAsDriver");

	Params::AVS_VehicleMaster_C_ServerExitVehicleAsDriver Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ServerExitVehicleAsPassenger
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipExitOnLocation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ServerExitVehicleAsPassenger(class ASurvivalPlayer_C* Param_Player, bool SkipExitOnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ServerExitVehicleAsPassenger");

	Params::AVS_VehicleMaster_C_ServerExitVehicleAsPassenger Parms{};

	Parms.Param_Player = Param_Player;
	Parms.SkipExitOnLocation = SkipExitOnLocation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Set3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Set3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Set3DWidgetVisibility");

	Params::AVS_VehicleMaster_C_Set3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetActorToPelvisLocation
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                PlayerToKill                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetActorToPelvisLocation(class ASurvivalPlayer_C* PlayerToKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetActorToPelvisLocation");

	Params::AVS_VehicleMaster_C_SetActorToPelvisLocation Parms{};

	Parms.PlayerToKill = PlayerToKill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetBoost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewBoost                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetBoost(bool NewBoost, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetBoost");

	Params::AVS_VehicleMaster_C_SetBoost Parms{};

	Parms.NewBoost = NewBoost;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetCarDestroyed
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::SetCarDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetCarDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetHighlightedCarWithDelay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetHighlightedCarWithDelay(float Delay, class ASurvivalPlayer_C* Surv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetHighlightedCarWithDelay");

	Params::AVS_VehicleMaster_C_SetHighlightedCarWithDelay Parms{};

	Parms.Delay = Delay;
	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetPhysicsAfterDelay
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetPhysicsAfterDelay(double Delay, bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetPhysicsAfterDelay");

	Params::AVS_VehicleMaster_C_SetPhysicsAfterDelay Parms{};

	Parms.Delay = Delay;
	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetStatBeforeSave
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Param_CarOwner                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Fuel                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Durablility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_CarIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>                   Stats                                                  (Parm, OutParm)

void AAVS_VehicleMaster_C::SetStatBeforeSave(class ASurvivalPlayer_C* Param_CarOwner, double Fuel, double Durablility, int32 Param_CarIndex, TArray<class FString>* Stats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetStatBeforeSave");

	Params::AVS_VehicleMaster_C_SetStatBeforeSave Parms{};

	Parms.Param_CarOwner = Param_CarOwner;
	Parms.Fuel = Fuel;
	Parms.Durablility = Durablility;
	Parms.Param_CarIndex = Param_CarIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Stats != nullptr)
		*Stats = std::move(Parms.Stats);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetStatInArray
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<double>                          FuelStat                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<double>                          DurabilityStat                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  Fuel                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Durablility                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_CarIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          FuelStats                                              (Parm, OutParm)
// TArray<double>                          DurabilityStats                                        (Parm, OutParm)

void AAVS_VehicleMaster_C::SetStatInArray(TArray<double>& FuelStat, TArray<double>& DurabilityStat, double Fuel, double Durablility, int32 Param_CarIndex, TArray<double>* FuelStats, TArray<double>* DurabilityStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetStatInArray");

	Params::AVS_VehicleMaster_C_SetStatInArray Parms{};

	Parms.FuelStat = std::move(FuelStat);
	Parms.DurabilityStat = std::move(DurabilityStat);
	Parms.Fuel = Fuel;
	Parms.Durablility = Durablility;
	Parms.Param_CarIndex = Param_CarIndex;

	UObject::ProcessEvent(Func, &Parms);

	FuelStat = std::move(Parms.FuelStat);
	DurabilityStat = std::move(Parms.DurabilityStat);

	if (FuelStats != nullptr)
		*FuelStats = std::move(Parms.FuelStats);

	if (DurabilityStats != nullptr)
		*DurabilityStats = std::move(Parms.DurabilityStats);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetStealAfterTimer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::SetStealAfterTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetStealAfterTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetSurvIdleAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                SurvivalPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    InCar                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Driver                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetSurvIdleAnimation(class ASurvivalPlayer_C* SurvivalPlayer, bool InCar, bool Driver, int32 SitIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetSurvIdleAnimation");

	Params::AVS_VehicleMaster_C_SetSurvIdleAnimation Parms{};

	Parms.SurvivalPlayer = SurvivalPlayer;
	Parms.InCar = InCar;
	Parms.Driver = Driver;
	Parms.SitIndex = SitIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetTutorial3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetTutorial3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetTutorial3DWidgetVisibility");

	Params::AVS_VehicleMaster_C_SetTutorial3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetupCarNoiseTimer
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetupCarNoiseTimer(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetupCarNoiseTimer");

	Params::AVS_VehicleMaster_C_SetupCarNoiseTimer Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetVariablesOnExplode
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::SetVariablesOnExplode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetVariablesOnExplode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SetVehicleSit
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Item_Is_Busy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Item_Sitter                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SetVehicleSit(int32 Param_Index, bool Item_Is_Busy, class APawn* Item_Sitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SetVehicleSit");

	Params::AVS_VehicleMaster_C_SetVehicleSit Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Item_Is_Busy = Item_Is_Busy;
	Parms.Item_Sitter = Item_Sitter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Show_Hide All Mesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Show_Hide_All_Mesh(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Show_Hide All Mesh");

	Params::AVS_VehicleMaster_C_Show_Hide_All_Mesh Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ShowHideDestroyed Mesh
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ShowHideDestroyed_Mesh(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ShowHideDestroyed Mesh");

	Params::AVS_VehicleMaster_C_ShowHideDestroyed_Mesh Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.ShowWidgets
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanEnter                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_C*                Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::ShowWidgets(bool CanEnter, class ASurvivalPlayer_C* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "ShowWidgets");

	Params::AVS_VehicleMaster_C_ShowWidgets Parms{};

	Parms.CanEnter = CanEnter;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SpawnNiagaraFX
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   SystemTemplate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             AttachPointName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UNiagaraComponent*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UNiagaraComponent* AAVS_VehicleMaster_C::SpawnNiagaraFX(class USceneComponent* SkeletalMesh, class UNiagaraSystem* SystemTemplate, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SpawnNiagaraFX");

	Params::AVS_VehicleMaster_C_SpawnNiagaraFX Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.SystemTemplate = SystemTemplate;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.StabilizeVehicleUpdate
// (Public, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::StabilizeVehicleUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "StabilizeVehicleUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.StartCaptureCarTrail
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::StartCaptureCarTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "StartCaptureCarTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.StartDrowingVehicle
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::StartDrowingVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "StartDrowingVehicle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.StartSelfDestroyTimer
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::StartSelfDestroyTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "StartSelfDestroyTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.StealCar
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            CarStealer                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::StealCar(class APawn* CarStealer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "StealCar");

	Params::AVS_VehicleMaster_C_StealCar Parms{};

	Parms.CarStealer = CarStealer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.StopCaptureCarTrail
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::StopCaptureCarTrail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "StopCaptureCarTrail");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SurvPlayerLogOut
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                SurvivalPlayer                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SurvPlayerLogOut(class ASurvivalPlayer_C* SurvivalPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SurvPlayerLogOut");

	Params::AVS_VehicleMaster_C_SurvPlayerLogOut Parms{};

	Parms.SurvivalPlayer = SurvivalPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SurvResetRelativePos
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::SurvResetRelativePos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SurvResetRelativePos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.SwitchSits
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DesireSitIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::SwitchSits(int32 DesireSitIndex, class AActor* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "SwitchSits");

	Params::AVS_VehicleMaster_C_SwitchSits Parms{};

	Parms.DesireSitIndex = DesireSitIndex;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.TakedDamageClient
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DDLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DontAnimate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRadialDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFireDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceToExplosion                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    StaminaDecrease                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Zombie_                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBPE_AmmoClass                          AmmoClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUNegativeEffectDamageType              NegativeEffectDamageType                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::TakedDamageClient(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* Killer, bool IsRadialDamage, bool IsFireDamage, double DistanceToExplosion, class AActor* DamageCauser, bool StaminaDecrease, bool Zombie_, EBPE_AmmoClass AmmoClass, EUNegativeEffectDamageType NegativeEffectDamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "TakedDamageClient");

	Params::AVS_VehicleMaster_C_TakedDamageClient Parms{};

	Parms.Damage = Damage;
	Parms.DDLocation = std::move(DDLocation);
	Parms.BoneName = BoneName;
	Parms.HitLocation = std::move(HitLocation);
	Parms.DontAnimate = DontAnimate;
	Parms.Killer = Killer;
	Parms.IsRadialDamage = IsRadialDamage;
	Parms.IsFireDamage = IsFireDamage;
	Parms.DistanceToExplosion = DistanceToExplosion;
	Parms.DamageCauser = DamageCauser;
	Parms.StaminaDecrease = StaminaDecrease;
	Parms.Zombie_ = Zombie_;
	Parms.AmmoClass = AmmoClass;
	Parms.NegativeEffectDamageType = NegativeEffectDamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.TakedDamageServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          DDLocation                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DontAnimate                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRadialDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFireDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DistanceToExplosion                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    StaminaDecrease                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Zombie_                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBPE_AmmoClass                          AmmoClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUNegativeEffectDamageType              NegativeEffectDamageType                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::TakedDamageServer(double Damage, const struct FVector& DDLocation, class FName BoneName, const struct FVector& HitLocation, bool DontAnimate, class APawn* Killer, bool IsRadialDamage, bool IsFireDamage, double DistanceToExplosion, class AActor* DamageCauser, bool StaminaDecrease, bool Zombie_, EBPE_AmmoClass AmmoClass, EUNegativeEffectDamageType NegativeEffectDamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "TakedDamageServer");

	Params::AVS_VehicleMaster_C_TakedDamageServer Parms{};

	Parms.Damage = Damage;
	Parms.DDLocation = std::move(DDLocation);
	Parms.BoneName = BoneName;
	Parms.HitLocation = std::move(HitLocation);
	Parms.DontAnimate = DontAnimate;
	Parms.Killer = Killer;
	Parms.IsRadialDamage = IsRadialDamage;
	Parms.IsFireDamage = IsFireDamage;
	Parms.DistanceToExplosion = DistanceToExplosion;
	Parms.DamageCauser = DamageCauser;
	Parms.StaminaDecrease = StaminaDecrease;
	Parms.Zombie_ = Zombie_;
	Parms.AmmoClass = AmmoClass;
	Parms.NegativeEffectDamageType = NegativeEffectDamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Teleporting Logic
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CarClass                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       CarTrans                                               (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::Teleporting_Logic(class UClass** CarClass, struct FTransform* CarTrans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Teleporting Logic");

	Params::AVS_VehicleMaster_C_Teleporting_Logic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CarClass != nullptr)
		*CarClass = Parms.CarClass;

	if (CarTrans != nullptr)
		*CarTrans = std::move(Parms.CarTrans);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.TeleportInteract
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AAVS_VehicleMaster_C::TeleportInteract(class APawn* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "TeleportInteract");

	Params::AVS_VehicleMaster_C_TeleportInteract Parms{};

	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline_5__FinishedFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline_5__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline_5__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline_5__UpdateFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline_5__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline_5__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline_6__FinishedFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline_6__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline_6__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline_6__UpdateFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline_6__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline_6__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline__FinishedFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.Timeline__UpdateFunc
// (BlueprintEvent)

void AAVS_VehicleMaster_C::Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.TurnEngine
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::TurnEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "TurnEngine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.UnbindsCarOwner
// (BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::UnbindsCarOwner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "UnbindsCarOwner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAVS_VehicleMaster_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AVS_VehicleMaster.AVS_VehicleMaster_C.WheelLastTouchSurface
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UFGearWheel*                      Wheel                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EPhysicalSurface AAVS_VehicleMaster_C::WheelLastTouchSurface(class UFGearWheel* Wheel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AVS_VehicleMaster_C", "WheelLastTouchSurface");

	Params::AVS_VehicleMaster_C_WheelLastTouchSurface Parms{};

	Parms.Wheel = Wheel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

