#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MPMainContainerBox

#include "Basic.hpp"

#include "MPMainContainerBox_classes.hpp"
#include "MPMainContainerBox_parameters.hpp"


namespace SDK
{

// Function MPMainContainerBox.MPMainContainerBox_C.ActivateQuest
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::ActivateQuest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ActivateQuest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.AddContainersToDictionary
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UJSIContainer_C*>          Containers                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void AMPMainContainerBox_C::AddContainersToDictionary(TArray<class UJSIContainer_C*>& Containers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "AddContainersToDictionary");

	Params::MPMainContainerBox_C_AddContainersToDictionary Parms{};

	Parms.Containers = std::move(Containers);

	UObject::ProcessEvent(Func, &Parms);

	Containers = std::move(Parms.Containers);
}


// Function MPMainContainerBox.MPMainContainerBox_C.AddContainerToContainer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FContainerPickupsInfo            Container                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// TArray<struct FContainerPickupsInfo>    ContainerData                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FContainerPickupsInfo>    Param_ContainerItems                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlot                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotSync                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::AddContainerToContainer(const struct FContainerPickupsInfo& Container, TArray<struct FContainerPickupsInfo>& ContainerData, TArray<struct FContainerPickupsInfo>& Param_ContainerItems, int32 ToContainerUID, int32 ToSlot, bool Rotated_, bool NotSync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "AddContainerToContainer");

	Params::MPMainContainerBox_C_AddContainerToContainer Parms{};

	Parms.Container = std::move(Container);
	Parms.ContainerData = std::move(ContainerData);
	Parms.Param_ContainerItems = std::move(Param_ContainerItems);
	Parms.ToContainerUID = ToContainerUID;
	Parms.ToSlot = ToSlot;
	Parms.Rotated_ = Rotated_;
	Parms.NotSync = NotSync;

	UObject::ProcessEvent(Func, &Parms);

	ContainerData = std::move(Parms.ContainerData);
	Param_ContainerItems = std::move(Parms.Param_ContainerItems);
}


// Function MPMainContainerBox.MPMainContainerBox_C.AddItemToContainer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            ItemPInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallMCEvent_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Added                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::AddItemToContainer(int32 ToContainerUID, int32 ToSlotIndex, const struct FContainerPickupsInfo& ItemPInfo, bool Rotated_, bool CallMCEvent_, bool* Added)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "AddItemToContainer");

	Params::MPMainContainerBox_C_AddItemToContainer Parms{};

	Parms.ToContainerUID = ToContainerUID;
	Parms.ToSlotIndex = ToSlotIndex;
	Parms.ItemPInfo = std::move(ItemPInfo);
	Parms.Rotated_ = Rotated_;
	Parms.CallMCEvent_ = CallMCEvent_;

	UObject::ProcessEvent(Func, &Parms);

	if (Added != nullptr)
		*Added = Parms.Added;
}


// Function MPMainContainerBox.MPMainContainerBox_C.AddItemToContainer_NoData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NOfColumns                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NOfRows                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        SlotVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Added                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AddedTo                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           HostingSlots                                           (Parm, OutParm)

void AMPMainContainerBox_C::AddItemToContainer_NoData(int32 ContainerUID, int32 NOfColumns, int32 NOfRows, const struct FVector2D& SlotVector, bool* Added, int32* AddedTo, TArray<int32>* HostingSlots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "AddItemToContainer_NoData");

	Params::MPMainContainerBox_C_AddItemToContainer_NoData Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.NOfColumns = NOfColumns;
	Parms.NOfRows = NOfRows;
	Parms.SlotVector = std::move(SlotVector);

	UObject::ProcessEvent(Func, &Parms);

	if (Added != nullptr)
		*Added = Parms.Added;

	if (AddedTo != nullptr)
		*AddedTo = Parms.AddedTo;

	if (HostingSlots != nullptr)
		*HostingSlots = std::move(Parms.HostingSlots);
}


// Function MPMainContainerBox.MPMainContainerBox_C.AddItemToDropBox (Multicast)
// (Net, NetReliable, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDefaultItemInfo                 Item                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void AMPMainContainerBox_C::AddItemToDropBox__Multicast_(class AActor* Actor, const struct FDefaultItemInfo& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "AddItemToDropBox (Multicast)");

	Params::MPMainContainerBox_C_AddItemToDropBox__Multicast_ Parms{};

	Parms.Actor = Actor;
	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.AddItemToFreeSlot (OnlyServer)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDefaultItemInfo                 Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// bool                                    AutoUpdate                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            Container                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void AMPMainContainerBox_C::AddItemToFreeSlot__OnlyServer_(int32 ContainerUID, const struct FDefaultItemInfo& Item, bool AutoUpdate, bool* Result, struct FContainerPickupsInfo* Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "AddItemToFreeSlot (OnlyServer)");

	Params::MPMainContainerBox_C_AddItemToFreeSlot__OnlyServer_ Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.Item = std::move(Item);
	Parms.AutoUpdate = AutoUpdate;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Container != nullptr)
		*Container = std::move(Parms.Container);
}


// Function MPMainContainerBox.MPMainContainerBox_C.BlindAddNewItemToContainer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        SlotVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Added                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   UniqueId                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::BlindAddNewItemToContainer(const struct FVector2D& SlotVector, int32 ItemUID, int32 ToContainerUID, bool Shop, bool* Added, int32* ToSlotIndex, int32* UniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "BlindAddNewItemToContainer");

	Params::MPMainContainerBox_C_BlindAddNewItemToContainer Parms{};

	Parms.SlotVector = std::move(SlotVector);
	Parms.ItemUID = ItemUID;
	Parms.ToContainerUID = ToContainerUID;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);

	if (Added != nullptr)
		*Added = Parms.Added;

	if (ToSlotIndex != nullptr)
		*ToSlotIndex = Parms.ToSlotIndex;

	if (UniqueId != nullptr)
		*UniqueId = Parms.UniqueId;
}


// Function MPMainContainerBox.MPMainContainerBox_C.BuildContainerDataToWidget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FContainerPickupsInfo>    ItemData_Containers                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FContainerPickupsInfo>    ItemData_Items                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// class UJSIContainer_C*                  MainContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UJSIContainer_C*>          CreatedContainerList                                   (Parm, OutParm, ContainsInstancedReference)

void AMPMainContainerBox_C::BuildContainerDataToWidget(TArray<struct FContainerPickupsInfo>& ItemData_Containers, TArray<struct FContainerPickupsInfo>& ItemData_Items, class UJSIContainer_C* MainContainer, TArray<class UJSIContainer_C*>* CreatedContainerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "BuildContainerDataToWidget");

	Params::MPMainContainerBox_C_BuildContainerDataToWidget Parms{};

	Parms.ItemData_Containers = std::move(ItemData_Containers);
	Parms.ItemData_Items = std::move(ItemData_Items);
	Parms.MainContainer = MainContainer;

	UObject::ProcessEvent(Func, &Parms);

	ItemData_Containers = std::move(Parms.ItemData_Containers);
	ItemData_Items = std::move(Parms.ItemData_Items);

	if (CreatedContainerList != nullptr)
		*CreatedContainerList = std::move(Parms.CreatedContainerList);
}


// Function MPMainContainerBox.MPMainContainerBox_C.BuildContainerSlotData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumOfColumns                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumOfRows                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::BuildContainerSlotData(int32 NumOfColumns, int32 NumOfRows, int32 ContainerUID, bool Shop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "BuildContainerSlotData");

	Params::MPMainContainerBox_C_BuildContainerSlotData Parms{};

	Parms.NumOfColumns = NumOfColumns;
	Parms.NumOfRows = NumOfRows;
	Parms.ContainerUID = ContainerUID;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.BuildData (OnlyServer)
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LootChanceModifier            LootChanceMod                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReMinusBuild                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::BuildData__OnlyServer_(const struct FS_LootChanceModifier& LootChanceMod, bool ReMinusBuild)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "BuildData (OnlyServer)");

	Params::MPMainContainerBox_C_BuildData__OnlyServer_ Parms{};

	Parms.LootChanceMod = std::move(LootChanceMod);
	Parms.ReMinusBuild = ReMinusBuild;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.CallLootAnim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LootingHeight                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    LootPointOpened                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::CallLootAnim(double LootingHeight, bool LootPointOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "CallLootAnim");

	Params::MPMainContainerBox_C_CallLootAnim Parms{};

	Parms.LootingHeight = LootingHeight;
	Parms.LootPointOpened = LootPointOpened;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.CampBuildInstant
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::CampBuildInstant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "CampBuildInstant");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.CampPlaceBegin
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::CampPlaceBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "CampPlaceBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.CampPlaceEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::CampPlaceEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "CampPlaceEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.CheckTierAndLootTypes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       FItemInfo                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// class ATDB_GameMode_C*                  GameMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     ArrayTypes                                             (Parm, OutParm)

bool AMPMainContainerBox_C::CheckTierAndLootTypes(const struct FFItemInfo& FItemInfo, class ATDB_GameMode_C* GameMode, TArray<class FName>* ArrayTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "CheckTierAndLootTypes");

	Params::MPMainContainerBox_C_CheckTierAndLootTypes Parms{};

	Parms.FItemInfo = std::move(FItemInfo);
	Parms.GameMode = GameMode;

	UObject::ProcessEvent(Func, &Parms);

	if (ArrayTypes != nullptr)
		*ArrayTypes = std::move(Parms.ArrayTypes);

	return Parms.ReturnValue;
}


// Function MPMainContainerBox.MPMainContainerBox_C.CompleteQuest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   QuestIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ObjectiveIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::CompleteQuest(int32 QuestIndex, int32 ObjectiveIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "CompleteQuest");

	Params::MPMainContainerBox_C_CompleteQuest Parms{};

	Parms.QuestIndex = QuestIndex;
	Parms.ObjectiveIndex = ObjectiveIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.ContainerBoxClosed
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::ContainerBoxClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ContainerBoxClosed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.ContainerOpened
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::ContainerOpened()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ContainerOpened");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.Craft
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::Craft(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "Craft");

	Params::MPMainContainerBox_C_Craft Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.DestroyInteractable
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::DestroyInteractable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "DestroyInteractable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.DoesItemExist
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Uid                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Exists                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            PickupItem                                             (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ArrayIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::DoesItemExist(int32 Uid, bool IsContainer_, bool* Exists, struct FContainerPickupsInfo* PickupItem, int32* ArrayIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "DoesItemExist");

	Params::MPMainContainerBox_C_DoesItemExist Parms{};

	Parms.Uid = Uid;
	Parms.IsContainer_ = IsContainer_;

	UObject::ProcessEvent(Func, &Parms);

	if (Exists != nullptr)
		*Exists = Parms.Exists;

	if (PickupItem != nullptr)
		*PickupItem = std::move(Parms.PickupItem);

	if (ArrayIndex != nullptr)
		*ArrayIndex = Parms.ArrayIndex;
}


// Function MPMainContainerBox.MPMainContainerBox_C.EventOnContainerAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSIContainer_C*                  FromContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ToContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      DroppedSlotRef                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      SlotReceiverRef                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RightMouseButton                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::EventOnContainerAction(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef, int32 ToSlotIndex, bool Rotated_, bool RightMouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "EventOnContainerAction");

	Params::MPMainContainerBox_C_EventOnContainerAction Parms{};

	Parms.FromContainer = FromContainer;
	Parms.ToContainer = ToContainer;
	Parms.DroppedSlotRef = DroppedSlotRef;
	Parms.SlotReceiverRef = SlotReceiverRef;
	Parms.ToSlotIndex = ToSlotIndex;
	Parms.Rotated_ = Rotated_;
	Parms.RightMouseButton = RightMouseButton;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.ExecuteUbergraph_MPMainContainerBox
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::ExecuteUbergraph_MPMainContainerBox(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ExecuteUbergraph_MPMainContainerBox");

	Params::MPMainContainerBox_C_ExecuteUbergraph_MPMainContainerBox Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GenerateContainerItems
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_LootChanceModifier            LootChanceMod                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FDefaultItemInfo>         Items                                                  (Parm, OutParm, ContainsInstancedReference)

void AMPMainContainerBox_C::GenerateContainerItems(const struct FS_LootChanceModifier& LootChanceMod, TArray<struct FDefaultItemInfo>* Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GenerateContainerItems");

	Params::MPMainContainerBox_C_GenerateContainerItems Parms{};

	Parms.LootChanceMod = std::move(LootChanceMod);

	UObject::ProcessEvent(Func, &Parms);

	if (Items != nullptr)
		*Items = std::move(Parms.Items);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GenerateRandomItemsOnType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELootTypes                              Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESlotRarity                             LootTier                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Chance                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Canstack                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCountStack                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ATDB_GameMode_C*                  AsTDB_Game_Mode                                        (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void AMPMainContainerBox_C::GenerateRandomItemsOnType(ELootTypes Type, ESlotRarity LootTier, int32 Chance, class FName* ID, bool* Canstack, int32* MaxCountStack, class ATDB_GameMode_C** AsTDB_Game_Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GenerateRandomItemsOnType");

	Params::MPMainContainerBox_C_GenerateRandomItemsOnType Parms{};

	Parms.Type = Type;
	Parms.LootTier = LootTier;
	Parms.Chance = Chance;

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;

	if (Canstack != nullptr)
		*Canstack = Parms.Canstack;

	if (MaxCountStack != nullptr)
		*MaxCountStack = Parms.MaxCountStack;

	if (AsTDB_Game_Mode != nullptr)
		*AsTDB_Game_Mode = Parms.AsTDB_Game_Mode;
}


// Function MPMainContainerBox.MPMainContainerBox_C.Get Rand Unique Item
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestData_C*                     QuestData                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ASurvivalPlayer_C*                Surv                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           ItemName                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::Get_Rand_Unique_Item(const class UQuestData_C* QuestData, class ASurvivalPlayer_C* Surv, class FString* ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "Get Rand Unique Item");

	Params::MPMainContainerBox_C_Get_Rand_Unique_Item Parms{};

	Parms.QuestData = QuestData;
	Parms.Surv = Surv;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemName != nullptr)
		*ItemName = std::move(Parms.ItemName);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetActorType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ActorType                             ActorType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetActorType(E_ActorType* ActorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetActorType");

	Params::MPMainContainerBox_C_GetActorType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActorType != nullptr)
		*ActorType = Parms.ActorType;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetColumnRowBySlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumOfColumns                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumOfRows                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Column                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Row                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetColumnRowBySlotIndex(int32 SlotIndex, int32 NumOfColumns, int32 NumOfRows, int32* Column, int32* Row)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetColumnRowBySlotIndex");

	Params::MPMainContainerBox_C_GetColumnRowBySlotIndex Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.NumOfColumns = NumOfColumns;
	Parms.NumOfRows = NumOfRows;

	UObject::ProcessEvent(Func, &Parms);

	if (Column != nullptr)
		*Column = Parms.Column;

	if (Row != nullptr)
		*Row = Parms.Row;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetCompiledContainerStructure
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// struct FDefaultItemInfo                 DefItem                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ContainerMotherID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AutoUpdateChild                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            Container                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetCompiledContainerStructure(const struct FFItemInfo& Item, const struct FDefaultItemInfo& DefItem, int32 ContainerMotherID, int32 SlotIndex, bool AutoUpdateChild, bool* Result, struct FContainerPickupsInfo* Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetCompiledContainerStructure");

	Params::MPMainContainerBox_C_GetCompiledContainerStructure Parms{};

	Parms.Item = std::move(Item);
	Parms.DefItem = std::move(DefItem);
	Parms.ContainerMotherID = ContainerMotherID;
	Parms.SlotIndex = SlotIndex;
	Parms.AutoUpdateChild = AutoUpdateChild;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Container != nullptr)
		*Container = std::move(Parms.Container);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetFreePickup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Param_bFreePickup                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetFreePickup(bool* Param_bFreePickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetFreePickup");

	Params::MPMainContainerBox_C_GetFreePickup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_bFreePickup != nullptr)
		*Param_bFreePickup = Parms.Param_bFreePickup;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetHostingSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NOfColumns                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NOfRows                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ItemVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           Indexes                                                (Parm, OutParm)

void AMPMainContainerBox_C::GetHostingSlots(int32 InIndex, int32 NOfColumns, int32 NOfRows, const struct FVector2D& ItemVector, TArray<int32>* Indexes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetHostingSlots");

	Params::MPMainContainerBox_C_GetHostingSlots Parms{};

	Parms.InIndex = InIndex;
	Parms.NOfColumns = NOfColumns;
	Parms.NOfRows = NOfRows;
	Parms.ItemVector = std::move(ItemVector);

	UObject::ProcessEvent(Func, &Parms);

	if (Indexes != nullptr)
		*Indexes = std::move(Parms.Indexes);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetMainContainer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UMPContainerWidget_C*             Param_ContainerWidget                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetMainContainer(class UMPContainerWidget_C** Param_ContainerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetMainContainer");

	Params::MPMainContainerBox_C_GetMainContainer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_ContainerWidget != nullptr)
		*Param_ContainerWidget = Parms.Param_ContainerWidget;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetPointedItemSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UJSI_Slot_C*                      Param_PointedItemSlot                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetPointedItemSlot(class UJSI_Slot_C** Param_PointedItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetPointedItemSlot");

	Params::MPMainContainerBox_C_GetPointedItemSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_PointedItemSlot != nullptr)
		*Param_PointedItemSlot = Parms.Param_PointedItemSlot;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetRandCurrentQuestsData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvPC_C*                        Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UQuestData_C*                     AsQuest_Data                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Chance                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetRandCurrentQuestsData(class ASurvPC_C* Controller, class UQuestData_C** AsQuest_Data, double* Chance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetRandCurrentQuestsData");

	Params::MPMainContainerBox_C_GetRandCurrentQuestsData Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);

	if (AsQuest_Data != nullptr)
		*AsQuest_Data = Parms.AsQuest_Data;

	if (Chance != nullptr)
		*Chance = Parms.Chance;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetReplicatedData (OnlyServer)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_LootChanceModifier            LootChanceMod                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMpContentRep                    Data                                                   (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetReplicatedData__OnlyServer_(class APawn* Player, const struct FS_LootChanceModifier& LootChanceMod, struct FMpContentRep* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetReplicatedData (OnlyServer)");

	Params::MPMainContainerBox_C_GetReplicatedData__OnlyServer_ Parms{};

	Parms.Player = Player;
	Parms.LootChanceMod = std::move(LootChanceMod);

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function MPMainContainerBox.MPMainContainerBox_C.getRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ItemRotated_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DroppedRotation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetRotation(bool ItemRotated_, bool DroppedRotation, bool* Rotated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "getRotation");

	Params::MPMainContainerBox_C_GetRotation Parms{};

	Parms.ItemRotated_ = ItemRotated_;
	Parms.DroppedRotation = DroppedRotation;

	UObject::ProcessEvent(Func, &Parms);

	if (Rotated != nullptr)
		*Rotated = Parms.Rotated;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetSlotDataArrIndexByUID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Uid                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetSlotDataArrIndexByUID(int32 Uid, bool Shop, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetSlotDataArrIndexByUID");

	Params::MPMainContainerBox_C_GetSlotDataArrIndexByUID Parms{};

	Parms.Uid = Uid;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetSlotIndexByRowColumn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Column                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Row                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumOfColumns                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 AMPMainContainerBox_C::GetSlotIndexByRowColumn(int32 Column, int32 Row, int32 NumOfColumns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetSlotIndexByRowColumn");

	Params::MPMainContainerBox_C_GetSlotIndexByRowColumn Parms{};

	Parms.Column = Column;
	Parms.Row = Row;
	Parms.NumOfColumns = NumOfColumns;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetUniqueServerID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   NewUID                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetUniqueServerID(int32* NewUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetUniqueServerID");

	Params::MPMainContainerBox_C_GetUniqueServerID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewUID != nullptr)
		*NewUID = Parms.NewUID;
}


// Function MPMainContainerBox.MPMainContainerBox_C.GetVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Rotated                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        NewVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GetVector(bool Rotated, const struct FVector2D& Vector, struct FVector2D* NewVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GetVector");

	Params::MPMainContainerBox_C_GetVector Parms{};

	Parms.Rotated = Rotated;
	Parms.Vector = std::move(Vector);

	UObject::ProcessEvent(Func, &Parms);

	if (NewVector != nullptr)
		*NewVector = std::move(Parms.NewVector);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GI_TileLoaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TileName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GI_TileLoaded(class FName TileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GI_TileLoaded");

	Params::MPMainContainerBox_C_GI_TileLoaded Parms{};

	Parms.TileName = TileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.GI_TileUnloaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TileName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::GI_TileUnloaded(class FName TileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "GI_TileUnloaded");

	Params::MPMainContainerBox_C_GI_TileUnloaded Parms{};

	Parms.TileName = TileName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.HandleContainersEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSIContainer_C*                  Container                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    SetID_                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::HandleContainersEvents(class UJSIContainer_C* Container, bool SetID_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "HandleContainersEvents");

	Params::MPMainContainerBox_C_HandleContainersEvents Parms{};

	Parms.Container = Container;
	Parms.SetID_ = SetID_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.HeatUpBonfire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::HeatUpBonfire(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "HeatUpBonfire");

	Params::MPMainContainerBox_C_HeatUpBonfire Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.InitContainerWidget (Main)
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::InitContainerWidget__Main_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "InitContainerWidget (Main)");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.InMPCMoveItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::InMPCMoveItem(int32 ItemUID, int32 ToContainerUID, int32 ToIndex, bool Rotated_, bool IsContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "InMPCMoveItem");

	Params::MPMainContainerBox_C_InMPCMoveItem Parms{};

	Parms.ItemUID = ItemUID;
	Parms.ToContainerUID = ToContainerUID;
	Parms.ToIndex = ToIndex;
	Parms.Rotated_ = Rotated_;
	Parms.IsContainer = IsContainer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.Interact
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::Interact(bool NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "Interact");

	Params::MPMainContainerBox_C_Interact Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.InteractController
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::InteractController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "InteractController");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.IsInWater
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InWater                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::IsInWater(bool* InWater)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "IsInWater");

	Params::MPMainContainerBox_C_IsInWater Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InWater != nullptr)
		*InWater = Parms.InWater;
}


// Function MPMainContainerBox.MPMainContainerBox_C.IsLocked?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::IsLocked_(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "IsLocked?");

	Params::MPMainContainerBox_C_IsLocked_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function MPMainContainerBox.MPMainContainerBox_C.IsLootPoint
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ALootPoint_C*                     Loot                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::IsLootPoint(bool* Result, class ALootPoint_C** Loot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "IsLootPoint");

	Params::MPMainContainerBox_C_IsLootPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Loot != nullptr)
		*Loot = Parms.Loot;
}


// Function MPMainContainerBox.MPMainContainerBox_C.IsPlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsPlayer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::IsPlayer(bool* Param_IsPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "IsPlayer");

	Params::MPMainContainerBox_C_IsPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsPlayer != nullptr)
		*Param_IsPlayer = Parms.Param_IsPlayer;
}


// Function MPMainContainerBox.MPMainContainerBox_C.MC_AddNewContainer
// (Net, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            PickupItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ToSlot                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FContainerPickupsInfo>    ContainerData                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// TArray<struct FContainerPickupsInfo>    Param_ContainerItems                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    BlockAddContainer                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MC_AddNewContainer(int32 ToContainerUID, const struct FContainerPickupsInfo& PickupItem, int32 ToSlot, bool Rotated_, const TArray<struct FContainerPickupsInfo>& ContainerData, const TArray<struct FContainerPickupsInfo>& Param_ContainerItems, bool BlockAddContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MC_AddNewContainer");

	Params::MPMainContainerBox_C_MC_AddNewContainer Parms{};

	Parms.ToContainerUID = ToContainerUID;
	Parms.PickupItem = std::move(PickupItem);
	Parms.ToSlot = ToSlot;
	Parms.Rotated_ = Rotated_;
	Parms.ContainerData = std::move(ContainerData);
	Parms.Param_ContainerItems = std::move(Param_ContainerItems);
	Parms.BlockAddContainer = BlockAddContainer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MC_AddNewItemToContainer
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            PickupItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ToSlot                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MC_AddNewItemToContainer(int32 ToContainerUID, const struct FContainerPickupsInfo& PickupItem, int32 ToSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MC_AddNewItemToContainer");

	Params::MPMainContainerBox_C_MC_AddNewItemToContainer Parms{};

	Parms.ToContainerUID = ToContainerUID;
	Parms.PickupItem = std::move(PickupItem);
	Parms.ToSlot = ToSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MC_InMPCMoveItem
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FromContainerUID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MC_InMPCMoveItem(int32 ItemUID, int32 FromContainerUID, int32 ToContainerUID, int32 ToIndex, bool Rotated_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MC_InMPCMoveItem");

	Params::MPMainContainerBox_C_MC_InMPCMoveItem Parms{};

	Parms.ItemUID = ItemUID;
	Parms.FromContainerUID = FromContainerUID;
	Parms.ToContainerUID = ToContainerUID;
	Parms.ToIndex = ToIndex;
	Parms.Rotated_ = Rotated_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MC_MPContainerMoveItem
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSlotIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MC_MPContainerMoveItem(int32 ContainerID, int32 ItemSlotIndex, int32 ToSlotIndex, bool Rotated_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MC_MPContainerMoveItem");

	Params::MPMainContainerBox_C_MC_MPContainerMoveItem Parms{};

	Parms.ContainerID = ContainerID;
	Parms.ItemSlotIndex = ItemSlotIndex;
	Parms.ToSlotIndex = ToSlotIndex;
	Parms.Rotated_ = Rotated_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MC_RemoveItem
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MC_RemoveItem(int32 ContainerUID, int32 ItemUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MC_RemoveItem");

	Params::MPMainContainerBox_C_MC_RemoveItem Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.ItemUID = ItemUID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MC_UpdateItemCount
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MC_UpdateItemCount(int32 ContainerUID, int32 ItemUID, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MC_UpdateItemCount");

	Params::MPMainContainerBox_C_MC_UpdateItemCount Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.ItemUID = ItemUID;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MovedToChar__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MovedToChar__DelegateSignature(class FName NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MovedToChar__DelegateSignature");

	Params::MPMainContainerBox_C_MovedToChar__DelegateSignature Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MoveItemToSlotInContainer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NOfColumns                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumOfRows                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ItemVector                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemSlotIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Moved                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlot                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemId                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ContainerUID                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MoveItemToSlotInContainer(int32 NOfColumns, int32 NumOfRows, int32 ToSlotIndex, int32 ItemUID, const struct FVector2D& ItemVector, int32 ItemSlotIndex, int32 ToContainerUID, bool IsContainer, bool Rotated_, bool* Moved, int32* ToSlot, int32* ItemId, int32* ContainerUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MoveItemToSlotInContainer");

	Params::MPMainContainerBox_C_MoveItemToSlotInContainer Parms{};

	Parms.NOfColumns = NOfColumns;
	Parms.NumOfRows = NumOfRows;
	Parms.ToSlotIndex = ToSlotIndex;
	Parms.ItemUID = ItemUID;
	Parms.ItemVector = std::move(ItemVector);
	Parms.ItemSlotIndex = ItemSlotIndex;
	Parms.ToContainerUID = ToContainerUID;
	Parms.IsContainer = IsContainer;
	Parms.Rotated_ = Rotated_;

	UObject::ProcessEvent(Func, &Parms);

	if (Moved != nullptr)
		*Moved = Parms.Moved;

	if (ToSlot != nullptr)
		*ToSlot = Parms.ToSlot;

	if (ItemId != nullptr)
		*ItemId = Parms.ItemId;

	if (ContainerUID != nullptr)
		*ContainerUID = Parms.ContainerUID;
}


// Function MPMainContainerBox.MPMainContainerBox_C.MPCFindItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ContainerUID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FContainerPickupsInfo            ItemInfo                                               (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Param_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MPCFindItem(int32 ContainerUID, int32 ItemUID, bool IsContainer_, bool Shop, bool* Found, struct FContainerPickupsInfo* ItemInfo, int32* Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MPCFindItem");

	Params::MPMainContainerBox_C_MPCFindItem Parms{};

	Parms.ContainerUID = ContainerUID;
	Parms.ItemUID = ItemUID;
	Parms.IsContainer_ = IsContainer_;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (ItemInfo != nullptr)
		*ItemInfo = std::move(Parms.ItemInfo);

	if (Param_Index != nullptr)
		*Param_Index = Parms.Param_Index;
}


// Function MPMainContainerBox.MPMainContainerBox_C.MPContToFull
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMpContentRep                    Content                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// TArray<struct FContainerPickupsInfo>    Containers                                             (Parm, OutParm, ContainsInstancedReference)
// TArray<struct FContainerPickupsInfo>    Param_ContainerItems                                   (Parm, OutParm, ContainsInstancedReference)

void AMPMainContainerBox_C::MPContToFull(const struct FMpContentRep& Content, TArray<struct FContainerPickupsInfo>* Containers, TArray<struct FContainerPickupsInfo>* Param_ContainerItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MPContToFull");

	Params::MPMainContainerBox_C_MPContToFull Parms{};

	Parms.Content = std::move(Content);

	UObject::ProcessEvent(Func, &Parms);

	if (Containers != nullptr)
		*Containers = std::move(Parms.Containers);

	if (Param_ContainerItems != nullptr)
		*Param_ContainerItems = std::move(Parms.Param_ContainerItems);
}


// Function MPMainContainerBox.MPMainContainerBox_C.MPCRemoveItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Uid                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Removed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::MPCRemoveItem(int32 Uid, bool IsContainer_, bool Shop, bool* Removed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MPCRemoveItem");

	Params::MPMainContainerBox_C_MPCRemoveItem Parms{};

	Parms.Uid = Uid;
	Parms.IsContainer_ = IsContainer_;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);

	if (Removed != nullptr)
		*Removed = Parms.Removed;
}


// Function MPMainContainerBox.MPMainContainerBox_C.MPCUpdateItemInfo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FContainerPickupsInfo            Item                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void AMPMainContainerBox_C::MPCUpdateItemInfo(const struct FContainerPickupsInfo& Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "MPCUpdateItemInfo");

	Params::MPMainContainerBox_C_MPCUpdateItemInfo Parms{};

	Parms.Item = std::move(Item);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnBeginInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnBeginInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnBeginInteract");

	Params::MPMainContainerBox_C_OnBeginInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnContainerAction__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSIContainer_C*                  FromContainer                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSIContainer_C*                  ToContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      DroppedSlotRef                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UJSI_Slot_C*                      SlotReceiverRef                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DroppedRotated_                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnContainerAction__DelegateSignature(class UJSIContainer_C* FromContainer, class UJSIContainer_C* ToContainer, class UJSI_Slot_C* DroppedSlotRef, class UJSI_Slot_C* SlotReceiverRef, int32 ToSlotIndex, bool DroppedRotated_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnContainerAction__DelegateSignature");

	Params::MPMainContainerBox_C_OnContainerAction__DelegateSignature Parms{};

	Parms.FromContainer = FromContainer;
	Parms.ToContainer = ToContainer;
	Parms.DroppedSlotRef = DroppedSlotRef;
	Parms.SlotReceiverRef = SlotReceiverRef;
	Parms.ToSlotIndex = ToSlotIndex;
	Parms.DroppedRotated_ = DroppedRotated_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnFocused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           HighlightActor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  HighlightActorComponent                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// E_InteractType                          InteractType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  LateTime                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnFocused");

	Params::MPMainContainerBox_C_OnFocused Parms{};

	Parms.Player = Player;
	Parms.HighlightActor = HighlightActor;
	Parms.HighlightActorComponent = HighlightActorComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractType != nullptr)
		*InteractType = Parms.InteractType;

	if (LateTime != nullptr)
		*LateTime = Parms.LateTime;
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnInteract");

	Params::MPMainContainerBox_C_OnInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnInteract2
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnInteract2(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnInteract2");

	Params::MPMainContainerBox_C_OnInteract2 Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnInteract3
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnInteract3(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnInteract3");

	Params::MPMainContainerBox_C_OnInteract3 Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnInteractVehicle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   SitIndex                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SkipAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnInteractVehicle");

	Params::MPMainContainerBox_C_OnInteractVehicle Parms{};

	Parms.Player = Player;
	Parms.SitIndex = SitIndex;
	Parms.SkipAnimation = SkipAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnLocalInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnLocalInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnLocalInteract");

	Params::MPMainContainerBox_C_OnLocalInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnLostFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnLostFocus(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnLostFocus");

	Params::MPMainContainerBox_C_OnLostFocus Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnRep_MPContainerItems
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::OnRep_MPContainerItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnRep_MPContainerItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnRep_NeedGenerate
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::OnRep_NeedGenerate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnRep_NeedGenerate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnSeen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnSeen(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnSeen");

	Params::MPMainContainerBox_C_OnSeen Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnSquadCheckComplete
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::OnSquadCheckComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnSquadCheckComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OnStopInteract
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OnStopInteract(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OnStopInteract");

	Params::MPMainContainerBox_C_OnStopInteract Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OpenDoorRPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Door_C*                       Door                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsOpen                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OpenDoorRPC(class ABP_Door_C* Door, bool IsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OpenDoorRPC");

	Params::MPMainContainerBox_C_OpenDoorRPC Parms{};

	Parms.Door = Door;
	Parms.IsOpen = IsOpen;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.OpenLootRPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALootPoint_C*                     LootPoint                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::OpenLootRPC(class ALootPoint_C* LootPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "OpenLootRPC");

	Params::MPMainContainerBox_C_OpenLootRPC Parms{};

	Parms.LootPoint = LootPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.PlayerAddItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFItemInfo                       ItemInfo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class UWBP_AttachmentCell_C*            ActiveCell                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    Added                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::PlayerAddItem(const struct FFItemInfo& ItemInfo, class UWBP_AttachmentCell_C* ActiveCell, bool* Added)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "PlayerAddItem");

	Params::MPMainContainerBox_C_PlayerAddItem Parms{};

	Parms.ItemInfo = std::move(ItemInfo);
	Parms.ActiveCell = ActiveCell;

	UObject::ProcessEvent(Func, &Parms);

	if (Added != nullptr)
		*Added = Parms.Added;
}


// Function MPMainContainerBox.MPMainContainerBox_C.PlayerCanisterAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Attach                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_Canister_C*                   Canister                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::PlayerCanisterAction(bool Attach, class ABP_Canister_C* Canister)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "PlayerCanisterAction");

	Params::MPMainContainerBox_C_PlayerCanisterAction Parms{};

	Parms.Attach = Attach;
	Parms.Canister = Canister;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.PlayerGetItemCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::PlayerGetItemCount(class UObject* Target, const class FString& ItemName, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "PlayerGetItemCount");

	Params::MPMainContainerBox_C_PlayerGetItemCount Parms{};

	Parms.Target = Target;
	Parms.ItemName = std::move(ItemName);

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function MPMainContainerBox.MPMainContainerBox_C.PlayerGetMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::PlayerGetMesh(class USkeletalMeshComponent** Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "PlayerGetMesh");

	Params::MPMainContainerBox_C_PlayerGetMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = Parms.Mesh;
}


// Function MPMainContainerBox.MPMainContainerBox_C.PlayerHasWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::PlayerHasWeapon(class UObject* Target, bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "PlayerHasWeapon");

	Params::MPMainContainerBox_C_PlayerHasWeapon Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function MPMainContainerBox.MPMainContainerBox_C.PlayerItemCountByName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::PlayerItemCountByName(const class FString& ItemName, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "PlayerItemCountByName");

	Params::MPMainContainerBox_C_PlayerItemCountByName Parms{};

	Parms.ItemName = std::move(ItemName);

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function MPMainContainerBox.MPMainContainerBox_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AMPMainContainerBox_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.RemoveContainerCustom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::RemoveContainerCustom(int32 ItemUID, bool IsContainer_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "RemoveContainerCustom");

	Params::MPMainContainerBox_C_RemoveContainerCustom Parms{};

	Parms.ItemUID = ItemUID;
	Parms.IsContainer_ = IsContainer_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.RequestMoveItem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ToSlotIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemUID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ToContainerUID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Rotated_                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsContainer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CallMCEvent_                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Moved                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::RequestMoveItem(int32 ToSlotIndex, int32 ItemUID, int32 ToContainerUID, bool Rotated_, bool IsContainer, bool CallMCEvent_, bool Shop, bool* Moved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "RequestMoveItem");

	Params::MPMainContainerBox_C_RequestMoveItem Parms{};

	Parms.ToSlotIndex = ToSlotIndex;
	Parms.ItemUID = ItemUID;
	Parms.ToContainerUID = ToContainerUID;
	Parms.Rotated_ = Rotated_;
	Parms.IsContainer = IsContainer;
	Parms.CallMCEvent_ = CallMCEvent_;
	Parms.Shop = Shop;

	UObject::ProcessEvent(Func, &Parms);

	if (Moved != nullptr)
		*Moved = Parms.Moved;
}


// Function MPMainContainerBox.MPMainContainerBox_C.ResetGenerateItemsSpawnEvent
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::ResetGenerateItemsSpawnEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ResetGenerateItemsSpawnEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.Run Lockpicking
// (Public, BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::Run_Lockpicking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "Run Lockpicking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.RunOpenLogicAfterLockpicking
// (BlueprintCallable, BlueprintEvent)

void AMPMainContainerBox_C::RunOpenLogicAfterLockpicking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "RunOpenLogicAfterLockpicking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MPMainContainerBox.MPMainContainerBox_C.Set3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::Set3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "Set3DWidgetVisibility");

	Params::MPMainContainerBox_C_Set3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.SetContainerPermissions
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSIContainer_C*                  Container                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::SetContainerPermissions(class UJSIContainer_C* Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "SetContainerPermissions");

	Params::MPMainContainerBox_C_SetContainerPermissions Parms{};

	Parms.Container = Container;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.SetEnableSmoothSync
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::SetEnableSmoothSync(bool NewEnable, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "SetEnableSmoothSync");

	Params::MPMainContainerBox_C_SetEnableSmoothSync Parms{};

	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function MPMainContainerBox.MPMainContainerBox_C.SetFreePickup
// (Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bFreePickup                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::SetFreePickup(bool Param_bFreePickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "SetFreePickup");

	Params::MPMainContainerBox_C_SetFreePickup Parms{};

	Parms.Param_bFreePickup = Param_bFreePickup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.SetPlayerCollisionInCar
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::SetPlayerCollisionInCar(bool NewEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "SetPlayerCollisionInCar");

	Params::MPMainContainerBox_C_SetPlayerCollisionInCar Parms{};

	Parms.NewEnable = NewEnable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.SetTutorial3DWidgetVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::SetTutorial3DWidgetVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "SetTutorial3DWidgetVisibility");

	Params::MPMainContainerBox_C_SetTutorial3DWidgetVisibility Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.ShowSimpleUIText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::ShowSimpleUIText(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "ShowSimpleUIText");

	Params::MPMainContainerBox_C_ShowSimpleUIText Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.StopLockpicking(binding)
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::StopLockpicking_binding_(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "StopLockpicking(binding)");

	Params::MPMainContainerBox_C_StopLockpicking_binding_ Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.TransferMPCDataToChar
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FContainerPickupsInfo            ContainerInfo                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   ContainerIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Shop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ItemsLeft                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FContainerPickupsInfo>    ContainerDataResult                                    (Parm, OutParm, ContainsInstancedReference)
// TArray<struct FContainerPickupsInfo>    ContainerItemsResult                                   (Parm, OutParm, ContainsInstancedReference)

void AMPMainContainerBox_C::TransferMPCDataToChar(const struct FContainerPickupsInfo& ContainerInfo, int32 ContainerIndex, bool Shop, int32 ItemsLeft, bool* Success, TArray<struct FContainerPickupsInfo>* ContainerDataResult, TArray<struct FContainerPickupsInfo>* ContainerItemsResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "TransferMPCDataToChar");

	Params::MPMainContainerBox_C_TransferMPCDataToChar Parms{};

	Parms.ContainerInfo = std::move(ContainerInfo);
	Parms.ContainerIndex = ContainerIndex;
	Parms.Shop = Shop;
	Parms.ItemsLeft = ItemsLeft;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ContainerDataResult != nullptr)
		*ContainerDataResult = std::move(Parms.ContainerDataResult);

	if (ContainerItemsResult != nullptr)
		*ContainerItemsResult = std::move(Parms.ContainerItemsResult);
}


// Function MPMainContainerBox.MPMainContainerBox_C.UnhandleAllEvents
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UJSIContainer_C*                  Container                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::UnhandleAllEvents(class UJSIContainer_C* Container)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "UnhandleAllEvents");

	Params::MPMainContainerBox_C_UnhandleAllEvents Parms{};

	Parms.Container = Container;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MPMainContainerBox.MPMainContainerBox_C.UpdateContainerData (OnlyServer)
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FContainerPickupsInfo>    InContainers                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    ReMinusInit                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AMPMainContainerBox_C::UpdateContainerData__OnlyServer_(TArray<struct FContainerPickupsInfo>& InContainers, bool ReMinusInit, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MPMainContainerBox_C", "UpdateContainerData (OnlyServer)");

	Params::MPMainContainerBox_C_UpdateContainerData__OnlyServer_ Parms{};

	Parms.InContainers = std::move(InContainers);
	Parms.ReMinusInit = ReMinusInit;

	UObject::ProcessEvent(Func, &Parms);

	InContainers = std::move(Parms.InContainers);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

