#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LootPoint

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "LootPointType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MPMainContainerBox_Child_classes.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LootPoint.LootPoint_C
// 0x02F8 (0x07B0 - 0x04B8)
#pragma pack(push, 0x1)
class alignas(0x10) ALootPoint_C : public AMPMainContainerBox_Child_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_LootPoint_C;                        // 0x04B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Widget;                                            // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshLootPoint;                                     // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HideMarkWD_NewTrack_0_BB653FF94DF1FAC323A554A545189BA8; // 0x04D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HideMarkWD__Direction_BB653FF94DF1FAC323A554A545189BA8; // 0x04DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4DD[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HideMarkWD;                                        // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_B6979EC94ECC203A76EE108E02F9E14A; // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_B6979EC94ECC203A76EE108E02F9E14A; // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4ED[0x3];                                      // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOpened;                                          // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DoorOpened;                                        // 0x04F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FA[0x6];                                      // 0x04FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             OpenSound;                                         // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ExtraCheck;                                        // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       ShineMaterials;                                    // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFMODEvent*                             InteractSound;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFMODAudioComponent*                    InteractSoundHandle;                               // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        InteractDuration;                                  // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Duper;                                             // 0x0538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           InteractSoundTimer;                                // 0x0540(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnInteracted;                                      // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnBoughtInitialItems;                              // 0x0558(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          AutoDestroy;                                       // 0x0568(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeToDestroy;                                     // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FTimerHandle                           DestroyTimerHandle;                                // 0x0578(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstOpenLootPoint;                                // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CachedPlayer;                                      // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomAngle;                                       // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedAddInHouseManager;                             // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_592[0x2];                                      // 0x0592(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FirstComponentOverTime;                            // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondComponentOverTime;                           // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ThirdComponentOverTime;                            // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FourthComponentOverTime;                           // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimationCloseFinish;                              // 0x05A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimDoorOpened;                                    // 0x05A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NeedCloseDoor;                                     // 0x05A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A7[0x1];                                      // 0x05A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        FirstMoveComponent;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SecondMoveComponent;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ThirdMoveComponent;                                // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FourthMoveComponent;                               // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 Image_61;                                          // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         StartPoint;                                        // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerInside;                                      // 0x05D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OpenDoors;                                         // 0x05D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D6[0x2];                                      // 0x05D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Out_Actors;                                        // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	ETimelineDirection                            TimelineDirection;                                 // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Focused;                                           // 0x05E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5EA[0x6];                                      // 0x05EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Interact_C*                          W_Interact;                                        // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceScale;                                     // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateBrush                            Brush;                                             // 0x0600(0x00D0)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         FifthComponentOverTime;                            // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        FifthMoveComponent;                                // 0x06D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceOpacity;                                   // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimationDistanceScale;                            // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractingAnimation;                              // 0x06EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrevLineTraceResult;                               // 0x06ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Fast;                                              // 0x06EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELootPointType                                LootType;                                          // 0x06EF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      As_Survival_Player;                                // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           OverlapTimer;                                      // 0x06F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SixthMoveComponent;                                // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SixthComponentOverTime;                            // 0x0708(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ZombieDoor;                                        // 0x070C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70D[0x3];                                      // 0x070D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_Test_C*                 As_Survival_Player_Test;                           // 0x0710(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnStopInteracting;                                 // 0x0718(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	uint8                                         Pad_728[0x8];                                      // 0x0728(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TMeshParent;                                       // 0x0730(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lockpicked_;                                       // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_791[0x7];                                      // 0x0791(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ResetByManager;                                    // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddMeshToShining(class UStaticMeshComponent* MeshComponent, int32 MaterialIndex, class UMaterialInstanceDynamic** DynamicMaterial);
	void CallCloseLootPoint();
	bool CheckInactiveInteraction();
	void Close_Doors_Animated();
	void Destroy();
	void DisableCanCloseDoor();
	void ExecuteUbergraph_LootPoint(int32 EntryPoint);
	void GetActorType(E_ActorType* ActorType);
	void Show_Interact(class UUIW_PlayerMain_C* GUI, double Delay, bool IsHold, const class FText& Action_Text, int32 Inactive);
	void HideMarkWD__FinishedFunc();
	void HideMarkWD__UpdateFunc();
	void IsLocked_(bool* Result);
	bool IsSomethingOnA_Way();
	void LootOpenedServer();
	void MoveFifthComponent(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, double OverTime);
	void MoveFirstComponent(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, double OverTime);
	void MoveFourthComponent(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, double OverTime);
	void MoveSecondComponent(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, double OverTime);
	void MoveSixthComponent(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, double OverTime);
	void MoveThirdComponent(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, double OverTime);
	void MultiCallCloseLootPoint();
	void MultiCallOpenLootPoint();
	void OnBeginInteract(class APawn* Player);
	void OnBoughtInitialItems__DelegateSignature();
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteracted__DelegateSignature(class AActor* InteractedActor);
	void OnKnockdownStart();
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnSeen(class APawn* Player);
	void OnStopInteract(class APawn* Player);
	void OnStopInteracting__DelegateSignature();
	void OpenDoorsAnimated();
	void OpenDoorsFunc(bool Open, bool Param_Fast);
	void OpenDoorsMulti(bool Open);
	void OverlapEnd(bool* Success);
	void OverlapStart(bool* Success);
	void PauseTimerServer();
	void PlayInteractSound();
	void PlayInteractSoundV2();
	void PlayOpenSound();
	double RandomAngleOpenDoors(double Min, double Max);
	void ReceiveBeginPlay();
	void RemoveBoxComponent();
	void ResetByManager__DelegateSignature();
	void ReturnFifthMoveComponent();
	void ReturnFirstMoveComponent();
	void ReturnFourthMoveComponent();
	void ReturnSecondMoveComponent(class UObject* InputObject);
	void ReturnSixthMoveComponent();
	void ReturnThirdMoveComponent();
	void RunOpenLogicAfterLockpicking();
	void SetDefaultTransformDoors();
	void SetDestroyTimerState(bool NewState);
	void SetEnableSmoothSync(bool NewEnable, bool* Success);
	void SetShining(bool NewShine);
	void SetStaticCompsTransform();
	void ShineMeshes();
	void Stop_Interact_Sound();
	void Stop_Move_Component();
	void StopClose();
	void StopMoveFifthComponent(class UObject* InputObject);
	void StopMoveFirstComponent(class UObject* InputObject);
	void StopMoveFourthComponent(class UObject* InputObject);
	void StopMoveSecondComponent(class UObject* InputObject);
	void StopMoveSixthComponent(class UObject* InputObject);
	void StopMoveThirdComponent(class UObject* InputObject);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void ToggleVisibility(const TArray<EObjectTypeQuery>& ObjectTypes);
	void UnpauseTimerServer();
	void UserConstructionScript();
	void WidgetVisibility(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LootPoint_C">();
	}
	static class ALootPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALootPoint_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ALootPoint_C) == 0x000010, "Wrong alignment on ALootPoint_C");
static_assert(sizeof(ALootPoint_C) == 0x0007B0, "Wrong size on ALootPoint_C");
static_assert(offsetof(ALootPoint_C, UberGraphFrame_LootPoint_C) == 0x0004B8, "Member 'ALootPoint_C::UberGraphFrame_LootPoint_C' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Widget) == 0x0004C0, "Member 'ALootPoint_C::Widget' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Sphere) == 0x0004C8, "Member 'ALootPoint_C::Sphere' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, MeshLootPoint) == 0x0004D0, "Member 'ALootPoint_C::MeshLootPoint' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, HideMarkWD_NewTrack_0_BB653FF94DF1FAC323A554A545189BA8) == 0x0004D8, "Member 'ALootPoint_C::HideMarkWD_NewTrack_0_BB653FF94DF1FAC323A554A545189BA8' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, HideMarkWD__Direction_BB653FF94DF1FAC323A554A545189BA8) == 0x0004DC, "Member 'ALootPoint_C::HideMarkWD__Direction_BB653FF94DF1FAC323A554A545189BA8' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, HideMarkWD) == 0x0004E0, "Member 'ALootPoint_C::HideMarkWD' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Timeline_0_NewTrack_0_B6979EC94ECC203A76EE108E02F9E14A) == 0x0004E8, "Member 'ALootPoint_C::Timeline_0_NewTrack_0_B6979EC94ECC203A76EE108E02F9E14A' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Timeline_0__Direction_B6979EC94ECC203A76EE108E02F9E14A) == 0x0004EC, "Member 'ALootPoint_C::Timeline_0__Direction_B6979EC94ECC203A76EE108E02F9E14A' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Timeline_0) == 0x0004F0, "Member 'ALootPoint_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, IsOpened) == 0x0004F8, "Member 'ALootPoint_C::IsOpened' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, DoorOpened) == 0x0004F9, "Member 'ALootPoint_C::DoorOpened' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, OpenSound) == 0x000500, "Member 'ALootPoint_C::OpenSound' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, ExtraCheck) == 0x000508, "Member 'ALootPoint_C::ExtraCheck' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, ShineMaterials) == 0x000510, "Member 'ALootPoint_C::ShineMaterials' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, InteractSound) == 0x000520, "Member 'ALootPoint_C::InteractSound' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, InteractSoundHandle) == 0x000528, "Member 'ALootPoint_C::InteractSoundHandle' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, InteractDuration) == 0x000530, "Member 'ALootPoint_C::InteractDuration' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Duper) == 0x000538, "Member 'ALootPoint_C::Duper' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, InteractSoundTimer) == 0x000540, "Member 'ALootPoint_C::InteractSoundTimer' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, OnInteracted) == 0x000548, "Member 'ALootPoint_C::OnInteracted' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, OnBoughtInitialItems) == 0x000558, "Member 'ALootPoint_C::OnBoughtInitialItems' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, AutoDestroy) == 0x000568, "Member 'ALootPoint_C::AutoDestroy' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, TimeToDestroy) == 0x000570, "Member 'ALootPoint_C::TimeToDestroy' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, DestroyTimerHandle) == 0x000578, "Member 'ALootPoint_C::DestroyTimerHandle' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FirstOpenLootPoint) == 0x000580, "Member 'ALootPoint_C::FirstOpenLootPoint' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, CachedPlayer) == 0x000588, "Member 'ALootPoint_C::CachedPlayer' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, RandomAngle) == 0x000590, "Member 'ALootPoint_C::RandomAngle' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, NeedAddInHouseManager) == 0x000591, "Member 'ALootPoint_C::NeedAddInHouseManager' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FirstComponentOverTime) == 0x000594, "Member 'ALootPoint_C::FirstComponentOverTime' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, SecondComponentOverTime) == 0x000598, "Member 'ALootPoint_C::SecondComponentOverTime' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, ThirdComponentOverTime) == 0x00059C, "Member 'ALootPoint_C::ThirdComponentOverTime' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FourthComponentOverTime) == 0x0005A0, "Member 'ALootPoint_C::FourthComponentOverTime' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, AnimationCloseFinish) == 0x0005A4, "Member 'ALootPoint_C::AnimationCloseFinish' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, AnimDoorOpened) == 0x0005A5, "Member 'ALootPoint_C::AnimDoorOpened' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, NeedCloseDoor) == 0x0005A6, "Member 'ALootPoint_C::NeedCloseDoor' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FirstMoveComponent) == 0x0005A8, "Member 'ALootPoint_C::FirstMoveComponent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, SecondMoveComponent) == 0x0005B0, "Member 'ALootPoint_C::SecondMoveComponent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, ThirdMoveComponent) == 0x0005B8, "Member 'ALootPoint_C::ThirdMoveComponent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FourthMoveComponent) == 0x0005C0, "Member 'ALootPoint_C::FourthMoveComponent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Image_61) == 0x0005C8, "Member 'ALootPoint_C::Image_61' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, StartPoint) == 0x0005D0, "Member 'ALootPoint_C::StartPoint' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, PlayerInside) == 0x0005D4, "Member 'ALootPoint_C::PlayerInside' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, OpenDoors) == 0x0005D5, "Member 'ALootPoint_C::OpenDoors' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Out_Actors) == 0x0005D8, "Member 'ALootPoint_C::Out_Actors' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, TimelineDirection) == 0x0005E8, "Member 'ALootPoint_C::TimelineDirection' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Focused) == 0x0005E9, "Member 'ALootPoint_C::Focused' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, W_Interact) == 0x0005F0, "Member 'ALootPoint_C::W_Interact' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, DistanceScale) == 0x0005F8, "Member 'ALootPoint_C::DistanceScale' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Brush) == 0x000600, "Member 'ALootPoint_C::Brush' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FifthComponentOverTime) == 0x0006D0, "Member 'ALootPoint_C::FifthComponentOverTime' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, FifthMoveComponent) == 0x0006D8, "Member 'ALootPoint_C::FifthMoveComponent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, DistanceOpacity) == 0x0006E0, "Member 'ALootPoint_C::DistanceOpacity' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, AnimationDistanceScale) == 0x0006E8, "Member 'ALootPoint_C::AnimationDistanceScale' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, InteractingAnimation) == 0x0006EC, "Member 'ALootPoint_C::InteractingAnimation' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, PrevLineTraceResult) == 0x0006ED, "Member 'ALootPoint_C::PrevLineTraceResult' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Fast) == 0x0006EE, "Member 'ALootPoint_C::Fast' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, LootType) == 0x0006EF, "Member 'ALootPoint_C::LootType' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, As_Survival_Player) == 0x0006F0, "Member 'ALootPoint_C::As_Survival_Player' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, OverlapTimer) == 0x0006F8, "Member 'ALootPoint_C::OverlapTimer' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, SixthMoveComponent) == 0x000700, "Member 'ALootPoint_C::SixthMoveComponent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, SixthComponentOverTime) == 0x000708, "Member 'ALootPoint_C::SixthComponentOverTime' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, ZombieDoor) == 0x00070C, "Member 'ALootPoint_C::ZombieDoor' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, As_Survival_Player_Test) == 0x000710, "Member 'ALootPoint_C::As_Survival_Player_Test' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, OnStopInteracting) == 0x000718, "Member 'ALootPoint_C::OnStopInteracting' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, TMeshParent) == 0x000730, "Member 'ALootPoint_C::TMeshParent' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, Lockpicked_) == 0x000790, "Member 'ALootPoint_C::Lockpicked_' has a wrong offset!");
static_assert(offsetof(ALootPoint_C, ResetByManager) == 0x000798, "Member 'ALootPoint_C::ResetByManager' has a wrong offset!");

}

