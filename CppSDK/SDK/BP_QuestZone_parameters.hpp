#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuestZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_InteractType_structs.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK::Params
{

// Function BP_QuestZone.BP_QuestZone_C.Active 3DPoint Widget
// 0x0020 (0x0020 - 0x0000)
struct BP_QuestZone_C_Active_3DPoint_Widget final
{
public:
	bool                                          Toggle;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_GetWidget_ReturnValue;                    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_QuestPoint3D_C*                    K2Node_DynamicCast_AsWBP_Quest_Point_3D;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_Active_3DPoint_Widget) == 0x000008, "Wrong alignment on BP_QuestZone_C_Active_3DPoint_Widget");
static_assert(sizeof(BP_QuestZone_C_Active_3DPoint_Widget) == 0x000020, "Wrong size on BP_QuestZone_C_Active_3DPoint_Widget");
static_assert(offsetof(BP_QuestZone_C_Active_3DPoint_Widget, Toggle) == 0x000000, "Member 'BP_QuestZone_C_Active_3DPoint_Widget::Toggle' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_Active_3DPoint_Widget, CallFunc_GetWidget_ReturnValue) == 0x000008, "Member 'BP_QuestZone_C_Active_3DPoint_Widget::CallFunc_GetWidget_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_Active_3DPoint_Widget, K2Node_DynamicCast_AsWBP_Quest_Point_3D) == 0x000010, "Member 'BP_QuestZone_C_Active_3DPoint_Widget::K2Node_DynamicCast_AsWBP_Quest_Point_3D' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_Active_3DPoint_Widget, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_QuestZone_C_Active_3DPoint_Widget::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.ExecuteUbergraph_BP_QuestZone
// 0x00A0 (0x00A0 - 0x0000)
struct BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player_8;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_7;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_6;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_5;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SitIndex;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_SkipAnimation;                        // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player_4;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_3;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_2;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_1;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible_1;                            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible;                              // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GS_TDB_C>         K2Node_DynamicCast_AsBPI_GS_TDB;                   // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player;                               // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Pawn;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASurvPC_C*                              K2Node_DynamicCast_AsSurv_PC;                      // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone) == 0x000008, "Wrong alignment on BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone");
static_assert(sizeof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone) == 0x0000A0, "Wrong size on BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, EntryPoint) == 0x000000, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_8) == 0x000008, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_8' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_7) == 0x000010, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_7' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_6) == 0x000018, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_6' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_5) == 0x000020, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_5' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_SitIndex) == 0x000028, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_SitIndex' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_SkipAnimation) == 0x00002C, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_SkipAnimation' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_4) == 0x000030, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_4' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_3) == 0x000038, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_3' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_2) == 0x000040, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_2' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player_1) == 0x000048, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player_1' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Visible_1) == 0x000050, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Visible_1' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Visible) == 0x000051, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Visible' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, CallFunc_GetGameState_ReturnValue) == 0x000058, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_DynamicCast_AsBPI_GS_TDB) == 0x000060, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_DynamicCast_AsBPI_GS_TDB' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_Event_Player) == 0x000078, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_CustomEvent_Pawn) == 0x000080, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_CustomEvent_Pawn' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, CallFunc_GetController_ReturnValue) == 0x000088, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_DynamicCast_AsSurv_PC) == 0x000090, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_DynamicCast_AsSurv_PC' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone, K2Node_DynamicCast_bSuccess_1) == 0x000098, "Member 'BP_QuestZone_C_ExecuteUbergraph_BP_QuestZone::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.GetActorType
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestZone_C_GetActorType final
{
public:
	E_ActorType                                   ActorType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_GetActorType) == 0x000001, "Wrong alignment on BP_QuestZone_C_GetActorType");
static_assert(sizeof(BP_QuestZone_C_GetActorType) == 0x000001, "Wrong size on BP_QuestZone_C_GetActorType");
static_assert(offsetof(BP_QuestZone_C_GetActorType, ActorType) == 0x000000, "Member 'BP_QuestZone_C_GetActorType::ActorType' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.Is Active Zone
// 0x0010 (0x0010 - 0x0000)
struct BP_QuestZone_C_Is_Active_Zone final
{
public:
	class ASurvPC_C*                              Controller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_Is_Active_Zone) == 0x000008, "Wrong alignment on BP_QuestZone_C_Is_Active_Zone");
static_assert(sizeof(BP_QuestZone_C_Is_Active_Zone) == 0x000010, "Wrong size on BP_QuestZone_C_Is_Active_Zone");
static_assert(offsetof(BP_QuestZone_C_Is_Active_Zone, Controller) == 0x000000, "Member 'BP_QuestZone_C_Is_Active_Zone::Controller' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_Is_Active_Zone, Active) == 0x000008, "Member 'BP_QuestZone_C_Is_Active_Zone::Active' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_Is_Active_Zone, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'BP_QuestZone_C_Is_Active_Zone::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.IsLocked?
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestZone_C_IsLocked_ final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_IsLocked_) == 0x000001, "Wrong alignment on BP_QuestZone_C_IsLocked_");
static_assert(sizeof(BP_QuestZone_C_IsLocked_) == 0x000001, "Wrong size on BP_QuestZone_C_IsLocked_");
static_assert(offsetof(BP_QuestZone_C_IsLocked_, Result) == 0x000000, "Member 'BP_QuestZone_C_IsLocked_::Result' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnBeginInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnBeginInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnBeginInteract) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnBeginInteract");
static_assert(sizeof(BP_QuestZone_C_OnBeginInteract) == 0x000008, "Wrong size on BP_QuestZone_C_OnBeginInteract");
static_assert(offsetof(BP_QuestZone_C_OnBeginInteract, Player) == 0x000000, "Member 'BP_QuestZone_C_OnBeginInteract::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnFocused
// 0x0080 (0x0080 - 0x0000)
struct BP_QuestZone_C_OnFocused final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HighlightActor;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        HighlightActorComponent;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_InteractType                                InteractType;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LateTime;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0030(0x0010)(ReferenceParm)
	class ASurvPC_C*                              K2Node_DynamicCast_AsSurv_PC;                      // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Is_Active_Zone_Active;                    // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD;                 // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIW_PlayerMain_C*                      CallFunc_GetGUI_GUI;                               // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnFocused) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnFocused");
static_assert(sizeof(BP_QuestZone_C_OnFocused) == 0x000080, "Wrong size on BP_QuestZone_C_OnFocused");
static_assert(offsetof(BP_QuestZone_C_OnFocused, Player) == 0x000000, "Member 'BP_QuestZone_C_OnFocused::Player' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, HighlightActor) == 0x000008, "Member 'BP_QuestZone_C_OnFocused::HighlightActor' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, HighlightActorComponent) == 0x000010, "Member 'BP_QuestZone_C_OnFocused::HighlightActorComponent' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, InteractType) == 0x000018, "Member 'BP_QuestZone_C_OnFocused::InteractType' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, LateTime) == 0x000020, "Member 'BP_QuestZone_C_OnFocused::LateTime' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_GetController_ReturnValue) == 0x000028, "Member 'BP_QuestZone_C_OnFocused::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000030, "Member 'BP_QuestZone_C_OnFocused::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, K2Node_DynamicCast_AsSurv_PC) == 0x000040, "Member 'BP_QuestZone_C_OnFocused::K2Node_DynamicCast_AsSurv_PC' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_QuestZone_C_OnFocused::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_Array_Contains_ReturnValue) == 0x000049, "Member 'BP_QuestZone_C_OnFocused::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_Is_Active_Zone_Active) == 0x00004A, "Member 'BP_QuestZone_C_OnFocused::CallFunc_Is_Active_Zone_Active' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00004B, "Member 'BP_QuestZone_C_OnFocused::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_BooleanAND_ReturnValue) == 0x00004C, "Member 'BP_QuestZone_C_OnFocused::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_GetPlayerController_ReturnValue) == 0x000050, "Member 'BP_QuestZone_C_OnFocused::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_GetHUD_ReturnValue) == 0x000058, "Member 'BP_QuestZone_C_OnFocused::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, K2Node_DynamicCast_AsBPI_Game_HUD) == 0x000060, "Member 'BP_QuestZone_C_OnFocused::K2Node_DynamicCast_AsBPI_Game_HUD' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, K2Node_DynamicCast_bSuccess_1) == 0x000070, "Member 'BP_QuestZone_C_OnFocused::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnFocused, CallFunc_GetGUI_GUI) == 0x000078, "Member 'BP_QuestZone_C_OnFocused::CallFunc_GetGUI_GUI' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnInteract) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnInteract");
static_assert(sizeof(BP_QuestZone_C_OnInteract) == 0x000008, "Wrong size on BP_QuestZone_C_OnInteract");
static_assert(offsetof(BP_QuestZone_C_OnInteract, Player) == 0x000000, "Member 'BP_QuestZone_C_OnInteract::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnInteract2
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnInteract2 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnInteract2) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnInteract2");
static_assert(sizeof(BP_QuestZone_C_OnInteract2) == 0x000008, "Wrong size on BP_QuestZone_C_OnInteract2");
static_assert(offsetof(BP_QuestZone_C_OnInteract2, Player) == 0x000000, "Member 'BP_QuestZone_C_OnInteract2::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnInteract3
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnInteract3 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnInteract3) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnInteract3");
static_assert(sizeof(BP_QuestZone_C_OnInteract3) == 0x000008, "Wrong size on BP_QuestZone_C_OnInteract3");
static_assert(offsetof(BP_QuestZone_C_OnInteract3, Player) == 0x000000, "Member 'BP_QuestZone_C_OnInteract3::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnInteracted
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnInteracted final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnInteracted) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnInteracted");
static_assert(sizeof(BP_QuestZone_C_OnInteracted) == 0x000008, "Wrong size on BP_QuestZone_C_OnInteracted");
static_assert(offsetof(BP_QuestZone_C_OnInteracted, Pawn) == 0x000000, "Member 'BP_QuestZone_C_OnInteracted::Pawn' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnInteractVehicle
// 0x0010 (0x0010 - 0x0000)
struct BP_QuestZone_C_OnInteractVehicle final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnInteractVehicle) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnInteractVehicle");
static_assert(sizeof(BP_QuestZone_C_OnInteractVehicle) == 0x000010, "Wrong size on BP_QuestZone_C_OnInteractVehicle");
static_assert(offsetof(BP_QuestZone_C_OnInteractVehicle, Player) == 0x000000, "Member 'BP_QuestZone_C_OnInteractVehicle::Player' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnInteractVehicle, SitIndex) == 0x000008, "Member 'BP_QuestZone_C_OnInteractVehicle::SitIndex' has a wrong offset!");
static_assert(offsetof(BP_QuestZone_C_OnInteractVehicle, SkipAnimation) == 0x00000C, "Member 'BP_QuestZone_C_OnInteractVehicle::SkipAnimation' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnLocalInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnLocalInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnLocalInteract) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnLocalInteract");
static_assert(sizeof(BP_QuestZone_C_OnLocalInteract) == 0x000008, "Wrong size on BP_QuestZone_C_OnLocalInteract");
static_assert(offsetof(BP_QuestZone_C_OnLocalInteract, Player) == 0x000000, "Member 'BP_QuestZone_C_OnLocalInteract::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnLostFocus
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnLostFocus final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnLostFocus) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnLostFocus");
static_assert(sizeof(BP_QuestZone_C_OnLostFocus) == 0x000008, "Wrong size on BP_QuestZone_C_OnLostFocus");
static_assert(offsetof(BP_QuestZone_C_OnLostFocus, Player) == 0x000000, "Member 'BP_QuestZone_C_OnLostFocus::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnSeen
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnSeen final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnSeen) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnSeen");
static_assert(sizeof(BP_QuestZone_C_OnSeen) == 0x000008, "Wrong size on BP_QuestZone_C_OnSeen");
static_assert(offsetof(BP_QuestZone_C_OnSeen, Player) == 0x000000, "Member 'BP_QuestZone_C_OnSeen::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.OnStopInteract
// 0x0008 (0x0008 - 0x0000)
struct BP_QuestZone_C_OnStopInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_OnStopInteract) == 0x000008, "Wrong alignment on BP_QuestZone_C_OnStopInteract");
static_assert(sizeof(BP_QuestZone_C_OnStopInteract) == 0x000008, "Wrong size on BP_QuestZone_C_OnStopInteract");
static_assert(offsetof(BP_QuestZone_C_OnStopInteract, Player) == 0x000000, "Member 'BP_QuestZone_C_OnStopInteract::Player' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.Set Activate Zone
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestZone_C_Set_Activate_Zone final
{
public:
	bool                                          Param_Activate;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_Set_Activate_Zone) == 0x000001, "Wrong alignment on BP_QuestZone_C_Set_Activate_Zone");
static_assert(sizeof(BP_QuestZone_C_Set_Activate_Zone) == 0x000001, "Wrong size on BP_QuestZone_C_Set_Activate_Zone");
static_assert(offsetof(BP_QuestZone_C_Set_Activate_Zone, Param_Activate) == 0x000000, "Member 'BP_QuestZone_C_Set_Activate_Zone::Param_Activate' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.Set3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestZone_C_Set3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_Set3DWidgetVisibility) == 0x000001, "Wrong alignment on BP_QuestZone_C_Set3DWidgetVisibility");
static_assert(sizeof(BP_QuestZone_C_Set3DWidgetVisibility) == 0x000001, "Wrong size on BP_QuestZone_C_Set3DWidgetVisibility");
static_assert(offsetof(BP_QuestZone_C_Set3DWidgetVisibility, Visible) == 0x000000, "Member 'BP_QuestZone_C_Set3DWidgetVisibility::Visible' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.SetTutorial3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_QuestZone_C_SetTutorial3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_QuestZone_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong alignment on BP_QuestZone_C_SetTutorial3DWidgetVisibility");
static_assert(sizeof(BP_QuestZone_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong size on BP_QuestZone_C_SetTutorial3DWidgetVisibility");
static_assert(offsetof(BP_QuestZone_C_SetTutorial3DWidgetVisibility, Visible) == 0x000000, "Member 'BP_QuestZone_C_SetTutorial3DWidgetVisibility::Visible' has a wrong offset!");

// Function BP_QuestZone.BP_QuestZone_C.UserConstructionScript
// 0x00E8 (0x00E8 - 0x0000)
struct BP_QuestZone_C_UserConstructionScript final
{
public:
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0000(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_QuestZone_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_QuestZone_C_UserConstructionScript");
static_assert(sizeof(BP_QuestZone_C_UserConstructionScript) == 0x0000E8, "Wrong size on BP_QuestZone_C_UserConstructionScript");
static_assert(offsetof(BP_QuestZone_C_UserConstructionScript, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000000, "Member 'BP_QuestZone_C_UserConstructionScript::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

}

