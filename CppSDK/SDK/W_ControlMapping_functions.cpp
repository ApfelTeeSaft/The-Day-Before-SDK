#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ControlMapping

#include "Basic.hpp"

#include "W_ControlMapping_classes.hpp"
#include "W_ControlMapping_parameters.hpp"


namespace SDK
{

// Function W_ControlMapping.W_ControlMapping_C.BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FInputChord                      SelectedKey                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_ControlMapping_C::BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature");

	Params::W_ControlMapping_C_BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_0_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature
// (BlueprintEvent)

void UW_ControlMapping_C::BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "BndEvt__W_ControlMapping_FirstKey_K2Node_ComponentBoundEvent_1_OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_2_OnIsSelectingKeyChanged__DelegateSignature
// (BlueprintEvent)

void UW_ControlMapping_C::BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_2_OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_2_OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_3_OnKeySelected__DelegateSignature
// (BlueprintEvent)
// Parameters:
// struct FInputChord                      SelectedKey                                            (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_ControlMapping_C::BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_3_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_3_OnKeySelected__DelegateSignature");

	Params::W_ControlMapping_C_BndEvt__W_ControlMapping_Input_GamepadKey_K2Node_ComponentBoundEvent_3_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKey = std::move(SelectedKey);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_ControlMapping_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.DeselectRow
// (Public, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::DeselectRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "DeselectRow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.ExecuteUbergraph_W_ControlMapping
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::ExecuteUbergraph_W_ControlMapping(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "ExecuteUbergraph_W_ControlMapping");

	Params::W_ControlMapping_C_ExecuteUbergraph_W_ControlMapping Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.GetIsDefaultValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Default                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::GetIsDefaultValue(bool* Default)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "GetIsDefaultValue");

	Params::W_ControlMapping_C_GetIsDefaultValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Default != nullptr)
		*Default = Parms.Default;
}


// Function W_ControlMapping.W_ControlMapping_C.GetMappingName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Param_MappingName                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::GetMappingName(class FName* Param_MappingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "GetMappingName");

	Params::W_ControlMapping_C_GetMappingName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_MappingName != nullptr)
		*Param_MappingName = Parms.Param_MappingName;
}


// Function W_ControlMapping.W_ControlMapping_C.GetSettingName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SettingName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::GetSettingName(class FName* SettingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "GetSettingName");

	Params::W_ControlMapping_C_GetSettingName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SettingName != nullptr)
		*SettingName = Parms.SettingName;
}


// Function W_ControlMapping.W_ControlMapping_C.HoverRow
// (Public, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::HoverRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "HoverRow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.Init
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.IsRowHovered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_IsHovered                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::IsRowHovered(bool* Param_IsHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "IsRowHovered");

	Params::W_ControlMapping_C_IsRowHovered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsHovered != nullptr)
		*Param_IsHovered = Parms.Param_IsHovered;
}


// Function W_ControlMapping.W_ControlMapping_C.IsRowSelected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSelected                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::IsRowSelected(bool* IsSelected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "IsRowSelected");

	Params::W_ControlMapping_C_IsRowSelected Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsSelected != nullptr)
		*IsSelected = Parms.IsSelected;
}


// Function W_ControlMapping.W_ControlMapping_C.IsSelectingKeyChanged
// (BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::IsSelectingKeyChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "IsSelectingKeyChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.KeySelected
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      Selected_Key                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_ControlMapping_C::KeySelected(const struct FInputChord& Selected_Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "KeySelected");

	Params::W_ControlMapping_C_KeySelected Parms{};

	Parms.Selected_Key = std::move(Selected_Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.OnKeyChanging__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Changing                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::OnKeyChanging__DelegateSignature(bool Changing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "OnKeyChanging__DelegateSignature");

	Params::W_ControlMapping_C_OnKeyChanging__DelegateSignature Parms{};

	Parms.Changing = Changing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlMapping_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "OnMouseButtonDown");

	Params::W_ControlMapping_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlMapping.W_ControlMapping_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ControlMapping_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "OnMouseEnter");

	Params::W_ControlMapping_C_OnMouseEnter Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_ControlMapping_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "OnMouseLeave");

	Params::W_ControlMapping_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_ControlMapping_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "OnMouseWheel");

	Params::W_ControlMapping_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_ControlMapping.W_ControlMapping_C.PlayChangeKeyAnimation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsKeyboard                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EUMGSequencePlayMode                    PlayMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::PlayChangeKeyAnimation(bool IsKeyboard, EUMGSequencePlayMode PlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "PlayChangeKeyAnimation");

	Params::W_ControlMapping_C_PlayChangeKeyAnimation Parms{};

	Parms.IsKeyboard = IsKeyboard;
	Parms.PlayMode = PlayMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "PreConstruct");

	Params::W_ControlMapping_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.RebindKey
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    IsKeyboardKey                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::RebindKey(const struct FInputChord& Key, bool IsKeyboardKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "RebindKey");

	Params::W_ControlMapping_C_RebindKey Parms{};

	Parms.Key = std::move(Key);
	Parms.IsKeyboardKey = IsKeyboardKey;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.ResetControls
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::ResetControls()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "ResetControls");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.SelectRow
// (Public, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::SelectRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "SelectRow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.SetDefault
// (Private, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::SetDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "SetDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.SetHovered
// (Private, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::SetHovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "SetHovered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.SetParentSettingsWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      SettingsWidgetRef                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::SetParentSettingsWidget(class UUserWidget* SettingsWidgetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "SetParentSettingsWidget");

	Params::W_ControlMapping_C_SetParentSettingsWidget Parms{};

	Parms.SettingsWidgetRef = SettingsWidgetRef;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.SetSelected
// (Private, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::SetSelected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "SetSelected");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.UnhoverRow
// (Public, BlueprintCallable, BlueprintEvent)

void UW_ControlMapping_C::UnhoverRow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "UnhoverRow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_ControlMapping.W_ControlMapping_C.UpdateKeyIcon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Shift                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Ctrl                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Alt                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Cmd                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_ControlMapping_C::UpdateKeyIcon(const struct FKey& Key, bool Shift, bool Ctrl, bool Alt, bool Cmd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "UpdateKeyIcon");

	Params::W_ControlMapping_C_UpdateKeyIcon Parms{};

	Parms.Key = std::move(Key);
	Parms.Shift = Shift;
	Parms.Ctrl = Ctrl;
	Parms.Alt = Alt;
	Parms.Cmd = Cmd;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_ControlMapping.W_ControlMapping_C.ValueChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInputChord                      NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_ControlMapping_C::ValueChanged__DelegateSignature(const struct FInputChord& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_ControlMapping_C", "ValueChanged__DelegateSignature");

	Params::W_ControlMapping_C_ValueChanged__DelegateSignature Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}

}

