#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_StatCircle

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_StatCircle.W_StatCircle_C.ExecuteUbergraph_W_StatCircle
// 0x0250 (0x0250 - 0x0000)
struct W_StatCircle_C_ExecuteUbergraph_W_StatCircle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue;          // 0x0010(0x00D0)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0xF];                                       // 0x00E1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            CallFunc_MakeBrushFromSprite_ReturnValue_1;        // 0x00F0(0x00D0)()
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x01C0(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_CustomEvent_CurrentFillValue;               // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsCritical;                     // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetScalarParameterValue_ReturnValue;   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_ReturnValue;                    // 0x0218(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Current_ImplicitCast;           // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle) == 0x000010, "Wrong alignment on W_StatCircle_C_ExecuteUbergraph_W_StatCircle");
static_assert(sizeof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle) == 0x000250, "Wrong size on W_StatCircle_C_ExecuteUbergraph_W_StatCircle");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, EntryPoint) == 0x000000, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_MakeBrushFromSprite_ReturnValue) == 0x000010, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_MakeBrushFromSprite_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, K2Node_Event_IsDesignTime) == 0x0000E0, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_MakeBrushFromSprite_ReturnValue_1) == 0x0000F0, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_MakeBrushFromSprite_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, K2Node_Event_MyGeometry) == 0x0001C0, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, K2Node_Event_InDeltaTime) == 0x0001F8, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, K2Node_CustomEvent_CurrentFillValue) == 0x000200, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::K2Node_CustomEvent_CurrentFillValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, K2Node_CustomEvent_IsCritical) == 0x000208, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::K2Node_CustomEvent_IsCritical' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_K2_GetScalarParameterValue_ReturnValue) == 0x00020C, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_K2_GetScalarParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000210, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_FInterpTo_ReturnValue) == 0x000218, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000220, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000228, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_PlayAnimation_ReturnValue) == 0x000230, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_FInterpTo_Current_ImplicitCast) == 0x000238, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_FInterpTo_Current_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_ExecuteUbergraph_W_StatCircle, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000240, "Member 'W_StatCircle_C_ExecuteUbergraph_W_StatCircle::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function W_StatCircle.W_StatCircle_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_StatCircle_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_StatCircle_C_PreConstruct) == 0x000001, "Wrong alignment on W_StatCircle_C_PreConstruct");
static_assert(sizeof(W_StatCircle_C_PreConstruct) == 0x000001, "Wrong size on W_StatCircle_C_PreConstruct");
static_assert(offsetof(W_StatCircle_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_StatCircle_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_StatCircle.W_StatCircle_C.SetFillValue
// 0x0010 (0x0010 - 0x0000)
struct W_StatCircle_C_SetFillValue final
{
public:
	double                                        Param_CurrentFillValue;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCritical;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_StatCircle_C_SetFillValue) == 0x000008, "Wrong alignment on W_StatCircle_C_SetFillValue");
static_assert(sizeof(W_StatCircle_C_SetFillValue) == 0x000010, "Wrong size on W_StatCircle_C_SetFillValue");
static_assert(offsetof(W_StatCircle_C_SetFillValue, Param_CurrentFillValue) == 0x000000, "Member 'W_StatCircle_C_SetFillValue::Param_CurrentFillValue' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_SetFillValue, IsCritical) == 0x000008, "Member 'W_StatCircle_C_SetFillValue::IsCritical' has a wrong offset!");

// Function W_StatCircle.W_StatCircle_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_StatCircle_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_StatCircle_C_Tick) == 0x000004, "Wrong alignment on W_StatCircle_C_Tick");
static_assert(sizeof(W_StatCircle_C_Tick) == 0x00003C, "Wrong size on W_StatCircle_C_Tick");
static_assert(offsetof(W_StatCircle_C_Tick, MyGeometry) == 0x000000, "Member 'W_StatCircle_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_StatCircle_C_Tick, InDeltaTime) == 0x000038, "Member 'W_StatCircle_C_Tick::InDeltaTime' has a wrong offset!");

}

