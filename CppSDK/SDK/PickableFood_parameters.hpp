#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PickableFood

#include "Basic.hpp"

#include "E_ActorType_structs.hpp"
#include "E_InteractType_structs.hpp"
#include "FItemInfo_structs.hpp"


namespace SDK::Params
{

// Function PickableFood.PickableFood_C.ExecuteUbergraph_PickableFood
// 0x04E8 (0x04E8 - 0x0000)
struct PickableFood_C_ExecuteUbergraph_PickableFood final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             CallFunc_GetInfo_ItemInfo;                         // 0x0008(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_5;                             // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SitIndex;                             // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_SkipAnimation;                        // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player_4;                             // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_3;                             // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_2;                             // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_1;                             // 0x0250(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible_1;                            // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Visible;                              // 0x0259(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25A[0x6];                                      // 0x025A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player_6;                             // 0x0260(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player_7;                             // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_Player;                               // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_CustomEvent_Player;                         // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_GeneralInterface_C> K2Node_DynamicCast_AsBPI_General_Interface;        // 0x0280(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_GeneralInterface_C> K2Node_DynamicCast_AsBPI_General_Interface_1;      // 0x0298(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_Event_Player_8;                             // 0x02B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFItemInfo                             CallFunc_GetInfo_ItemInfo_1;                       // 0x02B8(0x0220)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_PlayerAddItem_Added;                      // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x04DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x04E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x04E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x04E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_ExecuteUbergraph_PickableFood) == 0x000008, "Wrong alignment on PickableFood_C_ExecuteUbergraph_PickableFood");
static_assert(sizeof(PickableFood_C_ExecuteUbergraph_PickableFood) == 0x0004E8, "Wrong size on PickableFood_C_ExecuteUbergraph_PickableFood");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, EntryPoint) == 0x000000, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::EntryPoint' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, CallFunc_GetInfo_ItemInfo) == 0x000008, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::CallFunc_GetInfo_ItemInfo' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_5) == 0x000228, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_5' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_SitIndex) == 0x000230, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_SitIndex' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_SkipAnimation) == 0x000234, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_SkipAnimation' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_4) == 0x000238, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_4' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_3) == 0x000240, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_3' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_2) == 0x000248, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_2' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_1) == 0x000250, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_1' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Visible_1) == 0x000258, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Visible_1' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Visible) == 0x000259, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Visible' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_6) == 0x000260, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_6' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_7) == 0x000268, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_7' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player) == 0x000270, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_CustomEvent_Player) == 0x000278, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_DynamicCast_AsBPI_General_Interface) == 0x000280, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_DynamicCast_AsBPI_General_Interface' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_DynamicCast_bSuccess) == 0x000290, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_DynamicCast_AsBPI_General_Interface_1) == 0x000298, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_DynamicCast_AsBPI_General_Interface_1' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_DynamicCast_bSuccess_1) == 0x0002A8, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, K2Node_Event_Player_8) == 0x0002B0, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::K2Node_Event_Player_8' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, CallFunc_GetInfo_ItemInfo_1) == 0x0002B8, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::CallFunc_GetInfo_ItemInfo_1' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, CallFunc_PlayerAddItem_Added) == 0x0004D8, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::CallFunc_PlayerAddItem_Added' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, CallFunc_Subtract_IntInt_ReturnValue) == 0x0004DC, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, Temp_int_Variable) == 0x0004E0, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, CallFunc_Less_IntInt_ReturnValue) == 0x0004E4, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ExecuteUbergraph_PickableFood, CallFunc_HasAuthority_ReturnValue) == 0x0004E5, "Member 'PickableFood_C_ExecuteUbergraph_PickableFood::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function PickableFood.PickableFood_C.GetActorType
// 0x0001 (0x0001 - 0x0000)
struct PickableFood_C_GetActorType final
{
public:
	E_ActorType                                   ActorType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_GetActorType) == 0x000001, "Wrong alignment on PickableFood_C_GetActorType");
static_assert(sizeof(PickableFood_C_GetActorType) == 0x000001, "Wrong size on PickableFood_C_GetActorType");
static_assert(offsetof(PickableFood_C_GetActorType, ActorType) == 0x000000, "Member 'PickableFood_C_GetActorType::ActorType' has a wrong offset!");

// Function PickableFood.PickableFood_C.InteractClient
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_InteractClient final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_InteractClient) == 0x000008, "Wrong alignment on PickableFood_C_InteractClient");
static_assert(sizeof(PickableFood_C_InteractClient) == 0x000008, "Wrong size on PickableFood_C_InteractClient");
static_assert(offsetof(PickableFood_C_InteractClient, Player) == 0x000000, "Member 'PickableFood_C_InteractClient::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.IsLocked?
// 0x0001 (0x0001 - 0x0000)
struct PickableFood_C_IsLocked_ final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_IsLocked_) == 0x000001, "Wrong alignment on PickableFood_C_IsLocked_");
static_assert(sizeof(PickableFood_C_IsLocked_) == 0x000001, "Wrong size on PickableFood_C_IsLocked_");
static_assert(offsetof(PickableFood_C_IsLocked_, Result) == 0x000000, "Member 'PickableFood_C_IsLocked_::Result' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnBeginInteract
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnBeginInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnBeginInteract) == 0x000008, "Wrong alignment on PickableFood_C_OnBeginInteract");
static_assert(sizeof(PickableFood_C_OnBeginInteract) == 0x000008, "Wrong size on PickableFood_C_OnBeginInteract");
static_assert(offsetof(PickableFood_C_OnBeginInteract, Player) == 0x000000, "Member 'PickableFood_C_OnBeginInteract::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnFocused
// 0x00B0 (0x00B0 - 0x0000)
struct PickableFood_C_OnFocused final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HighlightActor;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UActorComponent*                        HighlightActorComponent;                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_InteractType                                InteractType;                                      // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LateTime;                                          // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_GameHUD_C>        K2Node_DynamicCast_AsBPI_Game_HUD;                 // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIW_PlayerMain_C*                      CallFunc_GetGUI_GUI;                               // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0098(0x0018)()
};
static_assert(alignof(PickableFood_C_OnFocused) == 0x000008, "Wrong alignment on PickableFood_C_OnFocused");
static_assert(sizeof(PickableFood_C_OnFocused) == 0x0000B0, "Wrong size on PickableFood_C_OnFocused");
static_assert(offsetof(PickableFood_C_OnFocused, Player) == 0x000000, "Member 'PickableFood_C_OnFocused::Player' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, HighlightActor) == 0x000008, "Member 'PickableFood_C_OnFocused::HighlightActor' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, HighlightActorComponent) == 0x000010, "Member 'PickableFood_C_OnFocused::HighlightActorComponent' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, InteractType) == 0x000018, "Member 'PickableFood_C_OnFocused::InteractType' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, LateTime) == 0x000020, "Member 'PickableFood_C_OnFocused::LateTime' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_GetPlayerController_ReturnValue) == 0x000028, "Member 'PickableFood_C_OnFocused::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_IsLocallyControlled_ReturnValue) == 0x000030, "Member 'PickableFood_C_OnFocused::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, K2Node_DynamicCast_AsBPI_Game_HUD) == 0x000038, "Member 'PickableFood_C_OnFocused::K2Node_DynamicCast_AsBPI_Game_HUD' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'PickableFood_C_OnFocused::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_GetGUI_GUI) == 0x000050, "Member 'PickableFood_C_OnFocused::CallFunc_GetGUI_GUI' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_Conv_IntToString_ReturnValue) == 0x000058, "Member 'PickableFood_C_OnFocused::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_Concat_StrStr_ReturnValue) == 0x000068, "Member 'PickableFood_C_OnFocused::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000078, "Member 'PickableFood_C_OnFocused::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000088, "Member 'PickableFood_C_OnFocused::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnFocused, CallFunc_Conv_StringToText_ReturnValue) == 0x000098, "Member 'PickableFood_C_OnFocused::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnInteract
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnInteract) == 0x000008, "Wrong alignment on PickableFood_C_OnInteract");
static_assert(sizeof(PickableFood_C_OnInteract) == 0x000008, "Wrong size on PickableFood_C_OnInteract");
static_assert(offsetof(PickableFood_C_OnInteract, Player) == 0x000000, "Member 'PickableFood_C_OnInteract::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnInteract2
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnInteract2 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnInteract2) == 0x000008, "Wrong alignment on PickableFood_C_OnInteract2");
static_assert(sizeof(PickableFood_C_OnInteract2) == 0x000008, "Wrong size on PickableFood_C_OnInteract2");
static_assert(offsetof(PickableFood_C_OnInteract2, Player) == 0x000000, "Member 'PickableFood_C_OnInteract2::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnInteract3
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnInteract3 final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnInteract3) == 0x000008, "Wrong alignment on PickableFood_C_OnInteract3");
static_assert(sizeof(PickableFood_C_OnInteract3) == 0x000008, "Wrong size on PickableFood_C_OnInteract3");
static_assert(offsetof(PickableFood_C_OnInteract3, Player) == 0x000000, "Member 'PickableFood_C_OnInteract3::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnInteractVehicle
// 0x0010 (0x0010 - 0x0000)
struct PickableFood_C_OnInteractVehicle final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         SitIndex;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkipAnimation;                                     // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnInteractVehicle) == 0x000008, "Wrong alignment on PickableFood_C_OnInteractVehicle");
static_assert(sizeof(PickableFood_C_OnInteractVehicle) == 0x000010, "Wrong size on PickableFood_C_OnInteractVehicle");
static_assert(offsetof(PickableFood_C_OnInteractVehicle, Player) == 0x000000, "Member 'PickableFood_C_OnInteractVehicle::Player' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnInteractVehicle, SitIndex) == 0x000008, "Member 'PickableFood_C_OnInteractVehicle::SitIndex' has a wrong offset!");
static_assert(offsetof(PickableFood_C_OnInteractVehicle, SkipAnimation) == 0x00000C, "Member 'PickableFood_C_OnInteractVehicle::SkipAnimation' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnLocalInteract
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnLocalInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnLocalInteract) == 0x000008, "Wrong alignment on PickableFood_C_OnLocalInteract");
static_assert(sizeof(PickableFood_C_OnLocalInteract) == 0x000008, "Wrong size on PickableFood_C_OnLocalInteract");
static_assert(offsetof(PickableFood_C_OnLocalInteract, Player) == 0x000000, "Member 'PickableFood_C_OnLocalInteract::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnLostFocus
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnLostFocus final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnLostFocus) == 0x000008, "Wrong alignment on PickableFood_C_OnLostFocus");
static_assert(sizeof(PickableFood_C_OnLostFocus) == 0x000008, "Wrong size on PickableFood_C_OnLostFocus");
static_assert(offsetof(PickableFood_C_OnLostFocus, Player) == 0x000000, "Member 'PickableFood_C_OnLostFocus::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnSeen
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnSeen final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnSeen) == 0x000008, "Wrong alignment on PickableFood_C_OnSeen");
static_assert(sizeof(PickableFood_C_OnSeen) == 0x000008, "Wrong size on PickableFood_C_OnSeen");
static_assert(offsetof(PickableFood_C_OnSeen, Player) == 0x000000, "Member 'PickableFood_C_OnSeen::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.OnStopInteract
// 0x0008 (0x0008 - 0x0000)
struct PickableFood_C_OnStopInteract final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_OnStopInteract) == 0x000008, "Wrong alignment on PickableFood_C_OnStopInteract");
static_assert(sizeof(PickableFood_C_OnStopInteract) == 0x000008, "Wrong size on PickableFood_C_OnStopInteract");
static_assert(offsetof(PickableFood_C_OnStopInteract, Player) == 0x000000, "Member 'PickableFood_C_OnStopInteract::Player' has a wrong offset!");

// Function PickableFood.PickableFood_C.ResolveOwner
// 0x0018 (0x0018 - 0x0000)
struct PickableFood_C_ResolveOwner final
{
public:
	class AActor*                                 NewOwner;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_ResolveOwner) == 0x000008, "Wrong alignment on PickableFood_C_ResolveOwner");
static_assert(sizeof(PickableFood_C_ResolveOwner) == 0x000018, "Wrong size on PickableFood_C_ResolveOwner");
static_assert(offsetof(PickableFood_C_ResolveOwner, NewOwner) == 0x000000, "Member 'PickableFood_C_ResolveOwner::NewOwner' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ResolveOwner, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'PickableFood_C_ResolveOwner::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ResolveOwner, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'PickableFood_C_ResolveOwner::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_ResolveOwner, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000011, "Member 'PickableFood_C_ResolveOwner::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function PickableFood.PickableFood_C.Set3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct PickableFood_C_Set3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_Set3DWidgetVisibility) == 0x000001, "Wrong alignment on PickableFood_C_Set3DWidgetVisibility");
static_assert(sizeof(PickableFood_C_Set3DWidgetVisibility) == 0x000001, "Wrong size on PickableFood_C_Set3DWidgetVisibility");
static_assert(offsetof(PickableFood_C_Set3DWidgetVisibility, Visible) == 0x000000, "Member 'PickableFood_C_Set3DWidgetVisibility::Visible' has a wrong offset!");

// Function PickableFood.PickableFood_C.SetCount
// 0x0004 (0x0004 - 0x0000)
struct PickableFood_C_SetCount final
{
public:
	int32                                         Param_Count;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_SetCount) == 0x000004, "Wrong alignment on PickableFood_C_SetCount");
static_assert(sizeof(PickableFood_C_SetCount) == 0x000004, "Wrong size on PickableFood_C_SetCount");
static_assert(offsetof(PickableFood_C_SetCount, Param_Count) == 0x000000, "Member 'PickableFood_C_SetCount::Param_Count' has a wrong offset!");

// Function PickableFood.PickableFood_C.SetData
// 0x0228 (0x0228 - 0x0000)
struct PickableFood_C_SetData final
{
public:
	int32                                         Param_Count;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFItemInfo                             ItemInfo;                                          // 0x0008(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_SetData) == 0x000008, "Wrong alignment on PickableFood_C_SetData");
static_assert(sizeof(PickableFood_C_SetData) == 0x000228, "Wrong size on PickableFood_C_SetData");
static_assert(offsetof(PickableFood_C_SetData, Param_Count) == 0x000000, "Member 'PickableFood_C_SetData::Param_Count' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetData, ItemInfo) == 0x000008, "Member 'PickableFood_C_SetData::ItemInfo' has a wrong offset!");

// Function PickableFood.PickableFood_C.SetInfo
// 0x0250 (0x0250 - 0x0000)
struct PickableFood_C_SetInfo final
{
public:
	struct FFItemInfo                             Info;                                              // 0x0000(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0220(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class AGameModeBase*                          CallFunc_GetGameMode_ReturnValue;                  // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ATDB_GameMode_C*                        K2Node_DynamicCast_AsTDB_Game_Mode;                // 0x0238(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetPickupInfo_Updated;                    // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_242[0x2];                                      // 0x0242(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_SurvGetUID_ID;                            // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetUniqueID_Success;                      // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_SetInfo) == 0x000008, "Wrong alignment on PickableFood_C_SetInfo");
static_assert(sizeof(PickableFood_C_SetInfo) == 0x000250, "Wrong size on PickableFood_C_SetInfo");
static_assert(offsetof(PickableFood_C_SetInfo, Info) == 0x000000, "Member 'PickableFood_C_SetInfo::Info' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x000220, "Member 'PickableFood_C_SetInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, CallFunc_GetGameMode_ReturnValue) == 0x000230, "Member 'PickableFood_C_SetInfo::CallFunc_GetGameMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, K2Node_DynamicCast_AsTDB_Game_Mode) == 0x000238, "Member 'PickableFood_C_SetInfo::K2Node_DynamicCast_AsTDB_Game_Mode' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, K2Node_DynamicCast_bSuccess) == 0x000240, "Member 'PickableFood_C_SetInfo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, CallFunc_SetPickupInfo_Updated) == 0x000241, "Member 'PickableFood_C_SetInfo::CallFunc_SetPickupInfo_Updated' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, CallFunc_SurvGetUID_ID) == 0x000244, "Member 'PickableFood_C_SetInfo::CallFunc_SurvGetUID_ID' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetInfo, CallFunc_SetUniqueID_Success) == 0x000248, "Member 'PickableFood_C_SetInfo::CallFunc_SetUniqueID_Success' has a wrong offset!");

// Function PickableFood.PickableFood_C.SetMesh
// 0x0240 (0x0240 - 0x0000)
struct PickableFood_C_SetMesh final
{
public:
	struct FFItemInfo                             ItemInfo;                                          // 0x0000(0x0220)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x7];                                      // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x0230(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue_1;              // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_SetMesh) == 0x000008, "Wrong alignment on PickableFood_C_SetMesh");
static_assert(sizeof(PickableFood_C_SetMesh) == 0x000240, "Wrong size on PickableFood_C_SetMesh");
static_assert(offsetof(PickableFood_C_SetMesh, ItemInfo) == 0x000000, "Member 'PickableFood_C_SetMesh::ItemInfo' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetMesh, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000220, "Member 'PickableFood_C_SetMesh::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetMesh, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000228, "Member 'PickableFood_C_SetMesh::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetMesh, K2Node_DynamicCast_AsStatic_Mesh) == 0x000230, "Member 'PickableFood_C_SetMesh::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetMesh, K2Node_DynamicCast_bSuccess) == 0x000238, "Member 'PickableFood_C_SetMesh::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetMesh, CallFunc_SetStaticMesh_ReturnValue) == 0x000239, "Member 'PickableFood_C_SetMesh::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");
static_assert(offsetof(PickableFood_C_SetMesh, CallFunc_SetStaticMesh_ReturnValue_1) == 0x00023A, "Member 'PickableFood_C_SetMesh::CallFunc_SetStaticMesh_ReturnValue_1' has a wrong offset!");

// Function PickableFood.PickableFood_C.SetTutorial3DWidgetVisibility
// 0x0001 (0x0001 - 0x0000)
struct PickableFood_C_SetTutorial3DWidgetVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PickableFood_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong alignment on PickableFood_C_SetTutorial3DWidgetVisibility");
static_assert(sizeof(PickableFood_C_SetTutorial3DWidgetVisibility) == 0x000001, "Wrong size on PickableFood_C_SetTutorial3DWidgetVisibility");
static_assert(offsetof(PickableFood_C_SetTutorial3DWidgetVisibility, Visible) == 0x000000, "Member 'PickableFood_C_SetTutorial3DWidgetVisibility::Visible' has a wrong offset!");

}

