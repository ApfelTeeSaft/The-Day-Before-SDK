#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BFL_Utilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BFL_Utilities.BFL_Utilities_C.GetAngleBetweenTwoVectors
// 0x00C8 (0x00C8 - 0x0000)
struct BFL_Utilities_C_GetAngleBetweenTwoVectors final
{
public:
	struct FVector                                Vector1;                                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Vector2;                                           // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Degrees;                                           // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sign;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DotProduct;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrossProduct;                                      // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_GetAngleBetweenTwoVectors) == 0x000008, "Wrong alignment on BFL_Utilities_C_GetAngleBetweenTwoVectors");
static_assert(sizeof(BFL_Utilities_C_GetAngleBetweenTwoVectors) == 0x0000C8, "Wrong size on BFL_Utilities_C_GetAngleBetweenTwoVectors");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, Vector1) == 0x000000, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::Vector1' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, Vector2) == 0x000018, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::Vector2' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, __WorldContext) == 0x000030, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, Angle) == 0x000038, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::Angle' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, Degrees) == 0x000040, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::Degrees' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, Sign) == 0x000048, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::Sign' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, DotProduct) == 0x000050, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::DotProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CrossProduct) == 0x000058, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CrossProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_Dot_VectorVector_ReturnValue) == 0x000070, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_Cross_VectorVector_ReturnValue) == 0x000078, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_Vector_IsZero_ReturnValue) == 0x000090, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_DegAcos_ReturnValue) == 0x000098, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_BreakVector_X) == 0x0000A0, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_BreakVector_Y) == 0x0000A8, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_BreakVector_Z) == 0x0000B0, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_SignOfFloat_ReturnValue) == 0x0000B8, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleBetweenTwoVectors, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'BFL_Utilities_C_GetAngleBetweenTwoVectors::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BFL_Utilities.BFL_Utilities_C.GetAngleToActor
// 0x0130 (0x0130 - 0x0000)
struct BFL_Utilities_C_GetAngleToActor final
{
public:
	class AActor*                                 StartActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Degrees;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sign;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DotProduct;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrossProduct;                                      // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_GetAngleToActor) == 0x000008, "Wrong alignment on BFL_Utilities_C_GetAngleToActor");
static_assert(sizeof(BFL_Utilities_C_GetAngleToActor) == 0x000130, "Wrong size on BFL_Utilities_C_GetAngleToActor");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, StartActor) == 0x000000, "Member 'BFL_Utilities_C_GetAngleToActor::StartActor' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, TargetActor) == 0x000008, "Member 'BFL_Utilities_C_GetAngleToActor::TargetActor' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, __WorldContext) == 0x000010, "Member 'BFL_Utilities_C_GetAngleToActor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, Angle) == 0x000018, "Member 'BFL_Utilities_C_GetAngleToActor::Angle' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, Degrees) == 0x000020, "Member 'BFL_Utilities_C_GetAngleToActor::Degrees' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, Sign) == 0x000028, "Member 'BFL_Utilities_C_GetAngleToActor::Sign' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, DotProduct) == 0x000030, "Member 'BFL_Utilities_C_GetAngleToActor::DotProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CrossProduct) == 0x000038, "Member 'BFL_Utilities_C_GetAngleToActor::CrossProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_IsValid_ReturnValue) == 0x000068, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000070, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_FindLookAtRotation_ReturnValue) == 0x000088, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_IsValid_ReturnValue_1) == 0x0000A0, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_GetForwardVector_ReturnValue) == 0x0000A8, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_Vector_IsZero_ReturnValue) == 0x0000C8, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_DegAcos_ReturnValue) == 0x0000D0, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_BreakVector_X) == 0x0000D8, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_BreakVector_Y) == 0x0000E0, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_BreakVector_Z) == 0x0000E8, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000F0, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_SignOfFloat_ReturnValue) == 0x000108, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_Dot_VectorVector_ReturnValue) == 0x000110, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToActor, CallFunc_Cross_VectorVector_ReturnValue) == 0x000118, "Member 'BFL_Utilities_C_GetAngleToActor::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");

// Function BFL_Utilities.BFL_Utilities_C.GetAngleToController
// 0x0138 (0x0138 - 0x0000)
struct BFL_Utilities_C_GetAngleToController final
{
public:
	class AActor*                                 StartActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            TargetController;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Degrees;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sign;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DotProduct;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrossProduct;                                      // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_GetAngleToController) == 0x000008, "Wrong alignment on BFL_Utilities_C_GetAngleToController");
static_assert(sizeof(BFL_Utilities_C_GetAngleToController) == 0x000138, "Wrong size on BFL_Utilities_C_GetAngleToController");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, StartActor) == 0x000000, "Member 'BFL_Utilities_C_GetAngleToController::StartActor' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, TargetController) == 0x000008, "Member 'BFL_Utilities_C_GetAngleToController::TargetController' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, __WorldContext) == 0x000010, "Member 'BFL_Utilities_C_GetAngleToController::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, Angle) == 0x000018, "Member 'BFL_Utilities_C_GetAngleToController::Angle' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, Degrees) == 0x000020, "Member 'BFL_Utilities_C_GetAngleToController::Degrees' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, Sign) == 0x000028, "Member 'BFL_Utilities_C_GetAngleToController::Sign' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, DotProduct) == 0x000030, "Member 'BFL_Utilities_C_GetAngleToController::DotProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CrossProduct) == 0x000038, "Member 'BFL_Utilities_C_GetAngleToController::CrossProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_K2_GetPawn_ReturnValue) == 0x000058, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000078, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_FindLookAtRotation_ReturnValue) == 0x000098, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_GetForwardVector_ReturnValue) == 0x0000B0, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_Vector_IsZero_ReturnValue) == 0x0000D0, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_DegAcos_ReturnValue) == 0x0000D8, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_BreakVector_X) == 0x0000E0, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_BreakVector_Y) == 0x0000E8, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_BreakVector_Z) == 0x0000F0, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000F8, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_SignOfFloat_ReturnValue) == 0x000110, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_Dot_VectorVector_ReturnValue) == 0x000118, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToController, CallFunc_Cross_VectorVector_ReturnValue) == 0x000120, "Member 'BFL_Utilities_C_GetAngleToController::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");

// Function BFL_Utilities.BFL_Utilities_C.GetAngleToVector
// 0x0120 (0x0120 - 0x0000)
struct BFL_Utilities_C_GetAngleToVector final
{
public:
	class AActor*                                 StartActor;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetVector;                                      // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Angle;                                             // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Degrees;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sign;                                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DotProduct;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CrossProduct;                                      // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Vector_IsZero_ReturnValue;                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SignOfFloat_ReturnValue;                  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_GetAngleToVector) == 0x000008, "Wrong alignment on BFL_Utilities_C_GetAngleToVector");
static_assert(sizeof(BFL_Utilities_C_GetAngleToVector) == 0x000120, "Wrong size on BFL_Utilities_C_GetAngleToVector");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, StartActor) == 0x000000, "Member 'BFL_Utilities_C_GetAngleToVector::StartActor' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, TargetVector) == 0x000008, "Member 'BFL_Utilities_C_GetAngleToVector::TargetVector' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, __WorldContext) == 0x000020, "Member 'BFL_Utilities_C_GetAngleToVector::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, Angle) == 0x000028, "Member 'BFL_Utilities_C_GetAngleToVector::Angle' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, Degrees) == 0x000030, "Member 'BFL_Utilities_C_GetAngleToVector::Degrees' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, Sign) == 0x000038, "Member 'BFL_Utilities_C_GetAngleToVector::Sign' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, DotProduct) == 0x000040, "Member 'BFL_Utilities_C_GetAngleToVector::DotProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CrossProduct) == 0x000048, "Member 'BFL_Utilities_C_GetAngleToVector::CrossProduct' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000060, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_FindLookAtRotation_ReturnValue) == 0x000080, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_GetForwardVector_ReturnValue) == 0x000098, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_Vector_IsZero_ReturnValue) == 0x0000B8, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_Vector_IsZero_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_DegAcos_ReturnValue) == 0x0000C0, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_BreakVector_X) == 0x0000C8, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_BreakVector_Y) == 0x0000D0, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_BreakVector_Z) == 0x0000D8, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_SignOfFloat_ReturnValue) == 0x0000E0, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_GetActorForwardVector_ReturnValue) == 0x0000E8, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_Dot_VectorVector_ReturnValue) == 0x000100, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetAngleToVector, CallFunc_Cross_VectorVector_ReturnValue) == 0x000108, "Member 'BFL_Utilities_C_GetAngleToVector::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");

// Function BFL_Utilities.BFL_Utilities_C.Play Sound with Check
// 0x0078 (0x0078 - 0x0000)
struct BFL_Utilities_C_Play_Sound_with_Check final
{
public:
	class UFMODEvent*                             EventToPlay;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ComponentToAttach;                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	double                                        CheckDistance;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODAudioComponent*                    CallFunc_FMODPlayEventAttachedBullet_ReturnValue;  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_Play_Sound_with_Check) == 0x000008, "Wrong alignment on BFL_Utilities_C_Play_Sound_with_Check");
static_assert(sizeof(BFL_Utilities_C_Play_Sound_with_Check) == 0x000078, "Wrong size on BFL_Utilities_C_Play_Sound_with_Check");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, EventToPlay) == 0x000000, "Member 'BFL_Utilities_C_Play_Sound_with_Check::EventToPlay' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, ComponentToAttach) == 0x000008, "Member 'BFL_Utilities_C_Play_Sound_with_Check::ComponentToAttach' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CheckDistance) == 0x000010, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CheckDistance' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, __WorldContext) == 0x000018, "Member 'BFL_Utilities_C_Play_Sound_with_Check::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_IsServer_ReturnValue) == 0x000020, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_FMODPlayEventAttachedBullet_ReturnValue) == 0x000028, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_FMODPlayEventAttachedBullet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_GetPlayerPawn_ReturnValue) == 0x000048, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000050, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_Vector_Distance_ReturnValue) == 0x000068, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_Play_Sound_with_Check, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000070, "Member 'BFL_Utilities_C_Play_Sound_with_Check::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BFL_Utilities.BFL_Utilities_C.PlaySofSoundwithCheck
// 0x0068 (0x0068 - 0x0000)
struct BFL_Utilities_C_PlaySofSoundwithCheck final
{
public:
	TSoftObjectPtr<class UFMODEvent>              EventToPlay;                                       // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class USceneComponent*                        ComponentToAttach;                                 // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CheckDistance;                                     // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             K2Node_DynamicCast_AsFMODEvent;                    // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_PlaySofSoundwithCheck) == 0x000008, "Wrong alignment on BFL_Utilities_C_PlaySofSoundwithCheck");
static_assert(sizeof(BFL_Utilities_C_PlaySofSoundwithCheck) == 0x000068, "Wrong size on BFL_Utilities_C_PlaySofSoundwithCheck");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, EventToPlay) == 0x000000, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::EventToPlay' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, ComponentToAttach) == 0x000030, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::ComponentToAttach' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, CheckDistance) == 0x000038, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::CheckDistance' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, __WorldContext) == 0x000040, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000048, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, CallFunc_IsServer_ReturnValue) == 0x000050, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, K2Node_DynamicCast_AsFMODEvent) == 0x000058, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::K2Node_DynamicCast_AsFMODEvent' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_PlaySofSoundwithCheck, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'BFL_Utilities_C_PlaySofSoundwithCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BFL_Utilities.BFL_Utilities_C.GetChanceIsLowerThan
// 0x0020 (0x0020 - 0x0000)
struct BFL_Utilities_C_GetChanceIsLowerThan final
{
public:
	int32                                         LowerValue;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BFL_Utilities_C_GetChanceIsLowerThan) == 0x000008, "Wrong alignment on BFL_Utilities_C_GetChanceIsLowerThan");
static_assert(sizeof(BFL_Utilities_C_GetChanceIsLowerThan) == 0x000020, "Wrong size on BFL_Utilities_C_GetChanceIsLowerThan");
static_assert(offsetof(BFL_Utilities_C_GetChanceIsLowerThan, LowerValue) == 0x000000, "Member 'BFL_Utilities_C_GetChanceIsLowerThan::LowerValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetChanceIsLowerThan, __WorldContext) == 0x000008, "Member 'BFL_Utilities_C_GetChanceIsLowerThan::__WorldContext' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetChanceIsLowerThan, ReturnValue) == 0x000010, "Member 'BFL_Utilities_C_GetChanceIsLowerThan::ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetChanceIsLowerThan, CallFunc_RandomInteger_ReturnValue) == 0x000014, "Member 'BFL_Utilities_C_GetChanceIsLowerThan::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BFL_Utilities_C_GetChanceIsLowerThan, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BFL_Utilities_C_GetChanceIsLowerThan::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

