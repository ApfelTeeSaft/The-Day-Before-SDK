#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Surv_FP

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_Surv_FP_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "StanceState_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_Surv_FP.ABP_Surv_FP_C
// 0x2D40 (0x3090 - 0x0350)
class UABP_Surv_FP_C final : public UAnimInstance
{
public:
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_Surv_FP::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0358(0x0038)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0390(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0398(0x0008)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace_1;             // 0x03A0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace_1;             // 0x03C0(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_2;                 // 0x03E0(0x0040)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_2;                          // 0x0420(0x00F0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0510(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0530(0x0020)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_3;                    // 0x0550(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_7;                     // 0x0658(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_6;                     // 0x0680(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_2;                  // 0x06A8(0x00E0)()
	struct FAnimNode_Constraint                   AnimGraphNode_Constraint;                          // 0x0788(0x0108)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x0890(0x0048)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone_1;                          // 0x08D8(0x00F0)()
	struct FAnimNode_CopyBone                     AnimGraphNode_CopyBone;                            // 0x09C8(0x00F0)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x0AB8(0x0128)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig_1;                        // 0x0BE0(0x0470)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_5;                     // 0x1050(0x0028)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x1078(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_5;                   // 0x10C0(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_2;                    // 0x1108(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_4;                     // 0x1210(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_3;                     // 0x1238(0x0028)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend_1;                  // 0x1260(0x00E0)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator_1;                 // 0x1340(0x0040)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x1380(0x0128)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x14A8(0x0128)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_4;                   // 0x15D0(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose_1;                    // 0x1618(0x0108)()
	struct FAnimNode_ControlRig                   AnimGraphNode_ControlRig;                          // 0x1720(0x0470)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x1B90(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_2;                     // 0x1C98(0x0028)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x1CC0(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_3;                   // 0x1CE8(0x0048)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_LinkedInputPose;                     // 0x1D30(0x00C8)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x1DF8(0x00E0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1ED8(0x0048)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x1F20(0x0028)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x1F48(0x0048)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x1F90(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x1FB8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x1FE0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x2008(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x2030(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x2058(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x2080(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x20A8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x20D0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x20F8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x2120(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x2148(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x2170(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x2198(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_10;                   // 0x21C0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x2208(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_9;                    // 0x2228(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x2270(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_8;                    // 0x2290(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x22D8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x22F8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x2340(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x2360(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x23A0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x23C0(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x2408(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x2428(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x2470(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x2490(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x24D8(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x24F8(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x2540(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x2560(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x25A8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x25F0(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x2638(0x0048)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x2680(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x26C8(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x26E8(0x00C8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x27B0(0x0048)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x27F8(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x2840(0x0128)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x2968(0x0020)()
	bool                                          K2Node_PropertyAccess_9;                           // 0x2988(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_8;                           // 0x2989(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_7;                           // 0x298A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_6;                           // 0x298B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_5;                           // 0x298C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_4;                           // 0x298D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_3;                           // 0x298E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_2;                           // 0x298F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess_1;                           // 0x2990(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2991[0xF];                                     // 0x2991(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             __CustomProperty_ChestOffsetTransform_606E6693447094AF32319096C90D4C52; // 0x29A0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             __CustomProperty_OffsetHandRTransform_606E6693447094AF32319096C90D4C52; // 0x2A00(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_PropertyAccess;                             // 0x2A60(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A61[0x7];                                     // 0x2A61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        __CustomProperty_ElbowLoc_Z_56417E56412C15BF4691F8961D057CA8; // 0x2A68(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_ElbowLoc_Y_56417E56412C15BF4691F8961D057CA8; // 0x2A70(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_ElbowLoc_X_56417E56412C15BF4691F8961D057CA8; // 0x2A78(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_ElbowLoc_56417E56412C15BF4691F8961D057CA8; // 0x2A80(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        __CustomProperty_Tilt_56417E56412C15BF4691F8961D057CA8; // 0x2A98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               __CustomProperty_InclineRotation_56417E56412C15BF4691F8961D057CA8; // 0x2AA0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        __CustomProperty_RightHandAlpha_56417E56412C15BF4691F8961D057CA8; // 0x2AB8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                __CustomProperty_RollPivotLocation_56417E56412C15BF4691F8961D057CA8; // 0x2AC0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               __CustomProperty_RollValue_56417E56412C15BF4691F8961D057CA8; // 0x2AD8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             __CustomProperty_OffsetHandRTransform_56417E56412C15BF4691F8961D057CA8; // 0x2AF0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FireTrigger;                                       // 0x2B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B51[0x7];                                     // 0x2B51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FireMontage;                                       // 0x2B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      IdleSequnce;                                       // 0x2B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x2B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x2B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      EquipSequence;                                     // 0x2B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      UnequipSequence;                                   // 0x2B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B88[0x8];                                     // 0x2B88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Offset_Hand_RTransform;                            // 0x2B90(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon_Mesh;                                       // 0x2BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Delta_Time_X;                                      // 0x2BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OffsetHandRLocation;                               // 0x2C00(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OffsetHandRRotation;                               // 0x2C18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EquipTrigger;                                      // 0x2C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C31[0x7];                                     // 0x2C31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  PawnRef;                                           // 0x2C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleIdleRot;                                   // 0x2C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMoveRotF;                                  // 0x2C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        StepTime;                                          // 0x2C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpStepTime;                                    // 0x2C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BobcycleTimer;                                     // 0x2C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        BobcyclePosArray;                                  // 0x2C68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveVector*                           BobcycleIdlePos;                                   // 0x2C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        IdleCycleTime;                                     // 0x2C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InterpIdleTime;                                    // 0x2C88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BobcycleIdleTimer;                                 // 0x2C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        BobcycleIdlePosArray;                              // 0x2C98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        WeaponIdleAnchor;                                  // 0x2CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponRotationMultiplier;                          // 0x2CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BobcycleMultiplier;                                // 0x2CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDirection;                                     // 0x2CC0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDirLast;                                       // 0x2CD8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FireDelay;                                         // 0x2CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CF1[0x3];                                     // 0x2CF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Weapon_Name;                                       // 0x2CF4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStanceState                                  Stance;                                            // 0x2CFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              Weapon_Type;                                       // 0x2CFD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CFE[0x2];                                     // 0x2CFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        BobcycleRotArray;                                  // 0x2D00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        BobcycleIdleRotArray;                              // 0x2D10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsAim;                                             // 0x2D20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D21[0x7];                                     // 0x2D21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      CharRef;                                           // 0x2D28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        StopTimer;                                         // 0x2D30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BobcycleMoveMultiplier;                            // 0x2D38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          MoveSequence;                                      // 0x2D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x2D48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ScopeInPosition;                                   // 0x2D49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4A[0x6];                                     // 0x2D4A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ScopeBase_C*                        ScopeRef;                                          // 0x2D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MoveOffset;                                        // 0x2D58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5C[0x4];                                     // 0x2D5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RecoilRotValue;                                    // 0x2D60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        We;                                                // 0x2D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          WallOffsetUp;                                      // 0x2D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          Wall_Offset_Down;                                  // 0x2D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Blocking_Hit;                                      // 0x2D90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D91[0x7];                                     // 0x2D91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Weapon_Angle_to_Wall;                              // 0x2D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Weapon_C*                           Weapon_Reference;                                  // 0x2DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CrouchPitch;                                       // 0x2DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PivotRotationOffset;                               // 0x2DB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Roll_Pivot_Location;                               // 0x2DC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Roll_MoveOffset;                                   // 0x2DE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FreezeWeaponBone;                                  // 0x2DF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DFC[0x4];                                     // 0x2DFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           BobcycleMoveRotR;                                  // 0x2E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMoveRotL;                                  // 0x2E08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMoveRotB;                                  // 0x2E10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMovePosF;                                  // 0x2E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMovePosR;                                  // 0x2E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMovePosL;                                  // 0x2E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleMovePosB;                                  // 0x2E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasScope;                                          // 0x2E38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E39[0x7];                                     // 0x2E39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           BobcycleIdlePos_Scope;                             // 0x2E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleIdleRot_Scope;                             // 0x2E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Cocking;                                           // 0x2E50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Aim;                                               // 0x2E51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E52[0x2];                                     // 0x2E52(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PivotAlpha;                                        // 0x2E54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TacticalGripActive_;                               // 0x2E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E59[0x7];                                     // 0x2E59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          TacticalGripFPAnim;                                // 0x2E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseAttachment_C*                   Tactical_Grip;                                     // 0x2E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TacticalGripLoc;                                   // 0x2E70(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFinishCompas;                                     // 0x2ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2ED1[0x7];                                     // 0x2ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CompassFP_C*                        CompasRef;                                         // 0x2ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_CompassFP_C*                        NewVar_0;                                          // 0x2EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        YawDelta;                                          // 0x2EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastPitch;                                         // 0x2EF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PitchDelta;                                        // 0x2EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsServer;                                          // 0x2F00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F01[0x7];                                     // 0x2F01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EquipRotValue;                                     // 0x2F08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AimPunchRot;                                       // 0x2F20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FinishGPS;                                         // 0x2F38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F39[0x7];                                     // 0x2F39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_GPS_FP_C*                           GPSRef;                                            // 0x2F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FingerIdleSequnce;                                 // 0x2F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FingerAnimValid_;                                  // 0x2F50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F51[0x7];                                     // 0x2F51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FingerAnimTimer;                                   // 0x2F58(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Incline_Rotation;                                  // 0x2F60(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                CrouchingWepOffset;                                // 0x2F78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleArmBrakeRot;                               // 0x2F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcycleArmBrakePos;                               // 0x2F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CrouchOffsetValue;                                 // 0x2FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeaponPlaceholder_C*                   Active_Weapon_Placeholder;                         // 0x2FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ArmBrakeMultiplier;                                // 0x2FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcyclePistolIdleRot;                             // 0x2FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           BobcyclePistolIdlePos;                             // 0x2FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Tilt;                                              // 0x2FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BobcyclePistolMultiplier;                          // 0x2FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation_Limit;                                    // 0x2FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BobcycleRot;                                       // 0x2FE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        BobcycleIdleMultiplier;                            // 0x2FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WMLoc;                                             // 0x3000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WMRot;                                             // 0x3018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FTransform                             TacticalGripOffset;                                // 0x3030(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AimEvent(bool Param_Aim);
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* Param_AnimGraph);
	void AnimNotify_mossberg_chick_chick();
	void AnimNotify_OpenCompas();
	void AnimNotify_SpawnCompas();
	void AnimNotify_SpawnGPS();
	void AnimNotify_UnEquipAnim();
	void AnimNotify_UnEquipGPS();
	void AnimNotify_UnEquipNotify();
	void ArmBrakeChangeMultiplier(double Input);
	void BeginSpawn();
	void BlueprintInitializeAnimation();
	void BlueprintPostEvaluateAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BobcycleIdleMultiplierFPP(double BobcycleIdle);
	void CallAim();
	void CallFire();
	void CallReinitBobcycle();
	void ChangeStanceState(EStanceState Param_Stance);
	void CollectCurves();
	double CrouchOffset();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_BlendListByBool_B5F95C8C42604B563AE99E95194FD0F5();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_BlendListByBool_D83C4F74480A754A4DC143A3969E84E7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_LayeredBoneBlend_2E9BA0884057AED4E32FFAB13556E03A();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_ModifyBone_8249588F49AB5BC4409185BAC08AD170();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_ModifyBone_8255FF2A4DF39FB48A6F539C408FEF0F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_ModifyBone_914058A942A8618654D43BAF694BF083();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_TransitionResult_2A6D4A2B42CFE8557FAA68A1AEB6779D();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_TransitionResult_5D59965A4881C06FE130679024994451();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_TransitionResult_70C3305B45D0F13EAA71BFAAB56C62BA();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_Surv_FP_AnimGraphNode_TransitionResult_C6F425A643766FC4CEA3B2BD271F31B2();
	void ExecuteUbergraph_ABP_Surv_FP(int32 EntryPoint);
	void FingerAnimEvent();
	void FingerAnimMain();
	void GetBobcycleMultiplier(double* Param_BobcycleMultiplier);
	void GetFireMontage(class UAnimMontage** Montage);
	void GetIdleWeaponLoc(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void GetWallBlock(bool* WallBlock_);
	void GetYawPitch(double* Param_Yaw, double* Param_Pitch);
	void InitWeapon(class ABP_Weapon_C* Param_Weapon_Reference);
	void OpenBobcycleMoveGate();
	void ReinitBobcycleIdle();
	void ReinitBobcylce();
	void RemoveFPCompas();
	void RemoveFPGPS();
	void Set_Aim_Punch_Rotation(const struct FVector& Value);
	void SetAnims(class UAnimSequence* Idle, class UAnimSequence* Equip, class UAnimSequence* UnEquip, class UAnimSequence* Move, class UAnimMontage* Fire, class UAnimMontage* FingerIdle, class UAnimSequence* WallOffset_Up, class UAnimSequence* WallOffset_Down, class USkeletalMeshComponent* WeaponMesh, EBPE_Weapon_Type WeaponType, class FName WeaponName, EStanceState Param_Stance);
	void SetBobcycleMultiplier(double Value);
	void SetCrouchingWepOffset(const struct FVector& Value);
	void SetCrouchPitch(double Param_Pitch);
	void SetPitchYaw(double Param_Pitch, double Param_Yaw, bool ApplyCustomMultiplier);
	void SetRecoilRotation(const struct FVector& Value);
	void SetRotationSettings(double RotationMultiplier, double RotationAnchor, double RotationLimit);
	void SetScopeInPos(bool ScopeInPos);
	void TurnRegulatorDown();
	void TurnRegulatorUp();
	void UnequipEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_Surv_FP_C">();
	}
	static class UABP_Surv_FP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_Surv_FP_C>();
	}
};
static_assert(alignof(UABP_Surv_FP_C) == 0x000010, "Wrong alignment on UABP_Surv_FP_C");
static_assert(sizeof(UABP_Surv_FP_C) == 0x003090, "Wrong size on UABP_Surv_FP_C");
static_assert(offsetof(UABP_Surv_FP_C, UberGraphFrame) == 0x000350, "Member 'UABP_Surv_FP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __AnimBlueprintMutables) == 0x000358, "Member 'UABP_Surv_FP_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimBlueprintExtension_PropertyAccess) == 0x000390, "Member 'UABP_Surv_FP_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimBlueprintExtension_Base) == 0x000398, "Member 'UABP_Surv_FP_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_LocalToComponentSpace_1) == 0x0003A0, "Member 'UABP_Surv_FP_C::AnimGraphNode_LocalToComponentSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ComponentToLocalSpace_1) == 0x0003C0, "Member 'UABP_Surv_FP_C::AnimGraphNode_ComponentToLocalSpace_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequenceEvaluator_2) == 0x0003E0, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequenceEvaluator_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_CopyBone_2) == 0x000420, "Member 'UABP_Surv_FP_C::AnimGraphNode_CopyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_LocalToComponentSpace) == 0x000510, "Member 'UABP_Surv_FP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ComponentToLocalSpace) == 0x000530, "Member 'UABP_Surv_FP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SaveCachedPose_3) == 0x000550, "Member 'UABP_Surv_FP_C::AnimGraphNode_SaveCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_7) == 0x000658, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_7' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_6) == 0x000680, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_6' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_LayeredBoneBlend_2) == 0x0006A8, "Member 'UABP_Surv_FP_C::AnimGraphNode_LayeredBoneBlend_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Constraint) == 0x000788, "Member 'UABP_Surv_FP_C::AnimGraphNode_Constraint' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Slot_4) == 0x000890, "Member 'UABP_Surv_FP_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_CopyBone_1) == 0x0008D8, "Member 'UABP_Surv_FP_C::AnimGraphNode_CopyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_CopyBone) == 0x0009C8, "Member 'UABP_Surv_FP_C::AnimGraphNode_CopyBone' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ModifyBone_3) == 0x000AB8, "Member 'UABP_Surv_FP_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ControlRig_1) == 0x000BE0, "Member 'UABP_Surv_FP_C::AnimGraphNode_ControlRig_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_5) == 0x001050, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Slot_3) == 0x001078, "Member 'UABP_Surv_FP_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_BlendListByBool_5) == 0x0010C0, "Member 'UABP_Surv_FP_C::AnimGraphNode_BlendListByBool_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SaveCachedPose_2) == 0x001108, "Member 'UABP_Surv_FP_C::AnimGraphNode_SaveCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_4) == 0x001210, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_3) == 0x001238, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_LayeredBoneBlend_1) == 0x001260, "Member 'UABP_Surv_FP_C::AnimGraphNode_LayeredBoneBlend_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequenceEvaluator_1) == 0x001340, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequenceEvaluator_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ModifyBone_2) == 0x001380, "Member 'UABP_Surv_FP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ModifyBone_1) == 0x0014A8, "Member 'UABP_Surv_FP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_BlendListByBool_4) == 0x0015D0, "Member 'UABP_Surv_FP_C::AnimGraphNode_BlendListByBool_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SaveCachedPose_1) == 0x001618, "Member 'UABP_Surv_FP_C::AnimGraphNode_SaveCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ControlRig) == 0x001720, "Member 'UABP_Surv_FP_C::AnimGraphNode_ControlRig' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SaveCachedPose) == 0x001B90, "Member 'UABP_Surv_FP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_2) == 0x001C98, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose_1) == 0x001CC0, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_BlendListByBool_3) == 0x001CE8, "Member 'UABP_Surv_FP_C::AnimGraphNode_BlendListByBool_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_LinkedInputPose) == 0x001D30, "Member 'UABP_Surv_FP_C::AnimGraphNode_LinkedInputPose' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_LayeredBoneBlend) == 0x001DF8, "Member 'UABP_Surv_FP_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Slot_2) == 0x001ED8, "Member 'UABP_Surv_FP_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_UseCachedPose) == 0x001F20, "Member 'UABP_Surv_FP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_BlendListByBool_2) == 0x001F48, "Member 'UABP_Surv_FP_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_13) == 0x001F90, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_12) == 0x001FB8, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_11) == 0x001FE0, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_10) == 0x002008, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_9) == 0x002030, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_8) == 0x002058, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_7) == 0x002080, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_6) == 0x0020A8, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_5) == 0x0020D0, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_4) == 0x0020F8, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_3) == 0x002120, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_2) == 0x002148, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult_1) == 0x002170, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_TransitionResult) == 0x002198, "Member 'UABP_Surv_FP_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_10) == 0x0021C0, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_10' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_9) == 0x002208, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_9) == 0x002228, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_9' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_8) == 0x002270, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_8) == 0x002290, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_7) == 0x0022D8, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_7) == 0x0022F8, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_6) == 0x002340, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequenceEvaluator) == 0x002360, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_5) == 0x0023A0, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_6) == 0x0023C0, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_4) == 0x002408, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_5) == 0x002428, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_3) == 0x002470, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_4) == 0x002490, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_2) == 0x0024D8, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_3) == 0x0024F8, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult_1) == 0x002540, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_2) == 0x002560, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer_1) == 0x0025A8, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_BlendListByBool_1) == 0x0025F0, "Member 'UABP_Surv_FP_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_BlendListByBool) == 0x002638, "Member 'UABP_Surv_FP_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_SequencePlayer) == 0x002680, "Member 'UABP_Surv_FP_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateResult) == 0x0026C8, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_StateMachine) == 0x0026E8, "Member 'UABP_Surv_FP_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Slot_1) == 0x0027B0, "Member 'UABP_Surv_FP_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Slot) == 0x0027F8, "Member 'UABP_Surv_FP_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_ModifyBone) == 0x002840, "Member 'UABP_Surv_FP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AnimGraphNode_Root) == 0x002968, "Member 'UABP_Surv_FP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_9) == 0x002988, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_9' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_8) == 0x002989, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_7) == 0x00298A, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_7' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_6) == 0x00298B, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_6' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_5) == 0x00298C, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_5' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_4) == 0x00298D, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_4' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_3) == 0x00298E, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_3' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_2) == 0x00298F, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_2' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess_1) == 0x002990, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess_1' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_ChestOffsetTransform_606E6693447094AF32319096C90D4C52) == 0x0029A0, "Member 'UABP_Surv_FP_C::__CustomProperty_ChestOffsetTransform_606E6693447094AF32319096C90D4C52' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_OffsetHandRTransform_606E6693447094AF32319096C90D4C52) == 0x002A00, "Member 'UABP_Surv_FP_C::__CustomProperty_OffsetHandRTransform_606E6693447094AF32319096C90D4C52' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, K2Node_PropertyAccess) == 0x002A60, "Member 'UABP_Surv_FP_C::K2Node_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_ElbowLoc_Z_56417E56412C15BF4691F8961D057CA8) == 0x002A68, "Member 'UABP_Surv_FP_C::__CustomProperty_ElbowLoc_Z_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_ElbowLoc_Y_56417E56412C15BF4691F8961D057CA8) == 0x002A70, "Member 'UABP_Surv_FP_C::__CustomProperty_ElbowLoc_Y_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_ElbowLoc_X_56417E56412C15BF4691F8961D057CA8) == 0x002A78, "Member 'UABP_Surv_FP_C::__CustomProperty_ElbowLoc_X_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_ElbowLoc_56417E56412C15BF4691F8961D057CA8) == 0x002A80, "Member 'UABP_Surv_FP_C::__CustomProperty_ElbowLoc_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_Tilt_56417E56412C15BF4691F8961D057CA8) == 0x002A98, "Member 'UABP_Surv_FP_C::__CustomProperty_Tilt_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_InclineRotation_56417E56412C15BF4691F8961D057CA8) == 0x002AA0, "Member 'UABP_Surv_FP_C::__CustomProperty_InclineRotation_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_RightHandAlpha_56417E56412C15BF4691F8961D057CA8) == 0x002AB8, "Member 'UABP_Surv_FP_C::__CustomProperty_RightHandAlpha_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_RollPivotLocation_56417E56412C15BF4691F8961D057CA8) == 0x002AC0, "Member 'UABP_Surv_FP_C::__CustomProperty_RollPivotLocation_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_RollValue_56417E56412C15BF4691F8961D057CA8) == 0x002AD8, "Member 'UABP_Surv_FP_C::__CustomProperty_RollValue_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, __CustomProperty_OffsetHandRTransform_56417E56412C15BF4691F8961D057CA8) == 0x002AF0, "Member 'UABP_Surv_FP_C::__CustomProperty_OffsetHandRTransform_56417E56412C15BF4691F8961D057CA8' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FireTrigger) == 0x002B50, "Member 'UABP_Surv_FP_C::FireTrigger' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FireMontage) == 0x002B58, "Member 'UABP_Surv_FP_C::FireMontage' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, IdleSequnce) == 0x002B60, "Member 'UABP_Surv_FP_C::IdleSequnce' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Pitch) == 0x002B68, "Member 'UABP_Surv_FP_C::Pitch' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Yaw) == 0x002B70, "Member 'UABP_Surv_FP_C::Yaw' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, EquipSequence) == 0x002B78, "Member 'UABP_Surv_FP_C::EquipSequence' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, UnequipSequence) == 0x002B80, "Member 'UABP_Surv_FP_C::UnequipSequence' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Offset_Hand_RTransform) == 0x002B90, "Member 'UABP_Surv_FP_C::Offset_Hand_RTransform' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Weapon_Mesh) == 0x002BF0, "Member 'UABP_Surv_FP_C::Weapon_Mesh' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Delta_Time_X) == 0x002BF8, "Member 'UABP_Surv_FP_C::Delta_Time_X' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, OffsetHandRLocation) == 0x002C00, "Member 'UABP_Surv_FP_C::OffsetHandRLocation' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, OffsetHandRRotation) == 0x002C18, "Member 'UABP_Surv_FP_C::OffsetHandRRotation' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, EquipTrigger) == 0x002C30, "Member 'UABP_Surv_FP_C::EquipTrigger' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, PawnRef) == 0x002C38, "Member 'UABP_Surv_FP_C::PawnRef' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdleRot) == 0x002C40, "Member 'UABP_Surv_FP_C::BobcycleIdleRot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMoveRotF) == 0x002C48, "Member 'UABP_Surv_FP_C::BobcycleMoveRotF' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, StepTime) == 0x002C50, "Member 'UABP_Surv_FP_C::StepTime' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, InterpStepTime) == 0x002C58, "Member 'UABP_Surv_FP_C::InterpStepTime' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleTimer) == 0x002C60, "Member 'UABP_Surv_FP_C::BobcycleTimer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcyclePosArray) == 0x002C68, "Member 'UABP_Surv_FP_C::BobcyclePosArray' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdlePos) == 0x002C78, "Member 'UABP_Surv_FP_C::BobcycleIdlePos' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, IdleCycleTime) == 0x002C80, "Member 'UABP_Surv_FP_C::IdleCycleTime' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, InterpIdleTime) == 0x002C88, "Member 'UABP_Surv_FP_C::InterpIdleTime' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdleTimer) == 0x002C90, "Member 'UABP_Surv_FP_C::BobcycleIdleTimer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdlePosArray) == 0x002C98, "Member 'UABP_Surv_FP_C::BobcycleIdlePosArray' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, WeaponIdleAnchor) == 0x002CA8, "Member 'UABP_Surv_FP_C::WeaponIdleAnchor' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, WeaponRotationMultiplier) == 0x002CB0, "Member 'UABP_Surv_FP_C::WeaponRotationMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMultiplier) == 0x002CB8, "Member 'UABP_Surv_FP_C::BobcycleMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, MoveDirection) == 0x002CC0, "Member 'UABP_Surv_FP_C::MoveDirection' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, MoveDirLast) == 0x002CD8, "Member 'UABP_Surv_FP_C::MoveDirLast' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FireDelay) == 0x002CF0, "Member 'UABP_Surv_FP_C::FireDelay' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Weapon_Name) == 0x002CF4, "Member 'UABP_Surv_FP_C::Weapon_Name' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Stance) == 0x002CFC, "Member 'UABP_Surv_FP_C::Stance' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Weapon_Type) == 0x002CFD, "Member 'UABP_Surv_FP_C::Weapon_Type' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleRotArray) == 0x002D00, "Member 'UABP_Surv_FP_C::BobcycleRotArray' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdleRotArray) == 0x002D10, "Member 'UABP_Surv_FP_C::BobcycleIdleRotArray' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, IsAim) == 0x002D20, "Member 'UABP_Surv_FP_C::IsAim' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, CharRef) == 0x002D28, "Member 'UABP_Surv_FP_C::CharRef' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, StopTimer) == 0x002D30, "Member 'UABP_Surv_FP_C::StopTimer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMoveMultiplier) == 0x002D38, "Member 'UABP_Surv_FP_C::BobcycleMoveMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, MoveSequence) == 0x002D40, "Member 'UABP_Surv_FP_C::MoveSequence' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, IsMoving) == 0x002D48, "Member 'UABP_Surv_FP_C::IsMoving' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, ScopeInPosition) == 0x002D49, "Member 'UABP_Surv_FP_C::ScopeInPosition' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, ScopeRef) == 0x002D50, "Member 'UABP_Surv_FP_C::ScopeRef' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, MoveOffset) == 0x002D58, "Member 'UABP_Surv_FP_C::MoveOffset' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, RecoilRotValue) == 0x002D60, "Member 'UABP_Surv_FP_C::RecoilRotValue' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, We) == 0x002D78, "Member 'UABP_Surv_FP_C::We' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, WallOffsetUp) == 0x002D80, "Member 'UABP_Surv_FP_C::WallOffsetUp' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Wall_Offset_Down) == 0x002D88, "Member 'UABP_Surv_FP_C::Wall_Offset_Down' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Blocking_Hit) == 0x002D90, "Member 'UABP_Surv_FP_C::Blocking_Hit' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Weapon_Angle_to_Wall) == 0x002D98, "Member 'UABP_Surv_FP_C::Weapon_Angle_to_Wall' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Weapon_Reference) == 0x002DA0, "Member 'UABP_Surv_FP_C::Weapon_Reference' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, CrouchPitch) == 0x002DA8, "Member 'UABP_Surv_FP_C::CrouchPitch' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, PivotRotationOffset) == 0x002DB0, "Member 'UABP_Surv_FP_C::PivotRotationOffset' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Roll_Pivot_Location) == 0x002DC8, "Member 'UABP_Surv_FP_C::Roll_Pivot_Location' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Roll_MoveOffset) == 0x002DE0, "Member 'UABP_Surv_FP_C::Roll_MoveOffset' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FreezeWeaponBone) == 0x002DF8, "Member 'UABP_Surv_FP_C::FreezeWeaponBone' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMoveRotR) == 0x002E00, "Member 'UABP_Surv_FP_C::BobcycleMoveRotR' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMoveRotL) == 0x002E08, "Member 'UABP_Surv_FP_C::BobcycleMoveRotL' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMoveRotB) == 0x002E10, "Member 'UABP_Surv_FP_C::BobcycleMoveRotB' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMovePosF) == 0x002E18, "Member 'UABP_Surv_FP_C::BobcycleMovePosF' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMovePosR) == 0x002E20, "Member 'UABP_Surv_FP_C::BobcycleMovePosR' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMovePosL) == 0x002E28, "Member 'UABP_Surv_FP_C::BobcycleMovePosL' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleMovePosB) == 0x002E30, "Member 'UABP_Surv_FP_C::BobcycleMovePosB' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, HasScope) == 0x002E38, "Member 'UABP_Surv_FP_C::HasScope' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdlePos_Scope) == 0x002E40, "Member 'UABP_Surv_FP_C::BobcycleIdlePos_Scope' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdleRot_Scope) == 0x002E48, "Member 'UABP_Surv_FP_C::BobcycleIdleRot_Scope' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Cocking) == 0x002E50, "Member 'UABP_Surv_FP_C::Cocking' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Aim) == 0x002E51, "Member 'UABP_Surv_FP_C::Aim' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, PivotAlpha) == 0x002E54, "Member 'UABP_Surv_FP_C::PivotAlpha' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, TacticalGripActive_) == 0x002E58, "Member 'UABP_Surv_FP_C::TacticalGripActive_' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, TacticalGripFPAnim) == 0x002E60, "Member 'UABP_Surv_FP_C::TacticalGripFPAnim' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Tactical_Grip) == 0x002E68, "Member 'UABP_Surv_FP_C::Tactical_Grip' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, TacticalGripLoc) == 0x002E70, "Member 'UABP_Surv_FP_C::TacticalGripLoc' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, bFinishCompas) == 0x002ED0, "Member 'UABP_Surv_FP_C::bFinishCompas' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, CompasRef) == 0x002ED8, "Member 'UABP_Surv_FP_C::CompasRef' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, NewVar_0) == 0x002EE0, "Member 'UABP_Surv_FP_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, YawDelta) == 0x002EE8, "Member 'UABP_Surv_FP_C::YawDelta' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, LastPitch) == 0x002EF0, "Member 'UABP_Surv_FP_C::LastPitch' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, PitchDelta) == 0x002EF8, "Member 'UABP_Surv_FP_C::PitchDelta' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, IsServer) == 0x002F00, "Member 'UABP_Surv_FP_C::IsServer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, EquipRotValue) == 0x002F08, "Member 'UABP_Surv_FP_C::EquipRotValue' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, AimPunchRot) == 0x002F20, "Member 'UABP_Surv_FP_C::AimPunchRot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FinishGPS) == 0x002F38, "Member 'UABP_Surv_FP_C::FinishGPS' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, GPSRef) == 0x002F40, "Member 'UABP_Surv_FP_C::GPSRef' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FingerIdleSequnce) == 0x002F48, "Member 'UABP_Surv_FP_C::FingerIdleSequnce' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FingerAnimValid_) == 0x002F50, "Member 'UABP_Surv_FP_C::FingerAnimValid_' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, FingerAnimTimer) == 0x002F58, "Member 'UABP_Surv_FP_C::FingerAnimTimer' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Incline_Rotation) == 0x002F60, "Member 'UABP_Surv_FP_C::Incline_Rotation' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, CrouchingWepOffset) == 0x002F78, "Member 'UABP_Surv_FP_C::CrouchingWepOffset' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleArmBrakeRot) == 0x002F90, "Member 'UABP_Surv_FP_C::BobcycleArmBrakeRot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleArmBrakePos) == 0x002F98, "Member 'UABP_Surv_FP_C::BobcycleArmBrakePos' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, CrouchOffsetValue) == 0x002FA0, "Member 'UABP_Surv_FP_C::CrouchOffsetValue' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Active_Weapon_Placeholder) == 0x002FA8, "Member 'UABP_Surv_FP_C::Active_Weapon_Placeholder' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, ArmBrakeMultiplier) == 0x002FB0, "Member 'UABP_Surv_FP_C::ArmBrakeMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcyclePistolIdleRot) == 0x002FB8, "Member 'UABP_Surv_FP_C::BobcyclePistolIdleRot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcyclePistolIdlePos) == 0x002FC0, "Member 'UABP_Surv_FP_C::BobcyclePistolIdlePos' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Tilt) == 0x002FC8, "Member 'UABP_Surv_FP_C::Tilt' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcyclePistolMultiplier) == 0x002FD0, "Member 'UABP_Surv_FP_C::BobcyclePistolMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, Rotation_Limit) == 0x002FD8, "Member 'UABP_Surv_FP_C::Rotation_Limit' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleRot) == 0x002FE0, "Member 'UABP_Surv_FP_C::BobcycleRot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, BobcycleIdleMultiplier) == 0x002FF8, "Member 'UABP_Surv_FP_C::BobcycleIdleMultiplier' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, WMLoc) == 0x003000, "Member 'UABP_Surv_FP_C::WMLoc' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, WMRot) == 0x003018, "Member 'UABP_Surv_FP_C::WMRot' has a wrong offset!");
static_assert(offsetof(UABP_Surv_FP_C, TacticalGripOffset) == 0x003030, "Member 'UABP_Surv_FP_C::TacticalGripOffset' has a wrong offset!");

}

