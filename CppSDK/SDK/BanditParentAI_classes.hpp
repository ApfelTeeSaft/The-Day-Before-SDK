#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BanditParentAI

#include "Basic.hpp"

#include "BPE_Weapon_Type_structs.hpp"
#include "ClimbAsset_structs.hpp"
#include "Engine_structs.hpp"
#include "E_Bandit_MovementMode_structs.hpp"
#include "ClimBType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ComponentAndTransform_structs.hpp"
#include "ClimbParams_structs.hpp"
#include "ParentAI_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BanditParentAI.BanditParentAI_C
// 0x0830 (0x0F80 - 0x0750)
class ABanditParentAI_C : public AParentAI_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BanditParentAI_C;                   // 0x0748(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Helmet;                                            // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      ClimbCollision;                                    // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon;                                            // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentHair;                                // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentPants;                               // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWoundComponent_C*                      WoundComponentBody;                                // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Hair;                                              // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Backpack;                                          // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Pants;                                             // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Body;                                              // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ClimbTimeline_NewTrack_0_FE36250A4AE2B1C1EE5F388C73626A29; // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ClimbTimeline__Direction_FE36250A4AE2B1C1EE5F388C73626A29; // 0x07A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A5[0x3];                                      // 0x07A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ClimbTimeline;                                     // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ToRagdollTimeline_NewTrack_0_F017CD4C4C6D3838FAE394B361DCB2AD; // 0x07B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ToRagdollTimeline__Direction_F017CD4C4C6D3838FAE394B361DCB2AD; // 0x07B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B5[0x3];                                      // 0x07B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ToRagdollTimeline;                                 // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  HitMontagesIsPlaying_;                             // 0x07C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           HeadshotMontage;                                   // 0x07D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   DefaultMontage_s;                                  // 0x07D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   HitMontages;                                       // 0x07E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAnimMontage*                           MeleeLeftMontage;                                  // 0x07F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MeleeBackwardMontage;                              // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MeleeRightMontage;                                 // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   MeleeForwardMontages;                              // 0x0810(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_Bandit_MovementMode                         MovementMode_R;                                    // 0x0820(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_821[0x7];                                      // 0x0821(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Door_C*                             Door_R;                                            // 0x0828(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DeathAnimMontage;                                  // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FenceDesctuct_;                                    // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockFenceDetect;                                  // 0x0839(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBPE_Weapon_Type                              WeaponType;                                        // 0x083A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climbing_;                                         // 0x083B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_83C[0x4];                                      // 0x083C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitialTraceImpactPoint;                           // 0x0840(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialTraceNormal;                                // 0x0858(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClimbIn;                                           // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_871[0x7];                                      // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DownTraceLocation;                                 // 0x0878(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TargetTransform;                                   // 0x0890(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EClimbType                                    ClimbType;                                         // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F1[0x7];                                      // 0x08F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MantleHeight;                                      // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FClimbAsset                            ClimbAsset;                                        // 0x0908(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        ClimbHeight;                                       // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A08[0x8];                                      // 0x0A08(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentAndTransform                 ClimbLedgeLS;                                      // 0x0A10(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             ClimbActualStartOffset;                            // 0x0AD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbTarget;                                       // 0x0B30(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FClimbParams                           ClimbParams;                                       // 0x0B90(0x00A8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C38[0x8];                                      // 0x0C38(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ClimbAnimatedStartOffset;                          // 0x0C40(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbStartTransform;                               // 0x0CA0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             OffsetToHandL;                                     // 0x0D00(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PositionAlpha;                                     // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        XYCorrectionAlpha;                                 // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZCorrectionAlpha;                                  // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendIn;                                           // 0x0D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0D80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D98[0x8];                                      // 0x0D98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LerpedTarget;                                      // 0x0DA0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           BodyMesh_RN;                                       // 0x0E00(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           PantsMesh_RN;                                      // 0x0E30(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           BackpackMesh_RN;                                   // 0x0E60(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	TSoftObjectPtr<class USkeletalMesh>           HairMesh_RN;                                       // 0x0E90(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	bool                                          TakedDamage;                                       // 0x0EC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC1[0x7];                                      // 0x0EC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BodyStiffnesTimer;                                 // 0x0EC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NavFilChanged;                                     // 0x0ED0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED1[0x7];                                      // 0x0ED1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ObstacleWidth;                                     // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReloading_R;                                     // 0x0EE0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climbing__forShoot_;                               // 0x0EE1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DontClimb_R;                                       // 0x0EE2(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE3[0x5];                                      // 0x0EE3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          HelmetMesh;                                        // 0x0EE8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSpawned_;                                        // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF1[0x7];                                      // 0x0EF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           HairRowNames;                                      // 0x0EF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           BodyRowNames;                                      // 0x0F08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PantsRowNames;                                     // 0x0F18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           BackpackRowNames;                                  // 0x0F28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   HairRowName;                                       // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BodyRowName;                                       // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PantsRowName;                                      // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BackPackRowName;                                   // 0x0F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         AllSkeletalMeshes;                                 // 0x0F58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                DeathLocation;                                     // 0x0F68(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BanditDeath(class AController* InstigatedBy, double HitAngle, const struct FVector& HitLocation, class FName BoneName);
	void ClimbCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcAccelDecel(bool Default_, double Accel, double Decel);
	void ClimbCheck(bool* Vault);
	void ClimbCheck_new_(bool* Vault);
	void ClimbStart_new_(double Param_ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType Param_ClimbType, bool In, double Width, const struct FTransform& Param_ClimbStartTransform);
	void ClimbStart_MULTI(double Param_ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType Param_ClimbType, bool In, double Width, const struct FTransform& Param_ClimbStartTransform);
	void ClimbStart_SERV(double Param_ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType Param_ClimbType, bool In, double Width, const struct FTransform& Param_ClimbStartTransform);
	void ClimbTimeline__FinishedFunc();
	void ClimbTimeline__UpdateFunc();
	void ClimbUpdate_new_(double Param_BlendIn, bool* Break);
	void DeathBody_Multi(double HitAngle, const struct FVector& HitLocation, class FName BoneName);
	void DeathTR();
	void DefaultMontages(double HitAngle, int32 RandomInteger);
	void ExecuteUbergraph_BanditParentAI(int32 EntryPoint);
	void FakeShoot();
	void Fire();
	void HeadshotMontages(double HitAngle, int32 RandomInteger);
	void HitMontage_MULT(double HitAngle, double HitDistance, class FName BoneName, const struct FVector& HitLocation, class AActor* DamageCauser, bool RandomBoolWithWeight, int32 RandomInteger0Minus4, int32 RandomInteger0Minus1);
	void HitMontageInterrupt();
	void InitRandomMeshesNames();
	void IsPlayingHitMontage_(bool* IsPlaying_);
	void MeleeMontages(double HitAngle, int32 RandomInteger);
	void OnBlendOut_02C308D94044E0C7094489B1C85EC366(class FName NotifyName);
	void OnBlendOut_38E7BEEC429D74F5870BEA87AD8EA75F(class FName NotifyName);
	void OnBlendOut_4F8291294381750E70EF2A9FF5FEDE5B(class FName NotifyName);
	void OnBlendOut_6E43BD8641E9B2DCDC0E469CF46165D2(class FName NotifyName);
	void OnBlendOut_820209FA444B29B4A01F32A551AC66C9(class FName NotifyName);
	void OnBlendOut_8A0A66BC49A01F7BE2AE70BE8005A202(class FName NotifyName);
	void OnBlendOut_A6FD48404CC974EBA95EC9B525B77C66(class FName NotifyName);
	void OnBlendOut_AFE0936241AFFA0939F127B0F04F3D25(class FName NotifyName);
	void OnBlendOut_D720C85E46178DF2E7D374B61569783E(class FName NotifyName);
	void OnBlendOut_E4169A504B86167E59F052BA833127B8(class FName NotifyName);
	void OnCompleted_02C308D94044E0C7094489B1C85EC366(class FName NotifyName);
	void OnCompleted_38E7BEEC429D74F5870BEA87AD8EA75F(class FName NotifyName);
	void OnCompleted_4F8291294381750E70EF2A9FF5FEDE5B(class FName NotifyName);
	void OnCompleted_6E43BD8641E9B2DCDC0E469CF46165D2(class FName NotifyName);
	void OnCompleted_820209FA444B29B4A01F32A551AC66C9(class FName NotifyName);
	void OnCompleted_8A0A66BC49A01F7BE2AE70BE8005A202(class FName NotifyName);
	void OnCompleted_A6FD48404CC974EBA95EC9B525B77C66(class FName NotifyName);
	void OnCompleted_AFE0936241AFFA0939F127B0F04F3D25(class FName NotifyName);
	void OnCompleted_D720C85E46178DF2E7D374B61569783E(class FName NotifyName);
	void OnCompleted_E4169A504B86167E59F052BA833127B8(class FName NotifyName);
	void OnInterrupted_02C308D94044E0C7094489B1C85EC366(class FName NotifyName);
	void OnInterrupted_38E7BEEC429D74F5870BEA87AD8EA75F(class FName NotifyName);
	void OnInterrupted_4F8291294381750E70EF2A9FF5FEDE5B(class FName NotifyName);
	void OnInterrupted_6E43BD8641E9B2DCDC0E469CF46165D2(class FName NotifyName);
	void OnInterrupted_820209FA444B29B4A01F32A551AC66C9(class FName NotifyName);
	void OnInterrupted_8A0A66BC49A01F7BE2AE70BE8005A202(class FName NotifyName);
	void OnInterrupted_A6FD48404CC974EBA95EC9B525B77C66(class FName NotifyName);
	void OnInterrupted_AFE0936241AFFA0939F127B0F04F3D25(class FName NotifyName);
	void OnInterrupted_D720C85E46178DF2E7D374B61569783E(class FName NotifyName);
	void OnInterrupted_E4169A504B86167E59F052BA833127B8(class FName NotifyName);
	void OnNotifyBegin_02C308D94044E0C7094489B1C85EC366(class FName NotifyName);
	void OnNotifyBegin_38E7BEEC429D74F5870BEA87AD8EA75F(class FName NotifyName);
	void OnNotifyBegin_4F8291294381750E70EF2A9FF5FEDE5B(class FName NotifyName);
	void OnNotifyBegin_6E43BD8641E9B2DCDC0E469CF46165D2(class FName NotifyName);
	void OnNotifyBegin_820209FA444B29B4A01F32A551AC66C9(class FName NotifyName);
	void OnNotifyBegin_8A0A66BC49A01F7BE2AE70BE8005A202(class FName NotifyName);
	void OnNotifyBegin_A6FD48404CC974EBA95EC9B525B77C66(class FName NotifyName);
	void OnNotifyBegin_AFE0936241AFFA0939F127B0F04F3D25(class FName NotifyName);
	void OnNotifyBegin_D720C85E46178DF2E7D374B61569783E(class FName NotifyName);
	void OnNotifyBegin_E4169A504B86167E59F052BA833127B8(class FName NotifyName);
	void OnNotifyEnd_02C308D94044E0C7094489B1C85EC366(class FName NotifyName);
	void OnNotifyEnd_38E7BEEC429D74F5870BEA87AD8EA75F(class FName NotifyName);
	void OnNotifyEnd_4F8291294381750E70EF2A9FF5FEDE5B(class FName NotifyName);
	void OnNotifyEnd_6E43BD8641E9B2DCDC0E469CF46165D2(class FName NotifyName);
	void OnNotifyEnd_820209FA444B29B4A01F32A551AC66C9(class FName NotifyName);
	void OnNotifyEnd_8A0A66BC49A01F7BE2AE70BE8005A202(class FName NotifyName);
	void OnNotifyEnd_A6FD48404CC974EBA95EC9B525B77C66(class FName NotifyName);
	void OnNotifyEnd_AFE0936241AFFA0939F127B0F04F3D25(class FName NotifyName);
	void OnNotifyEnd_D720C85E46178DF2E7D374B61569783E(class FName NotifyName);
	void OnNotifyEnd_E4169A504B86167E59F052BA833127B8(class FName NotifyName);
	void OnRep_BackpackMesh_RN();
	void OnRep_BodyMesh_RN();
	void OnRep_HairMesh_RN();
	void OnRep_HelmetMesh();
	void OnRep_PantsMesh_RN();
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void RegenerateHealth_MULTI();
	void SetDeathAnim_MULTI();
	void SetMesh();
	void SpawnLootPoint();
	void TakeClothOff(class FName Param_Name);
	void Timer_BodyStiffness();
	void ToRagdollTimeline__FinishedFunc();
	void ToRagdollTimeline__UpdateFunc();
	void UserConstructionScript();
	void InitWoundComponent();
	void IsBandit_(bool* Param_IsBandit_);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BanditParentAI_C">();
	}
	static class ABanditParentAI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABanditParentAI_C>();
	}
};
static_assert(alignof(ABanditParentAI_C) == 0x000010, "Wrong alignment on ABanditParentAI_C");
static_assert(sizeof(ABanditParentAI_C) == 0x000F80, "Wrong size on ABanditParentAI_C");
static_assert(offsetof(ABanditParentAI_C, UberGraphFrame_BanditParentAI_C) == 0x000748, "Member 'ABanditParentAI_C::UberGraphFrame_BanditParentAI_C' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Helmet) == 0x000750, "Member 'ABanditParentAI_C::Helmet' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbCollision) == 0x000758, "Member 'ABanditParentAI_C::ClimbCollision' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Weapon) == 0x000760, "Member 'ABanditParentAI_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, WoundComponentHair) == 0x000768, "Member 'ABanditParentAI_C::WoundComponentHair' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, WoundComponentPants) == 0x000770, "Member 'ABanditParentAI_C::WoundComponentPants' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, WoundComponentBody) == 0x000778, "Member 'ABanditParentAI_C::WoundComponentBody' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Hair) == 0x000780, "Member 'ABanditParentAI_C::Hair' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Backpack) == 0x000788, "Member 'ABanditParentAI_C::Backpack' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Pants) == 0x000790, "Member 'ABanditParentAI_C::Pants' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Body) == 0x000798, "Member 'ABanditParentAI_C::Body' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbTimeline_NewTrack_0_FE36250A4AE2B1C1EE5F388C73626A29) == 0x0007A0, "Member 'ABanditParentAI_C::ClimbTimeline_NewTrack_0_FE36250A4AE2B1C1EE5F388C73626A29' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbTimeline__Direction_FE36250A4AE2B1C1EE5F388C73626A29) == 0x0007A4, "Member 'ABanditParentAI_C::ClimbTimeline__Direction_FE36250A4AE2B1C1EE5F388C73626A29' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbTimeline) == 0x0007A8, "Member 'ABanditParentAI_C::ClimbTimeline' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ToRagdollTimeline_NewTrack_0_F017CD4C4C6D3838FAE394B361DCB2AD) == 0x0007B0, "Member 'ABanditParentAI_C::ToRagdollTimeline_NewTrack_0_F017CD4C4C6D3838FAE394B361DCB2AD' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ToRagdollTimeline__Direction_F017CD4C4C6D3838FAE394B361DCB2AD) == 0x0007B4, "Member 'ABanditParentAI_C::ToRagdollTimeline__Direction_F017CD4C4C6D3838FAE394B361DCB2AD' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ToRagdollTimeline) == 0x0007B8, "Member 'ABanditParentAI_C::ToRagdollTimeline' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HitMontagesIsPlaying_) == 0x0007C0, "Member 'ABanditParentAI_C::HitMontagesIsPlaying_' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HeadshotMontage) == 0x0007D0, "Member 'ABanditParentAI_C::HeadshotMontage' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, DefaultMontage_s) == 0x0007D8, "Member 'ABanditParentAI_C::DefaultMontage_s' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HitMontages) == 0x0007E8, "Member 'ABanditParentAI_C::HitMontages' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, MeleeLeftMontage) == 0x0007F8, "Member 'ABanditParentAI_C::MeleeLeftMontage' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, MeleeBackwardMontage) == 0x000800, "Member 'ABanditParentAI_C::MeleeBackwardMontage' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, MeleeRightMontage) == 0x000808, "Member 'ABanditParentAI_C::MeleeRightMontage' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, MeleeForwardMontages) == 0x000810, "Member 'ABanditParentAI_C::MeleeForwardMontages' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, MovementMode_R) == 0x000820, "Member 'ABanditParentAI_C::MovementMode_R' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Door_R) == 0x000828, "Member 'ABanditParentAI_C::Door_R' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, DeathAnimMontage) == 0x000830, "Member 'ABanditParentAI_C::DeathAnimMontage' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, FenceDesctuct_) == 0x000838, "Member 'ABanditParentAI_C::FenceDesctuct_' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BlockFenceDetect) == 0x000839, "Member 'ABanditParentAI_C::BlockFenceDetect' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, WeaponType) == 0x00083A, "Member 'ABanditParentAI_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Climbing_) == 0x00083B, "Member 'ABanditParentAI_C::Climbing_' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, InitialTraceImpactPoint) == 0x000840, "Member 'ABanditParentAI_C::InitialTraceImpactPoint' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, InitialTraceNormal) == 0x000858, "Member 'ABanditParentAI_C::InitialTraceNormal' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbIn) == 0x000870, "Member 'ABanditParentAI_C::ClimbIn' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, DownTraceLocation) == 0x000878, "Member 'ABanditParentAI_C::DownTraceLocation' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, TargetTransform) == 0x000890, "Member 'ABanditParentAI_C::TargetTransform' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbType) == 0x0008F0, "Member 'ABanditParentAI_C::ClimbType' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, MantleHeight) == 0x0008F8, "Member 'ABanditParentAI_C::MantleHeight' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HitComponent) == 0x000900, "Member 'ABanditParentAI_C::HitComponent' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbAsset) == 0x000908, "Member 'ABanditParentAI_C::ClimbAsset' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbHeight) == 0x000A00, "Member 'ABanditParentAI_C::ClimbHeight' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbLedgeLS) == 0x000A10, "Member 'ABanditParentAI_C::ClimbLedgeLS' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbActualStartOffset) == 0x000AD0, "Member 'ABanditParentAI_C::ClimbActualStartOffset' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbTarget) == 0x000B30, "Member 'ABanditParentAI_C::ClimbTarget' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbParams) == 0x000B90, "Member 'ABanditParentAI_C::ClimbParams' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbAnimatedStartOffset) == 0x000C40, "Member 'ABanditParentAI_C::ClimbAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ClimbStartTransform) == 0x000CA0, "Member 'ABanditParentAI_C::ClimbStartTransform' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, OffsetToHandL) == 0x000D00, "Member 'ABanditParentAI_C::OffsetToHandL' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, PositionAlpha) == 0x000D60, "Member 'ABanditParentAI_C::PositionAlpha' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, XYCorrectionAlpha) == 0x000D68, "Member 'ABanditParentAI_C::XYCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ZCorrectionAlpha) == 0x000D70, "Member 'ABanditParentAI_C::ZCorrectionAlpha' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BlendIn) == 0x000D78, "Member 'ABanditParentAI_C::BlendIn' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, TargetRotation) == 0x000D80, "Member 'ABanditParentAI_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, LerpedTarget) == 0x000DA0, "Member 'ABanditParentAI_C::LerpedTarget' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BodyMesh_RN) == 0x000E00, "Member 'ABanditParentAI_C::BodyMesh_RN' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, PantsMesh_RN) == 0x000E30, "Member 'ABanditParentAI_C::PantsMesh_RN' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BackpackMesh_RN) == 0x000E60, "Member 'ABanditParentAI_C::BackpackMesh_RN' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HairMesh_RN) == 0x000E90, "Member 'ABanditParentAI_C::HairMesh_RN' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, TakedDamage) == 0x000EC0, "Member 'ABanditParentAI_C::TakedDamage' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BodyStiffnesTimer) == 0x000EC8, "Member 'ABanditParentAI_C::BodyStiffnesTimer' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, NavFilChanged) == 0x000ED0, "Member 'ABanditParentAI_C::NavFilChanged' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, ObstacleWidth) == 0x000ED8, "Member 'ABanditParentAI_C::ObstacleWidth' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, IsReloading_R) == 0x000EE0, "Member 'ABanditParentAI_C::IsReloading_R' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, Climbing__forShoot_) == 0x000EE1, "Member 'ABanditParentAI_C::Climbing__forShoot_' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, DontClimb_R) == 0x000EE2, "Member 'ABanditParentAI_C::DontClimb_R' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HelmetMesh) == 0x000EE8, "Member 'ABanditParentAI_C::HelmetMesh' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, IsSpawned_) == 0x000EF0, "Member 'ABanditParentAI_C::IsSpawned_' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HairRowNames) == 0x000EF8, "Member 'ABanditParentAI_C::HairRowNames' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BodyRowNames) == 0x000F08, "Member 'ABanditParentAI_C::BodyRowNames' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, PantsRowNames) == 0x000F18, "Member 'ABanditParentAI_C::PantsRowNames' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BackpackRowNames) == 0x000F28, "Member 'ABanditParentAI_C::BackpackRowNames' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, HairRowName) == 0x000F38, "Member 'ABanditParentAI_C::HairRowName' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BodyRowName) == 0x000F40, "Member 'ABanditParentAI_C::BodyRowName' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, PantsRowName) == 0x000F48, "Member 'ABanditParentAI_C::PantsRowName' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, BackPackRowName) == 0x000F50, "Member 'ABanditParentAI_C::BackPackRowName' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, AllSkeletalMeshes) == 0x000F58, "Member 'ABanditParentAI_C::AllSkeletalMeshes' has a wrong offset!");
static_assert(offsetof(ABanditParentAI_C, DeathLocation) == 0x000F68, "Member 'ABanditParentAI_C::DeathLocation' has a wrong offset!");

}

