#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SurvPC

#include "Basic.hpp"

#include "BPI_SurvPC_classes.hpp"
#include "BPI_SurvPC_parameters.hpp"


namespace SDK
{

// Function BPI_SurvPC.BPI_SurvPC_C.AddSkillPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::AddSkillPoint(int32 Value, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "AddSkillPoint");

	Params::BPI_SurvPC_C_AddSkillPoint Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.AddXP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  XP                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void IBPI_SurvPC_C::AddXP(double XP, const class FText& Sender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "AddXP");

	Params::BPI_SurvPC_C_AddXP Parms{};

	Parms.XP = XP;
	Parms.Sender = std::move(Sender);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.BlockControlRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    SetBlock                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::BlockControlRotation(bool SetBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "BlockControlRotation");

	Params::BPI_SurvPC_C_BlockControlRotation Parms{};

	Parms.SetBlock = SetBlock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.CloseTabsWindow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::CloseTabsWindow(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "CloseTabsWindow");

	Params::BPI_SurvPC_C_CloseTabsWindow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.CreateContainerAtLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELootGeneratorType                      GenericLootType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDataTable*                       CustomAsset                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             ContainerName                                          (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector                          CustomOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UStaticMesh*                      CustomMesh                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  AttachTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::CreateContainerAtLocation(const struct FVector& Location, ELootGeneratorType GenericLootType, class UDataTable* CustomAsset, const class FText& ContainerName, const struct FVector& CustomOffset, class UStaticMesh* CustomMesh, class USceneComponent* AttachTo, class FName SocketName, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "CreateContainerAtLocation");

	Params::BPI_SurvPC_C_CreateContainerAtLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.GenericLootType = GenericLootType;
	Parms.CustomAsset = CustomAsset;
	Parms.ContainerName = std::move(ContainerName);
	Parms.CustomOffset = std::move(CustomOffset);
	Parms.CustomMesh = CustomMesh;
	Parms.AttachTo = AttachTo;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BPI_SurvPC.BPI_SurvPC_C.CreateContainerWithDrop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           ContainerName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          ContainerOffset                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FDropItemEntry>           DropItems                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::CreateContainerWithDrop(const struct FVector& Location, const class FString& ContainerName, const struct FVector& ContainerOffset, TArray<struct FDropItemEntry>& DropItems, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "CreateContainerWithDrop");

	Params::BPI_SurvPC_C_CreateContainerWithDrop Parms{};

	Parms.Location = std::move(Location);
	Parms.ContainerName = std::move(ContainerName);
	Parms.ContainerOffset = std::move(ContainerOffset);
	Parms.DropItems = std::move(DropItems);

	UObject::ProcessEvent(Func, &Parms);

	DropItems = std::move(Parms.DropItems);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BPI_SurvPC.BPI_SurvPC_C.DontHighlightActors
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_SurvPC_C::DontHighlightActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "DontHighlightActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetBeginner
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsBeginner                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetBeginner(bool* bIsBeginner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetBeginner");

	Params::BPI_SurvPC_C_GetBeginner Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bIsBeginner != nullptr)
		*bIsBeginner = Parms.bIsBeginner;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetBlackScreenWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_BlackScreen_C*                 Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetBlackScreenWidget(class UW_BlackScreen_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetBlackScreenWidget");

	Params::BPI_SurvPC_C_GetBlackScreenWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetCarGameWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_CarGame_C*                   CarGameWidget                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetCarGameWidget(class UWBP_CarGame_C** CarGameWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetCarGameWidget");

	Params::BPI_SurvPC_C_GetCarGameWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CarGameWidget != nullptr)
		*CarGameWidget = Parms.CarGameWidget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetCarUpgradeWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_CarUpgradeMenu_C*              Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetCarUpgradeWidget(class UW_CarUpgradeMenu_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetCarUpgradeWidget");

	Params::BPI_SurvPC_C_GetCarUpgradeWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetCraftWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_CraftWindow_C*                NewCraftWidget                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetCraftWidget(class UUI_CraftWindow_C** NewCraftWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetCraftWidget");

	Params::BPI_SurvPC_C_GetCraftWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewCraftWidget != nullptr)
		*NewCraftWidget = Parms.NewCraftWidget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetCraftWindowOpened
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Opened                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetCraftWindowOpened(bool* Opened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetCraftWindowOpened");

	Params::BPI_SurvPC_C_GetCraftWindowOpened Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Opened != nullptr)
		*Opened = Parms.Opened;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetCurrentXP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetCurrentXP(double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetCurrentXP");

	Params::BPI_SurvPC_C_GetCurrentXP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetInventoryMessageWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_CapacityMessage_C*             Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetInventoryMessageWidget(class UW_CapacityMessage_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetInventoryMessageWidget");

	Params::BPI_SurvPC_C_GetInventoryMessageWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetInventoryWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMPInGameInventory_C*             Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetInventoryWidget(class UMPInGameInventory_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetInventoryWidget");

	Params::BPI_SurvPC_C_GetInventoryWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetLootZoneType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELG2_LootRareType                       Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetLootZoneType(const struct FVector& Location, ELG2_LootRareType* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetLootZoneType");

	Params::BPI_SurvPC_C_GetLootZoneType Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetMaxXP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetMaxXP(double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetMaxXP");

	Params::BPI_SurvPC_C_GetMaxXP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetPlayerGUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUIW_PlayerMain_C*                GUI                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetPlayerGUI(class UUIW_PlayerMain_C** GUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetPlayerGUI");

	Params::BPI_SurvPC_C_GetPlayerGUI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GUI != nullptr)
		*GUI = Parms.GUI;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetPlayerRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                SurvivalPlayer                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetPlayerRef(class ASurvivalPlayer_C** SurvivalPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetPlayerRef");

	Params::BPI_SurvPC_C_GetPlayerRef Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SurvivalPlayer != nullptr)
		*SurvivalPlayer = Parms.SurvivalPlayer;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetQuestComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestComponent*                  Quest                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UQuestTrackerComponent*           QuestTracker                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetQuestComponents(class UQuestComponent** Quest, class UQuestTrackerComponent** QuestTracker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetQuestComponents");

	Params::BPI_SurvPC_C_GetQuestComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Quest != nullptr)
		*Quest = Parms.Quest;

	if (QuestTracker != nullptr)
		*QuestTracker = Parms.QuestTracker;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetResurrectLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetResurrectLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetResurrectLocation");

	Params::BPI_SurvPC_C_GetResurrectLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetSkillPoints
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetSkillPoints(int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetSkillPoints");

	Params::BPI_SurvPC_C_GetSkillPoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetSpawnZoneType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAISpawnZoneType                        Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetSpawnZoneType(const struct FVector& Location, EAISpawnZoneType* Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetSpawnZoneType");

	Params::BPI_SurvPC_C_GetSpawnZoneType Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Type != nullptr)
		*Type = Parms.Type;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetTabsWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UW_TabsWindow_C*                  Widget                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetTabsWidget(class UW_TabsWindow_C** Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetTabsWidget");

	Params::BPI_SurvPC_C_GetTabsWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Widget != nullptr)
		*Widget = Parms.Widget;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetTeleportingToStash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    From_Raid                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetTeleportingToStash(bool* From_Raid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetTeleportingToStash");

	Params::BPI_SurvPC_C_GetTeleportingToStash Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (From_Raid != nullptr)
		*From_Raid = Parms.From_Raid;
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetTutorStage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           StageName                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetTutorStage(class FString* StageName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetTutorStage");

	Params::BPI_SurvPC_C_GetTutorStage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StageName != nullptr)
		*StageName = std::move(Parms.StageName);
}


// Function BPI_SurvPC.BPI_SurvPC_C.GetWidgetIsOpened
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WidgetIsOpened                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::GetWidgetIsOpened(bool* WidgetIsOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "GetWidgetIsOpened");

	Params::BPI_SurvPC_C_GetWidgetIsOpened Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WidgetIsOpened != nullptr)
		*WidgetIsOpened = Parms.WidgetIsOpened;
}


// Function BPI_SurvPC.BPI_SurvPC_C.HidePlayers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideAll                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::HidePlayers(bool Hide, bool HideAll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "HidePlayers");

	Params::BPI_SurvPC_C_HidePlayers Parms{};

	Parms.Hide = Hide;
	Parms.HideAll = HideAll;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.HideQuestUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::HideQuestUI(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "HideQuestUI");

	Params::BPI_SurvPC_C_HideQuestUI Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.IsRendered?
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRendered                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::IsRendered_(class AActor* Pawn, bool* IsRendered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "IsRendered?");

	Params::BPI_SurvPC_C_IsRendered_ Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (IsRendered != nullptr)
		*IsRendered = Parms.IsRendered;
}


// Function BPI_SurvPC.BPI_SurvPC_C.LoadPlayerPos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Exist                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          PlayerPos                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::LoadPlayerPos(bool* Exist, struct FVector* PlayerPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "LoadPlayerPos");

	Params::BPI_SurvPC_C_LoadPlayerPos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Exist != nullptr)
		*Exist = Parms.Exist;

	if (PlayerPos != nullptr)
		*PlayerPos = std::move(Parms.PlayerPos);
}


// Function BPI_SurvPC.BPI_SurvPC_C.OnChangeQuestHintMulticast
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Hint                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::OnChangeQuestHintMulticast(const class FString& Hint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "OnChangeQuestHintMulticast");

	Params::BPI_SurvPC_C_OnChangeQuestHintMulticast Parms{};

	Parms.Hint = std::move(Hint);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.OnNetworkError
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_SurvPC_C::OnNetworkError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "OnNetworkError");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_SurvPC.BPI_SurvPC_C.OnTravelError
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_SurvPC_C::OnTravelError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "OnTravelError");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_SurvPC.BPI_SurvPC_C.OpenTabsWindow
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_TabType                               Focus                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WithVehicle                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Succes                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::OpenTabsWindow(E_TabType Focus, bool WithVehicle, bool* Succes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "OpenTabsWindow");

	Params::BPI_SurvPC_C_OpenTabsWindow Parms{};

	Parms.Focus = Focus;
	Parms.WithVehicle = WithVehicle;

	UObject::ProcessEvent(Func, &Parms);

	if (Succes != nullptr)
		*Succes = Parms.Succes;
}


// Function BPI_SurvPC.BPI_SurvPC_C.RemoveDialogueWidget
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_SurvPC_C::RemoveDialogueWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "RemoveDialogueWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_SurvPC.BPI_SurvPC_C.ResetXP
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_SurvPC_C::ResetXP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "ResetXP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_SurvPC.BPI_SurvPC_C.SavePlayerPos
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_SurvPC_C::SavePlayerPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SavePlayerPos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetCraftWindowOpened
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewOpened                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetCraftWindowOpened(bool NewOpened, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetCraftWindowOpened");

	Params::BPI_SurvPC_C_SetCraftWindowOpened Parms{};

	Parms.NewOpened = NewOpened;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetDialogueWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UADSDialogue*                     Dialogue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FName                             NPC_Name                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetDialogueWidget(class UADSDialogue* Dialogue, class FName NPC_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetDialogueWidget");

	Params::BPI_SurvPC_C_SetDialogueWidget Parms{};

	Parms.Dialogue = Dialogue;
	Parms.NPC_Name = NPC_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetPlayerRef
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASurvivalPlayer_C*                Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetPlayerRef(class ASurvivalPlayer_C* Player, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetPlayerRef");

	Params::BPI_SurvPC_C_SetPlayerRef Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetQuestHint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Hint                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           Title                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetQuestHint(const class FString& Hint, const class FString& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetQuestHint");

	Params::BPI_SurvPC_C_SetQuestHint Parms{};

	Parms.Hint = std::move(Hint);
	Parms.Title = std::move(Title);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetResurrectLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetResurrectLocation(const struct FVector& Location, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetResurrectLocation");

	Params::BPI_SurvPC_C_SetResurrectLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetTeleportingToStash
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    From_Raid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetTeleportingToStash(bool From_Raid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetTeleportingToStash");

	Params::BPI_SurvPC_C_SetTeleportingToStash Parms{};

	Parms.From_Raid = From_Raid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetUpgradeScreen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnabled                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_RB_Vehicle_C*                 Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetUpgradeScreen(bool NewEnabled, class ABP_RB_Vehicle_C* Vehicle, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetUpgradeScreen");

	Params::BPI_SurvPC_C_SetUpgradeScreen Parms{};

	Parms.NewEnabled = NewEnabled;
	Parms.Vehicle = Vehicle;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.SetYouDiedScreen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewEnabled                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   DayCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ResurrectionTimer                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SetYouDiedScreen(bool NewEnabled, int32 DayCount, double ResurrectionTimer, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SetYouDiedScreen");

	Params::BPI_SurvPC_C_SetYouDiedScreen Parms{};

	Parms.NewEnabled = NewEnabled;
	Parms.DayCount = DayCount;
	Parms.ResurrectionTimer = ResurrectionTimer;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.ShowCityLabel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             CityName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::ShowCityLabel(const class FText& CityName, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "ShowCityLabel");

	Params::BPI_SurvPC_C_ShowCityLabel Parms{};

	Parms.CityName = std::move(CityName);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_SurvPC.BPI_SurvPC_C.SwitchQuest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UQuestV2_C*                       Quest                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::SwitchQuest(class UQuestV2_C* Quest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "SwitchQuest");

	Params::BPI_SurvPC_C_SwitchQuest Parms{};

	Parms.Quest = Quest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.ThrowQuestTrigger
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Trigger                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::ThrowQuestTrigger(const class FString& Trigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "ThrowQuestTrigger");

	Params::BPI_SurvPC_C_ThrowQuestTrigger Parms{};

	Parms.Trigger = std::move(Trigger);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_SurvPC.BPI_SurvPC_C.UseSkillPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumPoints                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SurvPC_C::UseSkillPoint(int32 NumPoints, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_SurvPC_C", "UseSkillPoint");

	Params::BPI_SurvPC_C_UseSkillPoint Parms{};

	Parms.NumPoints = NumPoints;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

