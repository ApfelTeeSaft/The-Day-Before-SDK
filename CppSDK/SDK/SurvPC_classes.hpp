#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvPC

#include "Basic.hpp"

#include "E_HouseType_structs.hpp"
#include "Engine_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "Survival_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ChatType_structs.hpp"
#include "Slate_structs.hpp"
#include "AISpawnZoneType_structs.hpp"
#include "F_EasyQuestsList_structs.hpp"
#include "E_TabType_structs.hpp"
#include "LG2_LootRareType_structs.hpp"
#include "LootGeneratorType_structs.hpp"
#include "QuestFramework_structs.hpp"
#include "E_Works_structs.hpp"
#include "FirebaseFeatures_structs.hpp"
#include "UMG_structs.hpp"
#include "Enum_WarningMessageType_structs.hpp"
#include "BPE_FireMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SurvPC.SurvPC_C
// 0x0848 (0x10C0 - 0x0878)
class ASurvPC_C final : public ASurvivalPlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0878(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UQuestComponent*                        QuestComp;                                         // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UQuestTrackerComponent*                 QuestTracker;                                      // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DisplayLocationTimeline__Direction_63BF8EFA436E1DAB4AAF0CA8CDF65F03; // 0x0898(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_899[0x7];                                      // 0x0899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DisplayLocationTimeline;                           // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_GameHUD_C*                          HUD;                                               // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnAddXP;                                           // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                ResurrectLocation;                                 // 0x08C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerIndex;                                       // 0x08D8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastControlRotation;                               // 0x08E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<class FString>                         BeginningConsoleCommands;                          // 0x08F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnInited;                                          // 0x0908(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DayCount;                                          // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91C[0x4];                                      // 0x091C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnUpdateDay;                                       // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 PlayFabPlayerID;                                   // 0x0930(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          CanControlWorldOrigin;                             // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_941[0x7];                                      // 0x0941(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      PlayerRef;                                         // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRendered_R;                                      // 0x0950(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_951[0x7];                                      // 0x0951(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_D2S_Manager_C*                      BPD2SManager;                                      // 0x0958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 SpawnZoneMap;                                      // 0x0960(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 PlayFabTitleID;                                    // 0x0970(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 LoginDataSlotName;                                 // 0x0980(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ID;                                                // 0x0990(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 BuildID;                                           // 0x09A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsLoggedIn;                                        // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B1[0x7];                                      // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayFabLoggedIn;                                 // 0x09B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 Name_SurvPC_C;                                     // 0x09C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 TutorLevel;                                        // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_Quest_C*                           WBP_Quests;                                        // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_Mark_C*>                      QuestMarks;                                        // 0x09E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          bIsQuestUiHidden;                                  // 0x09F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F9[0x7];                                      // 0x09F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_NewQuest_C*                        WBP_NewQuest;                                      // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     MuteEvent;                                         // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 FakeLogin;                                         // 0x0A10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsUsingChat;                                       // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APS_TDB_C*                              PS_TDB;                                            // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          PartyWidget;                                       // 0x0A30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A31[0x7];                                      // 0x0A31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnServerLogin;                                     // 0x0A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             PlayerPawnIsPossessed;                             // 0x0A48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         ShadowsQuality;                                    // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TexturesQuality;                                   // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PostProcessQuality;                                // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AntiAliacingQuality;                               // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShadingQuality;                                    // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EffectsQuality;                                    // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             FireModeChanged;                                   // 0x0A70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_Shops_C*                            CachedShop;                                        // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UDecalComponent*>                BulletDecals;                                      // 0x0A88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         BulletDecalMaxNumber;                              // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9C[0x4];                                      // 0x0A9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Stash_C*                            CachedStash;                                       // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          InitLoadingStarted;                                // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideOtherMeshesTimer;                              // 0x0AA9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AAA[0x6];                                      // 0x0AAA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         HidenActors;                                       // 0x0AB0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ALevelSequenceActor*                    LSPlayer;                                          // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CostilBS;                                          // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC9[0x7];                                      // 0x0AC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_BlackScreen_C*                       BlackScreenRef;                                    // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     ROOTLOADING;                                       // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TArray<struct FFMODEventInstance>             PlayingSounds;                                     // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLoadingScreen;                                   // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF1[0x7];                                      // 0x0AF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_DLSSStats_C*                       DEBUG_Stats_Widget;                                // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_SurvivalSpectator_C*                SpecRef;                                           // 0x0B00(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkyCreatorWeatherPreset*               CityWeatherSettings;                               // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkyCreatorWeatherPreset*               HubWeatherAsset;                                   // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         City_Start_Distance;                               // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         City_View_Distance;                                // 0x0B1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FirstInitQuestsNum;                                // 0x0B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B24[0x4];                                      // 0x0B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UQuest*>                           CurrentQuests;                                     // 0x0B28(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UQuest*>                         CurrentQuestsLocal;                                // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FInputChord                            LastKeyChangedControlSettings;                     // 0x0B88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnQuestCompleted;                                  // 0x0BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class ABP_PlayerSpawnPoint_C*, int32>    SPPlayer;                                          // 0x0BB8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         SPNumberOfPlayers;                                 // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0C[0x4];                                      // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CompletedQuests;                                   // 0x0C10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ASurvivalPlayer_V2_C*                   SurvChar;                                          // 0x0C20(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UQuestContext*                          RP_QuestContext;                                   // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_QuestZone_C*>                CurrentRP_Zones;                                   // 0x0C30(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_QuestZone_C*>                ProgressQuestZones;                                // 0x0C40(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_QuestZone_C*                        CurrentActiveZone;                                 // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RPZoneProgressIndex;                               // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RPZoneIndex;                                       // 0x0C5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CarriesA_Box;                                      // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C61[0x7];                                      // 0x0C61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGI_Survival_C*                         GISurvivalRef;                                     // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TutorialProgressIndex;                             // 0x0C70(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C74[0x4];                                      // 0x0C74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTutorialIndexAdded;                              // 0x0C78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TutorialCompleted;                                 // 0x0C88(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C89[0x7];                                      // 0x0C89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTutorial_ompleted;                               // 0x0C90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UQuestContext*                          TutorialQuestContext;                              // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CurrentQuestActor;                                 // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   TutorialDrinkWaterStage_ItemName;                  // 0x0CB0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Chat_text;                                         // 0x0CB8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnChatUpdate_;                                     // 0x0CD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CarriesBottles;                                    // 0x0CE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE1[0x3];                                      // 0x0CE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RPQuestFrequency;                                  // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Quest_Name;                                        // 0x0CE8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Quest_Text;                                        // 0x0D00(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FString, int32>                    Reward_Items;                                      // 0x0D18(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Reward_Rp;                                         // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D6C[0x4];                                      // 0x0D6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentTutorialStage;                              // 0x0D70(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             SetTutorStage;                                     // 0x0D80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UQuestContext*                          WayOutQuest_Context;                               // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UQuestContext*                          TutorialQuestRef;                                  // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        ArrayZombieLocations;                              // 0x0DA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             ServerLocationLoaded;                              // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnChangedPlayerRef;                                // 0x0DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<int32>                                 FixedRadioTowersIndex;                             // 0x0DD0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnTowersIndexesChanges;                            // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_QuestZone_C*>                ActiveTowers;                                      // 0x0DF0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class FString>                         StartedQuests;                                     // 0x0E00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnQuestStrted;                                     // 0x0E10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          TutorCheatCompleted;                               // 0x0E20(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EChatType                                     ChatType;                                          // 0x0E21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QuestInitDoOnced;                                  // 0x0E22(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E23[0x1];                                      // 0x0E23(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SuccessfulExits;                                   // 0x0E24(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSuccessfulExit;                                  // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             BindReadyToLoad;                                   // 0x0E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTimerHandle                           HoldInteractTimer;                                 // 0x0E48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnHoldInteractStart;                               // 0x0E50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHoldInteractFinish;                              // 0x0E60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnHoldInteractStop;                                // 0x0E70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UQuestContext*                          CurrentQuestContext;                               // 0x0E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class UQuest*, struct FTimerHandle>      QuestsTimers;                                      // 0x0E88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        MinUpdQuestTime;                                   // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxUpdQuestTime;                                   // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnQuestUpdated;                                    // 0x0EE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnQuestFinished;                                   // 0x0EF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bInitialTrack;                                     // 0x0F08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F09[0x7];                                      // 0x0F09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBackendInfoLoad;                                 // 0x0F10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 Steam_Id;                                          // 0x0F20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FF_EasyQuestsList                      EasyQuests;                                        // 0x0F30(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          NewCharacterCreated;                               // 0x0F80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F81[0x7];                                      // 0x0F81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ZombieReplicatingMovementArr;                      // 0x0F88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  ZombieDeadArr;                                     // 0x0F98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 PlayerLocSave;                                     // 0x0FA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnTutorStageUpdated;                               // 0x0FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnStartEndLoadingScreen;                           // 0x0FC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        LocalChatDistance;                                 // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TeleportingToStash;                                // 0x0FE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FE1[0x7];                                      // 0x0FE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FFMODEventInstance>        HouseAlarmSounds;                                  // 0x0FE8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, struct FVector>                   HouseAlarmLocation;                                // 0x1038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         HouseAlarmID;                                      // 0x1088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_108C[0x4];                                     // 0x108C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnHintDismiss;                                     // 0x1090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UQuest*                                 SelectedQuest_Local;                               // 0x10A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   NodeText;                                          // 0x10A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ActivateTowersIconsGPS(bool IconHiden);
	void ActivateZombiesAI();
	void Add_Bullet_Decal(const class UDecalComponent*& NewItem);
	void AddNew2DSound(const struct FFMODEventInstance& NewItem);
	void AddSkillPoint(int32 Value, bool* Success);
	void AddXP(double XP, const class FText& Sender);
	void AllowCanControlWorldOrigin();
	void BeginQuestTrack(class UQuestContext* Context);
	void BindReadyToLoad__DelegateSignature();
	void BindShowTutorialQuestReward(const class FText& QuestName, const class FText& QuestText, const TMap<class FString, int32>& Param_Reward_Items, int32 Param_Reward_Rp);
	void BlockControlRotation(bool SetBlock);
	void CallFireModeChanged();
	void ChangeQuestHint(const class FString& Hint);
	void ChangeWorldOrigin();
	void CheckRenderedPawn_MULTI(class AActor* Param_Pawn);
	void CheckRenderedPawn_SERV(bool IsRendered);
	void CheckTutorialNeedReset();
	void ClearMarkers();
	void ClearQuestSaves();
	void ClearRest();
	void ClearRPQInfo();
	void ClearTowersIndexes();
	void ClientShowAllDeers(const TArray<class ABP_DeerV2_C*>& Deers);
	void CloseTabsWindow(bool* Success);
	void CompleteQuest_Owning(const struct FGameplayTag& MessageTag, class UQuest* Quest);
	void CompleteQuest_Serv(const struct FGameplayTag& MessageTag, class UQuest* Quest);
	void ConfirmJoin(const class FString& PlayFabID);
	void ControlOriginByDistance();
	void CostilBlackScreen();
	void CreateAccount();
	void CreateContainerAtLocation(const struct FVector& Location, ELootGeneratorType GenericLootType, class UDataTable* CustomAsset, const class FText& ContainerName, const struct FVector& CustomOffset, class UStaticMesh* CustomMesh, class USceneComponent* AttachTo, class FName SocketName, bool* Return);
	void CreateContainerWithDrop(const struct FVector& Location, const class FString& ContainerName, const struct FVector& ContainerOffset, TArray<struct FDropItemEntry>& DropItems, bool* Return);
	void CreatePlayFabID();
	void DeactivateZombiesAI();
	void DisplayLocation(float NewTime);
	void DisplayLocationTimeline__FinishedFunc();
	void DisplayLocationTimeline__UpdateFunc();
	void DLSSStatW();
	void DontHighlightActors();
	void EasyQuestsCompleted(bool* Completed);
	void EndLoadingScreen();
	void EndTutorialOwning();
	void EventEndTutorial();
	void ExecuteConsoleCommands();
	void ExecuteUbergraph_SurvPC(int32 EntryPoint);
	void FindPlayerStartForRegion(class FName Region, class APlayerStart** Start);
	void FindPlayerStartLocationForRegion(const class FString& Region, struct FVector* Location);
	void FinishHoldInteract();
	void FinishQuestRemotely(int32 NewParam);
	void FirebaseArrayToStringArray(const TArray<struct FFirestoreFieldValue>& Value, TArray<class FString>* Result);
	void FireModeChanged__DelegateSignature(EBPE_FireMode FireMode);
	void FireSoundOffServer();
	void FireSoundServer(TSoftObjectPtr<class UFMODEvent> FireSoundEvent, float IndoorShot);
	void FocusChatTextEntry();
	void GetAllActiveZombies();
	void GetBeginner(bool* bIsBeginner);
	void GetBlackScreenWidget(class UW_BlackScreen_C** Widget);
	void GetCarGameWidget(class UWBP_CarGame_C** CarGameWidget);
	void GetCarUpgradeWidget(class UW_CarUpgradeMenu_C** Widget);
	void GetChatMessage(const class FText& TextToSend);
	void GetCraftWidget(class UUI_CraftWindow_C** NewCraftWidget);
	void GetCraftWindowOpened(bool* Opened);
	void GetCurrentXP(double* Value);
	void GetId(class FString* Param_ID);
	void GetInventoryMessageWidget(class UW_CapacityMessage_C** Widget);
	void GetInventoryWidget(class UMPInGameInventory_C** Widget);
	void GetIsBeginner(bool* IsBeginner);
	void GetLoginData(bool* HasData, class USG_LoginData_C** Data);
	void GetLootZoneType(const struct FVector& Location, ELG2_LootRareType* Type);
	void GetMaxXP(double* Value);
	void GetNextQuests(bool EbbyQuestsIgnore, TArray<class UQuest*>* Quests);
	void GetPlayerGUI(class UUIW_PlayerMain_C** GUI);
	void GetPlayerRef(class ASurvivalPlayer_C** SurvivalPlayer);
	void GetQuestComponents(class UQuestComponent** Quest, class UQuestTrackerComponent** Param_QuestTracker);
	void GetResurrectLocation(struct FVector* Location);
	void GetSkillPoints(int32* Value);
	void GetSpawnZoneType(const struct FVector& Location, EAISpawnZoneType* Type);
	void GetSteamID();
	void GetTabsWidget(class UW_TabsWindow_C** Widget);
	void GetTeleportingToStash(bool* From_Raid);
	void GetTutorialDrinkWaterStage_ItemName(class FName* Param_Name);
	void GetTutorialQuestRef(class UQuestContext** TutorialQuest);
	void GetTutorStage(class FString* StageName);
	void GetWidgetIsOpened(bool* WidgetIsOpened);
	void HandleChatMessage(const class FText& Sender, const class FText& Text, EChatType Param_ChatType, int32 SquadId, const struct FVector& SenderLocation, class APS_TDB_C* SenderPS);
	void HandleClientWasKicked(const class FText& KickReason);
	void HideAllQuestMarks();
	void HidePlayers(bool Hide, bool HideAll);
	void HideQuestUI(bool Hide);
	void Highlight_ActorsToggle(bool Highlight);
	void HouseAlarmSoundClient(const struct FVector& Location);
	void HouseAlarmSoundOffClient(const struct FVector& Location);
	void Init();
	void Init_Next_Quest(bool* Success);
	void InitAllFirstsNPCQuests(bool TutorEvent_);
	void InitCompletedQuests();
	void InitFirstsQuests(bool EbbyQuestsIgnore, double Delay);
	void InitQuestDescription(class UQuestContext* Context);
	void InitQuests(bool InitSaveQuests);
	void InitRPZone_Owning(class ABP_QuestZone_C* Param_CurrentActiveZone);
	void InitRPZone_Serv(bool Progress, bool Random);
	void InpActEvt_Accept_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_Accept_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_BaseBuilding_Exit_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_ChangeFireMode_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Decline_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_Decline_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_OpenPauseMenu_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_RightControl_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_TextChat_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_WeaponSlot6_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InvisibleZombieStat();
	void IsDialogOpen(bool* IsOpen);
	void IsRendered_(class AActor* Param_Pawn, bool* IsRendered);
	bool IsSpecQuest(const TSet<class UQuest*>& CurrentContextQuests);
	void LoadCompleted();
	void LoadingScreen(const struct FVector& Location, const struct FRotator& Rotation);
	void LoadingSeqStoped();
	void LoadPlayerPos(bool* Exist, struct FVector* PlayerPos);
	void LoadTutorialstatus();
	void LoadUserInfo();
	void Login(bool CreateAccount, const class FString& PlatformUserId);
	void NewDayEvent();
	void NotifyPlayerJoined();
	void OnAddXP__DelegateSignature(double Value, const class FText& Sender);
	void OnBackendInfoLoad__DelegateSignature();
	void OnChangedPlayerRef__DelegateSignature();
	void OnChangeQuestHintMulticast(const class FString& Hint);
	void OnChatUpdate___DelegateSignature(const class FText& Param_Chat_text, const class FText& Sender);
	void OnEndSequence();
	void OnError_D1E9AB7543CE6654C0C1AE9B6EBBD919(const EFirestoreError Error, const struct FFirestoreDocumentSnapshot& DocumentSnapshot);
	void OnError_F36A4BC64657E2B0074D619D06EC5286(const EFirestoreError Error, const struct FFirestoreDocumentSnapshot& DocumentSnapshot);
	void OnGot_D1E9AB7543CE6654C0C1AE9B6EBBD919(const EFirestoreError Error, const struct FFirestoreDocumentSnapshot& DocumentSnapshot);
	void OnGot_F36A4BC64657E2B0074D619D06EC5286(const EFirestoreError Error, const struct FFirestoreDocumentSnapshot& DocumentSnapshot);
	void OnHintDismiss__DelegateSignature();
	void OnHoldInteractFinish__DelegateSignature();
	void OnHoldInteractStart__DelegateSignature(const struct FKey& Key);
	void OnHoldInteractStop__DelegateSignature(const struct FKey& Key);
	void OnInited__DelegateSignature();
	void OnNetworkError();
	void OnPlayFabLoggedIn__DelegateSignature();
	void OnPossessPlayer();
	void OnQuestCompleted__DelegateSignature(TArray<class FString>& QuestSaveData);
	void OnQuestFinished__DelegateSignature(class UQuest* Quest);
	void OnQuestStrted__DelegateSignature(TArray<class FString>& Quests);
	void OnQuestTrigger(const class FString& Trigger);
	void OnQuestUpdated__DelegateSignature();
	void OnRep_VehicleRef();
	void OnRespawnPlayerClient();
	void OnRPZoneInteracted_Server(const struct FF_RPZoneInfo& RPZoneStruct);
	void OnSendSteamSessionTicket();
	void OnServerLogin__DelegateSignature(class ASurvPC_C* SurvPC);
	void OnserverLogined(class ASurvPC_C* SurvPC);
	void OnStartEndLoadingScreen__DelegateSignature();
	void OnSuccessfulExit__DelegateSignature(int32 ExitsCount);
	void OnTowersIndexesChanges__DelegateSignature(TArray<int32>& TowersIndexes);
	void OnTravelError();
	void OnTutorialIndexAdded__DelegateSignature(int32 TIndex);
	void OnTutorial_ompleted__DelegateSignature(bool Beginner);
	void OnTutorStageUpdated__DelegateSignature(const class FString& TutorialStage);
	void OnUpdateDay__DelegateSignature(int32 SetDay);
	void OpenTabsWindow(E_TabType Focus, bool WithVehicle, bool* Succes);
	void PauseQuestTimer(class UQuest* Quest, bool Unpause);
	void PerformRPQAction(E_Works WorkType, bool ProgressZone);
	void PlayerPawnIsPossessed__DelegateSignature(class ASurvivalPlayer_C* PlayerPawn);
	void PlayerSpawnedClientSide();
	void PlayRPQAnims();
	void PostMsg(const class FText& Sender, const class FText& Text, EChatType Param_ChatType, int32 SquadId, const struct FVector& SenderLocation, class APS_TDB_C* SenderPS);
	void PrintAmountOfActiveZombies(const TArray<struct FVector>& ZombieLocations, int32 SleepingZombies, int32 DeadZombies, TArray<bool>& ReplicatingMovementArr, TArray<bool>& DeadArr, int32 CityZombies);
	void PrintClientZombies();
	void PrintPossessPlaceholder();
	void PrintString_Owning(const class FString& InString);
	void ProjectileOptimization(class ASurvivalPlayer_V2_C* Param_Player);
	void QuestCheat();
	void RadioTowerFixed(int32 TowerIndex);
	void ReadyToLoad();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveTick(float DeltaSeconds);
	void RefreshQuest(class UQuest* Quest);
	void RemoveDialogueWidget();
	void RemoveTagSurv_Owning(const class FName& Item);
	void RequireTeleportToRegion(class FName Region);
	void ResetDefaultConsoleValues();
	void ResetShowFirstRaidTutorial();
	void ResetXP();
	void RespawnPlayerAtLocation(const struct FVector& Location);
	void RPAddProgress_UI(int32 Current, class UQuest* Quest);
	void SaveLoginData();
	void SavePlayerPos();
	void SendQuestMessage_Server(const struct FGameplayTag& MessageTag);
	void SendSteamSessionTicket(const class FString& SteamSessionTicket);
	void ServChatProc(const class FText& Sender, const class FText& Text, EChatType Param_ChatType, int32 SquadId, const struct FVector& SenderLocation, class APS_TDB_C* SenderPS);
	void ServerCallToggleNetProfile();
	void ServerCallToggleStatProfile();
	void ServerFindAllDeers();
	void ServerKillAllActiveDeers();
	void ServerKillAllActiveZombies();
	void ServerKillNearestZombie();
	void ServerLocationLoaded__DelegateSignature(class ASurvPC_C* SurvPC);
	void ServerPushZombie();
	void ServerToggleZombieAI();
	void ServerToggleZombieSpawn();
	void SetCharacterCreated(bool NewCharCreated);
	void SetCraftWindowOpened(bool NewOpened, bool* Success);
	void SetCurrentQuest_Local(const class UQuest* AddQuest, const class UQuest* RemoveQuest, class UQuest* Param_SelectedQuest_Local);
	void SetDialogueWidget(class UADSDialogue* Dialogue, class FName NPC_Name);
	void SetLoginServer(const class FString& SteamID);
	void SetLowSettings();
	void SetMarkers(const TArray<struct FVector>& Markers);
	void SetNewCharCreated_GI(bool Param_NewCharacterCreated);
	void SetPlayerRef(class ASurvivalPlayer_C* Param_Player, bool* Success);
	void SetPlayFabID(const class FString& PlayFabID);
	void SetQuestHint(const class FString& Hint, const class FString& Title);
	void SetResurrectLocation(const struct FVector& Location, bool* Success);
	void SetTeleportingToStash(bool From_Raid);
	void SetTutorialStage(const class FString& StageName);
	void SetTutorName_Owning(const class FString& StageName);
	void SetTutorStage__DelegateSignature(const class FString& StageName);
	void SetUpgradeScreen(bool NewEnabled, class ABP_RB_Vehicle_C* Vehicle, bool* Success);
	void SetUserSettings();
	void SetYouDiedScreen(bool NewEnabled, int32 Param_DayCount, double ResurrectionTimer, bool* Success);
	void SetZombieSleepEnabled(int32 Enabled);
	void SetZombiesMaxAmount(int32 NewMaxZombiesAmount);
	void ShowAccordingToChatType(const class FString& Param_Player, const class FString& Text, EChatType Param_ChatType, const struct FVector& SourceLocation, int32 Squad);
	void ShowCityLabel(const class FText& CityName, bool* Success);
	void ShowCurrentTutorialState_Client(const class FText& Param_NodeText);
	void ShowInvisibleZombieStat(int32 KillsAmount, int32 UniqueBlueprints);
	void ShowNetProfileUI(bool NewShow);
	void ShowNPCQuestMessage(class FName NPC, class UQuest* Quest);
	void ShowPofileStatusUI(bool Condition);
	void ShowQuestAfterCityLoad();
	void ShowQuestMarks();
	void ShowText(const class FString& PlayerName, const class FString& Text, int32 NumberOfLines, EChatType Param_ChatType, const struct FVector& SourceLocation, int32 Squad);
	void ShowTutorialQuestMessageCompleted();
	void SkyScene(bool TurnOff_);
	void Spawn_Workbench_Func();
	void SpawnAllZombies();
	void SpawnTutorialBag(class ABP_TutorialBagSpawner_C* Spawner);
	void SpectatorSwitch(bool Spectate_, const struct FTransform& SpectatorPosition, class APawn* Param_Player);
	void SpectatorTeleport(const struct FTransform& NewPosition);
	void StartHoldInteract(const struct FKey& Key);
	void StartQuest_Server(class UQuest* Quest);
	void StartRPQuest(class UQuest* Quest);
	void StartTutorial();
	void Stop_All_House_Alarm_Sound();
	void Stop2DSounds();
	void StopHoldInteract(const struct FKey& Key);
	void StopHouseAlarmSound(const struct FVector& Location);
	void StopHouseAlarmSoundID(int32 AlarmID);
	void StopTrackQuest(class UQuestContext* Context);
	void SwitchQuest(class UQuestV2_C* Quest);
	void TeleportPawn(const struct FVector& Location);
	void TeleportTo(double Location_X, double Location_Y, double Location_Z);
	void TeleportToRegion(const class FString& Region);
	void TeleportToSpawnPoint(class ABP_PlayerSpawnPoint_C* SpawnPoint, E_HouseType Where_, int32 SquadMember, int32 SquadLenght, bool OnCar);
	void ThrowQuestTrigger(const class FString& Trigger);
	void ToggleChat(EChatType Param_ChatType);
	void TogglePartyWidget(ESlateVisibility InVisibility);
	void TrackQuest_Owning(class UQuest* QuestAsset, bool Untrack);
	void TutorialBegin(class AActor* Level);
	void TutorialStart(bool NeedReset);
	void UnbindEventsOnTutorialFinished();
	void Update_Quest();
	void UpdateDay(int32 SetDay);
	void UpdateQuest1();
	void UpdateQuest2();
	void UseChat(const class FString& PlayerName, const class FString& Text, int32 NumberOfLines, EChatType Param_ChatType, int32 Squad);
	void UseSkillPoint(int32 NumPoints, bool* Success);
	void Way_Out_Tutor_Completed(bool* Completed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SurvPC_C">();
	}
	static class ASurvPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASurvPC_C>();
	}
};
static_assert(alignof(ASurvPC_C) == 0x000008, "Wrong alignment on ASurvPC_C");
static_assert(sizeof(ASurvPC_C) == 0x0010C0, "Wrong size on ASurvPC_C");
static_assert(offsetof(ASurvPC_C, UberGraphFrame) == 0x000878, "Member 'ASurvPC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, QuestComp) == 0x000880, "Member 'ASurvPC_C::QuestComp' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, QuestTracker) == 0x000888, "Member 'ASurvPC_C::QuestTracker' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Scene) == 0x000890, "Member 'ASurvPC_C::Scene' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, DisplayLocationTimeline__Direction_63BF8EFA436E1DAB4AAF0CA8CDF65F03) == 0x000898, "Member 'ASurvPC_C::DisplayLocationTimeline__Direction_63BF8EFA436E1DAB4AAF0CA8CDF65F03' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, DisplayLocationTimeline) == 0x0008A0, "Member 'ASurvPC_C::DisplayLocationTimeline' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HUD) == 0x0008A8, "Member 'ASurvPC_C::HUD' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnAddXP) == 0x0008B0, "Member 'ASurvPC_C::OnAddXP' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ResurrectLocation) == 0x0008C0, "Member 'ASurvPC_C::ResurrectLocation' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayerIndex) == 0x0008D8, "Member 'ASurvPC_C::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, LastControlRotation) == 0x0008E0, "Member 'ASurvPC_C::LastControlRotation' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BeginningConsoleCommands) == 0x0008F8, "Member 'ASurvPC_C::BeginningConsoleCommands' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnInited) == 0x000908, "Member 'ASurvPC_C::OnInited' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, DayCount) == 0x000918, "Member 'ASurvPC_C::DayCount' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnUpdateDay) == 0x000920, "Member 'ASurvPC_C::OnUpdateDay' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayFabPlayerID) == 0x000930, "Member 'ASurvPC_C::PlayFabPlayerID' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CanControlWorldOrigin) == 0x000940, "Member 'ASurvPC_C::CanControlWorldOrigin' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayerRef) == 0x000948, "Member 'ASurvPC_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, IsRendered_R) == 0x000950, "Member 'ASurvPC_C::IsRendered_R' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BPD2SManager) == 0x000958, "Member 'ASurvPC_C::BPD2SManager' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SpawnZoneMap) == 0x000960, "Member 'ASurvPC_C::SpawnZoneMap' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayFabTitleID) == 0x000970, "Member 'ASurvPC_C::PlayFabTitleID' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, LoginDataSlotName) == 0x000980, "Member 'ASurvPC_C::LoginDataSlotName' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ID) == 0x000990, "Member 'ASurvPC_C::ID' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BuildID) == 0x0009A0, "Member 'ASurvPC_C::BuildID' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, IsLoggedIn) == 0x0009B0, "Member 'ASurvPC_C::IsLoggedIn' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnPlayFabLoggedIn) == 0x0009B8, "Member 'ASurvPC_C::OnPlayFabLoggedIn' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Name_SurvPC_C) == 0x0009C8, "Member 'ASurvPC_C::Name_SurvPC_C' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorLevel) == 0x0009D8, "Member 'ASurvPC_C::TutorLevel' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, WBP_Quests) == 0x0009E0, "Member 'ASurvPC_C::WBP_Quests' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, QuestMarks) == 0x0009E8, "Member 'ASurvPC_C::QuestMarks' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, bIsQuestUiHidden) == 0x0009F8, "Member 'ASurvPC_C::bIsQuestUiHidden' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, WBP_NewQuest) == 0x000A00, "Member 'ASurvPC_C::WBP_NewQuest' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, MuteEvent) == 0x000A08, "Member 'ASurvPC_C::MuteEvent' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, FakeLogin) == 0x000A10, "Member 'ASurvPC_C::FakeLogin' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, IsUsingChat) == 0x000A20, "Member 'ASurvPC_C::IsUsingChat' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PS_TDB) == 0x000A28, "Member 'ASurvPC_C::PS_TDB' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PartyWidget) == 0x000A30, "Member 'ASurvPC_C::PartyWidget' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnServerLogin) == 0x000A38, "Member 'ASurvPC_C::OnServerLogin' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayerPawnIsPossessed) == 0x000A48, "Member 'ASurvPC_C::PlayerPawnIsPossessed' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ShadowsQuality) == 0x000A58, "Member 'ASurvPC_C::ShadowsQuality' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TexturesQuality) == 0x000A5C, "Member 'ASurvPC_C::TexturesQuality' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PostProcessQuality) == 0x000A60, "Member 'ASurvPC_C::PostProcessQuality' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, AntiAliacingQuality) == 0x000A64, "Member 'ASurvPC_C::AntiAliacingQuality' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ShadingQuality) == 0x000A68, "Member 'ASurvPC_C::ShadingQuality' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, EffectsQuality) == 0x000A6C, "Member 'ASurvPC_C::EffectsQuality' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, FireModeChanged) == 0x000A70, "Member 'ASurvPC_C::FireModeChanged' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CachedShop) == 0x000A80, "Member 'ASurvPC_C::CachedShop' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BulletDecals) == 0x000A88, "Member 'ASurvPC_C::BulletDecals' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BulletDecalMaxNumber) == 0x000A98, "Member 'ASurvPC_C::BulletDecalMaxNumber' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CachedStash) == 0x000AA0, "Member 'ASurvPC_C::CachedStash' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, InitLoadingStarted) == 0x000AA8, "Member 'ASurvPC_C::InitLoadingStarted' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HideOtherMeshesTimer) == 0x000AA9, "Member 'ASurvPC_C::HideOtherMeshesTimer' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HidenActors) == 0x000AB0, "Member 'ASurvPC_C::HidenActors' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, LSPlayer) == 0x000AC0, "Member 'ASurvPC_C::LSPlayer' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CostilBS) == 0x000AC8, "Member 'ASurvPC_C::CostilBS' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BlackScreenRef) == 0x000AD0, "Member 'ASurvPC_C::BlackScreenRef' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ROOTLOADING) == 0x000AD8, "Member 'ASurvPC_C::ROOTLOADING' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayingSounds) == 0x000AE0, "Member 'ASurvPC_C::PlayingSounds' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, IsLoadingScreen) == 0x000AF0, "Member 'ASurvPC_C::IsLoadingScreen' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, DEBUG_Stats_Widget) == 0x000AF8, "Member 'ASurvPC_C::DEBUG_Stats_Widget' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SpecRef) == 0x000B00, "Member 'ASurvPC_C::SpecRef' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CityWeatherSettings) == 0x000B08, "Member 'ASurvPC_C::CityWeatherSettings' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HubWeatherAsset) == 0x000B10, "Member 'ASurvPC_C::HubWeatherAsset' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, City_Start_Distance) == 0x000B18, "Member 'ASurvPC_C::City_Start_Distance' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, City_View_Distance) == 0x000B1C, "Member 'ASurvPC_C::City_View_Distance' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, FirstInitQuestsNum) == 0x000B20, "Member 'ASurvPC_C::FirstInitQuestsNum' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentQuests) == 0x000B28, "Member 'ASurvPC_C::CurrentQuests' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentQuestsLocal) == 0x000B78, "Member 'ASurvPC_C::CurrentQuestsLocal' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, LastKeyChangedControlSettings) == 0x000B88, "Member 'ASurvPC_C::LastKeyChangedControlSettings' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnQuestCompleted) == 0x000BA8, "Member 'ASurvPC_C::OnQuestCompleted' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SPPlayer) == 0x000BB8, "Member 'ASurvPC_C::SPPlayer' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SPNumberOfPlayers) == 0x000C08, "Member 'ASurvPC_C::SPNumberOfPlayers' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CompletedQuests) == 0x000C10, "Member 'ASurvPC_C::CompletedQuests' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SurvChar) == 0x000C20, "Member 'ASurvPC_C::SurvChar' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, RP_QuestContext) == 0x000C28, "Member 'ASurvPC_C::RP_QuestContext' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentRP_Zones) == 0x000C30, "Member 'ASurvPC_C::CurrentRP_Zones' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ProgressQuestZones) == 0x000C40, "Member 'ASurvPC_C::ProgressQuestZones' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentActiveZone) == 0x000C50, "Member 'ASurvPC_C::CurrentActiveZone' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, RPZoneProgressIndex) == 0x000C58, "Member 'ASurvPC_C::RPZoneProgressIndex' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, RPZoneIndex) == 0x000C5C, "Member 'ASurvPC_C::RPZoneIndex' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CarriesA_Box) == 0x000C60, "Member 'ASurvPC_C::CarriesA_Box' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, GISurvivalRef) == 0x000C68, "Member 'ASurvPC_C::GISurvivalRef' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorialProgressIndex) == 0x000C70, "Member 'ASurvPC_C::TutorialProgressIndex' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnTutorialIndexAdded) == 0x000C78, "Member 'ASurvPC_C::OnTutorialIndexAdded' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorialCompleted) == 0x000C88, "Member 'ASurvPC_C::TutorialCompleted' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnTutorial_ompleted) == 0x000C90, "Member 'ASurvPC_C::OnTutorial_ompleted' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorialQuestContext) == 0x000CA0, "Member 'ASurvPC_C::TutorialQuestContext' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentQuestActor) == 0x000CA8, "Member 'ASurvPC_C::CurrentQuestActor' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorialDrinkWaterStage_ItemName) == 0x000CB0, "Member 'ASurvPC_C::TutorialDrinkWaterStage_ItemName' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Chat_text) == 0x000CB8, "Member 'ASurvPC_C::Chat_text' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnChatUpdate_) == 0x000CD0, "Member 'ASurvPC_C::OnChatUpdate_' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CarriesBottles) == 0x000CE0, "Member 'ASurvPC_C::CarriesBottles' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, RPQuestFrequency) == 0x000CE4, "Member 'ASurvPC_C::RPQuestFrequency' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Quest_Name) == 0x000CE8, "Member 'ASurvPC_C::Quest_Name' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Quest_Text) == 0x000D00, "Member 'ASurvPC_C::Quest_Text' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Reward_Items) == 0x000D18, "Member 'ASurvPC_C::Reward_Items' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Reward_Rp) == 0x000D68, "Member 'ASurvPC_C::Reward_Rp' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentTutorialStage) == 0x000D70, "Member 'ASurvPC_C::CurrentTutorialStage' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SetTutorStage) == 0x000D80, "Member 'ASurvPC_C::SetTutorStage' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, WayOutQuest_Context) == 0x000D90, "Member 'ASurvPC_C::WayOutQuest_Context' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorialQuestRef) == 0x000D98, "Member 'ASurvPC_C::TutorialQuestRef' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ArrayZombieLocations) == 0x000DA0, "Member 'ASurvPC_C::ArrayZombieLocations' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ServerLocationLoaded) == 0x000DB0, "Member 'ASurvPC_C::ServerLocationLoaded' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnChangedPlayerRef) == 0x000DC0, "Member 'ASurvPC_C::OnChangedPlayerRef' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, FixedRadioTowersIndex) == 0x000DD0, "Member 'ASurvPC_C::FixedRadioTowersIndex' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnTowersIndexesChanges) == 0x000DE0, "Member 'ASurvPC_C::OnTowersIndexesChanges' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ActiveTowers) == 0x000DF0, "Member 'ASurvPC_C::ActiveTowers' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, StartedQuests) == 0x000E00, "Member 'ASurvPC_C::StartedQuests' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnQuestStrted) == 0x000E10, "Member 'ASurvPC_C::OnQuestStrted' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TutorCheatCompleted) == 0x000E20, "Member 'ASurvPC_C::TutorCheatCompleted' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ChatType) == 0x000E21, "Member 'ASurvPC_C::ChatType' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, QuestInitDoOnced) == 0x000E22, "Member 'ASurvPC_C::QuestInitDoOnced' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SuccessfulExits) == 0x000E24, "Member 'ASurvPC_C::SuccessfulExits' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnSuccessfulExit) == 0x000E28, "Member 'ASurvPC_C::OnSuccessfulExit' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, BindReadyToLoad) == 0x000E38, "Member 'ASurvPC_C::BindReadyToLoad' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HoldInteractTimer) == 0x000E48, "Member 'ASurvPC_C::HoldInteractTimer' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnHoldInteractStart) == 0x000E50, "Member 'ASurvPC_C::OnHoldInteractStart' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnHoldInteractFinish) == 0x000E60, "Member 'ASurvPC_C::OnHoldInteractFinish' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnHoldInteractStop) == 0x000E70, "Member 'ASurvPC_C::OnHoldInteractStop' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, CurrentQuestContext) == 0x000E80, "Member 'ASurvPC_C::CurrentQuestContext' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, QuestsTimers) == 0x000E88, "Member 'ASurvPC_C::QuestsTimers' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, MinUpdQuestTime) == 0x000ED8, "Member 'ASurvPC_C::MinUpdQuestTime' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, MaxUpdQuestTime) == 0x000EE0, "Member 'ASurvPC_C::MaxUpdQuestTime' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnQuestUpdated) == 0x000EE8, "Member 'ASurvPC_C::OnQuestUpdated' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnQuestFinished) == 0x000EF8, "Member 'ASurvPC_C::OnQuestFinished' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, bInitialTrack) == 0x000F08, "Member 'ASurvPC_C::bInitialTrack' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnBackendInfoLoad) == 0x000F10, "Member 'ASurvPC_C::OnBackendInfoLoad' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, Steam_Id) == 0x000F20, "Member 'ASurvPC_C::Steam_Id' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, EasyQuests) == 0x000F30, "Member 'ASurvPC_C::EasyQuests' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, NewCharacterCreated) == 0x000F80, "Member 'ASurvPC_C::NewCharacterCreated' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ZombieReplicatingMovementArr) == 0x000F88, "Member 'ASurvPC_C::ZombieReplicatingMovementArr' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, ZombieDeadArr) == 0x000F98, "Member 'ASurvPC_C::ZombieDeadArr' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, PlayerLocSave) == 0x000FA8, "Member 'ASurvPC_C::PlayerLocSave' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnTutorStageUpdated) == 0x000FB8, "Member 'ASurvPC_C::OnTutorStageUpdated' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnStartEndLoadingScreen) == 0x000FC8, "Member 'ASurvPC_C::OnStartEndLoadingScreen' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, LocalChatDistance) == 0x000FD8, "Member 'ASurvPC_C::LocalChatDistance' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, TeleportingToStash) == 0x000FE0, "Member 'ASurvPC_C::TeleportingToStash' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HouseAlarmSounds) == 0x000FE8, "Member 'ASurvPC_C::HouseAlarmSounds' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HouseAlarmLocation) == 0x001038, "Member 'ASurvPC_C::HouseAlarmLocation' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, HouseAlarmID) == 0x001088, "Member 'ASurvPC_C::HouseAlarmID' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, OnHintDismiss) == 0x001090, "Member 'ASurvPC_C::OnHintDismiss' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, SelectedQuest_Local) == 0x0010A0, "Member 'ASurvPC_C::SelectedQuest_Local' has a wrong offset!");
static_assert(offsetof(ASurvPC_C, NodeText) == 0x0010A8, "Member 'ASurvPC_C::NodeText' has a wrong offset!");

}

