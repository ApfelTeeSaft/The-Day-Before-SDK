#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CutsceneCar

#include "Basic.hpp"

#include "E_InteractType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_ActorType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass CutsceneCar.CutsceneCar_C
// 0x0328 (0x0640 - 0x0318)
class ACutsceneCar_C : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USpotLightComponent*                    LightL;                                            // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    LightR;                                            // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Water_R_B;                                         // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Water_L_B;                                         // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Water_R_F;                                         // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Water_L_F;                                         // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractCollider;                                  // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Dirt_R_B;                                          // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Dirt_L_B;                                          // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Dirt_R_F;                                          // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Dirt_L_F;                                          // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Road_R_B;                                          // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Road_L_B;                                          // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Road_R_F;                                          // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Road_L_F;                                          // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_BMinus2;                       // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_FMinus4;                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_FMinus4;                       // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_BMinus4;                       // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_BMinus4;                       // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_FMinus3;                       // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_FMinus3;                       // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_BMinus3;                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_BMinus3;                       // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_FMinus2;                       // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_FMinus2;                       // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_BMinus2;                       // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_FMinus1;                       // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_FMinus1;                       // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_L_BMinus1;                       // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailComponent_C*                   BP_TrailComponent_R_BMinus1;                       // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane2;                                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane1;                                            // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane4;                                            // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane3;                                            // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plane;                                             // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene4;                                            // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene3;                                            // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene2;                                            // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HitCollision;                                      // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PawnCollision;                                     // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CarMesh;                                           // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_CutsceneCar_C;                               // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47C[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WheelsPitch;                                       // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        CalculatedPitch;                                   // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CalculatedVelocity;                                // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MudPitch;                                          // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentVelocity;                                   // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        DirtVelocity;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_SplashSpawn;                                     // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_SplashSize;                                      // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_SplashVelocity;                                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_BitsSpawn;                                       // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_BitsSize;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_BitsVelocity;                                    // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_MudSpawn;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_CloudsLocation;                                  // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_CloudsSpawn;                                     // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_GritDirtSize;                                    // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_GritDirtVelocity;                                // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_GritSnowSpawn;                                   // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_GritSnowVelocity;                                // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_SnowSpraySize;                                   // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_SnowSpraySpawn;                                  // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        D_SnowSprayVelocity;                               // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WheelIndex;                                        // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirt;                                           // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       ParticleSystems;                                   // 0x0538(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class UMaterialInstanceDynamic*>       TireSnowMats;                                      // 0x0548(0x0010)(Edit, BlueprintVisible)
	TArray<double>                                DirtAmount;                                        // 0x0558(0x0010)(Edit, BlueprintVisible)
	struct FLinearColor                           TireSnowColor;                                     // 0x0568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TireDirtColor;                                     // 0x0578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirt_L_F;                                       // 0x0588(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirt_R_F;                                       // 0x0589(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirt_L_B;                                       // 0x058A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDirt_R_B;                                       // 0x058B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedDirt_L_F;                                    // 0x058C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedDirt_R_F;                                    // 0x058D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedDirt_L_B;                                    // 0x058E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedDirt_R_B;                                    // 0x058F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedSnow_L_F;                                    // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedSnow_R_F;                                    // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedSnow_L_B;                                    // 0x0592(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SettedSnow_R_B;                                    // 0x0593(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RoadPitch;                                         // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RoadVelocity;                                      // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_GritDirtVelocity;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_SnowSprayVelocity;                               // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_CloudsLocation;                                  // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_CloudsSpawn;                                     // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_GritDirtSize;                                    // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_GritSnowSpawn;                                   // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        R_SnowSpraySize;                                   // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_C*                      PlayerRef;                                         // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    Sequence;                                          // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           SeatAnimSockets;                                   // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        SequenceDelay;                                     // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACutscenePersAnim_C*                    Passanger;                                         // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    PassengerSequence;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	double                                        ExitTimer;                                         // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseWater;                                          // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CarSpeed;                                          // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FrontLightMat;                                     // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	int32                                         FrontLightMatIndex;                                // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__HitCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalculateSnowOnTire(double WheelMovement, bool IsAdd, bool IsDirt, int32 Param_WheelIndex);
	void DestroyInteractable();
	void ExecuteUbergraph_CutsceneCar(int32 EntryPoint);
	void ExitVehicle(class AActor* Player, bool SkipAnimation, bool SkipExitOnLocation, bool IgnoreSpeedLimits, bool* Success);
	void FillGas();
	void GetActorType(E_ActorType* ActorType);
	void GetBoostInfo(double* BoostTime, double* BoostCooldownTime);
	void GetCarStatsComponent(class UBPC_CarStatsComponent_C** CarStats);
	void GetDriver(class APawn** Driver, class ASurvivalPlayer_V2_C** NewParam);
	void GetEngineStarted(bool* Started);
	struct FVector GetExitPoint(int32 SeatIndex);
	void GetIsAccelerating(bool* IsAccelerating);
	void GetOut();
	void GetPassengers(class APawn** PassengerFL, class APawn** PassengerBL, class APawn** PassengerBR);
	void GetSteering(double* Angle);
	void GetVehicleBody(class USkeletalMeshComponent** Body);
	void GetWheelPitches(TArray<double>* Pitches);
	void GetWheels(bool* IsValid, class USphereComponent** LF, class USphereComponent** RF, class USphereComponent** LB, class USphereComponent** RB);
	void Glass_break();
	bool HasDriver();
	void InpActEvt_Subtract_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void IsLocked_(bool* Result);
	void IsVehicle(bool* Param_IsVehicle);
	void OnBeginInteract(class APawn* Player);
	void OnFocused(class APawn* Player, class AActor* HighlightActor, class UActorComponent* HighlightActorComponent, E_InteractType* InteractType, double* LateTime);
	void OnInteract(class APawn* Player);
	void OnInteract2(class APawn* Player);
	void OnInteract3(class APawn* Player);
	void OnInteractVehicle(class APawn* Player, int32 SitIndex, bool SkipAnimation);
	void OnLevelLoaded(class FName Level, class AActor* Player);
	void OnLevelUnloaded(class FName Level, class AActor* Player);
	void OnLocalInteract(class APawn* Player);
	void OnLostFocus(class APawn* Player);
	void OnSeen(class APawn* Player);
	void OnSquadCheckComplete();
	void OnStopInteract(class APawn* Player);
	void PassengerQuit();
	void PlayExitAnims(class UAnimInstance* PlayerAnimInst);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Repair();
	void Run_Lockpicking();
	void Set3DWidgetVisibility(bool Visible);
	void SetBoost(bool NewBoost, bool* Success);
	void SetFrontLightEnabled(bool Param_Index);
	void SetParticle(bool IsDirt, int32 Param_WheelIndex);
	void SetTutorial3DWidgetVisibility(bool Visible);
	void SwitchSits(int32 DesireSitIndex, class AActor* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CutsceneCar_C">();
	}
	static class ACutsceneCar_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACutsceneCar_C>();
	}
};
static_assert(alignof(ACutsceneCar_C) == 0x000008, "Wrong alignment on ACutsceneCar_C");
static_assert(sizeof(ACutsceneCar_C) == 0x000640, "Wrong size on ACutsceneCar_C");
static_assert(offsetof(ACutsceneCar_C, UberGraphFrame) == 0x000318, "Member 'ACutsceneCar_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, LightL) == 0x000320, "Member 'ACutsceneCar_C::LightL' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, LightR) == 0x000328, "Member 'ACutsceneCar_C::LightR' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Water_R_B) == 0x000330, "Member 'ACutsceneCar_C::Water_R_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Water_L_B) == 0x000338, "Member 'ACutsceneCar_C::Water_L_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Water_R_F) == 0x000340, "Member 'ACutsceneCar_C::Water_R_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Water_L_F) == 0x000348, "Member 'ACutsceneCar_C::Water_L_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, InteractCollider) == 0x000350, "Member 'ACutsceneCar_C::InteractCollider' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Dirt_R_B) == 0x000358, "Member 'ACutsceneCar_C::Dirt_R_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Dirt_L_B) == 0x000360, "Member 'ACutsceneCar_C::Dirt_L_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Dirt_R_F) == 0x000368, "Member 'ACutsceneCar_C::Dirt_R_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Dirt_L_F) == 0x000370, "Member 'ACutsceneCar_C::Dirt_L_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Road_R_B) == 0x000378, "Member 'ACutsceneCar_C::Road_R_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Road_L_B) == 0x000380, "Member 'ACutsceneCar_C::Road_L_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Road_R_F) == 0x000388, "Member 'ACutsceneCar_C::Road_R_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Road_L_F) == 0x000390, "Member 'ACutsceneCar_C::Road_L_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_BMinus2) == 0x000398, "Member 'ACutsceneCar_C::BP_TrailComponent_L_BMinus2' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_FMinus4) == 0x0003A0, "Member 'ACutsceneCar_C::BP_TrailComponent_L_FMinus4' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_FMinus4) == 0x0003A8, "Member 'ACutsceneCar_C::BP_TrailComponent_R_FMinus4' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_BMinus4) == 0x0003B0, "Member 'ACutsceneCar_C::BP_TrailComponent_L_BMinus4' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_BMinus4) == 0x0003B8, "Member 'ACutsceneCar_C::BP_TrailComponent_R_BMinus4' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_FMinus3) == 0x0003C0, "Member 'ACutsceneCar_C::BP_TrailComponent_L_FMinus3' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_FMinus3) == 0x0003C8, "Member 'ACutsceneCar_C::BP_TrailComponent_R_FMinus3' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_BMinus3) == 0x0003D0, "Member 'ACutsceneCar_C::BP_TrailComponent_L_BMinus3' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_BMinus3) == 0x0003D8, "Member 'ACutsceneCar_C::BP_TrailComponent_R_BMinus3' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_FMinus2) == 0x0003E0, "Member 'ACutsceneCar_C::BP_TrailComponent_L_FMinus2' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_FMinus2) == 0x0003E8, "Member 'ACutsceneCar_C::BP_TrailComponent_R_FMinus2' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_BMinus2) == 0x0003F0, "Member 'ACutsceneCar_C::BP_TrailComponent_R_BMinus2' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_FMinus1) == 0x0003F8, "Member 'ACutsceneCar_C::BP_TrailComponent_L_FMinus1' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_FMinus1) == 0x000400, "Member 'ACutsceneCar_C::BP_TrailComponent_R_FMinus1' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_L_BMinus1) == 0x000408, "Member 'ACutsceneCar_C::BP_TrailComponent_L_BMinus1' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, BP_TrailComponent_R_BMinus1) == 0x000410, "Member 'ACutsceneCar_C::BP_TrailComponent_R_BMinus1' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Plane2) == 0x000418, "Member 'ACutsceneCar_C::Plane2' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Plane1) == 0x000420, "Member 'ACutsceneCar_C::Plane1' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Plane4) == 0x000428, "Member 'ACutsceneCar_C::Plane4' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Plane3) == 0x000430, "Member 'ACutsceneCar_C::Plane3' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Plane) == 0x000438, "Member 'ACutsceneCar_C::Plane' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Scene4) == 0x000440, "Member 'ACutsceneCar_C::Scene4' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Scene3) == 0x000448, "Member 'ACutsceneCar_C::Scene3' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Scene2) == 0x000450, "Member 'ACutsceneCar_C::Scene2' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, HitCollision) == 0x000458, "Member 'ACutsceneCar_C::HitCollision' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, PawnCollision) == 0x000460, "Member 'ACutsceneCar_C::PawnCollision' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, CarMesh) == 0x000468, "Member 'ACutsceneCar_C::CarMesh' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, DefaultSceneRoot) == 0x000470, "Member 'ACutsceneCar_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Index_CutsceneCar_C) == 0x000478, "Member 'ACutsceneCar_C::Index_CutsceneCar_C' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, WheelsPitch) == 0x000480, "Member 'ACutsceneCar_C::WheelsPitch' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, CalculatedPitch) == 0x000488, "Member 'ACutsceneCar_C::CalculatedPitch' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, CalculatedVelocity) == 0x000490, "Member 'ACutsceneCar_C::CalculatedVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, MudPitch) == 0x000498, "Member 'ACutsceneCar_C::MudPitch' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, CurrentVelocity) == 0x0004A0, "Member 'ACutsceneCar_C::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, DirtVelocity) == 0x0004A8, "Member 'ACutsceneCar_C::DirtVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_SplashSpawn) == 0x0004B0, "Member 'ACutsceneCar_C::D_SplashSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_SplashSize) == 0x0004B8, "Member 'ACutsceneCar_C::D_SplashSize' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_SplashVelocity) == 0x0004C0, "Member 'ACutsceneCar_C::D_SplashVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_BitsSpawn) == 0x0004C8, "Member 'ACutsceneCar_C::D_BitsSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_BitsSize) == 0x0004D0, "Member 'ACutsceneCar_C::D_BitsSize' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_BitsVelocity) == 0x0004D8, "Member 'ACutsceneCar_C::D_BitsVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_MudSpawn) == 0x0004E0, "Member 'ACutsceneCar_C::D_MudSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_CloudsLocation) == 0x0004E8, "Member 'ACutsceneCar_C::D_CloudsLocation' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_CloudsSpawn) == 0x0004F0, "Member 'ACutsceneCar_C::D_CloudsSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_GritDirtSize) == 0x0004F8, "Member 'ACutsceneCar_C::D_GritDirtSize' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_GritDirtVelocity) == 0x000500, "Member 'ACutsceneCar_C::D_GritDirtVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_GritSnowSpawn) == 0x000508, "Member 'ACutsceneCar_C::D_GritSnowSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_GritSnowVelocity) == 0x000510, "Member 'ACutsceneCar_C::D_GritSnowVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_SnowSpraySize) == 0x000518, "Member 'ACutsceneCar_C::D_SnowSpraySize' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_SnowSpraySpawn) == 0x000520, "Member 'ACutsceneCar_C::D_SnowSpraySpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, D_SnowSprayVelocity) == 0x000528, "Member 'ACutsceneCar_C::D_SnowSprayVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, WheelIndex) == 0x000530, "Member 'ACutsceneCar_C::WheelIndex' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, UseDirt) == 0x000534, "Member 'ACutsceneCar_C::UseDirt' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, ParticleSystems) == 0x000538, "Member 'ACutsceneCar_C::ParticleSystems' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, TireSnowMats) == 0x000548, "Member 'ACutsceneCar_C::TireSnowMats' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, DirtAmount) == 0x000558, "Member 'ACutsceneCar_C::DirtAmount' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, TireSnowColor) == 0x000568, "Member 'ACutsceneCar_C::TireSnowColor' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, TireDirtColor) == 0x000578, "Member 'ACutsceneCar_C::TireDirtColor' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, UseDirt_L_F) == 0x000588, "Member 'ACutsceneCar_C::UseDirt_L_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, UseDirt_R_F) == 0x000589, "Member 'ACutsceneCar_C::UseDirt_R_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, UseDirt_L_B) == 0x00058A, "Member 'ACutsceneCar_C::UseDirt_L_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, UseDirt_R_B) == 0x00058B, "Member 'ACutsceneCar_C::UseDirt_R_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedDirt_L_F) == 0x00058C, "Member 'ACutsceneCar_C::SettedDirt_L_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedDirt_R_F) == 0x00058D, "Member 'ACutsceneCar_C::SettedDirt_R_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedDirt_L_B) == 0x00058E, "Member 'ACutsceneCar_C::SettedDirt_L_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedDirt_R_B) == 0x00058F, "Member 'ACutsceneCar_C::SettedDirt_R_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedSnow_L_F) == 0x000590, "Member 'ACutsceneCar_C::SettedSnow_L_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedSnow_R_F) == 0x000591, "Member 'ACutsceneCar_C::SettedSnow_R_F' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedSnow_L_B) == 0x000592, "Member 'ACutsceneCar_C::SettedSnow_L_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SettedSnow_R_B) == 0x000593, "Member 'ACutsceneCar_C::SettedSnow_R_B' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, RoadPitch) == 0x000598, "Member 'ACutsceneCar_C::RoadPitch' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, RoadVelocity) == 0x0005A0, "Member 'ACutsceneCar_C::RoadVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_GritDirtVelocity) == 0x0005A8, "Member 'ACutsceneCar_C::R_GritDirtVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_SnowSprayVelocity) == 0x0005B0, "Member 'ACutsceneCar_C::R_SnowSprayVelocity' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_CloudsLocation) == 0x0005B8, "Member 'ACutsceneCar_C::R_CloudsLocation' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_CloudsSpawn) == 0x0005C0, "Member 'ACutsceneCar_C::R_CloudsSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_GritDirtSize) == 0x0005C8, "Member 'ACutsceneCar_C::R_GritDirtSize' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_GritSnowSpawn) == 0x0005D0, "Member 'ACutsceneCar_C::R_GritSnowSpawn' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, R_SnowSpraySize) == 0x0005D8, "Member 'ACutsceneCar_C::R_SnowSpraySize' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, PlayerRef) == 0x0005E0, "Member 'ACutsceneCar_C::PlayerRef' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Sequence) == 0x0005E8, "Member 'ACutsceneCar_C::Sequence' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SeatAnimSockets) == 0x0005F0, "Member 'ACutsceneCar_C::SeatAnimSockets' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, SequenceDelay) == 0x000600, "Member 'ACutsceneCar_C::SequenceDelay' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, Passanger) == 0x000608, "Member 'ACutsceneCar_C::Passanger' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, PassengerSequence) == 0x000610, "Member 'ACutsceneCar_C::PassengerSequence' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, ExitTimer) == 0x000618, "Member 'ACutsceneCar_C::ExitTimer' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, UseWater) == 0x000620, "Member 'ACutsceneCar_C::UseWater' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, CarSpeed) == 0x000628, "Member 'ACutsceneCar_C::CarSpeed' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, FrontLightMat) == 0x000630, "Member 'ACutsceneCar_C::FrontLightMat' has a wrong offset!");
static_assert(offsetof(ACutsceneCar_C, FrontLightMatIndex) == 0x000638, "Member 'ACutsceneCar_C::FrontLightMatIndex' has a wrong offset!");

}

