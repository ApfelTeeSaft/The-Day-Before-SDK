#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: QuestFramework

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "ModelViewViewModel_classes.hpp"
#include "QuestFramework_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class QuestFramework.Quest
// 0x0070 (0x0098 - 0x0028)
class UQuest final : public UObject
{
public:
	class FText                                   DisplayName;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UQuestCustomData*                       CustomData;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDefaultQuestVariable>          DefaultVariables;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FQuestVariableBounds>           VariableBounds;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UQuestService*>                  Services;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGuid                                  QuestGuid;                                         // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UQuestNode*>                     Nodes;                                             // 0x0088(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class UQuestNode_Stage* FindStageNodeByName(const class FName& Param_Name) const;
	void GetAllStageNodesNames(TArray<class FName>* OutNames) const;
	const class UQuestCustomData* GetCustomData() const;
	class FText GetDisplayName() const;
	struct FGuid GetGuid() const;
	class UQuestNode_Root* GetRootNode() const;
	bool HasValidGuid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Quest">();
	}
	static class UQuest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuest>();
	}
};
static_assert(alignof(UQuest) == 0x000008, "Wrong alignment on UQuest");
static_assert(sizeof(UQuest) == 0x000098, "Wrong size on UQuest");
static_assert(offsetof(UQuest, DisplayName) == 0x000028, "Member 'UQuest::DisplayName' has a wrong offset!");
static_assert(offsetof(UQuest, CustomData) == 0x000040, "Member 'UQuest::CustomData' has a wrong offset!");
static_assert(offsetof(UQuest, DefaultVariables) == 0x000048, "Member 'UQuest::DefaultVariables' has a wrong offset!");
static_assert(offsetof(UQuest, VariableBounds) == 0x000058, "Member 'UQuest::VariableBounds' has a wrong offset!");
static_assert(offsetof(UQuest, Services) == 0x000068, "Member 'UQuest::Services' has a wrong offset!");
static_assert(offsetof(UQuest, QuestGuid) == 0x000078, "Member 'UQuest::QuestGuid' has a wrong offset!");
static_assert(offsetof(UQuest, Nodes) == 0x000088, "Member 'UQuest::Nodes' has a wrong offset!");

// Class QuestFramework.QuestContextViewModel
// 0x0050 (0x00B8 - 0x0068)
class UQuestContextViewModel final : public UMVVMViewModelBase
{
public:
	class FText                                   Title;                                             // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   JournalText;                                       // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EQuestResult                                  QuestState;                                        // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTracked;                                         // 0x0099(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UQuestObjectiveViewModel*>       ObjectiveViewModels;                               // 0x00A0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TrackQuest(bool bTrack);

	TArray<class UQuestObjectiveViewModel*> GetActiveObjectives() const;
	ESlateVisibility GetTrackedVisibility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestContextViewModel">();
	}
	static class UQuestContextViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestContextViewModel>();
	}
};
static_assert(alignof(UQuestContextViewModel) == 0x000008, "Wrong alignment on UQuestContextViewModel");
static_assert(sizeof(UQuestContextViewModel) == 0x0000B8, "Wrong size on UQuestContextViewModel");
static_assert(offsetof(UQuestContextViewModel, Title) == 0x000068, "Member 'UQuestContextViewModel::Title' has a wrong offset!");
static_assert(offsetof(UQuestContextViewModel, JournalText) == 0x000080, "Member 'UQuestContextViewModel::JournalText' has a wrong offset!");
static_assert(offsetof(UQuestContextViewModel, QuestState) == 0x000098, "Member 'UQuestContextViewModel::QuestState' has a wrong offset!");
static_assert(offsetof(UQuestContextViewModel, IsTracked) == 0x000099, "Member 'UQuestContextViewModel::IsTracked' has a wrong offset!");
static_assert(offsetof(UQuestContextViewModel, ObjectiveViewModels) == 0x0000A0, "Member 'UQuestContextViewModel::ObjectiveViewModels' has a wrong offset!");

// Class QuestFramework.QuestComponent
// 0x0080 (0x0120 - 0x00A0)
class UQuestComponent final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnQuestContextCreated;                             // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnQuestContextSuspend;                             // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UQuestContext*>                  ActiveQuestContexts;                               // 0x00C0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x50];                                      // 0x00D0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UQuestContext* CreateQuestContext(class UQuest* Quest, bool bStart);
	bool LoadQuestStates(const struct FQuestSaveStateData& SaveData, bool bForceRestore);
	void OnRep_ActiveQuestContexts(const TArray<class UQuestContext*>& OldActiveContexts);
	bool SaveQuestStates(struct FQuestSaveStateData* SaveData);
	void SuspendAllQuests();
	void SuspendQuest(class UQuestContext* QuestContext);

	void FindAllActiveQuestContexts(class UQuest* Quest, TArray<class UQuestContext*>* OutContexts) const;
	class UQuestContext* FindFirstActiveQuestContext(class UQuest* Quest) const;
	void GetAllActiveQuestContexts(TArray<class UQuestContext*>* OutContexts) const;
	bool HasActiveQuestContext(class UQuest* Quest) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestComponent">();
	}
	static class UQuestComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestComponent>();
	}
};
static_assert(alignof(UQuestComponent) == 0x000008, "Wrong alignment on UQuestComponent");
static_assert(sizeof(UQuestComponent) == 0x000120, "Wrong size on UQuestComponent");
static_assert(offsetof(UQuestComponent, OnQuestContextCreated) == 0x0000A0, "Member 'UQuestComponent::OnQuestContextCreated' has a wrong offset!");
static_assert(offsetof(UQuestComponent, OnQuestContextSuspend) == 0x0000B0, "Member 'UQuestComponent::OnQuestContextSuspend' has a wrong offset!");
static_assert(offsetof(UQuestComponent, ActiveQuestContexts) == 0x0000C0, "Member 'UQuestComponent::ActiveQuestContexts' has a wrong offset!");

// Class QuestFramework.QuestComponentInterface
// 0x0000 (0x0028 - 0x0028)
class IQuestComponentInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestComponentInterface">();
	}
	static class IQuestComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IQuestComponentInterface>();
	}
};
static_assert(alignof(IQuestComponentInterface) == 0x000008, "Wrong alignment on IQuestComponentInterface");
static_assert(sizeof(IQuestComponentInterface) == 0x000028, "Wrong size on IQuestComponentInterface");

// Class QuestFramework.QuestObjectBase
// 0x0008 (0x0030 - 0x0028)
class UQuestObjectBase : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestObjectBase">();
	}
	static class UQuestObjectBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestObjectBase>();
	}
};
static_assert(alignof(UQuestObjectBase) == 0x000008, "Wrong alignment on UQuestObjectBase");
static_assert(sizeof(UQuestObjectBase) == 0x000030, "Wrong size on UQuestObjectBase");

// Class QuestFramework.QuestCondition
// 0x0000 (0x0030 - 0x0030)
class UQuestCondition : public UQuestObjectBase
{
public:
	bool CheckCondition(class UQuestContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestCondition">();
	}
	static class UQuestCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestCondition>();
	}
};
static_assert(alignof(UQuestCondition) == 0x000008, "Wrong alignment on UQuestCondition");
static_assert(sizeof(UQuestCondition) == 0x000030, "Wrong size on UQuestCondition");

// Class QuestFramework.QuestCondition_VariableQuery
// 0x0018 (0x0048 - 0x0030)
class UQuestCondition_VariableQuery final : public UQuestCondition
{
public:
	struct FQuestMemoryQuery                      Query;                                             // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestCondition_VariableQuery">();
	}
	static class UQuestCondition_VariableQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestCondition_VariableQuery>();
	}
};
static_assert(alignof(UQuestCondition_VariableQuery) == 0x000008, "Wrong alignment on UQuestCondition_VariableQuery");
static_assert(sizeof(UQuestCondition_VariableQuery) == 0x000048, "Wrong size on UQuestCondition_VariableQuery");
static_assert(offsetof(UQuestCondition_VariableQuery, Query) == 0x000030, "Member 'UQuestCondition_VariableQuery::Query' has a wrong offset!");

// Class QuestFramework.QuestContext
// 0x0320 (0x0350 - 0x0030)
class UQuestContext final : public UQuestObjectBase
{
public:
	FMulticastInlineDelegateProperty_             OnQuestStarted;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnQuestEnded;                                      // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActiveNodeChanged;                               // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStageBegin;                                      // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStageEnded;                                      // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnObjectiveActivated;                              // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnObjectiveDeactivated;                            // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnObjectiveResultChanged;                          // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x4];                                       // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ContextGuid;                                       // 0x00B4(0x0010)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        QuestStatePacked;                                  // 0x00C8(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint64                                        CurrentNodeIndexPacked;                            // 0x00D0(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UQuest*                                 QuestAsset;                                        // 0x00D8(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UQuestMemory*                           ContextMemory;                                     // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UQuestObjective*>                ActiveObjectives;                                  // 0x00E8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<class UQuestService*>                  ActiveStageServices;                               // 0x00F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UQuestService*>                  ActiveContextServices;                             // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class UQuestObjective*, EQuestResult>    LastObjectiveResults;                              // 0x0118(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuestContextViewModel*                 ViewModel;                                         // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UQuestObjective*, class UQuestObjectiveViewModel*> ObjectiveViewModels;                               // 0x0178(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuestMemoryBlockReplicator            MemoryReplicator;                                  // 0x01D0(0x0120)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	struct FQuestObjectiveResultReplicator        ObjectiveResultReplicator;                         // 0x02F0(0x0018)(Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_308[0x48];                                     // 0x0308(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeactivateObjective(class UQuestObjective* Objective);
	bool JumpToStageByName(class FName StageName);
	bool JumpToStageNode(const class UQuestNode_Stage* StageNode);
	void OnRep_ActiveObjectives(TArray<class UQuestObjective*>* OldObjectives);
	void OnRep_CurrentNodeIndex();
	void OnRep_MemoryReplicator();
	void OnRep_ObjectiveResultReplicator();
	void OnRep_QuestAsset();
	void OnRep_QuestState();
	void RefreshObjectiveViewModel(class UQuestObjective* Objective);
	void RefreshViewModel(bool bUpdateQuestData, bool bUpdateObjectiveList, bool bRefreshObjectiveViewModels);
	void Start();
	bool TryActivateObjective(class UQuestObjective* Objective);

	class UQuestNode* GetActiveNode() const;
	int32 GetActiveNodeIndex() const;
	void GetActiveObjectives(TArray<class UQuestObjective*>* Objectives) const;
	EQuestNetworkAuthority GetAuthority() const;
	void GetCurrentObjectives(TArray<class UQuestObjective*>* Objectives) const;
	struct FGuid GetGuid() const;
	EQuestResult GetObjectiveResult(class UQuestObjective* Objective, bool bReEvaluate) const;
	class UQuestObjectiveViewModel* GetObjectiveViewModel(class UQuestObjective* Objective) const;
	class AActor* GetOwnerActor() const;
	class AController* GetOwnerController() const;
	class UQuestComponent* GetOwnerQuestComponent() const;
	class UQuest* GetQuestAsset() const;
	class UQuestMemory* GetQuestMemory() const;
	EQuestResult GetQuestState() const;
	class UQuestContextViewModel* GetViewModel() const;
	bool HasAuthority() const;
	bool HasEnded() const;
	bool IsInitialized() const;
	bool IsObjectiveActive(class UQuestObjective* Objective) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestContext">();
	}
	static class UQuestContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestContext>();
	}
};
static_assert(alignof(UQuestContext) == 0x000008, "Wrong alignment on UQuestContext");
static_assert(sizeof(UQuestContext) == 0x000350, "Wrong size on UQuestContext");
static_assert(offsetof(UQuestContext, OnQuestStarted) == 0x000030, "Member 'UQuestContext::OnQuestStarted' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnQuestEnded) == 0x000040, "Member 'UQuestContext::OnQuestEnded' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnActiveNodeChanged) == 0x000050, "Member 'UQuestContext::OnActiveNodeChanged' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnStageBegin) == 0x000060, "Member 'UQuestContext::OnStageBegin' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnStageEnded) == 0x000070, "Member 'UQuestContext::OnStageEnded' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnObjectiveActivated) == 0x000080, "Member 'UQuestContext::OnObjectiveActivated' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnObjectiveDeactivated) == 0x000090, "Member 'UQuestContext::OnObjectiveDeactivated' has a wrong offset!");
static_assert(offsetof(UQuestContext, OnObjectiveResultChanged) == 0x0000A0, "Member 'UQuestContext::OnObjectiveResultChanged' has a wrong offset!");
static_assert(offsetof(UQuestContext, ContextGuid) == 0x0000B4, "Member 'UQuestContext::ContextGuid' has a wrong offset!");
static_assert(offsetof(UQuestContext, QuestStatePacked) == 0x0000C8, "Member 'UQuestContext::QuestStatePacked' has a wrong offset!");
static_assert(offsetof(UQuestContext, CurrentNodeIndexPacked) == 0x0000D0, "Member 'UQuestContext::CurrentNodeIndexPacked' has a wrong offset!");
static_assert(offsetof(UQuestContext, QuestAsset) == 0x0000D8, "Member 'UQuestContext::QuestAsset' has a wrong offset!");
static_assert(offsetof(UQuestContext, ContextMemory) == 0x0000E0, "Member 'UQuestContext::ContextMemory' has a wrong offset!");
static_assert(offsetof(UQuestContext, ActiveObjectives) == 0x0000E8, "Member 'UQuestContext::ActiveObjectives' has a wrong offset!");
static_assert(offsetof(UQuestContext, ActiveStageServices) == 0x0000F8, "Member 'UQuestContext::ActiveStageServices' has a wrong offset!");
static_assert(offsetof(UQuestContext, ActiveContextServices) == 0x000108, "Member 'UQuestContext::ActiveContextServices' has a wrong offset!");
static_assert(offsetof(UQuestContext, LastObjectiveResults) == 0x000118, "Member 'UQuestContext::LastObjectiveResults' has a wrong offset!");
static_assert(offsetof(UQuestContext, ViewModel) == 0x000170, "Member 'UQuestContext::ViewModel' has a wrong offset!");
static_assert(offsetof(UQuestContext, ObjectiveViewModels) == 0x000178, "Member 'UQuestContext::ObjectiveViewModels' has a wrong offset!");
static_assert(offsetof(UQuestContext, MemoryReplicator) == 0x0001D0, "Member 'UQuestContext::MemoryReplicator' has a wrong offset!");
static_assert(offsetof(UQuestContext, ObjectiveResultReplicator) == 0x0002F0, "Member 'UQuestContext::ObjectiveResultReplicator' has a wrong offset!");

// Class QuestFramework.QuestCustomData
// 0x0000 (0x0028 - 0x0028)
class UQuestCustomData : public UObject
{
public:
	class UQuest* GetQuestAsset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestCustomData">();
	}
	static class UQuestCustomData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestCustomData>();
	}
};
static_assert(alignof(UQuestCustomData) == 0x000008, "Wrong alignment on UQuestCustomData");
static_assert(sizeof(UQuestCustomData) == 0x000028, "Wrong size on UQuestCustomData");

// Class QuestFramework.QuestEvent
// 0x0008 (0x0038 - 0x0030)
class UQuestEvent : public UQuestObjectBase
{
public:
	EQuestNetworkExecType                         NetworkExecutionType;                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerOnStateRestore;                            // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ExecuteEvent(class UQuestContext* Context, const struct FQuestEventPayload& Payload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestEvent">();
	}
	static class UQuestEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestEvent>();
	}
};
static_assert(alignof(UQuestEvent) == 0x000008, "Wrong alignment on UQuestEvent");
static_assert(sizeof(UQuestEvent) == 0x000038, "Wrong size on UQuestEvent");
static_assert(offsetof(UQuestEvent, NetworkExecutionType) == 0x000030, "Member 'UQuestEvent::NetworkExecutionType' has a wrong offset!");
static_assert(offsetof(UQuestEvent, bTriggerOnStateRestore) == 0x000031, "Member 'UQuestEvent::bTriggerOnStateRestore' has a wrong offset!");

// Class QuestFramework.QuestMessageEvent
// 0x0028 (0x0060 - 0x0038)
class UQuestMessageEvent final : public UQuestEvent
{
public:
	struct FGameplayTag                           MessageTag;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuestEventPayload                     Payload;                                           // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestMessageEvent">();
	}
	static class UQuestMessageEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestMessageEvent>();
	}
};
static_assert(alignof(UQuestMessageEvent) == 0x000008, "Wrong alignment on UQuestMessageEvent");
static_assert(sizeof(UQuestMessageEvent) == 0x000060, "Wrong size on UQuestMessageEvent");
static_assert(offsetof(UQuestMessageEvent, MessageTag) == 0x000038, "Member 'UQuestMessageEvent::MessageTag' has a wrong offset!");
static_assert(offsetof(UQuestMessageEvent, Payload) == 0x000040, "Member 'UQuestMessageEvent::Payload' has a wrong offset!");

// Class QuestFramework.QuestEvent_SetVariable
// 0x0018 (0x0050 - 0x0038)
class UQuestEvent_SetVariable final : public UQuestEvent
{
public:
	struct FQuestVariableInitializer              VariableSetter;                                    // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestEvent_SetVariable">();
	}
	static class UQuestEvent_SetVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestEvent_SetVariable>();
	}
};
static_assert(alignof(UQuestEvent_SetVariable) == 0x000008, "Wrong alignment on UQuestEvent_SetVariable");
static_assert(sizeof(UQuestEvent_SetVariable) == 0x000050, "Wrong size on UQuestEvent_SetVariable");
static_assert(offsetof(UQuestEvent_SetVariable, VariableSetter) == 0x000038, "Member 'UQuestEvent_SetVariable::VariableSetter' has a wrong offset!");

// Class QuestFramework.QuestFrameworkSettings
// 0x0030 (0x0068 - 0x0038)
class UQuestFrameworkSettings final : public UDeveloperSettings
{
public:
	TArray<class FString>                         QuestAssetPaths;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class UQuestContextViewModel>     QuestContextViewModelClass;                        // 0x0048(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UQuestObjectiveViewModel>   QuestObjectiveViewModelClass;                      // 0x0050(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UQuestTrackerViewModel>     QuestTrackerViewModelClass;                        // 0x0058(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UQuestListViewModel>        QuestListViewModelClass;                           // 0x0060(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestFrameworkSettings">();
	}
	static class UQuestFrameworkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestFrameworkSettings>();
	}
};
static_assert(alignof(UQuestFrameworkSettings) == 0x000008, "Wrong alignment on UQuestFrameworkSettings");
static_assert(sizeof(UQuestFrameworkSettings) == 0x000068, "Wrong size on UQuestFrameworkSettings");
static_assert(offsetof(UQuestFrameworkSettings, QuestAssetPaths) == 0x000038, "Member 'UQuestFrameworkSettings::QuestAssetPaths' has a wrong offset!");
static_assert(offsetof(UQuestFrameworkSettings, QuestContextViewModelClass) == 0x000048, "Member 'UQuestFrameworkSettings::QuestContextViewModelClass' has a wrong offset!");
static_assert(offsetof(UQuestFrameworkSettings, QuestObjectiveViewModelClass) == 0x000050, "Member 'UQuestFrameworkSettings::QuestObjectiveViewModelClass' has a wrong offset!");
static_assert(offsetof(UQuestFrameworkSettings, QuestTrackerViewModelClass) == 0x000058, "Member 'UQuestFrameworkSettings::QuestTrackerViewModelClass' has a wrong offset!");
static_assert(offsetof(UQuestFrameworkSettings, QuestListViewModelClass) == 0x000060, "Member 'UQuestFrameworkSettings::QuestListViewModelClass' has a wrong offset!");

// Class QuestFramework.QuestFrameworkSubsystem
// 0x0008 (0x0038 - 0x0030)
class UQuestFrameworkSubsystem final : public UGameInstanceSubsystem
{
public:
	class UQuestManager*                          QuestManager;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestFrameworkSubsystem">();
	}
	static class UQuestFrameworkSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestFrameworkSubsystem>();
	}
};
static_assert(alignof(UQuestFrameworkSubsystem) == 0x000008, "Wrong alignment on UQuestFrameworkSubsystem");
static_assert(sizeof(UQuestFrameworkSubsystem) == 0x000038, "Wrong size on UQuestFrameworkSubsystem");
static_assert(offsetof(UQuestFrameworkSubsystem, QuestManager) == 0x000030, "Member 'UQuestFrameworkSubsystem::QuestManager' has a wrong offset!");

// Class QuestFramework.QuestListViewModel
// 0x0018 (0x0080 - 0x0068)
class UQuestListViewModel final : public UMVVMViewModelBase
{
public:
	TArray<class UQuestContextViewModel*>         ContextViewModels;                                 // 0x0068(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UQuestContextViewModel*                 DetailContextViewModel;                            // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDetailQuestContextViewModel(class UQuestContextViewModel* ViewModel);

	TArray<class UQuestContextViewModel*> GetCompletedQuestContexts() const;
	class UQuestContextViewModel* GetDetailQuestContextViewModel() const;
	TArray<class UQuestContextViewModel*> GetFailedQuestContexts() const;
	TArray<class UQuestContextViewModel*> GetInProgressQuestContexts() const;
	TArray<class UQuestContextViewModel*> GetQuestContexts() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestListViewModel">();
	}
	static class UQuestListViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestListViewModel>();
	}
};
static_assert(alignof(UQuestListViewModel) == 0x000008, "Wrong alignment on UQuestListViewModel");
static_assert(sizeof(UQuestListViewModel) == 0x000080, "Wrong size on UQuestListViewModel");
static_assert(offsetof(UQuestListViewModel, ContextViewModels) == 0x000068, "Member 'UQuestListViewModel::ContextViewModels' has a wrong offset!");
static_assert(offsetof(UQuestListViewModel, DetailContextViewModel) == 0x000078, "Member 'UQuestListViewModel::DetailContextViewModel' has a wrong offset!");

// Class QuestFramework.QuestManager
// 0x0120 (0x0150 - 0x0030)
class UQuestManager final : public UQuestObjectBase
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UQuestComponent*>                  QuestComponents;                                   // 0x0040(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSet<class UQuestMessageComponent*>           MessageListeners;                                  // 0x0090(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSet<struct FQuestContextMessageListener>     QuestContextMessageListeners;                      // 0x00E0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	struct FQuestAssetLibrary                     RuntimeQuestAssetLibrary;                          // 0x0130(0x0020)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UQuestManager* GetQuestManager(const class UObject* WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestManager">();
	}
	static class UQuestManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestManager>();
	}
};
static_assert(alignof(UQuestManager) == 0x000008, "Wrong alignment on UQuestManager");
static_assert(sizeof(UQuestManager) == 0x000150, "Wrong size on UQuestManager");
static_assert(offsetof(UQuestManager, QuestComponents) == 0x000040, "Member 'UQuestManager::QuestComponents' has a wrong offset!");
static_assert(offsetof(UQuestManager, MessageListeners) == 0x000090, "Member 'UQuestManager::MessageListeners' has a wrong offset!");
static_assert(offsetof(UQuestManager, QuestContextMessageListeners) == 0x0000E0, "Member 'UQuestManager::QuestContextMessageListeners' has a wrong offset!");
static_assert(offsetof(UQuestManager, RuntimeQuestAssetLibrary) == 0x000130, "Member 'UQuestManager::RuntimeQuestAssetLibrary' has a wrong offset!");

// Class QuestFramework.QuestManagerAccess
// 0x0000 (0x0028 - 0x0028)
class IQuestManagerAccess final : public IInterface
{
public:
	void RetainQuestManager(class UQuestManager* Manager);

	class UQuestManager* GetQuestManagerInstance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestManagerAccess">();
	}
	static class IQuestManagerAccess* GetDefaultObj()
	{
		return GetDefaultObjImpl<IQuestManagerAccess>();
	}
};
static_assert(alignof(IQuestManagerAccess) == 0x000008, "Wrong alignment on IQuestManagerAccess");
static_assert(sizeof(IQuestManagerAccess) == 0x000028, "Wrong size on IQuestManagerAccess");

// Class QuestFramework.QuestMemory
// 0x08F8 (0x0928 - 0x0030)
class UQuestMemory final : public UQuestObjectBase
{
public:
	struct FQuestMemoryBlock                      MemoryBlock;                                       // 0x0030(0x08F8)(Protected, NativeAccessSpecifierProtected)

public:
	void SetBool(class FName Variable, bool Value);
	void SetFloat(class FName Variable, float Value);
	void SetInteger(class FName Variable, int32 Value);

	bool GetBool(class FName Variable) const;
	float GetFloat(class FName Variable) const;
	int32 GetInteger(class FName Variable) const;
	bool RunQuery(const struct FQuestMemoryQuery& Query) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestMemory">();
	}
	static class UQuestMemory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestMemory>();
	}
};
static_assert(alignof(UQuestMemory) == 0x000008, "Wrong alignment on UQuestMemory");
static_assert(sizeof(UQuestMemory) == 0x000928, "Wrong size on UQuestMemory");
static_assert(offsetof(UQuestMemory, MemoryBlock) == 0x000030, "Member 'UQuestMemory::MemoryBlock' has a wrong offset!");

// Class QuestFramework.QuestMessageComponent
// 0x0038 (0x00D8 - 0x00A0)
class UQuestMessageComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnQuestMessage;                                    // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MessagesToListen;                                  // 0x00B8(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void BroadcastQuestMessage(const struct FGameplayTag& MessageTag, const struct FQuestEventPayload& Payload);
	void SendQuestMessage(const struct FGameplayTag& MessageTag, const struct FQuestEventPayload& Payload, class AActor* Recipient);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestMessageComponent">();
	}
	static class UQuestMessageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestMessageComponent>();
	}
};
static_assert(alignof(UQuestMessageComponent) == 0x000008, "Wrong alignment on UQuestMessageComponent");
static_assert(sizeof(UQuestMessageComponent) == 0x0000D8, "Wrong size on UQuestMessageComponent");
static_assert(offsetof(UQuestMessageComponent, OnQuestMessage) == 0x0000A8, "Member 'UQuestMessageComponent::OnQuestMessage' has a wrong offset!");
static_assert(offsetof(UQuestMessageComponent, MessagesToListen) == 0x0000B8, "Member 'UQuestMessageComponent::MessagesToListen' has a wrong offset!");

// Class QuestFramework.QuestMessageInterface
// 0x0000 (0x0028 - 0x0028)
class IQuestMessageInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestMessageInterface">();
	}
	static class IQuestMessageInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IQuestMessageInterface>();
	}
};
static_assert(alignof(IQuestMessageInterface) == 0x000008, "Wrong alignment on IQuestMessageInterface");
static_assert(sizeof(IQuestMessageInterface) == 0x000028, "Wrong size on IQuestMessageInterface");

// Class QuestFramework.QuestNode
// 0x0068 (0x0090 - 0x0028)
class UQuestNode : public UObject
{
public:
	int32                                         NodeIndex;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  NodeGuid;                                          // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Children;                                          // 0x0040(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UQuestEvent*>                    EntryEvents;                                       // 0x0050(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UQuestCustomData*                       CustomData;                                        // 0x0060(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuestText                             NodeText;                                          // 0x0068(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	const class UQuestCustomData* GetCustomData() const;
	struct FGuid GetNodeGuid() const;
	int32 GetNodeIndex() const;
	class FText GetNodeText(class UQuestContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestNode">();
	}
	static class UQuestNode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestNode>();
	}
};
static_assert(alignof(UQuestNode) == 0x000008, "Wrong alignment on UQuestNode");
static_assert(sizeof(UQuestNode) == 0x000090, "Wrong size on UQuestNode");
static_assert(offsetof(UQuestNode, NodeIndex) == 0x000028, "Member 'UQuestNode::NodeIndex' has a wrong offset!");
static_assert(offsetof(UQuestNode, NodeGuid) == 0x00002C, "Member 'UQuestNode::NodeGuid' has a wrong offset!");
static_assert(offsetof(UQuestNode, Children) == 0x000040, "Member 'UQuestNode::Children' has a wrong offset!");
static_assert(offsetof(UQuestNode, EntryEvents) == 0x000050, "Member 'UQuestNode::EntryEvents' has a wrong offset!");
static_assert(offsetof(UQuestNode, CustomData) == 0x000060, "Member 'UQuestNode::CustomData' has a wrong offset!");
static_assert(offsetof(UQuestNode, NodeText) == 0x000068, "Member 'UQuestNode::NodeText' has a wrong offset!");

// Class QuestFramework.QuestNode_End
// 0x0008 (0x0098 - 0x0090)
class UQuestNode_End final : public UQuestNode
{
public:
	bool                                          bCompleted;                                        // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EQuestResult GetEndResultType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestNode_End">();
	}
	static class UQuestNode_End* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestNode_End>();
	}
};
static_assert(alignof(UQuestNode_End) == 0x000008, "Wrong alignment on UQuestNode_End");
static_assert(sizeof(UQuestNode_End) == 0x000098, "Wrong size on UQuestNode_End");
static_assert(offsetof(UQuestNode_End, bCompleted) == 0x000090, "Member 'UQuestNode_End::bCompleted' has a wrong offset!");

// Class QuestFramework.QuestNode_Root
// 0x0000 (0x0090 - 0x0090)
class UQuestNode_Root final : public UQuestNode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestNode_Root">();
	}
	static class UQuestNode_Root* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestNode_Root>();
	}
};
static_assert(alignof(UQuestNode_Root) == 0x000008, "Wrong alignment on UQuestNode_Root");
static_assert(sizeof(UQuestNode_Root) == 0x000090, "Wrong size on UQuestNode_Root");

// Class QuestFramework.QuestNode_Selector
// 0x0060 (0x00F0 - 0x0090)
class UQuestNode_Selector final : public UQuestNode
{
public:
	TArray<struct FQuestConditions>               Conditions;                                        // 0x0090(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<int32, int32>                            ChildToConditionIndexTable;                        // 0x00A0(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestNode_Selector">();
	}
	static class UQuestNode_Selector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestNode_Selector>();
	}
};
static_assert(alignof(UQuestNode_Selector) == 0x000008, "Wrong alignment on UQuestNode_Selector");
static_assert(sizeof(UQuestNode_Selector) == 0x0000F0, "Wrong size on UQuestNode_Selector");
static_assert(offsetof(UQuestNode_Selector, Conditions) == 0x000090, "Member 'UQuestNode_Selector::Conditions' has a wrong offset!");
static_assert(offsetof(UQuestNode_Selector, ChildToConditionIndexTable) == 0x0000A0, "Member 'UQuestNode_Selector::ChildToConditionIndexTable' has a wrong offset!");

// Class QuestFramework.QuestNode_Stage
// 0x0078 (0x0108 - 0x0090)
class UQuestNode_Stage final : public UQuestNode
{
public:
	class FName                                   LogicalName;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuestText                             StageName;                                         // 0x0098(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FQuestText                             StageDescription;                                  // 0x00C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FQuestStageObjectives                  Objectives;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UQuestService*>                  Services;                                          // 0x00F8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	class UQuestObjective* FindObjectiveByName(const class FName& Param_Name) const;
	void GetAllObjectiveNames(TArray<class FName>* OutNames) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestNode_Stage">();
	}
	static class UQuestNode_Stage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestNode_Stage>();
	}
};
static_assert(alignof(UQuestNode_Stage) == 0x000008, "Wrong alignment on UQuestNode_Stage");
static_assert(sizeof(UQuestNode_Stage) == 0x000108, "Wrong size on UQuestNode_Stage");
static_assert(offsetof(UQuestNode_Stage, LogicalName) == 0x000090, "Member 'UQuestNode_Stage::LogicalName' has a wrong offset!");
static_assert(offsetof(UQuestNode_Stage, StageName) == 0x000098, "Member 'UQuestNode_Stage::StageName' has a wrong offset!");
static_assert(offsetof(UQuestNode_Stage, StageDescription) == 0x0000C0, "Member 'UQuestNode_Stage::StageDescription' has a wrong offset!");
static_assert(offsetof(UQuestNode_Stage, Objectives) == 0x0000E8, "Member 'UQuestNode_Stage::Objectives' has a wrong offset!");
static_assert(offsetof(UQuestNode_Stage, Services) == 0x0000F8, "Member 'UQuestNode_Stage::Services' has a wrong offset!");

// Class QuestFramework.QuestObjective
// 0x0070 (0x00A0 - 0x0030)
class UQuestObjective final : public UQuestObjectBase
{
public:
	class FName                                   LogicalName;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuestText                             ShortDescription;                                  // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FQuestText                             LongDescription;                                   // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EQuestObjectiveSignificancy                   Significancy;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuestObjectiveObserver*                Observer;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomObserver;                                // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HasTextArguments() const;
	bool IsActive(const class UQuestContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestObjective">();
	}
	static class UQuestObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestObjective>();
	}
};
static_assert(alignof(UQuestObjective) == 0x000008, "Wrong alignment on UQuestObjective");
static_assert(sizeof(UQuestObjective) == 0x0000A0, "Wrong size on UQuestObjective");
static_assert(offsetof(UQuestObjective, LogicalName) == 0x000030, "Member 'UQuestObjective::LogicalName' has a wrong offset!");
static_assert(offsetof(UQuestObjective, ShortDescription) == 0x000038, "Member 'UQuestObjective::ShortDescription' has a wrong offset!");
static_assert(offsetof(UQuestObjective, LongDescription) == 0x000060, "Member 'UQuestObjective::LongDescription' has a wrong offset!");
static_assert(offsetof(UQuestObjective, Significancy) == 0x000088, "Member 'UQuestObjective::Significancy' has a wrong offset!");
static_assert(offsetof(UQuestObjective, Observer) == 0x000090, "Member 'UQuestObjective::Observer' has a wrong offset!");
static_assert(offsetof(UQuestObjective, bAutoActivate) == 0x000098, "Member 'UQuestObjective::bAutoActivate' has a wrong offset!");
static_assert(offsetof(UQuestObjective, bUseCustomObserver) == 0x000099, "Member 'UQuestObjective::bUseCustomObserver' has a wrong offset!");

// Class QuestFramework.QuestObjectiveObserver
// 0x0000 (0x0030 - 0x0030)
class UQuestObjectiveObserver : public UQuestObjectBase
{
public:
	EQuestResult Evaluate(class UQuestContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestObjectiveObserver">();
	}
	static class UQuestObjectiveObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestObjectiveObserver>();
	}
};
static_assert(alignof(UQuestObjectiveObserver) == 0x000008, "Wrong alignment on UQuestObjectiveObserver");
static_assert(sizeof(UQuestObjectiveObserver) == 0x000030, "Wrong size on UQuestObjectiveObserver");

// Class QuestFramework.ObjectiveObserver_VariableQuery
// 0x0030 (0x0060 - 0x0030)
class UObjectiveObserver_VariableQuery final : public UQuestObjectiveObserver
{
public:
	struct FQuestMemoryQuery                      CompleteQuery;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FQuestMemoryQuery                      FailQuery;                                         // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectiveObserver_VariableQuery">();
	}
	static class UObjectiveObserver_VariableQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectiveObserver_VariableQuery>();
	}
};
static_assert(alignof(UObjectiveObserver_VariableQuery) == 0x000008, "Wrong alignment on UObjectiveObserver_VariableQuery");
static_assert(sizeof(UObjectiveObserver_VariableQuery) == 0x000060, "Wrong size on UObjectiveObserver_VariableQuery");
static_assert(offsetof(UObjectiveObserver_VariableQuery, CompleteQuery) == 0x000030, "Member 'UObjectiveObserver_VariableQuery::CompleteQuery' has a wrong offset!");
static_assert(offsetof(UObjectiveObserver_VariableQuery, FailQuery) == 0x000048, "Member 'UObjectiveObserver_VariableQuery::FailQuery' has a wrong offset!");

// Class QuestFramework.QuestObjectiveViewModel
// 0x0020 (0x0088 - 0x0068)
class UQuestObjectiveViewModel final : public UMVVMViewModelBase
{
public:
	class FText                                   Text;                                              // 0x0068(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EQuestResult                                  ObjectiveState;                                    // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOptional;                                        // 0x0081(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestObjectiveViewModel">();
	}
	static class UQuestObjectiveViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestObjectiveViewModel>();
	}
};
static_assert(alignof(UQuestObjectiveViewModel) == 0x000008, "Wrong alignment on UQuestObjectiveViewModel");
static_assert(sizeof(UQuestObjectiveViewModel) == 0x000088, "Wrong size on UQuestObjectiveViewModel");
static_assert(offsetof(UQuestObjectiveViewModel, Text) == 0x000068, "Member 'UQuestObjectiveViewModel::Text' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveViewModel, ObjectiveState) == 0x000080, "Member 'UQuestObjectiveViewModel::ObjectiveState' has a wrong offset!");
static_assert(offsetof(UQuestObjectiveViewModel, IsOptional) == 0x000081, "Member 'UQuestObjectiveViewModel::IsOptional' has a wrong offset!");

// Class QuestFramework.QuestService
// 0x0008 (0x0038 - 0x0030)
class UQuestService : public UQuestObjectBase
{
public:
	EQuestNetworkExecType                         NetworkExecutionType;                              // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService">();
	}
	static class UQuestService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService>();
	}
};
static_assert(alignof(UQuestService) == 0x000008, "Wrong alignment on UQuestService");
static_assert(sizeof(UQuestService) == 0x000038, "Wrong size on UQuestService");
static_assert(offsetof(UQuestService, NetworkExecutionType) == 0x000030, "Member 'UQuestService::NetworkExecutionType' has a wrong offset!");

// Class QuestFramework.QuestService_BlueprintBase
// 0x0000 (0x0038 - 0x0038)
class UQuestService_BlueprintBase : public UQuestService
{
public:
	void OnServiceActivatedBP(class UQuestContext* Context);
	void OnServiceDeactivatedBP(class UQuestContext* Context);
	void TickServiceBP(class UQuestContext* Context, float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_BlueprintBase">();
	}
	static class UQuestService_BlueprintBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_BlueprintBase>();
	}
};
static_assert(alignof(UQuestService_BlueprintBase) == 0x000008, "Wrong alignment on UQuestService_BlueprintBase");
static_assert(sizeof(UQuestService_BlueprintBase) == 0x000038, "Wrong size on UQuestService_BlueprintBase");

// Class QuestFramework.QuestService_Timer
// 0x0018 (0x0050 - 0x0038)
class UQuestService_Timer final : public UQuestService
{
public:
	float                                         InitialTime;                                       // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Speed;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuestVariable                         Variable;                                          // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_Timer">();
	}
	static class UQuestService_Timer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_Timer>();
	}
};
static_assert(alignof(UQuestService_Timer) == 0x000008, "Wrong alignment on UQuestService_Timer");
static_assert(sizeof(UQuestService_Timer) == 0x000050, "Wrong size on UQuestService_Timer");
static_assert(offsetof(UQuestService_Timer, InitialTime) == 0x000038, "Member 'UQuestService_Timer::InitialTime' has a wrong offset!");
static_assert(offsetof(UQuestService_Timer, Speed) == 0x00003C, "Member 'UQuestService_Timer::Speed' has a wrong offset!");
static_assert(offsetof(UQuestService_Timer, Variable) == 0x000040, "Member 'UQuestService_Timer::Variable' has a wrong offset!");

// Class QuestFramework.QuestService_EventTriggerBase
// 0x0010 (0x0048 - 0x0038)
class UQuestService_EventTriggerBase : public UQuestService
{
public:
	TArray<class UQuestEvent*>                    Events;                                            // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_EventTriggerBase">();
	}
	static class UQuestService_EventTriggerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_EventTriggerBase>();
	}
};
static_assert(alignof(UQuestService_EventTriggerBase) == 0x000008, "Wrong alignment on UQuestService_EventTriggerBase");
static_assert(sizeof(UQuestService_EventTriggerBase) == 0x000048, "Wrong size on UQuestService_EventTriggerBase");
static_assert(offsetof(UQuestService_EventTriggerBase, Events) == 0x000038, "Member 'UQuestService_EventTriggerBase::Events' has a wrong offset!");

// Class QuestFramework.QuestService_EventTrigger_Interval
// 0x0010 (0x0058 - 0x0048)
class UQuestService_EventTrigger_Interval final : public UQuestService_EventTriggerBase
{
public:
	float                                         TriggerInterval;                                   // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerOnActivation;                              // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D[0xB];                                       // 0x004D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_EventTrigger_Interval">();
	}
	static class UQuestService_EventTrigger_Interval* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_EventTrigger_Interval>();
	}
};
static_assert(alignof(UQuestService_EventTrigger_Interval) == 0x000008, "Wrong alignment on UQuestService_EventTrigger_Interval");
static_assert(sizeof(UQuestService_EventTrigger_Interval) == 0x000058, "Wrong size on UQuestService_EventTrigger_Interval");
static_assert(offsetof(UQuestService_EventTrigger_Interval, TriggerInterval) == 0x000048, "Member 'UQuestService_EventTrigger_Interval::TriggerInterval' has a wrong offset!");
static_assert(offsetof(UQuestService_EventTrigger_Interval, bTriggerOnActivation) == 0x00004C, "Member 'UQuestService_EventTrigger_Interval::bTriggerOnActivation' has a wrong offset!");

// Class QuestFramework.QuestService_ListenMessage
// 0x0008 (0x0040 - 0x0038)
class UQuestService_ListenMessage final : public UQuestService_BlueprintBase
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMessageReceived(class UQuestContext* Context, const struct FGameplayTag& MessageTag, const struct FQuestEventPayload& Payload, class AActor* Sender);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_ListenMessage">();
	}
	static class UQuestService_ListenMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_ListenMessage>();
	}
};
static_assert(alignof(UQuestService_ListenMessage) == 0x000008, "Wrong alignment on UQuestService_ListenMessage");
static_assert(sizeof(UQuestService_ListenMessage) == 0x000040, "Wrong size on UQuestService_ListenMessage");

// Class QuestFramework.QuestService_TriggerEventsOnMessage
// 0x0028 (0x0070 - 0x0048)
class UQuestService_TriggerEventsOnMessage final : public UQuestService_EventTriggerBase
{
public:
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MessagesToListen;                                  // 0x0050(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_TriggerEventsOnMessage">();
	}
	static class UQuestService_TriggerEventsOnMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_TriggerEventsOnMessage>();
	}
};
static_assert(alignof(UQuestService_TriggerEventsOnMessage) == 0x000008, "Wrong alignment on UQuestService_TriggerEventsOnMessage");
static_assert(sizeof(UQuestService_TriggerEventsOnMessage) == 0x000070, "Wrong size on UQuestService_TriggerEventsOnMessage");
static_assert(offsetof(UQuestService_TriggerEventsOnMessage, MessagesToListen) == 0x000050, "Member 'UQuestService_TriggerEventsOnMessage::MessagesToListen' has a wrong offset!");

// Class QuestFramework.QuestService_SyncVariable
// 0x0010 (0x0048 - 0x0038)
class UQuestService_SyncVariable final : public UQuestService_BlueprintBase
{
public:
	struct FQuestVariable                         Variable;                                          // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetBoolSyncValue(class UQuestContext* Context) const;
	float GetFloatSyncValue(class UQuestContext* Context) const;
	int32 GetIntegerSyncValue(class UQuestContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestService_SyncVariable">();
	}
	static class UQuestService_SyncVariable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestService_SyncVariable>();
	}
};
static_assert(alignof(UQuestService_SyncVariable) == 0x000008, "Wrong alignment on UQuestService_SyncVariable");
static_assert(sizeof(UQuestService_SyncVariable) == 0x000048, "Wrong size on UQuestService_SyncVariable");
static_assert(offsetof(UQuestService_SyncVariable, Variable) == 0x000038, "Member 'UQuestService_SyncVariable::Variable' has a wrong offset!");

// Class QuestFramework.QuestTextArgument
// 0x0000 (0x0030 - 0x0030)
class UQuestTextArgument : public UQuestObjectBase
{
public:
	class FText GetText(class UQuestContext* Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestTextArgument">();
	}
	static class UQuestTextArgument* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestTextArgument>();
	}
};
static_assert(alignof(UQuestTextArgument) == 0x000008, "Wrong alignment on UQuestTextArgument");
static_assert(sizeof(UQuestTextArgument) == 0x000030, "Wrong size on UQuestTextArgument");

// Class QuestFramework.QuestTrackerComponent
// 0x0058 (0x00F8 - 0x00A0)
class UQuestTrackerComponent final : public UActorComponent
{
public:
	bool                                          bAddPlayerAsSourceOnInit;                          // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTrackOnlySingle;                                  // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoTrackNewQuests;                               // 0x00A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A3[0x5];                                       // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBeginTrackQuest;                                 // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStopTrackQuest;                                  // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UQuestTrackerViewModel*                 ViewModel;                                         // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UQuestListViewModel*                    ListViewModel;                                     // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x20];                                      // 0x00D8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSourceQuestComponent(class UQuestComponent* QuestComponent);
	void HandleOnQuestContextCreated(class UQuestComponent* QuestComponent, class UQuestContext* Context);
	void HandleOnQuestContextSuspended(class UQuestComponent* QuestComponent, class UQuestContext* Context);
	void HandleOnQuestEnded(class UQuestContext* Context);
	void HandleOnQuestStarted(class UQuestContext* Context);
	void RefreshViewModel(bool bTrackerViewModel, bool bQuestListViewModel);
	void RemoveSourceQuestComponent(class UQuestComponent* QuestComponent);
	void StopTrackQuest(class UQuestContext* QuestContext);
	void TrackQuest(class UQuestContext* QuestContext);

	void GetAllQuestContexts(TArray<class UQuestContext*>* OutContexts) const;
	class UQuestListViewModel* GetListViewModel() const;
	void GetTrackedQuestContexts(TArray<class UQuestContext*>* OutContexts) const;
	class UQuestTrackerViewModel* GetViewModel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestTrackerComponent">();
	}
	static class UQuestTrackerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestTrackerComponent>();
	}
};
static_assert(alignof(UQuestTrackerComponent) == 0x000008, "Wrong alignment on UQuestTrackerComponent");
static_assert(sizeof(UQuestTrackerComponent) == 0x0000F8, "Wrong size on UQuestTrackerComponent");
static_assert(offsetof(UQuestTrackerComponent, bAddPlayerAsSourceOnInit) == 0x0000A0, "Member 'UQuestTrackerComponent::bAddPlayerAsSourceOnInit' has a wrong offset!");
static_assert(offsetof(UQuestTrackerComponent, bTrackOnlySingle) == 0x0000A1, "Member 'UQuestTrackerComponent::bTrackOnlySingle' has a wrong offset!");
static_assert(offsetof(UQuestTrackerComponent, bAutoTrackNewQuests) == 0x0000A2, "Member 'UQuestTrackerComponent::bAutoTrackNewQuests' has a wrong offset!");
static_assert(offsetof(UQuestTrackerComponent, OnBeginTrackQuest) == 0x0000A8, "Member 'UQuestTrackerComponent::OnBeginTrackQuest' has a wrong offset!");
static_assert(offsetof(UQuestTrackerComponent, OnStopTrackQuest) == 0x0000B8, "Member 'UQuestTrackerComponent::OnStopTrackQuest' has a wrong offset!");
static_assert(offsetof(UQuestTrackerComponent, ViewModel) == 0x0000C8, "Member 'UQuestTrackerComponent::ViewModel' has a wrong offset!");
static_assert(offsetof(UQuestTrackerComponent, ListViewModel) == 0x0000D0, "Member 'UQuestTrackerComponent::ListViewModel' has a wrong offset!");

// Class QuestFramework.QuestTrackerViewModel
// 0x0010 (0x0078 - 0x0068)
class UQuestTrackerViewModel final : public UMVVMViewModelBase
{
public:
	TArray<class UQuestContextViewModel*>         ContextViewModels;                                 // 0x0068(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	TArray<class UQuestContextViewModel*> GetTrackedQuestContexts() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestTrackerViewModel">();
	}
	static class UQuestTrackerViewModel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestTrackerViewModel>();
	}
};
static_assert(alignof(UQuestTrackerViewModel) == 0x000008, "Wrong alignment on UQuestTrackerViewModel");
static_assert(sizeof(UQuestTrackerViewModel) == 0x000078, "Wrong size on UQuestTrackerViewModel");
static_assert(offsetof(UQuestTrackerViewModel, ContextViewModels) == 0x000068, "Member 'UQuestTrackerViewModel::ContextViewModels' has a wrong offset!");

// Class QuestFramework.QuestUtilityLibrary
// 0x0000 (0x0028 - 0x0028)
class UQuestUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BroadcastQuestMessage(const class UObject* WorldContext, const struct FGameplayTag& MessageTag, const struct FQuestEventPayload& Payload, class AActor* Sender);
	static bool ConvertQuestResultToBool(EQuestResult InResult, bool NotStarted, bool InProgress, bool Completed, bool Failed);
	static struct FLinearColor ConvertQuestResultToColor(EQuestResult InResult, const struct FLinearColor& NotStarted, const struct FLinearColor& InProgress, const struct FLinearColor& Completed, const struct FLinearColor& Failed);
	static class FText ConvertQuestResultToText(EQuestResult InResult, const class FText& NotStarted, const class FText& InProgress, const class FText& Completed, const class FText& Failed);
	static void FilterChangedObjectiveViewModels(const TArray<class UQuestObjectiveViewModel*>& OldList, const TArray<class UQuestObjectiveViewModel*>& NewList, TArray<class UQuestObjectiveViewModel*>* OutAdded, TArray<class UQuestObjectiveViewModel*>* OutRemoved);
	static void FilterChangedQuestContextViewModels(const TArray<class UQuestContextViewModel*>& OldList, const TArray<class UQuestContextViewModel*>& NewList, TArray<class UQuestContextViewModel*>* OutAdded, TArray<class UQuestContextViewModel*>* OutRemoved);
	static class UQuestComponent* FindRelevantQuestComponentFromActor(class AActor* Actor);
	static class FText FormatQuestText(const struct FQuestText& Text, class UQuestContext* Context);
	static class UQuestComponent* GetGameModeQuestComponent(const class UObject* WorldContext);
	static class UQuestComponent* GetGameStateQuestComponent(const class UObject* WorldContext);
	static class UQuestComponent* GetPlayerQuestComponent(class APlayerController* PlayerController);
	static class UQuestListViewModel* GetPlayerQuestListViewModel(class APlayerController* PlayerController);
	static class UQuestTrackerComponent* GetPlayerQuestTrackerComponent(class APlayerController* PlayerController);
	static class UQuestTrackerViewModel* GetPlayerQuestTrackerViewModel(class APlayerController* PlayerController);
	static class UQuestComponent* GetQuestComponentFromActor(class AActor* Actor, bool bLookForComponent);
	static class UQuestTrackerComponent* GetQuestTrackerComponentFromActor(class AActor* Actor, bool bLookForComponent);
	static bool GetQuestVariableValueAsBool(class UQuestContext* Context, const struct FQuestVariable& Variable);
	static float GetQuestVariableValueAsFloat(class UQuestContext* Context, const struct FQuestVariable& Variable);
	static int32 GetQuestVariableValueAsInteger(class UQuestContext* Context, const struct FQuestVariable& Variable);
	static class UQuestComponent* GetSharedQuestComponent(const class UObject* WorldContext);
	static void SendQuestMessage(const class UObject* WorldContext, const struct FGameplayTag& MessageTag, const struct FQuestEventPayload& Payload, class AActor* Recipient, class AActor* Sender);
	static void SetQuestVariableAsBool(class UQuestContext* Context, const struct FQuestVariable& Variable, bool NewValue);
	static void SetQuestVariableAsFloat(class UQuestContext* Context, const struct FQuestVariable& Variable, float NewValue);
	static void SetQuestVariableAsInteger(class UQuestContext* Context, const struct FQuestVariable& Variable, int32 NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"QuestUtilityLibrary">();
	}
	static class UQuestUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UQuestUtilityLibrary>();
	}
};
static_assert(alignof(UQuestUtilityLibrary) == 0x000008, "Wrong alignment on UQuestUtilityLibrary");
static_assert(sizeof(UQuestUtilityLibrary) == 0x000028, "Wrong size on UQuestUtilityLibrary");

}

