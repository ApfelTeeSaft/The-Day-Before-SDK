#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_BaseSlot

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FItemInfo_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ContainerPickupsInfo_structs.hpp"
#include "E_SlotStatus_structs.hpp"
#include "E_ItemColorTypes_structs.hpp"
#include "F_SlotSettings_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_BaseSlot.W_BaseSlot_C
// 0x03C8 (0x0648 - 0x0280)
class UW_BaseSlot_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       HoverAnim;                                         // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PurchaseAnim;                                      // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UButton*                                Button_CounterMinus;                               // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_CounterPlus;                                // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_IconContainer;                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HorizontalBox_Price;                               // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ColorGradient;                               // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_EquipmentMark;                               // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Highlight;                                   // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hover;                                       // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hover2;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ItemIcon;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_ItemIcon_Podlozhka;                          // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PriceBP;                                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_PriceIcon;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Price;                                     // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox_0;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBox_0;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Counter;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_Notenoughmoney;                            // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_SlotSize;                                  // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Count;                                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_ItemName;                                // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Price;                                   // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_ValueCounter;                            // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FContainerPickupsInfo                  PickupInfo;                                        // 0x0358(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFItemInfo                             ItemInfo;                                          // 0x03C0(0x0220)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         SlotIndex;                                         // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_SlotStatus                                  Status;                                            // 0x05E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FF_SlotSettings                        SlotSettings;                                      // 0x05E8(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UW_BaseContainer_C*                     ParentContainer;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         OccupantIndex;                                     // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Starttick;                                         // 0x0614(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_615[0x3];                                      // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DragOffset;                                        // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsSelected;                                       // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Price;                                             // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBuyLayout_;                                      // 0x0638(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentValue;                                      // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxValue;                                          // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddCount(int32 Param_AddCount);
	void AddItem(const struct FContainerPickupsInfo& Param_PickupInfo);
	void BndEvt__W_BaseSlot_Button_CounterMinus_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__W_BaseSlot_Button_CounterPlus_K2Node_ComponentBoundEvent_1_OnButtonPressedEvent__DelegateSignature();
	void Canstack(bool* Param_Canstack);
	void Change_Sell_Status(E_SlotStatus Param_Status);
	void ChangeCount(int32 NewCount);
	void ChangeStatus(E_SlotStatus Param_Status);
	void ClearSelection();
	void ClearSlot();
	void ExecuteUbergraph_W_BaseSlot(int32 EntryPoint);
	void Get_Pivot_Index(const struct FVector2D& Param_DragOffset, int32* Param_Index);
	bool GetEquipmentMark();
	void GetItemPrice(double* Param_Price);
	void OccupySlot(int32 Param_OccupantIndex);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnDragEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	struct FEventReply OnMouseButtonDoubleClick(const struct FGeometry& InMyGeometry, const struct FPointerEvent& InMouseEvent);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void PreConstruct(bool IsDesignTime);
	void SelectSlot();
	void SetCollisionEnabled(bool In_Is_Enabled);
	void SetDefaultSlotImages();
	void SetEquipmentMark(bool Param_IsVisible);
	void SetPrice();
	void SetSellPrice();
	void Unhover();
	void Update_Pickup_Info();
	void UpdateDragMove(class UDragDropOperation* DragDropOperation);
	void UpdateIcon();
	void UpdateItemCounter(int32 Value);
	void UpdateItemName();

	void GetCount(int32* MaxStack, int32* Count) const;
	void GetDefaultSlotBrushes(struct FSlateBrush* BG_Brush, struct FSlateBrush* Gradient_Brush, struct FSlateBrush* Highlight_Brush, struct FSlateBrush* Hover_Brush, struct FSlateBrush* Item_Brush) const;
	void GetItemBrush(struct FSlateBrush* SlateBrush) const;
	void GetItemId(int32* ItemId) const;
	void GetItemSlotDimension(int32* X, int32* Y) const;
	void GetItemWeight(double* Weight) const;
	void GetNumberOfSlotsUsed(int32* Number) const;
	void GetOcupantIndex(int32* OcupantIndex) const;
	void GetParentContainer(class UW_BaseContainer_C** Param_ParentContainer) const;
	void GetPickupInfo(struct FContainerPickupsInfo* Param_PickupInfo) const;
	void GetSlotBrushes(struct FSlateBrush* Hover2_Brush, struct FSlateBrush* Hover_Brush, struct FSlateBrush* BG_Brush, struct FSlateBrush* Gradient_Brush, struct FSlateBrush* Highlight_Brush, struct FSlateBrush* Item_Brush) const;
	void GetSlotIndex(int32* Param_SlotIndex) const;
	void GetSlotSize(struct FVector2D* SlotSize) const;
	void GetStatus(E_SlotStatus* Param_Status) const;
	void HasItem(bool* Has) const;
	void IsEmpty_(bool* bIsEmpty) const;
	void IsRotated_(bool* Result) const;
	struct FVector2D SwapVector(const struct FVector2D& Vector) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_BaseSlot_C">();
	}
	static class UW_BaseSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_BaseSlot_C>();
	}
};
static_assert(alignof(UW_BaseSlot_C) == 0x000008, "Wrong alignment on UW_BaseSlot_C");
static_assert(sizeof(UW_BaseSlot_C) == 0x000648, "Wrong size on UW_BaseSlot_C");
static_assert(offsetof(UW_BaseSlot_C, UberGraphFrame) == 0x000280, "Member 'UW_BaseSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, HoverAnim) == 0x000288, "Member 'UW_BaseSlot_C::HoverAnim' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, PurchaseAnim) == 0x000290, "Member 'UW_BaseSlot_C::PurchaseAnim' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Button_CounterMinus) == 0x000298, "Member 'UW_BaseSlot_C::Button_CounterMinus' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Button_CounterPlus) == 0x0002A0, "Member 'UW_BaseSlot_C::Button_CounterPlus' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, CanvasPanel_IconContainer) == 0x0002A8, "Member 'UW_BaseSlot_C::CanvasPanel_IconContainer' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, HorizontalBox_Price) == 0x0002B0, "Member 'UW_BaseSlot_C::HorizontalBox_Price' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_BG) == 0x0002B8, "Member 'UW_BaseSlot_C::Image_BG' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_ColorGradient) == 0x0002C0, "Member 'UW_BaseSlot_C::Image_ColorGradient' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_EquipmentMark) == 0x0002C8, "Member 'UW_BaseSlot_C::Image_EquipmentMark' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_Highlight) == 0x0002D0, "Member 'UW_BaseSlot_C::Image_Highlight' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_Hover) == 0x0002D8, "Member 'UW_BaseSlot_C::Image_Hover' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_Hover2) == 0x0002E0, "Member 'UW_BaseSlot_C::Image_Hover2' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_ItemIcon) == 0x0002E8, "Member 'UW_BaseSlot_C::Image_ItemIcon' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_ItemIcon_Podlozhka) == 0x0002F0, "Member 'UW_BaseSlot_C::Image_ItemIcon_Podlozhka' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_PriceBP) == 0x0002F8, "Member 'UW_BaseSlot_C::Image_PriceBP' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Image_PriceIcon) == 0x000300, "Member 'UW_BaseSlot_C::Image_PriceIcon' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Overlay_Price) == 0x000308, "Member 'UW_BaseSlot_C::Overlay_Price' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, RetainerBox_0) == 0x000310, "Member 'UW_BaseSlot_C::RetainerBox_0' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, ScaleBox_0) == 0x000318, "Member 'UW_BaseSlot_C::ScaleBox_0' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, SizeBox_Counter) == 0x000320, "Member 'UW_BaseSlot_C::SizeBox_Counter' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, SizeBox_Notenoughmoney) == 0x000328, "Member 'UW_BaseSlot_C::SizeBox_Notenoughmoney' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, SizeBox_SlotSize) == 0x000330, "Member 'UW_BaseSlot_C::SizeBox_SlotSize' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, TextBlock_Count) == 0x000338, "Member 'UW_BaseSlot_C::TextBlock_Count' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, TextBlock_ItemName) == 0x000340, "Member 'UW_BaseSlot_C::TextBlock_ItemName' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, TextBlock_Price) == 0x000348, "Member 'UW_BaseSlot_C::TextBlock_Price' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, TextBlock_ValueCounter) == 0x000350, "Member 'UW_BaseSlot_C::TextBlock_ValueCounter' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, PickupInfo) == 0x000358, "Member 'UW_BaseSlot_C::PickupInfo' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, ItemInfo) == 0x0003C0, "Member 'UW_BaseSlot_C::ItemInfo' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, SlotIndex) == 0x0005E0, "Member 'UW_BaseSlot_C::SlotIndex' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Status) == 0x0005E4, "Member 'UW_BaseSlot_C::Status' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, SlotSettings) == 0x0005E8, "Member 'UW_BaseSlot_C::SlotSettings' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, ParentContainer) == 0x000608, "Member 'UW_BaseSlot_C::ParentContainer' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, OccupantIndex) == 0x000610, "Member 'UW_BaseSlot_C::OccupantIndex' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Starttick) == 0x000614, "Member 'UW_BaseSlot_C::Starttick' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, DragOffset) == 0x000618, "Member 'UW_BaseSlot_C::DragOffset' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, bIsSelected) == 0x000628, "Member 'UW_BaseSlot_C::bIsSelected' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, Price) == 0x000630, "Member 'UW_BaseSlot_C::Price' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, IsBuyLayout_) == 0x000638, "Member 'UW_BaseSlot_C::IsBuyLayout_' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, CurrentValue) == 0x00063C, "Member 'UW_BaseSlot_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UW_BaseSlot_C, MaxValue) == 0x000640, "Member 'UW_BaseSlot_C::MaxValue' has a wrong offset!");

}

