#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_TurnAndScream

#include "Basic.hpp"

#include "BTT_TurnAndScream_classes.hpp"
#include "BTT_TurnAndScream_parameters.hpp"


namespace SDK
{

// Function BTT_TurnAndScream.BTT_TurnAndScream_C.ExecuteUbergraph_BTT_TurnAndScream
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_TurnAndScream_C::ExecuteUbergraph_BTT_TurnAndScream(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_TurnAndScream_C", "ExecuteUbergraph_BTT_TurnAndScream");

	Params::BTT_TurnAndScream_C_ExecuteUbergraph_BTT_TurnAndScream Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTT_TurnAndScream.BTT_TurnAndScream_C.GetDegreesForKey
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Degrees                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTT_TurnAndScream_C::GetDegreesForKey(double* Degrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_TurnAndScream_C", "GetDegreesForKey");

	Params::BTT_TurnAndScream_C_GetDegreesForKey Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Degrees != nullptr)
		*Degrees = Parms.Degrees;
}


// Function BTT_TurnAndScream.BTT_TurnAndScream_C.OnEndScreaming
// (Public, BlueprintCallable, BlueprintEvent)

void UBTT_TurnAndScream_C::OnEndScreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_TurnAndScream_C", "OnEndScreaming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BTT_TurnAndScream.BTT_TurnAndScream_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTT_TurnAndScream_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTT_TurnAndScream_C", "ReceiveExecuteAI");

	Params::BTT_TurnAndScream_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}

}

