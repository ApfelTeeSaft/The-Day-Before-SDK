#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SurvivalPlayer_Test

#include "Basic.hpp"

#include "EquipmentData_structs.hpp"
#include "Engine_structs.hpp"
#include "ClimbParams_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SurvivalPlayer_classes.hpp"
#include "ComponentAndTransform_structs.hpp"
#include "S_WindowClimb_structs.hpp"
#include "StanceState_structs.hpp"
#include "FMODStudio_structs.hpp"
#include "UMG_structs.hpp"
#include "StatType_structs.hpp"
#include "ClimBType_structs.hpp"
#include "CraftState_structs.hpp"
#include "BPE_Weapon_Type_structs.hpp"
#include "WE_NewDeathScreenState_structs.hpp"
#include "E_CarStatus_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SurvivalPlayer_Test.SurvivalPlayer_Test_C
// 0x0ED0 (0x4610 - 0x3740)
class ASurvivalPlayer_Test_C : public ASurvivalPlayer_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_SurvivalPlayer_Test_C;              // 0x3740(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       PlayerNameSphereCollision;                         // 0x3748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWorldPartitionStreamingSourceComponent* WorldPartitionStreamingSource;                     // 0x3750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x3758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight1;                                        // 0x3760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x3768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x3770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DashTimeline_1_FE9E97E949BE73FA711B769C9DF5A2C8;   // 0x3778(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DashTimeline__Direction_FE9E97E949BE73FA711B769C9DF5A2C8; // 0x377C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_377D[0x3];                                     // 0x377D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DashTimeline;                                      // 0x3780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ClimbWindowTimeline_BlendIn_4C2FA5F54A06EDE9B9DA88937C86BEEB; // 0x3788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ClimbWindowTimeline__Direction_4C2FA5F54A06EDE9B9DA88937C86BEEB; // 0x378C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_378D[0x3];                                     // 0x378D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ClimbWindowTimeline;                               // 0x3790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AfterClimbInputCheck__Direction_C14A8A8E4E36D6E64552009468A3566B; // 0x3798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3799[0x7];                                     // 0x3799(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AfterClimbInputCheck;                              // 0x37A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ClimbTimeline_BlendIn_5030B9EB4532DAF17BB4EDA84CE3E866; // 0x37A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ClimbTimeline__Direction_5030B9EB4532DAF17BB4EDA84CE3E866; // 0x37AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AD[0x3];                                     // 0x37AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ClimbTimeline;                                     // 0x37B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockDetectFence;                                  // 0x37B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37B9[0x7];                                     // 0x37B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FClimbParams                           ClimbParams;                                       // 0x37C0(0x00A8)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3868[0x8];                                     // 0x3868(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FComponentAndTransform                 ClimbLedgeLS;                                      // 0x3870(0x00C0)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             ClimbTarget;                                       // 0x3930(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbActualStartOffset;                            // 0x3990(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             ClimbAnimatedStartOffset;                          // 0x39F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleActualStartOffset;                           // 0x3A50(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Climbing;                                          // 0x3AB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB1[0x3];                                     // 0x3AB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewVar_0_0;                                        // 0x3AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AB8[0x8];                                     // 0x3AB8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ClimbStartTransform;                               // 0x3AC0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClimbIn;                                           // 0x3B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ClimbingWindow;                                    // 0x3B21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B22[0x6];                                     // 0x3B22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WindowLoc;                                         // 0x3B28(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WindowHeight;                                      // 0x3B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToWindow;                                  // 0x3B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WindowRot;                                         // 0x3B50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                WindowClimbAdditionalOffset;                       // 0x3B68(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_WindowClimb                         WindowClimbAssset;                                 // 0x3B80(0x0038)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstStart;                                        // 0x3BB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BB9[0x7];                                     // 0x3BB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ALP_ForTestsWeapons_C*                  CheatLP;                                           // 0x3BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FEquipmentData                         PantsInfo;                                         // 0x3BC8(0x0180)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FEquipmentData                         HelmetInfo;                                        // 0x3D48(0x0180)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FEquipmentData                         BackpackInfo;                                      // 0x3EC8(0x0180)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FEquipmentData                         ArmorInfo;                                         // 0x4048(0x0180)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FEquipmentData                         JacketInfo;                                        // 0x41C8(0x0180)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LetSnow;                                           // 0x4348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4349[0x7];                                     // 0x4349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DashCancelTimer;                                   // 0x4350(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        In_Strength_Multiplyer;                            // 0x4358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_PerksForTest_C*                      PerkWindow;                                        // 0x4360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFMODEventInstance                     GrassSound;                                        // 0x4368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LootPointInFocus;                                  // 0x4370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4371[0x7];                                     // 0x4371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 InsideCustomRoomId;                                // 0x4378(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 Phase;                                             // 0x4388(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, HasGetValueTypeHash)
	class FString                                 PlayerID;                                          // 0x4398(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class APS_TDB_C*>                      Prev_Squad;                                        // 0x43A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                DEBUGTeleportLocation;                             // 0x43B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ServerPosition;                                    // 0x43D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CheatCars;                                         // 0x43E8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TwostTierCap;                                      // 0x43F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OnestTierCap;                                      // 0x43F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LootCount;                                         // 0x4400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InPlayerHouse;                                     // 0x4404(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4405[0x3];                                     // 0x4405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerRoomBP_C*>                MyPlayerRoomArray;                                 // 0x4408(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class AAVS_VehicleMaster_C*                   Car_Ref;                                           // 0x4418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerSpawnPoint_C*>         Regions;                                           // 0x4420(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           TelepTimer;                                        // 0x4430(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Enter;                                             // 0x4438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4439[0x7];                                     // 0x4439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_V2_C*                   Char;                                              // 0x4440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_V2_C*                   SurvivalPlayer;                                    // 0x4448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvivalPlayer_V2_C*                   RoomOwner;                                         // 0x4450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          As_Guest;                                          // 0x4458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4459[0x7];                                     // 0x4459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerRoomBP_C*                        Room_Ref;                                          // 0x4460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoading;                                         // 0x4468(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4469[0x7];                                     // 0x4469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Last_House_Name;                                   // 0x4470(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ChatPreviewBeginOverlap;                           // 0x4480(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             ChatPreviewEndOverlap;                             // 0x4490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 TelepCarRef;                                       // 0x44A0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASurvPC_C*                              Interacting_PC;                                    // 0x44A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnRoomEnteredDisp;                                 // 0x44B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ATDB_GameMode_C*                        As_TDB_Game_Mode;                                  // 0x44C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerSpawnPoint_C*>         SPTier1;                                           // 0x44C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawnPoint_C*>         SPTier2;                                           // 0x44D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawnPoint_C*>         SPTier3;                                           // 0x44E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawnPoint_C*>         SPTier4;                                           // 0x44F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMap<class ABP_PlayerSpawnPoint_C*, int32>    SPPlayer;                                          // 0x4508(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawnPoint_C*>         RandomRegions;                                     // 0x4558(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          ToHub_;                                            // 0x4568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PartyTeleport;                                     // 0x4569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_456A[0x6];                                     // 0x456A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerSpawnPoint_C*                 PickedSpawnPoint;                                  // 0x4570(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentAliases;                                    // 0x4578(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FFMODEventInstance                     EscapeSound;                                       // 0x4588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class FString                                 DebugFGearString;                                  // 0x4590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          EnablePhasePrint;                                  // 0x45A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          With_Car;                                          // 0x45A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45A2[0x6];                                     // 0x45A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetComponent*                       PlayerNameWidgetComponent;                         // 0x45A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_PlayerName3DWidget_C*              PlayerNameWidget;                                  // 0x45B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 PhaseZapas;                                        // 0x45B8(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          FullyLoaded;                                       // 0x45C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          No_Backpack_Teleporter;                            // 0x45C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Without_Backpack;                               // 0x45CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExitGPS;                                           // 0x45CB(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45CC[0x4];                                     // 0x45CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerRoomBP_C*                        PlayerRoomRef;                                     // 0x45D0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ASurvivalPlayer_V2_C*>           NameShowPlayers;                                   // 0x45D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PlayerNameInBunker;                                // 0x45E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45E9[0x7];                                     // 0x45E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayerNameBunkerRadius;                            // 0x45F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PlayerNameCityRadius;                              // 0x45F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnEvaquated;                                       // 0x4600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AfterClimbInputCheck__FinishedFunc();
	void AfterClimbInputCheck__UpdateFunc();
	void AnotherPlayerLeaveSquad(class APS_TDB_C* LeavePS);
	void BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__SurvivalPlayer_Test_PlayerNameSphereCollision_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CalculateBSh();
	void CancelTeleport();
	void CancelTelepOwning();
	void CantMovePrint();
	void CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, bool* HasRoom);
	void ChatPreviewBeginOverlap__DelegateSignature(class AActor* Other_Actor_Ref);
	void ChatPreviewEndOverlap__DelegateSignature(class AActor* Other_Actor_Ref);
	void CheckForClimb();
	void CheckHB();
	void CHeckHouseBox();
	void CheckNamesTick();
	void CheckNamesTickAlternative();
	void ClimbCheck(bool* Vault);
	void ClimbPlayRate(double* PlayRate);
	void ClimbStart(double ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType ClimbType, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform, double PlayRate);
	void ClimbStartMulti(double ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType ClimbType, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform, double PlayRate);
	void ClimbStartServ(double ClimbHeight, const struct FComponentAndTransform& ClimbLedgeWS, EClimbType ClimbType, bool In, double Width, bool Move, const struct FTransform& Param_ClimbStartTransform, double PlayRate);
	void ClimbTimeline__FinishedFunc();
	void ClimbTimeline__UpdateFunc();
	void ClimbUpdate(double BlendIn, bool* Break);
	void ClimbWindowStart(const struct FVector& Param_WindowLoc, const struct FVector& ImpactNormal, double Height);
	void ClimbWindowStartMulti(const struct FVector& Param_WindowLoc, const struct FVector& ImpactNormal, double Height);
	void ClimbWindowStartServ(const struct FVector& Param_WindowLoc, const struct FVector& ImpactNormal, double Height);
	void ClimbWindowTimeline__FinishedFunc();
	void ClimbWindowTimeline__UpdateFunc();
	void ClimbWindowUpdate(double BlendIn, bool* Break);
	void CreateItemCustomRoomMulti(class FName RowName, bool Change, bool Remove, const struct FTransform& Transform, const struct FBuildingInfo_Struct& InputPin, int32 ID, class APlayerRoomBP_C* RoomRef, TSoftClassPtr<class UClass> Param_Class);
	void CreateItemInCustomRoomServer(TSoftClassPtr<class UClass> Param_Class, const struct FTransform& Transform, bool Change, bool Destroy, int32 ItemId, class FName DT_RowName, const struct FBuildingInfo_Struct& Info);
	void CreateMatArray(class UMeshComponent* Self2, struct FMaterialArray* MatArray1);
	void CStat(const class FString& Stat_type, double Amount);
	void CustomRoomCollision(class APlayerRoomBP_C* RoomRef);
	void DashCancel();
	void DashTimeline__FinishedFunc();
	void DashTimeline__UpdateFunc();
	void DebugFGear();
	void DEBUGNextTime();
	void DEBUGTeleportMulti(const struct FVector& Location, bool Force);
	void DEBUGTeleportServer(const struct FVector& Location, bool Force);
	void DEBUGTimlapseMode();
	void DestroyCarServ();
	void DestroyVehicle(class AAVS_VehicleMaster_C* CarRef);
	void EnableSnowMask(bool Param_LetSnow);
	void EnterCarOnTeleport();
	void EnterRoom(bool Param_Enter, class ASurvivalPlayer_V2_C* Param_Char, bool AsGuest, class ASurvivalPlayer_V2_C* Param_Owner, const class FString& RoomName);
	void ExecuteUbergraph_SurvivalPlayer_Test(int32 EntryPoint);
	void ExitSwitcher(bool On_);
	void ExitSwitcherServer(bool On_);
	void FindEquipMeshes();
	void FindEquippableMesh(class USkinnedMeshComponent* Target, struct FEquipmentData* Out_Row);
	struct FVector GetCapsuleBaseLocation(double ZOffset);
	void GetClimbAsset(EClimbType ClimbType, bool In, bool Move, double Height, struct FClimbAsset* Value);
	void GetDamage(class FName BoneName);
	void GetNameWidgetComponent(class UWidgetComponent** PlayerNameComponent, class UWBP_PlayerName3DWidget_C** Param_PlayerNameWidget);
	struct FTransform GetPivotTarget();
	void GetTraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* NewParam1);
	void GetWindowClimbAsset(double Height, struct FS_WindowClimb* WindowClimbAsset);
	void GiveCarRefToSquad(class AActor* CarRef);
	void HidePlayer(bool Param_PlayerHided);
	void HouseEnter();
	void HouseExit();
	void Immortal();
	void Init_House_Box();
	void InitLocalPlayer();
	void InitNameWidget();
	void InpActEvt_Ctrl_F_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpAxisEvt_InclineAxis_K2Node_InputAxisEvent_0(float AxisValue);
	void InvokeDamage(class AActor* DamageCauser, class AActor* DamageTarget);
	void InvokeDamageServ(class AActor* DamageCauser, class AActor* DamageTarget);
	void ItemDropRequest(class UJSI_Slot_C* ItemRef, const struct FFItemInfo& Param_ItemInfo, int32 Count, class UJSIContainer_C* Container);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void KnockedDown(class APawn* Param_Killer);
	void LightRotation(double Param_Yaw, double Param_Pitch);
	void LocalAcceptInviteToHome();
	void LocationAnnul();
	void LootPointResetServerDEBUG();
	void LootSpeedTrain(bool* Passed);
	void MakeCarMissing(const class FString& CarName, bool Bought);
	void MakeCarMissingServ(const class FString& Car, bool Condition);
	void ManualBeginPlay();
	void MultiDeathRagdoll(double HitAngle, const struct FVector& HitLocation, class FName BoneName);
	void MultiLocationSync(const struct FVector& Location);
	void MultiQEXplode();
	void OnCraftProcessEnded();
	void OnCraftProcessStarted();
	void OnCraftWIndowClosed();
	void OnCraftWindowOpened();
	void OnEvaquated__DelegateSignature();
	void OnEvaquatedServ();
	void OnHideDeathScreen(EWE_NewDeathScreenState NewScreenState);
	void OnRep_IsLoading();
	void OnRep_Phase();
	void OnRoomEnteredDisp__DelegateSignature();
	void OnStandRotation();
	void OnStartTeleporting();
	void Phase_Print_Func();
	void Pick_Point_Func(TArray<class ABP_PlayerSpawnPoint_C*>& Param_RandomRegions, bool Param_ToHub_, bool WithCar);
	void PickSpawnPointLocal(const TArray<class ABP_PlayerSpawnPoint_C*>& SP_Array, const bool ToHub, bool WithCar);
	void PickSpawnPointServ(TArray<class ABP_PlayerSpawnPoint_C*>& SP_Array, bool ToHub, bool WithCar);
	void PossesTestChar();
	void ProjectileOptimization();
	void ReceiveBeginPlay();
	void ReceiveDebugFGear(const class FString& DebugMessage);
	void ReceiveDestroyed();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ReInitHouse(const class FString& Param_HouseName);
	void RemoveNamePlayers();
	void RenderMarker();
	void RoomEnteredMulti(class APlayerRoomBP_C* Room, class ASurvivalPlayer_V2_C* Param_Char, class ASurvivalPlayer_V2_C* Param_Owner, bool Param_As_Guest);
	void RoomEnteredServ(class APlayerRoomBP_C* Room, class ASurvivalPlayer_V2_C* Param_Char, class ASurvivalPlayer_V2_C* Param_Owner, bool Param_As_Guest);
	void RoomInsides(class APlayerRoomBP_C* Room, const struct FPlayerRoomItemsStructure& Info);
	void RoomMulti(class APlayerRoomBP_C* RoomRef, bool Param_Enter, class ASurvivalPlayer_V2_C* Param_Char, bool AsGuest, class ASurvivalPlayer_V2_C* Param_Owner);
	void RoomServer(bool Param_Enter, class ASurvivalPlayer_V2_C* Param_Char, bool AsGuest, class ASurvivalPlayer_V2_C* Param_Owner, const class FString& RoomName);
	void RunFadelocal();
	void SelfDamage();
	void ServAcceptInviteToHome();
	void ServerChangeWorldOffset();
	void ServerKnockOutDoor(class ABP_Door_C* Door);
	void ServerLocationSync();
	void ServerTest();
	void Set_User_Name_In_Widget(const class FString& UserName);
	void Set3DWidgetPlayerName(class AActor* Ref);
	void SetAnimInstClassForServer();
	void SetBlizzard(bool IsBlizzard);
	void SetClimbCamera(EClimbType ClimbType, bool In, double Height);
	void SetCraftState(ECraftState State);
	void SetCraftStateServ(ECraftState Param_CraftState);
	void SetCurrentAliases_Serv(const class FString& Param_CurrentAliases);
	void SetEquipTier();
	void SetPlayerIsLoading(bool True_);
	void SetSnowMask();
	void SetStaminaUse(bool StaminaUse);
	void SetStance(EStanceState NewStance);
	void SetStatCutscene(const EStatType Key, const double Value);
	void SetVisiblePlayerName(bool Show);
	void SetWeaponAmmoCount(int32 CurrentAmmo, int32 MaxAmmo);
	void SetWeaponAmmoVisibility(bool Visible);
	void SetWeaponType(EBPE_Weapon_Type Param_WeaponType);
	void ShowFadeIn(bool Showed);
	void SnowMaskControl();
	void SPANCR();
	void SpawnCar(int32 Param_Index);
	void SpawnCarAndEnter(class UClass* CarRef, const struct FTransform& Trans, bool OnlyEnter);
	void SpawnCarAndEnterServ(class UClass* CarRef, const struct FTransform& Trans);
	void SpawnCheatBox(int32 Type);
	void SpawnCheatChest(const struct FVector& Spawn_Transform_Location);
	void SpawnDodgeServ(int32 Param_Index);
	void SpawnLightBox(const struct FVector& Spawn_Transform_Location);
	void SpawnWorkbench(const struct FVector& Location);
	void SquadIdChanges();
	void StartTelepFromCar(class AAVS_VehicleMaster_C* Car, const TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions);
	void StartTelepFromCarOwn(class AAVS_VehicleMaster_C* Param_Car_Ref, TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions);
	void StartTelepLocal();
	void StartTeleporting();
	void StartTelepServ();
	void SurvGrassSound(class UFMODEvent* Sound, float SoundDelay);
	void Teleporting(double Timer, class AAVS_VehicleMaster_C* CarRef, const TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions, bool bIsWithoutBackpack, bool NoBackpackTeleporter, bool NightWarning, bool DayWarning);
	void TeleportingLogic();
	void TeleportingOwning(double Timer, class AAVS_VehicleMaster_C* CarRef, const TArray<class ABP_PlayerSpawnPoint_C*>& Param_Regions, bool bIsWithoutBackpack, bool NoBackpackTeleporter, bool NightWarning, bool DayWarning);
	void ThrowGrande();
	void ToggleCutsceneCamera();
	void TpStart();
	void WindowClimbCheck(bool* CanWindowClimb);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SurvivalPlayer_Test_C">();
	}
	static class ASurvivalPlayer_Test_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASurvivalPlayer_Test_C>();
	}
};
static_assert(alignof(ASurvivalPlayer_Test_C) == 0x000010, "Wrong alignment on ASurvivalPlayer_Test_C");
static_assert(sizeof(ASurvivalPlayer_Test_C) == 0x004610, "Wrong size on ASurvivalPlayer_Test_C");
static_assert(offsetof(ASurvivalPlayer_Test_C, UberGraphFrame_SurvivalPlayer_Test_C) == 0x003740, "Member 'ASurvivalPlayer_Test_C::UberGraphFrame_SurvivalPlayer_Test_C' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerNameSphereCollision) == 0x003748, "Member 'ASurvivalPlayer_Test_C::PlayerNameSphereCollision' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, WorldPartitionStreamingSource) == 0x003750, "Member 'ASurvivalPlayer_Test_C::WorldPartitionStreamingSource' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Widget) == 0x003758, "Member 'ASurvivalPlayer_Test_C::Widget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, RectLight1) == 0x003760, "Member 'ASurvivalPlayer_Test_C::RectLight1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, RectLight) == 0x003768, "Member 'ASurvivalPlayer_Test_C::RectLight' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PhysicalAnimation) == 0x003770, "Member 'ASurvivalPlayer_Test_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DashTimeline_1_FE9E97E949BE73FA711B769C9DF5A2C8) == 0x003778, "Member 'ASurvivalPlayer_Test_C::DashTimeline_1_FE9E97E949BE73FA711B769C9DF5A2C8' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DashTimeline__Direction_FE9E97E949BE73FA711B769C9DF5A2C8) == 0x00377C, "Member 'ASurvivalPlayer_Test_C::DashTimeline__Direction_FE9E97E949BE73FA711B769C9DF5A2C8' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DashTimeline) == 0x003780, "Member 'ASurvivalPlayer_Test_C::DashTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbWindowTimeline_BlendIn_4C2FA5F54A06EDE9B9DA88937C86BEEB) == 0x003788, "Member 'ASurvivalPlayer_Test_C::ClimbWindowTimeline_BlendIn_4C2FA5F54A06EDE9B9DA88937C86BEEB' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbWindowTimeline__Direction_4C2FA5F54A06EDE9B9DA88937C86BEEB) == 0x00378C, "Member 'ASurvivalPlayer_Test_C::ClimbWindowTimeline__Direction_4C2FA5F54A06EDE9B9DA88937C86BEEB' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbWindowTimeline) == 0x003790, "Member 'ASurvivalPlayer_Test_C::ClimbWindowTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, AfterClimbInputCheck__Direction_C14A8A8E4E36D6E64552009468A3566B) == 0x003798, "Member 'ASurvivalPlayer_Test_C::AfterClimbInputCheck__Direction_C14A8A8E4E36D6E64552009468A3566B' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, AfterClimbInputCheck) == 0x0037A0, "Member 'ASurvivalPlayer_Test_C::AfterClimbInputCheck' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbTimeline_BlendIn_5030B9EB4532DAF17BB4EDA84CE3E866) == 0x0037A8, "Member 'ASurvivalPlayer_Test_C::ClimbTimeline_BlendIn_5030B9EB4532DAF17BB4EDA84CE3E866' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbTimeline__Direction_5030B9EB4532DAF17BB4EDA84CE3E866) == 0x0037AC, "Member 'ASurvivalPlayer_Test_C::ClimbTimeline__Direction_5030B9EB4532DAF17BB4EDA84CE3E866' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbTimeline) == 0x0037B0, "Member 'ASurvivalPlayer_Test_C::ClimbTimeline' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, BlockDetectFence) == 0x0037B8, "Member 'ASurvivalPlayer_Test_C::BlockDetectFence' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbParams) == 0x0037C0, "Member 'ASurvivalPlayer_Test_C::ClimbParams' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbLedgeLS) == 0x003870, "Member 'ASurvivalPlayer_Test_C::ClimbLedgeLS' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbTarget) == 0x003930, "Member 'ASurvivalPlayer_Test_C::ClimbTarget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbActualStartOffset) == 0x003990, "Member 'ASurvivalPlayer_Test_C::ClimbActualStartOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbAnimatedStartOffset) == 0x0039F0, "Member 'ASurvivalPlayer_Test_C::ClimbAnimatedStartOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, MantleActualStartOffset) == 0x003A50, "Member 'ASurvivalPlayer_Test_C::MantleActualStartOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Climbing) == 0x003AB0, "Member 'ASurvivalPlayer_Test_C::Climbing' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, NewVar_0_0) == 0x003AB4, "Member 'ASurvivalPlayer_Test_C::NewVar_0_0' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbStartTransform) == 0x003AC0, "Member 'ASurvivalPlayer_Test_C::ClimbStartTransform' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbIn) == 0x003B20, "Member 'ASurvivalPlayer_Test_C::ClimbIn' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ClimbingWindow) == 0x003B21, "Member 'ASurvivalPlayer_Test_C::ClimbingWindow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, WindowLoc) == 0x003B28, "Member 'ASurvivalPlayer_Test_C::WindowLoc' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, WindowHeight) == 0x003B40, "Member 'ASurvivalPlayer_Test_C::WindowHeight' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DistanceToWindow) == 0x003B48, "Member 'ASurvivalPlayer_Test_C::DistanceToWindow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, WindowRot) == 0x003B50, "Member 'ASurvivalPlayer_Test_C::WindowRot' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, WindowClimbAdditionalOffset) == 0x003B68, "Member 'ASurvivalPlayer_Test_C::WindowClimbAdditionalOffset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, WindowClimbAssset) == 0x003B80, "Member 'ASurvivalPlayer_Test_C::WindowClimbAssset' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, FirstStart) == 0x003BB8, "Member 'ASurvivalPlayer_Test_C::FirstStart' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, CheatLP) == 0x003BC0, "Member 'ASurvivalPlayer_Test_C::CheatLP' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PantsInfo) == 0x003BC8, "Member 'ASurvivalPlayer_Test_C::PantsInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, HelmetInfo) == 0x003D48, "Member 'ASurvivalPlayer_Test_C::HelmetInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, BackpackInfo) == 0x003EC8, "Member 'ASurvivalPlayer_Test_C::BackpackInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ArmorInfo) == 0x004048, "Member 'ASurvivalPlayer_Test_C::ArmorInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, JacketInfo) == 0x0041C8, "Member 'ASurvivalPlayer_Test_C::JacketInfo' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, LetSnow) == 0x004348, "Member 'ASurvivalPlayer_Test_C::LetSnow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DashCancelTimer) == 0x004350, "Member 'ASurvivalPlayer_Test_C::DashCancelTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, In_Strength_Multiplyer) == 0x004358, "Member 'ASurvivalPlayer_Test_C::In_Strength_Multiplyer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PerkWindow) == 0x004360, "Member 'ASurvivalPlayer_Test_C::PerkWindow' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, GrassSound) == 0x004368, "Member 'ASurvivalPlayer_Test_C::GrassSound' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, LootPointInFocus) == 0x004370, "Member 'ASurvivalPlayer_Test_C::LootPointInFocus' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, InsideCustomRoomId) == 0x004378, "Member 'ASurvivalPlayer_Test_C::InsideCustomRoomId' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Phase) == 0x004388, "Member 'ASurvivalPlayer_Test_C::Phase' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerID) == 0x004398, "Member 'ASurvivalPlayer_Test_C::PlayerID' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Prev_Squad) == 0x0043A8, "Member 'ASurvivalPlayer_Test_C::Prev_Squad' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DEBUGTeleportLocation) == 0x0043B8, "Member 'ASurvivalPlayer_Test_C::DEBUGTeleportLocation' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ServerPosition) == 0x0043D0, "Member 'ASurvivalPlayer_Test_C::ServerPosition' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, CheatCars) == 0x0043E8, "Member 'ASurvivalPlayer_Test_C::CheatCars' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, TwostTierCap) == 0x0043F0, "Member 'ASurvivalPlayer_Test_C::TwostTierCap' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, OnestTierCap) == 0x0043F8, "Member 'ASurvivalPlayer_Test_C::OnestTierCap' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, LootCount) == 0x004400, "Member 'ASurvivalPlayer_Test_C::LootCount' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, InPlayerHouse) == 0x004404, "Member 'ASurvivalPlayer_Test_C::InPlayerHouse' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, MyPlayerRoomArray) == 0x004408, "Member 'ASurvivalPlayer_Test_C::MyPlayerRoomArray' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Car_Ref) == 0x004418, "Member 'ASurvivalPlayer_Test_C::Car_Ref' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Regions) == 0x004420, "Member 'ASurvivalPlayer_Test_C::Regions' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, TelepTimer) == 0x004430, "Member 'ASurvivalPlayer_Test_C::TelepTimer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Enter) == 0x004438, "Member 'ASurvivalPlayer_Test_C::Enter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Char) == 0x004440, "Member 'ASurvivalPlayer_Test_C::Char' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, SurvivalPlayer) == 0x004448, "Member 'ASurvivalPlayer_Test_C::SurvivalPlayer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, RoomOwner) == 0x004450, "Member 'ASurvivalPlayer_Test_C::RoomOwner' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, As_Guest) == 0x004458, "Member 'ASurvivalPlayer_Test_C::As_Guest' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Room_Ref) == 0x004460, "Member 'ASurvivalPlayer_Test_C::Room_Ref' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, IsLoading) == 0x004468, "Member 'ASurvivalPlayer_Test_C::IsLoading' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Last_House_Name) == 0x004470, "Member 'ASurvivalPlayer_Test_C::Last_House_Name' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ChatPreviewBeginOverlap) == 0x004480, "Member 'ASurvivalPlayer_Test_C::ChatPreviewBeginOverlap' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ChatPreviewEndOverlap) == 0x004490, "Member 'ASurvivalPlayer_Test_C::ChatPreviewEndOverlap' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, TelepCarRef) == 0x0044A0, "Member 'ASurvivalPlayer_Test_C::TelepCarRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Interacting_PC) == 0x0044A8, "Member 'ASurvivalPlayer_Test_C::Interacting_PC' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, OnRoomEnteredDisp) == 0x0044B0, "Member 'ASurvivalPlayer_Test_C::OnRoomEnteredDisp' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, As_TDB_Game_Mode) == 0x0044C0, "Member 'ASurvivalPlayer_Test_C::As_TDB_Game_Mode' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, SPTier1) == 0x0044C8, "Member 'ASurvivalPlayer_Test_C::SPTier1' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, SPTier2) == 0x0044D8, "Member 'ASurvivalPlayer_Test_C::SPTier2' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, SPTier3) == 0x0044E8, "Member 'ASurvivalPlayer_Test_C::SPTier3' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, SPTier4) == 0x0044F8, "Member 'ASurvivalPlayer_Test_C::SPTier4' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, SPPlayer) == 0x004508, "Member 'ASurvivalPlayer_Test_C::SPPlayer' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, RandomRegions) == 0x004558, "Member 'ASurvivalPlayer_Test_C::RandomRegions' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ToHub_) == 0x004568, "Member 'ASurvivalPlayer_Test_C::ToHub_' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PartyTeleport) == 0x004569, "Member 'ASurvivalPlayer_Test_C::PartyTeleport' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PickedSpawnPoint) == 0x004570, "Member 'ASurvivalPlayer_Test_C::PickedSpawnPoint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, CurrentAliases) == 0x004578, "Member 'ASurvivalPlayer_Test_C::CurrentAliases' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, EscapeSound) == 0x004588, "Member 'ASurvivalPlayer_Test_C::EscapeSound' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, DebugFGearString) == 0x004590, "Member 'ASurvivalPlayer_Test_C::DebugFGearString' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, EnablePhasePrint) == 0x0045A0, "Member 'ASurvivalPlayer_Test_C::EnablePhasePrint' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, With_Car) == 0x0045A1, "Member 'ASurvivalPlayer_Test_C::With_Car' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerNameWidgetComponent) == 0x0045A8, "Member 'ASurvivalPlayer_Test_C::PlayerNameWidgetComponent' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerNameWidget) == 0x0045B0, "Member 'ASurvivalPlayer_Test_C::PlayerNameWidget' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PhaseZapas) == 0x0045B8, "Member 'ASurvivalPlayer_Test_C::PhaseZapas' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, FullyLoaded) == 0x0045C8, "Member 'ASurvivalPlayer_Test_C::FullyLoaded' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, No_Backpack_Teleporter) == 0x0045C9, "Member 'ASurvivalPlayer_Test_C::No_Backpack_Teleporter' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, Is_Without_Backpack) == 0x0045CA, "Member 'ASurvivalPlayer_Test_C::Is_Without_Backpack' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, ExitGPS) == 0x0045CB, "Member 'ASurvivalPlayer_Test_C::ExitGPS' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerRoomRef) == 0x0045D0, "Member 'ASurvivalPlayer_Test_C::PlayerRoomRef' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, NameShowPlayers) == 0x0045D8, "Member 'ASurvivalPlayer_Test_C::NameShowPlayers' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerNameInBunker) == 0x0045E8, "Member 'ASurvivalPlayer_Test_C::PlayerNameInBunker' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerNameBunkerRadius) == 0x0045F0, "Member 'ASurvivalPlayer_Test_C::PlayerNameBunkerRadius' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, PlayerNameCityRadius) == 0x0045F8, "Member 'ASurvivalPlayer_Test_C::PlayerNameCityRadius' has a wrong offset!");
static_assert(offsetof(ASurvivalPlayer_Test_C, OnEvaquated) == 0x004600, "Member 'ASurvivalPlayer_Test_C::OnEvaquated' has a wrong offset!");

}

