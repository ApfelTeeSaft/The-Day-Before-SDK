#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpawnManagerChild

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "S_FloatMinMax_structs.hpp"
#include "S_IntegerMinMax_structs.hpp"
#include "E_SpawnGroup_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_AIType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SpawnManagerChild.SpawnManagerChild_C
// 0x0118 (0x01B8 - 0x00A0)
class USpawnManagerChild_C final : public UActorComponent
{
public:
	bool                                          IsActive_;                                         // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_FloatMinMax                         BeginDelay;                                        // 0x00A4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_IntegerMinMax                       OneSpawnLimitRange;                                // 0x00AC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_IntegerMinMax                       TwoSpawnLimitRange;                                // 0x00B4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASurvivalPlayer_C*                      Player;                                            // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AAISpawnManager_C*                      AISpawnerManager;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         GroupSize;                                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PlayerAIs;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FS_IntegerMinMax                       ThreeSpawnLimitRange;                              // 0x00E8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_IntegerMinMax                       FourSpawnLimitRange;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZombieLimit;                                       // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  _;                                                 // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CountIndex;                                        // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_SpawnGroup                                  SpawnGroupType;                                    // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AIType                                      AIType;                                            // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                ItemScore;                                         // 0x0130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ItemIndex;                                         // 0x0140(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        DelayBetweenSpawns;                                // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BigDelayBetweenSpawns;                             // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SpawnsCount;                                       // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerKillsCount;                                  // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerKillsLimitForBigDelay;                       // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockBanditSpawn;                                  // 0x016C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BanditGroupSize;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BanditCountIndex;                                  // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                ItemScoreBandit;                                   // 0x0178(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 ItemIndexBandit;                                   // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         AIBandits;                                         // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          BlockForZombies;                                   // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CountLevel;                                        // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ZombeLimitDefault;                                 // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CalculateSpawnLocation();
	void CheckNearPlayers(const struct FVector& Param_SpawnLocation);
	void GetZoneSize();
	void SetGroupSize(E_SpawnGroup GroupType, E_AIType Param_AIType);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SpawnManagerChild_C">();
	}
	static class USpawnManagerChild_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpawnManagerChild_C>();
	}
};
static_assert(alignof(USpawnManagerChild_C) == 0x000008, "Wrong alignment on USpawnManagerChild_C");
static_assert(sizeof(USpawnManagerChild_C) == 0x0001B8, "Wrong size on USpawnManagerChild_C");
static_assert(offsetof(USpawnManagerChild_C, IsActive_) == 0x0000A0, "Member 'USpawnManagerChild_C::IsActive_' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, BeginDelay) == 0x0000A4, "Member 'USpawnManagerChild_C::BeginDelay' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, OneSpawnLimitRange) == 0x0000AC, "Member 'USpawnManagerChild_C::OneSpawnLimitRange' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, TwoSpawnLimitRange) == 0x0000B4, "Member 'USpawnManagerChild_C::TwoSpawnLimitRange' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, Player) == 0x0000C0, "Member 'USpawnManagerChild_C::Player' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, AISpawnerManager) == 0x0000C8, "Member 'USpawnManagerChild_C::AISpawnerManager' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, GroupSize) == 0x0000D0, "Member 'USpawnManagerChild_C::GroupSize' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, PlayerAIs) == 0x0000D8, "Member 'USpawnManagerChild_C::PlayerAIs' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ThreeSpawnLimitRange) == 0x0000E8, "Member 'USpawnManagerChild_C::ThreeSpawnLimitRange' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, FourSpawnLimitRange) == 0x0000F0, "Member 'USpawnManagerChild_C::FourSpawnLimitRange' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ZombieLimit) == 0x0000F8, "Member 'USpawnManagerChild_C::ZombieLimit' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, _) == 0x000100, "Member 'USpawnManagerChild_C::_' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, CountIndex) == 0x000110, "Member 'USpawnManagerChild_C::CountIndex' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, SpawnGroupType) == 0x000114, "Member 'USpawnManagerChild_C::SpawnGroupType' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, AIType) == 0x000115, "Member 'USpawnManagerChild_C::AIType' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, SpawnLocation) == 0x000118, "Member 'USpawnManagerChild_C::SpawnLocation' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ItemScore) == 0x000130, "Member 'USpawnManagerChild_C::ItemScore' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ItemIndex) == 0x000140, "Member 'USpawnManagerChild_C::ItemIndex' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, DelayBetweenSpawns) == 0x000150, "Member 'USpawnManagerChild_C::DelayBetweenSpawns' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, BigDelayBetweenSpawns) == 0x000158, "Member 'USpawnManagerChild_C::BigDelayBetweenSpawns' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, SpawnsCount) == 0x000160, "Member 'USpawnManagerChild_C::SpawnsCount' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, PlayerKillsCount) == 0x000164, "Member 'USpawnManagerChild_C::PlayerKillsCount' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, PlayerKillsLimitForBigDelay) == 0x000168, "Member 'USpawnManagerChild_C::PlayerKillsLimitForBigDelay' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, BlockBanditSpawn) == 0x00016C, "Member 'USpawnManagerChild_C::BlockBanditSpawn' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, BanditGroupSize) == 0x000170, "Member 'USpawnManagerChild_C::BanditGroupSize' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, BanditCountIndex) == 0x000174, "Member 'USpawnManagerChild_C::BanditCountIndex' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ItemScoreBandit) == 0x000178, "Member 'USpawnManagerChild_C::ItemScoreBandit' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ItemIndexBandit) == 0x000188, "Member 'USpawnManagerChild_C::ItemIndexBandit' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, AIBandits) == 0x000198, "Member 'USpawnManagerChild_C::AIBandits' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, BlockForZombies) == 0x0001A8, "Member 'USpawnManagerChild_C::BlockForZombies' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, CountLevel) == 0x0001AC, "Member 'USpawnManagerChild_C::CountLevel' has a wrong offset!");
static_assert(offsetof(USpawnManagerChild_C, ZombeLimitDefault) == 0x0001B0, "Member 'USpawnManagerChild_C::ZombeLimitDefault' has a wrong offset!");

}

